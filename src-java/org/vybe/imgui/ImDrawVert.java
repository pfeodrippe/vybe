// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImDrawVert {
 *     ImVec2 pos;
 *     ImVec2 uv;
 *     ImU32 col;
 * }
 * }
 */
public class ImDrawVert {

    ImDrawVert() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImVec2.layout().withName("pos"),
        ImVec2.layout().withName("uv"),
        imgui.C_INT.withName("col")
    ).withName("ImDrawVert");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout pos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 pos
     * }
     */
    public static final GroupLayout pos$layout() {
        return pos$LAYOUT;
    }

    private static final long pos$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 pos
     * }
     */
    public static final long pos$offset() {
        return pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 pos
     * }
     */
    public static MemorySegment pos(MemorySegment struct) {
        return struct.asSlice(pos$OFFSET, pos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 pos
     * }
     */
    public static void pos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pos$OFFSET, pos$LAYOUT.byteSize());
    }

    private static final GroupLayout uv$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("uv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 uv
     * }
     */
    public static final GroupLayout uv$layout() {
        return uv$LAYOUT;
    }

    private static final long uv$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 uv
     * }
     */
    public static final long uv$offset() {
        return uv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 uv
     * }
     */
    public static MemorySegment uv(MemorySegment struct) {
        return struct.asSlice(uv$OFFSET, uv$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 uv
     * }
     */
    public static void uv(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, uv$OFFSET, uv$LAYOUT.byteSize());
    }

    private static final OfInt col$LAYOUT = (OfInt)$LAYOUT.select(groupElement("col"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 col
     * }
     */
    public static final OfInt col$layout() {
        return col$LAYOUT;
    }

    private static final long col$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 col
     * }
     */
    public static final long col$offset() {
        return col$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 col
     * }
     */
    public static int col(MemorySegment struct) {
        return struct.get(col$LAYOUT, col$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 col
     * }
     */
    public static void col(MemorySegment struct, int fieldValue) {
        struct.set(col$LAYOUT, col$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

