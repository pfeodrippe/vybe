// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiPopupData {
 *     ImGuiID PopupId;
 *     ImGuiWindow *Window;
 *     ImGuiWindow *RestoreNavWindow;
 *     int ParentNavLayer;
 *     int OpenFrameCount;
 *     ImGuiID OpenParentId;
 *     ImVec2 OpenPopupPos;
 *     ImVec2 OpenMousePos;
 * }
 * }
 */
public class ImGuiPopupData {

    ImGuiPopupData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("PopupId"),
        MemoryLayout.paddingLayout(4),
        imgui.C_POINTER.withName("Window"),
        imgui.C_POINTER.withName("RestoreNavWindow"),
        imgui.C_INT.withName("ParentNavLayer"),
        imgui.C_INT.withName("OpenFrameCount"),
        imgui.C_INT.withName("OpenParentId"),
        ImVec2.layout().withName("OpenPopupPos"),
        ImVec2.layout().withName("OpenMousePos"),
        MemoryLayout.paddingLayout(4)
    ).withName("ImGuiPopupData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt PopupId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PopupId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID PopupId
     * }
     */
    public static final OfInt PopupId$layout() {
        return PopupId$LAYOUT;
    }

    private static final long PopupId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID PopupId
     * }
     */
    public static final long PopupId$offset() {
        return PopupId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID PopupId
     * }
     */
    public static int PopupId(MemorySegment struct) {
        return struct.get(PopupId$LAYOUT, PopupId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID PopupId
     * }
     */
    public static void PopupId(MemorySegment struct, int fieldValue) {
        struct.set(PopupId$LAYOUT, PopupId$OFFSET, fieldValue);
    }

    private static final AddressLayout Window$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Window"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static final AddressLayout Window$layout() {
        return Window$LAYOUT;
    }

    private static final long Window$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static final long Window$offset() {
        return Window$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static MemorySegment Window(MemorySegment struct) {
        return struct.get(Window$LAYOUT, Window$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static void Window(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Window$LAYOUT, Window$OFFSET, fieldValue);
    }

    private static final AddressLayout RestoreNavWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RestoreNavWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *RestoreNavWindow
     * }
     */
    public static final AddressLayout RestoreNavWindow$layout() {
        return RestoreNavWindow$LAYOUT;
    }

    private static final long RestoreNavWindow$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *RestoreNavWindow
     * }
     */
    public static final long RestoreNavWindow$offset() {
        return RestoreNavWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RestoreNavWindow
     * }
     */
    public static MemorySegment RestoreNavWindow(MemorySegment struct) {
        return struct.get(RestoreNavWindow$LAYOUT, RestoreNavWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RestoreNavWindow
     * }
     */
    public static void RestoreNavWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RestoreNavWindow$LAYOUT, RestoreNavWindow$OFFSET, fieldValue);
    }

    private static final OfInt ParentNavLayer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ParentNavLayer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ParentNavLayer
     * }
     */
    public static final OfInt ParentNavLayer$layout() {
        return ParentNavLayer$LAYOUT;
    }

    private static final long ParentNavLayer$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ParentNavLayer
     * }
     */
    public static final long ParentNavLayer$offset() {
        return ParentNavLayer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ParentNavLayer
     * }
     */
    public static int ParentNavLayer(MemorySegment struct) {
        return struct.get(ParentNavLayer$LAYOUT, ParentNavLayer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ParentNavLayer
     * }
     */
    public static void ParentNavLayer(MemorySegment struct, int fieldValue) {
        struct.set(ParentNavLayer$LAYOUT, ParentNavLayer$OFFSET, fieldValue);
    }

    private static final OfInt OpenFrameCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OpenFrameCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int OpenFrameCount
     * }
     */
    public static final OfInt OpenFrameCount$layout() {
        return OpenFrameCount$LAYOUT;
    }

    private static final long OpenFrameCount$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int OpenFrameCount
     * }
     */
    public static final long OpenFrameCount$offset() {
        return OpenFrameCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int OpenFrameCount
     * }
     */
    public static int OpenFrameCount(MemorySegment struct) {
        return struct.get(OpenFrameCount$LAYOUT, OpenFrameCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int OpenFrameCount
     * }
     */
    public static void OpenFrameCount(MemorySegment struct, int fieldValue) {
        struct.set(OpenFrameCount$LAYOUT, OpenFrameCount$OFFSET, fieldValue);
    }

    private static final OfInt OpenParentId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OpenParentId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID OpenParentId
     * }
     */
    public static final OfInt OpenParentId$layout() {
        return OpenParentId$LAYOUT;
    }

    private static final long OpenParentId$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID OpenParentId
     * }
     */
    public static final long OpenParentId$offset() {
        return OpenParentId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID OpenParentId
     * }
     */
    public static int OpenParentId(MemorySegment struct) {
        return struct.get(OpenParentId$LAYOUT, OpenParentId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID OpenParentId
     * }
     */
    public static void OpenParentId(MemorySegment struct, int fieldValue) {
        struct.set(OpenParentId$LAYOUT, OpenParentId$OFFSET, fieldValue);
    }

    private static final GroupLayout OpenPopupPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("OpenPopupPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 OpenPopupPos
     * }
     */
    public static final GroupLayout OpenPopupPos$layout() {
        return OpenPopupPos$LAYOUT;
    }

    private static final long OpenPopupPos$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 OpenPopupPos
     * }
     */
    public static final long OpenPopupPos$offset() {
        return OpenPopupPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 OpenPopupPos
     * }
     */
    public static MemorySegment OpenPopupPos(MemorySegment struct) {
        return struct.asSlice(OpenPopupPos$OFFSET, OpenPopupPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 OpenPopupPos
     * }
     */
    public static void OpenPopupPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OpenPopupPos$OFFSET, OpenPopupPos$LAYOUT.byteSize());
    }

    private static final GroupLayout OpenMousePos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("OpenMousePos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 OpenMousePos
     * }
     */
    public static final GroupLayout OpenMousePos$layout() {
        return OpenMousePos$LAYOUT;
    }

    private static final long OpenMousePos$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 OpenMousePos
     * }
     */
    public static final long OpenMousePos$offset() {
        return OpenMousePos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 OpenMousePos
     * }
     */
    public static MemorySegment OpenMousePos(MemorySegment struct) {
        return struct.asSlice(OpenMousePos$OFFSET, OpenMousePos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 OpenMousePos
     * }
     */
    public static void OpenMousePos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OpenMousePos$OFFSET, OpenMousePos$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

