// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiStackLevelInfo {
 *     ImGuiID ID;
 *     ImS8 QueryFrameCount;
 *     bool QuerySuccess;
 *     ImGuiDataType DataType : 8;
 *     char Desc[57];
 * }
 * }
 */
public class ImGuiStackLevelInfo {

    ImGuiStackLevelInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("ID"),
        imgui.C_CHAR.withName("QueryFrameCount"),
        imgui.C_BOOL.withName("QuerySuccess"),
        MemoryLayout.paddingLayout(1),
        MemoryLayout.sequenceLayout(57, imgui.C_CHAR).withName("Desc")
    ).withName("ImGuiStackLevelInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final OfInt ID$layout() {
        return ID$LAYOUT;
    }

    private static final long ID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final long ID$offset() {
        return ID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static int ID(MemorySegment struct) {
        return struct.get(ID$LAYOUT, ID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static void ID(MemorySegment struct, int fieldValue) {
        struct.set(ID$LAYOUT, ID$OFFSET, fieldValue);
    }

    private static final OfByte QueryFrameCount$LAYOUT = (OfByte)$LAYOUT.select(groupElement("QueryFrameCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 QueryFrameCount
     * }
     */
    public static final OfByte QueryFrameCount$layout() {
        return QueryFrameCount$LAYOUT;
    }

    private static final long QueryFrameCount$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 QueryFrameCount
     * }
     */
    public static final long QueryFrameCount$offset() {
        return QueryFrameCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 QueryFrameCount
     * }
     */
    public static byte QueryFrameCount(MemorySegment struct) {
        return struct.get(QueryFrameCount$LAYOUT, QueryFrameCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 QueryFrameCount
     * }
     */
    public static void QueryFrameCount(MemorySegment struct, byte fieldValue) {
        struct.set(QueryFrameCount$LAYOUT, QueryFrameCount$OFFSET, fieldValue);
    }

    private static final OfBoolean QuerySuccess$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("QuerySuccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool QuerySuccess
     * }
     */
    public static final OfBoolean QuerySuccess$layout() {
        return QuerySuccess$LAYOUT;
    }

    private static final long QuerySuccess$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool QuerySuccess
     * }
     */
    public static final long QuerySuccess$offset() {
        return QuerySuccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool QuerySuccess
     * }
     */
    public static boolean QuerySuccess(MemorySegment struct) {
        return struct.get(QuerySuccess$LAYOUT, QuerySuccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool QuerySuccess
     * }
     */
    public static void QuerySuccess(MemorySegment struct, boolean fieldValue) {
        struct.set(QuerySuccess$LAYOUT, QuerySuccess$OFFSET, fieldValue);
    }

    private static final SequenceLayout Desc$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Desc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char Desc[57]
     * }
     */
    public static final SequenceLayout Desc$layout() {
        return Desc$LAYOUT;
    }

    private static final long Desc$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char Desc[57]
     * }
     */
    public static final long Desc$offset() {
        return Desc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char Desc[57]
     * }
     */
    public static MemorySegment Desc(MemorySegment struct) {
        return struct.asSlice(Desc$OFFSET, Desc$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char Desc[57]
     * }
     */
    public static void Desc(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Desc$OFFSET, Desc$LAYOUT.byteSize());
    }

    private static long[] Desc$DIMS = { 57 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char Desc[57]
     * }
     */
    public static long[] Desc$dimensions() {
        return Desc$DIMS;
    }
    private static final VarHandle Desc$ELEM_HANDLE = Desc$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char Desc[57]
     * }
     */
    public static byte Desc(MemorySegment struct, long index0) {
        return (byte)Desc$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char Desc[57]
     * }
     */
    public static void Desc(MemorySegment struct, long index0, byte fieldValue) {
        Desc$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

