// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiListClipperData {
 *     ImGuiListClipper *ListClipper;
 *     float LossynessOffset;
 *     int StepNo;
 *     int ItemsFrozen;
 *     ImVector_ImGuiListClipperRange Ranges;
 * }
 * }
 */
public class ImGuiListClipperData {

    ImGuiListClipperData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_POINTER.withName("ListClipper"),
        imgui.C_FLOAT.withName("LossynessOffset"),
        imgui.C_INT.withName("StepNo"),
        imgui.C_INT.withName("ItemsFrozen"),
        MemoryLayout.paddingLayout(4),
        ImVector_ImGuiListClipperRange.layout().withName("Ranges")
    ).withName("ImGuiListClipperData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout ListClipper$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ListClipper"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiListClipper *ListClipper
     * }
     */
    public static final AddressLayout ListClipper$layout() {
        return ListClipper$LAYOUT;
    }

    private static final long ListClipper$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiListClipper *ListClipper
     * }
     */
    public static final long ListClipper$offset() {
        return ListClipper$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiListClipper *ListClipper
     * }
     */
    public static MemorySegment ListClipper(MemorySegment struct) {
        return struct.get(ListClipper$LAYOUT, ListClipper$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiListClipper *ListClipper
     * }
     */
    public static void ListClipper(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ListClipper$LAYOUT, ListClipper$OFFSET, fieldValue);
    }

    private static final OfFloat LossynessOffset$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("LossynessOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float LossynessOffset
     * }
     */
    public static final OfFloat LossynessOffset$layout() {
        return LossynessOffset$LAYOUT;
    }

    private static final long LossynessOffset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float LossynessOffset
     * }
     */
    public static final long LossynessOffset$offset() {
        return LossynessOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float LossynessOffset
     * }
     */
    public static float LossynessOffset(MemorySegment struct) {
        return struct.get(LossynessOffset$LAYOUT, LossynessOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float LossynessOffset
     * }
     */
    public static void LossynessOffset(MemorySegment struct, float fieldValue) {
        struct.set(LossynessOffset$LAYOUT, LossynessOffset$OFFSET, fieldValue);
    }

    private static final OfInt StepNo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("StepNo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int StepNo
     * }
     */
    public static final OfInt StepNo$layout() {
        return StepNo$LAYOUT;
    }

    private static final long StepNo$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int StepNo
     * }
     */
    public static final long StepNo$offset() {
        return StepNo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int StepNo
     * }
     */
    public static int StepNo(MemorySegment struct) {
        return struct.get(StepNo$LAYOUT, StepNo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int StepNo
     * }
     */
    public static void StepNo(MemorySegment struct, int fieldValue) {
        struct.set(StepNo$LAYOUT, StepNo$OFFSET, fieldValue);
    }

    private static final OfInt ItemsFrozen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ItemsFrozen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ItemsFrozen
     * }
     */
    public static final OfInt ItemsFrozen$layout() {
        return ItemsFrozen$LAYOUT;
    }

    private static final long ItemsFrozen$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ItemsFrozen
     * }
     */
    public static final long ItemsFrozen$offset() {
        return ItemsFrozen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ItemsFrozen
     * }
     */
    public static int ItemsFrozen(MemorySegment struct) {
        return struct.get(ItemsFrozen$LAYOUT, ItemsFrozen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ItemsFrozen
     * }
     */
    public static void ItemsFrozen(MemorySegment struct, int fieldValue) {
        struct.set(ItemsFrozen$LAYOUT, ItemsFrozen$OFFSET, fieldValue);
    }

    private static final GroupLayout Ranges$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Ranges"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiListClipperRange Ranges
     * }
     */
    public static final GroupLayout Ranges$layout() {
        return Ranges$LAYOUT;
    }

    private static final long Ranges$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiListClipperRange Ranges
     * }
     */
    public static final long Ranges$offset() {
        return Ranges$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiListClipperRange Ranges
     * }
     */
    public static MemorySegment Ranges(MemorySegment struct) {
        return struct.asSlice(Ranges$OFFSET, Ranges$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiListClipperRange Ranges
     * }
     */
    public static void Ranges(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Ranges$OFFSET, Ranges$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

