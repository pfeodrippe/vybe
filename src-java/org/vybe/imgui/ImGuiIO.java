// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiIO {
 *     ImGuiConfigFlags ConfigFlags;
 *     ImGuiBackendFlags BackendFlags;
 *     ImVec2 DisplaySize;
 *     float DeltaTime;
 *     float IniSavingRate;
 *     const char *IniFilename;
 *     const char *LogFilename;
 *     void *UserData;
 *     ImFontAtlas *Fonts;
 *     float FontGlobalScale;
 *     bool FontAllowUserScaling;
 *     ImFont *FontDefault;
 *     ImVec2 DisplayFramebufferScale;
 *     bool ConfigDockingNoSplit;
 *     bool ConfigDockingWithShift;
 *     bool ConfigDockingAlwaysTabBar;
 *     bool ConfigDockingTransparentPayload;
 *     bool ConfigViewportsNoAutoMerge;
 *     bool ConfigViewportsNoTaskBarIcon;
 *     bool ConfigViewportsNoDecoration;
 *     bool ConfigViewportsNoDefaultParent;
 *     bool MouseDrawCursor;
 *     bool ConfigMacOSXBehaviors;
 *     bool ConfigNavSwapGamepadButtons;
 *     bool ConfigInputTrickleEventQueue;
 *     bool ConfigInputTextCursorBlink;
 *     bool ConfigInputTextEnterKeepActive;
 *     bool ConfigDragClickToInputText;
 *     bool ConfigWindowsResizeFromEdges;
 *     bool ConfigWindowsMoveFromTitleBarOnly;
 *     float ConfigMemoryCompactTimer;
 *     float MouseDoubleClickTime;
 *     float MouseDoubleClickMaxDist;
 *     float MouseDragThreshold;
 *     float KeyRepeatDelay;
 *     float KeyRepeatRate;
 *     bool ConfigDebugIsDebuggerPresent;
 *     bool ConfigDebugBeginReturnValueOnce;
 *     bool ConfigDebugBeginReturnValueLoop;
 *     bool ConfigDebugIgnoreFocusLoss;
 *     bool ConfigDebugIniSettings;
 *     const char *BackendPlatformName;
 *     const char *BackendRendererName;
 *     void *BackendPlatformUserData;
 *     void *BackendRendererUserData;
 *     void *BackendLanguageUserData;
 *     const char *(*GetClipboardTextFn)(void *);
 *     void (*SetClipboardTextFn)(void *, const char *);
 *     void *ClipboardUserData;
 *     bool (*PlatformOpenInShellFn)(ImGuiContext *, const char *);
 *     void *PlatformOpenInShellUserData;
 *     void (*PlatformSetImeDataFn)(ImGuiContext *, ImGuiViewport *, ImGuiPlatformImeData *);
 *     ImWchar PlatformLocaleDecimalPoint;
 *     bool WantCaptureMouse;
 *     bool WantCaptureKeyboard;
 *     bool WantTextInput;
 *     bool WantSetMousePos;
 *     bool WantSaveIniSettings;
 *     bool NavActive;
 *     bool NavVisible;
 *     float Framerate;
 *     int MetricsRenderVertices;
 *     int MetricsRenderIndices;
 *     int MetricsRenderWindows;
 *     int MetricsActiveWindows;
 *     ImVec2 MouseDelta;
 *     ImGuiContext *Ctx;
 *     ImVec2 MousePos;
 *     bool MouseDown[5];
 *     float MouseWheel;
 *     float MouseWheelH;
 *     ImGuiMouseSource MouseSource;
 *     ImGuiID MouseHoveredViewport;
 *     bool KeyCtrl;
 *     bool KeyShift;
 *     bool KeyAlt;
 *     bool KeySuper;
 *     ImGuiKeyChord KeyMods;
 *     ImGuiKeyData KeysData[154];
 *     bool WantCaptureMouseUnlessPopupClose;
 *     ImVec2 MousePosPrev;
 *     ImVec2 MouseClickedPos[5];
 *     double MouseClickedTime[5];
 *     bool MouseClicked[5];
 *     bool MouseDoubleClicked[5];
 *     ImU16 MouseClickedCount[5];
 *     ImU16 MouseClickedLastCount[5];
 *     bool MouseReleased[5];
 *     bool MouseDownOwned[5];
 *     bool MouseDownOwnedUnlessPopupClose[5];
 *     bool MouseWheelRequestAxisSwap;
 *     bool MouseCtrlLeftAsRightClick;
 *     float MouseDownDuration[5];
 *     float MouseDownDurationPrev[5];
 *     ImVec2 MouseDragMaxDistanceAbs[5];
 *     float MouseDragMaxDistanceSqr[5];
 *     float PenPressure;
 *     bool AppFocusLost;
 *     bool AppAcceptingEvents;
 *     ImS8 BackendUsingLegacyKeyArrays;
 *     bool BackendUsingLegacyNavInputArray;
 *     ImWchar16 InputQueueSurrogate;
 *     ImVector_ImWchar InputQueueCharacters;
 * }
 * }
 */
public class ImGuiIO {

    ImGuiIO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("ConfigFlags"),
        imgui.C_INT.withName("BackendFlags"),
        ImVec2.layout().withName("DisplaySize"),
        imgui.C_FLOAT.withName("DeltaTime"),
        imgui.C_FLOAT.withName("IniSavingRate"),
        imgui.C_POINTER.withName("IniFilename"),
        imgui.C_POINTER.withName("LogFilename"),
        imgui.C_POINTER.withName("UserData"),
        imgui.C_POINTER.withName("Fonts"),
        imgui.C_FLOAT.withName("FontGlobalScale"),
        imgui.C_BOOL.withName("FontAllowUserScaling"),
        MemoryLayout.paddingLayout(3),
        imgui.C_POINTER.withName("FontDefault"),
        ImVec2.layout().withName("DisplayFramebufferScale"),
        imgui.C_BOOL.withName("ConfigDockingNoSplit"),
        imgui.C_BOOL.withName("ConfigDockingWithShift"),
        imgui.C_BOOL.withName("ConfigDockingAlwaysTabBar"),
        imgui.C_BOOL.withName("ConfigDockingTransparentPayload"),
        imgui.C_BOOL.withName("ConfigViewportsNoAutoMerge"),
        imgui.C_BOOL.withName("ConfigViewportsNoTaskBarIcon"),
        imgui.C_BOOL.withName("ConfigViewportsNoDecoration"),
        imgui.C_BOOL.withName("ConfigViewportsNoDefaultParent"),
        imgui.C_BOOL.withName("MouseDrawCursor"),
        imgui.C_BOOL.withName("ConfigMacOSXBehaviors"),
        imgui.C_BOOL.withName("ConfigNavSwapGamepadButtons"),
        imgui.C_BOOL.withName("ConfigInputTrickleEventQueue"),
        imgui.C_BOOL.withName("ConfigInputTextCursorBlink"),
        imgui.C_BOOL.withName("ConfigInputTextEnterKeepActive"),
        imgui.C_BOOL.withName("ConfigDragClickToInputText"),
        imgui.C_BOOL.withName("ConfigWindowsResizeFromEdges"),
        imgui.C_BOOL.withName("ConfigWindowsMoveFromTitleBarOnly"),
        MemoryLayout.paddingLayout(3),
        imgui.C_FLOAT.withName("ConfigMemoryCompactTimer"),
        imgui.C_FLOAT.withName("MouseDoubleClickTime"),
        imgui.C_FLOAT.withName("MouseDoubleClickMaxDist"),
        imgui.C_FLOAT.withName("MouseDragThreshold"),
        imgui.C_FLOAT.withName("KeyRepeatDelay"),
        imgui.C_FLOAT.withName("KeyRepeatRate"),
        imgui.C_BOOL.withName("ConfigDebugIsDebuggerPresent"),
        imgui.C_BOOL.withName("ConfigDebugBeginReturnValueOnce"),
        imgui.C_BOOL.withName("ConfigDebugBeginReturnValueLoop"),
        imgui.C_BOOL.withName("ConfigDebugIgnoreFocusLoss"),
        imgui.C_BOOL.withName("ConfigDebugIniSettings"),
        MemoryLayout.paddingLayout(7),
        imgui.C_POINTER.withName("BackendPlatformName"),
        imgui.C_POINTER.withName("BackendRendererName"),
        imgui.C_POINTER.withName("BackendPlatformUserData"),
        imgui.C_POINTER.withName("BackendRendererUserData"),
        imgui.C_POINTER.withName("BackendLanguageUserData"),
        imgui.C_POINTER.withName("GetClipboardTextFn"),
        imgui.C_POINTER.withName("SetClipboardTextFn"),
        imgui.C_POINTER.withName("ClipboardUserData"),
        imgui.C_POINTER.withName("PlatformOpenInShellFn"),
        imgui.C_POINTER.withName("PlatformOpenInShellUserData"),
        imgui.C_POINTER.withName("PlatformSetImeDataFn"),
        imgui.C_SHORT.withName("PlatformLocaleDecimalPoint"),
        imgui.C_BOOL.withName("WantCaptureMouse"),
        imgui.C_BOOL.withName("WantCaptureKeyboard"),
        imgui.C_BOOL.withName("WantTextInput"),
        imgui.C_BOOL.withName("WantSetMousePos"),
        imgui.C_BOOL.withName("WantSaveIniSettings"),
        imgui.C_BOOL.withName("NavActive"),
        imgui.C_BOOL.withName("NavVisible"),
        MemoryLayout.paddingLayout(3),
        imgui.C_FLOAT.withName("Framerate"),
        imgui.C_INT.withName("MetricsRenderVertices"),
        imgui.C_INT.withName("MetricsRenderIndices"),
        imgui.C_INT.withName("MetricsRenderWindows"),
        imgui.C_INT.withName("MetricsActiveWindows"),
        ImVec2.layout().withName("MouseDelta"),
        imgui.C_POINTER.withName("Ctx"),
        ImVec2.layout().withName("MousePos"),
        MemoryLayout.sequenceLayout(5, imgui.C_BOOL).withName("MouseDown"),
        MemoryLayout.paddingLayout(3),
        imgui.C_FLOAT.withName("MouseWheel"),
        imgui.C_FLOAT.withName("MouseWheelH"),
        imgui.C_INT.withName("MouseSource"),
        imgui.C_INT.withName("MouseHoveredViewport"),
        imgui.C_BOOL.withName("KeyCtrl"),
        imgui.C_BOOL.withName("KeyShift"),
        imgui.C_BOOL.withName("KeyAlt"),
        imgui.C_BOOL.withName("KeySuper"),
        imgui.C_INT.withName("KeyMods"),
        MemoryLayout.sequenceLayout(154, ImGuiKeyData.layout()).withName("KeysData"),
        imgui.C_BOOL.withName("WantCaptureMouseUnlessPopupClose"),
        MemoryLayout.paddingLayout(3),
        ImVec2.layout().withName("MousePosPrev"),
        MemoryLayout.sequenceLayout(5, ImVec2.layout()).withName("MouseClickedPos"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(5, imgui.C_DOUBLE).withName("MouseClickedTime"),
        MemoryLayout.sequenceLayout(5, imgui.C_BOOL).withName("MouseClicked"),
        MemoryLayout.sequenceLayout(5, imgui.C_BOOL).withName("MouseDoubleClicked"),
        MemoryLayout.sequenceLayout(5, imgui.C_SHORT).withName("MouseClickedCount"),
        MemoryLayout.sequenceLayout(5, imgui.C_SHORT).withName("MouseClickedLastCount"),
        MemoryLayout.sequenceLayout(5, imgui.C_BOOL).withName("MouseReleased"),
        MemoryLayout.sequenceLayout(5, imgui.C_BOOL).withName("MouseDownOwned"),
        MemoryLayout.sequenceLayout(5, imgui.C_BOOL).withName("MouseDownOwnedUnlessPopupClose"),
        imgui.C_BOOL.withName("MouseWheelRequestAxisSwap"),
        imgui.C_BOOL.withName("MouseCtrlLeftAsRightClick"),
        MemoryLayout.paddingLayout(1),
        MemoryLayout.sequenceLayout(5, imgui.C_FLOAT).withName("MouseDownDuration"),
        MemoryLayout.sequenceLayout(5, imgui.C_FLOAT).withName("MouseDownDurationPrev"),
        MemoryLayout.sequenceLayout(5, ImVec2.layout()).withName("MouseDragMaxDistanceAbs"),
        MemoryLayout.sequenceLayout(5, imgui.C_FLOAT).withName("MouseDragMaxDistanceSqr"),
        imgui.C_FLOAT.withName("PenPressure"),
        imgui.C_BOOL.withName("AppFocusLost"),
        imgui.C_BOOL.withName("AppAcceptingEvents"),
        imgui.C_CHAR.withName("BackendUsingLegacyKeyArrays"),
        imgui.C_BOOL.withName("BackendUsingLegacyNavInputArray"),
        imgui.C_SHORT.withName("InputQueueSurrogate"),
        MemoryLayout.paddingLayout(2),
        ImVector_ImWchar.layout().withName("InputQueueCharacters")
    ).withName("ImGuiIO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ConfigFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ConfigFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlags
     * }
     */
    public static final OfInt ConfigFlags$layout() {
        return ConfigFlags$LAYOUT;
    }

    private static final long ConfigFlags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlags
     * }
     */
    public static final long ConfigFlags$offset() {
        return ConfigFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlags
     * }
     */
    public static int ConfigFlags(MemorySegment struct) {
        return struct.get(ConfigFlags$LAYOUT, ConfigFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlags
     * }
     */
    public static void ConfigFlags(MemorySegment struct, int fieldValue) {
        struct.set(ConfigFlags$LAYOUT, ConfigFlags$OFFSET, fieldValue);
    }

    private static final OfInt BackendFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BackendFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiBackendFlags BackendFlags
     * }
     */
    public static final OfInt BackendFlags$layout() {
        return BackendFlags$LAYOUT;
    }

    private static final long BackendFlags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiBackendFlags BackendFlags
     * }
     */
    public static final long BackendFlags$offset() {
        return BackendFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiBackendFlags BackendFlags
     * }
     */
    public static int BackendFlags(MemorySegment struct) {
        return struct.get(BackendFlags$LAYOUT, BackendFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiBackendFlags BackendFlags
     * }
     */
    public static void BackendFlags(MemorySegment struct, int fieldValue) {
        struct.set(BackendFlags$LAYOUT, BackendFlags$OFFSET, fieldValue);
    }

    private static final GroupLayout DisplaySize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DisplaySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 DisplaySize
     * }
     */
    public static final GroupLayout DisplaySize$layout() {
        return DisplaySize$LAYOUT;
    }

    private static final long DisplaySize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 DisplaySize
     * }
     */
    public static final long DisplaySize$offset() {
        return DisplaySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 DisplaySize
     * }
     */
    public static MemorySegment DisplaySize(MemorySegment struct) {
        return struct.asSlice(DisplaySize$OFFSET, DisplaySize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 DisplaySize
     * }
     */
    public static void DisplaySize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DisplaySize$OFFSET, DisplaySize$LAYOUT.byteSize());
    }

    private static final OfFloat DeltaTime$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DeltaTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DeltaTime
     * }
     */
    public static final OfFloat DeltaTime$layout() {
        return DeltaTime$LAYOUT;
    }

    private static final long DeltaTime$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DeltaTime
     * }
     */
    public static final long DeltaTime$offset() {
        return DeltaTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DeltaTime
     * }
     */
    public static float DeltaTime(MemorySegment struct) {
        return struct.get(DeltaTime$LAYOUT, DeltaTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DeltaTime
     * }
     */
    public static void DeltaTime(MemorySegment struct, float fieldValue) {
        struct.set(DeltaTime$LAYOUT, DeltaTime$OFFSET, fieldValue);
    }

    private static final OfFloat IniSavingRate$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("IniSavingRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float IniSavingRate
     * }
     */
    public static final OfFloat IniSavingRate$layout() {
        return IniSavingRate$LAYOUT;
    }

    private static final long IniSavingRate$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float IniSavingRate
     * }
     */
    public static final long IniSavingRate$offset() {
        return IniSavingRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float IniSavingRate
     * }
     */
    public static float IniSavingRate(MemorySegment struct) {
        return struct.get(IniSavingRate$LAYOUT, IniSavingRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float IniSavingRate
     * }
     */
    public static void IniSavingRate(MemorySegment struct, float fieldValue) {
        struct.set(IniSavingRate$LAYOUT, IniSavingRate$OFFSET, fieldValue);
    }

    private static final AddressLayout IniFilename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("IniFilename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *IniFilename
     * }
     */
    public static final AddressLayout IniFilename$layout() {
        return IniFilename$LAYOUT;
    }

    private static final long IniFilename$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *IniFilename
     * }
     */
    public static final long IniFilename$offset() {
        return IniFilename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *IniFilename
     * }
     */
    public static MemorySegment IniFilename(MemorySegment struct) {
        return struct.get(IniFilename$LAYOUT, IniFilename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *IniFilename
     * }
     */
    public static void IniFilename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(IniFilename$LAYOUT, IniFilename$OFFSET, fieldValue);
    }

    private static final AddressLayout LogFilename$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("LogFilename"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *LogFilename
     * }
     */
    public static final AddressLayout LogFilename$layout() {
        return LogFilename$LAYOUT;
    }

    private static final long LogFilename$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *LogFilename
     * }
     */
    public static final long LogFilename$offset() {
        return LogFilename$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *LogFilename
     * }
     */
    public static MemorySegment LogFilename(MemorySegment struct) {
        return struct.get(LogFilename$LAYOUT, LogFilename$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *LogFilename
     * }
     */
    public static void LogFilename(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(LogFilename$LAYOUT, LogFilename$OFFSET, fieldValue);
    }

    private static final AddressLayout UserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static final AddressLayout UserData$layout() {
        return UserData$LAYOUT;
    }

    private static final long UserData$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static final long UserData$offset() {
        return UserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static MemorySegment UserData(MemorySegment struct) {
        return struct.get(UserData$LAYOUT, UserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static void UserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(UserData$LAYOUT, UserData$OFFSET, fieldValue);
    }

    private static final AddressLayout Fonts$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Fonts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImFontAtlas *Fonts
     * }
     */
    public static final AddressLayout Fonts$layout() {
        return Fonts$LAYOUT;
    }

    private static final long Fonts$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImFontAtlas *Fonts
     * }
     */
    public static final long Fonts$offset() {
        return Fonts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImFontAtlas *Fonts
     * }
     */
    public static MemorySegment Fonts(MemorySegment struct) {
        return struct.get(Fonts$LAYOUT, Fonts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImFontAtlas *Fonts
     * }
     */
    public static void Fonts(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Fonts$LAYOUT, Fonts$OFFSET, fieldValue);
    }

    private static final OfFloat FontGlobalScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FontGlobalScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FontGlobalScale
     * }
     */
    public static final OfFloat FontGlobalScale$layout() {
        return FontGlobalScale$LAYOUT;
    }

    private static final long FontGlobalScale$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FontGlobalScale
     * }
     */
    public static final long FontGlobalScale$offset() {
        return FontGlobalScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FontGlobalScale
     * }
     */
    public static float FontGlobalScale(MemorySegment struct) {
        return struct.get(FontGlobalScale$LAYOUT, FontGlobalScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FontGlobalScale
     * }
     */
    public static void FontGlobalScale(MemorySegment struct, float fieldValue) {
        struct.set(FontGlobalScale$LAYOUT, FontGlobalScale$OFFSET, fieldValue);
    }

    private static final OfBoolean FontAllowUserScaling$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("FontAllowUserScaling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool FontAllowUserScaling
     * }
     */
    public static final OfBoolean FontAllowUserScaling$layout() {
        return FontAllowUserScaling$LAYOUT;
    }

    private static final long FontAllowUserScaling$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool FontAllowUserScaling
     * }
     */
    public static final long FontAllowUserScaling$offset() {
        return FontAllowUserScaling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool FontAllowUserScaling
     * }
     */
    public static boolean FontAllowUserScaling(MemorySegment struct) {
        return struct.get(FontAllowUserScaling$LAYOUT, FontAllowUserScaling$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool FontAllowUserScaling
     * }
     */
    public static void FontAllowUserScaling(MemorySegment struct, boolean fieldValue) {
        struct.set(FontAllowUserScaling$LAYOUT, FontAllowUserScaling$OFFSET, fieldValue);
    }

    private static final AddressLayout FontDefault$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("FontDefault"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImFont *FontDefault
     * }
     */
    public static final AddressLayout FontDefault$layout() {
        return FontDefault$LAYOUT;
    }

    private static final long FontDefault$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImFont *FontDefault
     * }
     */
    public static final long FontDefault$offset() {
        return FontDefault$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImFont *FontDefault
     * }
     */
    public static MemorySegment FontDefault(MemorySegment struct) {
        return struct.get(FontDefault$LAYOUT, FontDefault$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImFont *FontDefault
     * }
     */
    public static void FontDefault(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(FontDefault$LAYOUT, FontDefault$OFFSET, fieldValue);
    }

    private static final GroupLayout DisplayFramebufferScale$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DisplayFramebufferScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 DisplayFramebufferScale
     * }
     */
    public static final GroupLayout DisplayFramebufferScale$layout() {
        return DisplayFramebufferScale$LAYOUT;
    }

    private static final long DisplayFramebufferScale$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 DisplayFramebufferScale
     * }
     */
    public static final long DisplayFramebufferScale$offset() {
        return DisplayFramebufferScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 DisplayFramebufferScale
     * }
     */
    public static MemorySegment DisplayFramebufferScale(MemorySegment struct) {
        return struct.asSlice(DisplayFramebufferScale$OFFSET, DisplayFramebufferScale$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 DisplayFramebufferScale
     * }
     */
    public static void DisplayFramebufferScale(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DisplayFramebufferScale$OFFSET, DisplayFramebufferScale$LAYOUT.byteSize());
    }

    private static final OfBoolean ConfigDockingNoSplit$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDockingNoSplit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDockingNoSplit
     * }
     */
    public static final OfBoolean ConfigDockingNoSplit$layout() {
        return ConfigDockingNoSplit$LAYOUT;
    }

    private static final long ConfigDockingNoSplit$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDockingNoSplit
     * }
     */
    public static final long ConfigDockingNoSplit$offset() {
        return ConfigDockingNoSplit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDockingNoSplit
     * }
     */
    public static boolean ConfigDockingNoSplit(MemorySegment struct) {
        return struct.get(ConfigDockingNoSplit$LAYOUT, ConfigDockingNoSplit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDockingNoSplit
     * }
     */
    public static void ConfigDockingNoSplit(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDockingNoSplit$LAYOUT, ConfigDockingNoSplit$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigDockingWithShift$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDockingWithShift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDockingWithShift
     * }
     */
    public static final OfBoolean ConfigDockingWithShift$layout() {
        return ConfigDockingWithShift$LAYOUT;
    }

    private static final long ConfigDockingWithShift$OFFSET = 81;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDockingWithShift
     * }
     */
    public static final long ConfigDockingWithShift$offset() {
        return ConfigDockingWithShift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDockingWithShift
     * }
     */
    public static boolean ConfigDockingWithShift(MemorySegment struct) {
        return struct.get(ConfigDockingWithShift$LAYOUT, ConfigDockingWithShift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDockingWithShift
     * }
     */
    public static void ConfigDockingWithShift(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDockingWithShift$LAYOUT, ConfigDockingWithShift$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigDockingAlwaysTabBar$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDockingAlwaysTabBar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDockingAlwaysTabBar
     * }
     */
    public static final OfBoolean ConfigDockingAlwaysTabBar$layout() {
        return ConfigDockingAlwaysTabBar$LAYOUT;
    }

    private static final long ConfigDockingAlwaysTabBar$OFFSET = 82;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDockingAlwaysTabBar
     * }
     */
    public static final long ConfigDockingAlwaysTabBar$offset() {
        return ConfigDockingAlwaysTabBar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDockingAlwaysTabBar
     * }
     */
    public static boolean ConfigDockingAlwaysTabBar(MemorySegment struct) {
        return struct.get(ConfigDockingAlwaysTabBar$LAYOUT, ConfigDockingAlwaysTabBar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDockingAlwaysTabBar
     * }
     */
    public static void ConfigDockingAlwaysTabBar(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDockingAlwaysTabBar$LAYOUT, ConfigDockingAlwaysTabBar$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigDockingTransparentPayload$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDockingTransparentPayload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDockingTransparentPayload
     * }
     */
    public static final OfBoolean ConfigDockingTransparentPayload$layout() {
        return ConfigDockingTransparentPayload$LAYOUT;
    }

    private static final long ConfigDockingTransparentPayload$OFFSET = 83;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDockingTransparentPayload
     * }
     */
    public static final long ConfigDockingTransparentPayload$offset() {
        return ConfigDockingTransparentPayload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDockingTransparentPayload
     * }
     */
    public static boolean ConfigDockingTransparentPayload(MemorySegment struct) {
        return struct.get(ConfigDockingTransparentPayload$LAYOUT, ConfigDockingTransparentPayload$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDockingTransparentPayload
     * }
     */
    public static void ConfigDockingTransparentPayload(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDockingTransparentPayload$LAYOUT, ConfigDockingTransparentPayload$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigViewportsNoAutoMerge$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigViewportsNoAutoMerge"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoAutoMerge
     * }
     */
    public static final OfBoolean ConfigViewportsNoAutoMerge$layout() {
        return ConfigViewportsNoAutoMerge$LAYOUT;
    }

    private static final long ConfigViewportsNoAutoMerge$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoAutoMerge
     * }
     */
    public static final long ConfigViewportsNoAutoMerge$offset() {
        return ConfigViewportsNoAutoMerge$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoAutoMerge
     * }
     */
    public static boolean ConfigViewportsNoAutoMerge(MemorySegment struct) {
        return struct.get(ConfigViewportsNoAutoMerge$LAYOUT, ConfigViewportsNoAutoMerge$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoAutoMerge
     * }
     */
    public static void ConfigViewportsNoAutoMerge(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigViewportsNoAutoMerge$LAYOUT, ConfigViewportsNoAutoMerge$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigViewportsNoTaskBarIcon$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigViewportsNoTaskBarIcon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoTaskBarIcon
     * }
     */
    public static final OfBoolean ConfigViewportsNoTaskBarIcon$layout() {
        return ConfigViewportsNoTaskBarIcon$LAYOUT;
    }

    private static final long ConfigViewportsNoTaskBarIcon$OFFSET = 85;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoTaskBarIcon
     * }
     */
    public static final long ConfigViewportsNoTaskBarIcon$offset() {
        return ConfigViewportsNoTaskBarIcon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoTaskBarIcon
     * }
     */
    public static boolean ConfigViewportsNoTaskBarIcon(MemorySegment struct) {
        return struct.get(ConfigViewportsNoTaskBarIcon$LAYOUT, ConfigViewportsNoTaskBarIcon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoTaskBarIcon
     * }
     */
    public static void ConfigViewportsNoTaskBarIcon(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigViewportsNoTaskBarIcon$LAYOUT, ConfigViewportsNoTaskBarIcon$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigViewportsNoDecoration$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigViewportsNoDecoration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoDecoration
     * }
     */
    public static final OfBoolean ConfigViewportsNoDecoration$layout() {
        return ConfigViewportsNoDecoration$LAYOUT;
    }

    private static final long ConfigViewportsNoDecoration$OFFSET = 86;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoDecoration
     * }
     */
    public static final long ConfigViewportsNoDecoration$offset() {
        return ConfigViewportsNoDecoration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoDecoration
     * }
     */
    public static boolean ConfigViewportsNoDecoration(MemorySegment struct) {
        return struct.get(ConfigViewportsNoDecoration$LAYOUT, ConfigViewportsNoDecoration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoDecoration
     * }
     */
    public static void ConfigViewportsNoDecoration(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigViewportsNoDecoration$LAYOUT, ConfigViewportsNoDecoration$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigViewportsNoDefaultParent$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigViewportsNoDefaultParent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoDefaultParent
     * }
     */
    public static final OfBoolean ConfigViewportsNoDefaultParent$layout() {
        return ConfigViewportsNoDefaultParent$LAYOUT;
    }

    private static final long ConfigViewportsNoDefaultParent$OFFSET = 87;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoDefaultParent
     * }
     */
    public static final long ConfigViewportsNoDefaultParent$offset() {
        return ConfigViewportsNoDefaultParent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoDefaultParent
     * }
     */
    public static boolean ConfigViewportsNoDefaultParent(MemorySegment struct) {
        return struct.get(ConfigViewportsNoDefaultParent$LAYOUT, ConfigViewportsNoDefaultParent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigViewportsNoDefaultParent
     * }
     */
    public static void ConfigViewportsNoDefaultParent(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigViewportsNoDefaultParent$LAYOUT, ConfigViewportsNoDefaultParent$OFFSET, fieldValue);
    }

    private static final OfBoolean MouseDrawCursor$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("MouseDrawCursor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MouseDrawCursor
     * }
     */
    public static final OfBoolean MouseDrawCursor$layout() {
        return MouseDrawCursor$LAYOUT;
    }

    private static final long MouseDrawCursor$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MouseDrawCursor
     * }
     */
    public static final long MouseDrawCursor$offset() {
        return MouseDrawCursor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MouseDrawCursor
     * }
     */
    public static boolean MouseDrawCursor(MemorySegment struct) {
        return struct.get(MouseDrawCursor$LAYOUT, MouseDrawCursor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MouseDrawCursor
     * }
     */
    public static void MouseDrawCursor(MemorySegment struct, boolean fieldValue) {
        struct.set(MouseDrawCursor$LAYOUT, MouseDrawCursor$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigMacOSXBehaviors$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigMacOSXBehaviors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigMacOSXBehaviors
     * }
     */
    public static final OfBoolean ConfigMacOSXBehaviors$layout() {
        return ConfigMacOSXBehaviors$LAYOUT;
    }

    private static final long ConfigMacOSXBehaviors$OFFSET = 89;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigMacOSXBehaviors
     * }
     */
    public static final long ConfigMacOSXBehaviors$offset() {
        return ConfigMacOSXBehaviors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigMacOSXBehaviors
     * }
     */
    public static boolean ConfigMacOSXBehaviors(MemorySegment struct) {
        return struct.get(ConfigMacOSXBehaviors$LAYOUT, ConfigMacOSXBehaviors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigMacOSXBehaviors
     * }
     */
    public static void ConfigMacOSXBehaviors(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigMacOSXBehaviors$LAYOUT, ConfigMacOSXBehaviors$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigNavSwapGamepadButtons$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigNavSwapGamepadButtons"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigNavSwapGamepadButtons
     * }
     */
    public static final OfBoolean ConfigNavSwapGamepadButtons$layout() {
        return ConfigNavSwapGamepadButtons$LAYOUT;
    }

    private static final long ConfigNavSwapGamepadButtons$OFFSET = 90;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigNavSwapGamepadButtons
     * }
     */
    public static final long ConfigNavSwapGamepadButtons$offset() {
        return ConfigNavSwapGamepadButtons$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigNavSwapGamepadButtons
     * }
     */
    public static boolean ConfigNavSwapGamepadButtons(MemorySegment struct) {
        return struct.get(ConfigNavSwapGamepadButtons$LAYOUT, ConfigNavSwapGamepadButtons$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigNavSwapGamepadButtons
     * }
     */
    public static void ConfigNavSwapGamepadButtons(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigNavSwapGamepadButtons$LAYOUT, ConfigNavSwapGamepadButtons$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigInputTrickleEventQueue$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigInputTrickleEventQueue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigInputTrickleEventQueue
     * }
     */
    public static final OfBoolean ConfigInputTrickleEventQueue$layout() {
        return ConfigInputTrickleEventQueue$LAYOUT;
    }

    private static final long ConfigInputTrickleEventQueue$OFFSET = 91;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigInputTrickleEventQueue
     * }
     */
    public static final long ConfigInputTrickleEventQueue$offset() {
        return ConfigInputTrickleEventQueue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigInputTrickleEventQueue
     * }
     */
    public static boolean ConfigInputTrickleEventQueue(MemorySegment struct) {
        return struct.get(ConfigInputTrickleEventQueue$LAYOUT, ConfigInputTrickleEventQueue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigInputTrickleEventQueue
     * }
     */
    public static void ConfigInputTrickleEventQueue(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigInputTrickleEventQueue$LAYOUT, ConfigInputTrickleEventQueue$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigInputTextCursorBlink$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigInputTextCursorBlink"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigInputTextCursorBlink
     * }
     */
    public static final OfBoolean ConfigInputTextCursorBlink$layout() {
        return ConfigInputTextCursorBlink$LAYOUT;
    }

    private static final long ConfigInputTextCursorBlink$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigInputTextCursorBlink
     * }
     */
    public static final long ConfigInputTextCursorBlink$offset() {
        return ConfigInputTextCursorBlink$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigInputTextCursorBlink
     * }
     */
    public static boolean ConfigInputTextCursorBlink(MemorySegment struct) {
        return struct.get(ConfigInputTextCursorBlink$LAYOUT, ConfigInputTextCursorBlink$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigInputTextCursorBlink
     * }
     */
    public static void ConfigInputTextCursorBlink(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigInputTextCursorBlink$LAYOUT, ConfigInputTextCursorBlink$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigInputTextEnterKeepActive$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigInputTextEnterKeepActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigInputTextEnterKeepActive
     * }
     */
    public static final OfBoolean ConfigInputTextEnterKeepActive$layout() {
        return ConfigInputTextEnterKeepActive$LAYOUT;
    }

    private static final long ConfigInputTextEnterKeepActive$OFFSET = 93;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigInputTextEnterKeepActive
     * }
     */
    public static final long ConfigInputTextEnterKeepActive$offset() {
        return ConfigInputTextEnterKeepActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigInputTextEnterKeepActive
     * }
     */
    public static boolean ConfigInputTextEnterKeepActive(MemorySegment struct) {
        return struct.get(ConfigInputTextEnterKeepActive$LAYOUT, ConfigInputTextEnterKeepActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigInputTextEnterKeepActive
     * }
     */
    public static void ConfigInputTextEnterKeepActive(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigInputTextEnterKeepActive$LAYOUT, ConfigInputTextEnterKeepActive$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigDragClickToInputText$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDragClickToInputText"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDragClickToInputText
     * }
     */
    public static final OfBoolean ConfigDragClickToInputText$layout() {
        return ConfigDragClickToInputText$LAYOUT;
    }

    private static final long ConfigDragClickToInputText$OFFSET = 94;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDragClickToInputText
     * }
     */
    public static final long ConfigDragClickToInputText$offset() {
        return ConfigDragClickToInputText$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDragClickToInputText
     * }
     */
    public static boolean ConfigDragClickToInputText(MemorySegment struct) {
        return struct.get(ConfigDragClickToInputText$LAYOUT, ConfigDragClickToInputText$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDragClickToInputText
     * }
     */
    public static void ConfigDragClickToInputText(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDragClickToInputText$LAYOUT, ConfigDragClickToInputText$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigWindowsResizeFromEdges$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigWindowsResizeFromEdges"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigWindowsResizeFromEdges
     * }
     */
    public static final OfBoolean ConfigWindowsResizeFromEdges$layout() {
        return ConfigWindowsResizeFromEdges$LAYOUT;
    }

    private static final long ConfigWindowsResizeFromEdges$OFFSET = 95;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigWindowsResizeFromEdges
     * }
     */
    public static final long ConfigWindowsResizeFromEdges$offset() {
        return ConfigWindowsResizeFromEdges$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigWindowsResizeFromEdges
     * }
     */
    public static boolean ConfigWindowsResizeFromEdges(MemorySegment struct) {
        return struct.get(ConfigWindowsResizeFromEdges$LAYOUT, ConfigWindowsResizeFromEdges$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigWindowsResizeFromEdges
     * }
     */
    public static void ConfigWindowsResizeFromEdges(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigWindowsResizeFromEdges$LAYOUT, ConfigWindowsResizeFromEdges$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigWindowsMoveFromTitleBarOnly$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigWindowsMoveFromTitleBarOnly"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigWindowsMoveFromTitleBarOnly
     * }
     */
    public static final OfBoolean ConfigWindowsMoveFromTitleBarOnly$layout() {
        return ConfigWindowsMoveFromTitleBarOnly$LAYOUT;
    }

    private static final long ConfigWindowsMoveFromTitleBarOnly$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigWindowsMoveFromTitleBarOnly
     * }
     */
    public static final long ConfigWindowsMoveFromTitleBarOnly$offset() {
        return ConfigWindowsMoveFromTitleBarOnly$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigWindowsMoveFromTitleBarOnly
     * }
     */
    public static boolean ConfigWindowsMoveFromTitleBarOnly(MemorySegment struct) {
        return struct.get(ConfigWindowsMoveFromTitleBarOnly$LAYOUT, ConfigWindowsMoveFromTitleBarOnly$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigWindowsMoveFromTitleBarOnly
     * }
     */
    public static void ConfigWindowsMoveFromTitleBarOnly(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigWindowsMoveFromTitleBarOnly$LAYOUT, ConfigWindowsMoveFromTitleBarOnly$OFFSET, fieldValue);
    }

    private static final OfFloat ConfigMemoryCompactTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ConfigMemoryCompactTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ConfigMemoryCompactTimer
     * }
     */
    public static final OfFloat ConfigMemoryCompactTimer$layout() {
        return ConfigMemoryCompactTimer$LAYOUT;
    }

    private static final long ConfigMemoryCompactTimer$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ConfigMemoryCompactTimer
     * }
     */
    public static final long ConfigMemoryCompactTimer$offset() {
        return ConfigMemoryCompactTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ConfigMemoryCompactTimer
     * }
     */
    public static float ConfigMemoryCompactTimer(MemorySegment struct) {
        return struct.get(ConfigMemoryCompactTimer$LAYOUT, ConfigMemoryCompactTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ConfigMemoryCompactTimer
     * }
     */
    public static void ConfigMemoryCompactTimer(MemorySegment struct, float fieldValue) {
        struct.set(ConfigMemoryCompactTimer$LAYOUT, ConfigMemoryCompactTimer$OFFSET, fieldValue);
    }

    private static final OfFloat MouseDoubleClickTime$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MouseDoubleClickTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseDoubleClickTime
     * }
     */
    public static final OfFloat MouseDoubleClickTime$layout() {
        return MouseDoubleClickTime$LAYOUT;
    }

    private static final long MouseDoubleClickTime$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseDoubleClickTime
     * }
     */
    public static final long MouseDoubleClickTime$offset() {
        return MouseDoubleClickTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseDoubleClickTime
     * }
     */
    public static float MouseDoubleClickTime(MemorySegment struct) {
        return struct.get(MouseDoubleClickTime$LAYOUT, MouseDoubleClickTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseDoubleClickTime
     * }
     */
    public static void MouseDoubleClickTime(MemorySegment struct, float fieldValue) {
        struct.set(MouseDoubleClickTime$LAYOUT, MouseDoubleClickTime$OFFSET, fieldValue);
    }

    private static final OfFloat MouseDoubleClickMaxDist$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MouseDoubleClickMaxDist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseDoubleClickMaxDist
     * }
     */
    public static final OfFloat MouseDoubleClickMaxDist$layout() {
        return MouseDoubleClickMaxDist$LAYOUT;
    }

    private static final long MouseDoubleClickMaxDist$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseDoubleClickMaxDist
     * }
     */
    public static final long MouseDoubleClickMaxDist$offset() {
        return MouseDoubleClickMaxDist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseDoubleClickMaxDist
     * }
     */
    public static float MouseDoubleClickMaxDist(MemorySegment struct) {
        return struct.get(MouseDoubleClickMaxDist$LAYOUT, MouseDoubleClickMaxDist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseDoubleClickMaxDist
     * }
     */
    public static void MouseDoubleClickMaxDist(MemorySegment struct, float fieldValue) {
        struct.set(MouseDoubleClickMaxDist$LAYOUT, MouseDoubleClickMaxDist$OFFSET, fieldValue);
    }

    private static final OfFloat MouseDragThreshold$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MouseDragThreshold"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseDragThreshold
     * }
     */
    public static final OfFloat MouseDragThreshold$layout() {
        return MouseDragThreshold$LAYOUT;
    }

    private static final long MouseDragThreshold$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseDragThreshold
     * }
     */
    public static final long MouseDragThreshold$offset() {
        return MouseDragThreshold$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseDragThreshold
     * }
     */
    public static float MouseDragThreshold(MemorySegment struct) {
        return struct.get(MouseDragThreshold$LAYOUT, MouseDragThreshold$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseDragThreshold
     * }
     */
    public static void MouseDragThreshold(MemorySegment struct, float fieldValue) {
        struct.set(MouseDragThreshold$LAYOUT, MouseDragThreshold$OFFSET, fieldValue);
    }

    private static final OfFloat KeyRepeatDelay$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("KeyRepeatDelay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float KeyRepeatDelay
     * }
     */
    public static final OfFloat KeyRepeatDelay$layout() {
        return KeyRepeatDelay$LAYOUT;
    }

    private static final long KeyRepeatDelay$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float KeyRepeatDelay
     * }
     */
    public static final long KeyRepeatDelay$offset() {
        return KeyRepeatDelay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float KeyRepeatDelay
     * }
     */
    public static float KeyRepeatDelay(MemorySegment struct) {
        return struct.get(KeyRepeatDelay$LAYOUT, KeyRepeatDelay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float KeyRepeatDelay
     * }
     */
    public static void KeyRepeatDelay(MemorySegment struct, float fieldValue) {
        struct.set(KeyRepeatDelay$LAYOUT, KeyRepeatDelay$OFFSET, fieldValue);
    }

    private static final OfFloat KeyRepeatRate$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("KeyRepeatRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float KeyRepeatRate
     * }
     */
    public static final OfFloat KeyRepeatRate$layout() {
        return KeyRepeatRate$LAYOUT;
    }

    private static final long KeyRepeatRate$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float KeyRepeatRate
     * }
     */
    public static final long KeyRepeatRate$offset() {
        return KeyRepeatRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float KeyRepeatRate
     * }
     */
    public static float KeyRepeatRate(MemorySegment struct) {
        return struct.get(KeyRepeatRate$LAYOUT, KeyRepeatRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float KeyRepeatRate
     * }
     */
    public static void KeyRepeatRate(MemorySegment struct, float fieldValue) {
        struct.set(KeyRepeatRate$LAYOUT, KeyRepeatRate$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigDebugIsDebuggerPresent$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDebugIsDebuggerPresent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDebugIsDebuggerPresent
     * }
     */
    public static final OfBoolean ConfigDebugIsDebuggerPresent$layout() {
        return ConfigDebugIsDebuggerPresent$LAYOUT;
    }

    private static final long ConfigDebugIsDebuggerPresent$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDebugIsDebuggerPresent
     * }
     */
    public static final long ConfigDebugIsDebuggerPresent$offset() {
        return ConfigDebugIsDebuggerPresent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDebugIsDebuggerPresent
     * }
     */
    public static boolean ConfigDebugIsDebuggerPresent(MemorySegment struct) {
        return struct.get(ConfigDebugIsDebuggerPresent$LAYOUT, ConfigDebugIsDebuggerPresent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDebugIsDebuggerPresent
     * }
     */
    public static void ConfigDebugIsDebuggerPresent(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDebugIsDebuggerPresent$LAYOUT, ConfigDebugIsDebuggerPresent$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigDebugBeginReturnValueOnce$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDebugBeginReturnValueOnce"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDebugBeginReturnValueOnce
     * }
     */
    public static final OfBoolean ConfigDebugBeginReturnValueOnce$layout() {
        return ConfigDebugBeginReturnValueOnce$LAYOUT;
    }

    private static final long ConfigDebugBeginReturnValueOnce$OFFSET = 125;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDebugBeginReturnValueOnce
     * }
     */
    public static final long ConfigDebugBeginReturnValueOnce$offset() {
        return ConfigDebugBeginReturnValueOnce$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDebugBeginReturnValueOnce
     * }
     */
    public static boolean ConfigDebugBeginReturnValueOnce(MemorySegment struct) {
        return struct.get(ConfigDebugBeginReturnValueOnce$LAYOUT, ConfigDebugBeginReturnValueOnce$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDebugBeginReturnValueOnce
     * }
     */
    public static void ConfigDebugBeginReturnValueOnce(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDebugBeginReturnValueOnce$LAYOUT, ConfigDebugBeginReturnValueOnce$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigDebugBeginReturnValueLoop$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDebugBeginReturnValueLoop"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDebugBeginReturnValueLoop
     * }
     */
    public static final OfBoolean ConfigDebugBeginReturnValueLoop$layout() {
        return ConfigDebugBeginReturnValueLoop$LAYOUT;
    }

    private static final long ConfigDebugBeginReturnValueLoop$OFFSET = 126;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDebugBeginReturnValueLoop
     * }
     */
    public static final long ConfigDebugBeginReturnValueLoop$offset() {
        return ConfigDebugBeginReturnValueLoop$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDebugBeginReturnValueLoop
     * }
     */
    public static boolean ConfigDebugBeginReturnValueLoop(MemorySegment struct) {
        return struct.get(ConfigDebugBeginReturnValueLoop$LAYOUT, ConfigDebugBeginReturnValueLoop$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDebugBeginReturnValueLoop
     * }
     */
    public static void ConfigDebugBeginReturnValueLoop(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDebugBeginReturnValueLoop$LAYOUT, ConfigDebugBeginReturnValueLoop$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigDebugIgnoreFocusLoss$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDebugIgnoreFocusLoss"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDebugIgnoreFocusLoss
     * }
     */
    public static final OfBoolean ConfigDebugIgnoreFocusLoss$layout() {
        return ConfigDebugIgnoreFocusLoss$LAYOUT;
    }

    private static final long ConfigDebugIgnoreFocusLoss$OFFSET = 127;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDebugIgnoreFocusLoss
     * }
     */
    public static final long ConfigDebugIgnoreFocusLoss$offset() {
        return ConfigDebugIgnoreFocusLoss$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDebugIgnoreFocusLoss
     * }
     */
    public static boolean ConfigDebugIgnoreFocusLoss(MemorySegment struct) {
        return struct.get(ConfigDebugIgnoreFocusLoss$LAYOUT, ConfigDebugIgnoreFocusLoss$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDebugIgnoreFocusLoss
     * }
     */
    public static void ConfigDebugIgnoreFocusLoss(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDebugIgnoreFocusLoss$LAYOUT, ConfigDebugIgnoreFocusLoss$OFFSET, fieldValue);
    }

    private static final OfBoolean ConfigDebugIniSettings$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ConfigDebugIniSettings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ConfigDebugIniSettings
     * }
     */
    public static final OfBoolean ConfigDebugIniSettings$layout() {
        return ConfigDebugIniSettings$LAYOUT;
    }

    private static final long ConfigDebugIniSettings$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ConfigDebugIniSettings
     * }
     */
    public static final long ConfigDebugIniSettings$offset() {
        return ConfigDebugIniSettings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ConfigDebugIniSettings
     * }
     */
    public static boolean ConfigDebugIniSettings(MemorySegment struct) {
        return struct.get(ConfigDebugIniSettings$LAYOUT, ConfigDebugIniSettings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ConfigDebugIniSettings
     * }
     */
    public static void ConfigDebugIniSettings(MemorySegment struct, boolean fieldValue) {
        struct.set(ConfigDebugIniSettings$LAYOUT, ConfigDebugIniSettings$OFFSET, fieldValue);
    }

    private static final AddressLayout BackendPlatformName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BackendPlatformName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *BackendPlatformName
     * }
     */
    public static final AddressLayout BackendPlatformName$layout() {
        return BackendPlatformName$LAYOUT;
    }

    private static final long BackendPlatformName$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *BackendPlatformName
     * }
     */
    public static final long BackendPlatformName$offset() {
        return BackendPlatformName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *BackendPlatformName
     * }
     */
    public static MemorySegment BackendPlatformName(MemorySegment struct) {
        return struct.get(BackendPlatformName$LAYOUT, BackendPlatformName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *BackendPlatformName
     * }
     */
    public static void BackendPlatformName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BackendPlatformName$LAYOUT, BackendPlatformName$OFFSET, fieldValue);
    }

    private static final AddressLayout BackendRendererName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BackendRendererName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *BackendRendererName
     * }
     */
    public static final AddressLayout BackendRendererName$layout() {
        return BackendRendererName$LAYOUT;
    }

    private static final long BackendRendererName$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *BackendRendererName
     * }
     */
    public static final long BackendRendererName$offset() {
        return BackendRendererName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *BackendRendererName
     * }
     */
    public static MemorySegment BackendRendererName(MemorySegment struct) {
        return struct.get(BackendRendererName$LAYOUT, BackendRendererName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *BackendRendererName
     * }
     */
    public static void BackendRendererName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BackendRendererName$LAYOUT, BackendRendererName$OFFSET, fieldValue);
    }

    private static final AddressLayout BackendPlatformUserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BackendPlatformUserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *BackendPlatformUserData
     * }
     */
    public static final AddressLayout BackendPlatformUserData$layout() {
        return BackendPlatformUserData$LAYOUT;
    }

    private static final long BackendPlatformUserData$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *BackendPlatformUserData
     * }
     */
    public static final long BackendPlatformUserData$offset() {
        return BackendPlatformUserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *BackendPlatformUserData
     * }
     */
    public static MemorySegment BackendPlatformUserData(MemorySegment struct) {
        return struct.get(BackendPlatformUserData$LAYOUT, BackendPlatformUserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *BackendPlatformUserData
     * }
     */
    public static void BackendPlatformUserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BackendPlatformUserData$LAYOUT, BackendPlatformUserData$OFFSET, fieldValue);
    }

    private static final AddressLayout BackendRendererUserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BackendRendererUserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *BackendRendererUserData
     * }
     */
    public static final AddressLayout BackendRendererUserData$layout() {
        return BackendRendererUserData$LAYOUT;
    }

    private static final long BackendRendererUserData$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *BackendRendererUserData
     * }
     */
    public static final long BackendRendererUserData$offset() {
        return BackendRendererUserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *BackendRendererUserData
     * }
     */
    public static MemorySegment BackendRendererUserData(MemorySegment struct) {
        return struct.get(BackendRendererUserData$LAYOUT, BackendRendererUserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *BackendRendererUserData
     * }
     */
    public static void BackendRendererUserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BackendRendererUserData$LAYOUT, BackendRendererUserData$OFFSET, fieldValue);
    }

    private static final AddressLayout BackendLanguageUserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("BackendLanguageUserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *BackendLanguageUserData
     * }
     */
    public static final AddressLayout BackendLanguageUserData$layout() {
        return BackendLanguageUserData$LAYOUT;
    }

    private static final long BackendLanguageUserData$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *BackendLanguageUserData
     * }
     */
    public static final long BackendLanguageUserData$offset() {
        return BackendLanguageUserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *BackendLanguageUserData
     * }
     */
    public static MemorySegment BackendLanguageUserData(MemorySegment struct) {
        return struct.get(BackendLanguageUserData$LAYOUT, BackendLanguageUserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *BackendLanguageUserData
     * }
     */
    public static void BackendLanguageUserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(BackendLanguageUserData$LAYOUT, BackendLanguageUserData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * const char *(*GetClipboardTextFn)(void *)
     * }
     */
    public static class GetClipboardTextFn {

        GetClipboardTextFn() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = imgui.upcallHandle(GetClipboardTextFn.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(GetClipboardTextFn.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout GetClipboardTextFn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GetClipboardTextFn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *(*GetClipboardTextFn)(void *)
     * }
     */
    public static final AddressLayout GetClipboardTextFn$layout() {
        return GetClipboardTextFn$LAYOUT;
    }

    private static final long GetClipboardTextFn$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *(*GetClipboardTextFn)(void *)
     * }
     */
    public static final long GetClipboardTextFn$offset() {
        return GetClipboardTextFn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *(*GetClipboardTextFn)(void *)
     * }
     */
    public static MemorySegment GetClipboardTextFn(MemorySegment struct) {
        return struct.get(GetClipboardTextFn$LAYOUT, GetClipboardTextFn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *(*GetClipboardTextFn)(void *)
     * }
     */
    public static void GetClipboardTextFn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GetClipboardTextFn$LAYOUT, GetClipboardTextFn$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*SetClipboardTextFn)(void *, const char *)
     * }
     */
    public static class SetClipboardTextFn {

        SetClipboardTextFn() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = imgui.upcallHandle(SetClipboardTextFn.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(SetClipboardTextFn.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout SetClipboardTextFn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("SetClipboardTextFn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*SetClipboardTextFn)(void *, const char *)
     * }
     */
    public static final AddressLayout SetClipboardTextFn$layout() {
        return SetClipboardTextFn$LAYOUT;
    }

    private static final long SetClipboardTextFn$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*SetClipboardTextFn)(void *, const char *)
     * }
     */
    public static final long SetClipboardTextFn$offset() {
        return SetClipboardTextFn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*SetClipboardTextFn)(void *, const char *)
     * }
     */
    public static MemorySegment SetClipboardTextFn(MemorySegment struct) {
        return struct.get(SetClipboardTextFn$LAYOUT, SetClipboardTextFn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*SetClipboardTextFn)(void *, const char *)
     * }
     */
    public static void SetClipboardTextFn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(SetClipboardTextFn$LAYOUT, SetClipboardTextFn$OFFSET, fieldValue);
    }

    private static final AddressLayout ClipboardUserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ClipboardUserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ClipboardUserData
     * }
     */
    public static final AddressLayout ClipboardUserData$layout() {
        return ClipboardUserData$LAYOUT;
    }

    private static final long ClipboardUserData$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ClipboardUserData
     * }
     */
    public static final long ClipboardUserData$offset() {
        return ClipboardUserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ClipboardUserData
     * }
     */
    public static MemorySegment ClipboardUserData(MemorySegment struct) {
        return struct.get(ClipboardUserData$LAYOUT, ClipboardUserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ClipboardUserData
     * }
     */
    public static void ClipboardUserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ClipboardUserData$LAYOUT, ClipboardUserData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * bool (*PlatformOpenInShellFn)(ImGuiContext *, const char *)
     * }
     */
    public static class PlatformOpenInShellFn {

        PlatformOpenInShellFn() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            boolean apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = imgui.upcallHandle(PlatformOpenInShellFn.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PlatformOpenInShellFn.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static boolean invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (boolean) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PlatformOpenInShellFn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PlatformOpenInShellFn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool (*PlatformOpenInShellFn)(ImGuiContext *, const char *)
     * }
     */
    public static final AddressLayout PlatformOpenInShellFn$layout() {
        return PlatformOpenInShellFn$LAYOUT;
    }

    private static final long PlatformOpenInShellFn$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool (*PlatformOpenInShellFn)(ImGuiContext *, const char *)
     * }
     */
    public static final long PlatformOpenInShellFn$offset() {
        return PlatformOpenInShellFn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool (*PlatformOpenInShellFn)(ImGuiContext *, const char *)
     * }
     */
    public static MemorySegment PlatformOpenInShellFn(MemorySegment struct) {
        return struct.get(PlatformOpenInShellFn$LAYOUT, PlatformOpenInShellFn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool (*PlatformOpenInShellFn)(ImGuiContext *, const char *)
     * }
     */
    public static void PlatformOpenInShellFn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PlatformOpenInShellFn$LAYOUT, PlatformOpenInShellFn$OFFSET, fieldValue);
    }

    private static final AddressLayout PlatformOpenInShellUserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PlatformOpenInShellUserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *PlatformOpenInShellUserData
     * }
     */
    public static final AddressLayout PlatformOpenInShellUserData$layout() {
        return PlatformOpenInShellUserData$LAYOUT;
    }

    private static final long PlatformOpenInShellUserData$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *PlatformOpenInShellUserData
     * }
     */
    public static final long PlatformOpenInShellUserData$offset() {
        return PlatformOpenInShellUserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *PlatformOpenInShellUserData
     * }
     */
    public static MemorySegment PlatformOpenInShellUserData(MemorySegment struct) {
        return struct.get(PlatformOpenInShellUserData$LAYOUT, PlatformOpenInShellUserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *PlatformOpenInShellUserData
     * }
     */
    public static void PlatformOpenInShellUserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PlatformOpenInShellUserData$LAYOUT, PlatformOpenInShellUserData$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*PlatformSetImeDataFn)(ImGuiContext *, ImGuiViewport *, ImGuiPlatformImeData *)
     * }
     */
    public static class PlatformSetImeDataFn {

        PlatformSetImeDataFn() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = imgui.upcallHandle(PlatformSetImeDataFn.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(PlatformSetImeDataFn.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout PlatformSetImeDataFn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PlatformSetImeDataFn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*PlatformSetImeDataFn)(ImGuiContext *, ImGuiViewport *, ImGuiPlatformImeData *)
     * }
     */
    public static final AddressLayout PlatformSetImeDataFn$layout() {
        return PlatformSetImeDataFn$LAYOUT;
    }

    private static final long PlatformSetImeDataFn$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*PlatformSetImeDataFn)(ImGuiContext *, ImGuiViewport *, ImGuiPlatformImeData *)
     * }
     */
    public static final long PlatformSetImeDataFn$offset() {
        return PlatformSetImeDataFn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*PlatformSetImeDataFn)(ImGuiContext *, ImGuiViewport *, ImGuiPlatformImeData *)
     * }
     */
    public static MemorySegment PlatformSetImeDataFn(MemorySegment struct) {
        return struct.get(PlatformSetImeDataFn$LAYOUT, PlatformSetImeDataFn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*PlatformSetImeDataFn)(ImGuiContext *, ImGuiViewport *, ImGuiPlatformImeData *)
     * }
     */
    public static void PlatformSetImeDataFn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PlatformSetImeDataFn$LAYOUT, PlatformSetImeDataFn$OFFSET, fieldValue);
    }

    private static final OfShort PlatformLocaleDecimalPoint$LAYOUT = (OfShort)$LAYOUT.select(groupElement("PlatformLocaleDecimalPoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImWchar PlatformLocaleDecimalPoint
     * }
     */
    public static final OfShort PlatformLocaleDecimalPoint$layout() {
        return PlatformLocaleDecimalPoint$LAYOUT;
    }

    private static final long PlatformLocaleDecimalPoint$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImWchar PlatformLocaleDecimalPoint
     * }
     */
    public static final long PlatformLocaleDecimalPoint$offset() {
        return PlatformLocaleDecimalPoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImWchar PlatformLocaleDecimalPoint
     * }
     */
    public static short PlatformLocaleDecimalPoint(MemorySegment struct) {
        return struct.get(PlatformLocaleDecimalPoint$LAYOUT, PlatformLocaleDecimalPoint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImWchar PlatformLocaleDecimalPoint
     * }
     */
    public static void PlatformLocaleDecimalPoint(MemorySegment struct, short fieldValue) {
        struct.set(PlatformLocaleDecimalPoint$LAYOUT, PlatformLocaleDecimalPoint$OFFSET, fieldValue);
    }

    private static final OfBoolean WantCaptureMouse$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantCaptureMouse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantCaptureMouse
     * }
     */
    public static final OfBoolean WantCaptureMouse$layout() {
        return WantCaptureMouse$LAYOUT;
    }

    private static final long WantCaptureMouse$OFFSET = 226;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantCaptureMouse
     * }
     */
    public static final long WantCaptureMouse$offset() {
        return WantCaptureMouse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantCaptureMouse
     * }
     */
    public static boolean WantCaptureMouse(MemorySegment struct) {
        return struct.get(WantCaptureMouse$LAYOUT, WantCaptureMouse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantCaptureMouse
     * }
     */
    public static void WantCaptureMouse(MemorySegment struct, boolean fieldValue) {
        struct.set(WantCaptureMouse$LAYOUT, WantCaptureMouse$OFFSET, fieldValue);
    }

    private static final OfBoolean WantCaptureKeyboard$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantCaptureKeyboard"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantCaptureKeyboard
     * }
     */
    public static final OfBoolean WantCaptureKeyboard$layout() {
        return WantCaptureKeyboard$LAYOUT;
    }

    private static final long WantCaptureKeyboard$OFFSET = 227;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantCaptureKeyboard
     * }
     */
    public static final long WantCaptureKeyboard$offset() {
        return WantCaptureKeyboard$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantCaptureKeyboard
     * }
     */
    public static boolean WantCaptureKeyboard(MemorySegment struct) {
        return struct.get(WantCaptureKeyboard$LAYOUT, WantCaptureKeyboard$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantCaptureKeyboard
     * }
     */
    public static void WantCaptureKeyboard(MemorySegment struct, boolean fieldValue) {
        struct.set(WantCaptureKeyboard$LAYOUT, WantCaptureKeyboard$OFFSET, fieldValue);
    }

    private static final OfBoolean WantTextInput$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantTextInput"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantTextInput
     * }
     */
    public static final OfBoolean WantTextInput$layout() {
        return WantTextInput$LAYOUT;
    }

    private static final long WantTextInput$OFFSET = 228;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantTextInput
     * }
     */
    public static final long WantTextInput$offset() {
        return WantTextInput$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantTextInput
     * }
     */
    public static boolean WantTextInput(MemorySegment struct) {
        return struct.get(WantTextInput$LAYOUT, WantTextInput$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantTextInput
     * }
     */
    public static void WantTextInput(MemorySegment struct, boolean fieldValue) {
        struct.set(WantTextInput$LAYOUT, WantTextInput$OFFSET, fieldValue);
    }

    private static final OfBoolean WantSetMousePos$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantSetMousePos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantSetMousePos
     * }
     */
    public static final OfBoolean WantSetMousePos$layout() {
        return WantSetMousePos$LAYOUT;
    }

    private static final long WantSetMousePos$OFFSET = 229;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantSetMousePos
     * }
     */
    public static final long WantSetMousePos$offset() {
        return WantSetMousePos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantSetMousePos
     * }
     */
    public static boolean WantSetMousePos(MemorySegment struct) {
        return struct.get(WantSetMousePos$LAYOUT, WantSetMousePos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantSetMousePos
     * }
     */
    public static void WantSetMousePos(MemorySegment struct, boolean fieldValue) {
        struct.set(WantSetMousePos$LAYOUT, WantSetMousePos$OFFSET, fieldValue);
    }

    private static final OfBoolean WantSaveIniSettings$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantSaveIniSettings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantSaveIniSettings
     * }
     */
    public static final OfBoolean WantSaveIniSettings$layout() {
        return WantSaveIniSettings$LAYOUT;
    }

    private static final long WantSaveIniSettings$OFFSET = 230;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantSaveIniSettings
     * }
     */
    public static final long WantSaveIniSettings$offset() {
        return WantSaveIniSettings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantSaveIniSettings
     * }
     */
    public static boolean WantSaveIniSettings(MemorySegment struct) {
        return struct.get(WantSaveIniSettings$LAYOUT, WantSaveIniSettings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantSaveIniSettings
     * }
     */
    public static void WantSaveIniSettings(MemorySegment struct, boolean fieldValue) {
        struct.set(WantSaveIniSettings$LAYOUT, WantSaveIniSettings$OFFSET, fieldValue);
    }

    private static final OfBoolean NavActive$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavActive
     * }
     */
    public static final OfBoolean NavActive$layout() {
        return NavActive$LAYOUT;
    }

    private static final long NavActive$OFFSET = 231;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavActive
     * }
     */
    public static final long NavActive$offset() {
        return NavActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavActive
     * }
     */
    public static boolean NavActive(MemorySegment struct) {
        return struct.get(NavActive$LAYOUT, NavActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavActive
     * }
     */
    public static void NavActive(MemorySegment struct, boolean fieldValue) {
        struct.set(NavActive$LAYOUT, NavActive$OFFSET, fieldValue);
    }

    private static final OfBoolean NavVisible$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavVisible"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavVisible
     * }
     */
    public static final OfBoolean NavVisible$layout() {
        return NavVisible$LAYOUT;
    }

    private static final long NavVisible$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavVisible
     * }
     */
    public static final long NavVisible$offset() {
        return NavVisible$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavVisible
     * }
     */
    public static boolean NavVisible(MemorySegment struct) {
        return struct.get(NavVisible$LAYOUT, NavVisible$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavVisible
     * }
     */
    public static void NavVisible(MemorySegment struct, boolean fieldValue) {
        struct.set(NavVisible$LAYOUT, NavVisible$OFFSET, fieldValue);
    }

    private static final OfFloat Framerate$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("Framerate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float Framerate
     * }
     */
    public static final OfFloat Framerate$layout() {
        return Framerate$LAYOUT;
    }

    private static final long Framerate$OFFSET = 236;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float Framerate
     * }
     */
    public static final long Framerate$offset() {
        return Framerate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float Framerate
     * }
     */
    public static float Framerate(MemorySegment struct) {
        return struct.get(Framerate$LAYOUT, Framerate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float Framerate
     * }
     */
    public static void Framerate(MemorySegment struct, float fieldValue) {
        struct.set(Framerate$LAYOUT, Framerate$OFFSET, fieldValue);
    }

    private static final OfInt MetricsRenderVertices$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetricsRenderVertices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int MetricsRenderVertices
     * }
     */
    public static final OfInt MetricsRenderVertices$layout() {
        return MetricsRenderVertices$LAYOUT;
    }

    private static final long MetricsRenderVertices$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int MetricsRenderVertices
     * }
     */
    public static final long MetricsRenderVertices$offset() {
        return MetricsRenderVertices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int MetricsRenderVertices
     * }
     */
    public static int MetricsRenderVertices(MemorySegment struct) {
        return struct.get(MetricsRenderVertices$LAYOUT, MetricsRenderVertices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int MetricsRenderVertices
     * }
     */
    public static void MetricsRenderVertices(MemorySegment struct, int fieldValue) {
        struct.set(MetricsRenderVertices$LAYOUT, MetricsRenderVertices$OFFSET, fieldValue);
    }

    private static final OfInt MetricsRenderIndices$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetricsRenderIndices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int MetricsRenderIndices
     * }
     */
    public static final OfInt MetricsRenderIndices$layout() {
        return MetricsRenderIndices$LAYOUT;
    }

    private static final long MetricsRenderIndices$OFFSET = 244;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int MetricsRenderIndices
     * }
     */
    public static final long MetricsRenderIndices$offset() {
        return MetricsRenderIndices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int MetricsRenderIndices
     * }
     */
    public static int MetricsRenderIndices(MemorySegment struct) {
        return struct.get(MetricsRenderIndices$LAYOUT, MetricsRenderIndices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int MetricsRenderIndices
     * }
     */
    public static void MetricsRenderIndices(MemorySegment struct, int fieldValue) {
        struct.set(MetricsRenderIndices$LAYOUT, MetricsRenderIndices$OFFSET, fieldValue);
    }

    private static final OfInt MetricsRenderWindows$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetricsRenderWindows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int MetricsRenderWindows
     * }
     */
    public static final OfInt MetricsRenderWindows$layout() {
        return MetricsRenderWindows$LAYOUT;
    }

    private static final long MetricsRenderWindows$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int MetricsRenderWindows
     * }
     */
    public static final long MetricsRenderWindows$offset() {
        return MetricsRenderWindows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int MetricsRenderWindows
     * }
     */
    public static int MetricsRenderWindows(MemorySegment struct) {
        return struct.get(MetricsRenderWindows$LAYOUT, MetricsRenderWindows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int MetricsRenderWindows
     * }
     */
    public static void MetricsRenderWindows(MemorySegment struct, int fieldValue) {
        struct.set(MetricsRenderWindows$LAYOUT, MetricsRenderWindows$OFFSET, fieldValue);
    }

    private static final OfInt MetricsActiveWindows$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetricsActiveWindows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int MetricsActiveWindows
     * }
     */
    public static final OfInt MetricsActiveWindows$layout() {
        return MetricsActiveWindows$LAYOUT;
    }

    private static final long MetricsActiveWindows$OFFSET = 252;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int MetricsActiveWindows
     * }
     */
    public static final long MetricsActiveWindows$offset() {
        return MetricsActiveWindows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int MetricsActiveWindows
     * }
     */
    public static int MetricsActiveWindows(MemorySegment struct) {
        return struct.get(MetricsActiveWindows$LAYOUT, MetricsActiveWindows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int MetricsActiveWindows
     * }
     */
    public static void MetricsActiveWindows(MemorySegment struct, int fieldValue) {
        struct.set(MetricsActiveWindows$LAYOUT, MetricsActiveWindows$OFFSET, fieldValue);
    }

    private static final GroupLayout MouseDelta$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MouseDelta"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 MouseDelta
     * }
     */
    public static final GroupLayout MouseDelta$layout() {
        return MouseDelta$LAYOUT;
    }

    private static final long MouseDelta$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 MouseDelta
     * }
     */
    public static final long MouseDelta$offset() {
        return MouseDelta$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 MouseDelta
     * }
     */
    public static MemorySegment MouseDelta(MemorySegment struct) {
        return struct.asSlice(MouseDelta$OFFSET, MouseDelta$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 MouseDelta
     * }
     */
    public static void MouseDelta(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseDelta$OFFSET, MouseDelta$LAYOUT.byteSize());
    }

    private static final AddressLayout Ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static final AddressLayout Ctx$layout() {
        return Ctx$LAYOUT;
    }

    private static final long Ctx$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static final long Ctx$offset() {
        return Ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static MemorySegment Ctx(MemorySegment struct) {
        return struct.get(Ctx$LAYOUT, Ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static void Ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Ctx$LAYOUT, Ctx$OFFSET, fieldValue);
    }

    private static final GroupLayout MousePos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MousePos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 MousePos
     * }
     */
    public static final GroupLayout MousePos$layout() {
        return MousePos$LAYOUT;
    }

    private static final long MousePos$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 MousePos
     * }
     */
    public static final long MousePos$offset() {
        return MousePos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 MousePos
     * }
     */
    public static MemorySegment MousePos(MemorySegment struct) {
        return struct.asSlice(MousePos$OFFSET, MousePos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 MousePos
     * }
     */
    public static void MousePos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MousePos$OFFSET, MousePos$LAYOUT.byteSize());
    }

    private static final SequenceLayout MouseDown$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseDown"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MouseDown[5]
     * }
     */
    public static final SequenceLayout MouseDown$layout() {
        return MouseDown$LAYOUT;
    }

    private static final long MouseDown$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MouseDown[5]
     * }
     */
    public static final long MouseDown$offset() {
        return MouseDown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MouseDown[5]
     * }
     */
    public static MemorySegment MouseDown(MemorySegment struct) {
        return struct.asSlice(MouseDown$OFFSET, MouseDown$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MouseDown[5]
     * }
     */
    public static void MouseDown(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseDown$OFFSET, MouseDown$LAYOUT.byteSize());
    }

    private static long[] MouseDown$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * bool MouseDown[5]
     * }
     */
    public static long[] MouseDown$dimensions() {
        return MouseDown$DIMS;
    }
    private static final VarHandle MouseDown$ELEM_HANDLE = MouseDown$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * bool MouseDown[5]
     * }
     */
    public static boolean MouseDown(MemorySegment struct, long index0) {
        return (boolean)MouseDown$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * bool MouseDown[5]
     * }
     */
    public static void MouseDown(MemorySegment struct, long index0, boolean fieldValue) {
        MouseDown$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfFloat MouseWheel$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MouseWheel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseWheel
     * }
     */
    public static final OfFloat MouseWheel$layout() {
        return MouseWheel$LAYOUT;
    }

    private static final long MouseWheel$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseWheel
     * }
     */
    public static final long MouseWheel$offset() {
        return MouseWheel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseWheel
     * }
     */
    public static float MouseWheel(MemorySegment struct) {
        return struct.get(MouseWheel$LAYOUT, MouseWheel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseWheel
     * }
     */
    public static void MouseWheel(MemorySegment struct, float fieldValue) {
        struct.set(MouseWheel$LAYOUT, MouseWheel$OFFSET, fieldValue);
    }

    private static final OfFloat MouseWheelH$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MouseWheelH"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseWheelH
     * }
     */
    public static final OfFloat MouseWheelH$layout() {
        return MouseWheelH$LAYOUT;
    }

    private static final long MouseWheelH$OFFSET = 292;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseWheelH
     * }
     */
    public static final long MouseWheelH$offset() {
        return MouseWheelH$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseWheelH
     * }
     */
    public static float MouseWheelH(MemorySegment struct) {
        return struct.get(MouseWheelH$LAYOUT, MouseWheelH$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseWheelH
     * }
     */
    public static void MouseWheelH(MemorySegment struct, float fieldValue) {
        struct.set(MouseWheelH$LAYOUT, MouseWheelH$OFFSET, fieldValue);
    }

    private static final OfInt MouseSource$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MouseSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMouseSource MouseSource
     * }
     */
    public static final OfInt MouseSource$layout() {
        return MouseSource$LAYOUT;
    }

    private static final long MouseSource$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMouseSource MouseSource
     * }
     */
    public static final long MouseSource$offset() {
        return MouseSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMouseSource MouseSource
     * }
     */
    public static int MouseSource(MemorySegment struct) {
        return struct.get(MouseSource$LAYOUT, MouseSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMouseSource MouseSource
     * }
     */
    public static void MouseSource(MemorySegment struct, int fieldValue) {
        struct.set(MouseSource$LAYOUT, MouseSource$OFFSET, fieldValue);
    }

    private static final OfInt MouseHoveredViewport$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MouseHoveredViewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID MouseHoveredViewport
     * }
     */
    public static final OfInt MouseHoveredViewport$layout() {
        return MouseHoveredViewport$LAYOUT;
    }

    private static final long MouseHoveredViewport$OFFSET = 300;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID MouseHoveredViewport
     * }
     */
    public static final long MouseHoveredViewport$offset() {
        return MouseHoveredViewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID MouseHoveredViewport
     * }
     */
    public static int MouseHoveredViewport(MemorySegment struct) {
        return struct.get(MouseHoveredViewport$LAYOUT, MouseHoveredViewport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID MouseHoveredViewport
     * }
     */
    public static void MouseHoveredViewport(MemorySegment struct, int fieldValue) {
        struct.set(MouseHoveredViewport$LAYOUT, MouseHoveredViewport$OFFSET, fieldValue);
    }

    private static final OfBoolean KeyCtrl$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("KeyCtrl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool KeyCtrl
     * }
     */
    public static final OfBoolean KeyCtrl$layout() {
        return KeyCtrl$LAYOUT;
    }

    private static final long KeyCtrl$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool KeyCtrl
     * }
     */
    public static final long KeyCtrl$offset() {
        return KeyCtrl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool KeyCtrl
     * }
     */
    public static boolean KeyCtrl(MemorySegment struct) {
        return struct.get(KeyCtrl$LAYOUT, KeyCtrl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool KeyCtrl
     * }
     */
    public static void KeyCtrl(MemorySegment struct, boolean fieldValue) {
        struct.set(KeyCtrl$LAYOUT, KeyCtrl$OFFSET, fieldValue);
    }

    private static final OfBoolean KeyShift$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("KeyShift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool KeyShift
     * }
     */
    public static final OfBoolean KeyShift$layout() {
        return KeyShift$LAYOUT;
    }

    private static final long KeyShift$OFFSET = 305;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool KeyShift
     * }
     */
    public static final long KeyShift$offset() {
        return KeyShift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool KeyShift
     * }
     */
    public static boolean KeyShift(MemorySegment struct) {
        return struct.get(KeyShift$LAYOUT, KeyShift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool KeyShift
     * }
     */
    public static void KeyShift(MemorySegment struct, boolean fieldValue) {
        struct.set(KeyShift$LAYOUT, KeyShift$OFFSET, fieldValue);
    }

    private static final OfBoolean KeyAlt$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("KeyAlt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool KeyAlt
     * }
     */
    public static final OfBoolean KeyAlt$layout() {
        return KeyAlt$LAYOUT;
    }

    private static final long KeyAlt$OFFSET = 306;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool KeyAlt
     * }
     */
    public static final long KeyAlt$offset() {
        return KeyAlt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool KeyAlt
     * }
     */
    public static boolean KeyAlt(MemorySegment struct) {
        return struct.get(KeyAlt$LAYOUT, KeyAlt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool KeyAlt
     * }
     */
    public static void KeyAlt(MemorySegment struct, boolean fieldValue) {
        struct.set(KeyAlt$LAYOUT, KeyAlt$OFFSET, fieldValue);
    }

    private static final OfBoolean KeySuper$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("KeySuper"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool KeySuper
     * }
     */
    public static final OfBoolean KeySuper$layout() {
        return KeySuper$LAYOUT;
    }

    private static final long KeySuper$OFFSET = 307;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool KeySuper
     * }
     */
    public static final long KeySuper$offset() {
        return KeySuper$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool KeySuper
     * }
     */
    public static boolean KeySuper(MemorySegment struct) {
        return struct.get(KeySuper$LAYOUT, KeySuper$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool KeySuper
     * }
     */
    public static void KeySuper(MemorySegment struct, boolean fieldValue) {
        struct.set(KeySuper$LAYOUT, KeySuper$OFFSET, fieldValue);
    }

    private static final OfInt KeyMods$LAYOUT = (OfInt)$LAYOUT.select(groupElement("KeyMods"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyChord KeyMods
     * }
     */
    public static final OfInt KeyMods$layout() {
        return KeyMods$LAYOUT;
    }

    private static final long KeyMods$OFFSET = 308;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyChord KeyMods
     * }
     */
    public static final long KeyMods$offset() {
        return KeyMods$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord KeyMods
     * }
     */
    public static int KeyMods(MemorySegment struct) {
        return struct.get(KeyMods$LAYOUT, KeyMods$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord KeyMods
     * }
     */
    public static void KeyMods(MemorySegment struct, int fieldValue) {
        struct.set(KeyMods$LAYOUT, KeyMods$OFFSET, fieldValue);
    }

    private static final SequenceLayout KeysData$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("KeysData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyData KeysData[154]
     * }
     */
    public static final SequenceLayout KeysData$layout() {
        return KeysData$LAYOUT;
    }

    private static final long KeysData$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyData KeysData[154]
     * }
     */
    public static final long KeysData$offset() {
        return KeysData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyData KeysData[154]
     * }
     */
    public static MemorySegment KeysData(MemorySegment struct) {
        return struct.asSlice(KeysData$OFFSET, KeysData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyData KeysData[154]
     * }
     */
    public static void KeysData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, KeysData$OFFSET, KeysData$LAYOUT.byteSize());
    }

    private static long[] KeysData$DIMS = { 154 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImGuiKeyData KeysData[154]
     * }
     */
    public static long[] KeysData$dimensions() {
        return KeysData$DIMS;
    }
    private static final MethodHandle KeysData$ELEM_HANDLE = KeysData$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImGuiKeyData KeysData[154]
     * }
     */
    public static MemorySegment KeysData(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)KeysData$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImGuiKeyData KeysData[154]
     * }
     */
    public static void KeysData(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, KeysData(struct, index0), 0L, ImGuiKeyData.layout().byteSize());
    }

    private static final OfBoolean WantCaptureMouseUnlessPopupClose$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantCaptureMouseUnlessPopupClose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantCaptureMouseUnlessPopupClose
     * }
     */
    public static final OfBoolean WantCaptureMouseUnlessPopupClose$layout() {
        return WantCaptureMouseUnlessPopupClose$LAYOUT;
    }

    private static final long WantCaptureMouseUnlessPopupClose$OFFSET = 2776;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantCaptureMouseUnlessPopupClose
     * }
     */
    public static final long WantCaptureMouseUnlessPopupClose$offset() {
        return WantCaptureMouseUnlessPopupClose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantCaptureMouseUnlessPopupClose
     * }
     */
    public static boolean WantCaptureMouseUnlessPopupClose(MemorySegment struct) {
        return struct.get(WantCaptureMouseUnlessPopupClose$LAYOUT, WantCaptureMouseUnlessPopupClose$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantCaptureMouseUnlessPopupClose
     * }
     */
    public static void WantCaptureMouseUnlessPopupClose(MemorySegment struct, boolean fieldValue) {
        struct.set(WantCaptureMouseUnlessPopupClose$LAYOUT, WantCaptureMouseUnlessPopupClose$OFFSET, fieldValue);
    }

    private static final GroupLayout MousePosPrev$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MousePosPrev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 MousePosPrev
     * }
     */
    public static final GroupLayout MousePosPrev$layout() {
        return MousePosPrev$LAYOUT;
    }

    private static final long MousePosPrev$OFFSET = 2780;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 MousePosPrev
     * }
     */
    public static final long MousePosPrev$offset() {
        return MousePosPrev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 MousePosPrev
     * }
     */
    public static MemorySegment MousePosPrev(MemorySegment struct) {
        return struct.asSlice(MousePosPrev$OFFSET, MousePosPrev$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 MousePosPrev
     * }
     */
    public static void MousePosPrev(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MousePosPrev$OFFSET, MousePosPrev$LAYOUT.byteSize());
    }

    private static final SequenceLayout MouseClickedPos$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseClickedPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 MouseClickedPos[5]
     * }
     */
    public static final SequenceLayout MouseClickedPos$layout() {
        return MouseClickedPos$LAYOUT;
    }

    private static final long MouseClickedPos$OFFSET = 2788;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 MouseClickedPos[5]
     * }
     */
    public static final long MouseClickedPos$offset() {
        return MouseClickedPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 MouseClickedPos[5]
     * }
     */
    public static MemorySegment MouseClickedPos(MemorySegment struct) {
        return struct.asSlice(MouseClickedPos$OFFSET, MouseClickedPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 MouseClickedPos[5]
     * }
     */
    public static void MouseClickedPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseClickedPos$OFFSET, MouseClickedPos$LAYOUT.byteSize());
    }

    private static long[] MouseClickedPos$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImVec2 MouseClickedPos[5]
     * }
     */
    public static long[] MouseClickedPos$dimensions() {
        return MouseClickedPos$DIMS;
    }
    private static final MethodHandle MouseClickedPos$ELEM_HANDLE = MouseClickedPos$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImVec2 MouseClickedPos[5]
     * }
     */
    public static MemorySegment MouseClickedPos(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)MouseClickedPos$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImVec2 MouseClickedPos[5]
     * }
     */
    public static void MouseClickedPos(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, MouseClickedPos(struct, index0), 0L, ImVec2.layout().byteSize());
    }

    private static final SequenceLayout MouseClickedTime$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseClickedTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double MouseClickedTime[5]
     * }
     */
    public static final SequenceLayout MouseClickedTime$layout() {
        return MouseClickedTime$LAYOUT;
    }

    private static final long MouseClickedTime$OFFSET = 2832;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double MouseClickedTime[5]
     * }
     */
    public static final long MouseClickedTime$offset() {
        return MouseClickedTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double MouseClickedTime[5]
     * }
     */
    public static MemorySegment MouseClickedTime(MemorySegment struct) {
        return struct.asSlice(MouseClickedTime$OFFSET, MouseClickedTime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double MouseClickedTime[5]
     * }
     */
    public static void MouseClickedTime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseClickedTime$OFFSET, MouseClickedTime$LAYOUT.byteSize());
    }

    private static long[] MouseClickedTime$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double MouseClickedTime[5]
     * }
     */
    public static long[] MouseClickedTime$dimensions() {
        return MouseClickedTime$DIMS;
    }
    private static final VarHandle MouseClickedTime$ELEM_HANDLE = MouseClickedTime$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double MouseClickedTime[5]
     * }
     */
    public static double MouseClickedTime(MemorySegment struct, long index0) {
        return (double)MouseClickedTime$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double MouseClickedTime[5]
     * }
     */
    public static void MouseClickedTime(MemorySegment struct, long index0, double fieldValue) {
        MouseClickedTime$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout MouseClicked$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseClicked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MouseClicked[5]
     * }
     */
    public static final SequenceLayout MouseClicked$layout() {
        return MouseClicked$LAYOUT;
    }

    private static final long MouseClicked$OFFSET = 2872;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MouseClicked[5]
     * }
     */
    public static final long MouseClicked$offset() {
        return MouseClicked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MouseClicked[5]
     * }
     */
    public static MemorySegment MouseClicked(MemorySegment struct) {
        return struct.asSlice(MouseClicked$OFFSET, MouseClicked$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MouseClicked[5]
     * }
     */
    public static void MouseClicked(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseClicked$OFFSET, MouseClicked$LAYOUT.byteSize());
    }

    private static long[] MouseClicked$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * bool MouseClicked[5]
     * }
     */
    public static long[] MouseClicked$dimensions() {
        return MouseClicked$DIMS;
    }
    private static final VarHandle MouseClicked$ELEM_HANDLE = MouseClicked$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * bool MouseClicked[5]
     * }
     */
    public static boolean MouseClicked(MemorySegment struct, long index0) {
        return (boolean)MouseClicked$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * bool MouseClicked[5]
     * }
     */
    public static void MouseClicked(MemorySegment struct, long index0, boolean fieldValue) {
        MouseClicked$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout MouseDoubleClicked$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseDoubleClicked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MouseDoubleClicked[5]
     * }
     */
    public static final SequenceLayout MouseDoubleClicked$layout() {
        return MouseDoubleClicked$LAYOUT;
    }

    private static final long MouseDoubleClicked$OFFSET = 2877;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MouseDoubleClicked[5]
     * }
     */
    public static final long MouseDoubleClicked$offset() {
        return MouseDoubleClicked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MouseDoubleClicked[5]
     * }
     */
    public static MemorySegment MouseDoubleClicked(MemorySegment struct) {
        return struct.asSlice(MouseDoubleClicked$OFFSET, MouseDoubleClicked$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MouseDoubleClicked[5]
     * }
     */
    public static void MouseDoubleClicked(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseDoubleClicked$OFFSET, MouseDoubleClicked$LAYOUT.byteSize());
    }

    private static long[] MouseDoubleClicked$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * bool MouseDoubleClicked[5]
     * }
     */
    public static long[] MouseDoubleClicked$dimensions() {
        return MouseDoubleClicked$DIMS;
    }
    private static final VarHandle MouseDoubleClicked$ELEM_HANDLE = MouseDoubleClicked$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * bool MouseDoubleClicked[5]
     * }
     */
    public static boolean MouseDoubleClicked(MemorySegment struct, long index0) {
        return (boolean)MouseDoubleClicked$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * bool MouseDoubleClicked[5]
     * }
     */
    public static void MouseDoubleClicked(MemorySegment struct, long index0, boolean fieldValue) {
        MouseDoubleClicked$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout MouseClickedCount$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseClickedCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedCount[5]
     * }
     */
    public static final SequenceLayout MouseClickedCount$layout() {
        return MouseClickedCount$LAYOUT;
    }

    private static final long MouseClickedCount$OFFSET = 2882;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedCount[5]
     * }
     */
    public static final long MouseClickedCount$offset() {
        return MouseClickedCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedCount[5]
     * }
     */
    public static MemorySegment MouseClickedCount(MemorySegment struct) {
        return struct.asSlice(MouseClickedCount$OFFSET, MouseClickedCount$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedCount[5]
     * }
     */
    public static void MouseClickedCount(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseClickedCount$OFFSET, MouseClickedCount$LAYOUT.byteSize());
    }

    private static long[] MouseClickedCount$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImU16 MouseClickedCount[5]
     * }
     */
    public static long[] MouseClickedCount$dimensions() {
        return MouseClickedCount$DIMS;
    }
    private static final VarHandle MouseClickedCount$ELEM_HANDLE = MouseClickedCount$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedCount[5]
     * }
     */
    public static short MouseClickedCount(MemorySegment struct, long index0) {
        return (short)MouseClickedCount$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedCount[5]
     * }
     */
    public static void MouseClickedCount(MemorySegment struct, long index0, short fieldValue) {
        MouseClickedCount$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout MouseClickedLastCount$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseClickedLastCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedLastCount[5]
     * }
     */
    public static final SequenceLayout MouseClickedLastCount$layout() {
        return MouseClickedLastCount$LAYOUT;
    }

    private static final long MouseClickedLastCount$OFFSET = 2892;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedLastCount[5]
     * }
     */
    public static final long MouseClickedLastCount$offset() {
        return MouseClickedLastCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedLastCount[5]
     * }
     */
    public static MemorySegment MouseClickedLastCount(MemorySegment struct) {
        return struct.asSlice(MouseClickedLastCount$OFFSET, MouseClickedLastCount$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedLastCount[5]
     * }
     */
    public static void MouseClickedLastCount(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseClickedLastCount$OFFSET, MouseClickedLastCount$LAYOUT.byteSize());
    }

    private static long[] MouseClickedLastCount$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImU16 MouseClickedLastCount[5]
     * }
     */
    public static long[] MouseClickedLastCount$dimensions() {
        return MouseClickedLastCount$DIMS;
    }
    private static final VarHandle MouseClickedLastCount$ELEM_HANDLE = MouseClickedLastCount$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedLastCount[5]
     * }
     */
    public static short MouseClickedLastCount(MemorySegment struct, long index0) {
        return (short)MouseClickedLastCount$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImU16 MouseClickedLastCount[5]
     * }
     */
    public static void MouseClickedLastCount(MemorySegment struct, long index0, short fieldValue) {
        MouseClickedLastCount$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout MouseReleased$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseReleased"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MouseReleased[5]
     * }
     */
    public static final SequenceLayout MouseReleased$layout() {
        return MouseReleased$LAYOUT;
    }

    private static final long MouseReleased$OFFSET = 2902;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MouseReleased[5]
     * }
     */
    public static final long MouseReleased$offset() {
        return MouseReleased$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MouseReleased[5]
     * }
     */
    public static MemorySegment MouseReleased(MemorySegment struct) {
        return struct.asSlice(MouseReleased$OFFSET, MouseReleased$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MouseReleased[5]
     * }
     */
    public static void MouseReleased(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseReleased$OFFSET, MouseReleased$LAYOUT.byteSize());
    }

    private static long[] MouseReleased$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * bool MouseReleased[5]
     * }
     */
    public static long[] MouseReleased$dimensions() {
        return MouseReleased$DIMS;
    }
    private static final VarHandle MouseReleased$ELEM_HANDLE = MouseReleased$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * bool MouseReleased[5]
     * }
     */
    public static boolean MouseReleased(MemorySegment struct, long index0) {
        return (boolean)MouseReleased$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * bool MouseReleased[5]
     * }
     */
    public static void MouseReleased(MemorySegment struct, long index0, boolean fieldValue) {
        MouseReleased$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout MouseDownOwned$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseDownOwned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MouseDownOwned[5]
     * }
     */
    public static final SequenceLayout MouseDownOwned$layout() {
        return MouseDownOwned$LAYOUT;
    }

    private static final long MouseDownOwned$OFFSET = 2907;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MouseDownOwned[5]
     * }
     */
    public static final long MouseDownOwned$offset() {
        return MouseDownOwned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MouseDownOwned[5]
     * }
     */
    public static MemorySegment MouseDownOwned(MemorySegment struct) {
        return struct.asSlice(MouseDownOwned$OFFSET, MouseDownOwned$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MouseDownOwned[5]
     * }
     */
    public static void MouseDownOwned(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseDownOwned$OFFSET, MouseDownOwned$LAYOUT.byteSize());
    }

    private static long[] MouseDownOwned$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * bool MouseDownOwned[5]
     * }
     */
    public static long[] MouseDownOwned$dimensions() {
        return MouseDownOwned$DIMS;
    }
    private static final VarHandle MouseDownOwned$ELEM_HANDLE = MouseDownOwned$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * bool MouseDownOwned[5]
     * }
     */
    public static boolean MouseDownOwned(MemorySegment struct, long index0) {
        return (boolean)MouseDownOwned$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * bool MouseDownOwned[5]
     * }
     */
    public static void MouseDownOwned(MemorySegment struct, long index0, boolean fieldValue) {
        MouseDownOwned$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout MouseDownOwnedUnlessPopupClose$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseDownOwnedUnlessPopupClose"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MouseDownOwnedUnlessPopupClose[5]
     * }
     */
    public static final SequenceLayout MouseDownOwnedUnlessPopupClose$layout() {
        return MouseDownOwnedUnlessPopupClose$LAYOUT;
    }

    private static final long MouseDownOwnedUnlessPopupClose$OFFSET = 2912;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MouseDownOwnedUnlessPopupClose[5]
     * }
     */
    public static final long MouseDownOwnedUnlessPopupClose$offset() {
        return MouseDownOwnedUnlessPopupClose$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MouseDownOwnedUnlessPopupClose[5]
     * }
     */
    public static MemorySegment MouseDownOwnedUnlessPopupClose(MemorySegment struct) {
        return struct.asSlice(MouseDownOwnedUnlessPopupClose$OFFSET, MouseDownOwnedUnlessPopupClose$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MouseDownOwnedUnlessPopupClose[5]
     * }
     */
    public static void MouseDownOwnedUnlessPopupClose(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseDownOwnedUnlessPopupClose$OFFSET, MouseDownOwnedUnlessPopupClose$LAYOUT.byteSize());
    }

    private static long[] MouseDownOwnedUnlessPopupClose$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * bool MouseDownOwnedUnlessPopupClose[5]
     * }
     */
    public static long[] MouseDownOwnedUnlessPopupClose$dimensions() {
        return MouseDownOwnedUnlessPopupClose$DIMS;
    }
    private static final VarHandle MouseDownOwnedUnlessPopupClose$ELEM_HANDLE = MouseDownOwnedUnlessPopupClose$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * bool MouseDownOwnedUnlessPopupClose[5]
     * }
     */
    public static boolean MouseDownOwnedUnlessPopupClose(MemorySegment struct, long index0) {
        return (boolean)MouseDownOwnedUnlessPopupClose$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * bool MouseDownOwnedUnlessPopupClose[5]
     * }
     */
    public static void MouseDownOwnedUnlessPopupClose(MemorySegment struct, long index0, boolean fieldValue) {
        MouseDownOwnedUnlessPopupClose$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfBoolean MouseWheelRequestAxisSwap$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("MouseWheelRequestAxisSwap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MouseWheelRequestAxisSwap
     * }
     */
    public static final OfBoolean MouseWheelRequestAxisSwap$layout() {
        return MouseWheelRequestAxisSwap$LAYOUT;
    }

    private static final long MouseWheelRequestAxisSwap$OFFSET = 2917;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MouseWheelRequestAxisSwap
     * }
     */
    public static final long MouseWheelRequestAxisSwap$offset() {
        return MouseWheelRequestAxisSwap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MouseWheelRequestAxisSwap
     * }
     */
    public static boolean MouseWheelRequestAxisSwap(MemorySegment struct) {
        return struct.get(MouseWheelRequestAxisSwap$LAYOUT, MouseWheelRequestAxisSwap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MouseWheelRequestAxisSwap
     * }
     */
    public static void MouseWheelRequestAxisSwap(MemorySegment struct, boolean fieldValue) {
        struct.set(MouseWheelRequestAxisSwap$LAYOUT, MouseWheelRequestAxisSwap$OFFSET, fieldValue);
    }

    private static final OfBoolean MouseCtrlLeftAsRightClick$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("MouseCtrlLeftAsRightClick"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MouseCtrlLeftAsRightClick
     * }
     */
    public static final OfBoolean MouseCtrlLeftAsRightClick$layout() {
        return MouseCtrlLeftAsRightClick$LAYOUT;
    }

    private static final long MouseCtrlLeftAsRightClick$OFFSET = 2918;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MouseCtrlLeftAsRightClick
     * }
     */
    public static final long MouseCtrlLeftAsRightClick$offset() {
        return MouseCtrlLeftAsRightClick$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MouseCtrlLeftAsRightClick
     * }
     */
    public static boolean MouseCtrlLeftAsRightClick(MemorySegment struct) {
        return struct.get(MouseCtrlLeftAsRightClick$LAYOUT, MouseCtrlLeftAsRightClick$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MouseCtrlLeftAsRightClick
     * }
     */
    public static void MouseCtrlLeftAsRightClick(MemorySegment struct, boolean fieldValue) {
        struct.set(MouseCtrlLeftAsRightClick$LAYOUT, MouseCtrlLeftAsRightClick$OFFSET, fieldValue);
    }

    private static final SequenceLayout MouseDownDuration$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseDownDuration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseDownDuration[5]
     * }
     */
    public static final SequenceLayout MouseDownDuration$layout() {
        return MouseDownDuration$LAYOUT;
    }

    private static final long MouseDownDuration$OFFSET = 2920;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseDownDuration[5]
     * }
     */
    public static final long MouseDownDuration$offset() {
        return MouseDownDuration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseDownDuration[5]
     * }
     */
    public static MemorySegment MouseDownDuration(MemorySegment struct) {
        return struct.asSlice(MouseDownDuration$OFFSET, MouseDownDuration$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseDownDuration[5]
     * }
     */
    public static void MouseDownDuration(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseDownDuration$OFFSET, MouseDownDuration$LAYOUT.byteSize());
    }

    private static long[] MouseDownDuration$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float MouseDownDuration[5]
     * }
     */
    public static long[] MouseDownDuration$dimensions() {
        return MouseDownDuration$DIMS;
    }
    private static final VarHandle MouseDownDuration$ELEM_HANDLE = MouseDownDuration$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float MouseDownDuration[5]
     * }
     */
    public static float MouseDownDuration(MemorySegment struct, long index0) {
        return (float)MouseDownDuration$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float MouseDownDuration[5]
     * }
     */
    public static void MouseDownDuration(MemorySegment struct, long index0, float fieldValue) {
        MouseDownDuration$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout MouseDownDurationPrev$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseDownDurationPrev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseDownDurationPrev[5]
     * }
     */
    public static final SequenceLayout MouseDownDurationPrev$layout() {
        return MouseDownDurationPrev$LAYOUT;
    }

    private static final long MouseDownDurationPrev$OFFSET = 2940;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseDownDurationPrev[5]
     * }
     */
    public static final long MouseDownDurationPrev$offset() {
        return MouseDownDurationPrev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseDownDurationPrev[5]
     * }
     */
    public static MemorySegment MouseDownDurationPrev(MemorySegment struct) {
        return struct.asSlice(MouseDownDurationPrev$OFFSET, MouseDownDurationPrev$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseDownDurationPrev[5]
     * }
     */
    public static void MouseDownDurationPrev(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseDownDurationPrev$OFFSET, MouseDownDurationPrev$LAYOUT.byteSize());
    }

    private static long[] MouseDownDurationPrev$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float MouseDownDurationPrev[5]
     * }
     */
    public static long[] MouseDownDurationPrev$dimensions() {
        return MouseDownDurationPrev$DIMS;
    }
    private static final VarHandle MouseDownDurationPrev$ELEM_HANDLE = MouseDownDurationPrev$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float MouseDownDurationPrev[5]
     * }
     */
    public static float MouseDownDurationPrev(MemorySegment struct, long index0) {
        return (float)MouseDownDurationPrev$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float MouseDownDurationPrev[5]
     * }
     */
    public static void MouseDownDurationPrev(MemorySegment struct, long index0, float fieldValue) {
        MouseDownDurationPrev$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout MouseDragMaxDistanceAbs$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseDragMaxDistanceAbs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 MouseDragMaxDistanceAbs[5]
     * }
     */
    public static final SequenceLayout MouseDragMaxDistanceAbs$layout() {
        return MouseDragMaxDistanceAbs$LAYOUT;
    }

    private static final long MouseDragMaxDistanceAbs$OFFSET = 2960;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 MouseDragMaxDistanceAbs[5]
     * }
     */
    public static final long MouseDragMaxDistanceAbs$offset() {
        return MouseDragMaxDistanceAbs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 MouseDragMaxDistanceAbs[5]
     * }
     */
    public static MemorySegment MouseDragMaxDistanceAbs(MemorySegment struct) {
        return struct.asSlice(MouseDragMaxDistanceAbs$OFFSET, MouseDragMaxDistanceAbs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 MouseDragMaxDistanceAbs[5]
     * }
     */
    public static void MouseDragMaxDistanceAbs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseDragMaxDistanceAbs$OFFSET, MouseDragMaxDistanceAbs$LAYOUT.byteSize());
    }

    private static long[] MouseDragMaxDistanceAbs$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImVec2 MouseDragMaxDistanceAbs[5]
     * }
     */
    public static long[] MouseDragMaxDistanceAbs$dimensions() {
        return MouseDragMaxDistanceAbs$DIMS;
    }
    private static final MethodHandle MouseDragMaxDistanceAbs$ELEM_HANDLE = MouseDragMaxDistanceAbs$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImVec2 MouseDragMaxDistanceAbs[5]
     * }
     */
    public static MemorySegment MouseDragMaxDistanceAbs(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)MouseDragMaxDistanceAbs$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImVec2 MouseDragMaxDistanceAbs[5]
     * }
     */
    public static void MouseDragMaxDistanceAbs(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, MouseDragMaxDistanceAbs(struct, index0), 0L, ImVec2.layout().byteSize());
    }

    private static final SequenceLayout MouseDragMaxDistanceSqr$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("MouseDragMaxDistanceSqr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseDragMaxDistanceSqr[5]
     * }
     */
    public static final SequenceLayout MouseDragMaxDistanceSqr$layout() {
        return MouseDragMaxDistanceSqr$LAYOUT;
    }

    private static final long MouseDragMaxDistanceSqr$OFFSET = 3000;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseDragMaxDistanceSqr[5]
     * }
     */
    public static final long MouseDragMaxDistanceSqr$offset() {
        return MouseDragMaxDistanceSqr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseDragMaxDistanceSqr[5]
     * }
     */
    public static MemorySegment MouseDragMaxDistanceSqr(MemorySegment struct) {
        return struct.asSlice(MouseDragMaxDistanceSqr$OFFSET, MouseDragMaxDistanceSqr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseDragMaxDistanceSqr[5]
     * }
     */
    public static void MouseDragMaxDistanceSqr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseDragMaxDistanceSqr$OFFSET, MouseDragMaxDistanceSqr$LAYOUT.byteSize());
    }

    private static long[] MouseDragMaxDistanceSqr$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float MouseDragMaxDistanceSqr[5]
     * }
     */
    public static long[] MouseDragMaxDistanceSqr$dimensions() {
        return MouseDragMaxDistanceSqr$DIMS;
    }
    private static final VarHandle MouseDragMaxDistanceSqr$ELEM_HANDLE = MouseDragMaxDistanceSqr$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float MouseDragMaxDistanceSqr[5]
     * }
     */
    public static float MouseDragMaxDistanceSqr(MemorySegment struct, long index0) {
        return (float)MouseDragMaxDistanceSqr$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float MouseDragMaxDistanceSqr[5]
     * }
     */
    public static void MouseDragMaxDistanceSqr(MemorySegment struct, long index0, float fieldValue) {
        MouseDragMaxDistanceSqr$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfFloat PenPressure$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("PenPressure"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float PenPressure
     * }
     */
    public static final OfFloat PenPressure$layout() {
        return PenPressure$LAYOUT;
    }

    private static final long PenPressure$OFFSET = 3020;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float PenPressure
     * }
     */
    public static final long PenPressure$offset() {
        return PenPressure$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float PenPressure
     * }
     */
    public static float PenPressure(MemorySegment struct) {
        return struct.get(PenPressure$LAYOUT, PenPressure$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float PenPressure
     * }
     */
    public static void PenPressure(MemorySegment struct, float fieldValue) {
        struct.set(PenPressure$LAYOUT, PenPressure$OFFSET, fieldValue);
    }

    private static final OfBoolean AppFocusLost$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("AppFocusLost"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool AppFocusLost
     * }
     */
    public static final OfBoolean AppFocusLost$layout() {
        return AppFocusLost$LAYOUT;
    }

    private static final long AppFocusLost$OFFSET = 3024;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool AppFocusLost
     * }
     */
    public static final long AppFocusLost$offset() {
        return AppFocusLost$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool AppFocusLost
     * }
     */
    public static boolean AppFocusLost(MemorySegment struct) {
        return struct.get(AppFocusLost$LAYOUT, AppFocusLost$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool AppFocusLost
     * }
     */
    public static void AppFocusLost(MemorySegment struct, boolean fieldValue) {
        struct.set(AppFocusLost$LAYOUT, AppFocusLost$OFFSET, fieldValue);
    }

    private static final OfBoolean AppAcceptingEvents$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("AppAcceptingEvents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool AppAcceptingEvents
     * }
     */
    public static final OfBoolean AppAcceptingEvents$layout() {
        return AppAcceptingEvents$LAYOUT;
    }

    private static final long AppAcceptingEvents$OFFSET = 3025;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool AppAcceptingEvents
     * }
     */
    public static final long AppAcceptingEvents$offset() {
        return AppAcceptingEvents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool AppAcceptingEvents
     * }
     */
    public static boolean AppAcceptingEvents(MemorySegment struct) {
        return struct.get(AppAcceptingEvents$LAYOUT, AppAcceptingEvents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool AppAcceptingEvents
     * }
     */
    public static void AppAcceptingEvents(MemorySegment struct, boolean fieldValue) {
        struct.set(AppAcceptingEvents$LAYOUT, AppAcceptingEvents$OFFSET, fieldValue);
    }

    private static final OfByte BackendUsingLegacyKeyArrays$LAYOUT = (OfByte)$LAYOUT.select(groupElement("BackendUsingLegacyKeyArrays"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 BackendUsingLegacyKeyArrays
     * }
     */
    public static final OfByte BackendUsingLegacyKeyArrays$layout() {
        return BackendUsingLegacyKeyArrays$LAYOUT;
    }

    private static final long BackendUsingLegacyKeyArrays$OFFSET = 3026;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 BackendUsingLegacyKeyArrays
     * }
     */
    public static final long BackendUsingLegacyKeyArrays$offset() {
        return BackendUsingLegacyKeyArrays$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 BackendUsingLegacyKeyArrays
     * }
     */
    public static byte BackendUsingLegacyKeyArrays(MemorySegment struct) {
        return struct.get(BackendUsingLegacyKeyArrays$LAYOUT, BackendUsingLegacyKeyArrays$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 BackendUsingLegacyKeyArrays
     * }
     */
    public static void BackendUsingLegacyKeyArrays(MemorySegment struct, byte fieldValue) {
        struct.set(BackendUsingLegacyKeyArrays$LAYOUT, BackendUsingLegacyKeyArrays$OFFSET, fieldValue);
    }

    private static final OfBoolean BackendUsingLegacyNavInputArray$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("BackendUsingLegacyNavInputArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool BackendUsingLegacyNavInputArray
     * }
     */
    public static final OfBoolean BackendUsingLegacyNavInputArray$layout() {
        return BackendUsingLegacyNavInputArray$LAYOUT;
    }

    private static final long BackendUsingLegacyNavInputArray$OFFSET = 3027;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool BackendUsingLegacyNavInputArray
     * }
     */
    public static final long BackendUsingLegacyNavInputArray$offset() {
        return BackendUsingLegacyNavInputArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool BackendUsingLegacyNavInputArray
     * }
     */
    public static boolean BackendUsingLegacyNavInputArray(MemorySegment struct) {
        return struct.get(BackendUsingLegacyNavInputArray$LAYOUT, BackendUsingLegacyNavInputArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool BackendUsingLegacyNavInputArray
     * }
     */
    public static void BackendUsingLegacyNavInputArray(MemorySegment struct, boolean fieldValue) {
        struct.set(BackendUsingLegacyNavInputArray$LAYOUT, BackendUsingLegacyNavInputArray$OFFSET, fieldValue);
    }

    private static final OfShort InputQueueSurrogate$LAYOUT = (OfShort)$LAYOUT.select(groupElement("InputQueueSurrogate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImWchar16 InputQueueSurrogate
     * }
     */
    public static final OfShort InputQueueSurrogate$layout() {
        return InputQueueSurrogate$LAYOUT;
    }

    private static final long InputQueueSurrogate$OFFSET = 3028;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImWchar16 InputQueueSurrogate
     * }
     */
    public static final long InputQueueSurrogate$offset() {
        return InputQueueSurrogate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImWchar16 InputQueueSurrogate
     * }
     */
    public static short InputQueueSurrogate(MemorySegment struct) {
        return struct.get(InputQueueSurrogate$LAYOUT, InputQueueSurrogate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImWchar16 InputQueueSurrogate
     * }
     */
    public static void InputQueueSurrogate(MemorySegment struct, short fieldValue) {
        struct.set(InputQueueSurrogate$LAYOUT, InputQueueSurrogate$OFFSET, fieldValue);
    }

    private static final GroupLayout InputQueueCharacters$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InputQueueCharacters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImWchar InputQueueCharacters
     * }
     */
    public static final GroupLayout InputQueueCharacters$layout() {
        return InputQueueCharacters$LAYOUT;
    }

    private static final long InputQueueCharacters$OFFSET = 3032;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImWchar InputQueueCharacters
     * }
     */
    public static final long InputQueueCharacters$offset() {
        return InputQueueCharacters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImWchar InputQueueCharacters
     * }
     */
    public static MemorySegment InputQueueCharacters(MemorySegment struct) {
        return struct.asSlice(InputQueueCharacters$OFFSET, InputQueueCharacters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImWchar InputQueueCharacters
     * }
     */
    public static void InputQueueCharacters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InputQueueCharacters$OFFSET, InputQueueCharacters$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

