// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiGroupData {
 *     ImGuiID WindowID;
 *     ImVec2 BackupCursorPos;
 *     ImVec2 BackupCursorMaxPos;
 *     ImVec2 BackupCursorPosPrevLine;
 *     ImVec1 BackupIndent;
 *     ImVec1 BackupGroupOffset;
 *     ImVec2 BackupCurrLineSize;
 *     float BackupCurrLineTextBaseOffset;
 *     ImGuiID BackupActiveIdIsAlive;
 *     bool BackupActiveIdPreviousFrameIsAlive;
 *     bool BackupHoveredIdIsAlive;
 *     bool BackupIsSameLine;
 *     bool EmitItem;
 * }
 * }
 */
public class ImGuiGroupData {

    ImGuiGroupData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("WindowID"),
        ImVec2.layout().withName("BackupCursorPos"),
        ImVec2.layout().withName("BackupCursorMaxPos"),
        ImVec2.layout().withName("BackupCursorPosPrevLine"),
        ImVec1.layout().withName("BackupIndent"),
        ImVec1.layout().withName("BackupGroupOffset"),
        ImVec2.layout().withName("BackupCurrLineSize"),
        imgui.C_FLOAT.withName("BackupCurrLineTextBaseOffset"),
        imgui.C_INT.withName("BackupActiveIdIsAlive"),
        imgui.C_BOOL.withName("BackupActiveIdPreviousFrameIsAlive"),
        imgui.C_BOOL.withName("BackupHoveredIdIsAlive"),
        imgui.C_BOOL.withName("BackupIsSameLine"),
        imgui.C_BOOL.withName("EmitItem")
    ).withName("ImGuiGroupData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt WindowID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WindowID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID WindowID
     * }
     */
    public static final OfInt WindowID$layout() {
        return WindowID$LAYOUT;
    }

    private static final long WindowID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID WindowID
     * }
     */
    public static final long WindowID$offset() {
        return WindowID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID WindowID
     * }
     */
    public static int WindowID(MemorySegment struct) {
        return struct.get(WindowID$LAYOUT, WindowID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID WindowID
     * }
     */
    public static void WindowID(MemorySegment struct, int fieldValue) {
        struct.set(WindowID$LAYOUT, WindowID$OFFSET, fieldValue);
    }

    private static final GroupLayout BackupCursorPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BackupCursorPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPos
     * }
     */
    public static final GroupLayout BackupCursorPos$layout() {
        return BackupCursorPos$LAYOUT;
    }

    private static final long BackupCursorPos$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPos
     * }
     */
    public static final long BackupCursorPos$offset() {
        return BackupCursorPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPos
     * }
     */
    public static MemorySegment BackupCursorPos(MemorySegment struct) {
        return struct.asSlice(BackupCursorPos$OFFSET, BackupCursorPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPos
     * }
     */
    public static void BackupCursorPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupCursorPos$OFFSET, BackupCursorPos$LAYOUT.byteSize());
    }

    private static final GroupLayout BackupCursorMaxPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BackupCursorMaxPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorMaxPos
     * }
     */
    public static final GroupLayout BackupCursorMaxPos$layout() {
        return BackupCursorMaxPos$LAYOUT;
    }

    private static final long BackupCursorMaxPos$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorMaxPos
     * }
     */
    public static final long BackupCursorMaxPos$offset() {
        return BackupCursorMaxPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorMaxPos
     * }
     */
    public static MemorySegment BackupCursorMaxPos(MemorySegment struct) {
        return struct.asSlice(BackupCursorMaxPos$OFFSET, BackupCursorMaxPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorMaxPos
     * }
     */
    public static void BackupCursorMaxPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupCursorMaxPos$OFFSET, BackupCursorMaxPos$LAYOUT.byteSize());
    }

    private static final GroupLayout BackupCursorPosPrevLine$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BackupCursorPosPrevLine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPosPrevLine
     * }
     */
    public static final GroupLayout BackupCursorPosPrevLine$layout() {
        return BackupCursorPosPrevLine$LAYOUT;
    }

    private static final long BackupCursorPosPrevLine$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPosPrevLine
     * }
     */
    public static final long BackupCursorPosPrevLine$offset() {
        return BackupCursorPosPrevLine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPosPrevLine
     * }
     */
    public static MemorySegment BackupCursorPosPrevLine(MemorySegment struct) {
        return struct.asSlice(BackupCursorPosPrevLine$OFFSET, BackupCursorPosPrevLine$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPosPrevLine
     * }
     */
    public static void BackupCursorPosPrevLine(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupCursorPosPrevLine$OFFSET, BackupCursorPosPrevLine$LAYOUT.byteSize());
    }

    private static final GroupLayout BackupIndent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BackupIndent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec1 BackupIndent
     * }
     */
    public static final GroupLayout BackupIndent$layout() {
        return BackupIndent$LAYOUT;
    }

    private static final long BackupIndent$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec1 BackupIndent
     * }
     */
    public static final long BackupIndent$offset() {
        return BackupIndent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec1 BackupIndent
     * }
     */
    public static MemorySegment BackupIndent(MemorySegment struct) {
        return struct.asSlice(BackupIndent$OFFSET, BackupIndent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec1 BackupIndent
     * }
     */
    public static void BackupIndent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupIndent$OFFSET, BackupIndent$LAYOUT.byteSize());
    }

    private static final GroupLayout BackupGroupOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BackupGroupOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec1 BackupGroupOffset
     * }
     */
    public static final GroupLayout BackupGroupOffset$layout() {
        return BackupGroupOffset$LAYOUT;
    }

    private static final long BackupGroupOffset$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec1 BackupGroupOffset
     * }
     */
    public static final long BackupGroupOffset$offset() {
        return BackupGroupOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec1 BackupGroupOffset
     * }
     */
    public static MemorySegment BackupGroupOffset(MemorySegment struct) {
        return struct.asSlice(BackupGroupOffset$OFFSET, BackupGroupOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec1 BackupGroupOffset
     * }
     */
    public static void BackupGroupOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupGroupOffset$OFFSET, BackupGroupOffset$LAYOUT.byteSize());
    }

    private static final GroupLayout BackupCurrLineSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BackupCurrLineSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 BackupCurrLineSize
     * }
     */
    public static final GroupLayout BackupCurrLineSize$layout() {
        return BackupCurrLineSize$LAYOUT;
    }

    private static final long BackupCurrLineSize$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 BackupCurrLineSize
     * }
     */
    public static final long BackupCurrLineSize$offset() {
        return BackupCurrLineSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCurrLineSize
     * }
     */
    public static MemorySegment BackupCurrLineSize(MemorySegment struct) {
        return struct.asSlice(BackupCurrLineSize$OFFSET, BackupCurrLineSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCurrLineSize
     * }
     */
    public static void BackupCurrLineSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupCurrLineSize$OFFSET, BackupCurrLineSize$LAYOUT.byteSize());
    }

    private static final OfFloat BackupCurrLineTextBaseOffset$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("BackupCurrLineTextBaseOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float BackupCurrLineTextBaseOffset
     * }
     */
    public static final OfFloat BackupCurrLineTextBaseOffset$layout() {
        return BackupCurrLineTextBaseOffset$LAYOUT;
    }

    private static final long BackupCurrLineTextBaseOffset$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float BackupCurrLineTextBaseOffset
     * }
     */
    public static final long BackupCurrLineTextBaseOffset$offset() {
        return BackupCurrLineTextBaseOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float BackupCurrLineTextBaseOffset
     * }
     */
    public static float BackupCurrLineTextBaseOffset(MemorySegment struct) {
        return struct.get(BackupCurrLineTextBaseOffset$LAYOUT, BackupCurrLineTextBaseOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float BackupCurrLineTextBaseOffset
     * }
     */
    public static void BackupCurrLineTextBaseOffset(MemorySegment struct, float fieldValue) {
        struct.set(BackupCurrLineTextBaseOffset$LAYOUT, BackupCurrLineTextBaseOffset$OFFSET, fieldValue);
    }

    private static final OfInt BackupActiveIdIsAlive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BackupActiveIdIsAlive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID BackupActiveIdIsAlive
     * }
     */
    public static final OfInt BackupActiveIdIsAlive$layout() {
        return BackupActiveIdIsAlive$LAYOUT;
    }

    private static final long BackupActiveIdIsAlive$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID BackupActiveIdIsAlive
     * }
     */
    public static final long BackupActiveIdIsAlive$offset() {
        return BackupActiveIdIsAlive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID BackupActiveIdIsAlive
     * }
     */
    public static int BackupActiveIdIsAlive(MemorySegment struct) {
        return struct.get(BackupActiveIdIsAlive$LAYOUT, BackupActiveIdIsAlive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID BackupActiveIdIsAlive
     * }
     */
    public static void BackupActiveIdIsAlive(MemorySegment struct, int fieldValue) {
        struct.set(BackupActiveIdIsAlive$LAYOUT, BackupActiveIdIsAlive$OFFSET, fieldValue);
    }

    private static final OfBoolean BackupActiveIdPreviousFrameIsAlive$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("BackupActiveIdPreviousFrameIsAlive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool BackupActiveIdPreviousFrameIsAlive
     * }
     */
    public static final OfBoolean BackupActiveIdPreviousFrameIsAlive$layout() {
        return BackupActiveIdPreviousFrameIsAlive$LAYOUT;
    }

    private static final long BackupActiveIdPreviousFrameIsAlive$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool BackupActiveIdPreviousFrameIsAlive
     * }
     */
    public static final long BackupActiveIdPreviousFrameIsAlive$offset() {
        return BackupActiveIdPreviousFrameIsAlive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool BackupActiveIdPreviousFrameIsAlive
     * }
     */
    public static boolean BackupActiveIdPreviousFrameIsAlive(MemorySegment struct) {
        return struct.get(BackupActiveIdPreviousFrameIsAlive$LAYOUT, BackupActiveIdPreviousFrameIsAlive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool BackupActiveIdPreviousFrameIsAlive
     * }
     */
    public static void BackupActiveIdPreviousFrameIsAlive(MemorySegment struct, boolean fieldValue) {
        struct.set(BackupActiveIdPreviousFrameIsAlive$LAYOUT, BackupActiveIdPreviousFrameIsAlive$OFFSET, fieldValue);
    }

    private static final OfBoolean BackupHoveredIdIsAlive$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("BackupHoveredIdIsAlive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool BackupHoveredIdIsAlive
     * }
     */
    public static final OfBoolean BackupHoveredIdIsAlive$layout() {
        return BackupHoveredIdIsAlive$LAYOUT;
    }

    private static final long BackupHoveredIdIsAlive$OFFSET = 53;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool BackupHoveredIdIsAlive
     * }
     */
    public static final long BackupHoveredIdIsAlive$offset() {
        return BackupHoveredIdIsAlive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool BackupHoveredIdIsAlive
     * }
     */
    public static boolean BackupHoveredIdIsAlive(MemorySegment struct) {
        return struct.get(BackupHoveredIdIsAlive$LAYOUT, BackupHoveredIdIsAlive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool BackupHoveredIdIsAlive
     * }
     */
    public static void BackupHoveredIdIsAlive(MemorySegment struct, boolean fieldValue) {
        struct.set(BackupHoveredIdIsAlive$LAYOUT, BackupHoveredIdIsAlive$OFFSET, fieldValue);
    }

    private static final OfBoolean BackupIsSameLine$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("BackupIsSameLine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool BackupIsSameLine
     * }
     */
    public static final OfBoolean BackupIsSameLine$layout() {
        return BackupIsSameLine$LAYOUT;
    }

    private static final long BackupIsSameLine$OFFSET = 54;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool BackupIsSameLine
     * }
     */
    public static final long BackupIsSameLine$offset() {
        return BackupIsSameLine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool BackupIsSameLine
     * }
     */
    public static boolean BackupIsSameLine(MemorySegment struct) {
        return struct.get(BackupIsSameLine$LAYOUT, BackupIsSameLine$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool BackupIsSameLine
     * }
     */
    public static void BackupIsSameLine(MemorySegment struct, boolean fieldValue) {
        struct.set(BackupIsSameLine$LAYOUT, BackupIsSameLine$OFFSET, fieldValue);
    }

    private static final OfBoolean EmitItem$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("EmitItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool EmitItem
     * }
     */
    public static final OfBoolean EmitItem$layout() {
        return EmitItem$LAYOUT;
    }

    private static final long EmitItem$OFFSET = 55;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool EmitItem
     * }
     */
    public static final long EmitItem$offset() {
        return EmitItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool EmitItem
     * }
     */
    public static boolean EmitItem(MemorySegment struct) {
        return struct.get(EmitItem$LAYOUT, EmitItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool EmitItem
     * }
     */
    public static void EmitItem(MemorySegment struct, boolean fieldValue) {
        struct.set(EmitItem$LAYOUT, EmitItem$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

