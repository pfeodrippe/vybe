// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiTabBar {
 *     ImVector_ImGuiTabItem Tabs;
 *     ImGuiTabBarFlags Flags;
 *     ImGuiID ID;
 *     ImGuiID SelectedTabId;
 *     ImGuiID NextSelectedTabId;
 *     ImGuiID VisibleTabId;
 *     int CurrFrameVisible;
 *     int PrevFrameVisible;
 *     ImRect BarRect;
 *     float CurrTabsContentsHeight;
 *     float PrevTabsContentsHeight;
 *     float WidthAllTabs;
 *     float WidthAllTabsIdeal;
 *     float ScrollingAnim;
 *     float ScrollingTarget;
 *     float ScrollingTargetDistToVisibility;
 *     float ScrollingSpeed;
 *     float ScrollingRectMinX;
 *     float ScrollingRectMaxX;
 *     float SeparatorMinX;
 *     float SeparatorMaxX;
 *     ImGuiID ReorderRequestTabId;
 *     ImS16 ReorderRequestOffset;
 *     ImS8 BeginCount;
 *     bool WantLayout;
 *     bool VisibleTabWasSubmitted;
 *     bool TabsAddedNew;
 *     ImS16 TabsActiveCount;
 *     ImS16 LastTabItemIdx;
 *     float ItemSpacingY;
 *     ImVec2 FramePadding;
 *     ImVec2 BackupCursorPos;
 *     ImGuiTextBuffer TabsNames;
 * }
 * }
 */
public class ImGuiTabBar {

    ImGuiTabBar() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImVector_ImGuiTabItem.layout().withName("Tabs"),
        imgui.C_INT.withName("Flags"),
        imgui.C_INT.withName("ID"),
        imgui.C_INT.withName("SelectedTabId"),
        imgui.C_INT.withName("NextSelectedTabId"),
        imgui.C_INT.withName("VisibleTabId"),
        imgui.C_INT.withName("CurrFrameVisible"),
        imgui.C_INT.withName("PrevFrameVisible"),
        ImRect.layout().withName("BarRect"),
        imgui.C_FLOAT.withName("CurrTabsContentsHeight"),
        imgui.C_FLOAT.withName("PrevTabsContentsHeight"),
        imgui.C_FLOAT.withName("WidthAllTabs"),
        imgui.C_FLOAT.withName("WidthAllTabsIdeal"),
        imgui.C_FLOAT.withName("ScrollingAnim"),
        imgui.C_FLOAT.withName("ScrollingTarget"),
        imgui.C_FLOAT.withName("ScrollingTargetDistToVisibility"),
        imgui.C_FLOAT.withName("ScrollingSpeed"),
        imgui.C_FLOAT.withName("ScrollingRectMinX"),
        imgui.C_FLOAT.withName("ScrollingRectMaxX"),
        imgui.C_FLOAT.withName("SeparatorMinX"),
        imgui.C_FLOAT.withName("SeparatorMaxX"),
        imgui.C_INT.withName("ReorderRequestTabId"),
        imgui.C_SHORT.withName("ReorderRequestOffset"),
        imgui.C_CHAR.withName("BeginCount"),
        imgui.C_BOOL.withName("WantLayout"),
        imgui.C_BOOL.withName("VisibleTabWasSubmitted"),
        imgui.C_BOOL.withName("TabsAddedNew"),
        imgui.C_SHORT.withName("TabsActiveCount"),
        imgui.C_SHORT.withName("LastTabItemIdx"),
        MemoryLayout.paddingLayout(2),
        imgui.C_FLOAT.withName("ItemSpacingY"),
        ImVec2.layout().withName("FramePadding"),
        ImVec2.layout().withName("BackupCursorPos"),
        ImGuiTextBuffer.layout().withName("TabsNames")
    ).withName("ImGuiTabBar");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout Tabs$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Tabs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTabItem Tabs
     * }
     */
    public static final GroupLayout Tabs$layout() {
        return Tabs$LAYOUT;
    }

    private static final long Tabs$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTabItem Tabs
     * }
     */
    public static final long Tabs$offset() {
        return Tabs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTabItem Tabs
     * }
     */
    public static MemorySegment Tabs(MemorySegment struct) {
        return struct.asSlice(Tabs$OFFSET, Tabs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTabItem Tabs
     * }
     */
    public static void Tabs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Tabs$OFFSET, Tabs$LAYOUT.byteSize());
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTabBarFlags Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTabBarFlags Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTabBarFlags Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTabBarFlags Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfInt ID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final OfInt ID$layout() {
        return ID$LAYOUT;
    }

    private static final long ID$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final long ID$offset() {
        return ID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static int ID(MemorySegment struct) {
        return struct.get(ID$LAYOUT, ID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static void ID(MemorySegment struct, int fieldValue) {
        struct.set(ID$LAYOUT, ID$OFFSET, fieldValue);
    }

    private static final OfInt SelectedTabId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SelectedTabId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID SelectedTabId
     * }
     */
    public static final OfInt SelectedTabId$layout() {
        return SelectedTabId$LAYOUT;
    }

    private static final long SelectedTabId$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID SelectedTabId
     * }
     */
    public static final long SelectedTabId$offset() {
        return SelectedTabId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID SelectedTabId
     * }
     */
    public static int SelectedTabId(MemorySegment struct) {
        return struct.get(SelectedTabId$LAYOUT, SelectedTabId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID SelectedTabId
     * }
     */
    public static void SelectedTabId(MemorySegment struct, int fieldValue) {
        struct.set(SelectedTabId$LAYOUT, SelectedTabId$OFFSET, fieldValue);
    }

    private static final OfInt NextSelectedTabId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NextSelectedTabId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NextSelectedTabId
     * }
     */
    public static final OfInt NextSelectedTabId$layout() {
        return NextSelectedTabId$LAYOUT;
    }

    private static final long NextSelectedTabId$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NextSelectedTabId
     * }
     */
    public static final long NextSelectedTabId$offset() {
        return NextSelectedTabId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NextSelectedTabId
     * }
     */
    public static int NextSelectedTabId(MemorySegment struct) {
        return struct.get(NextSelectedTabId$LAYOUT, NextSelectedTabId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NextSelectedTabId
     * }
     */
    public static void NextSelectedTabId(MemorySegment struct, int fieldValue) {
        struct.set(NextSelectedTabId$LAYOUT, NextSelectedTabId$OFFSET, fieldValue);
    }

    private static final OfInt VisibleTabId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("VisibleTabId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID VisibleTabId
     * }
     */
    public static final OfInt VisibleTabId$layout() {
        return VisibleTabId$LAYOUT;
    }

    private static final long VisibleTabId$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID VisibleTabId
     * }
     */
    public static final long VisibleTabId$offset() {
        return VisibleTabId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID VisibleTabId
     * }
     */
    public static int VisibleTabId(MemorySegment struct) {
        return struct.get(VisibleTabId$LAYOUT, VisibleTabId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID VisibleTabId
     * }
     */
    public static void VisibleTabId(MemorySegment struct, int fieldValue) {
        struct.set(VisibleTabId$LAYOUT, VisibleTabId$OFFSET, fieldValue);
    }

    private static final OfInt CurrFrameVisible$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CurrFrameVisible"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int CurrFrameVisible
     * }
     */
    public static final OfInt CurrFrameVisible$layout() {
        return CurrFrameVisible$LAYOUT;
    }

    private static final long CurrFrameVisible$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int CurrFrameVisible
     * }
     */
    public static final long CurrFrameVisible$offset() {
        return CurrFrameVisible$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int CurrFrameVisible
     * }
     */
    public static int CurrFrameVisible(MemorySegment struct) {
        return struct.get(CurrFrameVisible$LAYOUT, CurrFrameVisible$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int CurrFrameVisible
     * }
     */
    public static void CurrFrameVisible(MemorySegment struct, int fieldValue) {
        struct.set(CurrFrameVisible$LAYOUT, CurrFrameVisible$OFFSET, fieldValue);
    }

    private static final OfInt PrevFrameVisible$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PrevFrameVisible"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int PrevFrameVisible
     * }
     */
    public static final OfInt PrevFrameVisible$layout() {
        return PrevFrameVisible$LAYOUT;
    }

    private static final long PrevFrameVisible$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int PrevFrameVisible
     * }
     */
    public static final long PrevFrameVisible$offset() {
        return PrevFrameVisible$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int PrevFrameVisible
     * }
     */
    public static int PrevFrameVisible(MemorySegment struct) {
        return struct.get(PrevFrameVisible$LAYOUT, PrevFrameVisible$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int PrevFrameVisible
     * }
     */
    public static void PrevFrameVisible(MemorySegment struct, int fieldValue) {
        struct.set(PrevFrameVisible$LAYOUT, PrevFrameVisible$OFFSET, fieldValue);
    }

    private static final GroupLayout BarRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BarRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect BarRect
     * }
     */
    public static final GroupLayout BarRect$layout() {
        return BarRect$LAYOUT;
    }

    private static final long BarRect$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect BarRect
     * }
     */
    public static final long BarRect$offset() {
        return BarRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect BarRect
     * }
     */
    public static MemorySegment BarRect(MemorySegment struct) {
        return struct.asSlice(BarRect$OFFSET, BarRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect BarRect
     * }
     */
    public static void BarRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BarRect$OFFSET, BarRect$LAYOUT.byteSize());
    }

    private static final OfFloat CurrTabsContentsHeight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("CurrTabsContentsHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float CurrTabsContentsHeight
     * }
     */
    public static final OfFloat CurrTabsContentsHeight$layout() {
        return CurrTabsContentsHeight$LAYOUT;
    }

    private static final long CurrTabsContentsHeight$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float CurrTabsContentsHeight
     * }
     */
    public static final long CurrTabsContentsHeight$offset() {
        return CurrTabsContentsHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float CurrTabsContentsHeight
     * }
     */
    public static float CurrTabsContentsHeight(MemorySegment struct) {
        return struct.get(CurrTabsContentsHeight$LAYOUT, CurrTabsContentsHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float CurrTabsContentsHeight
     * }
     */
    public static void CurrTabsContentsHeight(MemorySegment struct, float fieldValue) {
        struct.set(CurrTabsContentsHeight$LAYOUT, CurrTabsContentsHeight$OFFSET, fieldValue);
    }

    private static final OfFloat PrevTabsContentsHeight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("PrevTabsContentsHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float PrevTabsContentsHeight
     * }
     */
    public static final OfFloat PrevTabsContentsHeight$layout() {
        return PrevTabsContentsHeight$LAYOUT;
    }

    private static final long PrevTabsContentsHeight$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float PrevTabsContentsHeight
     * }
     */
    public static final long PrevTabsContentsHeight$offset() {
        return PrevTabsContentsHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float PrevTabsContentsHeight
     * }
     */
    public static float PrevTabsContentsHeight(MemorySegment struct) {
        return struct.get(PrevTabsContentsHeight$LAYOUT, PrevTabsContentsHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float PrevTabsContentsHeight
     * }
     */
    public static void PrevTabsContentsHeight(MemorySegment struct, float fieldValue) {
        struct.set(PrevTabsContentsHeight$LAYOUT, PrevTabsContentsHeight$OFFSET, fieldValue);
    }

    private static final OfFloat WidthAllTabs$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WidthAllTabs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WidthAllTabs
     * }
     */
    public static final OfFloat WidthAllTabs$layout() {
        return WidthAllTabs$LAYOUT;
    }

    private static final long WidthAllTabs$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WidthAllTabs
     * }
     */
    public static final long WidthAllTabs$offset() {
        return WidthAllTabs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WidthAllTabs
     * }
     */
    public static float WidthAllTabs(MemorySegment struct) {
        return struct.get(WidthAllTabs$LAYOUT, WidthAllTabs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WidthAllTabs
     * }
     */
    public static void WidthAllTabs(MemorySegment struct, float fieldValue) {
        struct.set(WidthAllTabs$LAYOUT, WidthAllTabs$OFFSET, fieldValue);
    }

    private static final OfFloat WidthAllTabsIdeal$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WidthAllTabsIdeal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WidthAllTabsIdeal
     * }
     */
    public static final OfFloat WidthAllTabsIdeal$layout() {
        return WidthAllTabsIdeal$LAYOUT;
    }

    private static final long WidthAllTabsIdeal$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WidthAllTabsIdeal
     * }
     */
    public static final long WidthAllTabsIdeal$offset() {
        return WidthAllTabsIdeal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WidthAllTabsIdeal
     * }
     */
    public static float WidthAllTabsIdeal(MemorySegment struct) {
        return struct.get(WidthAllTabsIdeal$LAYOUT, WidthAllTabsIdeal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WidthAllTabsIdeal
     * }
     */
    public static void WidthAllTabsIdeal(MemorySegment struct, float fieldValue) {
        struct.set(WidthAllTabsIdeal$LAYOUT, WidthAllTabsIdeal$OFFSET, fieldValue);
    }

    private static final OfFloat ScrollingAnim$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ScrollingAnim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ScrollingAnim
     * }
     */
    public static final OfFloat ScrollingAnim$layout() {
        return ScrollingAnim$LAYOUT;
    }

    private static final long ScrollingAnim$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ScrollingAnim
     * }
     */
    public static final long ScrollingAnim$offset() {
        return ScrollingAnim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ScrollingAnim
     * }
     */
    public static float ScrollingAnim(MemorySegment struct) {
        return struct.get(ScrollingAnim$LAYOUT, ScrollingAnim$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ScrollingAnim
     * }
     */
    public static void ScrollingAnim(MemorySegment struct, float fieldValue) {
        struct.set(ScrollingAnim$LAYOUT, ScrollingAnim$OFFSET, fieldValue);
    }

    private static final OfFloat ScrollingTarget$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ScrollingTarget"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ScrollingTarget
     * }
     */
    public static final OfFloat ScrollingTarget$layout() {
        return ScrollingTarget$LAYOUT;
    }

    private static final long ScrollingTarget$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ScrollingTarget
     * }
     */
    public static final long ScrollingTarget$offset() {
        return ScrollingTarget$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ScrollingTarget
     * }
     */
    public static float ScrollingTarget(MemorySegment struct) {
        return struct.get(ScrollingTarget$LAYOUT, ScrollingTarget$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ScrollingTarget
     * }
     */
    public static void ScrollingTarget(MemorySegment struct, float fieldValue) {
        struct.set(ScrollingTarget$LAYOUT, ScrollingTarget$OFFSET, fieldValue);
    }

    private static final OfFloat ScrollingTargetDistToVisibility$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ScrollingTargetDistToVisibility"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ScrollingTargetDistToVisibility
     * }
     */
    public static final OfFloat ScrollingTargetDistToVisibility$layout() {
        return ScrollingTargetDistToVisibility$LAYOUT;
    }

    private static final long ScrollingTargetDistToVisibility$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ScrollingTargetDistToVisibility
     * }
     */
    public static final long ScrollingTargetDistToVisibility$offset() {
        return ScrollingTargetDistToVisibility$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ScrollingTargetDistToVisibility
     * }
     */
    public static float ScrollingTargetDistToVisibility(MemorySegment struct) {
        return struct.get(ScrollingTargetDistToVisibility$LAYOUT, ScrollingTargetDistToVisibility$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ScrollingTargetDistToVisibility
     * }
     */
    public static void ScrollingTargetDistToVisibility(MemorySegment struct, float fieldValue) {
        struct.set(ScrollingTargetDistToVisibility$LAYOUT, ScrollingTargetDistToVisibility$OFFSET, fieldValue);
    }

    private static final OfFloat ScrollingSpeed$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ScrollingSpeed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ScrollingSpeed
     * }
     */
    public static final OfFloat ScrollingSpeed$layout() {
        return ScrollingSpeed$LAYOUT;
    }

    private static final long ScrollingSpeed$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ScrollingSpeed
     * }
     */
    public static final long ScrollingSpeed$offset() {
        return ScrollingSpeed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ScrollingSpeed
     * }
     */
    public static float ScrollingSpeed(MemorySegment struct) {
        return struct.get(ScrollingSpeed$LAYOUT, ScrollingSpeed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ScrollingSpeed
     * }
     */
    public static void ScrollingSpeed(MemorySegment struct, float fieldValue) {
        struct.set(ScrollingSpeed$LAYOUT, ScrollingSpeed$OFFSET, fieldValue);
    }

    private static final OfFloat ScrollingRectMinX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ScrollingRectMinX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ScrollingRectMinX
     * }
     */
    public static final OfFloat ScrollingRectMinX$layout() {
        return ScrollingRectMinX$LAYOUT;
    }

    private static final long ScrollingRectMinX$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ScrollingRectMinX
     * }
     */
    public static final long ScrollingRectMinX$offset() {
        return ScrollingRectMinX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ScrollingRectMinX
     * }
     */
    public static float ScrollingRectMinX(MemorySegment struct) {
        return struct.get(ScrollingRectMinX$LAYOUT, ScrollingRectMinX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ScrollingRectMinX
     * }
     */
    public static void ScrollingRectMinX(MemorySegment struct, float fieldValue) {
        struct.set(ScrollingRectMinX$LAYOUT, ScrollingRectMinX$OFFSET, fieldValue);
    }

    private static final OfFloat ScrollingRectMaxX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ScrollingRectMaxX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ScrollingRectMaxX
     * }
     */
    public static final OfFloat ScrollingRectMaxX$layout() {
        return ScrollingRectMaxX$LAYOUT;
    }

    private static final long ScrollingRectMaxX$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ScrollingRectMaxX
     * }
     */
    public static final long ScrollingRectMaxX$offset() {
        return ScrollingRectMaxX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ScrollingRectMaxX
     * }
     */
    public static float ScrollingRectMaxX(MemorySegment struct) {
        return struct.get(ScrollingRectMaxX$LAYOUT, ScrollingRectMaxX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ScrollingRectMaxX
     * }
     */
    public static void ScrollingRectMaxX(MemorySegment struct, float fieldValue) {
        struct.set(ScrollingRectMaxX$LAYOUT, ScrollingRectMaxX$OFFSET, fieldValue);
    }

    private static final OfFloat SeparatorMinX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("SeparatorMinX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float SeparatorMinX
     * }
     */
    public static final OfFloat SeparatorMinX$layout() {
        return SeparatorMinX$LAYOUT;
    }

    private static final long SeparatorMinX$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float SeparatorMinX
     * }
     */
    public static final long SeparatorMinX$offset() {
        return SeparatorMinX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float SeparatorMinX
     * }
     */
    public static float SeparatorMinX(MemorySegment struct) {
        return struct.get(SeparatorMinX$LAYOUT, SeparatorMinX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float SeparatorMinX
     * }
     */
    public static void SeparatorMinX(MemorySegment struct, float fieldValue) {
        struct.set(SeparatorMinX$LAYOUT, SeparatorMinX$OFFSET, fieldValue);
    }

    private static final OfFloat SeparatorMaxX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("SeparatorMaxX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float SeparatorMaxX
     * }
     */
    public static final OfFloat SeparatorMaxX$layout() {
        return SeparatorMaxX$LAYOUT;
    }

    private static final long SeparatorMaxX$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float SeparatorMaxX
     * }
     */
    public static final long SeparatorMaxX$offset() {
        return SeparatorMaxX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float SeparatorMaxX
     * }
     */
    public static float SeparatorMaxX(MemorySegment struct) {
        return struct.get(SeparatorMaxX$LAYOUT, SeparatorMaxX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float SeparatorMaxX
     * }
     */
    public static void SeparatorMaxX(MemorySegment struct, float fieldValue) {
        struct.set(SeparatorMaxX$LAYOUT, SeparatorMaxX$OFFSET, fieldValue);
    }

    private static final OfInt ReorderRequestTabId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ReorderRequestTabId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ReorderRequestTabId
     * }
     */
    public static final OfInt ReorderRequestTabId$layout() {
        return ReorderRequestTabId$LAYOUT;
    }

    private static final long ReorderRequestTabId$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ReorderRequestTabId
     * }
     */
    public static final long ReorderRequestTabId$offset() {
        return ReorderRequestTabId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ReorderRequestTabId
     * }
     */
    public static int ReorderRequestTabId(MemorySegment struct) {
        return struct.get(ReorderRequestTabId$LAYOUT, ReorderRequestTabId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ReorderRequestTabId
     * }
     */
    public static void ReorderRequestTabId(MemorySegment struct, int fieldValue) {
        struct.set(ReorderRequestTabId$LAYOUT, ReorderRequestTabId$OFFSET, fieldValue);
    }

    private static final OfShort ReorderRequestOffset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ReorderRequestOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS16 ReorderRequestOffset
     * }
     */
    public static final OfShort ReorderRequestOffset$layout() {
        return ReorderRequestOffset$LAYOUT;
    }

    private static final long ReorderRequestOffset$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS16 ReorderRequestOffset
     * }
     */
    public static final long ReorderRequestOffset$offset() {
        return ReorderRequestOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS16 ReorderRequestOffset
     * }
     */
    public static short ReorderRequestOffset(MemorySegment struct) {
        return struct.get(ReorderRequestOffset$LAYOUT, ReorderRequestOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS16 ReorderRequestOffset
     * }
     */
    public static void ReorderRequestOffset(MemorySegment struct, short fieldValue) {
        struct.set(ReorderRequestOffset$LAYOUT, ReorderRequestOffset$OFFSET, fieldValue);
    }

    private static final OfByte BeginCount$LAYOUT = (OfByte)$LAYOUT.select(groupElement("BeginCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 BeginCount
     * }
     */
    public static final OfByte BeginCount$layout() {
        return BeginCount$LAYOUT;
    }

    private static final long BeginCount$OFFSET = 114;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 BeginCount
     * }
     */
    public static final long BeginCount$offset() {
        return BeginCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 BeginCount
     * }
     */
    public static byte BeginCount(MemorySegment struct) {
        return struct.get(BeginCount$LAYOUT, BeginCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 BeginCount
     * }
     */
    public static void BeginCount(MemorySegment struct, byte fieldValue) {
        struct.set(BeginCount$LAYOUT, BeginCount$OFFSET, fieldValue);
    }

    private static final OfBoolean WantLayout$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantLayout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantLayout
     * }
     */
    public static final OfBoolean WantLayout$layout() {
        return WantLayout$LAYOUT;
    }

    private static final long WantLayout$OFFSET = 115;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantLayout
     * }
     */
    public static final long WantLayout$offset() {
        return WantLayout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantLayout
     * }
     */
    public static boolean WantLayout(MemorySegment struct) {
        return struct.get(WantLayout$LAYOUT, WantLayout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantLayout
     * }
     */
    public static void WantLayout(MemorySegment struct, boolean fieldValue) {
        struct.set(WantLayout$LAYOUT, WantLayout$OFFSET, fieldValue);
    }

    private static final OfBoolean VisibleTabWasSubmitted$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("VisibleTabWasSubmitted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool VisibleTabWasSubmitted
     * }
     */
    public static final OfBoolean VisibleTabWasSubmitted$layout() {
        return VisibleTabWasSubmitted$LAYOUT;
    }

    private static final long VisibleTabWasSubmitted$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool VisibleTabWasSubmitted
     * }
     */
    public static final long VisibleTabWasSubmitted$offset() {
        return VisibleTabWasSubmitted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool VisibleTabWasSubmitted
     * }
     */
    public static boolean VisibleTabWasSubmitted(MemorySegment struct) {
        return struct.get(VisibleTabWasSubmitted$LAYOUT, VisibleTabWasSubmitted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool VisibleTabWasSubmitted
     * }
     */
    public static void VisibleTabWasSubmitted(MemorySegment struct, boolean fieldValue) {
        struct.set(VisibleTabWasSubmitted$LAYOUT, VisibleTabWasSubmitted$OFFSET, fieldValue);
    }

    private static final OfBoolean TabsAddedNew$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("TabsAddedNew"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool TabsAddedNew
     * }
     */
    public static final OfBoolean TabsAddedNew$layout() {
        return TabsAddedNew$LAYOUT;
    }

    private static final long TabsAddedNew$OFFSET = 117;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool TabsAddedNew
     * }
     */
    public static final long TabsAddedNew$offset() {
        return TabsAddedNew$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool TabsAddedNew
     * }
     */
    public static boolean TabsAddedNew(MemorySegment struct) {
        return struct.get(TabsAddedNew$LAYOUT, TabsAddedNew$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool TabsAddedNew
     * }
     */
    public static void TabsAddedNew(MemorySegment struct, boolean fieldValue) {
        struct.set(TabsAddedNew$LAYOUT, TabsAddedNew$OFFSET, fieldValue);
    }

    private static final OfShort TabsActiveCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("TabsActiveCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS16 TabsActiveCount
     * }
     */
    public static final OfShort TabsActiveCount$layout() {
        return TabsActiveCount$LAYOUT;
    }

    private static final long TabsActiveCount$OFFSET = 118;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS16 TabsActiveCount
     * }
     */
    public static final long TabsActiveCount$offset() {
        return TabsActiveCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS16 TabsActiveCount
     * }
     */
    public static short TabsActiveCount(MemorySegment struct) {
        return struct.get(TabsActiveCount$LAYOUT, TabsActiveCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS16 TabsActiveCount
     * }
     */
    public static void TabsActiveCount(MemorySegment struct, short fieldValue) {
        struct.set(TabsActiveCount$LAYOUT, TabsActiveCount$OFFSET, fieldValue);
    }

    private static final OfShort LastTabItemIdx$LAYOUT = (OfShort)$LAYOUT.select(groupElement("LastTabItemIdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS16 LastTabItemIdx
     * }
     */
    public static final OfShort LastTabItemIdx$layout() {
        return LastTabItemIdx$LAYOUT;
    }

    private static final long LastTabItemIdx$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS16 LastTabItemIdx
     * }
     */
    public static final long LastTabItemIdx$offset() {
        return LastTabItemIdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS16 LastTabItemIdx
     * }
     */
    public static short LastTabItemIdx(MemorySegment struct) {
        return struct.get(LastTabItemIdx$LAYOUT, LastTabItemIdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS16 LastTabItemIdx
     * }
     */
    public static void LastTabItemIdx(MemorySegment struct, short fieldValue) {
        struct.set(LastTabItemIdx$LAYOUT, LastTabItemIdx$OFFSET, fieldValue);
    }

    private static final OfFloat ItemSpacingY$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ItemSpacingY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ItemSpacingY
     * }
     */
    public static final OfFloat ItemSpacingY$layout() {
        return ItemSpacingY$LAYOUT;
    }

    private static final long ItemSpacingY$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ItemSpacingY
     * }
     */
    public static final long ItemSpacingY$offset() {
        return ItemSpacingY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ItemSpacingY
     * }
     */
    public static float ItemSpacingY(MemorySegment struct) {
        return struct.get(ItemSpacingY$LAYOUT, ItemSpacingY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ItemSpacingY
     * }
     */
    public static void ItemSpacingY(MemorySegment struct, float fieldValue) {
        struct.set(ItemSpacingY$LAYOUT, ItemSpacingY$OFFSET, fieldValue);
    }

    private static final GroupLayout FramePadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("FramePadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 FramePadding
     * }
     */
    public static final GroupLayout FramePadding$layout() {
        return FramePadding$LAYOUT;
    }

    private static final long FramePadding$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 FramePadding
     * }
     */
    public static final long FramePadding$offset() {
        return FramePadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 FramePadding
     * }
     */
    public static MemorySegment FramePadding(MemorySegment struct) {
        return struct.asSlice(FramePadding$OFFSET, FramePadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 FramePadding
     * }
     */
    public static void FramePadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FramePadding$OFFSET, FramePadding$LAYOUT.byteSize());
    }

    private static final GroupLayout BackupCursorPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BackupCursorPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPos
     * }
     */
    public static final GroupLayout BackupCursorPos$layout() {
        return BackupCursorPos$LAYOUT;
    }

    private static final long BackupCursorPos$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPos
     * }
     */
    public static final long BackupCursorPos$offset() {
        return BackupCursorPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPos
     * }
     */
    public static MemorySegment BackupCursorPos(MemorySegment struct) {
        return struct.asSlice(BackupCursorPos$OFFSET, BackupCursorPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorPos
     * }
     */
    public static void BackupCursorPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupCursorPos$OFFSET, BackupCursorPos$LAYOUT.byteSize());
    }

    private static final GroupLayout TabsNames$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TabsNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer TabsNames
     * }
     */
    public static final GroupLayout TabsNames$layout() {
        return TabsNames$LAYOUT;
    }

    private static final long TabsNames$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer TabsNames
     * }
     */
    public static final long TabsNames$offset() {
        return TabsNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer TabsNames
     * }
     */
    public static MemorySegment TabsNames(MemorySegment struct) {
        return struct.asSlice(TabsNames$OFFSET, TabsNames$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer TabsNames
     * }
     */
    public static void TabsNames(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TabsNames$OFFSET, TabsNames$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

