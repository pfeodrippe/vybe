// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiMultiSelectIO {
 *     ImVector_ImGuiSelectionRequest Requests;
 *     ImGuiSelectionUserData RangeSrcItem;
 *     ImGuiSelectionUserData NavIdItem;
 *     bool NavIdSelected;
 *     bool RangeSrcReset;
 *     int ItemsCount;
 * }
 * }
 */
public class ImGuiMultiSelectIO {

    ImGuiMultiSelectIO() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImVector_ImGuiSelectionRequest.layout().withName("Requests"),
        imgui.C_LONG_LONG.withName("RangeSrcItem"),
        imgui.C_LONG_LONG.withName("NavIdItem"),
        imgui.C_BOOL.withName("NavIdSelected"),
        imgui.C_BOOL.withName("RangeSrcReset"),
        MemoryLayout.paddingLayout(2),
        imgui.C_INT.withName("ItemsCount")
    ).withName("ImGuiMultiSelectIO");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout Requests$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Requests"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiSelectionRequest Requests
     * }
     */
    public static final GroupLayout Requests$layout() {
        return Requests$LAYOUT;
    }

    private static final long Requests$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiSelectionRequest Requests
     * }
     */
    public static final long Requests$offset() {
        return Requests$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiSelectionRequest Requests
     * }
     */
    public static MemorySegment Requests(MemorySegment struct) {
        return struct.asSlice(Requests$OFFSET, Requests$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiSelectionRequest Requests
     * }
     */
    public static void Requests(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Requests$OFFSET, Requests$LAYOUT.byteSize());
    }

    private static final OfLong RangeSrcItem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("RangeSrcItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeSrcItem
     * }
     */
    public static final OfLong RangeSrcItem$layout() {
        return RangeSrcItem$LAYOUT;
    }

    private static final long RangeSrcItem$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeSrcItem
     * }
     */
    public static final long RangeSrcItem$offset() {
        return RangeSrcItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeSrcItem
     * }
     */
    public static long RangeSrcItem(MemorySegment struct) {
        return struct.get(RangeSrcItem$LAYOUT, RangeSrcItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeSrcItem
     * }
     */
    public static void RangeSrcItem(MemorySegment struct, long fieldValue) {
        struct.set(RangeSrcItem$LAYOUT, RangeSrcItem$OFFSET, fieldValue);
    }

    private static final OfLong NavIdItem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("NavIdItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavIdItem
     * }
     */
    public static final OfLong NavIdItem$layout() {
        return NavIdItem$LAYOUT;
    }

    private static final long NavIdItem$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavIdItem
     * }
     */
    public static final long NavIdItem$offset() {
        return NavIdItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavIdItem
     * }
     */
    public static long NavIdItem(MemorySegment struct) {
        return struct.get(NavIdItem$LAYOUT, NavIdItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavIdItem
     * }
     */
    public static void NavIdItem(MemorySegment struct, long fieldValue) {
        struct.set(NavIdItem$LAYOUT, NavIdItem$OFFSET, fieldValue);
    }

    private static final OfBoolean NavIdSelected$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavIdSelected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavIdSelected
     * }
     */
    public static final OfBoolean NavIdSelected$layout() {
        return NavIdSelected$LAYOUT;
    }

    private static final long NavIdSelected$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavIdSelected
     * }
     */
    public static final long NavIdSelected$offset() {
        return NavIdSelected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavIdSelected
     * }
     */
    public static boolean NavIdSelected(MemorySegment struct) {
        return struct.get(NavIdSelected$LAYOUT, NavIdSelected$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavIdSelected
     * }
     */
    public static void NavIdSelected(MemorySegment struct, boolean fieldValue) {
        struct.set(NavIdSelected$LAYOUT, NavIdSelected$OFFSET, fieldValue);
    }

    private static final OfBoolean RangeSrcReset$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("RangeSrcReset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool RangeSrcReset
     * }
     */
    public static final OfBoolean RangeSrcReset$layout() {
        return RangeSrcReset$LAYOUT;
    }

    private static final long RangeSrcReset$OFFSET = 33;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool RangeSrcReset
     * }
     */
    public static final long RangeSrcReset$offset() {
        return RangeSrcReset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool RangeSrcReset
     * }
     */
    public static boolean RangeSrcReset(MemorySegment struct) {
        return struct.get(RangeSrcReset$LAYOUT, RangeSrcReset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool RangeSrcReset
     * }
     */
    public static void RangeSrcReset(MemorySegment struct, boolean fieldValue) {
        struct.set(RangeSrcReset$LAYOUT, RangeSrcReset$OFFSET, fieldValue);
    }

    private static final OfInt ItemsCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ItemsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ItemsCount
     * }
     */
    public static final OfInt ItemsCount$layout() {
        return ItemsCount$LAYOUT;
    }

    private static final long ItemsCount$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ItemsCount
     * }
     */
    public static final long ItemsCount$offset() {
        return ItemsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ItemsCount
     * }
     */
    public static int ItemsCount(MemorySegment struct) {
        return struct.get(ItemsCount$LAYOUT, ItemsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ItemsCount
     * }
     */
    public static void ItemsCount(MemorySegment struct, int fieldValue) {
        struct.set(ItemsCount$LAYOUT, ItemsCount$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

