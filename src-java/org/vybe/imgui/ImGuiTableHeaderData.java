// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiTableHeaderData {
 *     ImGuiTableColumnIdx Index;
 *     ImU32 TextColor;
 *     ImU32 BgColor0;
 *     ImU32 BgColor1;
 * }
 * }
 */
public class ImGuiTableHeaderData {

    ImGuiTableHeaderData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_SHORT.withName("Index"),
        MemoryLayout.paddingLayout(2),
        imgui.C_INT.withName("TextColor"),
        imgui.C_INT.withName("BgColor0"),
        imgui.C_INT.withName("BgColor1")
    ).withName("ImGuiTableHeaderData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort Index$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx Index
     * }
     */
    public static final OfShort Index$layout() {
        return Index$LAYOUT;
    }

    private static final long Index$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx Index
     * }
     */
    public static final long Index$offset() {
        return Index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx Index
     * }
     */
    public static short Index(MemorySegment struct) {
        return struct.get(Index$LAYOUT, Index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx Index
     * }
     */
    public static void Index(MemorySegment struct, short fieldValue) {
        struct.set(Index$LAYOUT, Index$OFFSET, fieldValue);
    }

    private static final OfInt TextColor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TextColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 TextColor
     * }
     */
    public static final OfInt TextColor$layout() {
        return TextColor$LAYOUT;
    }

    private static final long TextColor$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 TextColor
     * }
     */
    public static final long TextColor$offset() {
        return TextColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 TextColor
     * }
     */
    public static int TextColor(MemorySegment struct) {
        return struct.get(TextColor$LAYOUT, TextColor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 TextColor
     * }
     */
    public static void TextColor(MemorySegment struct, int fieldValue) {
        struct.set(TextColor$LAYOUT, TextColor$OFFSET, fieldValue);
    }

    private static final OfInt BgColor0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BgColor0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 BgColor0
     * }
     */
    public static final OfInt BgColor0$layout() {
        return BgColor0$LAYOUT;
    }

    private static final long BgColor0$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 BgColor0
     * }
     */
    public static final long BgColor0$offset() {
        return BgColor0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 BgColor0
     * }
     */
    public static int BgColor0(MemorySegment struct) {
        return struct.get(BgColor0$LAYOUT, BgColor0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 BgColor0
     * }
     */
    public static void BgColor0(MemorySegment struct, int fieldValue) {
        struct.set(BgColor0$LAYOUT, BgColor0$OFFSET, fieldValue);
    }

    private static final OfInt BgColor1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BgColor1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 BgColor1
     * }
     */
    public static final OfInt BgColor1$layout() {
        return BgColor1$LAYOUT;
    }

    private static final long BgColor1$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 BgColor1
     * }
     */
    public static final long BgColor1$offset() {
        return BgColor1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 BgColor1
     * }
     */
    public static int BgColor1(MemorySegment struct) {
        return struct.get(BgColor1$LAYOUT, BgColor1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 BgColor1
     * }
     */
    public static void BgColor1(MemorySegment struct, int fieldValue) {
        struct.set(BgColor1$LAYOUT, BgColor1$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

