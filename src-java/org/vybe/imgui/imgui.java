// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class imgui extends imgui_1 {

    imgui() {
        // Should not be called directly
    }

    private static class ImGuiContextHook_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiContextHook_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiContextHook_destroy(ImGuiContextHook *self)
     * }
     */
    public static FunctionDescriptor ImGuiContextHook_destroy$descriptor() {
        return ImGuiContextHook_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiContextHook_destroy(ImGuiContextHook *self)
     * }
     */
    public static MethodHandle ImGuiContextHook_destroy$handle() {
        return ImGuiContextHook_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiContextHook_destroy(ImGuiContextHook *self)
     * }
     */
    public static MemorySegment ImGuiContextHook_destroy$address() {
        return ImGuiContextHook_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiContextHook_destroy(ImGuiContextHook *self)
     * }
     */
    public static void ImGuiContextHook_destroy(MemorySegment self) {
        var mh$ = ImGuiContextHook_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiContextHook_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiContext_ImGuiContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiContext_ImGuiContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiContext *ImGuiContext_ImGuiContext(ImFontAtlas *shared_font_atlas)
     * }
     */
    public static FunctionDescriptor ImGuiContext_ImGuiContext$descriptor() {
        return ImGuiContext_ImGuiContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiContext *ImGuiContext_ImGuiContext(ImFontAtlas *shared_font_atlas)
     * }
     */
    public static MethodHandle ImGuiContext_ImGuiContext$handle() {
        return ImGuiContext_ImGuiContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiContext *ImGuiContext_ImGuiContext(ImFontAtlas *shared_font_atlas)
     * }
     */
    public static MemorySegment ImGuiContext_ImGuiContext$address() {
        return ImGuiContext_ImGuiContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiContext *ImGuiContext_ImGuiContext(ImFontAtlas *shared_font_atlas)
     * }
     */
    public static MemorySegment ImGuiContext_ImGuiContext(MemorySegment shared_font_atlas) {
        var mh$ = ImGuiContext_ImGuiContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiContext_ImGuiContext", shared_font_atlas);
            }
            return (MemorySegment)mh$.invokeExact(shared_font_atlas);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiContext_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiContext_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiContext_destroy(ImGuiContext *self)
     * }
     */
    public static FunctionDescriptor ImGuiContext_destroy$descriptor() {
        return ImGuiContext_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiContext_destroy(ImGuiContext *self)
     * }
     */
    public static MethodHandle ImGuiContext_destroy$handle() {
        return ImGuiContext_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiContext_destroy(ImGuiContext *self)
     * }
     */
    public static MemorySegment ImGuiContext_destroy$address() {
        return ImGuiContext_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiContext_destroy(ImGuiContext *self)
     * }
     */
    public static void ImGuiContext_destroy(MemorySegment self) {
        var mh$ = ImGuiContext_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiContext_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_ImGuiWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_ImGuiWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindow *ImGuiWindow_ImGuiWindow(ImGuiContext *context, const char *name)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_ImGuiWindow$descriptor() {
        return ImGuiWindow_ImGuiWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindow *ImGuiWindow_ImGuiWindow(ImGuiContext *context, const char *name)
     * }
     */
    public static MethodHandle ImGuiWindow_ImGuiWindow$handle() {
        return ImGuiWindow_ImGuiWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindow *ImGuiWindow_ImGuiWindow(ImGuiContext *context, const char *name)
     * }
     */
    public static MemorySegment ImGuiWindow_ImGuiWindow$address() {
        return ImGuiWindow_ImGuiWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindow *ImGuiWindow_ImGuiWindow(ImGuiContext *context, const char *name)
     * }
     */
    public static MemorySegment ImGuiWindow_ImGuiWindow(MemorySegment context, MemorySegment name) {
        var mh$ = ImGuiWindow_ImGuiWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_ImGuiWindow", context, name);
            }
            return (MemorySegment)mh$.invokeExact(context, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_destroy(ImGuiWindow *self)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_destroy$descriptor() {
        return ImGuiWindow_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_destroy(ImGuiWindow *self)
     * }
     */
    public static MethodHandle ImGuiWindow_destroy$handle() {
        return ImGuiWindow_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_destroy(ImGuiWindow *self)
     * }
     */
    public static MemorySegment ImGuiWindow_destroy$address() {
        return ImGuiWindow_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiWindow_destroy(ImGuiWindow *self)
     * }
     */
    public static void ImGuiWindow_destroy(MemorySegment self) {
        var mh$ = ImGuiWindow_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_GetID_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_GetID_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Str(ImGuiWindow *self, const char *str, const char *str_end)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_GetID_Str$descriptor() {
        return ImGuiWindow_GetID_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Str(ImGuiWindow *self, const char *str, const char *str_end)
     * }
     */
    public static MethodHandle ImGuiWindow_GetID_Str$handle() {
        return ImGuiWindow_GetID_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Str(ImGuiWindow *self, const char *str, const char *str_end)
     * }
     */
    public static MemorySegment ImGuiWindow_GetID_Str$address() {
        return ImGuiWindow_GetID_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Str(ImGuiWindow *self, const char *str, const char *str_end)
     * }
     */
    public static int ImGuiWindow_GetID_Str(MemorySegment self, MemorySegment str, MemorySegment str_end) {
        var mh$ = ImGuiWindow_GetID_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_GetID_Str", self, str, str_end);
            }
            return (int)mh$.invokeExact(self, str, str_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_GetID_Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_GetID_Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Ptr(ImGuiWindow *self, const void *ptr)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_GetID_Ptr$descriptor() {
        return ImGuiWindow_GetID_Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Ptr(ImGuiWindow *self, const void *ptr)
     * }
     */
    public static MethodHandle ImGuiWindow_GetID_Ptr$handle() {
        return ImGuiWindow_GetID_Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Ptr(ImGuiWindow *self, const void *ptr)
     * }
     */
    public static MemorySegment ImGuiWindow_GetID_Ptr$address() {
        return ImGuiWindow_GetID_Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Ptr(ImGuiWindow *self, const void *ptr)
     * }
     */
    public static int ImGuiWindow_GetID_Ptr(MemorySegment self, MemorySegment ptr) {
        var mh$ = ImGuiWindow_GetID_Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_GetID_Ptr", self, ptr);
            }
            return (int)mh$.invokeExact(self, ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_GetID_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_GetID_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Int(ImGuiWindow *self, int n)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_GetID_Int$descriptor() {
        return ImGuiWindow_GetID_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Int(ImGuiWindow *self, int n)
     * }
     */
    public static MethodHandle ImGuiWindow_GetID_Int$handle() {
        return ImGuiWindow_GetID_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Int(ImGuiWindow *self, int n)
     * }
     */
    public static MemorySegment ImGuiWindow_GetID_Int$address() {
        return ImGuiWindow_GetID_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetID_Int(ImGuiWindow *self, int n)
     * }
     */
    public static int ImGuiWindow_GetID_Int(MemorySegment self, int n) {
        var mh$ = ImGuiWindow_GetID_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_GetID_Int", self, n);
            }
            return (int)mh$.invokeExact(self, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_GetIDFromRectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_GetIDFromRectangle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetIDFromRectangle(ImGuiWindow *self, const ImRect r_abs)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_GetIDFromRectangle$descriptor() {
        return ImGuiWindow_GetIDFromRectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetIDFromRectangle(ImGuiWindow *self, const ImRect r_abs)
     * }
     */
    public static MethodHandle ImGuiWindow_GetIDFromRectangle$handle() {
        return ImGuiWindow_GetIDFromRectangle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetIDFromRectangle(ImGuiWindow *self, const ImRect r_abs)
     * }
     */
    public static MemorySegment ImGuiWindow_GetIDFromRectangle$address() {
        return ImGuiWindow_GetIDFromRectangle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID ImGuiWindow_GetIDFromRectangle(ImGuiWindow *self, const ImRect r_abs)
     * }
     */
    public static int ImGuiWindow_GetIDFromRectangle(MemorySegment self, MemorySegment r_abs) {
        var mh$ = ImGuiWindow_GetIDFromRectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_GetIDFromRectangle", self, r_abs);
            }
            return (int)mh$.invokeExact(self, r_abs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_Rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_Rect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_Rect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_Rect$descriptor() {
        return ImGuiWindow_Rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_Rect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static MethodHandle ImGuiWindow_Rect$handle() {
        return ImGuiWindow_Rect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_Rect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static MemorySegment ImGuiWindow_Rect$address() {
        return ImGuiWindow_Rect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiWindow_Rect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static void ImGuiWindow_Rect(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImGuiWindow_Rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_Rect", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_CalcFontSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_CalcFontSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ImGuiWindow_CalcFontSize(ImGuiWindow *self)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_CalcFontSize$descriptor() {
        return ImGuiWindow_CalcFontSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ImGuiWindow_CalcFontSize(ImGuiWindow *self)
     * }
     */
    public static MethodHandle ImGuiWindow_CalcFontSize$handle() {
        return ImGuiWindow_CalcFontSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ImGuiWindow_CalcFontSize(ImGuiWindow *self)
     * }
     */
    public static MemorySegment ImGuiWindow_CalcFontSize$address() {
        return ImGuiWindow_CalcFontSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ImGuiWindow_CalcFontSize(ImGuiWindow *self)
     * }
     */
    public static float ImGuiWindow_CalcFontSize(MemorySegment self) {
        var mh$ = ImGuiWindow_CalcFontSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_CalcFontSize", self);
            }
            return (float)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_TitleBarRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_TitleBarRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_TitleBarRect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_TitleBarRect$descriptor() {
        return ImGuiWindow_TitleBarRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_TitleBarRect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static MethodHandle ImGuiWindow_TitleBarRect$handle() {
        return ImGuiWindow_TitleBarRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_TitleBarRect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static MemorySegment ImGuiWindow_TitleBarRect$address() {
        return ImGuiWindow_TitleBarRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiWindow_TitleBarRect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static void ImGuiWindow_TitleBarRect(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImGuiWindow_TitleBarRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_TitleBarRect", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindow_MenuBarRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindow_MenuBarRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_MenuBarRect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static FunctionDescriptor ImGuiWindow_MenuBarRect$descriptor() {
        return ImGuiWindow_MenuBarRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_MenuBarRect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static MethodHandle ImGuiWindow_MenuBarRect$handle() {
        return ImGuiWindow_MenuBarRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiWindow_MenuBarRect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static MemorySegment ImGuiWindow_MenuBarRect$address() {
        return ImGuiWindow_MenuBarRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiWindow_MenuBarRect(ImRect *pOut, ImGuiWindow *self)
     * }
     */
    public static void ImGuiWindow_MenuBarRect(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImGuiWindow_MenuBarRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindow_MenuBarRect", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTabItem_ImGuiTabItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTabItem_ImGuiTabItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *ImGuiTabItem_ImGuiTabItem()
     * }
     */
    public static FunctionDescriptor ImGuiTabItem_ImGuiTabItem$descriptor() {
        return ImGuiTabItem_ImGuiTabItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *ImGuiTabItem_ImGuiTabItem()
     * }
     */
    public static MethodHandle ImGuiTabItem_ImGuiTabItem$handle() {
        return ImGuiTabItem_ImGuiTabItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *ImGuiTabItem_ImGuiTabItem()
     * }
     */
    public static MemorySegment ImGuiTabItem_ImGuiTabItem$address() {
        return ImGuiTabItem_ImGuiTabItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTabItem *ImGuiTabItem_ImGuiTabItem()
     * }
     */
    public static MemorySegment ImGuiTabItem_ImGuiTabItem() {
        var mh$ = ImGuiTabItem_ImGuiTabItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTabItem_ImGuiTabItem");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTabItem_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTabItem_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTabItem_destroy(ImGuiTabItem *self)
     * }
     */
    public static FunctionDescriptor ImGuiTabItem_destroy$descriptor() {
        return ImGuiTabItem_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTabItem_destroy(ImGuiTabItem *self)
     * }
     */
    public static MethodHandle ImGuiTabItem_destroy$handle() {
        return ImGuiTabItem_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTabItem_destroy(ImGuiTabItem *self)
     * }
     */
    public static MemorySegment ImGuiTabItem_destroy$address() {
        return ImGuiTabItem_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTabItem_destroy(ImGuiTabItem *self)
     * }
     */
    public static void ImGuiTabItem_destroy(MemorySegment self) {
        var mh$ = ImGuiTabItem_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTabItem_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTabBar_ImGuiTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTabBar_ImGuiTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTabBar *ImGuiTabBar_ImGuiTabBar()
     * }
     */
    public static FunctionDescriptor ImGuiTabBar_ImGuiTabBar$descriptor() {
        return ImGuiTabBar_ImGuiTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTabBar *ImGuiTabBar_ImGuiTabBar()
     * }
     */
    public static MethodHandle ImGuiTabBar_ImGuiTabBar$handle() {
        return ImGuiTabBar_ImGuiTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTabBar *ImGuiTabBar_ImGuiTabBar()
     * }
     */
    public static MemorySegment ImGuiTabBar_ImGuiTabBar$address() {
        return ImGuiTabBar_ImGuiTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTabBar *ImGuiTabBar_ImGuiTabBar()
     * }
     */
    public static MemorySegment ImGuiTabBar_ImGuiTabBar() {
        var mh$ = ImGuiTabBar_ImGuiTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTabBar_ImGuiTabBar");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTabBar_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTabBar_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTabBar_destroy(ImGuiTabBar *self)
     * }
     */
    public static FunctionDescriptor ImGuiTabBar_destroy$descriptor() {
        return ImGuiTabBar_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTabBar_destroy(ImGuiTabBar *self)
     * }
     */
    public static MethodHandle ImGuiTabBar_destroy$handle() {
        return ImGuiTabBar_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTabBar_destroy(ImGuiTabBar *self)
     * }
     */
    public static MemorySegment ImGuiTabBar_destroy$address() {
        return ImGuiTabBar_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTabBar_destroy(ImGuiTabBar *self)
     * }
     */
    public static void ImGuiTabBar_destroy(MemorySegment self) {
        var mh$ = ImGuiTabBar_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTabBar_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableColumn_ImGuiTableColumn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableColumn_ImGuiTableColumn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableColumn *ImGuiTableColumn_ImGuiTableColumn()
     * }
     */
    public static FunctionDescriptor ImGuiTableColumn_ImGuiTableColumn$descriptor() {
        return ImGuiTableColumn_ImGuiTableColumn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableColumn *ImGuiTableColumn_ImGuiTableColumn()
     * }
     */
    public static MethodHandle ImGuiTableColumn_ImGuiTableColumn$handle() {
        return ImGuiTableColumn_ImGuiTableColumn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableColumn *ImGuiTableColumn_ImGuiTableColumn()
     * }
     */
    public static MemorySegment ImGuiTableColumn_ImGuiTableColumn$address() {
        return ImGuiTableColumn_ImGuiTableColumn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableColumn *ImGuiTableColumn_ImGuiTableColumn()
     * }
     */
    public static MemorySegment ImGuiTableColumn_ImGuiTableColumn() {
        var mh$ = ImGuiTableColumn_ImGuiTableColumn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableColumn_ImGuiTableColumn");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableColumn_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableColumn_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTableColumn_destroy(ImGuiTableColumn *self)
     * }
     */
    public static FunctionDescriptor ImGuiTableColumn_destroy$descriptor() {
        return ImGuiTableColumn_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTableColumn_destroy(ImGuiTableColumn *self)
     * }
     */
    public static MethodHandle ImGuiTableColumn_destroy$handle() {
        return ImGuiTableColumn_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTableColumn_destroy(ImGuiTableColumn *self)
     * }
     */
    public static MemorySegment ImGuiTableColumn_destroy$address() {
        return ImGuiTableColumn_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTableColumn_destroy(ImGuiTableColumn *self)
     * }
     */
    public static void ImGuiTableColumn_destroy(MemorySegment self) {
        var mh$ = ImGuiTableColumn_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableColumn_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableInstanceData_ImGuiTableInstanceData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableInstanceData_ImGuiTableInstanceData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableInstanceData *ImGuiTableInstanceData_ImGuiTableInstanceData()
     * }
     */
    public static FunctionDescriptor ImGuiTableInstanceData_ImGuiTableInstanceData$descriptor() {
        return ImGuiTableInstanceData_ImGuiTableInstanceData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableInstanceData *ImGuiTableInstanceData_ImGuiTableInstanceData()
     * }
     */
    public static MethodHandle ImGuiTableInstanceData_ImGuiTableInstanceData$handle() {
        return ImGuiTableInstanceData_ImGuiTableInstanceData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableInstanceData *ImGuiTableInstanceData_ImGuiTableInstanceData()
     * }
     */
    public static MemorySegment ImGuiTableInstanceData_ImGuiTableInstanceData$address() {
        return ImGuiTableInstanceData_ImGuiTableInstanceData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableInstanceData *ImGuiTableInstanceData_ImGuiTableInstanceData()
     * }
     */
    public static MemorySegment ImGuiTableInstanceData_ImGuiTableInstanceData() {
        var mh$ = ImGuiTableInstanceData_ImGuiTableInstanceData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableInstanceData_ImGuiTableInstanceData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableInstanceData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableInstanceData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTableInstanceData_destroy(ImGuiTableInstanceData *self)
     * }
     */
    public static FunctionDescriptor ImGuiTableInstanceData_destroy$descriptor() {
        return ImGuiTableInstanceData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTableInstanceData_destroy(ImGuiTableInstanceData *self)
     * }
     */
    public static MethodHandle ImGuiTableInstanceData_destroy$handle() {
        return ImGuiTableInstanceData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTableInstanceData_destroy(ImGuiTableInstanceData *self)
     * }
     */
    public static MemorySegment ImGuiTableInstanceData_destroy$address() {
        return ImGuiTableInstanceData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTableInstanceData_destroy(ImGuiTableInstanceData *self)
     * }
     */
    public static void ImGuiTableInstanceData_destroy(MemorySegment self) {
        var mh$ = ImGuiTableInstanceData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableInstanceData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTable_ImGuiTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTable_ImGuiTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTable *ImGuiTable_ImGuiTable()
     * }
     */
    public static FunctionDescriptor ImGuiTable_ImGuiTable$descriptor() {
        return ImGuiTable_ImGuiTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTable *ImGuiTable_ImGuiTable()
     * }
     */
    public static MethodHandle ImGuiTable_ImGuiTable$handle() {
        return ImGuiTable_ImGuiTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTable *ImGuiTable_ImGuiTable()
     * }
     */
    public static MemorySegment ImGuiTable_ImGuiTable$address() {
        return ImGuiTable_ImGuiTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTable *ImGuiTable_ImGuiTable()
     * }
     */
    public static MemorySegment ImGuiTable_ImGuiTable() {
        var mh$ = ImGuiTable_ImGuiTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTable_ImGuiTable");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTable_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTable_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTable_destroy(ImGuiTable *self)
     * }
     */
    public static FunctionDescriptor ImGuiTable_destroy$descriptor() {
        return ImGuiTable_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTable_destroy(ImGuiTable *self)
     * }
     */
    public static MethodHandle ImGuiTable_destroy$handle() {
        return ImGuiTable_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTable_destroy(ImGuiTable *self)
     * }
     */
    public static MemorySegment ImGuiTable_destroy$address() {
        return ImGuiTable_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTable_destroy(ImGuiTable *self)
     * }
     */
    public static void ImGuiTable_destroy(MemorySegment self) {
        var mh$ = ImGuiTable_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTable_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableTempData_ImGuiTableTempData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableTempData_ImGuiTableTempData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableTempData *ImGuiTableTempData_ImGuiTableTempData()
     * }
     */
    public static FunctionDescriptor ImGuiTableTempData_ImGuiTableTempData$descriptor() {
        return ImGuiTableTempData_ImGuiTableTempData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableTempData *ImGuiTableTempData_ImGuiTableTempData()
     * }
     */
    public static MethodHandle ImGuiTableTempData_ImGuiTableTempData$handle() {
        return ImGuiTableTempData_ImGuiTableTempData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableTempData *ImGuiTableTempData_ImGuiTableTempData()
     * }
     */
    public static MemorySegment ImGuiTableTempData_ImGuiTableTempData$address() {
        return ImGuiTableTempData_ImGuiTableTempData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableTempData *ImGuiTableTempData_ImGuiTableTempData()
     * }
     */
    public static MemorySegment ImGuiTableTempData_ImGuiTableTempData() {
        var mh$ = ImGuiTableTempData_ImGuiTableTempData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableTempData_ImGuiTableTempData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableTempData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableTempData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTableTempData_destroy(ImGuiTableTempData *self)
     * }
     */
    public static FunctionDescriptor ImGuiTableTempData_destroy$descriptor() {
        return ImGuiTableTempData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTableTempData_destroy(ImGuiTableTempData *self)
     * }
     */
    public static MethodHandle ImGuiTableTempData_destroy$handle() {
        return ImGuiTableTempData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTableTempData_destroy(ImGuiTableTempData *self)
     * }
     */
    public static MemorySegment ImGuiTableTempData_destroy$address() {
        return ImGuiTableTempData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTableTempData_destroy(ImGuiTableTempData *self)
     * }
     */
    public static void ImGuiTableTempData_destroy(MemorySegment self) {
        var mh$ = ImGuiTableTempData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableTempData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableColumnSettings_ImGuiTableColumnSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableColumnSettings_ImGuiTableColumnSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnSettings *ImGuiTableColumnSettings_ImGuiTableColumnSettings()
     * }
     */
    public static FunctionDescriptor ImGuiTableColumnSettings_ImGuiTableColumnSettings$descriptor() {
        return ImGuiTableColumnSettings_ImGuiTableColumnSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnSettings *ImGuiTableColumnSettings_ImGuiTableColumnSettings()
     * }
     */
    public static MethodHandle ImGuiTableColumnSettings_ImGuiTableColumnSettings$handle() {
        return ImGuiTableColumnSettings_ImGuiTableColumnSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnSettings *ImGuiTableColumnSettings_ImGuiTableColumnSettings()
     * }
     */
    public static MemorySegment ImGuiTableColumnSettings_ImGuiTableColumnSettings$address() {
        return ImGuiTableColumnSettings_ImGuiTableColumnSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableColumnSettings *ImGuiTableColumnSettings_ImGuiTableColumnSettings()
     * }
     */
    public static MemorySegment ImGuiTableColumnSettings_ImGuiTableColumnSettings() {
        var mh$ = ImGuiTableColumnSettings_ImGuiTableColumnSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableColumnSettings_ImGuiTableColumnSettings");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableColumnSettings_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableColumnSettings_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTableColumnSettings_destroy(ImGuiTableColumnSettings *self)
     * }
     */
    public static FunctionDescriptor ImGuiTableColumnSettings_destroy$descriptor() {
        return ImGuiTableColumnSettings_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTableColumnSettings_destroy(ImGuiTableColumnSettings *self)
     * }
     */
    public static MethodHandle ImGuiTableColumnSettings_destroy$handle() {
        return ImGuiTableColumnSettings_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTableColumnSettings_destroy(ImGuiTableColumnSettings *self)
     * }
     */
    public static MemorySegment ImGuiTableColumnSettings_destroy$address() {
        return ImGuiTableColumnSettings_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTableColumnSettings_destroy(ImGuiTableColumnSettings *self)
     * }
     */
    public static void ImGuiTableColumnSettings_destroy(MemorySegment self) {
        var mh$ = ImGuiTableColumnSettings_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableColumnSettings_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableSettings_ImGuiTableSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableSettings_ImGuiTableSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *ImGuiTableSettings_ImGuiTableSettings()
     * }
     */
    public static FunctionDescriptor ImGuiTableSettings_ImGuiTableSettings$descriptor() {
        return ImGuiTableSettings_ImGuiTableSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *ImGuiTableSettings_ImGuiTableSettings()
     * }
     */
    public static MethodHandle ImGuiTableSettings_ImGuiTableSettings$handle() {
        return ImGuiTableSettings_ImGuiTableSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *ImGuiTableSettings_ImGuiTableSettings()
     * }
     */
    public static MemorySegment ImGuiTableSettings_ImGuiTableSettings$address() {
        return ImGuiTableSettings_ImGuiTableSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableSettings *ImGuiTableSettings_ImGuiTableSettings()
     * }
     */
    public static MemorySegment ImGuiTableSettings_ImGuiTableSettings() {
        var mh$ = ImGuiTableSettings_ImGuiTableSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableSettings_ImGuiTableSettings");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableSettings_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableSettings_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTableSettings_destroy(ImGuiTableSettings *self)
     * }
     */
    public static FunctionDescriptor ImGuiTableSettings_destroy$descriptor() {
        return ImGuiTableSettings_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTableSettings_destroy(ImGuiTableSettings *self)
     * }
     */
    public static MethodHandle ImGuiTableSettings_destroy$handle() {
        return ImGuiTableSettings_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTableSettings_destroy(ImGuiTableSettings *self)
     * }
     */
    public static MemorySegment ImGuiTableSettings_destroy$address() {
        return ImGuiTableSettings_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTableSettings_destroy(ImGuiTableSettings *self)
     * }
     */
    public static void ImGuiTableSettings_destroy(MemorySegment self) {
        var mh$ = ImGuiTableSettings_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableSettings_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableSettings_GetColumnSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableSettings_GetColumnSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnSettings *ImGuiTableSettings_GetColumnSettings(ImGuiTableSettings *self)
     * }
     */
    public static FunctionDescriptor ImGuiTableSettings_GetColumnSettings$descriptor() {
        return ImGuiTableSettings_GetColumnSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnSettings *ImGuiTableSettings_GetColumnSettings(ImGuiTableSettings *self)
     * }
     */
    public static MethodHandle ImGuiTableSettings_GetColumnSettings$handle() {
        return ImGuiTableSettings_GetColumnSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnSettings *ImGuiTableSettings_GetColumnSettings(ImGuiTableSettings *self)
     * }
     */
    public static MemorySegment ImGuiTableSettings_GetColumnSettings$address() {
        return ImGuiTableSettings_GetColumnSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableColumnSettings *ImGuiTableSettings_GetColumnSettings(ImGuiTableSettings *self)
     * }
     */
    public static MemorySegment ImGuiTableSettings_GetColumnSettings(MemorySegment self) {
        var mh$ = ImGuiTableSettings_GetColumnSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableSettings_GetColumnSettings", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCurrentWindowRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCurrentWindowRead");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetCurrentWindowRead()
     * }
     */
    public static FunctionDescriptor igGetCurrentWindowRead$descriptor() {
        return igGetCurrentWindowRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetCurrentWindowRead()
     * }
     */
    public static MethodHandle igGetCurrentWindowRead$handle() {
        return igGetCurrentWindowRead.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetCurrentWindowRead()
     * }
     */
    public static MemorySegment igGetCurrentWindowRead$address() {
        return igGetCurrentWindowRead.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetCurrentWindowRead()
     * }
     */
    public static MemorySegment igGetCurrentWindowRead() {
        var mh$ = igGetCurrentWindowRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCurrentWindowRead");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCurrentWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCurrentWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetCurrentWindow()
     * }
     */
    public static FunctionDescriptor igGetCurrentWindow$descriptor() {
        return igGetCurrentWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetCurrentWindow()
     * }
     */
    public static MethodHandle igGetCurrentWindow$handle() {
        return igGetCurrentWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetCurrentWindow()
     * }
     */
    public static MemorySegment igGetCurrentWindow$address() {
        return igGetCurrentWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetCurrentWindow()
     * }
     */
    public static MemorySegment igGetCurrentWindow() {
        var mh$ = igGetCurrentWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCurrentWindow");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindWindowByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindWindowByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindWindowByID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igFindWindowByID$descriptor() {
        return igFindWindowByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindWindowByID(ImGuiID id)
     * }
     */
    public static MethodHandle igFindWindowByID$handle() {
        return igFindWindowByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindWindowByID(ImGuiID id)
     * }
     */
    public static MemorySegment igFindWindowByID$address() {
        return igFindWindowByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindWindowByID(ImGuiID id)
     * }
     */
    public static MemorySegment igFindWindowByID(int id) {
        var mh$ = igFindWindowByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindWindowByID", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindWindowByName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindWindowByName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindWindowByName(const char *name)
     * }
     */
    public static FunctionDescriptor igFindWindowByName$descriptor() {
        return igFindWindowByName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindWindowByName(const char *name)
     * }
     */
    public static MethodHandle igFindWindowByName$handle() {
        return igFindWindowByName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindWindowByName(const char *name)
     * }
     */
    public static MemorySegment igFindWindowByName$address() {
        return igFindWindowByName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindWindowByName(const char *name)
     * }
     */
    public static MemorySegment igFindWindowByName(MemorySegment name) {
        var mh$ = igFindWindowByName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindWindowByName", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igUpdateWindowParentAndRootLinks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igUpdateWindowParentAndRootLinks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igUpdateWindowParentAndRootLinks(ImGuiWindow *window, ImGuiWindowFlags flags, ImGuiWindow *parent_window)
     * }
     */
    public static FunctionDescriptor igUpdateWindowParentAndRootLinks$descriptor() {
        return igUpdateWindowParentAndRootLinks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igUpdateWindowParentAndRootLinks(ImGuiWindow *window, ImGuiWindowFlags flags, ImGuiWindow *parent_window)
     * }
     */
    public static MethodHandle igUpdateWindowParentAndRootLinks$handle() {
        return igUpdateWindowParentAndRootLinks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igUpdateWindowParentAndRootLinks(ImGuiWindow *window, ImGuiWindowFlags flags, ImGuiWindow *parent_window)
     * }
     */
    public static MemorySegment igUpdateWindowParentAndRootLinks$address() {
        return igUpdateWindowParentAndRootLinks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igUpdateWindowParentAndRootLinks(ImGuiWindow *window, ImGuiWindowFlags flags, ImGuiWindow *parent_window)
     * }
     */
    public static void igUpdateWindowParentAndRootLinks(MemorySegment window, int flags, MemorySegment parent_window) {
        var mh$ = igUpdateWindowParentAndRootLinks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igUpdateWindowParentAndRootLinks", window, flags, parent_window);
            }
            mh$.invokeExact(window, flags, parent_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igUpdateWindowSkipRefresh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igUpdateWindowSkipRefresh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igUpdateWindowSkipRefresh(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igUpdateWindowSkipRefresh$descriptor() {
        return igUpdateWindowSkipRefresh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igUpdateWindowSkipRefresh(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igUpdateWindowSkipRefresh$handle() {
        return igUpdateWindowSkipRefresh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igUpdateWindowSkipRefresh(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igUpdateWindowSkipRefresh$address() {
        return igUpdateWindowSkipRefresh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igUpdateWindowSkipRefresh(ImGuiWindow *window)
     * }
     */
    public static void igUpdateWindowSkipRefresh(MemorySegment window) {
        var mh$ = igUpdateWindowSkipRefresh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igUpdateWindowSkipRefresh", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCalcWindowNextAutoFitSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCalcWindowNextAutoFitSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igCalcWindowNextAutoFitSize(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igCalcWindowNextAutoFitSize$descriptor() {
        return igCalcWindowNextAutoFitSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igCalcWindowNextAutoFitSize(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static MethodHandle igCalcWindowNextAutoFitSize$handle() {
        return igCalcWindowNextAutoFitSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igCalcWindowNextAutoFitSize(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static MemorySegment igCalcWindowNextAutoFitSize$address() {
        return igCalcWindowNextAutoFitSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igCalcWindowNextAutoFitSize(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static void igCalcWindowNextAutoFitSize(MemorySegment pOut, MemorySegment window) {
        var mh$ = igCalcWindowNextAutoFitSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCalcWindowNextAutoFitSize", pOut, window);
            }
            mh$.invokeExact(pOut, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowChildOf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowChildOf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowChildOf(ImGuiWindow *window, ImGuiWindow *potential_parent, bool popup_hierarchy, bool dock_hierarchy)
     * }
     */
    public static FunctionDescriptor igIsWindowChildOf$descriptor() {
        return igIsWindowChildOf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowChildOf(ImGuiWindow *window, ImGuiWindow *potential_parent, bool popup_hierarchy, bool dock_hierarchy)
     * }
     */
    public static MethodHandle igIsWindowChildOf$handle() {
        return igIsWindowChildOf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowChildOf(ImGuiWindow *window, ImGuiWindow *potential_parent, bool popup_hierarchy, bool dock_hierarchy)
     * }
     */
    public static MemorySegment igIsWindowChildOf$address() {
        return igIsWindowChildOf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowChildOf(ImGuiWindow *window, ImGuiWindow *potential_parent, bool popup_hierarchy, bool dock_hierarchy)
     * }
     */
    public static boolean igIsWindowChildOf(MemorySegment window, MemorySegment potential_parent, boolean popup_hierarchy, boolean dock_hierarchy) {
        var mh$ = igIsWindowChildOf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowChildOf", window, potential_parent, popup_hierarchy, dock_hierarchy);
            }
            return (boolean)mh$.invokeExact(window, potential_parent, popup_hierarchy, dock_hierarchy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowWithinBeginStackOf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowWithinBeginStackOf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowWithinBeginStackOf(ImGuiWindow *window, ImGuiWindow *potential_parent)
     * }
     */
    public static FunctionDescriptor igIsWindowWithinBeginStackOf$descriptor() {
        return igIsWindowWithinBeginStackOf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowWithinBeginStackOf(ImGuiWindow *window, ImGuiWindow *potential_parent)
     * }
     */
    public static MethodHandle igIsWindowWithinBeginStackOf$handle() {
        return igIsWindowWithinBeginStackOf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowWithinBeginStackOf(ImGuiWindow *window, ImGuiWindow *potential_parent)
     * }
     */
    public static MemorySegment igIsWindowWithinBeginStackOf$address() {
        return igIsWindowWithinBeginStackOf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowWithinBeginStackOf(ImGuiWindow *window, ImGuiWindow *potential_parent)
     * }
     */
    public static boolean igIsWindowWithinBeginStackOf(MemorySegment window, MemorySegment potential_parent) {
        var mh$ = igIsWindowWithinBeginStackOf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowWithinBeginStackOf", window, potential_parent);
            }
            return (boolean)mh$.invokeExact(window, potential_parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowAbove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowAbove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowAbove(ImGuiWindow *potential_above, ImGuiWindow *potential_below)
     * }
     */
    public static FunctionDescriptor igIsWindowAbove$descriptor() {
        return igIsWindowAbove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowAbove(ImGuiWindow *potential_above, ImGuiWindow *potential_below)
     * }
     */
    public static MethodHandle igIsWindowAbove$handle() {
        return igIsWindowAbove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowAbove(ImGuiWindow *potential_above, ImGuiWindow *potential_below)
     * }
     */
    public static MemorySegment igIsWindowAbove$address() {
        return igIsWindowAbove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowAbove(ImGuiWindow *potential_above, ImGuiWindow *potential_below)
     * }
     */
    public static boolean igIsWindowAbove(MemorySegment potential_above, MemorySegment potential_below) {
        var mh$ = igIsWindowAbove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowAbove", potential_above, potential_below);
            }
            return (boolean)mh$.invokeExact(potential_above, potential_below);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowNavFocusable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowNavFocusable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowNavFocusable(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igIsWindowNavFocusable$descriptor() {
        return igIsWindowNavFocusable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowNavFocusable(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igIsWindowNavFocusable$handle() {
        return igIsWindowNavFocusable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowNavFocusable(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igIsWindowNavFocusable$address() {
        return igIsWindowNavFocusable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowNavFocusable(ImGuiWindow *window)
     * }
     */
    public static boolean igIsWindowNavFocusable(MemorySegment window) {
        var mh$ = igIsWindowNavFocusable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowNavFocusable", window);
            }
            return (boolean)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowPos_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowPos_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowPos_WindowPtr(ImGuiWindow *window, const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowPos_WindowPtr$descriptor() {
        return igSetWindowPos_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowPos_WindowPtr(ImGuiWindow *window, const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowPos_WindowPtr$handle() {
        return igSetWindowPos_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowPos_WindowPtr(ImGuiWindow *window, const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowPos_WindowPtr$address() {
        return igSetWindowPos_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowPos_WindowPtr(ImGuiWindow *window, const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static void igSetWindowPos_WindowPtr(MemorySegment window, MemorySegment pos, int cond) {
        var mh$ = igSetWindowPos_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowPos_WindowPtr", window, pos, cond);
            }
            mh$.invokeExact(window, pos, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowSize_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowSize_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowSize_WindowPtr(ImGuiWindow *window, const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowSize_WindowPtr$descriptor() {
        return igSetWindowSize_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowSize_WindowPtr(ImGuiWindow *window, const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowSize_WindowPtr$handle() {
        return igSetWindowSize_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowSize_WindowPtr(ImGuiWindow *window, const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowSize_WindowPtr$address() {
        return igSetWindowSize_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowSize_WindowPtr(ImGuiWindow *window, const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static void igSetWindowSize_WindowPtr(MemorySegment window, MemorySegment size, int cond) {
        var mh$ = igSetWindowSize_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowSize_WindowPtr", window, size, cond);
            }
            mh$.invokeExact(window, size, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowCollapsed_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowCollapsed_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_WindowPtr(ImGuiWindow *window, bool collapsed, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowCollapsed_WindowPtr$descriptor() {
        return igSetWindowCollapsed_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_WindowPtr(ImGuiWindow *window, bool collapsed, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowCollapsed_WindowPtr$handle() {
        return igSetWindowCollapsed_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_WindowPtr(ImGuiWindow *window, bool collapsed, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowCollapsed_WindowPtr$address() {
        return igSetWindowCollapsed_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_WindowPtr(ImGuiWindow *window, bool collapsed, ImGuiCond cond)
     * }
     */
    public static void igSetWindowCollapsed_WindowPtr(MemorySegment window, boolean collapsed, int cond) {
        var mh$ = igSetWindowCollapsed_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowCollapsed_WindowPtr", window, collapsed, cond);
            }
            mh$.invokeExact(window, collapsed, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowHitTestHole {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowHitTestHole");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowHitTestHole(ImGuiWindow *window, const ImVec2 pos, const ImVec2 size)
     * }
     */
    public static FunctionDescriptor igSetWindowHitTestHole$descriptor() {
        return igSetWindowHitTestHole.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowHitTestHole(ImGuiWindow *window, const ImVec2 pos, const ImVec2 size)
     * }
     */
    public static MethodHandle igSetWindowHitTestHole$handle() {
        return igSetWindowHitTestHole.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowHitTestHole(ImGuiWindow *window, const ImVec2 pos, const ImVec2 size)
     * }
     */
    public static MemorySegment igSetWindowHitTestHole$address() {
        return igSetWindowHitTestHole.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowHitTestHole(ImGuiWindow *window, const ImVec2 pos, const ImVec2 size)
     * }
     */
    public static void igSetWindowHitTestHole(MemorySegment window, MemorySegment pos, MemorySegment size) {
        var mh$ = igSetWindowHitTestHole.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowHitTestHole", window, pos, size);
            }
            mh$.invokeExact(window, pos, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowHiddenAndSkipItemsForCurrentFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowHiddenAndSkipItemsForCurrentFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igSetWindowHiddenAndSkipItemsForCurrentFrame$descriptor() {
        return igSetWindowHiddenAndSkipItemsForCurrentFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igSetWindowHiddenAndSkipItemsForCurrentFrame$handle() {
        return igSetWindowHiddenAndSkipItemsForCurrentFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igSetWindowHiddenAndSkipItemsForCurrentFrame$address() {
        return igSetWindowHiddenAndSkipItemsForCurrentFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindow *window)
     * }
     */
    public static void igSetWindowHiddenAndSkipItemsForCurrentFrame(MemorySegment window) {
        var mh$ = igSetWindowHiddenAndSkipItemsForCurrentFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowHiddenAndSkipItemsForCurrentFrame", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowParentWindowForFocusRoute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowParentWindowForFocusRoute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowParentWindowForFocusRoute(ImGuiWindow *window, ImGuiWindow *parent_window)
     * }
     */
    public static FunctionDescriptor igSetWindowParentWindowForFocusRoute$descriptor() {
        return igSetWindowParentWindowForFocusRoute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowParentWindowForFocusRoute(ImGuiWindow *window, ImGuiWindow *parent_window)
     * }
     */
    public static MethodHandle igSetWindowParentWindowForFocusRoute$handle() {
        return igSetWindowParentWindowForFocusRoute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowParentWindowForFocusRoute(ImGuiWindow *window, ImGuiWindow *parent_window)
     * }
     */
    public static MemorySegment igSetWindowParentWindowForFocusRoute$address() {
        return igSetWindowParentWindowForFocusRoute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowParentWindowForFocusRoute(ImGuiWindow *window, ImGuiWindow *parent_window)
     * }
     */
    public static void igSetWindowParentWindowForFocusRoute(MemorySegment window, MemorySegment parent_window) {
        var mh$ = igSetWindowParentWindowForFocusRoute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowParentWindowForFocusRoute", window, parent_window);
            }
            mh$.invokeExact(window, parent_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igWindowRectAbsToRel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igWindowRectAbsToRel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igWindowRectAbsToRel(ImRect *pOut, ImGuiWindow *window, const ImRect r)
     * }
     */
    public static FunctionDescriptor igWindowRectAbsToRel$descriptor() {
        return igWindowRectAbsToRel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igWindowRectAbsToRel(ImRect *pOut, ImGuiWindow *window, const ImRect r)
     * }
     */
    public static MethodHandle igWindowRectAbsToRel$handle() {
        return igWindowRectAbsToRel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igWindowRectAbsToRel(ImRect *pOut, ImGuiWindow *window, const ImRect r)
     * }
     */
    public static MemorySegment igWindowRectAbsToRel$address() {
        return igWindowRectAbsToRel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igWindowRectAbsToRel(ImRect *pOut, ImGuiWindow *window, const ImRect r)
     * }
     */
    public static void igWindowRectAbsToRel(MemorySegment pOut, MemorySegment window, MemorySegment r) {
        var mh$ = igWindowRectAbsToRel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igWindowRectAbsToRel", pOut, window, r);
            }
            mh$.invokeExact(pOut, window, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igWindowRectRelToAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igWindowRectRelToAbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igWindowRectRelToAbs(ImRect *pOut, ImGuiWindow *window, const ImRect r)
     * }
     */
    public static FunctionDescriptor igWindowRectRelToAbs$descriptor() {
        return igWindowRectRelToAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igWindowRectRelToAbs(ImRect *pOut, ImGuiWindow *window, const ImRect r)
     * }
     */
    public static MethodHandle igWindowRectRelToAbs$handle() {
        return igWindowRectRelToAbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igWindowRectRelToAbs(ImRect *pOut, ImGuiWindow *window, const ImRect r)
     * }
     */
    public static MemorySegment igWindowRectRelToAbs$address() {
        return igWindowRectRelToAbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igWindowRectRelToAbs(ImRect *pOut, ImGuiWindow *window, const ImRect r)
     * }
     */
    public static void igWindowRectRelToAbs(MemorySegment pOut, MemorySegment window, MemorySegment r) {
        var mh$ = igWindowRectRelToAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igWindowRectRelToAbs", pOut, window, r);
            }
            mh$.invokeExact(pOut, window, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igWindowPosRelToAbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igWindowPosRelToAbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igWindowPosRelToAbs(ImVec2 *pOut, ImGuiWindow *window, const ImVec2 p)
     * }
     */
    public static FunctionDescriptor igWindowPosRelToAbs$descriptor() {
        return igWindowPosRelToAbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igWindowPosRelToAbs(ImVec2 *pOut, ImGuiWindow *window, const ImVec2 p)
     * }
     */
    public static MethodHandle igWindowPosRelToAbs$handle() {
        return igWindowPosRelToAbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igWindowPosRelToAbs(ImVec2 *pOut, ImGuiWindow *window, const ImVec2 p)
     * }
     */
    public static MemorySegment igWindowPosRelToAbs$address() {
        return igWindowPosRelToAbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igWindowPosRelToAbs(ImVec2 *pOut, ImGuiWindow *window, const ImVec2 p)
     * }
     */
    public static void igWindowPosRelToAbs(MemorySegment pOut, MemorySegment window, MemorySegment p) {
        var mh$ = igWindowPosRelToAbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igWindowPosRelToAbs", pOut, window, p);
            }
            mh$.invokeExact(pOut, window, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igWindowPosAbsToRel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igWindowPosAbsToRel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igWindowPosAbsToRel(ImVec2 *pOut, ImGuiWindow *window, const ImVec2 p)
     * }
     */
    public static FunctionDescriptor igWindowPosAbsToRel$descriptor() {
        return igWindowPosAbsToRel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igWindowPosAbsToRel(ImVec2 *pOut, ImGuiWindow *window, const ImVec2 p)
     * }
     */
    public static MethodHandle igWindowPosAbsToRel$handle() {
        return igWindowPosAbsToRel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igWindowPosAbsToRel(ImVec2 *pOut, ImGuiWindow *window, const ImVec2 p)
     * }
     */
    public static MemorySegment igWindowPosAbsToRel$address() {
        return igWindowPosAbsToRel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igWindowPosAbsToRel(ImVec2 *pOut, ImGuiWindow *window, const ImVec2 p)
     * }
     */
    public static void igWindowPosAbsToRel(MemorySegment pOut, MemorySegment window, MemorySegment p) {
        var mh$ = igWindowPosAbsToRel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igWindowPosAbsToRel", pOut, window, p);
            }
            mh$.invokeExact(pOut, window, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFocusWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFocusWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igFocusWindow(ImGuiWindow *window, ImGuiFocusRequestFlags flags)
     * }
     */
    public static FunctionDescriptor igFocusWindow$descriptor() {
        return igFocusWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igFocusWindow(ImGuiWindow *window, ImGuiFocusRequestFlags flags)
     * }
     */
    public static MethodHandle igFocusWindow$handle() {
        return igFocusWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igFocusWindow(ImGuiWindow *window, ImGuiFocusRequestFlags flags)
     * }
     */
    public static MemorySegment igFocusWindow$address() {
        return igFocusWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igFocusWindow(ImGuiWindow *window, ImGuiFocusRequestFlags flags)
     * }
     */
    public static void igFocusWindow(MemorySegment window, int flags) {
        var mh$ = igFocusWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFocusWindow", window, flags);
            }
            mh$.invokeExact(window, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFocusTopMostWindowUnderOne {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFocusTopMostWindowUnderOne");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igFocusTopMostWindowUnderOne(ImGuiWindow *under_this_window, ImGuiWindow *ignore_window, ImGuiViewport *filter_viewport, ImGuiFocusRequestFlags flags)
     * }
     */
    public static FunctionDescriptor igFocusTopMostWindowUnderOne$descriptor() {
        return igFocusTopMostWindowUnderOne.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igFocusTopMostWindowUnderOne(ImGuiWindow *under_this_window, ImGuiWindow *ignore_window, ImGuiViewport *filter_viewport, ImGuiFocusRequestFlags flags)
     * }
     */
    public static MethodHandle igFocusTopMostWindowUnderOne$handle() {
        return igFocusTopMostWindowUnderOne.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igFocusTopMostWindowUnderOne(ImGuiWindow *under_this_window, ImGuiWindow *ignore_window, ImGuiViewport *filter_viewport, ImGuiFocusRequestFlags flags)
     * }
     */
    public static MemorySegment igFocusTopMostWindowUnderOne$address() {
        return igFocusTopMostWindowUnderOne.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igFocusTopMostWindowUnderOne(ImGuiWindow *under_this_window, ImGuiWindow *ignore_window, ImGuiViewport *filter_viewport, ImGuiFocusRequestFlags flags)
     * }
     */
    public static void igFocusTopMostWindowUnderOne(MemorySegment under_this_window, MemorySegment ignore_window, MemorySegment filter_viewport, int flags) {
        var mh$ = igFocusTopMostWindowUnderOne.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFocusTopMostWindowUnderOne", under_this_window, ignore_window, filter_viewport, flags);
            }
            mh$.invokeExact(under_this_window, ignore_window, filter_viewport, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBringWindowToFocusFront {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBringWindowToFocusFront");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBringWindowToFocusFront(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igBringWindowToFocusFront$descriptor() {
        return igBringWindowToFocusFront.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBringWindowToFocusFront(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igBringWindowToFocusFront$handle() {
        return igBringWindowToFocusFront.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBringWindowToFocusFront(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igBringWindowToFocusFront$address() {
        return igBringWindowToFocusFront.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBringWindowToFocusFront(ImGuiWindow *window)
     * }
     */
    public static void igBringWindowToFocusFront(MemorySegment window) {
        var mh$ = igBringWindowToFocusFront.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBringWindowToFocusFront", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBringWindowToDisplayFront {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBringWindowToDisplayFront");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayFront(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igBringWindowToDisplayFront$descriptor() {
        return igBringWindowToDisplayFront.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayFront(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igBringWindowToDisplayFront$handle() {
        return igBringWindowToDisplayFront.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayFront(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igBringWindowToDisplayFront$address() {
        return igBringWindowToDisplayFront.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayFront(ImGuiWindow *window)
     * }
     */
    public static void igBringWindowToDisplayFront(MemorySegment window) {
        var mh$ = igBringWindowToDisplayFront.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBringWindowToDisplayFront", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBringWindowToDisplayBack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBringWindowToDisplayBack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayBack(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igBringWindowToDisplayBack$descriptor() {
        return igBringWindowToDisplayBack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayBack(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igBringWindowToDisplayBack$handle() {
        return igBringWindowToDisplayBack.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayBack(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igBringWindowToDisplayBack$address() {
        return igBringWindowToDisplayBack.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayBack(ImGuiWindow *window)
     * }
     */
    public static void igBringWindowToDisplayBack(MemorySegment window) {
        var mh$ = igBringWindowToDisplayBack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBringWindowToDisplayBack", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBringWindowToDisplayBehind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBringWindowToDisplayBehind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayBehind(ImGuiWindow *window, ImGuiWindow *above_window)
     * }
     */
    public static FunctionDescriptor igBringWindowToDisplayBehind$descriptor() {
        return igBringWindowToDisplayBehind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayBehind(ImGuiWindow *window, ImGuiWindow *above_window)
     * }
     */
    public static MethodHandle igBringWindowToDisplayBehind$handle() {
        return igBringWindowToDisplayBehind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayBehind(ImGuiWindow *window, ImGuiWindow *above_window)
     * }
     */
    public static MemorySegment igBringWindowToDisplayBehind$address() {
        return igBringWindowToDisplayBehind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBringWindowToDisplayBehind(ImGuiWindow *window, ImGuiWindow *above_window)
     * }
     */
    public static void igBringWindowToDisplayBehind(MemorySegment window, MemorySegment above_window) {
        var mh$ = igBringWindowToDisplayBehind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBringWindowToDisplayBehind", window, above_window);
            }
            mh$.invokeExact(window, above_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindWindowDisplayIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindWindowDisplayIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igFindWindowDisplayIndex(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igFindWindowDisplayIndex$descriptor() {
        return igFindWindowDisplayIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igFindWindowDisplayIndex(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igFindWindowDisplayIndex$handle() {
        return igFindWindowDisplayIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igFindWindowDisplayIndex(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igFindWindowDisplayIndex$address() {
        return igFindWindowDisplayIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igFindWindowDisplayIndex(ImGuiWindow *window)
     * }
     */
    public static int igFindWindowDisplayIndex(MemorySegment window) {
        var mh$ = igFindWindowDisplayIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindWindowDisplayIndex", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindBottomMostVisibleWindowWithinBeginStack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindBottomMostVisibleWindowWithinBeginStack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igFindBottomMostVisibleWindowWithinBeginStack$descriptor() {
        return igFindBottomMostVisibleWindowWithinBeginStack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igFindBottomMostVisibleWindowWithinBeginStack$handle() {
        return igFindBottomMostVisibleWindowWithinBeginStack.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igFindBottomMostVisibleWindowWithinBeginStack$address() {
        return igFindBottomMostVisibleWindowWithinBeginStack.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igFindBottomMostVisibleWindowWithinBeginStack(MemorySegment window) {
        var mh$ = igFindBottomMostVisibleWindowWithinBeginStack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindBottomMostVisibleWindowWithinBeginStack", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowRefreshPolicy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowRefreshPolicy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowRefreshPolicy(ImGuiWindowRefreshFlags flags)
     * }
     */
    public static FunctionDescriptor igSetNextWindowRefreshPolicy$descriptor() {
        return igSetNextWindowRefreshPolicy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowRefreshPolicy(ImGuiWindowRefreshFlags flags)
     * }
     */
    public static MethodHandle igSetNextWindowRefreshPolicy$handle() {
        return igSetNextWindowRefreshPolicy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowRefreshPolicy(ImGuiWindowRefreshFlags flags)
     * }
     */
    public static MemorySegment igSetNextWindowRefreshPolicy$address() {
        return igSetNextWindowRefreshPolicy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowRefreshPolicy(ImGuiWindowRefreshFlags flags)
     * }
     */
    public static void igSetNextWindowRefreshPolicy(int flags) {
        var mh$ = igSetNextWindowRefreshPolicy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowRefreshPolicy", flags);
            }
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetCurrentFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetCurrentFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetCurrentFont(ImFont *font)
     * }
     */
    public static FunctionDescriptor igSetCurrentFont$descriptor() {
        return igSetCurrentFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetCurrentFont(ImFont *font)
     * }
     */
    public static MethodHandle igSetCurrentFont$handle() {
        return igSetCurrentFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetCurrentFont(ImFont *font)
     * }
     */
    public static MemorySegment igSetCurrentFont$address() {
        return igSetCurrentFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetCurrentFont(ImFont *font)
     * }
     */
    public static void igSetCurrentFont(MemorySegment font) {
        var mh$ = igSetCurrentFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetCurrentFont", font);
            }
            mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetDefaultFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetDefaultFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFont *igGetDefaultFont()
     * }
     */
    public static FunctionDescriptor igGetDefaultFont$descriptor() {
        return igGetDefaultFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFont *igGetDefaultFont()
     * }
     */
    public static MethodHandle igGetDefaultFont$handle() {
        return igGetDefaultFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFont *igGetDefaultFont()
     * }
     */
    public static MemorySegment igGetDefaultFont$address() {
        return igGetDefaultFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFont *igGetDefaultFont()
     * }
     */
    public static MemorySegment igGetDefaultFont() {
        var mh$ = igGetDefaultFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetDefaultFont");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetForegroundDrawList_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetForegroundDrawList_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetForegroundDrawList_WindowPtr(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igGetForegroundDrawList_WindowPtr$descriptor() {
        return igGetForegroundDrawList_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetForegroundDrawList_WindowPtr(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igGetForegroundDrawList_WindowPtr$handle() {
        return igGetForegroundDrawList_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetForegroundDrawList_WindowPtr(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igGetForegroundDrawList_WindowPtr$address() {
        return igGetForegroundDrawList_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawList *igGetForegroundDrawList_WindowPtr(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igGetForegroundDrawList_WindowPtr(MemorySegment window) {
        var mh$ = igGetForegroundDrawList_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetForegroundDrawList_WindowPtr", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igAddDrawListToDrawDataEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igAddDrawListToDrawDataEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igAddDrawListToDrawDataEx(ImDrawData *draw_data, ImVector_ImDrawListPtr *out_list, ImDrawList *draw_list)
     * }
     */
    public static FunctionDescriptor igAddDrawListToDrawDataEx$descriptor() {
        return igAddDrawListToDrawDataEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igAddDrawListToDrawDataEx(ImDrawData *draw_data, ImVector_ImDrawListPtr *out_list, ImDrawList *draw_list)
     * }
     */
    public static MethodHandle igAddDrawListToDrawDataEx$handle() {
        return igAddDrawListToDrawDataEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igAddDrawListToDrawDataEx(ImDrawData *draw_data, ImVector_ImDrawListPtr *out_list, ImDrawList *draw_list)
     * }
     */
    public static MemorySegment igAddDrawListToDrawDataEx$address() {
        return igAddDrawListToDrawDataEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igAddDrawListToDrawDataEx(ImDrawData *draw_data, ImVector_ImDrawListPtr *out_list, ImDrawList *draw_list)
     * }
     */
    public static void igAddDrawListToDrawDataEx(MemorySegment draw_data, MemorySegment out_list, MemorySegment draw_list) {
        var mh$ = igAddDrawListToDrawDataEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igAddDrawListToDrawDataEx", draw_data, out_list, draw_list);
            }
            mh$.invokeExact(draw_data, out_list, draw_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igInitialize()
     * }
     */
    public static FunctionDescriptor igInitialize$descriptor() {
        return igInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igInitialize()
     * }
     */
    public static MethodHandle igInitialize$handle() {
        return igInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igInitialize()
     * }
     */
    public static MemorySegment igInitialize$address() {
        return igInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igInitialize()
     * }
     */
    public static void igInitialize() {
        var mh$ = igInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInitialize");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShutdown()
     * }
     */
    public static FunctionDescriptor igShutdown$descriptor() {
        return igShutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShutdown()
     * }
     */
    public static MethodHandle igShutdown$handle() {
        return igShutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShutdown()
     * }
     */
    public static MemorySegment igShutdown$address() {
        return igShutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShutdown()
     * }
     */
    public static void igShutdown() {
        var mh$ = igShutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShutdown");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igUpdateInputEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igUpdateInputEvents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igUpdateInputEvents(bool trickle_fast_inputs)
     * }
     */
    public static FunctionDescriptor igUpdateInputEvents$descriptor() {
        return igUpdateInputEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igUpdateInputEvents(bool trickle_fast_inputs)
     * }
     */
    public static MethodHandle igUpdateInputEvents$handle() {
        return igUpdateInputEvents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igUpdateInputEvents(bool trickle_fast_inputs)
     * }
     */
    public static MemorySegment igUpdateInputEvents$address() {
        return igUpdateInputEvents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igUpdateInputEvents(bool trickle_fast_inputs)
     * }
     */
    public static void igUpdateInputEvents(boolean trickle_fast_inputs) {
        var mh$ = igUpdateInputEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igUpdateInputEvents", trickle_fast_inputs);
            }
            mh$.invokeExact(trickle_fast_inputs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igUpdateHoveredWindowAndCaptureFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igUpdateHoveredWindowAndCaptureFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igUpdateHoveredWindowAndCaptureFlags()
     * }
     */
    public static FunctionDescriptor igUpdateHoveredWindowAndCaptureFlags$descriptor() {
        return igUpdateHoveredWindowAndCaptureFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igUpdateHoveredWindowAndCaptureFlags()
     * }
     */
    public static MethodHandle igUpdateHoveredWindowAndCaptureFlags$handle() {
        return igUpdateHoveredWindowAndCaptureFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igUpdateHoveredWindowAndCaptureFlags()
     * }
     */
    public static MemorySegment igUpdateHoveredWindowAndCaptureFlags$address() {
        return igUpdateHoveredWindowAndCaptureFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igUpdateHoveredWindowAndCaptureFlags()
     * }
     */
    public static void igUpdateHoveredWindowAndCaptureFlags() {
        var mh$ = igUpdateHoveredWindowAndCaptureFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igUpdateHoveredWindowAndCaptureFlags");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindHoveredWindowEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindHoveredWindowEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igFindHoveredWindowEx(const ImVec2 pos, bool find_first_and_in_any_viewport, ImGuiWindow **out_hovered_window, ImGuiWindow **out_hovered_window_under_moving_window)
     * }
     */
    public static FunctionDescriptor igFindHoveredWindowEx$descriptor() {
        return igFindHoveredWindowEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igFindHoveredWindowEx(const ImVec2 pos, bool find_first_and_in_any_viewport, ImGuiWindow **out_hovered_window, ImGuiWindow **out_hovered_window_under_moving_window)
     * }
     */
    public static MethodHandle igFindHoveredWindowEx$handle() {
        return igFindHoveredWindowEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igFindHoveredWindowEx(const ImVec2 pos, bool find_first_and_in_any_viewport, ImGuiWindow **out_hovered_window, ImGuiWindow **out_hovered_window_under_moving_window)
     * }
     */
    public static MemorySegment igFindHoveredWindowEx$address() {
        return igFindHoveredWindowEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igFindHoveredWindowEx(const ImVec2 pos, bool find_first_and_in_any_viewport, ImGuiWindow **out_hovered_window, ImGuiWindow **out_hovered_window_under_moving_window)
     * }
     */
    public static void igFindHoveredWindowEx(MemorySegment pos, boolean find_first_and_in_any_viewport, MemorySegment out_hovered_window, MemorySegment out_hovered_window_under_moving_window) {
        var mh$ = igFindHoveredWindowEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindHoveredWindowEx", pos, find_first_and_in_any_viewport, out_hovered_window, out_hovered_window_under_moving_window);
            }
            mh$.invokeExact(pos, find_first_and_in_any_viewport, out_hovered_window, out_hovered_window_under_moving_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igStartMouseMovingWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igStartMouseMovingWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igStartMouseMovingWindow(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igStartMouseMovingWindow$descriptor() {
        return igStartMouseMovingWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igStartMouseMovingWindow(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igStartMouseMovingWindow$handle() {
        return igStartMouseMovingWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igStartMouseMovingWindow(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igStartMouseMovingWindow$address() {
        return igStartMouseMovingWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igStartMouseMovingWindow(ImGuiWindow *window)
     * }
     */
    public static void igStartMouseMovingWindow(MemorySegment window) {
        var mh$ = igStartMouseMovingWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igStartMouseMovingWindow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igStartMouseMovingWindowOrNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igStartMouseMovingWindowOrNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igStartMouseMovingWindowOrNode(ImGuiWindow *window, ImGuiDockNode *node, bool undock)
     * }
     */
    public static FunctionDescriptor igStartMouseMovingWindowOrNode$descriptor() {
        return igStartMouseMovingWindowOrNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igStartMouseMovingWindowOrNode(ImGuiWindow *window, ImGuiDockNode *node, bool undock)
     * }
     */
    public static MethodHandle igStartMouseMovingWindowOrNode$handle() {
        return igStartMouseMovingWindowOrNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igStartMouseMovingWindowOrNode(ImGuiWindow *window, ImGuiDockNode *node, bool undock)
     * }
     */
    public static MemorySegment igStartMouseMovingWindowOrNode$address() {
        return igStartMouseMovingWindowOrNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igStartMouseMovingWindowOrNode(ImGuiWindow *window, ImGuiDockNode *node, bool undock)
     * }
     */
    public static void igStartMouseMovingWindowOrNode(MemorySegment window, MemorySegment node, boolean undock) {
        var mh$ = igStartMouseMovingWindowOrNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igStartMouseMovingWindowOrNode", window, node, undock);
            }
            mh$.invokeExact(window, node, undock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igUpdateMouseMovingWindowNewFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igUpdateMouseMovingWindowNewFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igUpdateMouseMovingWindowNewFrame()
     * }
     */
    public static FunctionDescriptor igUpdateMouseMovingWindowNewFrame$descriptor() {
        return igUpdateMouseMovingWindowNewFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igUpdateMouseMovingWindowNewFrame()
     * }
     */
    public static MethodHandle igUpdateMouseMovingWindowNewFrame$handle() {
        return igUpdateMouseMovingWindowNewFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igUpdateMouseMovingWindowNewFrame()
     * }
     */
    public static MemorySegment igUpdateMouseMovingWindowNewFrame$address() {
        return igUpdateMouseMovingWindowNewFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igUpdateMouseMovingWindowNewFrame()
     * }
     */
    public static void igUpdateMouseMovingWindowNewFrame() {
        var mh$ = igUpdateMouseMovingWindowNewFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igUpdateMouseMovingWindowNewFrame");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igUpdateMouseMovingWindowEndFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igUpdateMouseMovingWindowEndFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igUpdateMouseMovingWindowEndFrame()
     * }
     */
    public static FunctionDescriptor igUpdateMouseMovingWindowEndFrame$descriptor() {
        return igUpdateMouseMovingWindowEndFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igUpdateMouseMovingWindowEndFrame()
     * }
     */
    public static MethodHandle igUpdateMouseMovingWindowEndFrame$handle() {
        return igUpdateMouseMovingWindowEndFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igUpdateMouseMovingWindowEndFrame()
     * }
     */
    public static MemorySegment igUpdateMouseMovingWindowEndFrame$address() {
        return igUpdateMouseMovingWindowEndFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igUpdateMouseMovingWindowEndFrame()
     * }
     */
    public static void igUpdateMouseMovingWindowEndFrame() {
        var mh$ = igUpdateMouseMovingWindowEndFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igUpdateMouseMovingWindowEndFrame");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igAddContextHook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igAddContextHook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igAddContextHook(ImGuiContext *context, const ImGuiContextHook *hook)
     * }
     */
    public static FunctionDescriptor igAddContextHook$descriptor() {
        return igAddContextHook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igAddContextHook(ImGuiContext *context, const ImGuiContextHook *hook)
     * }
     */
    public static MethodHandle igAddContextHook$handle() {
        return igAddContextHook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igAddContextHook(ImGuiContext *context, const ImGuiContextHook *hook)
     * }
     */
    public static MemorySegment igAddContextHook$address() {
        return igAddContextHook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igAddContextHook(ImGuiContext *context, const ImGuiContextHook *hook)
     * }
     */
    public static int igAddContextHook(MemorySegment context, MemorySegment hook) {
        var mh$ = igAddContextHook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igAddContextHook", context, hook);
            }
            return (int)mh$.invokeExact(context, hook);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRemoveContextHook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRemoveContextHook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRemoveContextHook(ImGuiContext *context, ImGuiID hook_to_remove)
     * }
     */
    public static FunctionDescriptor igRemoveContextHook$descriptor() {
        return igRemoveContextHook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRemoveContextHook(ImGuiContext *context, ImGuiID hook_to_remove)
     * }
     */
    public static MethodHandle igRemoveContextHook$handle() {
        return igRemoveContextHook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRemoveContextHook(ImGuiContext *context, ImGuiID hook_to_remove)
     * }
     */
    public static MemorySegment igRemoveContextHook$address() {
        return igRemoveContextHook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRemoveContextHook(ImGuiContext *context, ImGuiID hook_to_remove)
     * }
     */
    public static void igRemoveContextHook(MemorySegment context, int hook_to_remove) {
        var mh$ = igRemoveContextHook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRemoveContextHook", context, hook_to_remove);
            }
            mh$.invokeExact(context, hook_to_remove);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCallContextHooks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCallContextHooks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igCallContextHooks(ImGuiContext *context, ImGuiContextHookType type)
     * }
     */
    public static FunctionDescriptor igCallContextHooks$descriptor() {
        return igCallContextHooks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igCallContextHooks(ImGuiContext *context, ImGuiContextHookType type)
     * }
     */
    public static MethodHandle igCallContextHooks$handle() {
        return igCallContextHooks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igCallContextHooks(ImGuiContext *context, ImGuiContextHookType type)
     * }
     */
    public static MemorySegment igCallContextHooks$address() {
        return igCallContextHooks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igCallContextHooks(ImGuiContext *context, ImGuiContextHookType type)
     * }
     */
    public static void igCallContextHooks(MemorySegment context, int type) {
        var mh$ = igCallContextHooks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCallContextHooks", context, type);
            }
            mh$.invokeExact(context, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTranslateWindowsInViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTranslateWindowsInViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTranslateWindowsInViewport(ImGuiViewportP *viewport, const ImVec2 old_pos, const ImVec2 new_pos)
     * }
     */
    public static FunctionDescriptor igTranslateWindowsInViewport$descriptor() {
        return igTranslateWindowsInViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTranslateWindowsInViewport(ImGuiViewportP *viewport, const ImVec2 old_pos, const ImVec2 new_pos)
     * }
     */
    public static MethodHandle igTranslateWindowsInViewport$handle() {
        return igTranslateWindowsInViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTranslateWindowsInViewport(ImGuiViewportP *viewport, const ImVec2 old_pos, const ImVec2 new_pos)
     * }
     */
    public static MemorySegment igTranslateWindowsInViewport$address() {
        return igTranslateWindowsInViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTranslateWindowsInViewport(ImGuiViewportP *viewport, const ImVec2 old_pos, const ImVec2 new_pos)
     * }
     */
    public static void igTranslateWindowsInViewport(MemorySegment viewport, MemorySegment old_pos, MemorySegment new_pos) {
        var mh$ = igTranslateWindowsInViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTranslateWindowsInViewport", viewport, old_pos, new_pos);
            }
            mh$.invokeExact(viewport, old_pos, new_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igScaleWindowsInViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igScaleWindowsInViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igScaleWindowsInViewport(ImGuiViewportP *viewport, float scale)
     * }
     */
    public static FunctionDescriptor igScaleWindowsInViewport$descriptor() {
        return igScaleWindowsInViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igScaleWindowsInViewport(ImGuiViewportP *viewport, float scale)
     * }
     */
    public static MethodHandle igScaleWindowsInViewport$handle() {
        return igScaleWindowsInViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igScaleWindowsInViewport(ImGuiViewportP *viewport, float scale)
     * }
     */
    public static MemorySegment igScaleWindowsInViewport$address() {
        return igScaleWindowsInViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igScaleWindowsInViewport(ImGuiViewportP *viewport, float scale)
     * }
     */
    public static void igScaleWindowsInViewport(MemorySegment viewport, float scale) {
        var mh$ = igScaleWindowsInViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igScaleWindowsInViewport", viewport, scale);
            }
            mh$.invokeExact(viewport, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDestroyPlatformWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDestroyPlatformWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDestroyPlatformWindow(ImGuiViewportP *viewport)
     * }
     */
    public static FunctionDescriptor igDestroyPlatformWindow$descriptor() {
        return igDestroyPlatformWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDestroyPlatformWindow(ImGuiViewportP *viewport)
     * }
     */
    public static MethodHandle igDestroyPlatformWindow$handle() {
        return igDestroyPlatformWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDestroyPlatformWindow(ImGuiViewportP *viewport)
     * }
     */
    public static MemorySegment igDestroyPlatformWindow$address() {
        return igDestroyPlatformWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDestroyPlatformWindow(ImGuiViewportP *viewport)
     * }
     */
    public static void igDestroyPlatformWindow(MemorySegment viewport) {
        var mh$ = igDestroyPlatformWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDestroyPlatformWindow", viewport);
            }
            mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowViewport(ImGuiWindow *window, ImGuiViewportP *viewport)
     * }
     */
    public static FunctionDescriptor igSetWindowViewport$descriptor() {
        return igSetWindowViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowViewport(ImGuiWindow *window, ImGuiViewportP *viewport)
     * }
     */
    public static MethodHandle igSetWindowViewport$handle() {
        return igSetWindowViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowViewport(ImGuiWindow *window, ImGuiViewportP *viewport)
     * }
     */
    public static MemorySegment igSetWindowViewport$address() {
        return igSetWindowViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowViewport(ImGuiWindow *window, ImGuiViewportP *viewport)
     * }
     */
    public static void igSetWindowViewport(MemorySegment window, MemorySegment viewport) {
        var mh$ = igSetWindowViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowViewport", window, viewport);
            }
            mh$.invokeExact(window, viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetCurrentViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetCurrentViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetCurrentViewport(ImGuiWindow *window, ImGuiViewportP *viewport)
     * }
     */
    public static FunctionDescriptor igSetCurrentViewport$descriptor() {
        return igSetCurrentViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetCurrentViewport(ImGuiWindow *window, ImGuiViewportP *viewport)
     * }
     */
    public static MethodHandle igSetCurrentViewport$handle() {
        return igSetCurrentViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetCurrentViewport(ImGuiWindow *window, ImGuiViewportP *viewport)
     * }
     */
    public static MemorySegment igSetCurrentViewport$address() {
        return igSetCurrentViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetCurrentViewport(ImGuiWindow *window, ImGuiViewportP *viewport)
     * }
     */
    public static void igSetCurrentViewport(MemorySegment window, MemorySegment viewport) {
        var mh$ = igSetCurrentViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetCurrentViewport", window, viewport);
            }
            mh$.invokeExact(window, viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetViewportPlatformMonitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetViewportPlatformMonitor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImGuiPlatformMonitor *igGetViewportPlatformMonitor(ImGuiViewport *viewport)
     * }
     */
    public static FunctionDescriptor igGetViewportPlatformMonitor$descriptor() {
        return igGetViewportPlatformMonitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImGuiPlatformMonitor *igGetViewportPlatformMonitor(ImGuiViewport *viewport)
     * }
     */
    public static MethodHandle igGetViewportPlatformMonitor$handle() {
        return igGetViewportPlatformMonitor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImGuiPlatformMonitor *igGetViewportPlatformMonitor(ImGuiViewport *viewport)
     * }
     */
    public static MemorySegment igGetViewportPlatformMonitor$address() {
        return igGetViewportPlatformMonitor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImGuiPlatformMonitor *igGetViewportPlatformMonitor(ImGuiViewport *viewport)
     * }
     */
    public static MemorySegment igGetViewportPlatformMonitor(MemorySegment viewport) {
        var mh$ = igGetViewportPlatformMonitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetViewportPlatformMonitor", viewport);
            }
            return (MemorySegment)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindHoveredViewportFromPlatformWindowStack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindHoveredViewportFromPlatformWindowStack");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiViewportP *igFindHoveredViewportFromPlatformWindowStack(const ImVec2 mouse_platform_pos)
     * }
     */
    public static FunctionDescriptor igFindHoveredViewportFromPlatformWindowStack$descriptor() {
        return igFindHoveredViewportFromPlatformWindowStack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiViewportP *igFindHoveredViewportFromPlatformWindowStack(const ImVec2 mouse_platform_pos)
     * }
     */
    public static MethodHandle igFindHoveredViewportFromPlatformWindowStack$handle() {
        return igFindHoveredViewportFromPlatformWindowStack.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiViewportP *igFindHoveredViewportFromPlatformWindowStack(const ImVec2 mouse_platform_pos)
     * }
     */
    public static MemorySegment igFindHoveredViewportFromPlatformWindowStack$address() {
        return igFindHoveredViewportFromPlatformWindowStack.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiViewportP *igFindHoveredViewportFromPlatformWindowStack(const ImVec2 mouse_platform_pos)
     * }
     */
    public static MemorySegment igFindHoveredViewportFromPlatformWindowStack(MemorySegment mouse_platform_pos) {
        var mh$ = igFindHoveredViewportFromPlatformWindowStack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindHoveredViewportFromPlatformWindowStack", mouse_platform_pos);
            }
            return (MemorySegment)mh$.invokeExact(mouse_platform_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMarkIniSettingsDirty_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMarkIniSettingsDirty_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igMarkIniSettingsDirty_Nil()
     * }
     */
    public static FunctionDescriptor igMarkIniSettingsDirty_Nil$descriptor() {
        return igMarkIniSettingsDirty_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igMarkIniSettingsDirty_Nil()
     * }
     */
    public static MethodHandle igMarkIniSettingsDirty_Nil$handle() {
        return igMarkIniSettingsDirty_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igMarkIniSettingsDirty_Nil()
     * }
     */
    public static MemorySegment igMarkIniSettingsDirty_Nil$address() {
        return igMarkIniSettingsDirty_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igMarkIniSettingsDirty_Nil()
     * }
     */
    public static void igMarkIniSettingsDirty_Nil() {
        var mh$ = igMarkIniSettingsDirty_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMarkIniSettingsDirty_Nil");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMarkIniSettingsDirty_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMarkIniSettingsDirty_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igMarkIniSettingsDirty_WindowPtr(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igMarkIniSettingsDirty_WindowPtr$descriptor() {
        return igMarkIniSettingsDirty_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igMarkIniSettingsDirty_WindowPtr(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igMarkIniSettingsDirty_WindowPtr$handle() {
        return igMarkIniSettingsDirty_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igMarkIniSettingsDirty_WindowPtr(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igMarkIniSettingsDirty_WindowPtr$address() {
        return igMarkIniSettingsDirty_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igMarkIniSettingsDirty_WindowPtr(ImGuiWindow *window)
     * }
     */
    public static void igMarkIniSettingsDirty_WindowPtr(MemorySegment window) {
        var mh$ = igMarkIniSettingsDirty_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMarkIniSettingsDirty_WindowPtr", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igClearIniSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igClearIniSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igClearIniSettings()
     * }
     */
    public static FunctionDescriptor igClearIniSettings$descriptor() {
        return igClearIniSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igClearIniSettings()
     * }
     */
    public static MethodHandle igClearIniSettings$handle() {
        return igClearIniSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igClearIniSettings()
     * }
     */
    public static MemorySegment igClearIniSettings$address() {
        return igClearIniSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igClearIniSettings()
     * }
     */
    public static void igClearIniSettings() {
        var mh$ = igClearIniSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igClearIniSettings");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igAddSettingsHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igAddSettingsHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igAddSettingsHandler(const ImGuiSettingsHandler *handler)
     * }
     */
    public static FunctionDescriptor igAddSettingsHandler$descriptor() {
        return igAddSettingsHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igAddSettingsHandler(const ImGuiSettingsHandler *handler)
     * }
     */
    public static MethodHandle igAddSettingsHandler$handle() {
        return igAddSettingsHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igAddSettingsHandler(const ImGuiSettingsHandler *handler)
     * }
     */
    public static MemorySegment igAddSettingsHandler$address() {
        return igAddSettingsHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igAddSettingsHandler(const ImGuiSettingsHandler *handler)
     * }
     */
    public static void igAddSettingsHandler(MemorySegment handler) {
        var mh$ = igAddSettingsHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igAddSettingsHandler", handler);
            }
            mh$.invokeExact(handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRemoveSettingsHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRemoveSettingsHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRemoveSettingsHandler(const char *type_name)
     * }
     */
    public static FunctionDescriptor igRemoveSettingsHandler$descriptor() {
        return igRemoveSettingsHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRemoveSettingsHandler(const char *type_name)
     * }
     */
    public static MethodHandle igRemoveSettingsHandler$handle() {
        return igRemoveSettingsHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRemoveSettingsHandler(const char *type_name)
     * }
     */
    public static MemorySegment igRemoveSettingsHandler$address() {
        return igRemoveSettingsHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRemoveSettingsHandler(const char *type_name)
     * }
     */
    public static void igRemoveSettingsHandler(MemorySegment type_name) {
        var mh$ = igRemoveSettingsHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRemoveSettingsHandler", type_name);
            }
            mh$.invokeExact(type_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindSettingsHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindSettingsHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiSettingsHandler *igFindSettingsHandler(const char *type_name)
     * }
     */
    public static FunctionDescriptor igFindSettingsHandler$descriptor() {
        return igFindSettingsHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiSettingsHandler *igFindSettingsHandler(const char *type_name)
     * }
     */
    public static MethodHandle igFindSettingsHandler$handle() {
        return igFindSettingsHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiSettingsHandler *igFindSettingsHandler(const char *type_name)
     * }
     */
    public static MemorySegment igFindSettingsHandler$address() {
        return igFindSettingsHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiSettingsHandler *igFindSettingsHandler(const char *type_name)
     * }
     */
    public static MemorySegment igFindSettingsHandler(MemorySegment type_name) {
        var mh$ = igFindSettingsHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindSettingsHandler", type_name);
            }
            return (MemorySegment)mh$.invokeExact(type_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCreateNewWindowSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCreateNewWindowSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igCreateNewWindowSettings(const char *name)
     * }
     */
    public static FunctionDescriptor igCreateNewWindowSettings$descriptor() {
        return igCreateNewWindowSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igCreateNewWindowSettings(const char *name)
     * }
     */
    public static MethodHandle igCreateNewWindowSettings$handle() {
        return igCreateNewWindowSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igCreateNewWindowSettings(const char *name)
     * }
     */
    public static MemorySegment igCreateNewWindowSettings$address() {
        return igCreateNewWindowSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igCreateNewWindowSettings(const char *name)
     * }
     */
    public static MemorySegment igCreateNewWindowSettings(MemorySegment name) {
        var mh$ = igCreateNewWindowSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCreateNewWindowSettings", name);
            }
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindWindowSettingsByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindWindowSettingsByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igFindWindowSettingsByID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igFindWindowSettingsByID$descriptor() {
        return igFindWindowSettingsByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igFindWindowSettingsByID(ImGuiID id)
     * }
     */
    public static MethodHandle igFindWindowSettingsByID$handle() {
        return igFindWindowSettingsByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igFindWindowSettingsByID(ImGuiID id)
     * }
     */
    public static MemorySegment igFindWindowSettingsByID$address() {
        return igFindWindowSettingsByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igFindWindowSettingsByID(ImGuiID id)
     * }
     */
    public static MemorySegment igFindWindowSettingsByID(int id) {
        var mh$ = igFindWindowSettingsByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindWindowSettingsByID", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindWindowSettingsByWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindWindowSettingsByWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igFindWindowSettingsByWindow(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igFindWindowSettingsByWindow$descriptor() {
        return igFindWindowSettingsByWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igFindWindowSettingsByWindow(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igFindWindowSettingsByWindow$handle() {
        return igFindWindowSettingsByWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igFindWindowSettingsByWindow(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igFindWindowSettingsByWindow$address() {
        return igFindWindowSettingsByWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *igFindWindowSettingsByWindow(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igFindWindowSettingsByWindow(MemorySegment window) {
        var mh$ = igFindWindowSettingsByWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindWindowSettingsByWindow", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igClearWindowSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igClearWindowSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igClearWindowSettings(const char *name)
     * }
     */
    public static FunctionDescriptor igClearWindowSettings$descriptor() {
        return igClearWindowSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igClearWindowSettings(const char *name)
     * }
     */
    public static MethodHandle igClearWindowSettings$handle() {
        return igClearWindowSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igClearWindowSettings(const char *name)
     * }
     */
    public static MemorySegment igClearWindowSettings$address() {
        return igClearWindowSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igClearWindowSettings(const char *name)
     * }
     */
    public static void igClearWindowSettings(MemorySegment name) {
        var mh$ = igClearWindowSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igClearWindowSettings", name);
            }
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLocalizeRegisterEntries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLocalizeRegisterEntries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLocalizeRegisterEntries(const ImGuiLocEntry *entries, int count)
     * }
     */
    public static FunctionDescriptor igLocalizeRegisterEntries$descriptor() {
        return igLocalizeRegisterEntries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLocalizeRegisterEntries(const ImGuiLocEntry *entries, int count)
     * }
     */
    public static MethodHandle igLocalizeRegisterEntries$handle() {
        return igLocalizeRegisterEntries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLocalizeRegisterEntries(const ImGuiLocEntry *entries, int count)
     * }
     */
    public static MemorySegment igLocalizeRegisterEntries$address() {
        return igLocalizeRegisterEntries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLocalizeRegisterEntries(const ImGuiLocEntry *entries, int count)
     * }
     */
    public static void igLocalizeRegisterEntries(MemorySegment entries, int count) {
        var mh$ = igLocalizeRegisterEntries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLocalizeRegisterEntries", entries, count);
            }
            mh$.invokeExact(entries, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLocalizeGetMsg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLocalizeGetMsg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igLocalizeGetMsg(ImGuiLocKey key)
     * }
     */
    public static FunctionDescriptor igLocalizeGetMsg$descriptor() {
        return igLocalizeGetMsg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igLocalizeGetMsg(ImGuiLocKey key)
     * }
     */
    public static MethodHandle igLocalizeGetMsg$handle() {
        return igLocalizeGetMsg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igLocalizeGetMsg(ImGuiLocKey key)
     * }
     */
    public static MemorySegment igLocalizeGetMsg$address() {
        return igLocalizeGetMsg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igLocalizeGetMsg(ImGuiLocKey key)
     * }
     */
    public static MemorySegment igLocalizeGetMsg(int key) {
        var mh$ = igLocalizeGetMsg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLocalizeGetMsg", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollX_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollX_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollX_WindowPtr(ImGuiWindow *window, float scroll_x)
     * }
     */
    public static FunctionDescriptor igSetScrollX_WindowPtr$descriptor() {
        return igSetScrollX_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollX_WindowPtr(ImGuiWindow *window, float scroll_x)
     * }
     */
    public static MethodHandle igSetScrollX_WindowPtr$handle() {
        return igSetScrollX_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollX_WindowPtr(ImGuiWindow *window, float scroll_x)
     * }
     */
    public static MemorySegment igSetScrollX_WindowPtr$address() {
        return igSetScrollX_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollX_WindowPtr(ImGuiWindow *window, float scroll_x)
     * }
     */
    public static void igSetScrollX_WindowPtr(MemorySegment window, float scroll_x) {
        var mh$ = igSetScrollX_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollX_WindowPtr", window, scroll_x);
            }
            mh$.invokeExact(window, scroll_x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollY_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollY_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollY_WindowPtr(ImGuiWindow *window, float scroll_y)
     * }
     */
    public static FunctionDescriptor igSetScrollY_WindowPtr$descriptor() {
        return igSetScrollY_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollY_WindowPtr(ImGuiWindow *window, float scroll_y)
     * }
     */
    public static MethodHandle igSetScrollY_WindowPtr$handle() {
        return igSetScrollY_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollY_WindowPtr(ImGuiWindow *window, float scroll_y)
     * }
     */
    public static MemorySegment igSetScrollY_WindowPtr$address() {
        return igSetScrollY_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollY_WindowPtr(ImGuiWindow *window, float scroll_y)
     * }
     */
    public static void igSetScrollY_WindowPtr(MemorySegment window, float scroll_y) {
        var mh$ = igSetScrollY_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollY_WindowPtr", window, scroll_y);
            }
            mh$.invokeExact(window, scroll_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollFromPosX_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollFromPosX_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosX_WindowPtr(ImGuiWindow *window, float local_x, float center_x_ratio)
     * }
     */
    public static FunctionDescriptor igSetScrollFromPosX_WindowPtr$descriptor() {
        return igSetScrollFromPosX_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosX_WindowPtr(ImGuiWindow *window, float local_x, float center_x_ratio)
     * }
     */
    public static MethodHandle igSetScrollFromPosX_WindowPtr$handle() {
        return igSetScrollFromPosX_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosX_WindowPtr(ImGuiWindow *window, float local_x, float center_x_ratio)
     * }
     */
    public static MemorySegment igSetScrollFromPosX_WindowPtr$address() {
        return igSetScrollFromPosX_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollFromPosX_WindowPtr(ImGuiWindow *window, float local_x, float center_x_ratio)
     * }
     */
    public static void igSetScrollFromPosX_WindowPtr(MemorySegment window, float local_x, float center_x_ratio) {
        var mh$ = igSetScrollFromPosX_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollFromPosX_WindowPtr", window, local_x, center_x_ratio);
            }
            mh$.invokeExact(window, local_x, center_x_ratio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollFromPosY_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollFromPosY_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosY_WindowPtr(ImGuiWindow *window, float local_y, float center_y_ratio)
     * }
     */
    public static FunctionDescriptor igSetScrollFromPosY_WindowPtr$descriptor() {
        return igSetScrollFromPosY_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosY_WindowPtr(ImGuiWindow *window, float local_y, float center_y_ratio)
     * }
     */
    public static MethodHandle igSetScrollFromPosY_WindowPtr$handle() {
        return igSetScrollFromPosY_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosY_WindowPtr(ImGuiWindow *window, float local_y, float center_y_ratio)
     * }
     */
    public static MemorySegment igSetScrollFromPosY_WindowPtr$address() {
        return igSetScrollFromPosY_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollFromPosY_WindowPtr(ImGuiWindow *window, float local_y, float center_y_ratio)
     * }
     */
    public static void igSetScrollFromPosY_WindowPtr(MemorySegment window, float local_y, float center_y_ratio) {
        var mh$ = igSetScrollFromPosY_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollFromPosY_WindowPtr", window, local_y, center_y_ratio);
            }
            mh$.invokeExact(window, local_y, center_y_ratio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igScrollToItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igScrollToItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igScrollToItem(ImGuiScrollFlags flags)
     * }
     */
    public static FunctionDescriptor igScrollToItem$descriptor() {
        return igScrollToItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igScrollToItem(ImGuiScrollFlags flags)
     * }
     */
    public static MethodHandle igScrollToItem$handle() {
        return igScrollToItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igScrollToItem(ImGuiScrollFlags flags)
     * }
     */
    public static MemorySegment igScrollToItem$address() {
        return igScrollToItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igScrollToItem(ImGuiScrollFlags flags)
     * }
     */
    public static void igScrollToItem(int flags) {
        var mh$ = igScrollToItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igScrollToItem", flags);
            }
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igScrollToRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igScrollToRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igScrollToRect(ImGuiWindow *window, const ImRect rect, ImGuiScrollFlags flags)
     * }
     */
    public static FunctionDescriptor igScrollToRect$descriptor() {
        return igScrollToRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igScrollToRect(ImGuiWindow *window, const ImRect rect, ImGuiScrollFlags flags)
     * }
     */
    public static MethodHandle igScrollToRect$handle() {
        return igScrollToRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igScrollToRect(ImGuiWindow *window, const ImRect rect, ImGuiScrollFlags flags)
     * }
     */
    public static MemorySegment igScrollToRect$address() {
        return igScrollToRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igScrollToRect(ImGuiWindow *window, const ImRect rect, ImGuiScrollFlags flags)
     * }
     */
    public static void igScrollToRect(MemorySegment window, MemorySegment rect, int flags) {
        var mh$ = igScrollToRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igScrollToRect", window, rect, flags);
            }
            mh$.invokeExact(window, rect, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igScrollToRectEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImRect.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igScrollToRectEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igScrollToRectEx(ImVec2 *pOut, ImGuiWindow *window, const ImRect rect, ImGuiScrollFlags flags)
     * }
     */
    public static FunctionDescriptor igScrollToRectEx$descriptor() {
        return igScrollToRectEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igScrollToRectEx(ImVec2 *pOut, ImGuiWindow *window, const ImRect rect, ImGuiScrollFlags flags)
     * }
     */
    public static MethodHandle igScrollToRectEx$handle() {
        return igScrollToRectEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igScrollToRectEx(ImVec2 *pOut, ImGuiWindow *window, const ImRect rect, ImGuiScrollFlags flags)
     * }
     */
    public static MemorySegment igScrollToRectEx$address() {
        return igScrollToRectEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igScrollToRectEx(ImVec2 *pOut, ImGuiWindow *window, const ImRect rect, ImGuiScrollFlags flags)
     * }
     */
    public static void igScrollToRectEx(MemorySegment pOut, MemorySegment window, MemorySegment rect, int flags) {
        var mh$ = igScrollToRectEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igScrollToRectEx", pOut, window, rect, flags);
            }
            mh$.invokeExact(pOut, window, rect, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igScrollToBringRectIntoView {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igScrollToBringRectIntoView");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igScrollToBringRectIntoView(ImGuiWindow *window, const ImRect rect)
     * }
     */
    public static FunctionDescriptor igScrollToBringRectIntoView$descriptor() {
        return igScrollToBringRectIntoView.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igScrollToBringRectIntoView(ImGuiWindow *window, const ImRect rect)
     * }
     */
    public static MethodHandle igScrollToBringRectIntoView$handle() {
        return igScrollToBringRectIntoView.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igScrollToBringRectIntoView(ImGuiWindow *window, const ImRect rect)
     * }
     */
    public static MemorySegment igScrollToBringRectIntoView$address() {
        return igScrollToBringRectIntoView.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igScrollToBringRectIntoView(ImGuiWindow *window, const ImRect rect)
     * }
     */
    public static void igScrollToBringRectIntoView(MemorySegment window, MemorySegment rect) {
        var mh$ = igScrollToBringRectIntoView.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igScrollToBringRectIntoView", window, rect);
            }
            mh$.invokeExact(window, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetItemStatusFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetItemStatusFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiItemStatusFlags igGetItemStatusFlags()
     * }
     */
    public static FunctionDescriptor igGetItemStatusFlags$descriptor() {
        return igGetItemStatusFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiItemStatusFlags igGetItemStatusFlags()
     * }
     */
    public static MethodHandle igGetItemStatusFlags$handle() {
        return igGetItemStatusFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiItemStatusFlags igGetItemStatusFlags()
     * }
     */
    public static MemorySegment igGetItemStatusFlags$address() {
        return igGetItemStatusFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiItemStatusFlags igGetItemStatusFlags()
     * }
     */
    public static int igGetItemStatusFlags() {
        var mh$ = igGetItemStatusFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetItemStatusFlags");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetItemFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetItemFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiItemFlags igGetItemFlags()
     * }
     */
    public static FunctionDescriptor igGetItemFlags$descriptor() {
        return igGetItemFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiItemFlags igGetItemFlags()
     * }
     */
    public static MethodHandle igGetItemFlags$handle() {
        return igGetItemFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiItemFlags igGetItemFlags()
     * }
     */
    public static MemorySegment igGetItemFlags$address() {
        return igGetItemFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiItemFlags igGetItemFlags()
     * }
     */
    public static int igGetItemFlags() {
        var mh$ = igGetItemFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetItemFlags");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetActiveID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetActiveID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetActiveID()
     * }
     */
    public static FunctionDescriptor igGetActiveID$descriptor() {
        return igGetActiveID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetActiveID()
     * }
     */
    public static MethodHandle igGetActiveID$handle() {
        return igGetActiveID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetActiveID()
     * }
     */
    public static MemorySegment igGetActiveID$address() {
        return igGetActiveID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetActiveID()
     * }
     */
    public static int igGetActiveID() {
        var mh$ = igGetActiveID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetActiveID");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetFocusID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetFocusID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetFocusID()
     * }
     */
    public static FunctionDescriptor igGetFocusID$descriptor() {
        return igGetFocusID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetFocusID()
     * }
     */
    public static MethodHandle igGetFocusID$handle() {
        return igGetFocusID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetFocusID()
     * }
     */
    public static MemorySegment igGetFocusID$address() {
        return igGetFocusID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetFocusID()
     * }
     */
    public static int igGetFocusID() {
        var mh$ = igGetFocusID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetFocusID");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetActiveID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetActiveID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetActiveID(ImGuiID id, ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igSetActiveID$descriptor() {
        return igSetActiveID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetActiveID(ImGuiID id, ImGuiWindow *window)
     * }
     */
    public static MethodHandle igSetActiveID$handle() {
        return igSetActiveID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetActiveID(ImGuiID id, ImGuiWindow *window)
     * }
     */
    public static MemorySegment igSetActiveID$address() {
        return igSetActiveID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetActiveID(ImGuiID id, ImGuiWindow *window)
     * }
     */
    public static void igSetActiveID(int id, MemorySegment window) {
        var mh$ = igSetActiveID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetActiveID", id, window);
            }
            mh$.invokeExact(id, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetFocusID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetFocusID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetFocusID(ImGuiID id, ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igSetFocusID$descriptor() {
        return igSetFocusID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetFocusID(ImGuiID id, ImGuiWindow *window)
     * }
     */
    public static MethodHandle igSetFocusID$handle() {
        return igSetFocusID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetFocusID(ImGuiID id, ImGuiWindow *window)
     * }
     */
    public static MemorySegment igSetFocusID$address() {
        return igSetFocusID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetFocusID(ImGuiID id, ImGuiWindow *window)
     * }
     */
    public static void igSetFocusID(int id, MemorySegment window) {
        var mh$ = igSetFocusID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetFocusID", id, window);
            }
            mh$.invokeExact(id, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igClearActiveID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igClearActiveID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igClearActiveID()
     * }
     */
    public static FunctionDescriptor igClearActiveID$descriptor() {
        return igClearActiveID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igClearActiveID()
     * }
     */
    public static MethodHandle igClearActiveID$handle() {
        return igClearActiveID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igClearActiveID()
     * }
     */
    public static MemorySegment igClearActiveID$address() {
        return igClearActiveID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igClearActiveID()
     * }
     */
    public static void igClearActiveID() {
        var mh$ = igClearActiveID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igClearActiveID");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetHoveredID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetHoveredID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetHoveredID()
     * }
     */
    public static FunctionDescriptor igGetHoveredID$descriptor() {
        return igGetHoveredID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetHoveredID()
     * }
     */
    public static MethodHandle igGetHoveredID$handle() {
        return igGetHoveredID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetHoveredID()
     * }
     */
    public static MemorySegment igGetHoveredID$address() {
        return igGetHoveredID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetHoveredID()
     * }
     */
    public static int igGetHoveredID() {
        var mh$ = igGetHoveredID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetHoveredID");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetHoveredID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetHoveredID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetHoveredID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igSetHoveredID$descriptor() {
        return igSetHoveredID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetHoveredID(ImGuiID id)
     * }
     */
    public static MethodHandle igSetHoveredID$handle() {
        return igSetHoveredID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetHoveredID(ImGuiID id)
     * }
     */
    public static MemorySegment igSetHoveredID$address() {
        return igSetHoveredID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetHoveredID(ImGuiID id)
     * }
     */
    public static void igSetHoveredID(int id) {
        var mh$ = igSetHoveredID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetHoveredID", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igKeepAliveID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igKeepAliveID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igKeepAliveID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igKeepAliveID$descriptor() {
        return igKeepAliveID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igKeepAliveID(ImGuiID id)
     * }
     */
    public static MethodHandle igKeepAliveID$handle() {
        return igKeepAliveID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igKeepAliveID(ImGuiID id)
     * }
     */
    public static MemorySegment igKeepAliveID$address() {
        return igKeepAliveID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igKeepAliveID(ImGuiID id)
     * }
     */
    public static void igKeepAliveID(int id) {
        var mh$ = igKeepAliveID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igKeepAliveID", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMarkItemEdited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMarkItemEdited");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igMarkItemEdited(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igMarkItemEdited$descriptor() {
        return igMarkItemEdited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igMarkItemEdited(ImGuiID id)
     * }
     */
    public static MethodHandle igMarkItemEdited$handle() {
        return igMarkItemEdited.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igMarkItemEdited(ImGuiID id)
     * }
     */
    public static MemorySegment igMarkItemEdited$address() {
        return igMarkItemEdited.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igMarkItemEdited(ImGuiID id)
     * }
     */
    public static void igMarkItemEdited(int id) {
        var mh$ = igMarkItemEdited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMarkItemEdited", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushOverrideID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushOverrideID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushOverrideID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igPushOverrideID$descriptor() {
        return igPushOverrideID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushOverrideID(ImGuiID id)
     * }
     */
    public static MethodHandle igPushOverrideID$handle() {
        return igPushOverrideID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushOverrideID(ImGuiID id)
     * }
     */
    public static MemorySegment igPushOverrideID$address() {
        return igPushOverrideID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushOverrideID(ImGuiID id)
     * }
     */
    public static void igPushOverrideID(int id) {
        var mh$ = igPushOverrideID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushOverrideID", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetIDWithSeed_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetIDWithSeed_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetIDWithSeed_Str(const char *str_id_begin, const char *str_id_end, ImGuiID seed)
     * }
     */
    public static FunctionDescriptor igGetIDWithSeed_Str$descriptor() {
        return igGetIDWithSeed_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetIDWithSeed_Str(const char *str_id_begin, const char *str_id_end, ImGuiID seed)
     * }
     */
    public static MethodHandle igGetIDWithSeed_Str$handle() {
        return igGetIDWithSeed_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetIDWithSeed_Str(const char *str_id_begin, const char *str_id_end, ImGuiID seed)
     * }
     */
    public static MemorySegment igGetIDWithSeed_Str$address() {
        return igGetIDWithSeed_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetIDWithSeed_Str(const char *str_id_begin, const char *str_id_end, ImGuiID seed)
     * }
     */
    public static int igGetIDWithSeed_Str(MemorySegment str_id_begin, MemorySegment str_id_end, int seed) {
        var mh$ = igGetIDWithSeed_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetIDWithSeed_Str", str_id_begin, str_id_end, seed);
            }
            return (int)mh$.invokeExact(str_id_begin, str_id_end, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetIDWithSeed_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetIDWithSeed_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetIDWithSeed_Int(int n, ImGuiID seed)
     * }
     */
    public static FunctionDescriptor igGetIDWithSeed_Int$descriptor() {
        return igGetIDWithSeed_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetIDWithSeed_Int(int n, ImGuiID seed)
     * }
     */
    public static MethodHandle igGetIDWithSeed_Int$handle() {
        return igGetIDWithSeed_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetIDWithSeed_Int(int n, ImGuiID seed)
     * }
     */
    public static MemorySegment igGetIDWithSeed_Int$address() {
        return igGetIDWithSeed_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetIDWithSeed_Int(int n, ImGuiID seed)
     * }
     */
    public static int igGetIDWithSeed_Int(int n, int seed) {
        var mh$ = igGetIDWithSeed_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetIDWithSeed_Int", n, seed);
            }
            return (int)mh$.invokeExact(n, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igItemSize_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igItemSize_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igItemSize_Vec2(const ImVec2 size, float text_baseline_y)
     * }
     */
    public static FunctionDescriptor igItemSize_Vec2$descriptor() {
        return igItemSize_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igItemSize_Vec2(const ImVec2 size, float text_baseline_y)
     * }
     */
    public static MethodHandle igItemSize_Vec2$handle() {
        return igItemSize_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igItemSize_Vec2(const ImVec2 size, float text_baseline_y)
     * }
     */
    public static MemorySegment igItemSize_Vec2$address() {
        return igItemSize_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igItemSize_Vec2(const ImVec2 size, float text_baseline_y)
     * }
     */
    public static void igItemSize_Vec2(MemorySegment size, float text_baseline_y) {
        var mh$ = igItemSize_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igItemSize_Vec2", size, text_baseline_y);
            }
            mh$.invokeExact(size, text_baseline_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igItemSize_Rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImRect.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igItemSize_Rect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igItemSize_Rect(const ImRect bb, float text_baseline_y)
     * }
     */
    public static FunctionDescriptor igItemSize_Rect$descriptor() {
        return igItemSize_Rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igItemSize_Rect(const ImRect bb, float text_baseline_y)
     * }
     */
    public static MethodHandle igItemSize_Rect$handle() {
        return igItemSize_Rect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igItemSize_Rect(const ImRect bb, float text_baseline_y)
     * }
     */
    public static MemorySegment igItemSize_Rect$address() {
        return igItemSize_Rect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igItemSize_Rect(const ImRect bb, float text_baseline_y)
     * }
     */
    public static void igItemSize_Rect(MemorySegment bb, float text_baseline_y) {
        var mh$ = igItemSize_Rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igItemSize_Rect", bb, text_baseline_y);
            }
            mh$.invokeExact(bb, text_baseline_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igItemAdd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igItemAdd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igItemAdd(const ImRect bb, ImGuiID id, const ImRect *nav_bb, ImGuiItemFlags extra_flags)
     * }
     */
    public static FunctionDescriptor igItemAdd$descriptor() {
        return igItemAdd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igItemAdd(const ImRect bb, ImGuiID id, const ImRect *nav_bb, ImGuiItemFlags extra_flags)
     * }
     */
    public static MethodHandle igItemAdd$handle() {
        return igItemAdd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igItemAdd(const ImRect bb, ImGuiID id, const ImRect *nav_bb, ImGuiItemFlags extra_flags)
     * }
     */
    public static MemorySegment igItemAdd$address() {
        return igItemAdd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igItemAdd(const ImRect bb, ImGuiID id, const ImRect *nav_bb, ImGuiItemFlags extra_flags)
     * }
     */
    public static boolean igItemAdd(MemorySegment bb, int id, MemorySegment nav_bb, int extra_flags) {
        var mh$ = igItemAdd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igItemAdd", bb, id, nav_bb, extra_flags);
            }
            return (boolean)mh$.invokeExact(bb, id, nav_bb, extra_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igItemHoverable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igItemHoverable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igItemHoverable(const ImRect bb, ImGuiID id, ImGuiItemFlags item_flags)
     * }
     */
    public static FunctionDescriptor igItemHoverable$descriptor() {
        return igItemHoverable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igItemHoverable(const ImRect bb, ImGuiID id, ImGuiItemFlags item_flags)
     * }
     */
    public static MethodHandle igItemHoverable$handle() {
        return igItemHoverable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igItemHoverable(const ImRect bb, ImGuiID id, ImGuiItemFlags item_flags)
     * }
     */
    public static MemorySegment igItemHoverable$address() {
        return igItemHoverable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igItemHoverable(const ImRect bb, ImGuiID id, ImGuiItemFlags item_flags)
     * }
     */
    public static boolean igItemHoverable(MemorySegment bb, int id, int item_flags) {
        var mh$ = igItemHoverable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igItemHoverable", bb, id, item_flags);
            }
            return (boolean)mh$.invokeExact(bb, id, item_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowContentHoverable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowContentHoverable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowContentHoverable(ImGuiWindow *window, ImGuiHoveredFlags flags)
     * }
     */
    public static FunctionDescriptor igIsWindowContentHoverable$descriptor() {
        return igIsWindowContentHoverable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowContentHoverable(ImGuiWindow *window, ImGuiHoveredFlags flags)
     * }
     */
    public static MethodHandle igIsWindowContentHoverable$handle() {
        return igIsWindowContentHoverable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowContentHoverable(ImGuiWindow *window, ImGuiHoveredFlags flags)
     * }
     */
    public static MemorySegment igIsWindowContentHoverable$address() {
        return igIsWindowContentHoverable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowContentHoverable(ImGuiWindow *window, ImGuiHoveredFlags flags)
     * }
     */
    public static boolean igIsWindowContentHoverable(MemorySegment window, int flags) {
        var mh$ = igIsWindowContentHoverable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowContentHoverable", window, flags);
            }
            return (boolean)mh$.invokeExact(window, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsClippedEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsClippedEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsClippedEx(const ImRect bb, ImGuiID id)
     * }
     */
    public static FunctionDescriptor igIsClippedEx$descriptor() {
        return igIsClippedEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsClippedEx(const ImRect bb, ImGuiID id)
     * }
     */
    public static MethodHandle igIsClippedEx$handle() {
        return igIsClippedEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsClippedEx(const ImRect bb, ImGuiID id)
     * }
     */
    public static MemorySegment igIsClippedEx$address() {
        return igIsClippedEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsClippedEx(const ImRect bb, ImGuiID id)
     * }
     */
    public static boolean igIsClippedEx(MemorySegment bb, int id) {
        var mh$ = igIsClippedEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsClippedEx", bb, id);
            }
            return (boolean)mh$.invokeExact(bb, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetLastItemData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetLastItemData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, const ImRect item_rect)
     * }
     */
    public static FunctionDescriptor igSetLastItemData$descriptor() {
        return igSetLastItemData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, const ImRect item_rect)
     * }
     */
    public static MethodHandle igSetLastItemData$handle() {
        return igSetLastItemData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, const ImRect item_rect)
     * }
     */
    public static MemorySegment igSetLastItemData$address() {
        return igSetLastItemData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags status_flags, const ImRect item_rect)
     * }
     */
    public static void igSetLastItemData(int item_id, int in_flags, int status_flags, MemorySegment item_rect) {
        var mh$ = igSetLastItemData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetLastItemData", item_id, in_flags, status_flags, item_rect);
            }
            mh$.invokeExact(item_id, in_flags, status_flags, item_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCalcItemSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCalcItemSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igCalcItemSize(ImVec2 *pOut, ImVec2 size, float default_w, float default_h)
     * }
     */
    public static FunctionDescriptor igCalcItemSize$descriptor() {
        return igCalcItemSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igCalcItemSize(ImVec2 *pOut, ImVec2 size, float default_w, float default_h)
     * }
     */
    public static MethodHandle igCalcItemSize$handle() {
        return igCalcItemSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igCalcItemSize(ImVec2 *pOut, ImVec2 size, float default_w, float default_h)
     * }
     */
    public static MemorySegment igCalcItemSize$address() {
        return igCalcItemSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igCalcItemSize(ImVec2 *pOut, ImVec2 size, float default_w, float default_h)
     * }
     */
    public static void igCalcItemSize(MemorySegment pOut, MemorySegment size, float default_w, float default_h) {
        var mh$ = igCalcItemSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCalcItemSize", pOut, size, default_w, default_h);
            }
            mh$.invokeExact(pOut, size, default_w, default_h);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCalcWrapWidthForPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCalcWrapWidthForPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igCalcWrapWidthForPos(const ImVec2 pos, float wrap_pos_x)
     * }
     */
    public static FunctionDescriptor igCalcWrapWidthForPos$descriptor() {
        return igCalcWrapWidthForPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igCalcWrapWidthForPos(const ImVec2 pos, float wrap_pos_x)
     * }
     */
    public static MethodHandle igCalcWrapWidthForPos$handle() {
        return igCalcWrapWidthForPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igCalcWrapWidthForPos(const ImVec2 pos, float wrap_pos_x)
     * }
     */
    public static MemorySegment igCalcWrapWidthForPos$address() {
        return igCalcWrapWidthForPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igCalcWrapWidthForPos(const ImVec2 pos, float wrap_pos_x)
     * }
     */
    public static float igCalcWrapWidthForPos(MemorySegment pos, float wrap_pos_x) {
        var mh$ = igCalcWrapWidthForPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCalcWrapWidthForPos", pos, wrap_pos_x);
            }
            return (float)mh$.invokeExact(pos, wrap_pos_x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushMultiItemsWidths {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushMultiItemsWidths");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushMultiItemsWidths(int components, float width_full)
     * }
     */
    public static FunctionDescriptor igPushMultiItemsWidths$descriptor() {
        return igPushMultiItemsWidths.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushMultiItemsWidths(int components, float width_full)
     * }
     */
    public static MethodHandle igPushMultiItemsWidths$handle() {
        return igPushMultiItemsWidths.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushMultiItemsWidths(int components, float width_full)
     * }
     */
    public static MemorySegment igPushMultiItemsWidths$address() {
        return igPushMultiItemsWidths.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushMultiItemsWidths(int components, float width_full)
     * }
     */
    public static void igPushMultiItemsWidths(int components, float width_full) {
        var mh$ = igPushMultiItemsWidths.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushMultiItemsWidths", components, width_full);
            }
            mh$.invokeExact(components, width_full);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShrinkWidths {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShrinkWidths");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShrinkWidths(ImGuiShrinkWidthItem *items, int count, float width_excess)
     * }
     */
    public static FunctionDescriptor igShrinkWidths$descriptor() {
        return igShrinkWidths.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShrinkWidths(ImGuiShrinkWidthItem *items, int count, float width_excess)
     * }
     */
    public static MethodHandle igShrinkWidths$handle() {
        return igShrinkWidths.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShrinkWidths(ImGuiShrinkWidthItem *items, int count, float width_excess)
     * }
     */
    public static MemorySegment igShrinkWidths$address() {
        return igShrinkWidths.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShrinkWidths(ImGuiShrinkWidthItem *items, int count, float width_excess)
     * }
     */
    public static void igShrinkWidths(MemorySegment items, int count, float width_excess) {
        var mh$ = igShrinkWidths.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShrinkWidths", items, count, width_excess);
            }
            mh$.invokeExact(items, count, width_excess);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetStyleVarInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetStyleVarInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImGuiDataVarInfo *igGetStyleVarInfo(ImGuiStyleVar idx)
     * }
     */
    public static FunctionDescriptor igGetStyleVarInfo$descriptor() {
        return igGetStyleVarInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImGuiDataVarInfo *igGetStyleVarInfo(ImGuiStyleVar idx)
     * }
     */
    public static MethodHandle igGetStyleVarInfo$handle() {
        return igGetStyleVarInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImGuiDataVarInfo *igGetStyleVarInfo(ImGuiStyleVar idx)
     * }
     */
    public static MemorySegment igGetStyleVarInfo$address() {
        return igGetStyleVarInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImGuiDataVarInfo *igGetStyleVarInfo(ImGuiStyleVar idx)
     * }
     */
    public static MemorySegment igGetStyleVarInfo(int idx) {
        var mh$ = igGetStyleVarInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetStyleVarInfo", idx);
            }
            return (MemorySegment)mh$.invokeExact(idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginDisabledOverrideReenable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginDisabledOverrideReenable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBeginDisabledOverrideReenable()
     * }
     */
    public static FunctionDescriptor igBeginDisabledOverrideReenable$descriptor() {
        return igBeginDisabledOverrideReenable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBeginDisabledOverrideReenable()
     * }
     */
    public static MethodHandle igBeginDisabledOverrideReenable$handle() {
        return igBeginDisabledOverrideReenable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBeginDisabledOverrideReenable()
     * }
     */
    public static MemorySegment igBeginDisabledOverrideReenable$address() {
        return igBeginDisabledOverrideReenable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBeginDisabledOverrideReenable()
     * }
     */
    public static void igBeginDisabledOverrideReenable() {
        var mh$ = igBeginDisabledOverrideReenable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginDisabledOverrideReenable");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndDisabledOverrideReenable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndDisabledOverrideReenable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndDisabledOverrideReenable()
     * }
     */
    public static FunctionDescriptor igEndDisabledOverrideReenable$descriptor() {
        return igEndDisabledOverrideReenable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndDisabledOverrideReenable()
     * }
     */
    public static MethodHandle igEndDisabledOverrideReenable$handle() {
        return igEndDisabledOverrideReenable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndDisabledOverrideReenable()
     * }
     */
    public static MemorySegment igEndDisabledOverrideReenable$address() {
        return igEndDisabledOverrideReenable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndDisabledOverrideReenable()
     * }
     */
    public static void igEndDisabledOverrideReenable() {
        var mh$ = igEndDisabledOverrideReenable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndDisabledOverrideReenable");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogBegin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogBegin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogBegin(ImGuiLogType type, int auto_open_depth)
     * }
     */
    public static FunctionDescriptor igLogBegin$descriptor() {
        return igLogBegin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogBegin(ImGuiLogType type, int auto_open_depth)
     * }
     */
    public static MethodHandle igLogBegin$handle() {
        return igLogBegin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogBegin(ImGuiLogType type, int auto_open_depth)
     * }
     */
    public static MemorySegment igLogBegin$address() {
        return igLogBegin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogBegin(ImGuiLogType type, int auto_open_depth)
     * }
     */
    public static void igLogBegin(int type, int auto_open_depth) {
        var mh$ = igLogBegin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogBegin", type, auto_open_depth);
            }
            mh$.invokeExact(type, auto_open_depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogToBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogToBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogToBuffer(int auto_open_depth)
     * }
     */
    public static FunctionDescriptor igLogToBuffer$descriptor() {
        return igLogToBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogToBuffer(int auto_open_depth)
     * }
     */
    public static MethodHandle igLogToBuffer$handle() {
        return igLogToBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogToBuffer(int auto_open_depth)
     * }
     */
    public static MemorySegment igLogToBuffer$address() {
        return igLogToBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogToBuffer(int auto_open_depth)
     * }
     */
    public static void igLogToBuffer(int auto_open_depth) {
        var mh$ = igLogToBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogToBuffer", auto_open_depth);
            }
            mh$.invokeExact(auto_open_depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogRenderedText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogRenderedText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogRenderedText(const ImVec2 *ref_pos, const char *text, const char *text_end)
     * }
     */
    public static FunctionDescriptor igLogRenderedText$descriptor() {
        return igLogRenderedText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogRenderedText(const ImVec2 *ref_pos, const char *text, const char *text_end)
     * }
     */
    public static MethodHandle igLogRenderedText$handle() {
        return igLogRenderedText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogRenderedText(const ImVec2 *ref_pos, const char *text, const char *text_end)
     * }
     */
    public static MemorySegment igLogRenderedText$address() {
        return igLogRenderedText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogRenderedText(const ImVec2 *ref_pos, const char *text, const char *text_end)
     * }
     */
    public static void igLogRenderedText(MemorySegment ref_pos, MemorySegment text, MemorySegment text_end) {
        var mh$ = igLogRenderedText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogRenderedText", ref_pos, text, text_end);
            }
            mh$.invokeExact(ref_pos, text, text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogSetNextTextDecoration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogSetNextTextDecoration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogSetNextTextDecoration(const char *prefix, const char *suffix)
     * }
     */
    public static FunctionDescriptor igLogSetNextTextDecoration$descriptor() {
        return igLogSetNextTextDecoration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogSetNextTextDecoration(const char *prefix, const char *suffix)
     * }
     */
    public static MethodHandle igLogSetNextTextDecoration$handle() {
        return igLogSetNextTextDecoration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogSetNextTextDecoration(const char *prefix, const char *suffix)
     * }
     */
    public static MemorySegment igLogSetNextTextDecoration$address() {
        return igLogSetNextTextDecoration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogSetNextTextDecoration(const char *prefix, const char *suffix)
     * }
     */
    public static void igLogSetNextTextDecoration(MemorySegment prefix, MemorySegment suffix) {
        var mh$ = igLogSetNextTextDecoration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogSetNextTextDecoration", prefix, suffix);
            }
            mh$.invokeExact(prefix, suffix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginChildEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginChildEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginChildEx(const char *name, ImGuiID id, const ImVec2 size_arg, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static FunctionDescriptor igBeginChildEx$descriptor() {
        return igBeginChildEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginChildEx(const char *name, ImGuiID id, const ImVec2 size_arg, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static MethodHandle igBeginChildEx$handle() {
        return igBeginChildEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginChildEx(const char *name, ImGuiID id, const ImVec2 size_arg, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static MemorySegment igBeginChildEx$address() {
        return igBeginChildEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginChildEx(const char *name, ImGuiID id, const ImVec2 size_arg, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static boolean igBeginChildEx(MemorySegment name, int id, MemorySegment size_arg, int child_flags, int window_flags) {
        var mh$ = igBeginChildEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginChildEx", name, id, size_arg, child_flags, window_flags);
            }
            return (boolean)mh$.invokeExact(name, id, size_arg, child_flags, window_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginPopupEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginPopupEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_window_flags)
     * }
     */
    public static FunctionDescriptor igBeginPopupEx$descriptor() {
        return igBeginPopupEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_window_flags)
     * }
     */
    public static MethodHandle igBeginPopupEx$handle() {
        return igBeginPopupEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_window_flags)
     * }
     */
    public static MemorySegment igBeginPopupEx$address() {
        return igBeginPopupEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginPopupEx(ImGuiID id, ImGuiWindowFlags extra_window_flags)
     * }
     */
    public static boolean igBeginPopupEx(int id, int extra_window_flags) {
        var mh$ = igBeginPopupEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginPopupEx", id, extra_window_flags);
            }
            return (boolean)mh$.invokeExact(id, extra_window_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igOpenPopupEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igOpenPopupEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igOpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static FunctionDescriptor igOpenPopupEx$descriptor() {
        return igOpenPopupEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igOpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MethodHandle igOpenPopupEx$handle() {
        return igOpenPopupEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igOpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MemorySegment igOpenPopupEx$address() {
        return igOpenPopupEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igOpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static void igOpenPopupEx(int id, int popup_flags) {
        var mh$ = igOpenPopupEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igOpenPopupEx", id, popup_flags);
            }
            mh$.invokeExact(id, popup_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igClosePopupToLevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igClosePopupToLevel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)
     * }
     */
    public static FunctionDescriptor igClosePopupToLevel$descriptor() {
        return igClosePopupToLevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)
     * }
     */
    public static MethodHandle igClosePopupToLevel$handle() {
        return igClosePopupToLevel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)
     * }
     */
    public static MemorySegment igClosePopupToLevel$address() {
        return igClosePopupToLevel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)
     * }
     */
    public static void igClosePopupToLevel(int remaining, boolean restore_focus_to_window_under_popup) {
        var mh$ = igClosePopupToLevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igClosePopupToLevel", remaining, restore_focus_to_window_under_popup);
            }
            mh$.invokeExact(remaining, restore_focus_to_window_under_popup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igClosePopupsOverWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igClosePopupsOverWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igClosePopupsOverWindow(ImGuiWindow *ref_window, bool restore_focus_to_window_under_popup)
     * }
     */
    public static FunctionDescriptor igClosePopupsOverWindow$descriptor() {
        return igClosePopupsOverWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igClosePopupsOverWindow(ImGuiWindow *ref_window, bool restore_focus_to_window_under_popup)
     * }
     */
    public static MethodHandle igClosePopupsOverWindow$handle() {
        return igClosePopupsOverWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igClosePopupsOverWindow(ImGuiWindow *ref_window, bool restore_focus_to_window_under_popup)
     * }
     */
    public static MemorySegment igClosePopupsOverWindow$address() {
        return igClosePopupsOverWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igClosePopupsOverWindow(ImGuiWindow *ref_window, bool restore_focus_to_window_under_popup)
     * }
     */
    public static void igClosePopupsOverWindow(MemorySegment ref_window, boolean restore_focus_to_window_under_popup) {
        var mh$ = igClosePopupsOverWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igClosePopupsOverWindow", ref_window, restore_focus_to_window_under_popup);
            }
            mh$.invokeExact(ref_window, restore_focus_to_window_under_popup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igClosePopupsExceptModals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igClosePopupsExceptModals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igClosePopupsExceptModals()
     * }
     */
    public static FunctionDescriptor igClosePopupsExceptModals$descriptor() {
        return igClosePopupsExceptModals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igClosePopupsExceptModals()
     * }
     */
    public static MethodHandle igClosePopupsExceptModals$handle() {
        return igClosePopupsExceptModals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igClosePopupsExceptModals()
     * }
     */
    public static MemorySegment igClosePopupsExceptModals$address() {
        return igClosePopupsExceptModals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igClosePopupsExceptModals()
     * }
     */
    public static void igClosePopupsExceptModals() {
        var mh$ = igClosePopupsExceptModals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igClosePopupsExceptModals");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsPopupOpen_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsPopupOpen_ID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsPopupOpen_ID(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static FunctionDescriptor igIsPopupOpen_ID$descriptor() {
        return igIsPopupOpen_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsPopupOpen_ID(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MethodHandle igIsPopupOpen_ID$handle() {
        return igIsPopupOpen_ID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsPopupOpen_ID(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MemorySegment igIsPopupOpen_ID$address() {
        return igIsPopupOpen_ID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsPopupOpen_ID(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static boolean igIsPopupOpen_ID(int id, int popup_flags) {
        var mh$ = igIsPopupOpen_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsPopupOpen_ID", id, popup_flags);
            }
            return (boolean)mh$.invokeExact(id, popup_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetPopupAllowedExtentRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetPopupAllowedExtentRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetPopupAllowedExtentRect(ImRect *pOut, ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igGetPopupAllowedExtentRect$descriptor() {
        return igGetPopupAllowedExtentRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetPopupAllowedExtentRect(ImRect *pOut, ImGuiWindow *window)
     * }
     */
    public static MethodHandle igGetPopupAllowedExtentRect$handle() {
        return igGetPopupAllowedExtentRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetPopupAllowedExtentRect(ImRect *pOut, ImGuiWindow *window)
     * }
     */
    public static MemorySegment igGetPopupAllowedExtentRect$address() {
        return igGetPopupAllowedExtentRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetPopupAllowedExtentRect(ImRect *pOut, ImGuiWindow *window)
     * }
     */
    public static void igGetPopupAllowedExtentRect(MemorySegment pOut, MemorySegment window) {
        var mh$ = igGetPopupAllowedExtentRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetPopupAllowedExtentRect", pOut, window);
            }
            mh$.invokeExact(pOut, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetTopMostPopupModal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetTopMostPopupModal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetTopMostPopupModal()
     * }
     */
    public static FunctionDescriptor igGetTopMostPopupModal$descriptor() {
        return igGetTopMostPopupModal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetTopMostPopupModal()
     * }
     */
    public static MethodHandle igGetTopMostPopupModal$handle() {
        return igGetTopMostPopupModal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetTopMostPopupModal()
     * }
     */
    public static MemorySegment igGetTopMostPopupModal$address() {
        return igGetTopMostPopupModal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetTopMostPopupModal()
     * }
     */
    public static MemorySegment igGetTopMostPopupModal() {
        var mh$ = igGetTopMostPopupModal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetTopMostPopupModal");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetTopMostAndVisiblePopupModal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetTopMostAndVisiblePopupModal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetTopMostAndVisiblePopupModal()
     * }
     */
    public static FunctionDescriptor igGetTopMostAndVisiblePopupModal$descriptor() {
        return igGetTopMostAndVisiblePopupModal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetTopMostAndVisiblePopupModal()
     * }
     */
    public static MethodHandle igGetTopMostAndVisiblePopupModal$handle() {
        return igGetTopMostAndVisiblePopupModal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetTopMostAndVisiblePopupModal()
     * }
     */
    public static MemorySegment igGetTopMostAndVisiblePopupModal$address() {
        return igGetTopMostAndVisiblePopupModal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindow *igGetTopMostAndVisiblePopupModal()
     * }
     */
    public static MemorySegment igGetTopMostAndVisiblePopupModal() {
        var mh$ = igGetTopMostAndVisiblePopupModal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetTopMostAndVisiblePopupModal");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindBlockingModal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindBlockingModal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindBlockingModal(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igFindBlockingModal$descriptor() {
        return igFindBlockingModal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindBlockingModal(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igFindBlockingModal$handle() {
        return igFindBlockingModal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindBlockingModal(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igFindBlockingModal$address() {
        return igFindBlockingModal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindow *igFindBlockingModal(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igFindBlockingModal(MemorySegment window) {
        var mh$ = igFindBlockingModal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindBlockingModal", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindBestWindowPosForPopup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindBestWindowPosForPopup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igFindBestWindowPosForPopup(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igFindBestWindowPosForPopup$descriptor() {
        return igFindBestWindowPosForPopup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igFindBestWindowPosForPopup(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static MethodHandle igFindBestWindowPosForPopup$handle() {
        return igFindBestWindowPosForPopup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igFindBestWindowPosForPopup(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static MemorySegment igFindBestWindowPosForPopup$address() {
        return igFindBestWindowPosForPopup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igFindBestWindowPosForPopup(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static void igFindBestWindowPosForPopup(MemorySegment pOut, MemorySegment window) {
        var mh$ = igFindBestWindowPosForPopup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindBestWindowPosForPopup", pOut, window);
            }
            mh$.invokeExact(pOut, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindBestWindowPosForPopupEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_POINTER,
            ImRect.layout(),
            ImRect.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindBestWindowPosForPopupEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igFindBestWindowPosForPopupEx(ImVec2 *pOut, const ImVec2 ref_pos, const ImVec2 size, ImGuiDir *last_dir, const ImRect r_outer, const ImRect r_avoid, ImGuiPopupPositionPolicy policy)
     * }
     */
    public static FunctionDescriptor igFindBestWindowPosForPopupEx$descriptor() {
        return igFindBestWindowPosForPopupEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igFindBestWindowPosForPopupEx(ImVec2 *pOut, const ImVec2 ref_pos, const ImVec2 size, ImGuiDir *last_dir, const ImRect r_outer, const ImRect r_avoid, ImGuiPopupPositionPolicy policy)
     * }
     */
    public static MethodHandle igFindBestWindowPosForPopupEx$handle() {
        return igFindBestWindowPosForPopupEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igFindBestWindowPosForPopupEx(ImVec2 *pOut, const ImVec2 ref_pos, const ImVec2 size, ImGuiDir *last_dir, const ImRect r_outer, const ImRect r_avoid, ImGuiPopupPositionPolicy policy)
     * }
     */
    public static MemorySegment igFindBestWindowPosForPopupEx$address() {
        return igFindBestWindowPosForPopupEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igFindBestWindowPosForPopupEx(ImVec2 *pOut, const ImVec2 ref_pos, const ImVec2 size, ImGuiDir *last_dir, const ImRect r_outer, const ImRect r_avoid, ImGuiPopupPositionPolicy policy)
     * }
     */
    public static void igFindBestWindowPosForPopupEx(MemorySegment pOut, MemorySegment ref_pos, MemorySegment size, MemorySegment last_dir, MemorySegment r_outer, MemorySegment r_avoid, int policy) {
        var mh$ = igFindBestWindowPosForPopupEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindBestWindowPosForPopupEx", pOut, ref_pos, size, last_dir, r_outer, r_avoid, policy);
            }
            mh$.invokeExact(pOut, ref_pos, size, last_dir, r_outer, r_avoid, policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginTooltipEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginTooltipEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)
     * }
     */
    public static FunctionDescriptor igBeginTooltipEx$descriptor() {
        return igBeginTooltipEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)
     * }
     */
    public static MethodHandle igBeginTooltipEx$handle() {
        return igBeginTooltipEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)
     * }
     */
    public static MemorySegment igBeginTooltipEx$address() {
        return igBeginTooltipEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)
     * }
     */
    public static boolean igBeginTooltipEx(int tooltip_flags, int extra_window_flags) {
        var mh$ = igBeginTooltipEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginTooltipEx", tooltip_flags, extra_window_flags);
            }
            return (boolean)mh$.invokeExact(tooltip_flags, extra_window_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginTooltipHidden {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginTooltipHidden");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginTooltipHidden()
     * }
     */
    public static FunctionDescriptor igBeginTooltipHidden$descriptor() {
        return igBeginTooltipHidden.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginTooltipHidden()
     * }
     */
    public static MethodHandle igBeginTooltipHidden$handle() {
        return igBeginTooltipHidden.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginTooltipHidden()
     * }
     */
    public static MemorySegment igBeginTooltipHidden$address() {
        return igBeginTooltipHidden.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginTooltipHidden()
     * }
     */
    public static boolean igBeginTooltipHidden() {
        var mh$ = igBeginTooltipHidden.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginTooltipHidden");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginViewportSideBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginViewportSideBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginViewportSideBar(const char *name, ImGuiViewport *viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags)
     * }
     */
    public static FunctionDescriptor igBeginViewportSideBar$descriptor() {
        return igBeginViewportSideBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginViewportSideBar(const char *name, ImGuiViewport *viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags)
     * }
     */
    public static MethodHandle igBeginViewportSideBar$handle() {
        return igBeginViewportSideBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginViewportSideBar(const char *name, ImGuiViewport *viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags)
     * }
     */
    public static MemorySegment igBeginViewportSideBar$address() {
        return igBeginViewportSideBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginViewportSideBar(const char *name, ImGuiViewport *viewport, ImGuiDir dir, float size, ImGuiWindowFlags window_flags)
     * }
     */
    public static boolean igBeginViewportSideBar(MemorySegment name, MemorySegment viewport, int dir, float size, int window_flags) {
        var mh$ = igBeginViewportSideBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginViewportSideBar", name, viewport, dir, size, window_flags);
            }
            return (boolean)mh$.invokeExact(name, viewport, dir, size, window_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginMenuEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginMenuEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginMenuEx(const char *label, const char *icon, bool enabled)
     * }
     */
    public static FunctionDescriptor igBeginMenuEx$descriptor() {
        return igBeginMenuEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginMenuEx(const char *label, const char *icon, bool enabled)
     * }
     */
    public static MethodHandle igBeginMenuEx$handle() {
        return igBeginMenuEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginMenuEx(const char *label, const char *icon, bool enabled)
     * }
     */
    public static MemorySegment igBeginMenuEx$address() {
        return igBeginMenuEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginMenuEx(const char *label, const char *icon, bool enabled)
     * }
     */
    public static boolean igBeginMenuEx(MemorySegment label, MemorySegment icon, boolean enabled) {
        var mh$ = igBeginMenuEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginMenuEx", label, icon, enabled);
            }
            return (boolean)mh$.invokeExact(label, icon, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMenuItemEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMenuItemEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igMenuItemEx(const char *label, const char *icon, const char *shortcut, bool selected, bool enabled)
     * }
     */
    public static FunctionDescriptor igMenuItemEx$descriptor() {
        return igMenuItemEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igMenuItemEx(const char *label, const char *icon, const char *shortcut, bool selected, bool enabled)
     * }
     */
    public static MethodHandle igMenuItemEx$handle() {
        return igMenuItemEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igMenuItemEx(const char *label, const char *icon, const char *shortcut, bool selected, bool enabled)
     * }
     */
    public static MemorySegment igMenuItemEx$address() {
        return igMenuItemEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igMenuItemEx(const char *label, const char *icon, const char *shortcut, bool selected, bool enabled)
     * }
     */
    public static boolean igMenuItemEx(MemorySegment label, MemorySegment icon, MemorySegment shortcut, boolean selected, boolean enabled) {
        var mh$ = igMenuItemEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMenuItemEx", label, icon, shortcut, selected, enabled);
            }
            return (boolean)mh$.invokeExact(label, icon, shortcut, selected, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginComboPopup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            ImRect.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginComboPopup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginComboPopup(ImGuiID popup_id, const ImRect bb, ImGuiComboFlags flags)
     * }
     */
    public static FunctionDescriptor igBeginComboPopup$descriptor() {
        return igBeginComboPopup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginComboPopup(ImGuiID popup_id, const ImRect bb, ImGuiComboFlags flags)
     * }
     */
    public static MethodHandle igBeginComboPopup$handle() {
        return igBeginComboPopup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginComboPopup(ImGuiID popup_id, const ImRect bb, ImGuiComboFlags flags)
     * }
     */
    public static MemorySegment igBeginComboPopup$address() {
        return igBeginComboPopup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginComboPopup(ImGuiID popup_id, const ImRect bb, ImGuiComboFlags flags)
     * }
     */
    public static boolean igBeginComboPopup(int popup_id, MemorySegment bb, int flags) {
        var mh$ = igBeginComboPopup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginComboPopup", popup_id, bb, flags);
            }
            return (boolean)mh$.invokeExact(popup_id, bb, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginComboPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginComboPreview");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginComboPreview()
     * }
     */
    public static FunctionDescriptor igBeginComboPreview$descriptor() {
        return igBeginComboPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginComboPreview()
     * }
     */
    public static MethodHandle igBeginComboPreview$handle() {
        return igBeginComboPreview.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginComboPreview()
     * }
     */
    public static MemorySegment igBeginComboPreview$address() {
        return igBeginComboPreview.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginComboPreview()
     * }
     */
    public static boolean igBeginComboPreview() {
        var mh$ = igBeginComboPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginComboPreview");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndComboPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndComboPreview");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndComboPreview()
     * }
     */
    public static FunctionDescriptor igEndComboPreview$descriptor() {
        return igEndComboPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndComboPreview()
     * }
     */
    public static MethodHandle igEndComboPreview$handle() {
        return igEndComboPreview.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndComboPreview()
     * }
     */
    public static MemorySegment igEndComboPreview$address() {
        return igEndComboPreview.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndComboPreview()
     * }
     */
    public static void igEndComboPreview() {
        var mh$ = igEndComboPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndComboPreview");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavInitWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavInitWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavInitWindow(ImGuiWindow *window, bool force_reinit)
     * }
     */
    public static FunctionDescriptor igNavInitWindow$descriptor() {
        return igNavInitWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavInitWindow(ImGuiWindow *window, bool force_reinit)
     * }
     */
    public static MethodHandle igNavInitWindow$handle() {
        return igNavInitWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavInitWindow(ImGuiWindow *window, bool force_reinit)
     * }
     */
    public static MemorySegment igNavInitWindow$address() {
        return igNavInitWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavInitWindow(ImGuiWindow *window, bool force_reinit)
     * }
     */
    public static void igNavInitWindow(MemorySegment window, boolean force_reinit) {
        var mh$ = igNavInitWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavInitWindow", window, force_reinit);
            }
            mh$.invokeExact(window, force_reinit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavInitRequestApplyResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavInitRequestApplyResult");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavInitRequestApplyResult()
     * }
     */
    public static FunctionDescriptor igNavInitRequestApplyResult$descriptor() {
        return igNavInitRequestApplyResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavInitRequestApplyResult()
     * }
     */
    public static MethodHandle igNavInitRequestApplyResult$handle() {
        return igNavInitRequestApplyResult.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavInitRequestApplyResult()
     * }
     */
    public static MemorySegment igNavInitRequestApplyResult$address() {
        return igNavInitRequestApplyResult.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavInitRequestApplyResult()
     * }
     */
    public static void igNavInitRequestApplyResult() {
        var mh$ = igNavInitRequestApplyResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavInitRequestApplyResult");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavMoveRequestButNoResultYet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavMoveRequestButNoResultYet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igNavMoveRequestButNoResultYet()
     * }
     */
    public static FunctionDescriptor igNavMoveRequestButNoResultYet$descriptor() {
        return igNavMoveRequestButNoResultYet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igNavMoveRequestButNoResultYet()
     * }
     */
    public static MethodHandle igNavMoveRequestButNoResultYet$handle() {
        return igNavMoveRequestButNoResultYet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igNavMoveRequestButNoResultYet()
     * }
     */
    public static MemorySegment igNavMoveRequestButNoResultYet$address() {
        return igNavMoveRequestButNoResultYet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igNavMoveRequestButNoResultYet()
     * }
     */
    public static boolean igNavMoveRequestButNoResultYet() {
        var mh$ = igNavMoveRequestButNoResultYet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavMoveRequestButNoResultYet");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavMoveRequestSubmit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavMoveRequestSubmit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
     * }
     */
    public static FunctionDescriptor igNavMoveRequestSubmit$descriptor() {
        return igNavMoveRequestSubmit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
     * }
     */
    public static MethodHandle igNavMoveRequestSubmit$handle() {
        return igNavMoveRequestSubmit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
     * }
     */
    public static MemorySegment igNavMoveRequestSubmit$address() {
        return igNavMoveRequestSubmit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
     * }
     */
    public static void igNavMoveRequestSubmit(int move_dir, int clip_dir, int move_flags, int scroll_flags) {
        var mh$ = igNavMoveRequestSubmit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavMoveRequestSubmit", move_dir, clip_dir, move_flags, scroll_flags);
            }
            mh$.invokeExact(move_dir, clip_dir, move_flags, scroll_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavMoveRequestForward {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavMoveRequestForward");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
     * }
     */
    public static FunctionDescriptor igNavMoveRequestForward$descriptor() {
        return igNavMoveRequestForward.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
     * }
     */
    public static MethodHandle igNavMoveRequestForward$handle() {
        return igNavMoveRequestForward.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
     * }
     */
    public static MemorySegment igNavMoveRequestForward$address() {
        return igNavMoveRequestForward.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_flags, ImGuiScrollFlags scroll_flags)
     * }
     */
    public static void igNavMoveRequestForward(int move_dir, int clip_dir, int move_flags, int scroll_flags) {
        var mh$ = igNavMoveRequestForward.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavMoveRequestForward", move_dir, clip_dir, move_flags, scroll_flags);
            }
            mh$.invokeExact(move_dir, clip_dir, move_flags, scroll_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavMoveRequestResolveWithLastItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavMoveRequestResolveWithLastItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestResolveWithLastItem(ImGuiNavItemData *result)
     * }
     */
    public static FunctionDescriptor igNavMoveRequestResolveWithLastItem$descriptor() {
        return igNavMoveRequestResolveWithLastItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestResolveWithLastItem(ImGuiNavItemData *result)
     * }
     */
    public static MethodHandle igNavMoveRequestResolveWithLastItem$handle() {
        return igNavMoveRequestResolveWithLastItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestResolveWithLastItem(ImGuiNavItemData *result)
     * }
     */
    public static MemorySegment igNavMoveRequestResolveWithLastItem$address() {
        return igNavMoveRequestResolveWithLastItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavMoveRequestResolveWithLastItem(ImGuiNavItemData *result)
     * }
     */
    public static void igNavMoveRequestResolveWithLastItem(MemorySegment result) {
        var mh$ = igNavMoveRequestResolveWithLastItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavMoveRequestResolveWithLastItem", result);
            }
            mh$.invokeExact(result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavMoveRequestResolveWithPastTreeNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavMoveRequestResolveWithPastTreeNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestResolveWithPastTreeNode(ImGuiNavItemData *result, ImGuiTreeNodeStackData *tree_node_data)
     * }
     */
    public static FunctionDescriptor igNavMoveRequestResolveWithPastTreeNode$descriptor() {
        return igNavMoveRequestResolveWithPastTreeNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestResolveWithPastTreeNode(ImGuiNavItemData *result, ImGuiTreeNodeStackData *tree_node_data)
     * }
     */
    public static MethodHandle igNavMoveRequestResolveWithPastTreeNode$handle() {
        return igNavMoveRequestResolveWithPastTreeNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestResolveWithPastTreeNode(ImGuiNavItemData *result, ImGuiTreeNodeStackData *tree_node_data)
     * }
     */
    public static MemorySegment igNavMoveRequestResolveWithPastTreeNode$address() {
        return igNavMoveRequestResolveWithPastTreeNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavMoveRequestResolveWithPastTreeNode(ImGuiNavItemData *result, ImGuiTreeNodeStackData *tree_node_data)
     * }
     */
    public static void igNavMoveRequestResolveWithPastTreeNode(MemorySegment result, MemorySegment tree_node_data) {
        var mh$ = igNavMoveRequestResolveWithPastTreeNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavMoveRequestResolveWithPastTreeNode", result, tree_node_data);
            }
            mh$.invokeExact(result, tree_node_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavMoveRequestCancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavMoveRequestCancel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestCancel()
     * }
     */
    public static FunctionDescriptor igNavMoveRequestCancel$descriptor() {
        return igNavMoveRequestCancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestCancel()
     * }
     */
    public static MethodHandle igNavMoveRequestCancel$handle() {
        return igNavMoveRequestCancel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestCancel()
     * }
     */
    public static MemorySegment igNavMoveRequestCancel$address() {
        return igNavMoveRequestCancel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavMoveRequestCancel()
     * }
     */
    public static void igNavMoveRequestCancel() {
        var mh$ = igNavMoveRequestCancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavMoveRequestCancel");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavMoveRequestApplyResult {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavMoveRequestApplyResult");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestApplyResult()
     * }
     */
    public static FunctionDescriptor igNavMoveRequestApplyResult$descriptor() {
        return igNavMoveRequestApplyResult.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestApplyResult()
     * }
     */
    public static MethodHandle igNavMoveRequestApplyResult$handle() {
        return igNavMoveRequestApplyResult.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestApplyResult()
     * }
     */
    public static MemorySegment igNavMoveRequestApplyResult$address() {
        return igNavMoveRequestApplyResult.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavMoveRequestApplyResult()
     * }
     */
    public static void igNavMoveRequestApplyResult() {
        var mh$ = igNavMoveRequestApplyResult.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavMoveRequestApplyResult");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavMoveRequestTryWrapping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavMoveRequestTryWrapping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestTryWrapping(ImGuiWindow *window, ImGuiNavMoveFlags move_flags)
     * }
     */
    public static FunctionDescriptor igNavMoveRequestTryWrapping$descriptor() {
        return igNavMoveRequestTryWrapping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestTryWrapping(ImGuiWindow *window, ImGuiNavMoveFlags move_flags)
     * }
     */
    public static MethodHandle igNavMoveRequestTryWrapping$handle() {
        return igNavMoveRequestTryWrapping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavMoveRequestTryWrapping(ImGuiWindow *window, ImGuiNavMoveFlags move_flags)
     * }
     */
    public static MemorySegment igNavMoveRequestTryWrapping$address() {
        return igNavMoveRequestTryWrapping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavMoveRequestTryWrapping(ImGuiWindow *window, ImGuiNavMoveFlags move_flags)
     * }
     */
    public static void igNavMoveRequestTryWrapping(MemorySegment window, int move_flags) {
        var mh$ = igNavMoveRequestTryWrapping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavMoveRequestTryWrapping", window, move_flags);
            }
            mh$.invokeExact(window, move_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavHighlightActivated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavHighlightActivated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavHighlightActivated(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igNavHighlightActivated$descriptor() {
        return igNavHighlightActivated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavHighlightActivated(ImGuiID id)
     * }
     */
    public static MethodHandle igNavHighlightActivated$handle() {
        return igNavHighlightActivated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavHighlightActivated(ImGuiID id)
     * }
     */
    public static MemorySegment igNavHighlightActivated$address() {
        return igNavHighlightActivated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavHighlightActivated(ImGuiID id)
     * }
     */
    public static void igNavHighlightActivated(int id) {
        var mh$ = igNavHighlightActivated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavHighlightActivated", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavClearPreferredPosForAxis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavClearPreferredPosForAxis");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavClearPreferredPosForAxis(ImGuiAxis axis)
     * }
     */
    public static FunctionDescriptor igNavClearPreferredPosForAxis$descriptor() {
        return igNavClearPreferredPosForAxis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavClearPreferredPosForAxis(ImGuiAxis axis)
     * }
     */
    public static MethodHandle igNavClearPreferredPosForAxis$handle() {
        return igNavClearPreferredPosForAxis.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavClearPreferredPosForAxis(ImGuiAxis axis)
     * }
     */
    public static MemorySegment igNavClearPreferredPosForAxis$address() {
        return igNavClearPreferredPosForAxis.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavClearPreferredPosForAxis(ImGuiAxis axis)
     * }
     */
    public static void igNavClearPreferredPosForAxis(int axis) {
        var mh$ = igNavClearPreferredPosForAxis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavClearPreferredPosForAxis", axis);
            }
            mh$.invokeExact(axis);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavRestoreHighlightAfterMove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavRestoreHighlightAfterMove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavRestoreHighlightAfterMove()
     * }
     */
    public static FunctionDescriptor igNavRestoreHighlightAfterMove$descriptor() {
        return igNavRestoreHighlightAfterMove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavRestoreHighlightAfterMove()
     * }
     */
    public static MethodHandle igNavRestoreHighlightAfterMove$handle() {
        return igNavRestoreHighlightAfterMove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavRestoreHighlightAfterMove()
     * }
     */
    public static MemorySegment igNavRestoreHighlightAfterMove$address() {
        return igNavRestoreHighlightAfterMove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavRestoreHighlightAfterMove()
     * }
     */
    public static void igNavRestoreHighlightAfterMove() {
        var mh$ = igNavRestoreHighlightAfterMove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavRestoreHighlightAfterMove");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNavUpdateCurrentWindowIsScrollPushableX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNavUpdateCurrentWindowIsScrollPushableX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNavUpdateCurrentWindowIsScrollPushableX()
     * }
     */
    public static FunctionDescriptor igNavUpdateCurrentWindowIsScrollPushableX$descriptor() {
        return igNavUpdateCurrentWindowIsScrollPushableX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNavUpdateCurrentWindowIsScrollPushableX()
     * }
     */
    public static MethodHandle igNavUpdateCurrentWindowIsScrollPushableX$handle() {
        return igNavUpdateCurrentWindowIsScrollPushableX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNavUpdateCurrentWindowIsScrollPushableX()
     * }
     */
    public static MemorySegment igNavUpdateCurrentWindowIsScrollPushableX$address() {
        return igNavUpdateCurrentWindowIsScrollPushableX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNavUpdateCurrentWindowIsScrollPushableX()
     * }
     */
    public static void igNavUpdateCurrentWindowIsScrollPushableX() {
        var mh$ = igNavUpdateCurrentWindowIsScrollPushableX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNavUpdateCurrentWindowIsScrollPushableX");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNavWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNavWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNavWindow(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igSetNavWindow$descriptor() {
        return igSetNavWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNavWindow(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igSetNavWindow$handle() {
        return igSetNavWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNavWindow(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igSetNavWindow$address() {
        return igSetNavWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNavWindow(ImGuiWindow *window)
     * }
     */
    public static void igSetNavWindow(MemorySegment window) {
        var mh$ = igSetNavWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNavWindow", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNavID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNavID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect rect_rel)
     * }
     */
    public static FunctionDescriptor igSetNavID$descriptor() {
        return igSetNavID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect rect_rel)
     * }
     */
    public static MethodHandle igSetNavID$handle() {
        return igSetNavID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect rect_rel)
     * }
     */
    public static MemorySegment igSetNavID$address() {
        return igSetNavID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect rect_rel)
     * }
     */
    public static void igSetNavID(int id, int nav_layer, int focus_scope_id, MemorySegment rect_rel) {
        var mh$ = igSetNavID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNavID", id, nav_layer, focus_scope_id, rect_rel);
            }
            mh$.invokeExact(id, nav_layer, focus_scope_id, rect_rel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNavFocusScope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNavFocusScope");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNavFocusScope(ImGuiID focus_scope_id)
     * }
     */
    public static FunctionDescriptor igSetNavFocusScope$descriptor() {
        return igSetNavFocusScope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNavFocusScope(ImGuiID focus_scope_id)
     * }
     */
    public static MethodHandle igSetNavFocusScope$handle() {
        return igSetNavFocusScope.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNavFocusScope(ImGuiID focus_scope_id)
     * }
     */
    public static MemorySegment igSetNavFocusScope$address() {
        return igSetNavFocusScope.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNavFocusScope(ImGuiID focus_scope_id)
     * }
     */
    public static void igSetNavFocusScope(int focus_scope_id) {
        var mh$ = igSetNavFocusScope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNavFocusScope", focus_scope_id);
            }
            mh$.invokeExact(focus_scope_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFocusItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFocusItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igFocusItem()
     * }
     */
    public static FunctionDescriptor igFocusItem$descriptor() {
        return igFocusItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igFocusItem()
     * }
     */
    public static MethodHandle igFocusItem$handle() {
        return igFocusItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igFocusItem()
     * }
     */
    public static MemorySegment igFocusItem$address() {
        return igFocusItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igFocusItem()
     * }
     */
    public static void igFocusItem() {
        var mh$ = igFocusItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFocusItem");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igActivateItemByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igActivateItemByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igActivateItemByID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igActivateItemByID$descriptor() {
        return igActivateItemByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igActivateItemByID(ImGuiID id)
     * }
     */
    public static MethodHandle igActivateItemByID$handle() {
        return igActivateItemByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igActivateItemByID(ImGuiID id)
     * }
     */
    public static MemorySegment igActivateItemByID$address() {
        return igActivateItemByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igActivateItemByID(ImGuiID id)
     * }
     */
    public static void igActivateItemByID(int id) {
        var mh$ = igActivateItemByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igActivateItemByID", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsNamedKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsNamedKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsNamedKey(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsNamedKey$descriptor() {
        return igIsNamedKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsNamedKey(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsNamedKey$handle() {
        return igIsNamedKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsNamedKey(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsNamedKey$address() {
        return igIsNamedKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsNamedKey(ImGuiKey key)
     * }
     */
    public static boolean igIsNamedKey(int key) {
        var mh$ = igIsNamedKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsNamedKey", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsNamedKeyOrMod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsNamedKeyOrMod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsNamedKeyOrMod(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsNamedKeyOrMod$descriptor() {
        return igIsNamedKeyOrMod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsNamedKeyOrMod(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsNamedKeyOrMod$handle() {
        return igIsNamedKeyOrMod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsNamedKeyOrMod(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsNamedKeyOrMod$address() {
        return igIsNamedKeyOrMod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsNamedKeyOrMod(ImGuiKey key)
     * }
     */
    public static boolean igIsNamedKeyOrMod(int key) {
        var mh$ = igIsNamedKeyOrMod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsNamedKeyOrMod", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsLegacyKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsLegacyKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsLegacyKey(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsLegacyKey$descriptor() {
        return igIsLegacyKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsLegacyKey(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsLegacyKey$handle() {
        return igIsLegacyKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsLegacyKey(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsLegacyKey$address() {
        return igIsLegacyKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsLegacyKey(ImGuiKey key)
     * }
     */
    public static boolean igIsLegacyKey(int key) {
        var mh$ = igIsLegacyKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsLegacyKey", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsKeyboardKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsKeyboardKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsKeyboardKey(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsKeyboardKey$descriptor() {
        return igIsKeyboardKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsKeyboardKey(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsKeyboardKey$handle() {
        return igIsKeyboardKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsKeyboardKey(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsKeyboardKey$address() {
        return igIsKeyboardKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsKeyboardKey(ImGuiKey key)
     * }
     */
    public static boolean igIsKeyboardKey(int key) {
        var mh$ = igIsKeyboardKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsKeyboardKey", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsGamepadKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsGamepadKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsGamepadKey(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsGamepadKey$descriptor() {
        return igIsGamepadKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsGamepadKey(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsGamepadKey$handle() {
        return igIsGamepadKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsGamepadKey(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsGamepadKey$address() {
        return igIsGamepadKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsGamepadKey(ImGuiKey key)
     * }
     */
    public static boolean igIsGamepadKey(int key) {
        var mh$ = igIsGamepadKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsGamepadKey", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseKey(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsMouseKey$descriptor() {
        return igIsMouseKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseKey(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsMouseKey$handle() {
        return igIsMouseKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseKey(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsMouseKey$address() {
        return igIsMouseKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseKey(ImGuiKey key)
     * }
     */
    public static boolean igIsMouseKey(int key) {
        var mh$ = igIsMouseKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseKey", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsAliasKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsAliasKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsAliasKey(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsAliasKey$descriptor() {
        return igIsAliasKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsAliasKey(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsAliasKey$handle() {
        return igIsAliasKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsAliasKey(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsAliasKey$address() {
        return igIsAliasKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsAliasKey(ImGuiKey key)
     * }
     */
    public static boolean igIsAliasKey(int key) {
        var mh$ = igIsAliasKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsAliasKey", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsModKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsModKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsModKey(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsModKey$descriptor() {
        return igIsModKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsModKey(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsModKey$handle() {
        return igIsModKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsModKey(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsModKey$address() {
        return igIsModKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsModKey(ImGuiKey key)
     * }
     */
    public static boolean igIsModKey(int key) {
        var mh$ = igIsModKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsModKey", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFixupKeyChord {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFixupKeyChord");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKeyChord igFixupKeyChord(ImGuiKeyChord key_chord)
     * }
     */
    public static FunctionDescriptor igFixupKeyChord$descriptor() {
        return igFixupKeyChord.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKeyChord igFixupKeyChord(ImGuiKeyChord key_chord)
     * }
     */
    public static MethodHandle igFixupKeyChord$handle() {
        return igFixupKeyChord.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKeyChord igFixupKeyChord(ImGuiKeyChord key_chord)
     * }
     */
    public static MemorySegment igFixupKeyChord$address() {
        return igFixupKeyChord.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKeyChord igFixupKeyChord(ImGuiKeyChord key_chord)
     * }
     */
    public static int igFixupKeyChord(int key_chord) {
        var mh$ = igFixupKeyChord.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFixupKeyChord", key_chord);
            }
            return (int)mh$.invokeExact(key_chord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igConvertSingleModFlagToKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igConvertSingleModFlagToKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKey igConvertSingleModFlagToKey(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igConvertSingleModFlagToKey$descriptor() {
        return igConvertSingleModFlagToKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKey igConvertSingleModFlagToKey(ImGuiKey key)
     * }
     */
    public static MethodHandle igConvertSingleModFlagToKey$handle() {
        return igConvertSingleModFlagToKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKey igConvertSingleModFlagToKey(ImGuiKey key)
     * }
     */
    public static MemorySegment igConvertSingleModFlagToKey$address() {
        return igConvertSingleModFlagToKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKey igConvertSingleModFlagToKey(ImGuiKey key)
     * }
     */
    public static int igConvertSingleModFlagToKey(int key) {
        var mh$ = igConvertSingleModFlagToKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igConvertSingleModFlagToKey", key);
            }
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetKeyData_ContextPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetKeyData_ContextPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKeyData *igGetKeyData_ContextPtr(ImGuiContext *ctx, ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igGetKeyData_ContextPtr$descriptor() {
        return igGetKeyData_ContextPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKeyData *igGetKeyData_ContextPtr(ImGuiContext *ctx, ImGuiKey key)
     * }
     */
    public static MethodHandle igGetKeyData_ContextPtr$handle() {
        return igGetKeyData_ContextPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKeyData *igGetKeyData_ContextPtr(ImGuiContext *ctx, ImGuiKey key)
     * }
     */
    public static MemorySegment igGetKeyData_ContextPtr$address() {
        return igGetKeyData_ContextPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKeyData *igGetKeyData_ContextPtr(ImGuiContext *ctx, ImGuiKey key)
     * }
     */
    public static MemorySegment igGetKeyData_ContextPtr(MemorySegment ctx, int key) {
        var mh$ = igGetKeyData_ContextPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetKeyData_ContextPtr", ctx, key);
            }
            return (MemorySegment)mh$.invokeExact(ctx, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetKeyData_Key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetKeyData_Key");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKeyData *igGetKeyData_Key(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igGetKeyData_Key$descriptor() {
        return igGetKeyData_Key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKeyData *igGetKeyData_Key(ImGuiKey key)
     * }
     */
    public static MethodHandle igGetKeyData_Key$handle() {
        return igGetKeyData_Key.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKeyData *igGetKeyData_Key(ImGuiKey key)
     * }
     */
    public static MemorySegment igGetKeyData_Key$address() {
        return igGetKeyData_Key.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKeyData *igGetKeyData_Key(ImGuiKey key)
     * }
     */
    public static MemorySegment igGetKeyData_Key(int key) {
        var mh$ = igGetKeyData_Key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetKeyData_Key", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetKeyChordName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetKeyChordName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igGetKeyChordName(ImGuiKeyChord key_chord)
     * }
     */
    public static FunctionDescriptor igGetKeyChordName$descriptor() {
        return igGetKeyChordName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igGetKeyChordName(ImGuiKeyChord key_chord)
     * }
     */
    public static MethodHandle igGetKeyChordName$handle() {
        return igGetKeyChordName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igGetKeyChordName(ImGuiKeyChord key_chord)
     * }
     */
    public static MemorySegment igGetKeyChordName$address() {
        return igGetKeyChordName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igGetKeyChordName(ImGuiKeyChord key_chord)
     * }
     */
    public static MemorySegment igGetKeyChordName(int key_chord) {
        var mh$ = igGetKeyChordName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetKeyChordName", key_chord);
            }
            return (MemorySegment)mh$.invokeExact(key_chord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMouseButtonToKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMouseButtonToKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKey igMouseButtonToKey(ImGuiMouseButton button)
     * }
     */
    public static FunctionDescriptor igMouseButtonToKey$descriptor() {
        return igMouseButtonToKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKey igMouseButtonToKey(ImGuiMouseButton button)
     * }
     */
    public static MethodHandle igMouseButtonToKey$handle() {
        return igMouseButtonToKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKey igMouseButtonToKey(ImGuiMouseButton button)
     * }
     */
    public static MemorySegment igMouseButtonToKey$address() {
        return igMouseButtonToKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKey igMouseButtonToKey(ImGuiMouseButton button)
     * }
     */
    public static int igMouseButtonToKey(int button) {
        var mh$ = igMouseButtonToKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMouseButtonToKey", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseDragPastThreshold {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseDragPastThreshold");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static FunctionDescriptor igIsMouseDragPastThreshold$descriptor() {
        return igIsMouseDragPastThreshold.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static MethodHandle igIsMouseDragPastThreshold$handle() {
        return igIsMouseDragPastThreshold.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static MemorySegment igIsMouseDragPastThreshold$address() {
        return igIsMouseDragPastThreshold.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static boolean igIsMouseDragPastThreshold(int button, float lock_threshold) {
        var mh$ = igIsMouseDragPastThreshold.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseDragPastThreshold", button, lock_threshold);
            }
            return (boolean)mh$.invokeExact(button, lock_threshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetKeyMagnitude2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetKeyMagnitude2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetKeyMagnitude2d(ImVec2 *pOut, ImGuiKey key_left, ImGuiKey key_right, ImGuiKey key_up, ImGuiKey key_down)
     * }
     */
    public static FunctionDescriptor igGetKeyMagnitude2d$descriptor() {
        return igGetKeyMagnitude2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetKeyMagnitude2d(ImVec2 *pOut, ImGuiKey key_left, ImGuiKey key_right, ImGuiKey key_up, ImGuiKey key_down)
     * }
     */
    public static MethodHandle igGetKeyMagnitude2d$handle() {
        return igGetKeyMagnitude2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetKeyMagnitude2d(ImVec2 *pOut, ImGuiKey key_left, ImGuiKey key_right, ImGuiKey key_up, ImGuiKey key_down)
     * }
     */
    public static MemorySegment igGetKeyMagnitude2d$address() {
        return igGetKeyMagnitude2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetKeyMagnitude2d(ImVec2 *pOut, ImGuiKey key_left, ImGuiKey key_right, ImGuiKey key_up, ImGuiKey key_down)
     * }
     */
    public static void igGetKeyMagnitude2d(MemorySegment pOut, int key_left, int key_right, int key_up, int key_down) {
        var mh$ = igGetKeyMagnitude2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetKeyMagnitude2d", pOut, key_left, key_right, key_up, key_down);
            }
            mh$.invokeExact(pOut, key_left, key_right, key_up, key_down);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetNavTweakPressedAmount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetNavTweakPressedAmount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetNavTweakPressedAmount(ImGuiAxis axis)
     * }
     */
    public static FunctionDescriptor igGetNavTweakPressedAmount$descriptor() {
        return igGetNavTweakPressedAmount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetNavTweakPressedAmount(ImGuiAxis axis)
     * }
     */
    public static MethodHandle igGetNavTweakPressedAmount$handle() {
        return igGetNavTweakPressedAmount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetNavTweakPressedAmount(ImGuiAxis axis)
     * }
     */
    public static MemorySegment igGetNavTweakPressedAmount$address() {
        return igGetNavTweakPressedAmount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetNavTweakPressedAmount(ImGuiAxis axis)
     * }
     */
    public static float igGetNavTweakPressedAmount(int axis) {
        var mh$ = igGetNavTweakPressedAmount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetNavTweakPressedAmount", axis);
            }
            return (float)mh$.invokeExact(axis);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCalcTypematicRepeatAmount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCalcTypematicRepeatAmount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igCalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)
     * }
     */
    public static FunctionDescriptor igCalcTypematicRepeatAmount$descriptor() {
        return igCalcTypematicRepeatAmount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igCalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)
     * }
     */
    public static MethodHandle igCalcTypematicRepeatAmount$handle() {
        return igCalcTypematicRepeatAmount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igCalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)
     * }
     */
    public static MemorySegment igCalcTypematicRepeatAmount$address() {
        return igCalcTypematicRepeatAmount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igCalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)
     * }
     */
    public static int igCalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate) {
        var mh$ = igCalcTypematicRepeatAmount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCalcTypematicRepeatAmount", t0, t1, repeat_delay, repeat_rate);
            }
            return (int)mh$.invokeExact(t0, t1, repeat_delay, repeat_rate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetTypematicRepeatRate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetTypematicRepeatRate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetTypematicRepeatRate(ImGuiInputFlags flags, float *repeat_delay, float *repeat_rate)
     * }
     */
    public static FunctionDescriptor igGetTypematicRepeatRate$descriptor() {
        return igGetTypematicRepeatRate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetTypematicRepeatRate(ImGuiInputFlags flags, float *repeat_delay, float *repeat_rate)
     * }
     */
    public static MethodHandle igGetTypematicRepeatRate$handle() {
        return igGetTypematicRepeatRate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetTypematicRepeatRate(ImGuiInputFlags flags, float *repeat_delay, float *repeat_rate)
     * }
     */
    public static MemorySegment igGetTypematicRepeatRate$address() {
        return igGetTypematicRepeatRate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetTypematicRepeatRate(ImGuiInputFlags flags, float *repeat_delay, float *repeat_rate)
     * }
     */
    public static void igGetTypematicRepeatRate(int flags, MemorySegment repeat_delay, MemorySegment repeat_rate) {
        var mh$ = igGetTypematicRepeatRate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetTypematicRepeatRate", flags, repeat_delay, repeat_rate);
            }
            mh$.invokeExact(flags, repeat_delay, repeat_rate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTeleportMousePos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTeleportMousePos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTeleportMousePos(const ImVec2 pos)
     * }
     */
    public static FunctionDescriptor igTeleportMousePos$descriptor() {
        return igTeleportMousePos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTeleportMousePos(const ImVec2 pos)
     * }
     */
    public static MethodHandle igTeleportMousePos$handle() {
        return igTeleportMousePos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTeleportMousePos(const ImVec2 pos)
     * }
     */
    public static MemorySegment igTeleportMousePos$address() {
        return igTeleportMousePos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTeleportMousePos(const ImVec2 pos)
     * }
     */
    public static void igTeleportMousePos(MemorySegment pos) {
        var mh$ = igTeleportMousePos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTeleportMousePos", pos);
            }
            mh$.invokeExact(pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetActiveIdUsingAllKeyboardKeys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetActiveIdUsingAllKeyboardKeys");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetActiveIdUsingAllKeyboardKeys()
     * }
     */
    public static FunctionDescriptor igSetActiveIdUsingAllKeyboardKeys$descriptor() {
        return igSetActiveIdUsingAllKeyboardKeys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetActiveIdUsingAllKeyboardKeys()
     * }
     */
    public static MethodHandle igSetActiveIdUsingAllKeyboardKeys$handle() {
        return igSetActiveIdUsingAllKeyboardKeys.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetActiveIdUsingAllKeyboardKeys()
     * }
     */
    public static MemorySegment igSetActiveIdUsingAllKeyboardKeys$address() {
        return igSetActiveIdUsingAllKeyboardKeys.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetActiveIdUsingAllKeyboardKeys()
     * }
     */
    public static void igSetActiveIdUsingAllKeyboardKeys() {
        var mh$ = igSetActiveIdUsingAllKeyboardKeys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetActiveIdUsingAllKeyboardKeys");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsActiveIdUsingNavDir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsActiveIdUsingNavDir");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsActiveIdUsingNavDir(ImGuiDir dir)
     * }
     */
    public static FunctionDescriptor igIsActiveIdUsingNavDir$descriptor() {
        return igIsActiveIdUsingNavDir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsActiveIdUsingNavDir(ImGuiDir dir)
     * }
     */
    public static MethodHandle igIsActiveIdUsingNavDir$handle() {
        return igIsActiveIdUsingNavDir.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsActiveIdUsingNavDir(ImGuiDir dir)
     * }
     */
    public static MemorySegment igIsActiveIdUsingNavDir$address() {
        return igIsActiveIdUsingNavDir.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsActiveIdUsingNavDir(ImGuiDir dir)
     * }
     */
    public static boolean igIsActiveIdUsingNavDir(int dir) {
        var mh$ = igIsActiveIdUsingNavDir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsActiveIdUsingNavDir", dir);
            }
            return (boolean)mh$.invokeExact(dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetKeyOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetKeyOwner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetKeyOwner(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igGetKeyOwner$descriptor() {
        return igGetKeyOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetKeyOwner(ImGuiKey key)
     * }
     */
    public static MethodHandle igGetKeyOwner$handle() {
        return igGetKeyOwner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetKeyOwner(ImGuiKey key)
     * }
     */
    public static MemorySegment igGetKeyOwner$address() {
        return igGetKeyOwner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetKeyOwner(ImGuiKey key)
     * }
     */
    public static int igGetKeyOwner(int key) {
        var mh$ = igGetKeyOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetKeyOwner", key);
            }
            return (int)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetKeyOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetKeyOwner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetKeyOwner(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)
     * }
     */
    public static FunctionDescriptor igSetKeyOwner$descriptor() {
        return igSetKeyOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetKeyOwner(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)
     * }
     */
    public static MethodHandle igSetKeyOwner$handle() {
        return igSetKeyOwner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetKeyOwner(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)
     * }
     */
    public static MemorySegment igSetKeyOwner$address() {
        return igSetKeyOwner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetKeyOwner(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)
     * }
     */
    public static void igSetKeyOwner(int key, int owner_id, int flags) {
        var mh$ = igSetKeyOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetKeyOwner", key, owner_id, flags);
            }
            mh$.invokeExact(key, owner_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetKeyOwnersForKeyChord {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetKeyOwnersForKeyChord");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetKeyOwnersForKeyChord(ImGuiKeyChord key, ImGuiID owner_id, ImGuiInputFlags flags)
     * }
     */
    public static FunctionDescriptor igSetKeyOwnersForKeyChord$descriptor() {
        return igSetKeyOwnersForKeyChord.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetKeyOwnersForKeyChord(ImGuiKeyChord key, ImGuiID owner_id, ImGuiInputFlags flags)
     * }
     */
    public static MethodHandle igSetKeyOwnersForKeyChord$handle() {
        return igSetKeyOwnersForKeyChord.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetKeyOwnersForKeyChord(ImGuiKeyChord key, ImGuiID owner_id, ImGuiInputFlags flags)
     * }
     */
    public static MemorySegment igSetKeyOwnersForKeyChord$address() {
        return igSetKeyOwnersForKeyChord.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetKeyOwnersForKeyChord(ImGuiKeyChord key, ImGuiID owner_id, ImGuiInputFlags flags)
     * }
     */
    public static void igSetKeyOwnersForKeyChord(int key, int owner_id, int flags) {
        var mh$ = igSetKeyOwnersForKeyChord.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetKeyOwnersForKeyChord", key, owner_id, flags);
            }
            mh$.invokeExact(key, owner_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetItemKeyOwner_InputFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetItemKeyOwner_InputFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetItemKeyOwner_InputFlags(ImGuiKey key, ImGuiInputFlags flags)
     * }
     */
    public static FunctionDescriptor igSetItemKeyOwner_InputFlags$descriptor() {
        return igSetItemKeyOwner_InputFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetItemKeyOwner_InputFlags(ImGuiKey key, ImGuiInputFlags flags)
     * }
     */
    public static MethodHandle igSetItemKeyOwner_InputFlags$handle() {
        return igSetItemKeyOwner_InputFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetItemKeyOwner_InputFlags(ImGuiKey key, ImGuiInputFlags flags)
     * }
     */
    public static MemorySegment igSetItemKeyOwner_InputFlags$address() {
        return igSetItemKeyOwner_InputFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetItemKeyOwner_InputFlags(ImGuiKey key, ImGuiInputFlags flags)
     * }
     */
    public static void igSetItemKeyOwner_InputFlags(int key, int flags) {
        var mh$ = igSetItemKeyOwner_InputFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetItemKeyOwner_InputFlags", key, flags);
            }
            mh$.invokeExact(key, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTestKeyOwner {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTestKeyOwner");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTestKeyOwner(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igTestKeyOwner$descriptor() {
        return igTestKeyOwner.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTestKeyOwner(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igTestKeyOwner$handle() {
        return igTestKeyOwner.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTestKeyOwner(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igTestKeyOwner$address() {
        return igTestKeyOwner.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTestKeyOwner(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static boolean igTestKeyOwner(int key, int owner_id) {
        var mh$ = igTestKeyOwner.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTestKeyOwner", key, owner_id);
            }
            return (boolean)mh$.invokeExact(key, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetKeyOwnerData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetKeyOwnerData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKeyOwnerData *igGetKeyOwnerData(ImGuiContext *ctx, ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igGetKeyOwnerData$descriptor() {
        return igGetKeyOwnerData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKeyOwnerData *igGetKeyOwnerData(ImGuiContext *ctx, ImGuiKey key)
     * }
     */
    public static MethodHandle igGetKeyOwnerData$handle() {
        return igGetKeyOwnerData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKeyOwnerData *igGetKeyOwnerData(ImGuiContext *ctx, ImGuiKey key)
     * }
     */
    public static MemorySegment igGetKeyOwnerData$address() {
        return igGetKeyOwnerData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKeyOwnerData *igGetKeyOwnerData(ImGuiContext *ctx, ImGuiKey key)
     * }
     */
    public static MemorySegment igGetKeyOwnerData(MemorySegment ctx, int key) {
        var mh$ = igGetKeyOwnerData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetKeyOwnerData", ctx, key);
            }
            return (MemorySegment)mh$.invokeExact(ctx, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsKeyDown_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsKeyDown_ID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsKeyDown_ID(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igIsKeyDown_ID$descriptor() {
        return igIsKeyDown_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsKeyDown_ID(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igIsKeyDown_ID$handle() {
        return igIsKeyDown_ID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsKeyDown_ID(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igIsKeyDown_ID$address() {
        return igIsKeyDown_ID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsKeyDown_ID(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static boolean igIsKeyDown_ID(int key, int owner_id) {
        var mh$ = igIsKeyDown_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsKeyDown_ID", key, owner_id);
            }
            return (boolean)mh$.invokeExact(key, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsKeyPressed_InputFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsKeyPressed_InputFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsKeyPressed_InputFlags(ImGuiKey key, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igIsKeyPressed_InputFlags$descriptor() {
        return igIsKeyPressed_InputFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsKeyPressed_InputFlags(ImGuiKey key, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igIsKeyPressed_InputFlags$handle() {
        return igIsKeyPressed_InputFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsKeyPressed_InputFlags(ImGuiKey key, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igIsKeyPressed_InputFlags$address() {
        return igIsKeyPressed_InputFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsKeyPressed_InputFlags(ImGuiKey key, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static boolean igIsKeyPressed_InputFlags(int key, int flags, int owner_id) {
        var mh$ = igIsKeyPressed_InputFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsKeyPressed_InputFlags", key, flags, owner_id);
            }
            return (boolean)mh$.invokeExact(key, flags, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsKeyReleased_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsKeyReleased_ID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsKeyReleased_ID(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igIsKeyReleased_ID$descriptor() {
        return igIsKeyReleased_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsKeyReleased_ID(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igIsKeyReleased_ID$handle() {
        return igIsKeyReleased_ID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsKeyReleased_ID(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igIsKeyReleased_ID$address() {
        return igIsKeyReleased_ID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsKeyReleased_ID(ImGuiKey key, ImGuiID owner_id)
     * }
     */
    public static boolean igIsKeyReleased_ID(int key, int owner_id) {
        var mh$ = igIsKeyReleased_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsKeyReleased_ID", key, owner_id);
            }
            return (boolean)mh$.invokeExact(key, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsKeyChordPressed_InputFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsKeyChordPressed_InputFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsKeyChordPressed_InputFlags(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igIsKeyChordPressed_InputFlags$descriptor() {
        return igIsKeyChordPressed_InputFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsKeyChordPressed_InputFlags(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igIsKeyChordPressed_InputFlags$handle() {
        return igIsKeyChordPressed_InputFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsKeyChordPressed_InputFlags(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igIsKeyChordPressed_InputFlags$address() {
        return igIsKeyChordPressed_InputFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsKeyChordPressed_InputFlags(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static boolean igIsKeyChordPressed_InputFlags(int key_chord, int flags, int owner_id) {
        var mh$ = igIsKeyChordPressed_InputFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsKeyChordPressed_InputFlags", key_chord, flags, owner_id);
            }
            return (boolean)mh$.invokeExact(key_chord, flags, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseDown_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseDown_ID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseDown_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igIsMouseDown_ID$descriptor() {
        return igIsMouseDown_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseDown_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igIsMouseDown_ID$handle() {
        return igIsMouseDown_ID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseDown_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igIsMouseDown_ID$address() {
        return igIsMouseDown_ID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseDown_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static boolean igIsMouseDown_ID(int button, int owner_id) {
        var mh$ = igIsMouseDown_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseDown_ID", button, owner_id);
            }
            return (boolean)mh$.invokeExact(button, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseClicked_InputFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseClicked_InputFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseClicked_InputFlags(ImGuiMouseButton button, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igIsMouseClicked_InputFlags$descriptor() {
        return igIsMouseClicked_InputFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseClicked_InputFlags(ImGuiMouseButton button, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igIsMouseClicked_InputFlags$handle() {
        return igIsMouseClicked_InputFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseClicked_InputFlags(ImGuiMouseButton button, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igIsMouseClicked_InputFlags$address() {
        return igIsMouseClicked_InputFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseClicked_InputFlags(ImGuiMouseButton button, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static boolean igIsMouseClicked_InputFlags(int button, int flags, int owner_id) {
        var mh$ = igIsMouseClicked_InputFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseClicked_InputFlags", button, flags, owner_id);
            }
            return (boolean)mh$.invokeExact(button, flags, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseReleased_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseReleased_ID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseReleased_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igIsMouseReleased_ID$descriptor() {
        return igIsMouseReleased_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseReleased_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igIsMouseReleased_ID$handle() {
        return igIsMouseReleased_ID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseReleased_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igIsMouseReleased_ID$address() {
        return igIsMouseReleased_ID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseReleased_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static boolean igIsMouseReleased_ID(int button, int owner_id) {
        var mh$ = igIsMouseReleased_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseReleased_ID", button, owner_id);
            }
            return (boolean)mh$.invokeExact(button, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseDoubleClicked_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseDoubleClicked_ID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseDoubleClicked_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igIsMouseDoubleClicked_ID$descriptor() {
        return igIsMouseDoubleClicked_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseDoubleClicked_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igIsMouseDoubleClicked_ID$handle() {
        return igIsMouseDoubleClicked_ID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseDoubleClicked_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igIsMouseDoubleClicked_ID$address() {
        return igIsMouseDoubleClicked_ID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseDoubleClicked_ID(ImGuiMouseButton button, ImGuiID owner_id)
     * }
     */
    public static boolean igIsMouseDoubleClicked_ID(int button, int owner_id) {
        var mh$ = igIsMouseDoubleClicked_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseDoubleClicked_ID", button, owner_id);
            }
            return (boolean)mh$.invokeExact(button, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShortcut_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShortcut_ID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igShortcut_ID(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igShortcut_ID$descriptor() {
        return igShortcut_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igShortcut_ID(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igShortcut_ID$handle() {
        return igShortcut_ID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igShortcut_ID(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igShortcut_ID$address() {
        return igShortcut_ID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igShortcut_ID(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static boolean igShortcut_ID(int key_chord, int flags, int owner_id) {
        var mh$ = igShortcut_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShortcut_ID", key_chord, flags, owner_id);
            }
            return (boolean)mh$.invokeExact(key_chord, flags, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetShortcutRouting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetShortcutRouting");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSetShortcutRouting(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igSetShortcutRouting$descriptor() {
        return igSetShortcutRouting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSetShortcutRouting(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igSetShortcutRouting$handle() {
        return igSetShortcutRouting.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSetShortcutRouting(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igSetShortcutRouting$address() {
        return igSetShortcutRouting.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSetShortcutRouting(ImGuiKeyChord key_chord, ImGuiInputFlags flags, ImGuiID owner_id)
     * }
     */
    public static boolean igSetShortcutRouting(int key_chord, int flags, int owner_id) {
        var mh$ = igSetShortcutRouting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetShortcutRouting", key_chord, flags, owner_id);
            }
            return (boolean)mh$.invokeExact(key_chord, flags, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTestShortcutRouting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTestShortcutRouting");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTestShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id)
     * }
     */
    public static FunctionDescriptor igTestShortcutRouting$descriptor() {
        return igTestShortcutRouting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTestShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id)
     * }
     */
    public static MethodHandle igTestShortcutRouting$handle() {
        return igTestShortcutRouting.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTestShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id)
     * }
     */
    public static MemorySegment igTestShortcutRouting$address() {
        return igTestShortcutRouting.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTestShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id)
     * }
     */
    public static boolean igTestShortcutRouting(int key_chord, int owner_id) {
        var mh$ = igTestShortcutRouting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTestShortcutRouting", key_chord, owner_id);
            }
            return (boolean)mh$.invokeExact(key_chord, owner_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetShortcutRoutingData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetShortcutRoutingData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingData *igGetShortcutRoutingData(ImGuiKeyChord key_chord)
     * }
     */
    public static FunctionDescriptor igGetShortcutRoutingData$descriptor() {
        return igGetShortcutRoutingData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingData *igGetShortcutRoutingData(ImGuiKeyChord key_chord)
     * }
     */
    public static MethodHandle igGetShortcutRoutingData$handle() {
        return igGetShortcutRoutingData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingData *igGetShortcutRoutingData(ImGuiKeyChord key_chord)
     * }
     */
    public static MemorySegment igGetShortcutRoutingData$address() {
        return igGetShortcutRoutingData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingData *igGetShortcutRoutingData(ImGuiKeyChord key_chord)
     * }
     */
    public static MemorySegment igGetShortcutRoutingData(int key_chord) {
        var mh$ = igGetShortcutRoutingData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetShortcutRoutingData", key_chord);
            }
            return (MemorySegment)mh$.invokeExact(key_chord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextInitialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextInitialize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextInitialize(ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor igDockContextInitialize$descriptor() {
        return igDockContextInitialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextInitialize(ImGuiContext *ctx)
     * }
     */
    public static MethodHandle igDockContextInitialize$handle() {
        return igDockContextInitialize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextInitialize(ImGuiContext *ctx)
     * }
     */
    public static MemorySegment igDockContextInitialize$address() {
        return igDockContextInitialize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextInitialize(ImGuiContext *ctx)
     * }
     */
    public static void igDockContextInitialize(MemorySegment ctx) {
        var mh$ = igDockContextInitialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextInitialize", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextShutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextShutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextShutdown(ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor igDockContextShutdown$descriptor() {
        return igDockContextShutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextShutdown(ImGuiContext *ctx)
     * }
     */
    public static MethodHandle igDockContextShutdown$handle() {
        return igDockContextShutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextShutdown(ImGuiContext *ctx)
     * }
     */
    public static MemorySegment igDockContextShutdown$address() {
        return igDockContextShutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextShutdown(ImGuiContext *ctx)
     * }
     */
    public static void igDockContextShutdown(MemorySegment ctx) {
        var mh$ = igDockContextShutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextShutdown", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextClearNodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextClearNodes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextClearNodes(ImGuiContext *ctx, ImGuiID root_id, bool clear_settings_refs)
     * }
     */
    public static FunctionDescriptor igDockContextClearNodes$descriptor() {
        return igDockContextClearNodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextClearNodes(ImGuiContext *ctx, ImGuiID root_id, bool clear_settings_refs)
     * }
     */
    public static MethodHandle igDockContextClearNodes$handle() {
        return igDockContextClearNodes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextClearNodes(ImGuiContext *ctx, ImGuiID root_id, bool clear_settings_refs)
     * }
     */
    public static MemorySegment igDockContextClearNodes$address() {
        return igDockContextClearNodes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextClearNodes(ImGuiContext *ctx, ImGuiID root_id, bool clear_settings_refs)
     * }
     */
    public static void igDockContextClearNodes(MemorySegment ctx, int root_id, boolean clear_settings_refs) {
        var mh$ = igDockContextClearNodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextClearNodes", ctx, root_id, clear_settings_refs);
            }
            mh$.invokeExact(ctx, root_id, clear_settings_refs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextRebuildNodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextRebuildNodes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextRebuildNodes(ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor igDockContextRebuildNodes$descriptor() {
        return igDockContextRebuildNodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextRebuildNodes(ImGuiContext *ctx)
     * }
     */
    public static MethodHandle igDockContextRebuildNodes$handle() {
        return igDockContextRebuildNodes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextRebuildNodes(ImGuiContext *ctx)
     * }
     */
    public static MemorySegment igDockContextRebuildNodes$address() {
        return igDockContextRebuildNodes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextRebuildNodes(ImGuiContext *ctx)
     * }
     */
    public static void igDockContextRebuildNodes(MemorySegment ctx) {
        var mh$ = igDockContextRebuildNodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextRebuildNodes", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextNewFrameUpdateUndocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextNewFrameUpdateUndocking");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextNewFrameUpdateUndocking(ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor igDockContextNewFrameUpdateUndocking$descriptor() {
        return igDockContextNewFrameUpdateUndocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextNewFrameUpdateUndocking(ImGuiContext *ctx)
     * }
     */
    public static MethodHandle igDockContextNewFrameUpdateUndocking$handle() {
        return igDockContextNewFrameUpdateUndocking.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextNewFrameUpdateUndocking(ImGuiContext *ctx)
     * }
     */
    public static MemorySegment igDockContextNewFrameUpdateUndocking$address() {
        return igDockContextNewFrameUpdateUndocking.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextNewFrameUpdateUndocking(ImGuiContext *ctx)
     * }
     */
    public static void igDockContextNewFrameUpdateUndocking(MemorySegment ctx) {
        var mh$ = igDockContextNewFrameUpdateUndocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextNewFrameUpdateUndocking", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextNewFrameUpdateDocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextNewFrameUpdateDocking");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextNewFrameUpdateDocking(ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor igDockContextNewFrameUpdateDocking$descriptor() {
        return igDockContextNewFrameUpdateDocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextNewFrameUpdateDocking(ImGuiContext *ctx)
     * }
     */
    public static MethodHandle igDockContextNewFrameUpdateDocking$handle() {
        return igDockContextNewFrameUpdateDocking.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextNewFrameUpdateDocking(ImGuiContext *ctx)
     * }
     */
    public static MemorySegment igDockContextNewFrameUpdateDocking$address() {
        return igDockContextNewFrameUpdateDocking.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextNewFrameUpdateDocking(ImGuiContext *ctx)
     * }
     */
    public static void igDockContextNewFrameUpdateDocking(MemorySegment ctx) {
        var mh$ = igDockContextNewFrameUpdateDocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextNewFrameUpdateDocking", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextEndFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextEndFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextEndFrame(ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor igDockContextEndFrame$descriptor() {
        return igDockContextEndFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextEndFrame(ImGuiContext *ctx)
     * }
     */
    public static MethodHandle igDockContextEndFrame$handle() {
        return igDockContextEndFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextEndFrame(ImGuiContext *ctx)
     * }
     */
    public static MemorySegment igDockContextEndFrame$address() {
        return igDockContextEndFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextEndFrame(ImGuiContext *ctx)
     * }
     */
    public static void igDockContextEndFrame(MemorySegment ctx) {
        var mh$ = igDockContextEndFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextEndFrame", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextGenNodeID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextGenNodeID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igDockContextGenNodeID(ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor igDockContextGenNodeID$descriptor() {
        return igDockContextGenNodeID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igDockContextGenNodeID(ImGuiContext *ctx)
     * }
     */
    public static MethodHandle igDockContextGenNodeID$handle() {
        return igDockContextGenNodeID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igDockContextGenNodeID(ImGuiContext *ctx)
     * }
     */
    public static MemorySegment igDockContextGenNodeID$address() {
        return igDockContextGenNodeID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igDockContextGenNodeID(ImGuiContext *ctx)
     * }
     */
    public static int igDockContextGenNodeID(MemorySegment ctx) {
        var mh$ = igDockContextGenNodeID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextGenNodeID", ctx);
            }
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextQueueDock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextQueueDock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextQueueDock(ImGuiContext *ctx, ImGuiWindow *target, ImGuiDockNode *target_node, ImGuiWindow *payload, ImGuiDir split_dir, float split_ratio, bool split_outer)
     * }
     */
    public static FunctionDescriptor igDockContextQueueDock$descriptor() {
        return igDockContextQueueDock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextQueueDock(ImGuiContext *ctx, ImGuiWindow *target, ImGuiDockNode *target_node, ImGuiWindow *payload, ImGuiDir split_dir, float split_ratio, bool split_outer)
     * }
     */
    public static MethodHandle igDockContextQueueDock$handle() {
        return igDockContextQueueDock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextQueueDock(ImGuiContext *ctx, ImGuiWindow *target, ImGuiDockNode *target_node, ImGuiWindow *payload, ImGuiDir split_dir, float split_ratio, bool split_outer)
     * }
     */
    public static MemorySegment igDockContextQueueDock$address() {
        return igDockContextQueueDock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextQueueDock(ImGuiContext *ctx, ImGuiWindow *target, ImGuiDockNode *target_node, ImGuiWindow *payload, ImGuiDir split_dir, float split_ratio, bool split_outer)
     * }
     */
    public static void igDockContextQueueDock(MemorySegment ctx, MemorySegment target, MemorySegment target_node, MemorySegment payload, int split_dir, float split_ratio, boolean split_outer) {
        var mh$ = igDockContextQueueDock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextQueueDock", ctx, target, target_node, payload, split_dir, split_ratio, split_outer);
            }
            mh$.invokeExact(ctx, target, target_node, payload, split_dir, split_ratio, split_outer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextQueueUndockWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextQueueUndockWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextQueueUndockWindow(ImGuiContext *ctx, ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igDockContextQueueUndockWindow$descriptor() {
        return igDockContextQueueUndockWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextQueueUndockWindow(ImGuiContext *ctx, ImGuiWindow *window)
     * }
     */
    public static MethodHandle igDockContextQueueUndockWindow$handle() {
        return igDockContextQueueUndockWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextQueueUndockWindow(ImGuiContext *ctx, ImGuiWindow *window)
     * }
     */
    public static MemorySegment igDockContextQueueUndockWindow$address() {
        return igDockContextQueueUndockWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextQueueUndockWindow(ImGuiContext *ctx, ImGuiWindow *window)
     * }
     */
    public static void igDockContextQueueUndockWindow(MemorySegment ctx, MemorySegment window) {
        var mh$ = igDockContextQueueUndockWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextQueueUndockWindow", ctx, window);
            }
            mh$.invokeExact(ctx, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextQueueUndockNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextQueueUndockNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextQueueUndockNode(ImGuiContext *ctx, ImGuiDockNode *node)
     * }
     */
    public static FunctionDescriptor igDockContextQueueUndockNode$descriptor() {
        return igDockContextQueueUndockNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextQueueUndockNode(ImGuiContext *ctx, ImGuiDockNode *node)
     * }
     */
    public static MethodHandle igDockContextQueueUndockNode$handle() {
        return igDockContextQueueUndockNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextQueueUndockNode(ImGuiContext *ctx, ImGuiDockNode *node)
     * }
     */
    public static MemorySegment igDockContextQueueUndockNode$address() {
        return igDockContextQueueUndockNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextQueueUndockNode(ImGuiContext *ctx, ImGuiDockNode *node)
     * }
     */
    public static void igDockContextQueueUndockNode(MemorySegment ctx, MemorySegment node) {
        var mh$ = igDockContextQueueUndockNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextQueueUndockNode", ctx, node);
            }
            mh$.invokeExact(ctx, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextProcessUndockWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextProcessUndockWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextProcessUndockWindow(ImGuiContext *ctx, ImGuiWindow *window, bool clear_persistent_docking_ref)
     * }
     */
    public static FunctionDescriptor igDockContextProcessUndockWindow$descriptor() {
        return igDockContextProcessUndockWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextProcessUndockWindow(ImGuiContext *ctx, ImGuiWindow *window, bool clear_persistent_docking_ref)
     * }
     */
    public static MethodHandle igDockContextProcessUndockWindow$handle() {
        return igDockContextProcessUndockWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextProcessUndockWindow(ImGuiContext *ctx, ImGuiWindow *window, bool clear_persistent_docking_ref)
     * }
     */
    public static MemorySegment igDockContextProcessUndockWindow$address() {
        return igDockContextProcessUndockWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextProcessUndockWindow(ImGuiContext *ctx, ImGuiWindow *window, bool clear_persistent_docking_ref)
     * }
     */
    public static void igDockContextProcessUndockWindow(MemorySegment ctx, MemorySegment window, boolean clear_persistent_docking_ref) {
        var mh$ = igDockContextProcessUndockWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextProcessUndockWindow", ctx, window, clear_persistent_docking_ref);
            }
            mh$.invokeExact(ctx, window, clear_persistent_docking_ref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextProcessUndockNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextProcessUndockNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockContextProcessUndockNode(ImGuiContext *ctx, ImGuiDockNode *node)
     * }
     */
    public static FunctionDescriptor igDockContextProcessUndockNode$descriptor() {
        return igDockContextProcessUndockNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockContextProcessUndockNode(ImGuiContext *ctx, ImGuiDockNode *node)
     * }
     */
    public static MethodHandle igDockContextProcessUndockNode$handle() {
        return igDockContextProcessUndockNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockContextProcessUndockNode(ImGuiContext *ctx, ImGuiDockNode *node)
     * }
     */
    public static MemorySegment igDockContextProcessUndockNode$address() {
        return igDockContextProcessUndockNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockContextProcessUndockNode(ImGuiContext *ctx, ImGuiDockNode *node)
     * }
     */
    public static void igDockContextProcessUndockNode(MemorySegment ctx, MemorySegment node) {
        var mh$ = igDockContextProcessUndockNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextProcessUndockNode", ctx, node);
            }
            mh$.invokeExact(ctx, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextCalcDropPosForDocking {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextCalcDropPosForDocking");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDockContextCalcDropPosForDocking(ImGuiWindow *target, ImGuiDockNode *target_node, ImGuiWindow *payload_window, ImGuiDockNode *payload_node, ImGuiDir split_dir, bool split_outer, ImVec2 *out_pos)
     * }
     */
    public static FunctionDescriptor igDockContextCalcDropPosForDocking$descriptor() {
        return igDockContextCalcDropPosForDocking.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDockContextCalcDropPosForDocking(ImGuiWindow *target, ImGuiDockNode *target_node, ImGuiWindow *payload_window, ImGuiDockNode *payload_node, ImGuiDir split_dir, bool split_outer, ImVec2 *out_pos)
     * }
     */
    public static MethodHandle igDockContextCalcDropPosForDocking$handle() {
        return igDockContextCalcDropPosForDocking.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDockContextCalcDropPosForDocking(ImGuiWindow *target, ImGuiDockNode *target_node, ImGuiWindow *payload_window, ImGuiDockNode *payload_node, ImGuiDir split_dir, bool split_outer, ImVec2 *out_pos)
     * }
     */
    public static MemorySegment igDockContextCalcDropPosForDocking$address() {
        return igDockContextCalcDropPosForDocking.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDockContextCalcDropPosForDocking(ImGuiWindow *target, ImGuiDockNode *target_node, ImGuiWindow *payload_window, ImGuiDockNode *payload_node, ImGuiDir split_dir, bool split_outer, ImVec2 *out_pos)
     * }
     */
    public static boolean igDockContextCalcDropPosForDocking(MemorySegment target, MemorySegment target_node, MemorySegment payload_window, MemorySegment payload_node, int split_dir, boolean split_outer, MemorySegment out_pos) {
        var mh$ = igDockContextCalcDropPosForDocking.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextCalcDropPosForDocking", target, target_node, payload_window, payload_node, split_dir, split_outer, out_pos);
            }
            return (boolean)mh$.invokeExact(target, target_node, payload_window, payload_node, split_dir, split_outer, out_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockContextFindNodeByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockContextFindNodeByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockContextFindNodeByID(ImGuiContext *ctx, ImGuiID id)
     * }
     */
    public static FunctionDescriptor igDockContextFindNodeByID$descriptor() {
        return igDockContextFindNodeByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockContextFindNodeByID(ImGuiContext *ctx, ImGuiID id)
     * }
     */
    public static MethodHandle igDockContextFindNodeByID$handle() {
        return igDockContextFindNodeByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockContextFindNodeByID(ImGuiContext *ctx, ImGuiID id)
     * }
     */
    public static MemorySegment igDockContextFindNodeByID$address() {
        return igDockContextFindNodeByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockContextFindNodeByID(ImGuiContext *ctx, ImGuiID id)
     * }
     */
    public static MemorySegment igDockContextFindNodeByID(MemorySegment ctx, int id) {
        var mh$ = igDockContextFindNodeByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockContextFindNodeByID", ctx, id);
            }
            return (MemorySegment)mh$.invokeExact(ctx, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockNodeWindowMenuHandler_Default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockNodeWindowMenuHandler_Default");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockNodeWindowMenuHandler_Default(ImGuiContext *ctx, ImGuiDockNode *node, ImGuiTabBar *tab_bar)
     * }
     */
    public static FunctionDescriptor igDockNodeWindowMenuHandler_Default$descriptor() {
        return igDockNodeWindowMenuHandler_Default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockNodeWindowMenuHandler_Default(ImGuiContext *ctx, ImGuiDockNode *node, ImGuiTabBar *tab_bar)
     * }
     */
    public static MethodHandle igDockNodeWindowMenuHandler_Default$handle() {
        return igDockNodeWindowMenuHandler_Default.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockNodeWindowMenuHandler_Default(ImGuiContext *ctx, ImGuiDockNode *node, ImGuiTabBar *tab_bar)
     * }
     */
    public static MemorySegment igDockNodeWindowMenuHandler_Default$address() {
        return igDockNodeWindowMenuHandler_Default.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockNodeWindowMenuHandler_Default(ImGuiContext *ctx, ImGuiDockNode *node, ImGuiTabBar *tab_bar)
     * }
     */
    public static void igDockNodeWindowMenuHandler_Default(MemorySegment ctx, MemorySegment node, MemorySegment tab_bar) {
        var mh$ = igDockNodeWindowMenuHandler_Default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockNodeWindowMenuHandler_Default", ctx, node, tab_bar);
            }
            mh$.invokeExact(ctx, node, tab_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockNodeBeginAmendTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockNodeBeginAmendTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDockNodeBeginAmendTabBar(ImGuiDockNode *node)
     * }
     */
    public static FunctionDescriptor igDockNodeBeginAmendTabBar$descriptor() {
        return igDockNodeBeginAmendTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDockNodeBeginAmendTabBar(ImGuiDockNode *node)
     * }
     */
    public static MethodHandle igDockNodeBeginAmendTabBar$handle() {
        return igDockNodeBeginAmendTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDockNodeBeginAmendTabBar(ImGuiDockNode *node)
     * }
     */
    public static MemorySegment igDockNodeBeginAmendTabBar$address() {
        return igDockNodeBeginAmendTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDockNodeBeginAmendTabBar(ImGuiDockNode *node)
     * }
     */
    public static boolean igDockNodeBeginAmendTabBar(MemorySegment node) {
        var mh$ = igDockNodeBeginAmendTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockNodeBeginAmendTabBar", node);
            }
            return (boolean)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockNodeEndAmendTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockNodeEndAmendTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockNodeEndAmendTabBar()
     * }
     */
    public static FunctionDescriptor igDockNodeEndAmendTabBar$descriptor() {
        return igDockNodeEndAmendTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockNodeEndAmendTabBar()
     * }
     */
    public static MethodHandle igDockNodeEndAmendTabBar$handle() {
        return igDockNodeEndAmendTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockNodeEndAmendTabBar()
     * }
     */
    public static MemorySegment igDockNodeEndAmendTabBar$address() {
        return igDockNodeEndAmendTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockNodeEndAmendTabBar()
     * }
     */
    public static void igDockNodeEndAmendTabBar() {
        var mh$ = igDockNodeEndAmendTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockNodeEndAmendTabBar");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockNodeGetRootNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockNodeGetRootNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockNodeGetRootNode(ImGuiDockNode *node)
     * }
     */
    public static FunctionDescriptor igDockNodeGetRootNode$descriptor() {
        return igDockNodeGetRootNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockNodeGetRootNode(ImGuiDockNode *node)
     * }
     */
    public static MethodHandle igDockNodeGetRootNode$handle() {
        return igDockNodeGetRootNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockNodeGetRootNode(ImGuiDockNode *node)
     * }
     */
    public static MemorySegment igDockNodeGetRootNode$address() {
        return igDockNodeGetRootNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockNodeGetRootNode(ImGuiDockNode *node)
     * }
     */
    public static MemorySegment igDockNodeGetRootNode(MemorySegment node) {
        var mh$ = igDockNodeGetRootNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockNodeGetRootNode", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockNodeIsInHierarchyOf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockNodeIsInHierarchyOf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDockNodeIsInHierarchyOf(ImGuiDockNode *node, ImGuiDockNode *parent)
     * }
     */
    public static FunctionDescriptor igDockNodeIsInHierarchyOf$descriptor() {
        return igDockNodeIsInHierarchyOf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDockNodeIsInHierarchyOf(ImGuiDockNode *node, ImGuiDockNode *parent)
     * }
     */
    public static MethodHandle igDockNodeIsInHierarchyOf$handle() {
        return igDockNodeIsInHierarchyOf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDockNodeIsInHierarchyOf(ImGuiDockNode *node, ImGuiDockNode *parent)
     * }
     */
    public static MemorySegment igDockNodeIsInHierarchyOf$address() {
        return igDockNodeIsInHierarchyOf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDockNodeIsInHierarchyOf(ImGuiDockNode *node, ImGuiDockNode *parent)
     * }
     */
    public static boolean igDockNodeIsInHierarchyOf(MemorySegment node, MemorySegment parent) {
        var mh$ = igDockNodeIsInHierarchyOf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockNodeIsInHierarchyOf", node, parent);
            }
            return (boolean)mh$.invokeExact(node, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockNodeGetDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockNodeGetDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igDockNodeGetDepth(const ImGuiDockNode *node)
     * }
     */
    public static FunctionDescriptor igDockNodeGetDepth$descriptor() {
        return igDockNodeGetDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igDockNodeGetDepth(const ImGuiDockNode *node)
     * }
     */
    public static MethodHandle igDockNodeGetDepth$handle() {
        return igDockNodeGetDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igDockNodeGetDepth(const ImGuiDockNode *node)
     * }
     */
    public static MemorySegment igDockNodeGetDepth$address() {
        return igDockNodeGetDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igDockNodeGetDepth(const ImGuiDockNode *node)
     * }
     */
    public static int igDockNodeGetDepth(MemorySegment node) {
        var mh$ = igDockNodeGetDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockNodeGetDepth", node);
            }
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockNodeGetWindowMenuButtonId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockNodeGetWindowMenuButtonId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igDockNodeGetWindowMenuButtonId(const ImGuiDockNode *node)
     * }
     */
    public static FunctionDescriptor igDockNodeGetWindowMenuButtonId$descriptor() {
        return igDockNodeGetWindowMenuButtonId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igDockNodeGetWindowMenuButtonId(const ImGuiDockNode *node)
     * }
     */
    public static MethodHandle igDockNodeGetWindowMenuButtonId$handle() {
        return igDockNodeGetWindowMenuButtonId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igDockNodeGetWindowMenuButtonId(const ImGuiDockNode *node)
     * }
     */
    public static MemorySegment igDockNodeGetWindowMenuButtonId$address() {
        return igDockNodeGetWindowMenuButtonId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igDockNodeGetWindowMenuButtonId(const ImGuiDockNode *node)
     * }
     */
    public static int igDockNodeGetWindowMenuButtonId(MemorySegment node) {
        var mh$ = igDockNodeGetWindowMenuButtonId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockNodeGetWindowMenuButtonId", node);
            }
            return (int)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowDockNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowDockNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igGetWindowDockNode()
     * }
     */
    public static FunctionDescriptor igGetWindowDockNode$descriptor() {
        return igGetWindowDockNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igGetWindowDockNode()
     * }
     */
    public static MethodHandle igGetWindowDockNode$handle() {
        return igGetWindowDockNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igGetWindowDockNode()
     * }
     */
    public static MemorySegment igGetWindowDockNode$address() {
        return igGetWindowDockNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiDockNode *igGetWindowDockNode()
     * }
     */
    public static MemorySegment igGetWindowDockNode() {
        var mh$ = igGetWindowDockNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowDockNode");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowAlwaysWantOwnTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowAlwaysWantOwnTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igGetWindowAlwaysWantOwnTabBar(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igGetWindowAlwaysWantOwnTabBar$descriptor() {
        return igGetWindowAlwaysWantOwnTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igGetWindowAlwaysWantOwnTabBar(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igGetWindowAlwaysWantOwnTabBar$handle() {
        return igGetWindowAlwaysWantOwnTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igGetWindowAlwaysWantOwnTabBar(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igGetWindowAlwaysWantOwnTabBar$address() {
        return igGetWindowAlwaysWantOwnTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igGetWindowAlwaysWantOwnTabBar(ImGuiWindow *window)
     * }
     */
    public static boolean igGetWindowAlwaysWantOwnTabBar(MemorySegment window) {
        var mh$ = igGetWindowAlwaysWantOwnTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowAlwaysWantOwnTabBar", window);
            }
            return (boolean)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginDocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginDocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBeginDocked(ImGuiWindow *window, bool *p_open)
     * }
     */
    public static FunctionDescriptor igBeginDocked$descriptor() {
        return igBeginDocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBeginDocked(ImGuiWindow *window, bool *p_open)
     * }
     */
    public static MethodHandle igBeginDocked$handle() {
        return igBeginDocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBeginDocked(ImGuiWindow *window, bool *p_open)
     * }
     */
    public static MemorySegment igBeginDocked$address() {
        return igBeginDocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBeginDocked(ImGuiWindow *window, bool *p_open)
     * }
     */
    public static void igBeginDocked(MemorySegment window, MemorySegment p_open) {
        var mh$ = igBeginDocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginDocked", window, p_open);
            }
            mh$.invokeExact(window, p_open);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginDockableDragDropSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginDockableDragDropSource");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBeginDockableDragDropSource(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igBeginDockableDragDropSource$descriptor() {
        return igBeginDockableDragDropSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBeginDockableDragDropSource(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igBeginDockableDragDropSource$handle() {
        return igBeginDockableDragDropSource.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBeginDockableDragDropSource(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igBeginDockableDragDropSource$address() {
        return igBeginDockableDragDropSource.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBeginDockableDragDropSource(ImGuiWindow *window)
     * }
     */
    public static void igBeginDockableDragDropSource(MemorySegment window) {
        var mh$ = igBeginDockableDragDropSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginDockableDragDropSource", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginDockableDragDropTarget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginDockableDragDropTarget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBeginDockableDragDropTarget(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igBeginDockableDragDropTarget$descriptor() {
        return igBeginDockableDragDropTarget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBeginDockableDragDropTarget(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igBeginDockableDragDropTarget$handle() {
        return igBeginDockableDragDropTarget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBeginDockableDragDropTarget(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igBeginDockableDragDropTarget$address() {
        return igBeginDockableDragDropTarget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBeginDockableDragDropTarget(ImGuiWindow *window)
     * }
     */
    public static void igBeginDockableDragDropTarget(MemorySegment window) {
        var mh$ = igBeginDockableDragDropTarget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginDockableDragDropTarget", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowDock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowDock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowDock(ImGuiWindow *window, ImGuiID dock_id, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowDock$descriptor() {
        return igSetWindowDock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowDock(ImGuiWindow *window, ImGuiID dock_id, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowDock$handle() {
        return igSetWindowDock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowDock(ImGuiWindow *window, ImGuiID dock_id, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowDock$address() {
        return igSetWindowDock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowDock(ImGuiWindow *window, ImGuiID dock_id, ImGuiCond cond)
     * }
     */
    public static void igSetWindowDock(MemorySegment window, int dock_id, int cond) {
        var mh$ = igSetWindowDock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowDock", window, dock_id, cond);
            }
            mh$.invokeExact(window, dock_id, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderDockWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderDockWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderDockWindow(const char *window_name, ImGuiID node_id)
     * }
     */
    public static FunctionDescriptor igDockBuilderDockWindow$descriptor() {
        return igDockBuilderDockWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderDockWindow(const char *window_name, ImGuiID node_id)
     * }
     */
    public static MethodHandle igDockBuilderDockWindow$handle() {
        return igDockBuilderDockWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderDockWindow(const char *window_name, ImGuiID node_id)
     * }
     */
    public static MemorySegment igDockBuilderDockWindow$address() {
        return igDockBuilderDockWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderDockWindow(const char *window_name, ImGuiID node_id)
     * }
     */
    public static void igDockBuilderDockWindow(MemorySegment window_name, int node_id) {
        var mh$ = igDockBuilderDockWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderDockWindow", window_name, node_id);
            }
            mh$.invokeExact(window_name, node_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderGetNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderGetNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockBuilderGetNode(ImGuiID node_id)
     * }
     */
    public static FunctionDescriptor igDockBuilderGetNode$descriptor() {
        return igDockBuilderGetNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockBuilderGetNode(ImGuiID node_id)
     * }
     */
    public static MethodHandle igDockBuilderGetNode$handle() {
        return igDockBuilderGetNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockBuilderGetNode(ImGuiID node_id)
     * }
     */
    public static MemorySegment igDockBuilderGetNode$address() {
        return igDockBuilderGetNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockBuilderGetNode(ImGuiID node_id)
     * }
     */
    public static MemorySegment igDockBuilderGetNode(int node_id) {
        var mh$ = igDockBuilderGetNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderGetNode", node_id);
            }
            return (MemorySegment)mh$.invokeExact(node_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderGetCentralNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderGetCentralNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockBuilderGetCentralNode(ImGuiID node_id)
     * }
     */
    public static FunctionDescriptor igDockBuilderGetCentralNode$descriptor() {
        return igDockBuilderGetCentralNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockBuilderGetCentralNode(ImGuiID node_id)
     * }
     */
    public static MethodHandle igDockBuilderGetCentralNode$handle() {
        return igDockBuilderGetCentralNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockBuilderGetCentralNode(ImGuiID node_id)
     * }
     */
    public static MemorySegment igDockBuilderGetCentralNode$address() {
        return igDockBuilderGetCentralNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiDockNode *igDockBuilderGetCentralNode(ImGuiID node_id)
     * }
     */
    public static MemorySegment igDockBuilderGetCentralNode(int node_id) {
        var mh$ = igDockBuilderGetCentralNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderGetCentralNode", node_id);
            }
            return (MemorySegment)mh$.invokeExact(node_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderAddNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderAddNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igDockBuilderAddNode(ImGuiID node_id, ImGuiDockNodeFlags flags)
     * }
     */
    public static FunctionDescriptor igDockBuilderAddNode$descriptor() {
        return igDockBuilderAddNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igDockBuilderAddNode(ImGuiID node_id, ImGuiDockNodeFlags flags)
     * }
     */
    public static MethodHandle igDockBuilderAddNode$handle() {
        return igDockBuilderAddNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igDockBuilderAddNode(ImGuiID node_id, ImGuiDockNodeFlags flags)
     * }
     */
    public static MemorySegment igDockBuilderAddNode$address() {
        return igDockBuilderAddNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igDockBuilderAddNode(ImGuiID node_id, ImGuiDockNodeFlags flags)
     * }
     */
    public static int igDockBuilderAddNode(int node_id, int flags) {
        var mh$ = igDockBuilderAddNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderAddNode", node_id, flags);
            }
            return (int)mh$.invokeExact(node_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderRemoveNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderRemoveNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNode(ImGuiID node_id)
     * }
     */
    public static FunctionDescriptor igDockBuilderRemoveNode$descriptor() {
        return igDockBuilderRemoveNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNode(ImGuiID node_id)
     * }
     */
    public static MethodHandle igDockBuilderRemoveNode$handle() {
        return igDockBuilderRemoveNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNode(ImGuiID node_id)
     * }
     */
    public static MemorySegment igDockBuilderRemoveNode$address() {
        return igDockBuilderRemoveNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNode(ImGuiID node_id)
     * }
     */
    public static void igDockBuilderRemoveNode(int node_id) {
        var mh$ = igDockBuilderRemoveNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderRemoveNode", node_id);
            }
            mh$.invokeExact(node_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderRemoveNodeDockedWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderRemoveNodeDockedWindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNodeDockedWindows(ImGuiID node_id, bool clear_settings_refs)
     * }
     */
    public static FunctionDescriptor igDockBuilderRemoveNodeDockedWindows$descriptor() {
        return igDockBuilderRemoveNodeDockedWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNodeDockedWindows(ImGuiID node_id, bool clear_settings_refs)
     * }
     */
    public static MethodHandle igDockBuilderRemoveNodeDockedWindows$handle() {
        return igDockBuilderRemoveNodeDockedWindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNodeDockedWindows(ImGuiID node_id, bool clear_settings_refs)
     * }
     */
    public static MemorySegment igDockBuilderRemoveNodeDockedWindows$address() {
        return igDockBuilderRemoveNodeDockedWindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNodeDockedWindows(ImGuiID node_id, bool clear_settings_refs)
     * }
     */
    public static void igDockBuilderRemoveNodeDockedWindows(int node_id, boolean clear_settings_refs) {
        var mh$ = igDockBuilderRemoveNodeDockedWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderRemoveNodeDockedWindows", node_id, clear_settings_refs);
            }
            mh$.invokeExact(node_id, clear_settings_refs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderRemoveNodeChildNodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderRemoveNodeChildNodes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNodeChildNodes(ImGuiID node_id)
     * }
     */
    public static FunctionDescriptor igDockBuilderRemoveNodeChildNodes$descriptor() {
        return igDockBuilderRemoveNodeChildNodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNodeChildNodes(ImGuiID node_id)
     * }
     */
    public static MethodHandle igDockBuilderRemoveNodeChildNodes$handle() {
        return igDockBuilderRemoveNodeChildNodes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNodeChildNodes(ImGuiID node_id)
     * }
     */
    public static MemorySegment igDockBuilderRemoveNodeChildNodes$address() {
        return igDockBuilderRemoveNodeChildNodes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderRemoveNodeChildNodes(ImGuiID node_id)
     * }
     */
    public static void igDockBuilderRemoveNodeChildNodes(int node_id) {
        var mh$ = igDockBuilderRemoveNodeChildNodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderRemoveNodeChildNodes", node_id);
            }
            mh$.invokeExact(node_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderSetNodePos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderSetNodePos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderSetNodePos(ImGuiID node_id, ImVec2 pos)
     * }
     */
    public static FunctionDescriptor igDockBuilderSetNodePos$descriptor() {
        return igDockBuilderSetNodePos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderSetNodePos(ImGuiID node_id, ImVec2 pos)
     * }
     */
    public static MethodHandle igDockBuilderSetNodePos$handle() {
        return igDockBuilderSetNodePos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderSetNodePos(ImGuiID node_id, ImVec2 pos)
     * }
     */
    public static MemorySegment igDockBuilderSetNodePos$address() {
        return igDockBuilderSetNodePos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderSetNodePos(ImGuiID node_id, ImVec2 pos)
     * }
     */
    public static void igDockBuilderSetNodePos(int node_id, MemorySegment pos) {
        var mh$ = igDockBuilderSetNodePos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderSetNodePos", node_id, pos);
            }
            mh$.invokeExact(node_id, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderSetNodeSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderSetNodeSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderSetNodeSize(ImGuiID node_id, ImVec2 size)
     * }
     */
    public static FunctionDescriptor igDockBuilderSetNodeSize$descriptor() {
        return igDockBuilderSetNodeSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderSetNodeSize(ImGuiID node_id, ImVec2 size)
     * }
     */
    public static MethodHandle igDockBuilderSetNodeSize$handle() {
        return igDockBuilderSetNodeSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderSetNodeSize(ImGuiID node_id, ImVec2 size)
     * }
     */
    public static MemorySegment igDockBuilderSetNodeSize$address() {
        return igDockBuilderSetNodeSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderSetNodeSize(ImGuiID node_id, ImVec2 size)
     * }
     */
    public static void igDockBuilderSetNodeSize(int node_id, MemorySegment size) {
        var mh$ = igDockBuilderSetNodeSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderSetNodeSize", node_id, size);
            }
            mh$.invokeExact(node_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderSplitNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderSplitNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igDockBuilderSplitNode(ImGuiID node_id, ImGuiDir split_dir, float size_ratio_for_node_at_dir, ImGuiID *out_id_at_dir, ImGuiID *out_id_at_opposite_dir)
     * }
     */
    public static FunctionDescriptor igDockBuilderSplitNode$descriptor() {
        return igDockBuilderSplitNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igDockBuilderSplitNode(ImGuiID node_id, ImGuiDir split_dir, float size_ratio_for_node_at_dir, ImGuiID *out_id_at_dir, ImGuiID *out_id_at_opposite_dir)
     * }
     */
    public static MethodHandle igDockBuilderSplitNode$handle() {
        return igDockBuilderSplitNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igDockBuilderSplitNode(ImGuiID node_id, ImGuiDir split_dir, float size_ratio_for_node_at_dir, ImGuiID *out_id_at_dir, ImGuiID *out_id_at_opposite_dir)
     * }
     */
    public static MemorySegment igDockBuilderSplitNode$address() {
        return igDockBuilderSplitNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igDockBuilderSplitNode(ImGuiID node_id, ImGuiDir split_dir, float size_ratio_for_node_at_dir, ImGuiID *out_id_at_dir, ImGuiID *out_id_at_opposite_dir)
     * }
     */
    public static int igDockBuilderSplitNode(int node_id, int split_dir, float size_ratio_for_node_at_dir, MemorySegment out_id_at_dir, MemorySegment out_id_at_opposite_dir) {
        var mh$ = igDockBuilderSplitNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderSplitNode", node_id, split_dir, size_ratio_for_node_at_dir, out_id_at_dir, out_id_at_opposite_dir);
            }
            return (int)mh$.invokeExact(node_id, split_dir, size_ratio_for_node_at_dir, out_id_at_dir, out_id_at_opposite_dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderCopyDockSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderCopyDockSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderCopyDockSpace(ImGuiID src_dockspace_id, ImGuiID dst_dockspace_id, ImVector_const_charPtr *in_window_remap_pairs)
     * }
     */
    public static FunctionDescriptor igDockBuilderCopyDockSpace$descriptor() {
        return igDockBuilderCopyDockSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderCopyDockSpace(ImGuiID src_dockspace_id, ImGuiID dst_dockspace_id, ImVector_const_charPtr *in_window_remap_pairs)
     * }
     */
    public static MethodHandle igDockBuilderCopyDockSpace$handle() {
        return igDockBuilderCopyDockSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderCopyDockSpace(ImGuiID src_dockspace_id, ImGuiID dst_dockspace_id, ImVector_const_charPtr *in_window_remap_pairs)
     * }
     */
    public static MemorySegment igDockBuilderCopyDockSpace$address() {
        return igDockBuilderCopyDockSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderCopyDockSpace(ImGuiID src_dockspace_id, ImGuiID dst_dockspace_id, ImVector_const_charPtr *in_window_remap_pairs)
     * }
     */
    public static void igDockBuilderCopyDockSpace(int src_dockspace_id, int dst_dockspace_id, MemorySegment in_window_remap_pairs) {
        var mh$ = igDockBuilderCopyDockSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderCopyDockSpace", src_dockspace_id, dst_dockspace_id, in_window_remap_pairs);
            }
            mh$.invokeExact(src_dockspace_id, dst_dockspace_id, in_window_remap_pairs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderCopyNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderCopyNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderCopyNode(ImGuiID src_node_id, ImGuiID dst_node_id, ImVector_ImGuiID *out_node_remap_pairs)
     * }
     */
    public static FunctionDescriptor igDockBuilderCopyNode$descriptor() {
        return igDockBuilderCopyNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderCopyNode(ImGuiID src_node_id, ImGuiID dst_node_id, ImVector_ImGuiID *out_node_remap_pairs)
     * }
     */
    public static MethodHandle igDockBuilderCopyNode$handle() {
        return igDockBuilderCopyNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderCopyNode(ImGuiID src_node_id, ImGuiID dst_node_id, ImVector_ImGuiID *out_node_remap_pairs)
     * }
     */
    public static MemorySegment igDockBuilderCopyNode$address() {
        return igDockBuilderCopyNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderCopyNode(ImGuiID src_node_id, ImGuiID dst_node_id, ImVector_ImGuiID *out_node_remap_pairs)
     * }
     */
    public static void igDockBuilderCopyNode(int src_node_id, int dst_node_id, MemorySegment out_node_remap_pairs) {
        var mh$ = igDockBuilderCopyNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderCopyNode", src_node_id, dst_node_id, out_node_remap_pairs);
            }
            mh$.invokeExact(src_node_id, dst_node_id, out_node_remap_pairs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderCopyWindowSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderCopyWindowSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderCopyWindowSettings(const char *src_name, const char *dst_name)
     * }
     */
    public static FunctionDescriptor igDockBuilderCopyWindowSettings$descriptor() {
        return igDockBuilderCopyWindowSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderCopyWindowSettings(const char *src_name, const char *dst_name)
     * }
     */
    public static MethodHandle igDockBuilderCopyWindowSettings$handle() {
        return igDockBuilderCopyWindowSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderCopyWindowSettings(const char *src_name, const char *dst_name)
     * }
     */
    public static MemorySegment igDockBuilderCopyWindowSettings$address() {
        return igDockBuilderCopyWindowSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderCopyWindowSettings(const char *src_name, const char *dst_name)
     * }
     */
    public static void igDockBuilderCopyWindowSettings(MemorySegment src_name, MemorySegment dst_name) {
        var mh$ = igDockBuilderCopyWindowSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderCopyWindowSettings", src_name, dst_name);
            }
            mh$.invokeExact(src_name, dst_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockBuilderFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockBuilderFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDockBuilderFinish(ImGuiID node_id)
     * }
     */
    public static FunctionDescriptor igDockBuilderFinish$descriptor() {
        return igDockBuilderFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDockBuilderFinish(ImGuiID node_id)
     * }
     */
    public static MethodHandle igDockBuilderFinish$handle() {
        return igDockBuilderFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDockBuilderFinish(ImGuiID node_id)
     * }
     */
    public static MemorySegment igDockBuilderFinish$address() {
        return igDockBuilderFinish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDockBuilderFinish(ImGuiID node_id)
     * }
     */
    public static void igDockBuilderFinish(int node_id) {
        var mh$ = igDockBuilderFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockBuilderFinish", node_id);
            }
            mh$.invokeExact(node_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushFocusScope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushFocusScope");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushFocusScope(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igPushFocusScope$descriptor() {
        return igPushFocusScope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushFocusScope(ImGuiID id)
     * }
     */
    public static MethodHandle igPushFocusScope$handle() {
        return igPushFocusScope.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushFocusScope(ImGuiID id)
     * }
     */
    public static MemorySegment igPushFocusScope$address() {
        return igPushFocusScope.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushFocusScope(ImGuiID id)
     * }
     */
    public static void igPushFocusScope(int id) {
        var mh$ = igPushFocusScope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushFocusScope", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopFocusScope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopFocusScope");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopFocusScope()
     * }
     */
    public static FunctionDescriptor igPopFocusScope$descriptor() {
        return igPopFocusScope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopFocusScope()
     * }
     */
    public static MethodHandle igPopFocusScope$handle() {
        return igPopFocusScope.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopFocusScope()
     * }
     */
    public static MemorySegment igPopFocusScope$address() {
        return igPopFocusScope.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopFocusScope()
     * }
     */
    public static void igPopFocusScope() {
        var mh$ = igPopFocusScope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopFocusScope");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCurrentFocusScope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCurrentFocusScope");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetCurrentFocusScope()
     * }
     */
    public static FunctionDescriptor igGetCurrentFocusScope$descriptor() {
        return igGetCurrentFocusScope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetCurrentFocusScope()
     * }
     */
    public static MethodHandle igGetCurrentFocusScope$handle() {
        return igGetCurrentFocusScope.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetCurrentFocusScope()
     * }
     */
    public static MemorySegment igGetCurrentFocusScope$address() {
        return igGetCurrentFocusScope.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetCurrentFocusScope()
     * }
     */
    public static int igGetCurrentFocusScope() {
        var mh$ = igGetCurrentFocusScope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCurrentFocusScope");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsDragDropActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsDragDropActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsDragDropActive()
     * }
     */
    public static FunctionDescriptor igIsDragDropActive$descriptor() {
        return igIsDragDropActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsDragDropActive()
     * }
     */
    public static MethodHandle igIsDragDropActive$handle() {
        return igIsDragDropActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsDragDropActive()
     * }
     */
    public static MemorySegment igIsDragDropActive$address() {
        return igIsDragDropActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsDragDropActive()
     * }
     */
    public static boolean igIsDragDropActive() {
        var mh$ = igIsDragDropActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsDragDropActive");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginDragDropTargetCustom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginDragDropTargetCustom");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginDragDropTargetCustom(const ImRect bb, ImGuiID id)
     * }
     */
    public static FunctionDescriptor igBeginDragDropTargetCustom$descriptor() {
        return igBeginDragDropTargetCustom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginDragDropTargetCustom(const ImRect bb, ImGuiID id)
     * }
     */
    public static MethodHandle igBeginDragDropTargetCustom$handle() {
        return igBeginDragDropTargetCustom.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginDragDropTargetCustom(const ImRect bb, ImGuiID id)
     * }
     */
    public static MemorySegment igBeginDragDropTargetCustom$address() {
        return igBeginDragDropTargetCustom.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginDragDropTargetCustom(const ImRect bb, ImGuiID id)
     * }
     */
    public static boolean igBeginDragDropTargetCustom(MemorySegment bb, int id) {
        var mh$ = igBeginDragDropTargetCustom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginDragDropTargetCustom", bb, id);
            }
            return (boolean)mh$.invokeExact(bb, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igClearDragDrop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igClearDragDrop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igClearDragDrop()
     * }
     */
    public static FunctionDescriptor igClearDragDrop$descriptor() {
        return igClearDragDrop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igClearDragDrop()
     * }
     */
    public static MethodHandle igClearDragDrop$handle() {
        return igClearDragDrop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igClearDragDrop()
     * }
     */
    public static MemorySegment igClearDragDrop$address() {
        return igClearDragDrop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igClearDragDrop()
     * }
     */
    public static void igClearDragDrop() {
        var mh$ = igClearDragDrop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igClearDragDrop");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsDragDropPayloadBeingAccepted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsDragDropPayloadBeingAccepted");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsDragDropPayloadBeingAccepted()
     * }
     */
    public static FunctionDescriptor igIsDragDropPayloadBeingAccepted$descriptor() {
        return igIsDragDropPayloadBeingAccepted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsDragDropPayloadBeingAccepted()
     * }
     */
    public static MethodHandle igIsDragDropPayloadBeingAccepted$handle() {
        return igIsDragDropPayloadBeingAccepted.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsDragDropPayloadBeingAccepted()
     * }
     */
    public static MemorySegment igIsDragDropPayloadBeingAccepted$address() {
        return igIsDragDropPayloadBeingAccepted.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsDragDropPayloadBeingAccepted()
     * }
     */
    public static boolean igIsDragDropPayloadBeingAccepted() {
        var mh$ = igIsDragDropPayloadBeingAccepted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsDragDropPayloadBeingAccepted");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderDragDropTargetRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImRect.layout(),
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderDragDropTargetRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderDragDropTargetRect(const ImRect bb, const ImRect item_clip_rect)
     * }
     */
    public static FunctionDescriptor igRenderDragDropTargetRect$descriptor() {
        return igRenderDragDropTargetRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderDragDropTargetRect(const ImRect bb, const ImRect item_clip_rect)
     * }
     */
    public static MethodHandle igRenderDragDropTargetRect$handle() {
        return igRenderDragDropTargetRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderDragDropTargetRect(const ImRect bb, const ImRect item_clip_rect)
     * }
     */
    public static MemorySegment igRenderDragDropTargetRect$address() {
        return igRenderDragDropTargetRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderDragDropTargetRect(const ImRect bb, const ImRect item_clip_rect)
     * }
     */
    public static void igRenderDragDropTargetRect(MemorySegment bb, MemorySegment item_clip_rect) {
        var mh$ = igRenderDragDropTargetRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderDragDropTargetRect", bb, item_clip_rect);
            }
            mh$.invokeExact(bb, item_clip_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetTypingSelectRequest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetTypingSelectRequest");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTypingSelectRequest *igGetTypingSelectRequest(ImGuiTypingSelectFlags flags)
     * }
     */
    public static FunctionDescriptor igGetTypingSelectRequest$descriptor() {
        return igGetTypingSelectRequest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTypingSelectRequest *igGetTypingSelectRequest(ImGuiTypingSelectFlags flags)
     * }
     */
    public static MethodHandle igGetTypingSelectRequest$handle() {
        return igGetTypingSelectRequest.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTypingSelectRequest *igGetTypingSelectRequest(ImGuiTypingSelectFlags flags)
     * }
     */
    public static MemorySegment igGetTypingSelectRequest$address() {
        return igGetTypingSelectRequest.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTypingSelectRequest *igGetTypingSelectRequest(ImGuiTypingSelectFlags flags)
     * }
     */
    public static MemorySegment igGetTypingSelectRequest(int flags) {
        var mh$ = igGetTypingSelectRequest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetTypingSelectRequest", flags);
            }
            return (MemorySegment)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTypingSelectFindMatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTypingSelectFindMatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igTypingSelectFindMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data, int nav_item_idx)
     * }
     */
    public static FunctionDescriptor igTypingSelectFindMatch$descriptor() {
        return igTypingSelectFindMatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igTypingSelectFindMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data, int nav_item_idx)
     * }
     */
    public static MethodHandle igTypingSelectFindMatch$handle() {
        return igTypingSelectFindMatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igTypingSelectFindMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data, int nav_item_idx)
     * }
     */
    public static MemorySegment igTypingSelectFindMatch$address() {
        return igTypingSelectFindMatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igTypingSelectFindMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data, int nav_item_idx)
     * }
     */
    public static int igTypingSelectFindMatch(MemorySegment req, int items_count, MemorySegment get_item_name_func, MemorySegment user_data, int nav_item_idx) {
        var mh$ = igTypingSelectFindMatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTypingSelectFindMatch", req, items_count, get_item_name_func, user_data, nav_item_idx);
            }
            return (int)mh$.invokeExact(req, items_count, get_item_name_func, user_data, nav_item_idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTypingSelectFindNextSingleCharMatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTypingSelectFindNextSingleCharMatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igTypingSelectFindNextSingleCharMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data, int nav_item_idx)
     * }
     */
    public static FunctionDescriptor igTypingSelectFindNextSingleCharMatch$descriptor() {
        return igTypingSelectFindNextSingleCharMatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igTypingSelectFindNextSingleCharMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data, int nav_item_idx)
     * }
     */
    public static MethodHandle igTypingSelectFindNextSingleCharMatch$handle() {
        return igTypingSelectFindNextSingleCharMatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igTypingSelectFindNextSingleCharMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data, int nav_item_idx)
     * }
     */
    public static MemorySegment igTypingSelectFindNextSingleCharMatch$address() {
        return igTypingSelectFindNextSingleCharMatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igTypingSelectFindNextSingleCharMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data, int nav_item_idx)
     * }
     */
    public static int igTypingSelectFindNextSingleCharMatch(MemorySegment req, int items_count, MemorySegment get_item_name_func, MemorySegment user_data, int nav_item_idx) {
        var mh$ = igTypingSelectFindNextSingleCharMatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTypingSelectFindNextSingleCharMatch", req, items_count, get_item_name_func, user_data, nav_item_idx);
            }
            return (int)mh$.invokeExact(req, items_count, get_item_name_func, user_data, nav_item_idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTypingSelectFindBestLeadingMatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTypingSelectFindBestLeadingMatch");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igTypingSelectFindBestLeadingMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data)
     * }
     */
    public static FunctionDescriptor igTypingSelectFindBestLeadingMatch$descriptor() {
        return igTypingSelectFindBestLeadingMatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igTypingSelectFindBestLeadingMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data)
     * }
     */
    public static MethodHandle igTypingSelectFindBestLeadingMatch$handle() {
        return igTypingSelectFindBestLeadingMatch.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igTypingSelectFindBestLeadingMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data)
     * }
     */
    public static MemorySegment igTypingSelectFindBestLeadingMatch$address() {
        return igTypingSelectFindBestLeadingMatch.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igTypingSelectFindBestLeadingMatch(ImGuiTypingSelectRequest *req, int items_count, const char *(*get_item_name_func)(void *, int), void *user_data)
     * }
     */
    public static int igTypingSelectFindBestLeadingMatch(MemorySegment req, int items_count, MemorySegment get_item_name_func, MemorySegment user_data) {
        var mh$ = igTypingSelectFindBestLeadingMatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTypingSelectFindBestLeadingMatch", req, items_count, get_item_name_func, user_data);
            }
            return (int)mh$.invokeExact(req, items_count, get_item_name_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginBoxSelect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginBoxSelect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginBoxSelect(const ImRect scope_rect, ImGuiWindow *window, ImGuiID box_select_id, ImGuiMultiSelectFlags ms_flags)
     * }
     */
    public static FunctionDescriptor igBeginBoxSelect$descriptor() {
        return igBeginBoxSelect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginBoxSelect(const ImRect scope_rect, ImGuiWindow *window, ImGuiID box_select_id, ImGuiMultiSelectFlags ms_flags)
     * }
     */
    public static MethodHandle igBeginBoxSelect$handle() {
        return igBeginBoxSelect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginBoxSelect(const ImRect scope_rect, ImGuiWindow *window, ImGuiID box_select_id, ImGuiMultiSelectFlags ms_flags)
     * }
     */
    public static MemorySegment igBeginBoxSelect$address() {
        return igBeginBoxSelect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginBoxSelect(const ImRect scope_rect, ImGuiWindow *window, ImGuiID box_select_id, ImGuiMultiSelectFlags ms_flags)
     * }
     */
    public static boolean igBeginBoxSelect(MemorySegment scope_rect, MemorySegment window, int box_select_id, int ms_flags) {
        var mh$ = igBeginBoxSelect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginBoxSelect", scope_rect, window, box_select_id, ms_flags);
            }
            return (boolean)mh$.invokeExact(scope_rect, window, box_select_id, ms_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndBoxSelect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImRect.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndBoxSelect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndBoxSelect(const ImRect scope_rect, ImGuiMultiSelectFlags ms_flags)
     * }
     */
    public static FunctionDescriptor igEndBoxSelect$descriptor() {
        return igEndBoxSelect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndBoxSelect(const ImRect scope_rect, ImGuiMultiSelectFlags ms_flags)
     * }
     */
    public static MethodHandle igEndBoxSelect$handle() {
        return igEndBoxSelect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndBoxSelect(const ImRect scope_rect, ImGuiMultiSelectFlags ms_flags)
     * }
     */
    public static MemorySegment igEndBoxSelect$address() {
        return igEndBoxSelect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndBoxSelect(const ImRect scope_rect, ImGuiMultiSelectFlags ms_flags)
     * }
     */
    public static void igEndBoxSelect(MemorySegment scope_rect, int ms_flags) {
        var mh$ = igEndBoxSelect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndBoxSelect", scope_rect, ms_flags);
            }
            mh$.invokeExact(scope_rect, ms_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMultiSelectItemHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMultiSelectItemHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igMultiSelectItemHeader(ImGuiID id, bool *p_selected, ImGuiButtonFlags *p_button_flags)
     * }
     */
    public static FunctionDescriptor igMultiSelectItemHeader$descriptor() {
        return igMultiSelectItemHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igMultiSelectItemHeader(ImGuiID id, bool *p_selected, ImGuiButtonFlags *p_button_flags)
     * }
     */
    public static MethodHandle igMultiSelectItemHeader$handle() {
        return igMultiSelectItemHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igMultiSelectItemHeader(ImGuiID id, bool *p_selected, ImGuiButtonFlags *p_button_flags)
     * }
     */
    public static MemorySegment igMultiSelectItemHeader$address() {
        return igMultiSelectItemHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igMultiSelectItemHeader(ImGuiID id, bool *p_selected, ImGuiButtonFlags *p_button_flags)
     * }
     */
    public static void igMultiSelectItemHeader(int id, MemorySegment p_selected, MemorySegment p_button_flags) {
        var mh$ = igMultiSelectItemHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMultiSelectItemHeader", id, p_selected, p_button_flags);
            }
            mh$.invokeExact(id, p_selected, p_button_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMultiSelectItemFooter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMultiSelectItemFooter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igMultiSelectItemFooter(ImGuiID id, bool *p_selected, bool *p_pressed)
     * }
     */
    public static FunctionDescriptor igMultiSelectItemFooter$descriptor() {
        return igMultiSelectItemFooter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igMultiSelectItemFooter(ImGuiID id, bool *p_selected, bool *p_pressed)
     * }
     */
    public static MethodHandle igMultiSelectItemFooter$handle() {
        return igMultiSelectItemFooter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igMultiSelectItemFooter(ImGuiID id, bool *p_selected, bool *p_pressed)
     * }
     */
    public static MemorySegment igMultiSelectItemFooter$address() {
        return igMultiSelectItemFooter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igMultiSelectItemFooter(ImGuiID id, bool *p_selected, bool *p_pressed)
     * }
     */
    public static void igMultiSelectItemFooter(int id, MemorySegment p_selected, MemorySegment p_pressed) {
        var mh$ = igMultiSelectItemFooter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMultiSelectItemFooter", id, p_selected, p_pressed);
            }
            mh$.invokeExact(id, p_selected, p_pressed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMultiSelectAddSetAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMultiSelectAddSetAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igMultiSelectAddSetAll(ImGuiMultiSelectTempData *ms, bool selected)
     * }
     */
    public static FunctionDescriptor igMultiSelectAddSetAll$descriptor() {
        return igMultiSelectAddSetAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igMultiSelectAddSetAll(ImGuiMultiSelectTempData *ms, bool selected)
     * }
     */
    public static MethodHandle igMultiSelectAddSetAll$handle() {
        return igMultiSelectAddSetAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igMultiSelectAddSetAll(ImGuiMultiSelectTempData *ms, bool selected)
     * }
     */
    public static MemorySegment igMultiSelectAddSetAll$address() {
        return igMultiSelectAddSetAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igMultiSelectAddSetAll(ImGuiMultiSelectTempData *ms, bool selected)
     * }
     */
    public static void igMultiSelectAddSetAll(MemorySegment ms, boolean selected) {
        var mh$ = igMultiSelectAddSetAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMultiSelectAddSetAll", ms, selected);
            }
            mh$.invokeExact(ms, selected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMultiSelectAddSetRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_LONG_LONG,
            imgui.C_LONG_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMultiSelectAddSetRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igMultiSelectAddSetRange(ImGuiMultiSelectTempData *ms, bool selected, int range_dir, ImGuiSelectionUserData first_item, ImGuiSelectionUserData last_item)
     * }
     */
    public static FunctionDescriptor igMultiSelectAddSetRange$descriptor() {
        return igMultiSelectAddSetRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igMultiSelectAddSetRange(ImGuiMultiSelectTempData *ms, bool selected, int range_dir, ImGuiSelectionUserData first_item, ImGuiSelectionUserData last_item)
     * }
     */
    public static MethodHandle igMultiSelectAddSetRange$handle() {
        return igMultiSelectAddSetRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igMultiSelectAddSetRange(ImGuiMultiSelectTempData *ms, bool selected, int range_dir, ImGuiSelectionUserData first_item, ImGuiSelectionUserData last_item)
     * }
     */
    public static MemorySegment igMultiSelectAddSetRange$address() {
        return igMultiSelectAddSetRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igMultiSelectAddSetRange(ImGuiMultiSelectTempData *ms, bool selected, int range_dir, ImGuiSelectionUserData first_item, ImGuiSelectionUserData last_item)
     * }
     */
    public static void igMultiSelectAddSetRange(MemorySegment ms, boolean selected, int range_dir, long first_item, long last_item) {
        var mh$ = igMultiSelectAddSetRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMultiSelectAddSetRange", ms, selected, range_dir, first_item, last_item);
            }
            mh$.invokeExact(ms, selected, range_dir, first_item, last_item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetBoxSelectState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetBoxSelectState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiBoxSelectState *igGetBoxSelectState(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igGetBoxSelectState$descriptor() {
        return igGetBoxSelectState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiBoxSelectState *igGetBoxSelectState(ImGuiID id)
     * }
     */
    public static MethodHandle igGetBoxSelectState$handle() {
        return igGetBoxSelectState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiBoxSelectState *igGetBoxSelectState(ImGuiID id)
     * }
     */
    public static MemorySegment igGetBoxSelectState$address() {
        return igGetBoxSelectState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiBoxSelectState *igGetBoxSelectState(ImGuiID id)
     * }
     */
    public static MemorySegment igGetBoxSelectState(int id) {
        var mh$ = igGetBoxSelectState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetBoxSelectState", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetMultiSelectState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetMultiSelectState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectState *igGetMultiSelectState(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igGetMultiSelectState$descriptor() {
        return igGetMultiSelectState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectState *igGetMultiSelectState(ImGuiID id)
     * }
     */
    public static MethodHandle igGetMultiSelectState$handle() {
        return igGetMultiSelectState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectState *igGetMultiSelectState(ImGuiID id)
     * }
     */
    public static MemorySegment igGetMultiSelectState$address() {
        return igGetMultiSelectState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiMultiSelectState *igGetMultiSelectState(ImGuiID id)
     * }
     */
    public static MemorySegment igGetMultiSelectState(int id) {
        var mh$ = igGetMultiSelectState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetMultiSelectState", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowClipRectBeforeSetChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowClipRectBeforeSetChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowClipRectBeforeSetChannel(ImGuiWindow *window, const ImRect clip_rect)
     * }
     */
    public static FunctionDescriptor igSetWindowClipRectBeforeSetChannel$descriptor() {
        return igSetWindowClipRectBeforeSetChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowClipRectBeforeSetChannel(ImGuiWindow *window, const ImRect clip_rect)
     * }
     */
    public static MethodHandle igSetWindowClipRectBeforeSetChannel$handle() {
        return igSetWindowClipRectBeforeSetChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowClipRectBeforeSetChannel(ImGuiWindow *window, const ImRect clip_rect)
     * }
     */
    public static MemorySegment igSetWindowClipRectBeforeSetChannel$address() {
        return igSetWindowClipRectBeforeSetChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowClipRectBeforeSetChannel(ImGuiWindow *window, const ImRect clip_rect)
     * }
     */
    public static void igSetWindowClipRectBeforeSetChannel(MemorySegment window, MemorySegment clip_rect) {
        var mh$ = igSetWindowClipRectBeforeSetChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowClipRectBeforeSetChannel", window, clip_rect);
            }
            mh$.invokeExact(window, clip_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginColumns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginColumns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBeginColumns(const char *str_id, int count, ImGuiOldColumnFlags flags)
     * }
     */
    public static FunctionDescriptor igBeginColumns$descriptor() {
        return igBeginColumns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBeginColumns(const char *str_id, int count, ImGuiOldColumnFlags flags)
     * }
     */
    public static MethodHandle igBeginColumns$handle() {
        return igBeginColumns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBeginColumns(const char *str_id, int count, ImGuiOldColumnFlags flags)
     * }
     */
    public static MemorySegment igBeginColumns$address() {
        return igBeginColumns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBeginColumns(const char *str_id, int count, ImGuiOldColumnFlags flags)
     * }
     */
    public static void igBeginColumns(MemorySegment str_id, int count, int flags) {
        var mh$ = igBeginColumns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginColumns", str_id, count, flags);
            }
            mh$.invokeExact(str_id, count, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndColumns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndColumns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndColumns()
     * }
     */
    public static FunctionDescriptor igEndColumns$descriptor() {
        return igEndColumns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndColumns()
     * }
     */
    public static MethodHandle igEndColumns$handle() {
        return igEndColumns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndColumns()
     * }
     */
    public static MemorySegment igEndColumns$address() {
        return igEndColumns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndColumns()
     * }
     */
    public static void igEndColumns() {
        var mh$ = igEndColumns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndColumns");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushColumnClipRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushColumnClipRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushColumnClipRect(int column_index)
     * }
     */
    public static FunctionDescriptor igPushColumnClipRect$descriptor() {
        return igPushColumnClipRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushColumnClipRect(int column_index)
     * }
     */
    public static MethodHandle igPushColumnClipRect$handle() {
        return igPushColumnClipRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushColumnClipRect(int column_index)
     * }
     */
    public static MemorySegment igPushColumnClipRect$address() {
        return igPushColumnClipRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushColumnClipRect(int column_index)
     * }
     */
    public static void igPushColumnClipRect(int column_index) {
        var mh$ = igPushColumnClipRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushColumnClipRect", column_index);
            }
            mh$.invokeExact(column_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushColumnsBackground {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushColumnsBackground");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushColumnsBackground()
     * }
     */
    public static FunctionDescriptor igPushColumnsBackground$descriptor() {
        return igPushColumnsBackground.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushColumnsBackground()
     * }
     */
    public static MethodHandle igPushColumnsBackground$handle() {
        return igPushColumnsBackground.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushColumnsBackground()
     * }
     */
    public static MemorySegment igPushColumnsBackground$address() {
        return igPushColumnsBackground.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushColumnsBackground()
     * }
     */
    public static void igPushColumnsBackground() {
        var mh$ = igPushColumnsBackground.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushColumnsBackground");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopColumnsBackground {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopColumnsBackground");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopColumnsBackground()
     * }
     */
    public static FunctionDescriptor igPopColumnsBackground$descriptor() {
        return igPopColumnsBackground.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopColumnsBackground()
     * }
     */
    public static MethodHandle igPopColumnsBackground$handle() {
        return igPopColumnsBackground.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopColumnsBackground()
     * }
     */
    public static MemorySegment igPopColumnsBackground$address() {
        return igPopColumnsBackground.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopColumnsBackground()
     * }
     */
    public static void igPopColumnsBackground() {
        var mh$ = igPopColumnsBackground.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopColumnsBackground");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColumnsID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColumnsID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetColumnsID(const char *str_id, int count)
     * }
     */
    public static FunctionDescriptor igGetColumnsID$descriptor() {
        return igGetColumnsID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetColumnsID(const char *str_id, int count)
     * }
     */
    public static MethodHandle igGetColumnsID$handle() {
        return igGetColumnsID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetColumnsID(const char *str_id, int count)
     * }
     */
    public static MemorySegment igGetColumnsID$address() {
        return igGetColumnsID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetColumnsID(const char *str_id, int count)
     * }
     */
    public static int igGetColumnsID(MemorySegment str_id, int count) {
        var mh$ = igGetColumnsID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColumnsID", str_id, count);
            }
            return (int)mh$.invokeExact(str_id, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindOrCreateColumns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindOrCreateColumns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiOldColumns *igFindOrCreateColumns(ImGuiWindow *window, ImGuiID id)
     * }
     */
    public static FunctionDescriptor igFindOrCreateColumns$descriptor() {
        return igFindOrCreateColumns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiOldColumns *igFindOrCreateColumns(ImGuiWindow *window, ImGuiID id)
     * }
     */
    public static MethodHandle igFindOrCreateColumns$handle() {
        return igFindOrCreateColumns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiOldColumns *igFindOrCreateColumns(ImGuiWindow *window, ImGuiID id)
     * }
     */
    public static MemorySegment igFindOrCreateColumns$address() {
        return igFindOrCreateColumns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiOldColumns *igFindOrCreateColumns(ImGuiWindow *window, ImGuiID id)
     * }
     */
    public static MemorySegment igFindOrCreateColumns(MemorySegment window, int id) {
        var mh$ = igFindOrCreateColumns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindOrCreateColumns", window, id);
            }
            return (MemorySegment)mh$.invokeExact(window, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColumnOffsetFromNorm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColumnOffsetFromNorm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetColumnOffsetFromNorm(const ImGuiOldColumns *columns, float offset_norm)
     * }
     */
    public static FunctionDescriptor igGetColumnOffsetFromNorm$descriptor() {
        return igGetColumnOffsetFromNorm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetColumnOffsetFromNorm(const ImGuiOldColumns *columns, float offset_norm)
     * }
     */
    public static MethodHandle igGetColumnOffsetFromNorm$handle() {
        return igGetColumnOffsetFromNorm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetColumnOffsetFromNorm(const ImGuiOldColumns *columns, float offset_norm)
     * }
     */
    public static MemorySegment igGetColumnOffsetFromNorm$address() {
        return igGetColumnOffsetFromNorm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetColumnOffsetFromNorm(const ImGuiOldColumns *columns, float offset_norm)
     * }
     */
    public static float igGetColumnOffsetFromNorm(MemorySegment columns, float offset_norm) {
        var mh$ = igGetColumnOffsetFromNorm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColumnOffsetFromNorm", columns, offset_norm);
            }
            return (float)mh$.invokeExact(columns, offset_norm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColumnNormFromOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColumnNormFromOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetColumnNormFromOffset(const ImGuiOldColumns *columns, float offset)
     * }
     */
    public static FunctionDescriptor igGetColumnNormFromOffset$descriptor() {
        return igGetColumnNormFromOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetColumnNormFromOffset(const ImGuiOldColumns *columns, float offset)
     * }
     */
    public static MethodHandle igGetColumnNormFromOffset$handle() {
        return igGetColumnNormFromOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetColumnNormFromOffset(const ImGuiOldColumns *columns, float offset)
     * }
     */
    public static MemorySegment igGetColumnNormFromOffset$address() {
        return igGetColumnNormFromOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetColumnNormFromOffset(const ImGuiOldColumns *columns, float offset)
     * }
     */
    public static float igGetColumnNormFromOffset(MemorySegment columns, float offset) {
        var mh$ = igGetColumnNormFromOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColumnNormFromOffset", columns, offset);
            }
            return (float)mh$.invokeExact(columns, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableOpenContextMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableOpenContextMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableOpenContextMenu(int column_n)
     * }
     */
    public static FunctionDescriptor igTableOpenContextMenu$descriptor() {
        return igTableOpenContextMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableOpenContextMenu(int column_n)
     * }
     */
    public static MethodHandle igTableOpenContextMenu$handle() {
        return igTableOpenContextMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableOpenContextMenu(int column_n)
     * }
     */
    public static MemorySegment igTableOpenContextMenu$address() {
        return igTableOpenContextMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableOpenContextMenu(int column_n)
     * }
     */
    public static void igTableOpenContextMenu(int column_n) {
        var mh$ = igTableOpenContextMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableOpenContextMenu", column_n);
            }
            mh$.invokeExact(column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetColumnWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetColumnWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSetColumnWidth(int column_n, float width)
     * }
     */
    public static FunctionDescriptor igTableSetColumnWidth$descriptor() {
        return igTableSetColumnWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSetColumnWidth(int column_n, float width)
     * }
     */
    public static MethodHandle igTableSetColumnWidth$handle() {
        return igTableSetColumnWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSetColumnWidth(int column_n, float width)
     * }
     */
    public static MemorySegment igTableSetColumnWidth$address() {
        return igTableSetColumnWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSetColumnWidth(int column_n, float width)
     * }
     */
    public static void igTableSetColumnWidth(int column_n, float width) {
        var mh$ = igTableSetColumnWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetColumnWidth", column_n, width);
            }
            mh$.invokeExact(column_n, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetColumnSortDirection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetColumnSortDirection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool append_to_sort_specs)
     * }
     */
    public static FunctionDescriptor igTableSetColumnSortDirection$descriptor() {
        return igTableSetColumnSortDirection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool append_to_sort_specs)
     * }
     */
    public static MethodHandle igTableSetColumnSortDirection$handle() {
        return igTableSetColumnSortDirection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool append_to_sort_specs)
     * }
     */
    public static MemorySegment igTableSetColumnSortDirection$address() {
        return igTableSetColumnSortDirection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool append_to_sort_specs)
     * }
     */
    public static void igTableSetColumnSortDirection(int column_n, int sort_direction, boolean append_to_sort_specs) {
        var mh$ = igTableSetColumnSortDirection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetColumnSortDirection", column_n, sort_direction, append_to_sort_specs);
            }
            mh$.invokeExact(column_n, sort_direction, append_to_sort_specs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetHoveredRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetHoveredRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igTableGetHoveredRow()
     * }
     */
    public static FunctionDescriptor igTableGetHoveredRow$descriptor() {
        return igTableGetHoveredRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igTableGetHoveredRow()
     * }
     */
    public static MethodHandle igTableGetHoveredRow$handle() {
        return igTableGetHoveredRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igTableGetHoveredRow()
     * }
     */
    public static MemorySegment igTableGetHoveredRow$address() {
        return igTableGetHoveredRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igTableGetHoveredRow()
     * }
     */
    public static int igTableGetHoveredRow() {
        var mh$ = igTableGetHoveredRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetHoveredRow");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetHeaderRowHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetHeaderRowHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igTableGetHeaderRowHeight()
     * }
     */
    public static FunctionDescriptor igTableGetHeaderRowHeight$descriptor() {
        return igTableGetHeaderRowHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igTableGetHeaderRowHeight()
     * }
     */
    public static MethodHandle igTableGetHeaderRowHeight$handle() {
        return igTableGetHeaderRowHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igTableGetHeaderRowHeight()
     * }
     */
    public static MemorySegment igTableGetHeaderRowHeight$address() {
        return igTableGetHeaderRowHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igTableGetHeaderRowHeight()
     * }
     */
    public static float igTableGetHeaderRowHeight() {
        var mh$ = igTableGetHeaderRowHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetHeaderRowHeight");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetHeaderAngledMaxLabelWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetHeaderAngledMaxLabelWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igTableGetHeaderAngledMaxLabelWidth()
     * }
     */
    public static FunctionDescriptor igTableGetHeaderAngledMaxLabelWidth$descriptor() {
        return igTableGetHeaderAngledMaxLabelWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igTableGetHeaderAngledMaxLabelWidth()
     * }
     */
    public static MethodHandle igTableGetHeaderAngledMaxLabelWidth$handle() {
        return igTableGetHeaderAngledMaxLabelWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igTableGetHeaderAngledMaxLabelWidth()
     * }
     */
    public static MemorySegment igTableGetHeaderAngledMaxLabelWidth$address() {
        return igTableGetHeaderAngledMaxLabelWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igTableGetHeaderAngledMaxLabelWidth()
     * }
     */
    public static float igTableGetHeaderAngledMaxLabelWidth() {
        var mh$ = igTableGetHeaderAngledMaxLabelWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetHeaderAngledMaxLabelWidth");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTablePushBackgroundChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTablePushBackgroundChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTablePushBackgroundChannel()
     * }
     */
    public static FunctionDescriptor igTablePushBackgroundChannel$descriptor() {
        return igTablePushBackgroundChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTablePushBackgroundChannel()
     * }
     */
    public static MethodHandle igTablePushBackgroundChannel$handle() {
        return igTablePushBackgroundChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTablePushBackgroundChannel()
     * }
     */
    public static MemorySegment igTablePushBackgroundChannel$address() {
        return igTablePushBackgroundChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTablePushBackgroundChannel()
     * }
     */
    public static void igTablePushBackgroundChannel() {
        var mh$ = igTablePushBackgroundChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTablePushBackgroundChannel");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTablePopBackgroundChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTablePopBackgroundChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTablePopBackgroundChannel()
     * }
     */
    public static FunctionDescriptor igTablePopBackgroundChannel$descriptor() {
        return igTablePopBackgroundChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTablePopBackgroundChannel()
     * }
     */
    public static MethodHandle igTablePopBackgroundChannel$handle() {
        return igTablePopBackgroundChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTablePopBackgroundChannel()
     * }
     */
    public static MemorySegment igTablePopBackgroundChannel$address() {
        return igTablePopBackgroundChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTablePopBackgroundChannel()
     * }
     */
    public static void igTablePopBackgroundChannel() {
        var mh$ = igTablePopBackgroundChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTablePopBackgroundChannel");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableAngledHeadersRowEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableAngledHeadersRowEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableAngledHeadersRowEx(ImGuiID row_id, float angle, float max_label_width, const ImGuiTableHeaderData *data, int data_count)
     * }
     */
    public static FunctionDescriptor igTableAngledHeadersRowEx$descriptor() {
        return igTableAngledHeadersRowEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableAngledHeadersRowEx(ImGuiID row_id, float angle, float max_label_width, const ImGuiTableHeaderData *data, int data_count)
     * }
     */
    public static MethodHandle igTableAngledHeadersRowEx$handle() {
        return igTableAngledHeadersRowEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableAngledHeadersRowEx(ImGuiID row_id, float angle, float max_label_width, const ImGuiTableHeaderData *data, int data_count)
     * }
     */
    public static MemorySegment igTableAngledHeadersRowEx$address() {
        return igTableAngledHeadersRowEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableAngledHeadersRowEx(ImGuiID row_id, float angle, float max_label_width, const ImGuiTableHeaderData *data, int data_count)
     * }
     */
    public static void igTableAngledHeadersRowEx(int row_id, float angle, float max_label_width, MemorySegment data, int data_count) {
        var mh$ = igTableAngledHeadersRowEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableAngledHeadersRowEx", row_id, angle, max_label_width, data, data_count);
            }
            mh$.invokeExact(row_id, angle, max_label_width, data, data_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCurrentTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCurrentTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTable *igGetCurrentTable()
     * }
     */
    public static FunctionDescriptor igGetCurrentTable$descriptor() {
        return igGetCurrentTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTable *igGetCurrentTable()
     * }
     */
    public static MethodHandle igGetCurrentTable$handle() {
        return igGetCurrentTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTable *igGetCurrentTable()
     * }
     */
    public static MemorySegment igGetCurrentTable$address() {
        return igGetCurrentTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTable *igGetCurrentTable()
     * }
     */
    public static MemorySegment igGetCurrentTable() {
        var mh$ = igGetCurrentTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCurrentTable");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableFindByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableFindByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTable *igTableFindByID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igTableFindByID$descriptor() {
        return igTableFindByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTable *igTableFindByID(ImGuiID id)
     * }
     */
    public static MethodHandle igTableFindByID$handle() {
        return igTableFindByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTable *igTableFindByID(ImGuiID id)
     * }
     */
    public static MemorySegment igTableFindByID$address() {
        return igTableFindByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTable *igTableFindByID(ImGuiID id)
     * }
     */
    public static MemorySegment igTableFindByID(int id) {
        var mh$ = igTableFindByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableFindByID", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginTableEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginTableEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginTableEx(const char *name, ImGuiID id, int columns_count, ImGuiTableFlags flags, const ImVec2 outer_size, float inner_width)
     * }
     */
    public static FunctionDescriptor igBeginTableEx$descriptor() {
        return igBeginTableEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginTableEx(const char *name, ImGuiID id, int columns_count, ImGuiTableFlags flags, const ImVec2 outer_size, float inner_width)
     * }
     */
    public static MethodHandle igBeginTableEx$handle() {
        return igBeginTableEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginTableEx(const char *name, ImGuiID id, int columns_count, ImGuiTableFlags flags, const ImVec2 outer_size, float inner_width)
     * }
     */
    public static MemorySegment igBeginTableEx$address() {
        return igBeginTableEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginTableEx(const char *name, ImGuiID id, int columns_count, ImGuiTableFlags flags, const ImVec2 outer_size, float inner_width)
     * }
     */
    public static boolean igBeginTableEx(MemorySegment name, int id, int columns_count, int flags, MemorySegment outer_size, float inner_width) {
        var mh$ = igBeginTableEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginTableEx", name, id, columns_count, flags, outer_size, inner_width);
            }
            return (boolean)mh$.invokeExact(name, id, columns_count, flags, outer_size, inner_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableBeginInitMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableBeginInitMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableBeginInitMemory(ImGuiTable *table, int columns_count)
     * }
     */
    public static FunctionDescriptor igTableBeginInitMemory$descriptor() {
        return igTableBeginInitMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableBeginInitMemory(ImGuiTable *table, int columns_count)
     * }
     */
    public static MethodHandle igTableBeginInitMemory$handle() {
        return igTableBeginInitMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableBeginInitMemory(ImGuiTable *table, int columns_count)
     * }
     */
    public static MemorySegment igTableBeginInitMemory$address() {
        return igTableBeginInitMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableBeginInitMemory(ImGuiTable *table, int columns_count)
     * }
     */
    public static void igTableBeginInitMemory(MemorySegment table, int columns_count) {
        var mh$ = igTableBeginInitMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableBeginInitMemory", table, columns_count);
            }
            mh$.invokeExact(table, columns_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableBeginApplyRequests {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableBeginApplyRequests");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableBeginApplyRequests(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableBeginApplyRequests$descriptor() {
        return igTableBeginApplyRequests.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableBeginApplyRequests(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableBeginApplyRequests$handle() {
        return igTableBeginApplyRequests.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableBeginApplyRequests(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableBeginApplyRequests$address() {
        return igTableBeginApplyRequests.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableBeginApplyRequests(ImGuiTable *table)
     * }
     */
    public static void igTableBeginApplyRequests(MemorySegment table) {
        var mh$ = igTableBeginApplyRequests.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableBeginApplyRequests", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetupDrawChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetupDrawChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSetupDrawChannels(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableSetupDrawChannels$descriptor() {
        return igTableSetupDrawChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSetupDrawChannels(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableSetupDrawChannels$handle() {
        return igTableSetupDrawChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSetupDrawChannels(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableSetupDrawChannels$address() {
        return igTableSetupDrawChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSetupDrawChannels(ImGuiTable *table)
     * }
     */
    public static void igTableSetupDrawChannels(MemorySegment table) {
        var mh$ = igTableSetupDrawChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetupDrawChannels", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableUpdateLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableUpdateLayout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableUpdateLayout(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableUpdateLayout$descriptor() {
        return igTableUpdateLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableUpdateLayout(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableUpdateLayout$handle() {
        return igTableUpdateLayout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableUpdateLayout(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableUpdateLayout$address() {
        return igTableUpdateLayout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableUpdateLayout(ImGuiTable *table)
     * }
     */
    public static void igTableUpdateLayout(MemorySegment table) {
        var mh$ = igTableUpdateLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableUpdateLayout", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableUpdateBorders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableUpdateBorders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableUpdateBorders(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableUpdateBorders$descriptor() {
        return igTableUpdateBorders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableUpdateBorders(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableUpdateBorders$handle() {
        return igTableUpdateBorders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableUpdateBorders(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableUpdateBorders$address() {
        return igTableUpdateBorders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableUpdateBorders(ImGuiTable *table)
     * }
     */
    public static void igTableUpdateBorders(MemorySegment table) {
        var mh$ = igTableUpdateBorders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableUpdateBorders", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableUpdateColumnsWeightFromWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableUpdateColumnsWeightFromWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableUpdateColumnsWeightFromWidth(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableUpdateColumnsWeightFromWidth$descriptor() {
        return igTableUpdateColumnsWeightFromWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableUpdateColumnsWeightFromWidth(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableUpdateColumnsWeightFromWidth$handle() {
        return igTableUpdateColumnsWeightFromWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableUpdateColumnsWeightFromWidth(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableUpdateColumnsWeightFromWidth$address() {
        return igTableUpdateColumnsWeightFromWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableUpdateColumnsWeightFromWidth(ImGuiTable *table)
     * }
     */
    public static void igTableUpdateColumnsWeightFromWidth(MemorySegment table) {
        var mh$ = igTableUpdateColumnsWeightFromWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableUpdateColumnsWeightFromWidth", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableDrawBorders {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableDrawBorders");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableDrawBorders(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableDrawBorders$descriptor() {
        return igTableDrawBorders.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableDrawBorders(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableDrawBorders$handle() {
        return igTableDrawBorders.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableDrawBorders(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableDrawBorders$address() {
        return igTableDrawBorders.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableDrawBorders(ImGuiTable *table)
     * }
     */
    public static void igTableDrawBorders(MemorySegment table) {
        var mh$ = igTableDrawBorders.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableDrawBorders", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableDrawDefaultContextMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableDrawDefaultContextMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableDrawDefaultContextMenu(ImGuiTable *table, ImGuiTableFlags flags_for_section_to_display)
     * }
     */
    public static FunctionDescriptor igTableDrawDefaultContextMenu$descriptor() {
        return igTableDrawDefaultContextMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableDrawDefaultContextMenu(ImGuiTable *table, ImGuiTableFlags flags_for_section_to_display)
     * }
     */
    public static MethodHandle igTableDrawDefaultContextMenu$handle() {
        return igTableDrawDefaultContextMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableDrawDefaultContextMenu(ImGuiTable *table, ImGuiTableFlags flags_for_section_to_display)
     * }
     */
    public static MemorySegment igTableDrawDefaultContextMenu$address() {
        return igTableDrawDefaultContextMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableDrawDefaultContextMenu(ImGuiTable *table, ImGuiTableFlags flags_for_section_to_display)
     * }
     */
    public static void igTableDrawDefaultContextMenu(MemorySegment table, int flags_for_section_to_display) {
        var mh$ = igTableDrawDefaultContextMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableDrawDefaultContextMenu", table, flags_for_section_to_display);
            }
            mh$.invokeExact(table, flags_for_section_to_display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableBeginContextMenuPopup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableBeginContextMenuPopup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTableBeginContextMenuPopup(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableBeginContextMenuPopup$descriptor() {
        return igTableBeginContextMenuPopup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTableBeginContextMenuPopup(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableBeginContextMenuPopup$handle() {
        return igTableBeginContextMenuPopup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTableBeginContextMenuPopup(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableBeginContextMenuPopup$address() {
        return igTableBeginContextMenuPopup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTableBeginContextMenuPopup(ImGuiTable *table)
     * }
     */
    public static boolean igTableBeginContextMenuPopup(MemorySegment table) {
        var mh$ = igTableBeginContextMenuPopup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableBeginContextMenuPopup", table);
            }
            return (boolean)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableMergeDrawChannels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableMergeDrawChannels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableMergeDrawChannels(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableMergeDrawChannels$descriptor() {
        return igTableMergeDrawChannels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableMergeDrawChannels(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableMergeDrawChannels$handle() {
        return igTableMergeDrawChannels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableMergeDrawChannels(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableMergeDrawChannels$address() {
        return igTableMergeDrawChannels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableMergeDrawChannels(ImGuiTable *table)
     * }
     */
    public static void igTableMergeDrawChannels(MemorySegment table) {
        var mh$ = igTableMergeDrawChannels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableMergeDrawChannels", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetInstanceData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetInstanceData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableInstanceData *igTableGetInstanceData(ImGuiTable *table, int instance_no)
     * }
     */
    public static FunctionDescriptor igTableGetInstanceData$descriptor() {
        return igTableGetInstanceData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableInstanceData *igTableGetInstanceData(ImGuiTable *table, int instance_no)
     * }
     */
    public static MethodHandle igTableGetInstanceData$handle() {
        return igTableGetInstanceData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableInstanceData *igTableGetInstanceData(ImGuiTable *table, int instance_no)
     * }
     */
    public static MemorySegment igTableGetInstanceData$address() {
        return igTableGetInstanceData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableInstanceData *igTableGetInstanceData(ImGuiTable *table, int instance_no)
     * }
     */
    public static MemorySegment igTableGetInstanceData(MemorySegment table, int instance_no) {
        var mh$ = igTableGetInstanceData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetInstanceData", table, instance_no);
            }
            return (MemorySegment)mh$.invokeExact(table, instance_no);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetInstanceID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetInstanceID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igTableGetInstanceID(ImGuiTable *table, int instance_no)
     * }
     */
    public static FunctionDescriptor igTableGetInstanceID$descriptor() {
        return igTableGetInstanceID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igTableGetInstanceID(ImGuiTable *table, int instance_no)
     * }
     */
    public static MethodHandle igTableGetInstanceID$handle() {
        return igTableGetInstanceID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igTableGetInstanceID(ImGuiTable *table, int instance_no)
     * }
     */
    public static MemorySegment igTableGetInstanceID$address() {
        return igTableGetInstanceID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igTableGetInstanceID(ImGuiTable *table, int instance_no)
     * }
     */
    public static int igTableGetInstanceID(MemorySegment table, int instance_no) {
        var mh$ = igTableGetInstanceID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetInstanceID", table, instance_no);
            }
            return (int)mh$.invokeExact(table, instance_no);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSortSpecsSanitize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSortSpecsSanitize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSortSpecsSanitize(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableSortSpecsSanitize$descriptor() {
        return igTableSortSpecsSanitize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSortSpecsSanitize(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableSortSpecsSanitize$handle() {
        return igTableSortSpecsSanitize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSortSpecsSanitize(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableSortSpecsSanitize$address() {
        return igTableSortSpecsSanitize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSortSpecsSanitize(ImGuiTable *table)
     * }
     */
    public static void igTableSortSpecsSanitize(MemorySegment table) {
        var mh$ = igTableSortSpecsSanitize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSortSpecsSanitize", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSortSpecsBuild {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSortSpecsBuild");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSortSpecsBuild(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableSortSpecsBuild$descriptor() {
        return igTableSortSpecsBuild.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSortSpecsBuild(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableSortSpecsBuild$handle() {
        return igTableSortSpecsBuild.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSortSpecsBuild(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableSortSpecsBuild$address() {
        return igTableSortSpecsBuild.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSortSpecsBuild(ImGuiTable *table)
     * }
     */
    public static void igTableSortSpecsBuild(MemorySegment table) {
        var mh$ = igTableSortSpecsBuild.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSortSpecsBuild", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetColumnNextSortDirection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetColumnNextSortDirection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiSortDirection igTableGetColumnNextSortDirection(ImGuiTableColumn *column)
     * }
     */
    public static FunctionDescriptor igTableGetColumnNextSortDirection$descriptor() {
        return igTableGetColumnNextSortDirection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiSortDirection igTableGetColumnNextSortDirection(ImGuiTableColumn *column)
     * }
     */
    public static MethodHandle igTableGetColumnNextSortDirection$handle() {
        return igTableGetColumnNextSortDirection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiSortDirection igTableGetColumnNextSortDirection(ImGuiTableColumn *column)
     * }
     */
    public static MemorySegment igTableGetColumnNextSortDirection$address() {
        return igTableGetColumnNextSortDirection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiSortDirection igTableGetColumnNextSortDirection(ImGuiTableColumn *column)
     * }
     */
    public static int igTableGetColumnNextSortDirection(MemorySegment column) {
        var mh$ = igTableGetColumnNextSortDirection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetColumnNextSortDirection", column);
            }
            return (int)mh$.invokeExact(column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableFixColumnSortDirection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableFixColumnSortDirection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableFixColumnSortDirection(ImGuiTable *table, ImGuiTableColumn *column)
     * }
     */
    public static FunctionDescriptor igTableFixColumnSortDirection$descriptor() {
        return igTableFixColumnSortDirection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableFixColumnSortDirection(ImGuiTable *table, ImGuiTableColumn *column)
     * }
     */
    public static MethodHandle igTableFixColumnSortDirection$handle() {
        return igTableFixColumnSortDirection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableFixColumnSortDirection(ImGuiTable *table, ImGuiTableColumn *column)
     * }
     */
    public static MemorySegment igTableFixColumnSortDirection$address() {
        return igTableFixColumnSortDirection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableFixColumnSortDirection(ImGuiTable *table, ImGuiTableColumn *column)
     * }
     */
    public static void igTableFixColumnSortDirection(MemorySegment table, MemorySegment column) {
        var mh$ = igTableFixColumnSortDirection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableFixColumnSortDirection", table, column);
            }
            mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetColumnWidthAuto {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetColumnWidthAuto");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igTableGetColumnWidthAuto(ImGuiTable *table, ImGuiTableColumn *column)
     * }
     */
    public static FunctionDescriptor igTableGetColumnWidthAuto$descriptor() {
        return igTableGetColumnWidthAuto.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igTableGetColumnWidthAuto(ImGuiTable *table, ImGuiTableColumn *column)
     * }
     */
    public static MethodHandle igTableGetColumnWidthAuto$handle() {
        return igTableGetColumnWidthAuto.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igTableGetColumnWidthAuto(ImGuiTable *table, ImGuiTableColumn *column)
     * }
     */
    public static MemorySegment igTableGetColumnWidthAuto$address() {
        return igTableGetColumnWidthAuto.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igTableGetColumnWidthAuto(ImGuiTable *table, ImGuiTableColumn *column)
     * }
     */
    public static float igTableGetColumnWidthAuto(MemorySegment table, MemorySegment column) {
        var mh$ = igTableGetColumnWidthAuto.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetColumnWidthAuto", table, column);
            }
            return (float)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableBeginRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableBeginRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableBeginRow(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableBeginRow$descriptor() {
        return igTableBeginRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableBeginRow(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableBeginRow$handle() {
        return igTableBeginRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableBeginRow(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableBeginRow$address() {
        return igTableBeginRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableBeginRow(ImGuiTable *table)
     * }
     */
    public static void igTableBeginRow(MemorySegment table) {
        var mh$ = igTableBeginRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableBeginRow", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableEndRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableEndRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableEndRow(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableEndRow$descriptor() {
        return igTableEndRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableEndRow(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableEndRow$handle() {
        return igTableEndRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableEndRow(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableEndRow$address() {
        return igTableEndRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableEndRow(ImGuiTable *table)
     * }
     */
    public static void igTableEndRow(MemorySegment table) {
        var mh$ = igTableEndRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableEndRow", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableBeginCell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableBeginCell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableBeginCell(ImGuiTable *table, int column_n)
     * }
     */
    public static FunctionDescriptor igTableBeginCell$descriptor() {
        return igTableBeginCell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableBeginCell(ImGuiTable *table, int column_n)
     * }
     */
    public static MethodHandle igTableBeginCell$handle() {
        return igTableBeginCell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableBeginCell(ImGuiTable *table, int column_n)
     * }
     */
    public static MemorySegment igTableBeginCell$address() {
        return igTableBeginCell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableBeginCell(ImGuiTable *table, int column_n)
     * }
     */
    public static void igTableBeginCell(MemorySegment table, int column_n) {
        var mh$ = igTableBeginCell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableBeginCell", table, column_n);
            }
            mh$.invokeExact(table, column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableEndCell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableEndCell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableEndCell(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableEndCell$descriptor() {
        return igTableEndCell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableEndCell(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableEndCell$handle() {
        return igTableEndCell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableEndCell(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableEndCell$address() {
        return igTableEndCell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableEndCell(ImGuiTable *table)
     * }
     */
    public static void igTableEndCell(MemorySegment table) {
        var mh$ = igTableEndCell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableEndCell", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetCellBgRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetCellBgRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableGetCellBgRect(ImRect *pOut, const ImGuiTable *table, int column_n)
     * }
     */
    public static FunctionDescriptor igTableGetCellBgRect$descriptor() {
        return igTableGetCellBgRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableGetCellBgRect(ImRect *pOut, const ImGuiTable *table, int column_n)
     * }
     */
    public static MethodHandle igTableGetCellBgRect$handle() {
        return igTableGetCellBgRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableGetCellBgRect(ImRect *pOut, const ImGuiTable *table, int column_n)
     * }
     */
    public static MemorySegment igTableGetCellBgRect$address() {
        return igTableGetCellBgRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableGetCellBgRect(ImRect *pOut, const ImGuiTable *table, int column_n)
     * }
     */
    public static void igTableGetCellBgRect(MemorySegment pOut, MemorySegment table, int column_n) {
        var mh$ = igTableGetCellBgRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetCellBgRect", pOut, table, column_n);
            }
            mh$.invokeExact(pOut, table, column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetColumnName_TablePtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetColumnName_TablePtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igTableGetColumnName_TablePtr(const ImGuiTable *table, int column_n)
     * }
     */
    public static FunctionDescriptor igTableGetColumnName_TablePtr$descriptor() {
        return igTableGetColumnName_TablePtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igTableGetColumnName_TablePtr(const ImGuiTable *table, int column_n)
     * }
     */
    public static MethodHandle igTableGetColumnName_TablePtr$handle() {
        return igTableGetColumnName_TablePtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igTableGetColumnName_TablePtr(const ImGuiTable *table, int column_n)
     * }
     */
    public static MemorySegment igTableGetColumnName_TablePtr$address() {
        return igTableGetColumnName_TablePtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igTableGetColumnName_TablePtr(const ImGuiTable *table, int column_n)
     * }
     */
    public static MemorySegment igTableGetColumnName_TablePtr(MemorySegment table, int column_n) {
        var mh$ = igTableGetColumnName_TablePtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetColumnName_TablePtr", table, column_n);
            }
            return (MemorySegment)mh$.invokeExact(table, column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetColumnResizeID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetColumnResizeID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igTableGetColumnResizeID(ImGuiTable *table, int column_n, int instance_no)
     * }
     */
    public static FunctionDescriptor igTableGetColumnResizeID$descriptor() {
        return igTableGetColumnResizeID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igTableGetColumnResizeID(ImGuiTable *table, int column_n, int instance_no)
     * }
     */
    public static MethodHandle igTableGetColumnResizeID$handle() {
        return igTableGetColumnResizeID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igTableGetColumnResizeID(ImGuiTable *table, int column_n, int instance_no)
     * }
     */
    public static MemorySegment igTableGetColumnResizeID$address() {
        return igTableGetColumnResizeID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igTableGetColumnResizeID(ImGuiTable *table, int column_n, int instance_no)
     * }
     */
    public static int igTableGetColumnResizeID(MemorySegment table, int column_n, int instance_no) {
        var mh$ = igTableGetColumnResizeID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetColumnResizeID", table, column_n, instance_no);
            }
            return (int)mh$.invokeExact(table, column_n, instance_no);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetMaxColumnWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetMaxColumnWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igTableGetMaxColumnWidth(const ImGuiTable *table, int column_n)
     * }
     */
    public static FunctionDescriptor igTableGetMaxColumnWidth$descriptor() {
        return igTableGetMaxColumnWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igTableGetMaxColumnWidth(const ImGuiTable *table, int column_n)
     * }
     */
    public static MethodHandle igTableGetMaxColumnWidth$handle() {
        return igTableGetMaxColumnWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igTableGetMaxColumnWidth(const ImGuiTable *table, int column_n)
     * }
     */
    public static MemorySegment igTableGetMaxColumnWidth$address() {
        return igTableGetMaxColumnWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igTableGetMaxColumnWidth(const ImGuiTable *table, int column_n)
     * }
     */
    public static float igTableGetMaxColumnWidth(MemorySegment table, int column_n) {
        var mh$ = igTableGetMaxColumnWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetMaxColumnWidth", table, column_n);
            }
            return (float)mh$.invokeExact(table, column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetColumnWidthAutoSingle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetColumnWidthAutoSingle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSetColumnWidthAutoSingle(ImGuiTable *table, int column_n)
     * }
     */
    public static FunctionDescriptor igTableSetColumnWidthAutoSingle$descriptor() {
        return igTableSetColumnWidthAutoSingle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSetColumnWidthAutoSingle(ImGuiTable *table, int column_n)
     * }
     */
    public static MethodHandle igTableSetColumnWidthAutoSingle$handle() {
        return igTableSetColumnWidthAutoSingle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSetColumnWidthAutoSingle(ImGuiTable *table, int column_n)
     * }
     */
    public static MemorySegment igTableSetColumnWidthAutoSingle$address() {
        return igTableSetColumnWidthAutoSingle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSetColumnWidthAutoSingle(ImGuiTable *table, int column_n)
     * }
     */
    public static void igTableSetColumnWidthAutoSingle(MemorySegment table, int column_n) {
        var mh$ = igTableSetColumnWidthAutoSingle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetColumnWidthAutoSingle", table, column_n);
            }
            mh$.invokeExact(table, column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetColumnWidthAutoAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetColumnWidthAutoAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSetColumnWidthAutoAll(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableSetColumnWidthAutoAll$descriptor() {
        return igTableSetColumnWidthAutoAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSetColumnWidthAutoAll(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableSetColumnWidthAutoAll$handle() {
        return igTableSetColumnWidthAutoAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSetColumnWidthAutoAll(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableSetColumnWidthAutoAll$address() {
        return igTableSetColumnWidthAutoAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSetColumnWidthAutoAll(ImGuiTable *table)
     * }
     */
    public static void igTableSetColumnWidthAutoAll(MemorySegment table) {
        var mh$ = igTableSetColumnWidthAutoAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetColumnWidthAutoAll", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableRemove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableRemove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableRemove(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableRemove$descriptor() {
        return igTableRemove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableRemove(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableRemove$handle() {
        return igTableRemove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableRemove(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableRemove$address() {
        return igTableRemove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableRemove(ImGuiTable *table)
     * }
     */
    public static void igTableRemove(MemorySegment table) {
        var mh$ = igTableRemove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableRemove", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGcCompactTransientBuffers_TablePtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGcCompactTransientBuffers_TablePtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableGcCompactTransientBuffers_TablePtr(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableGcCompactTransientBuffers_TablePtr$descriptor() {
        return igTableGcCompactTransientBuffers_TablePtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableGcCompactTransientBuffers_TablePtr(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableGcCompactTransientBuffers_TablePtr$handle() {
        return igTableGcCompactTransientBuffers_TablePtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableGcCompactTransientBuffers_TablePtr(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableGcCompactTransientBuffers_TablePtr$address() {
        return igTableGcCompactTransientBuffers_TablePtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableGcCompactTransientBuffers_TablePtr(ImGuiTable *table)
     * }
     */
    public static void igTableGcCompactTransientBuffers_TablePtr(MemorySegment table) {
        var mh$ = igTableGcCompactTransientBuffers_TablePtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGcCompactTransientBuffers_TablePtr", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGcCompactTransientBuffers_TableTempDataPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGcCompactTransientBuffers_TableTempDataPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableGcCompactTransientBuffers_TableTempDataPtr(ImGuiTableTempData *table)
     * }
     */
    public static FunctionDescriptor igTableGcCompactTransientBuffers_TableTempDataPtr$descriptor() {
        return igTableGcCompactTransientBuffers_TableTempDataPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableGcCompactTransientBuffers_TableTempDataPtr(ImGuiTableTempData *table)
     * }
     */
    public static MethodHandle igTableGcCompactTransientBuffers_TableTempDataPtr$handle() {
        return igTableGcCompactTransientBuffers_TableTempDataPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableGcCompactTransientBuffers_TableTempDataPtr(ImGuiTableTempData *table)
     * }
     */
    public static MemorySegment igTableGcCompactTransientBuffers_TableTempDataPtr$address() {
        return igTableGcCompactTransientBuffers_TableTempDataPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableGcCompactTransientBuffers_TableTempDataPtr(ImGuiTableTempData *table)
     * }
     */
    public static void igTableGcCompactTransientBuffers_TableTempDataPtr(MemorySegment table) {
        var mh$ = igTableGcCompactTransientBuffers_TableTempDataPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGcCompactTransientBuffers_TableTempDataPtr", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGcCompactSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGcCompactSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableGcCompactSettings()
     * }
     */
    public static FunctionDescriptor igTableGcCompactSettings$descriptor() {
        return igTableGcCompactSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableGcCompactSettings()
     * }
     */
    public static MethodHandle igTableGcCompactSettings$handle() {
        return igTableGcCompactSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableGcCompactSettings()
     * }
     */
    public static MemorySegment igTableGcCompactSettings$address() {
        return igTableGcCompactSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableGcCompactSettings()
     * }
     */
    public static void igTableGcCompactSettings() {
        var mh$ = igTableGcCompactSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGcCompactSettings");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableLoadSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableLoadSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableLoadSettings(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableLoadSettings$descriptor() {
        return igTableLoadSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableLoadSettings(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableLoadSettings$handle() {
        return igTableLoadSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableLoadSettings(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableLoadSettings$address() {
        return igTableLoadSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableLoadSettings(ImGuiTable *table)
     * }
     */
    public static void igTableLoadSettings(MemorySegment table) {
        var mh$ = igTableLoadSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableLoadSettings", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSaveSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSaveSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSaveSettings(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableSaveSettings$descriptor() {
        return igTableSaveSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSaveSettings(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableSaveSettings$handle() {
        return igTableSaveSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSaveSettings(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableSaveSettings$address() {
        return igTableSaveSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSaveSettings(ImGuiTable *table)
     * }
     */
    public static void igTableSaveSettings(MemorySegment table) {
        var mh$ = igTableSaveSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSaveSettings", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableResetSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableResetSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableResetSettings(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableResetSettings$descriptor() {
        return igTableResetSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableResetSettings(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableResetSettings$handle() {
        return igTableResetSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableResetSettings(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableResetSettings$address() {
        return igTableResetSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableResetSettings(ImGuiTable *table)
     * }
     */
    public static void igTableResetSettings(MemorySegment table) {
        var mh$ = igTableResetSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableResetSettings", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetBoundSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetBoundSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableGetBoundSettings(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igTableGetBoundSettings$descriptor() {
        return igTableGetBoundSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableGetBoundSettings(ImGuiTable *table)
     * }
     */
    public static MethodHandle igTableGetBoundSettings$handle() {
        return igTableGetBoundSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableGetBoundSettings(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableGetBoundSettings$address() {
        return igTableGetBoundSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableGetBoundSettings(ImGuiTable *table)
     * }
     */
    public static MemorySegment igTableGetBoundSettings(MemorySegment table) {
        var mh$ = igTableGetBoundSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetBoundSettings", table);
            }
            return (MemorySegment)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSettingsAddSettingsHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSettingsAddSettingsHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSettingsAddSettingsHandler()
     * }
     */
    public static FunctionDescriptor igTableSettingsAddSettingsHandler$descriptor() {
        return igTableSettingsAddSettingsHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSettingsAddSettingsHandler()
     * }
     */
    public static MethodHandle igTableSettingsAddSettingsHandler$handle() {
        return igTableSettingsAddSettingsHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSettingsAddSettingsHandler()
     * }
     */
    public static MemorySegment igTableSettingsAddSettingsHandler$address() {
        return igTableSettingsAddSettingsHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSettingsAddSettingsHandler()
     * }
     */
    public static void igTableSettingsAddSettingsHandler() {
        var mh$ = igTableSettingsAddSettingsHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSettingsAddSettingsHandler");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSettingsCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSettingsCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableSettingsCreate(ImGuiID id, int columns_count)
     * }
     */
    public static FunctionDescriptor igTableSettingsCreate$descriptor() {
        return igTableSettingsCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableSettingsCreate(ImGuiID id, int columns_count)
     * }
     */
    public static MethodHandle igTableSettingsCreate$handle() {
        return igTableSettingsCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableSettingsCreate(ImGuiID id, int columns_count)
     * }
     */
    public static MemorySegment igTableSettingsCreate$address() {
        return igTableSettingsCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableSettingsCreate(ImGuiID id, int columns_count)
     * }
     */
    public static MemorySegment igTableSettingsCreate(int id, int columns_count) {
        var mh$ = igTableSettingsCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSettingsCreate", id, columns_count);
            }
            return (MemorySegment)mh$.invokeExact(id, columns_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSettingsFindByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSettingsFindByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableSettingsFindByID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igTableSettingsFindByID$descriptor() {
        return igTableSettingsFindByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableSettingsFindByID(ImGuiID id)
     * }
     */
    public static MethodHandle igTableSettingsFindByID$handle() {
        return igTableSettingsFindByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableSettingsFindByID(ImGuiID id)
     * }
     */
    public static MemorySegment igTableSettingsFindByID$address() {
        return igTableSettingsFindByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableSettings *igTableSettingsFindByID(ImGuiID id)
     * }
     */
    public static MemorySegment igTableSettingsFindByID(int id) {
        var mh$ = igTableSettingsFindByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSettingsFindByID", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCurrentTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCurrentTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTabBar *igGetCurrentTabBar()
     * }
     */
    public static FunctionDescriptor igGetCurrentTabBar$descriptor() {
        return igGetCurrentTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTabBar *igGetCurrentTabBar()
     * }
     */
    public static MethodHandle igGetCurrentTabBar$handle() {
        return igGetCurrentTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTabBar *igGetCurrentTabBar()
     * }
     */
    public static MemorySegment igGetCurrentTabBar$address() {
        return igGetCurrentTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTabBar *igGetCurrentTabBar()
     * }
     */
    public static MemorySegment igGetCurrentTabBar() {
        var mh$ = igGetCurrentTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCurrentTabBar");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginTabBarEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImRect.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginTabBarEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginTabBarEx(ImGuiTabBar *tab_bar, const ImRect bb, ImGuiTabBarFlags flags)
     * }
     */
    public static FunctionDescriptor igBeginTabBarEx$descriptor() {
        return igBeginTabBarEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginTabBarEx(ImGuiTabBar *tab_bar, const ImRect bb, ImGuiTabBarFlags flags)
     * }
     */
    public static MethodHandle igBeginTabBarEx$handle() {
        return igBeginTabBarEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginTabBarEx(ImGuiTabBar *tab_bar, const ImRect bb, ImGuiTabBarFlags flags)
     * }
     */
    public static MemorySegment igBeginTabBarEx$address() {
        return igBeginTabBarEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginTabBarEx(ImGuiTabBar *tab_bar, const ImRect bb, ImGuiTabBarFlags flags)
     * }
     */
    public static boolean igBeginTabBarEx(MemorySegment tab_bar, MemorySegment bb, int flags) {
        var mh$ = igBeginTabBarEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginTabBarEx", tab_bar, bb, flags);
            }
            return (boolean)mh$.invokeExact(tab_bar, bb, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarFindTabByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarFindTabByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindTabByID(ImGuiTabBar *tab_bar, ImGuiID tab_id)
     * }
     */
    public static FunctionDescriptor igTabBarFindTabByID$descriptor() {
        return igTabBarFindTabByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindTabByID(ImGuiTabBar *tab_bar, ImGuiID tab_id)
     * }
     */
    public static MethodHandle igTabBarFindTabByID$handle() {
        return igTabBarFindTabByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindTabByID(ImGuiTabBar *tab_bar, ImGuiID tab_id)
     * }
     */
    public static MemorySegment igTabBarFindTabByID$address() {
        return igTabBarFindTabByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindTabByID(ImGuiTabBar *tab_bar, ImGuiID tab_id)
     * }
     */
    public static MemorySegment igTabBarFindTabByID(MemorySegment tab_bar, int tab_id) {
        var mh$ = igTabBarFindTabByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarFindTabByID", tab_bar, tab_id);
            }
            return (MemorySegment)mh$.invokeExact(tab_bar, tab_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarFindTabByOrder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarFindTabByOrder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindTabByOrder(ImGuiTabBar *tab_bar, int order)
     * }
     */
    public static FunctionDescriptor igTabBarFindTabByOrder$descriptor() {
        return igTabBarFindTabByOrder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindTabByOrder(ImGuiTabBar *tab_bar, int order)
     * }
     */
    public static MethodHandle igTabBarFindTabByOrder$handle() {
        return igTabBarFindTabByOrder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindTabByOrder(ImGuiTabBar *tab_bar, int order)
     * }
     */
    public static MemorySegment igTabBarFindTabByOrder$address() {
        return igTabBarFindTabByOrder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindTabByOrder(ImGuiTabBar *tab_bar, int order)
     * }
     */
    public static MemorySegment igTabBarFindTabByOrder(MemorySegment tab_bar, int order) {
        var mh$ = igTabBarFindTabByOrder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarFindTabByOrder", tab_bar, order);
            }
            return (MemorySegment)mh$.invokeExact(tab_bar, order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarFindMostRecentlySelectedTabForActiveWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarFindMostRecentlySelectedTabForActiveWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar *tab_bar)
     * }
     */
    public static FunctionDescriptor igTabBarFindMostRecentlySelectedTabForActiveWindow$descriptor() {
        return igTabBarFindMostRecentlySelectedTabForActiveWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar *tab_bar)
     * }
     */
    public static MethodHandle igTabBarFindMostRecentlySelectedTabForActiveWindow$handle() {
        return igTabBarFindMostRecentlySelectedTabForActiveWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar *tab_bar)
     * }
     */
    public static MemorySegment igTabBarFindMostRecentlySelectedTabForActiveWindow$address() {
        return igTabBarFindMostRecentlySelectedTabForActiveWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarFindMostRecentlySelectedTabForActiveWindow(ImGuiTabBar *tab_bar)
     * }
     */
    public static MemorySegment igTabBarFindMostRecentlySelectedTabForActiveWindow(MemorySegment tab_bar) {
        var mh$ = igTabBarFindMostRecentlySelectedTabForActiveWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarFindMostRecentlySelectedTabForActiveWindow", tab_bar);
            }
            return (MemorySegment)mh$.invokeExact(tab_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarGetCurrentTab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarGetCurrentTab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarGetCurrentTab(ImGuiTabBar *tab_bar)
     * }
     */
    public static FunctionDescriptor igTabBarGetCurrentTab$descriptor() {
        return igTabBarGetCurrentTab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarGetCurrentTab(ImGuiTabBar *tab_bar)
     * }
     */
    public static MethodHandle igTabBarGetCurrentTab$handle() {
        return igTabBarGetCurrentTab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarGetCurrentTab(ImGuiTabBar *tab_bar)
     * }
     */
    public static MemorySegment igTabBarGetCurrentTab$address() {
        return igTabBarGetCurrentTab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTabItem *igTabBarGetCurrentTab(ImGuiTabBar *tab_bar)
     * }
     */
    public static MemorySegment igTabBarGetCurrentTab(MemorySegment tab_bar) {
        var mh$ = igTabBarGetCurrentTab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarGetCurrentTab", tab_bar);
            }
            return (MemorySegment)mh$.invokeExact(tab_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarGetTabOrder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarGetTabOrder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igTabBarGetTabOrder(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static FunctionDescriptor igTabBarGetTabOrder$descriptor() {
        return igTabBarGetTabOrder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igTabBarGetTabOrder(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static MethodHandle igTabBarGetTabOrder$handle() {
        return igTabBarGetTabOrder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igTabBarGetTabOrder(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static MemorySegment igTabBarGetTabOrder$address() {
        return igTabBarGetTabOrder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igTabBarGetTabOrder(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static int igTabBarGetTabOrder(MemorySegment tab_bar, MemorySegment tab) {
        var mh$ = igTabBarGetTabOrder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarGetTabOrder", tab_bar, tab);
            }
            return (int)mh$.invokeExact(tab_bar, tab);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarGetTabName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarGetTabName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igTabBarGetTabName(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static FunctionDescriptor igTabBarGetTabName$descriptor() {
        return igTabBarGetTabName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igTabBarGetTabName(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static MethodHandle igTabBarGetTabName$handle() {
        return igTabBarGetTabName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igTabBarGetTabName(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static MemorySegment igTabBarGetTabName$address() {
        return igTabBarGetTabName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igTabBarGetTabName(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static MemorySegment igTabBarGetTabName(MemorySegment tab_bar, MemorySegment tab) {
        var mh$ = igTabBarGetTabName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarGetTabName", tab_bar, tab);
            }
            return (MemorySegment)mh$.invokeExact(tab_bar, tab);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarAddTab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarAddTab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabBarAddTab(ImGuiTabBar *tab_bar, ImGuiTabItemFlags tab_flags, ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igTabBarAddTab$descriptor() {
        return igTabBarAddTab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabBarAddTab(ImGuiTabBar *tab_bar, ImGuiTabItemFlags tab_flags, ImGuiWindow *window)
     * }
     */
    public static MethodHandle igTabBarAddTab$handle() {
        return igTabBarAddTab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabBarAddTab(ImGuiTabBar *tab_bar, ImGuiTabItemFlags tab_flags, ImGuiWindow *window)
     * }
     */
    public static MemorySegment igTabBarAddTab$address() {
        return igTabBarAddTab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabBarAddTab(ImGuiTabBar *tab_bar, ImGuiTabItemFlags tab_flags, ImGuiWindow *window)
     * }
     */
    public static void igTabBarAddTab(MemorySegment tab_bar, int tab_flags, MemorySegment window) {
        var mh$ = igTabBarAddTab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarAddTab", tab_bar, tab_flags, window);
            }
            mh$.invokeExact(tab_bar, tab_flags, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarRemoveTab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarRemoveTab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabBarRemoveTab(ImGuiTabBar *tab_bar, ImGuiID tab_id)
     * }
     */
    public static FunctionDescriptor igTabBarRemoveTab$descriptor() {
        return igTabBarRemoveTab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabBarRemoveTab(ImGuiTabBar *tab_bar, ImGuiID tab_id)
     * }
     */
    public static MethodHandle igTabBarRemoveTab$handle() {
        return igTabBarRemoveTab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabBarRemoveTab(ImGuiTabBar *tab_bar, ImGuiID tab_id)
     * }
     */
    public static MemorySegment igTabBarRemoveTab$address() {
        return igTabBarRemoveTab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabBarRemoveTab(ImGuiTabBar *tab_bar, ImGuiID tab_id)
     * }
     */
    public static void igTabBarRemoveTab(MemorySegment tab_bar, int tab_id) {
        var mh$ = igTabBarRemoveTab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarRemoveTab", tab_bar, tab_id);
            }
            mh$.invokeExact(tab_bar, tab_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarCloseTab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarCloseTab");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabBarCloseTab(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static FunctionDescriptor igTabBarCloseTab$descriptor() {
        return igTabBarCloseTab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabBarCloseTab(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static MethodHandle igTabBarCloseTab$handle() {
        return igTabBarCloseTab.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabBarCloseTab(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static MemorySegment igTabBarCloseTab$address() {
        return igTabBarCloseTab.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabBarCloseTab(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static void igTabBarCloseTab(MemorySegment tab_bar, MemorySegment tab) {
        var mh$ = igTabBarCloseTab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarCloseTab", tab_bar, tab);
            }
            mh$.invokeExact(tab_bar, tab);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarQueueFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarQueueFocus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabBarQueueFocus(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static FunctionDescriptor igTabBarQueueFocus$descriptor() {
        return igTabBarQueueFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabBarQueueFocus(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static MethodHandle igTabBarQueueFocus$handle() {
        return igTabBarQueueFocus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabBarQueueFocus(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static MemorySegment igTabBarQueueFocus$address() {
        return igTabBarQueueFocus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabBarQueueFocus(ImGuiTabBar *tab_bar, ImGuiTabItem *tab)
     * }
     */
    public static void igTabBarQueueFocus(MemorySegment tab_bar, MemorySegment tab) {
        var mh$ = igTabBarQueueFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarQueueFocus", tab_bar, tab);
            }
            mh$.invokeExact(tab_bar, tab);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarQueueReorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarQueueReorder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabBarQueueReorder(ImGuiTabBar *tab_bar, ImGuiTabItem *tab, int offset)
     * }
     */
    public static FunctionDescriptor igTabBarQueueReorder$descriptor() {
        return igTabBarQueueReorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabBarQueueReorder(ImGuiTabBar *tab_bar, ImGuiTabItem *tab, int offset)
     * }
     */
    public static MethodHandle igTabBarQueueReorder$handle() {
        return igTabBarQueueReorder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabBarQueueReorder(ImGuiTabBar *tab_bar, ImGuiTabItem *tab, int offset)
     * }
     */
    public static MemorySegment igTabBarQueueReorder$address() {
        return igTabBarQueueReorder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabBarQueueReorder(ImGuiTabBar *tab_bar, ImGuiTabItem *tab, int offset)
     * }
     */
    public static void igTabBarQueueReorder(MemorySegment tab_bar, MemorySegment tab, int offset) {
        var mh$ = igTabBarQueueReorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarQueueReorder", tab_bar, tab, offset);
            }
            mh$.invokeExact(tab_bar, tab, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarQueueReorderFromMousePos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarQueueReorderFromMousePos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabBarQueueReorderFromMousePos(ImGuiTabBar *tab_bar, ImGuiTabItem *tab, ImVec2 mouse_pos)
     * }
     */
    public static FunctionDescriptor igTabBarQueueReorderFromMousePos$descriptor() {
        return igTabBarQueueReorderFromMousePos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabBarQueueReorderFromMousePos(ImGuiTabBar *tab_bar, ImGuiTabItem *tab, ImVec2 mouse_pos)
     * }
     */
    public static MethodHandle igTabBarQueueReorderFromMousePos$handle() {
        return igTabBarQueueReorderFromMousePos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabBarQueueReorderFromMousePos(ImGuiTabBar *tab_bar, ImGuiTabItem *tab, ImVec2 mouse_pos)
     * }
     */
    public static MemorySegment igTabBarQueueReorderFromMousePos$address() {
        return igTabBarQueueReorderFromMousePos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabBarQueueReorderFromMousePos(ImGuiTabBar *tab_bar, ImGuiTabItem *tab, ImVec2 mouse_pos)
     * }
     */
    public static void igTabBarQueueReorderFromMousePos(MemorySegment tab_bar, MemorySegment tab, MemorySegment mouse_pos) {
        var mh$ = igTabBarQueueReorderFromMousePos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarQueueReorderFromMousePos", tab_bar, tab, mouse_pos);
            }
            mh$.invokeExact(tab_bar, tab, mouse_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabBarProcessReorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabBarProcessReorder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTabBarProcessReorder(ImGuiTabBar *tab_bar)
     * }
     */
    public static FunctionDescriptor igTabBarProcessReorder$descriptor() {
        return igTabBarProcessReorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTabBarProcessReorder(ImGuiTabBar *tab_bar)
     * }
     */
    public static MethodHandle igTabBarProcessReorder$handle() {
        return igTabBarProcessReorder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTabBarProcessReorder(ImGuiTabBar *tab_bar)
     * }
     */
    public static MemorySegment igTabBarProcessReorder$address() {
        return igTabBarProcessReorder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTabBarProcessReorder(ImGuiTabBar *tab_bar)
     * }
     */
    public static boolean igTabBarProcessReorder(MemorySegment tab_bar) {
        var mh$ = igTabBarProcessReorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabBarProcessReorder", tab_bar);
            }
            return (boolean)mh$.invokeExact(tab_bar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabItemEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabItemEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTabItemEx(ImGuiTabBar *tab_bar, const char *label, bool *p_open, ImGuiTabItemFlags flags, ImGuiWindow *docked_window)
     * }
     */
    public static FunctionDescriptor igTabItemEx$descriptor() {
        return igTabItemEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTabItemEx(ImGuiTabBar *tab_bar, const char *label, bool *p_open, ImGuiTabItemFlags flags, ImGuiWindow *docked_window)
     * }
     */
    public static MethodHandle igTabItemEx$handle() {
        return igTabItemEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTabItemEx(ImGuiTabBar *tab_bar, const char *label, bool *p_open, ImGuiTabItemFlags flags, ImGuiWindow *docked_window)
     * }
     */
    public static MemorySegment igTabItemEx$address() {
        return igTabItemEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTabItemEx(ImGuiTabBar *tab_bar, const char *label, bool *p_open, ImGuiTabItemFlags flags, ImGuiWindow *docked_window)
     * }
     */
    public static boolean igTabItemEx(MemorySegment tab_bar, MemorySegment label, MemorySegment p_open, int flags, MemorySegment docked_window) {
        var mh$ = igTabItemEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabItemEx", tab_bar, label, p_open, flags, docked_window);
            }
            return (boolean)mh$.invokeExact(tab_bar, label, p_open, flags, docked_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabItemCalcSize_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabItemCalcSize_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabItemCalcSize_Str(ImVec2 *pOut, const char *label, bool has_close_button_or_unsaved_marker)
     * }
     */
    public static FunctionDescriptor igTabItemCalcSize_Str$descriptor() {
        return igTabItemCalcSize_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabItemCalcSize_Str(ImVec2 *pOut, const char *label, bool has_close_button_or_unsaved_marker)
     * }
     */
    public static MethodHandle igTabItemCalcSize_Str$handle() {
        return igTabItemCalcSize_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabItemCalcSize_Str(ImVec2 *pOut, const char *label, bool has_close_button_or_unsaved_marker)
     * }
     */
    public static MemorySegment igTabItemCalcSize_Str$address() {
        return igTabItemCalcSize_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabItemCalcSize_Str(ImVec2 *pOut, const char *label, bool has_close_button_or_unsaved_marker)
     * }
     */
    public static void igTabItemCalcSize_Str(MemorySegment pOut, MemorySegment label, boolean has_close_button_or_unsaved_marker) {
        var mh$ = igTabItemCalcSize_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabItemCalcSize_Str", pOut, label, has_close_button_or_unsaved_marker);
            }
            mh$.invokeExact(pOut, label, has_close_button_or_unsaved_marker);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabItemCalcSize_WindowPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabItemCalcSize_WindowPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabItemCalcSize_WindowPtr(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igTabItemCalcSize_WindowPtr$descriptor() {
        return igTabItemCalcSize_WindowPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabItemCalcSize_WindowPtr(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static MethodHandle igTabItemCalcSize_WindowPtr$handle() {
        return igTabItemCalcSize_WindowPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabItemCalcSize_WindowPtr(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static MemorySegment igTabItemCalcSize_WindowPtr$address() {
        return igTabItemCalcSize_WindowPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabItemCalcSize_WindowPtr(ImVec2 *pOut, ImGuiWindow *window)
     * }
     */
    public static void igTabItemCalcSize_WindowPtr(MemorySegment pOut, MemorySegment window) {
        var mh$ = igTabItemCalcSize_WindowPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabItemCalcSize_WindowPtr", pOut, window);
            }
            mh$.invokeExact(pOut, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabItemBackground {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabItemBackground");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabItemBackground(ImDrawList *draw_list, const ImRect bb, ImGuiTabItemFlags flags, ImU32 col)
     * }
     */
    public static FunctionDescriptor igTabItemBackground$descriptor() {
        return igTabItemBackground.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabItemBackground(ImDrawList *draw_list, const ImRect bb, ImGuiTabItemFlags flags, ImU32 col)
     * }
     */
    public static MethodHandle igTabItemBackground$handle() {
        return igTabItemBackground.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabItemBackground(ImDrawList *draw_list, const ImRect bb, ImGuiTabItemFlags flags, ImU32 col)
     * }
     */
    public static MemorySegment igTabItemBackground$address() {
        return igTabItemBackground.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabItemBackground(ImDrawList *draw_list, const ImRect bb, ImGuiTabItemFlags flags, ImU32 col)
     * }
     */
    public static void igTabItemBackground(MemorySegment draw_list, MemorySegment bb, int flags, int col) {
        var mh$ = igTabItemBackground.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabItemBackground", draw_list, bb, flags, col);
            }
            mh$.invokeExact(draw_list, bb, flags, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabItemLabelAndCloseButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout(),
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabItemLabelAndCloseButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTabItemLabelAndCloseButton(ImDrawList *draw_list, const ImRect bb, ImGuiTabItemFlags flags, ImVec2 frame_padding, const char *label, ImGuiID tab_id, ImGuiID close_button_id, bool is_contents_visible, bool *out_just_closed, bool *out_text_clipped)
     * }
     */
    public static FunctionDescriptor igTabItemLabelAndCloseButton$descriptor() {
        return igTabItemLabelAndCloseButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTabItemLabelAndCloseButton(ImDrawList *draw_list, const ImRect bb, ImGuiTabItemFlags flags, ImVec2 frame_padding, const char *label, ImGuiID tab_id, ImGuiID close_button_id, bool is_contents_visible, bool *out_just_closed, bool *out_text_clipped)
     * }
     */
    public static MethodHandle igTabItemLabelAndCloseButton$handle() {
        return igTabItemLabelAndCloseButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTabItemLabelAndCloseButton(ImDrawList *draw_list, const ImRect bb, ImGuiTabItemFlags flags, ImVec2 frame_padding, const char *label, ImGuiID tab_id, ImGuiID close_button_id, bool is_contents_visible, bool *out_just_closed, bool *out_text_clipped)
     * }
     */
    public static MemorySegment igTabItemLabelAndCloseButton$address() {
        return igTabItemLabelAndCloseButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTabItemLabelAndCloseButton(ImDrawList *draw_list, const ImRect bb, ImGuiTabItemFlags flags, ImVec2 frame_padding, const char *label, ImGuiID tab_id, ImGuiID close_button_id, bool is_contents_visible, bool *out_just_closed, bool *out_text_clipped)
     * }
     */
    public static void igTabItemLabelAndCloseButton(MemorySegment draw_list, MemorySegment bb, int flags, MemorySegment frame_padding, MemorySegment label, int tab_id, int close_button_id, boolean is_contents_visible, MemorySegment out_just_closed, MemorySegment out_text_clipped) {
        var mh$ = igTabItemLabelAndCloseButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabItemLabelAndCloseButton", draw_list, bb, flags, frame_padding, label, tab_id, close_button_id, is_contents_visible, out_just_closed, out_text_clipped);
            }
            mh$.invokeExact(draw_list, bb, flags, frame_padding, label, tab_id, close_button_id, is_contents_visible, out_just_closed, out_text_clipped);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderText(ImVec2 pos, const char *text, const char *text_end, bool hide_text_after_hash)
     * }
     */
    public static FunctionDescriptor igRenderText$descriptor() {
        return igRenderText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderText(ImVec2 pos, const char *text, const char *text_end, bool hide_text_after_hash)
     * }
     */
    public static MethodHandle igRenderText$handle() {
        return igRenderText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderText(ImVec2 pos, const char *text, const char *text_end, bool hide_text_after_hash)
     * }
     */
    public static MemorySegment igRenderText$address() {
        return igRenderText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderText(ImVec2 pos, const char *text, const char *text_end, bool hide_text_after_hash)
     * }
     */
    public static void igRenderText(MemorySegment pos, MemorySegment text, MemorySegment text_end, boolean hide_text_after_hash) {
        var mh$ = igRenderText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderText", pos, text, text_end, hide_text_after_hash);
            }
            mh$.invokeExact(pos, text, text_end, hide_text_after_hash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderTextWrapped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderTextWrapped");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderTextWrapped(ImVec2 pos, const char *text, const char *text_end, float wrap_width)
     * }
     */
    public static FunctionDescriptor igRenderTextWrapped$descriptor() {
        return igRenderTextWrapped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderTextWrapped(ImVec2 pos, const char *text, const char *text_end, float wrap_width)
     * }
     */
    public static MethodHandle igRenderTextWrapped$handle() {
        return igRenderTextWrapped.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderTextWrapped(ImVec2 pos, const char *text, const char *text_end, float wrap_width)
     * }
     */
    public static MemorySegment igRenderTextWrapped$address() {
        return igRenderTextWrapped.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderTextWrapped(ImVec2 pos, const char *text, const char *text_end, float wrap_width)
     * }
     */
    public static void igRenderTextWrapped(MemorySegment pos, MemorySegment text, MemorySegment text_end, float wrap_width) {
        var mh$ = igRenderTextWrapped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderTextWrapped", pos, text, text_end, wrap_width);
            }
            mh$.invokeExact(pos, text, text_end, wrap_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderTextClipped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderTextClipped");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderTextClipped(const ImVec2 pos_min, const ImVec2 pos_max, const char *text, const char *text_end, const ImVec2 *text_size_if_known, const ImVec2 align, const ImRect *clip_rect)
     * }
     */
    public static FunctionDescriptor igRenderTextClipped$descriptor() {
        return igRenderTextClipped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderTextClipped(const ImVec2 pos_min, const ImVec2 pos_max, const char *text, const char *text_end, const ImVec2 *text_size_if_known, const ImVec2 align, const ImRect *clip_rect)
     * }
     */
    public static MethodHandle igRenderTextClipped$handle() {
        return igRenderTextClipped.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderTextClipped(const ImVec2 pos_min, const ImVec2 pos_max, const char *text, const char *text_end, const ImVec2 *text_size_if_known, const ImVec2 align, const ImRect *clip_rect)
     * }
     */
    public static MemorySegment igRenderTextClipped$address() {
        return igRenderTextClipped.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderTextClipped(const ImVec2 pos_min, const ImVec2 pos_max, const char *text, const char *text_end, const ImVec2 *text_size_if_known, const ImVec2 align, const ImRect *clip_rect)
     * }
     */
    public static void igRenderTextClipped(MemorySegment pos_min, MemorySegment pos_max, MemorySegment text, MemorySegment text_end, MemorySegment text_size_if_known, MemorySegment align, MemorySegment clip_rect) {
        var mh$ = igRenderTextClipped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderTextClipped", pos_min, pos_max, text, text_end, text_size_if_known, align, clip_rect);
            }
            mh$.invokeExact(pos_min, pos_max, text, text_end, text_size_if_known, align, clip_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderTextClippedEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderTextClippedEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderTextClippedEx(ImDrawList *draw_list, const ImVec2 pos_min, const ImVec2 pos_max, const char *text, const char *text_end, const ImVec2 *text_size_if_known, const ImVec2 align, const ImRect *clip_rect)
     * }
     */
    public static FunctionDescriptor igRenderTextClippedEx$descriptor() {
        return igRenderTextClippedEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderTextClippedEx(ImDrawList *draw_list, const ImVec2 pos_min, const ImVec2 pos_max, const char *text, const char *text_end, const ImVec2 *text_size_if_known, const ImVec2 align, const ImRect *clip_rect)
     * }
     */
    public static MethodHandle igRenderTextClippedEx$handle() {
        return igRenderTextClippedEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderTextClippedEx(ImDrawList *draw_list, const ImVec2 pos_min, const ImVec2 pos_max, const char *text, const char *text_end, const ImVec2 *text_size_if_known, const ImVec2 align, const ImRect *clip_rect)
     * }
     */
    public static MemorySegment igRenderTextClippedEx$address() {
        return igRenderTextClippedEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderTextClippedEx(ImDrawList *draw_list, const ImVec2 pos_min, const ImVec2 pos_max, const char *text, const char *text_end, const ImVec2 *text_size_if_known, const ImVec2 align, const ImRect *clip_rect)
     * }
     */
    public static void igRenderTextClippedEx(MemorySegment draw_list, MemorySegment pos_min, MemorySegment pos_max, MemorySegment text, MemorySegment text_end, MemorySegment text_size_if_known, MemorySegment align, MemorySegment clip_rect) {
        var mh$ = igRenderTextClippedEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderTextClippedEx", draw_list, pos_min, pos_max, text, text_end, text_size_if_known, align, clip_rect);
            }
            mh$.invokeExact(draw_list, pos_min, pos_max, text, text_end, text_size_if_known, align, clip_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderTextEllipsis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderTextEllipsis");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderTextEllipsis(ImDrawList *draw_list, const ImVec2 pos_min, const ImVec2 pos_max, float clip_max_x, float ellipsis_max_x, const char *text, const char *text_end, const ImVec2 *text_size_if_known)
     * }
     */
    public static FunctionDescriptor igRenderTextEllipsis$descriptor() {
        return igRenderTextEllipsis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderTextEllipsis(ImDrawList *draw_list, const ImVec2 pos_min, const ImVec2 pos_max, float clip_max_x, float ellipsis_max_x, const char *text, const char *text_end, const ImVec2 *text_size_if_known)
     * }
     */
    public static MethodHandle igRenderTextEllipsis$handle() {
        return igRenderTextEllipsis.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderTextEllipsis(ImDrawList *draw_list, const ImVec2 pos_min, const ImVec2 pos_max, float clip_max_x, float ellipsis_max_x, const char *text, const char *text_end, const ImVec2 *text_size_if_known)
     * }
     */
    public static MemorySegment igRenderTextEllipsis$address() {
        return igRenderTextEllipsis.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderTextEllipsis(ImDrawList *draw_list, const ImVec2 pos_min, const ImVec2 pos_max, float clip_max_x, float ellipsis_max_x, const char *text, const char *text_end, const ImVec2 *text_size_if_known)
     * }
     */
    public static void igRenderTextEllipsis(MemorySegment draw_list, MemorySegment pos_min, MemorySegment pos_max, float clip_max_x, float ellipsis_max_x, MemorySegment text, MemorySegment text_end, MemorySegment text_size_if_known) {
        var mh$ = igRenderTextEllipsis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderTextEllipsis", draw_list, pos_min, pos_max, clip_max_x, ellipsis_max_x, text, text_end, text_size_if_known);
            }
            mh$.invokeExact(draw_list, pos_min, pos_max, clip_max_x, ellipsis_max_x, text, text_end, text_size_if_known);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_BOOL,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)
     * }
     */
    public static FunctionDescriptor igRenderFrame$descriptor() {
        return igRenderFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)
     * }
     */
    public static MethodHandle igRenderFrame$handle() {
        return igRenderFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)
     * }
     */
    public static MemorySegment igRenderFrame$address() {
        return igRenderFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)
     * }
     */
    public static void igRenderFrame(MemorySegment p_min, MemorySegment p_max, int fill_col, boolean border, float rounding) {
        var mh$ = igRenderFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderFrame", p_min, p_max, fill_col, border, rounding);
            }
            mh$.invokeExact(p_min, p_max, fill_col, border, rounding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderFrameBorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderFrameBorder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)
     * }
     */
    public static FunctionDescriptor igRenderFrameBorder$descriptor() {
        return igRenderFrameBorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)
     * }
     */
    public static MethodHandle igRenderFrameBorder$handle() {
        return igRenderFrameBorder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)
     * }
     */
    public static MemorySegment igRenderFrameBorder$address() {
        return igRenderFrameBorder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)
     * }
     */
    public static void igRenderFrameBorder(MemorySegment p_min, MemorySegment p_max, float rounding) {
        var mh$ = igRenderFrameBorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderFrameBorder", p_min, p_max, rounding);
            }
            mh$.invokeExact(p_min, p_max, rounding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderColorRectWithAlphaCheckerboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderColorRectWithAlphaCheckerboard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderColorRectWithAlphaCheckerboard(ImDrawList *draw_list, ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, float grid_step, ImVec2 grid_off, float rounding, ImDrawFlags flags)
     * }
     */
    public static FunctionDescriptor igRenderColorRectWithAlphaCheckerboard$descriptor() {
        return igRenderColorRectWithAlphaCheckerboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderColorRectWithAlphaCheckerboard(ImDrawList *draw_list, ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, float grid_step, ImVec2 grid_off, float rounding, ImDrawFlags flags)
     * }
     */
    public static MethodHandle igRenderColorRectWithAlphaCheckerboard$handle() {
        return igRenderColorRectWithAlphaCheckerboard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderColorRectWithAlphaCheckerboard(ImDrawList *draw_list, ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, float grid_step, ImVec2 grid_off, float rounding, ImDrawFlags flags)
     * }
     */
    public static MemorySegment igRenderColorRectWithAlphaCheckerboard$address() {
        return igRenderColorRectWithAlphaCheckerboard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderColorRectWithAlphaCheckerboard(ImDrawList *draw_list, ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, float grid_step, ImVec2 grid_off, float rounding, ImDrawFlags flags)
     * }
     */
    public static void igRenderColorRectWithAlphaCheckerboard(MemorySegment draw_list, MemorySegment p_min, MemorySegment p_max, int fill_col, float grid_step, MemorySegment grid_off, float rounding, int flags) {
        var mh$ = igRenderColorRectWithAlphaCheckerboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderColorRectWithAlphaCheckerboard", draw_list, p_min, p_max, fill_col, grid_step, grid_off, rounding, flags);
            }
            mh$.invokeExact(draw_list, p_min, p_max, fill_col, grid_step, grid_off, rounding, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderNavHighlight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderNavHighlight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderNavHighlight(const ImRect bb, ImGuiID id, ImGuiNavHighlightFlags flags)
     * }
     */
    public static FunctionDescriptor igRenderNavHighlight$descriptor() {
        return igRenderNavHighlight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderNavHighlight(const ImRect bb, ImGuiID id, ImGuiNavHighlightFlags flags)
     * }
     */
    public static MethodHandle igRenderNavHighlight$handle() {
        return igRenderNavHighlight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderNavHighlight(const ImRect bb, ImGuiID id, ImGuiNavHighlightFlags flags)
     * }
     */
    public static MemorySegment igRenderNavHighlight$address() {
        return igRenderNavHighlight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderNavHighlight(const ImRect bb, ImGuiID id, ImGuiNavHighlightFlags flags)
     * }
     */
    public static void igRenderNavHighlight(MemorySegment bb, int id, int flags) {
        var mh$ = igRenderNavHighlight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderNavHighlight", bb, id, flags);
            }
            mh$.invokeExact(bb, id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindRenderedTextEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindRenderedTextEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igFindRenderedTextEnd(const char *text, const char *text_end)
     * }
     */
    public static FunctionDescriptor igFindRenderedTextEnd$descriptor() {
        return igFindRenderedTextEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igFindRenderedTextEnd(const char *text, const char *text_end)
     * }
     */
    public static MethodHandle igFindRenderedTextEnd$handle() {
        return igFindRenderedTextEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igFindRenderedTextEnd(const char *text, const char *text_end)
     * }
     */
    public static MemorySegment igFindRenderedTextEnd$address() {
        return igFindRenderedTextEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igFindRenderedTextEnd(const char *text, const char *text_end)
     * }
     */
    public static MemorySegment igFindRenderedTextEnd(MemorySegment text, MemorySegment text_end) {
        var mh$ = igFindRenderedTextEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindRenderedTextEnd", text, text_end);
            }
            return (MemorySegment)mh$.invokeExact(text, text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderMouseCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderMouseCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderMouseCursor(ImVec2 pos, float scale, ImGuiMouseCursor mouse_cursor, ImU32 col_fill, ImU32 col_border, ImU32 col_shadow)
     * }
     */
    public static FunctionDescriptor igRenderMouseCursor$descriptor() {
        return igRenderMouseCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderMouseCursor(ImVec2 pos, float scale, ImGuiMouseCursor mouse_cursor, ImU32 col_fill, ImU32 col_border, ImU32 col_shadow)
     * }
     */
    public static MethodHandle igRenderMouseCursor$handle() {
        return igRenderMouseCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderMouseCursor(ImVec2 pos, float scale, ImGuiMouseCursor mouse_cursor, ImU32 col_fill, ImU32 col_border, ImU32 col_shadow)
     * }
     */
    public static MemorySegment igRenderMouseCursor$address() {
        return igRenderMouseCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderMouseCursor(ImVec2 pos, float scale, ImGuiMouseCursor mouse_cursor, ImU32 col_fill, ImU32 col_border, ImU32 col_shadow)
     * }
     */
    public static void igRenderMouseCursor(MemorySegment pos, float scale, int mouse_cursor, int col_fill, int col_border, int col_shadow) {
        var mh$ = igRenderMouseCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderMouseCursor", pos, scale, mouse_cursor, col_fill, col_border, col_shadow);
            }
            mh$.invokeExact(pos, scale, mouse_cursor, col_fill, col_border, col_shadow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderArrow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderArrow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderArrow(ImDrawList *draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)
     * }
     */
    public static FunctionDescriptor igRenderArrow$descriptor() {
        return igRenderArrow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderArrow(ImDrawList *draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)
     * }
     */
    public static MethodHandle igRenderArrow$handle() {
        return igRenderArrow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderArrow(ImDrawList *draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)
     * }
     */
    public static MemorySegment igRenderArrow$address() {
        return igRenderArrow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderArrow(ImDrawList *draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)
     * }
     */
    public static void igRenderArrow(MemorySegment draw_list, MemorySegment pos, int col, int dir, float scale) {
        var mh$ = igRenderArrow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderArrow", draw_list, pos, col, dir, scale);
            }
            mh$.invokeExact(draw_list, pos, col, dir, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderBullet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderBullet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderBullet(ImDrawList *draw_list, ImVec2 pos, ImU32 col)
     * }
     */
    public static FunctionDescriptor igRenderBullet$descriptor() {
        return igRenderBullet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderBullet(ImDrawList *draw_list, ImVec2 pos, ImU32 col)
     * }
     */
    public static MethodHandle igRenderBullet$handle() {
        return igRenderBullet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderBullet(ImDrawList *draw_list, ImVec2 pos, ImU32 col)
     * }
     */
    public static MemorySegment igRenderBullet$address() {
        return igRenderBullet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderBullet(ImDrawList *draw_list, ImVec2 pos, ImU32 col)
     * }
     */
    public static void igRenderBullet(MemorySegment draw_list, MemorySegment pos, int col) {
        var mh$ = igRenderBullet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderBullet", draw_list, pos, col);
            }
            mh$.invokeExact(draw_list, pos, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderCheckMark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderCheckMark");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderCheckMark(ImDrawList *draw_list, ImVec2 pos, ImU32 col, float sz)
     * }
     */
    public static FunctionDescriptor igRenderCheckMark$descriptor() {
        return igRenderCheckMark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderCheckMark(ImDrawList *draw_list, ImVec2 pos, ImU32 col, float sz)
     * }
     */
    public static MethodHandle igRenderCheckMark$handle() {
        return igRenderCheckMark.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderCheckMark(ImDrawList *draw_list, ImVec2 pos, ImU32 col, float sz)
     * }
     */
    public static MemorySegment igRenderCheckMark$address() {
        return igRenderCheckMark.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderCheckMark(ImDrawList *draw_list, ImVec2 pos, ImU32 col, float sz)
     * }
     */
    public static void igRenderCheckMark(MemorySegment draw_list, MemorySegment pos, int col, float sz) {
        var mh$ = igRenderCheckMark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderCheckMark", draw_list, pos, col, sz);
            }
            mh$.invokeExact(draw_list, pos, col, sz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderArrowPointingAt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderArrowPointingAt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderArrowPointingAt(ImDrawList *draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir direction, ImU32 col)
     * }
     */
    public static FunctionDescriptor igRenderArrowPointingAt$descriptor() {
        return igRenderArrowPointingAt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderArrowPointingAt(ImDrawList *draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir direction, ImU32 col)
     * }
     */
    public static MethodHandle igRenderArrowPointingAt$handle() {
        return igRenderArrowPointingAt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderArrowPointingAt(ImDrawList *draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir direction, ImU32 col)
     * }
     */
    public static MemorySegment igRenderArrowPointingAt$address() {
        return igRenderArrowPointingAt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderArrowPointingAt(ImDrawList *draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir direction, ImU32 col)
     * }
     */
    public static void igRenderArrowPointingAt(MemorySegment draw_list, MemorySegment pos, MemorySegment half_sz, int direction, int col) {
        var mh$ = igRenderArrowPointingAt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderArrowPointingAt", draw_list, pos, half_sz, direction, col);
            }
            mh$.invokeExact(draw_list, pos, half_sz, direction, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderArrowDockMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderArrowDockMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderArrowDockMenu(ImDrawList *draw_list, ImVec2 p_min, float sz, ImU32 col)
     * }
     */
    public static FunctionDescriptor igRenderArrowDockMenu$descriptor() {
        return igRenderArrowDockMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderArrowDockMenu(ImDrawList *draw_list, ImVec2 p_min, float sz, ImU32 col)
     * }
     */
    public static MethodHandle igRenderArrowDockMenu$handle() {
        return igRenderArrowDockMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderArrowDockMenu(ImDrawList *draw_list, ImVec2 p_min, float sz, ImU32 col)
     * }
     */
    public static MemorySegment igRenderArrowDockMenu$address() {
        return igRenderArrowDockMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderArrowDockMenu(ImDrawList *draw_list, ImVec2 p_min, float sz, ImU32 col)
     * }
     */
    public static void igRenderArrowDockMenu(MemorySegment draw_list, MemorySegment p_min, float sz, int col) {
        var mh$ = igRenderArrowDockMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderArrowDockMenu", draw_list, p_min, sz, col);
            }
            mh$.invokeExact(draw_list, p_min, sz, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderRectFilledRangeH {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderRectFilledRangeH");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderRectFilledRangeH(ImDrawList *draw_list, const ImRect rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding)
     * }
     */
    public static FunctionDescriptor igRenderRectFilledRangeH$descriptor() {
        return igRenderRectFilledRangeH.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderRectFilledRangeH(ImDrawList *draw_list, const ImRect rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding)
     * }
     */
    public static MethodHandle igRenderRectFilledRangeH$handle() {
        return igRenderRectFilledRangeH.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderRectFilledRangeH(ImDrawList *draw_list, const ImRect rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding)
     * }
     */
    public static MemorySegment igRenderRectFilledRangeH$address() {
        return igRenderRectFilledRangeH.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderRectFilledRangeH(ImDrawList *draw_list, const ImRect rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding)
     * }
     */
    public static void igRenderRectFilledRangeH(MemorySegment draw_list, MemorySegment rect, int col, float x_start_norm, float x_end_norm, float rounding) {
        var mh$ = igRenderRectFilledRangeH.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderRectFilledRangeH", draw_list, rect, col, x_start_norm, x_end_norm, rounding);
            }
            mh$.invokeExact(draw_list, rect, col, x_start_norm, x_end_norm, rounding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderRectFilledWithHole {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout(),
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderRectFilledWithHole");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderRectFilledWithHole(ImDrawList *draw_list, const ImRect outer, const ImRect inner, ImU32 col, float rounding)
     * }
     */
    public static FunctionDescriptor igRenderRectFilledWithHole$descriptor() {
        return igRenderRectFilledWithHole.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderRectFilledWithHole(ImDrawList *draw_list, const ImRect outer, const ImRect inner, ImU32 col, float rounding)
     * }
     */
    public static MethodHandle igRenderRectFilledWithHole$handle() {
        return igRenderRectFilledWithHole.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderRectFilledWithHole(ImDrawList *draw_list, const ImRect outer, const ImRect inner, ImU32 col, float rounding)
     * }
     */
    public static MemorySegment igRenderRectFilledWithHole$address() {
        return igRenderRectFilledWithHole.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderRectFilledWithHole(ImDrawList *draw_list, const ImRect outer, const ImRect inner, ImU32 col, float rounding)
     * }
     */
    public static void igRenderRectFilledWithHole(MemorySegment draw_list, MemorySegment outer, MemorySegment inner, int col, float rounding) {
        var mh$ = igRenderRectFilledWithHole.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderRectFilledWithHole", draw_list, outer, inner, col, rounding);
            }
            mh$.invokeExact(draw_list, outer, inner, col, rounding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCalcRoundingFlagsForRectInRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            ImRect.layout(),
            ImRect.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCalcRoundingFlagsForRectInRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawFlags igCalcRoundingFlagsForRectInRect(const ImRect r_in, const ImRect r_outer, float threshold)
     * }
     */
    public static FunctionDescriptor igCalcRoundingFlagsForRectInRect$descriptor() {
        return igCalcRoundingFlagsForRectInRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawFlags igCalcRoundingFlagsForRectInRect(const ImRect r_in, const ImRect r_outer, float threshold)
     * }
     */
    public static MethodHandle igCalcRoundingFlagsForRectInRect$handle() {
        return igCalcRoundingFlagsForRectInRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawFlags igCalcRoundingFlagsForRectInRect(const ImRect r_in, const ImRect r_outer, float threshold)
     * }
     */
    public static MemorySegment igCalcRoundingFlagsForRectInRect$address() {
        return igCalcRoundingFlagsForRectInRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawFlags igCalcRoundingFlagsForRectInRect(const ImRect r_in, const ImRect r_outer, float threshold)
     * }
     */
    public static int igCalcRoundingFlagsForRectInRect(MemorySegment r_in, MemorySegment r_outer, float threshold) {
        var mh$ = igCalcRoundingFlagsForRectInRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCalcRoundingFlagsForRectInRect", r_in, r_outer, threshold);
            }
            return (int)mh$.invokeExact(r_in, r_outer, threshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTextEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTextEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTextEx(const char *text, const char *text_end, ImGuiTextFlags flags)
     * }
     */
    public static FunctionDescriptor igTextEx$descriptor() {
        return igTextEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTextEx(const char *text, const char *text_end, ImGuiTextFlags flags)
     * }
     */
    public static MethodHandle igTextEx$handle() {
        return igTextEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTextEx(const char *text, const char *text_end, ImGuiTextFlags flags)
     * }
     */
    public static MemorySegment igTextEx$address() {
        return igTextEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTextEx(const char *text, const char *text_end, ImGuiTextFlags flags)
     * }
     */
    public static void igTextEx(MemorySegment text, MemorySegment text_end, int flags) {
        var mh$ = igTextEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTextEx", text, text_end, flags);
            }
            mh$.invokeExact(text, text_end, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igButtonEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igButtonEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igButtonEx(const char *label, const ImVec2 size_arg, ImGuiButtonFlags flags)
     * }
     */
    public static FunctionDescriptor igButtonEx$descriptor() {
        return igButtonEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igButtonEx(const char *label, const ImVec2 size_arg, ImGuiButtonFlags flags)
     * }
     */
    public static MethodHandle igButtonEx$handle() {
        return igButtonEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igButtonEx(const char *label, const ImVec2 size_arg, ImGuiButtonFlags flags)
     * }
     */
    public static MemorySegment igButtonEx$address() {
        return igButtonEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igButtonEx(const char *label, const ImVec2 size_arg, ImGuiButtonFlags flags)
     * }
     */
    public static boolean igButtonEx(MemorySegment label, MemorySegment size_arg, int flags) {
        var mh$ = igButtonEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igButtonEx", label, size_arg, flags);
            }
            return (boolean)mh$.invokeExact(label, size_arg, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igArrowButtonEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igArrowButtonEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igArrowButtonEx(const char *str_id, ImGuiDir dir, ImVec2 size_arg, ImGuiButtonFlags flags)
     * }
     */
    public static FunctionDescriptor igArrowButtonEx$descriptor() {
        return igArrowButtonEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igArrowButtonEx(const char *str_id, ImGuiDir dir, ImVec2 size_arg, ImGuiButtonFlags flags)
     * }
     */
    public static MethodHandle igArrowButtonEx$handle() {
        return igArrowButtonEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igArrowButtonEx(const char *str_id, ImGuiDir dir, ImVec2 size_arg, ImGuiButtonFlags flags)
     * }
     */
    public static MemorySegment igArrowButtonEx$address() {
        return igArrowButtonEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igArrowButtonEx(const char *str_id, ImGuiDir dir, ImVec2 size_arg, ImGuiButtonFlags flags)
     * }
     */
    public static boolean igArrowButtonEx(MemorySegment str_id, int dir, MemorySegment size_arg, int flags) {
        var mh$ = igArrowButtonEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igArrowButtonEx", str_id, dir, size_arg, flags);
            }
            return (boolean)mh$.invokeExact(str_id, dir, size_arg, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImageButtonEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec4.layout(),
            ImVec4.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImageButtonEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 bg_col, const ImVec4 tint_col, ImGuiButtonFlags flags)
     * }
     */
    public static FunctionDescriptor igImageButtonEx$descriptor() {
        return igImageButtonEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 bg_col, const ImVec4 tint_col, ImGuiButtonFlags flags)
     * }
     */
    public static MethodHandle igImageButtonEx$handle() {
        return igImageButtonEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 bg_col, const ImVec4 tint_col, ImGuiButtonFlags flags)
     * }
     */
    public static MemorySegment igImageButtonEx$address() {
        return igImageButtonEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 bg_col, const ImVec4 tint_col, ImGuiButtonFlags flags)
     * }
     */
    public static boolean igImageButtonEx(int id, MemorySegment texture_id, MemorySegment image_size, MemorySegment uv0, MemorySegment uv1, MemorySegment bg_col, MemorySegment tint_col, int flags) {
        var mh$ = igImageButtonEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImageButtonEx", id, texture_id, image_size, uv0, uv1, bg_col, tint_col, flags);
            }
            return (boolean)mh$.invokeExact(id, texture_id, image_size, uv0, uv1, bg_col, tint_col, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSeparatorEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSeparatorEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSeparatorEx(ImGuiSeparatorFlags flags, float thickness)
     * }
     */
    public static FunctionDescriptor igSeparatorEx$descriptor() {
        return igSeparatorEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSeparatorEx(ImGuiSeparatorFlags flags, float thickness)
     * }
     */
    public static MethodHandle igSeparatorEx$handle() {
        return igSeparatorEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSeparatorEx(ImGuiSeparatorFlags flags, float thickness)
     * }
     */
    public static MemorySegment igSeparatorEx$address() {
        return igSeparatorEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSeparatorEx(ImGuiSeparatorFlags flags, float thickness)
     * }
     */
    public static void igSeparatorEx(int flags, float thickness) {
        var mh$ = igSeparatorEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSeparatorEx", flags, thickness);
            }
            mh$.invokeExact(flags, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSeparatorTextEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSeparatorTextEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSeparatorTextEx(ImGuiID id, const char *label, const char *label_end, float extra_width)
     * }
     */
    public static FunctionDescriptor igSeparatorTextEx$descriptor() {
        return igSeparatorTextEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSeparatorTextEx(ImGuiID id, const char *label, const char *label_end, float extra_width)
     * }
     */
    public static MethodHandle igSeparatorTextEx$handle() {
        return igSeparatorTextEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSeparatorTextEx(ImGuiID id, const char *label, const char *label_end, float extra_width)
     * }
     */
    public static MemorySegment igSeparatorTextEx$address() {
        return igSeparatorTextEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSeparatorTextEx(ImGuiID id, const char *label, const char *label_end, float extra_width)
     * }
     */
    public static void igSeparatorTextEx(int id, MemorySegment label, MemorySegment label_end, float extra_width) {
        var mh$ = igSeparatorTextEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSeparatorTextEx", id, label, label_end, extra_width);
            }
            mh$.invokeExact(id, label, label_end, extra_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCheckboxFlags_S64Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCheckboxFlags_S64Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_S64Ptr(const char *label, ImS64 *flags, ImS64 flags_value)
     * }
     */
    public static FunctionDescriptor igCheckboxFlags_S64Ptr$descriptor() {
        return igCheckboxFlags_S64Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_S64Ptr(const char *label, ImS64 *flags, ImS64 flags_value)
     * }
     */
    public static MethodHandle igCheckboxFlags_S64Ptr$handle() {
        return igCheckboxFlags_S64Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_S64Ptr(const char *label, ImS64 *flags, ImS64 flags_value)
     * }
     */
    public static MemorySegment igCheckboxFlags_S64Ptr$address() {
        return igCheckboxFlags_S64Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_S64Ptr(const char *label, ImS64 *flags, ImS64 flags_value)
     * }
     */
    public static boolean igCheckboxFlags_S64Ptr(MemorySegment label, MemorySegment flags, long flags_value) {
        var mh$ = igCheckboxFlags_S64Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCheckboxFlags_S64Ptr", label, flags, flags_value);
            }
            return (boolean)mh$.invokeExact(label, flags, flags_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCheckboxFlags_U64Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCheckboxFlags_U64Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_U64Ptr(const char *label, ImU64 *flags, ImU64 flags_value)
     * }
     */
    public static FunctionDescriptor igCheckboxFlags_U64Ptr$descriptor() {
        return igCheckboxFlags_U64Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_U64Ptr(const char *label, ImU64 *flags, ImU64 flags_value)
     * }
     */
    public static MethodHandle igCheckboxFlags_U64Ptr$handle() {
        return igCheckboxFlags_U64Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_U64Ptr(const char *label, ImU64 *flags, ImU64 flags_value)
     * }
     */
    public static MemorySegment igCheckboxFlags_U64Ptr$address() {
        return igCheckboxFlags_U64Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_U64Ptr(const char *label, ImU64 *flags, ImU64 flags_value)
     * }
     */
    public static boolean igCheckboxFlags_U64Ptr(MemorySegment label, MemorySegment flags, long flags_value) {
        var mh$ = igCheckboxFlags_U64Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCheckboxFlags_U64Ptr", label, flags, flags_value);
            }
            return (boolean)mh$.invokeExact(label, flags, flags_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCloseButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCloseButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCloseButton(ImGuiID id, const ImVec2 pos)
     * }
     */
    public static FunctionDescriptor igCloseButton$descriptor() {
        return igCloseButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCloseButton(ImGuiID id, const ImVec2 pos)
     * }
     */
    public static MethodHandle igCloseButton$handle() {
        return igCloseButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCloseButton(ImGuiID id, const ImVec2 pos)
     * }
     */
    public static MemorySegment igCloseButton$address() {
        return igCloseButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCloseButton(ImGuiID id, const ImVec2 pos)
     * }
     */
    public static boolean igCloseButton(int id, MemorySegment pos) {
        var mh$ = igCloseButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCloseButton", id, pos);
            }
            return (boolean)mh$.invokeExact(id, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCollapseButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCollapseButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCollapseButton(ImGuiID id, const ImVec2 pos, ImGuiDockNode *dock_node)
     * }
     */
    public static FunctionDescriptor igCollapseButton$descriptor() {
        return igCollapseButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCollapseButton(ImGuiID id, const ImVec2 pos, ImGuiDockNode *dock_node)
     * }
     */
    public static MethodHandle igCollapseButton$handle() {
        return igCollapseButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCollapseButton(ImGuiID id, const ImVec2 pos, ImGuiDockNode *dock_node)
     * }
     */
    public static MemorySegment igCollapseButton$address() {
        return igCollapseButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCollapseButton(ImGuiID id, const ImVec2 pos, ImGuiDockNode *dock_node)
     * }
     */
    public static boolean igCollapseButton(int id, MemorySegment pos, MemorySegment dock_node) {
        var mh$ = igCollapseButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCollapseButton", id, pos, dock_node);
            }
            return (boolean)mh$.invokeExact(id, pos, dock_node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igScrollbar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igScrollbar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igScrollbar(ImGuiAxis axis)
     * }
     */
    public static FunctionDescriptor igScrollbar$descriptor() {
        return igScrollbar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igScrollbar(ImGuiAxis axis)
     * }
     */
    public static MethodHandle igScrollbar$handle() {
        return igScrollbar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igScrollbar(ImGuiAxis axis)
     * }
     */
    public static MemorySegment igScrollbar$address() {
        return igScrollbar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igScrollbar(ImGuiAxis axis)
     * }
     */
    public static void igScrollbar(int axis) {
        var mh$ = igScrollbar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igScrollbar", axis);
            }
            mh$.invokeExact(axis);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igScrollbarEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_LONG_LONG,
            imgui.C_LONG_LONG,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igScrollbarEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igScrollbarEx(const ImRect bb, ImGuiID id, ImGuiAxis axis, ImS64 *p_scroll_v, ImS64 avail_v, ImS64 contents_v, ImDrawFlags flags)
     * }
     */
    public static FunctionDescriptor igScrollbarEx$descriptor() {
        return igScrollbarEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igScrollbarEx(const ImRect bb, ImGuiID id, ImGuiAxis axis, ImS64 *p_scroll_v, ImS64 avail_v, ImS64 contents_v, ImDrawFlags flags)
     * }
     */
    public static MethodHandle igScrollbarEx$handle() {
        return igScrollbarEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igScrollbarEx(const ImRect bb, ImGuiID id, ImGuiAxis axis, ImS64 *p_scroll_v, ImS64 avail_v, ImS64 contents_v, ImDrawFlags flags)
     * }
     */
    public static MemorySegment igScrollbarEx$address() {
        return igScrollbarEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igScrollbarEx(const ImRect bb, ImGuiID id, ImGuiAxis axis, ImS64 *p_scroll_v, ImS64 avail_v, ImS64 contents_v, ImDrawFlags flags)
     * }
     */
    public static boolean igScrollbarEx(MemorySegment bb, int id, int axis, MemorySegment p_scroll_v, long avail_v, long contents_v, int flags) {
        var mh$ = igScrollbarEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igScrollbarEx", bb, id, axis, p_scroll_v, avail_v, contents_v, flags);
            }
            return (boolean)mh$.invokeExact(bb, id, axis, p_scroll_v, avail_v, contents_v, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowScrollbarRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowScrollbarRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetWindowScrollbarRect(ImRect *pOut, ImGuiWindow *window, ImGuiAxis axis)
     * }
     */
    public static FunctionDescriptor igGetWindowScrollbarRect$descriptor() {
        return igGetWindowScrollbarRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetWindowScrollbarRect(ImRect *pOut, ImGuiWindow *window, ImGuiAxis axis)
     * }
     */
    public static MethodHandle igGetWindowScrollbarRect$handle() {
        return igGetWindowScrollbarRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetWindowScrollbarRect(ImRect *pOut, ImGuiWindow *window, ImGuiAxis axis)
     * }
     */
    public static MemorySegment igGetWindowScrollbarRect$address() {
        return igGetWindowScrollbarRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetWindowScrollbarRect(ImRect *pOut, ImGuiWindow *window, ImGuiAxis axis)
     * }
     */
    public static void igGetWindowScrollbarRect(MemorySegment pOut, MemorySegment window, int axis) {
        var mh$ = igGetWindowScrollbarRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowScrollbarRect", pOut, window, axis);
            }
            mh$.invokeExact(pOut, window, axis);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowScrollbarID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowScrollbarID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowScrollbarID(ImGuiWindow *window, ImGuiAxis axis)
     * }
     */
    public static FunctionDescriptor igGetWindowScrollbarID$descriptor() {
        return igGetWindowScrollbarID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowScrollbarID(ImGuiWindow *window, ImGuiAxis axis)
     * }
     */
    public static MethodHandle igGetWindowScrollbarID$handle() {
        return igGetWindowScrollbarID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowScrollbarID(ImGuiWindow *window, ImGuiAxis axis)
     * }
     */
    public static MemorySegment igGetWindowScrollbarID$address() {
        return igGetWindowScrollbarID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowScrollbarID(ImGuiWindow *window, ImGuiAxis axis)
     * }
     */
    public static int igGetWindowScrollbarID(MemorySegment window, int axis) {
        var mh$ = igGetWindowScrollbarID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowScrollbarID", window, axis);
            }
            return (int)mh$.invokeExact(window, axis);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowResizeCornerID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowResizeCornerID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowResizeCornerID(ImGuiWindow *window, int n)
     * }
     */
    public static FunctionDescriptor igGetWindowResizeCornerID$descriptor() {
        return igGetWindowResizeCornerID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowResizeCornerID(ImGuiWindow *window, int n)
     * }
     */
    public static MethodHandle igGetWindowResizeCornerID$handle() {
        return igGetWindowResizeCornerID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowResizeCornerID(ImGuiWindow *window, int n)
     * }
     */
    public static MemorySegment igGetWindowResizeCornerID$address() {
        return igGetWindowResizeCornerID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowResizeCornerID(ImGuiWindow *window, int n)
     * }
     */
    public static int igGetWindowResizeCornerID(MemorySegment window, int n) {
        var mh$ = igGetWindowResizeCornerID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowResizeCornerID", window, n);
            }
            return (int)mh$.invokeExact(window, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowResizeBorderID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowResizeBorderID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowResizeBorderID(ImGuiWindow *window, ImGuiDir dir)
     * }
     */
    public static FunctionDescriptor igGetWindowResizeBorderID$descriptor() {
        return igGetWindowResizeBorderID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowResizeBorderID(ImGuiWindow *window, ImGuiDir dir)
     * }
     */
    public static MethodHandle igGetWindowResizeBorderID$handle() {
        return igGetWindowResizeBorderID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowResizeBorderID(ImGuiWindow *window, ImGuiDir dir)
     * }
     */
    public static MemorySegment igGetWindowResizeBorderID$address() {
        return igGetWindowResizeBorderID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowResizeBorderID(ImGuiWindow *window, ImGuiDir dir)
     * }
     */
    public static int igGetWindowResizeBorderID(MemorySegment window, int dir) {
        var mh$ = igGetWindowResizeBorderID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowResizeBorderID", window, dir);
            }
            return (int)mh$.invokeExact(window, dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igButtonBehavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igButtonBehavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igButtonBehavior(const ImRect bb, ImGuiID id, bool *out_hovered, bool *out_held, ImGuiButtonFlags flags)
     * }
     */
    public static FunctionDescriptor igButtonBehavior$descriptor() {
        return igButtonBehavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igButtonBehavior(const ImRect bb, ImGuiID id, bool *out_hovered, bool *out_held, ImGuiButtonFlags flags)
     * }
     */
    public static MethodHandle igButtonBehavior$handle() {
        return igButtonBehavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igButtonBehavior(const ImRect bb, ImGuiID id, bool *out_hovered, bool *out_held, ImGuiButtonFlags flags)
     * }
     */
    public static MemorySegment igButtonBehavior$address() {
        return igButtonBehavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igButtonBehavior(const ImRect bb, ImGuiID id, bool *out_hovered, bool *out_held, ImGuiButtonFlags flags)
     * }
     */
    public static boolean igButtonBehavior(MemorySegment bb, int id, MemorySegment out_hovered, MemorySegment out_held, int flags) {
        var mh$ = igButtonBehavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igButtonBehavior", bb, id, out_hovered, out_held, flags);
            }
            return (boolean)mh$.invokeExact(bb, id, out_hovered, out_held, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragBehavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragBehavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragBehavior(ImGuiID id, ImGuiDataType data_type, void *p_v, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragBehavior$descriptor() {
        return igDragBehavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragBehavior(ImGuiID id, ImGuiDataType data_type, void *p_v, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragBehavior$handle() {
        return igDragBehavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragBehavior(ImGuiID id, ImGuiDataType data_type, void *p_v, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragBehavior$address() {
        return igDragBehavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragBehavior(ImGuiID id, ImGuiDataType data_type, void *p_v, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragBehavior(int id, int data_type, MemorySegment p_v, float v_speed, MemorySegment p_min, MemorySegment p_max, MemorySegment format, int flags) {
        var mh$ = igDragBehavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragBehavior", id, data_type, p_v, v_speed, p_min, p_max, format, flags);
            }
            return (boolean)mh$.invokeExact(id, data_type, p_v, v_speed, p_min, p_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderBehavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderBehavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderBehavior(const ImRect bb, ImGuiID id, ImGuiDataType data_type, void *p_v, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags, ImRect *out_grab_bb)
     * }
     */
    public static FunctionDescriptor igSliderBehavior$descriptor() {
        return igSliderBehavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderBehavior(const ImRect bb, ImGuiID id, ImGuiDataType data_type, void *p_v, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags, ImRect *out_grab_bb)
     * }
     */
    public static MethodHandle igSliderBehavior$handle() {
        return igSliderBehavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderBehavior(const ImRect bb, ImGuiID id, ImGuiDataType data_type, void *p_v, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags, ImRect *out_grab_bb)
     * }
     */
    public static MemorySegment igSliderBehavior$address() {
        return igSliderBehavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderBehavior(const ImRect bb, ImGuiID id, ImGuiDataType data_type, void *p_v, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags, ImRect *out_grab_bb)
     * }
     */
    public static boolean igSliderBehavior(MemorySegment bb, int id, int data_type, MemorySegment p_v, MemorySegment p_min, MemorySegment p_max, MemorySegment format, int flags, MemorySegment out_grab_bb) {
        var mh$ = igSliderBehavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderBehavior", bb, id, data_type, p_v, p_min, p_max, format, flags, out_grab_bb);
            }
            return (boolean)mh$.invokeExact(bb, id, data_type, p_v, p_min, p_max, format, flags, out_grab_bb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSplitterBehavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSplitterBehavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSplitterBehavior(const ImRect bb, ImGuiID id, ImGuiAxis axis, float *size1, float *size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay, ImU32 bg_col)
     * }
     */
    public static FunctionDescriptor igSplitterBehavior$descriptor() {
        return igSplitterBehavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSplitterBehavior(const ImRect bb, ImGuiID id, ImGuiAxis axis, float *size1, float *size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay, ImU32 bg_col)
     * }
     */
    public static MethodHandle igSplitterBehavior$handle() {
        return igSplitterBehavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSplitterBehavior(const ImRect bb, ImGuiID id, ImGuiAxis axis, float *size1, float *size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay, ImU32 bg_col)
     * }
     */
    public static MemorySegment igSplitterBehavior$address() {
        return igSplitterBehavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSplitterBehavior(const ImRect bb, ImGuiID id, ImGuiAxis axis, float *size1, float *size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay, ImU32 bg_col)
     * }
     */
    public static boolean igSplitterBehavior(MemorySegment bb, int id, int axis, MemorySegment size1, MemorySegment size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay, int bg_col) {
        var mh$ = igSplitterBehavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSplitterBehavior", bb, id, axis, size1, size2, min_size1, min_size2, hover_extend, hover_visibility_delay, bg_col);
            }
            return (boolean)mh$.invokeExact(bb, id, axis, size1, size2, min_size1, min_size2, hover_extend, hover_visibility_delay, bg_col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreeNodeBehavior {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeBehavior");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char *label, const char *label_end)
     * }
     */
    public static FunctionDescriptor igTreeNodeBehavior$descriptor() {
        return igTreeNodeBehavior.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char *label, const char *label_end)
     * }
     */
    public static MethodHandle igTreeNodeBehavior$handle() {
        return igTreeNodeBehavior.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char *label, const char *label_end)
     * }
     */
    public static MemorySegment igTreeNodeBehavior$address() {
        return igTreeNodeBehavior.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char *label, const char *label_end)
     * }
     */
    public static boolean igTreeNodeBehavior(int id, int flags, MemorySegment label, MemorySegment label_end) {
        var mh$ = igTreeNodeBehavior.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNodeBehavior", id, flags, label, label_end);
            }
            return (boolean)mh$.invokeExact(id, flags, label, label_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreePushOverrideID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreePushOverrideID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTreePushOverrideID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igTreePushOverrideID$descriptor() {
        return igTreePushOverrideID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTreePushOverrideID(ImGuiID id)
     * }
     */
    public static MethodHandle igTreePushOverrideID$handle() {
        return igTreePushOverrideID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTreePushOverrideID(ImGuiID id)
     * }
     */
    public static MemorySegment igTreePushOverrideID$address() {
        return igTreePushOverrideID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTreePushOverrideID(ImGuiID id)
     * }
     */
    public static void igTreePushOverrideID(int id) {
        var mh$ = igTreePushOverrideID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreePushOverrideID", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreeNodeGetOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeGetOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTreeNodeGetOpen(ImGuiID storage_id)
     * }
     */
    public static FunctionDescriptor igTreeNodeGetOpen$descriptor() {
        return igTreeNodeGetOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTreeNodeGetOpen(ImGuiID storage_id)
     * }
     */
    public static MethodHandle igTreeNodeGetOpen$handle() {
        return igTreeNodeGetOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTreeNodeGetOpen(ImGuiID storage_id)
     * }
     */
    public static MemorySegment igTreeNodeGetOpen$address() {
        return igTreeNodeGetOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTreeNodeGetOpen(ImGuiID storage_id)
     * }
     */
    public static boolean igTreeNodeGetOpen(int storage_id) {
        var mh$ = igTreeNodeGetOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNodeGetOpen", storage_id);
            }
            return (boolean)mh$.invokeExact(storage_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreeNodeSetOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeSetOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTreeNodeSetOpen(ImGuiID storage_id, bool open)
     * }
     */
    public static FunctionDescriptor igTreeNodeSetOpen$descriptor() {
        return igTreeNodeSetOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTreeNodeSetOpen(ImGuiID storage_id, bool open)
     * }
     */
    public static MethodHandle igTreeNodeSetOpen$handle() {
        return igTreeNodeSetOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTreeNodeSetOpen(ImGuiID storage_id, bool open)
     * }
     */
    public static MemorySegment igTreeNodeSetOpen$address() {
        return igTreeNodeSetOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTreeNodeSetOpen(ImGuiID storage_id, bool open)
     * }
     */
    public static void igTreeNodeSetOpen(int storage_id, boolean open) {
        var mh$ = igTreeNodeSetOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNodeSetOpen", storage_id, open);
            }
            mh$.invokeExact(storage_id, open);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreeNodeUpdateNextOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeUpdateNextOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTreeNodeUpdateNextOpen(ImGuiID storage_id, ImGuiTreeNodeFlags flags)
     * }
     */
    public static FunctionDescriptor igTreeNodeUpdateNextOpen$descriptor() {
        return igTreeNodeUpdateNextOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTreeNodeUpdateNextOpen(ImGuiID storage_id, ImGuiTreeNodeFlags flags)
     * }
     */
    public static MethodHandle igTreeNodeUpdateNextOpen$handle() {
        return igTreeNodeUpdateNextOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTreeNodeUpdateNextOpen(ImGuiID storage_id, ImGuiTreeNodeFlags flags)
     * }
     */
    public static MemorySegment igTreeNodeUpdateNextOpen$address() {
        return igTreeNodeUpdateNextOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTreeNodeUpdateNextOpen(ImGuiID storage_id, ImGuiTreeNodeFlags flags)
     * }
     */
    public static boolean igTreeNodeUpdateNextOpen(int storage_id, int flags) {
        var mh$ = igTreeNodeUpdateNextOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNodeUpdateNextOpen", storage_id, flags);
            }
            return (boolean)mh$.invokeExact(storage_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDataTypeGetInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDataTypeGetInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImGuiDataTypeInfo *igDataTypeGetInfo(ImGuiDataType data_type)
     * }
     */
    public static FunctionDescriptor igDataTypeGetInfo$descriptor() {
        return igDataTypeGetInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImGuiDataTypeInfo *igDataTypeGetInfo(ImGuiDataType data_type)
     * }
     */
    public static MethodHandle igDataTypeGetInfo$handle() {
        return igDataTypeGetInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImGuiDataTypeInfo *igDataTypeGetInfo(ImGuiDataType data_type)
     * }
     */
    public static MemorySegment igDataTypeGetInfo$address() {
        return igDataTypeGetInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImGuiDataTypeInfo *igDataTypeGetInfo(ImGuiDataType data_type)
     * }
     */
    public static MemorySegment igDataTypeGetInfo(int data_type) {
        var mh$ = igDataTypeGetInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDataTypeGetInfo", data_type);
            }
            return (MemorySegment)mh$.invokeExact(data_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDataTypeFormatString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDataTypeFormatString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igDataTypeFormatString(char *buf, int buf_size, ImGuiDataType data_type, const void *p_data, const char *format)
     * }
     */
    public static FunctionDescriptor igDataTypeFormatString$descriptor() {
        return igDataTypeFormatString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igDataTypeFormatString(char *buf, int buf_size, ImGuiDataType data_type, const void *p_data, const char *format)
     * }
     */
    public static MethodHandle igDataTypeFormatString$handle() {
        return igDataTypeFormatString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igDataTypeFormatString(char *buf, int buf_size, ImGuiDataType data_type, const void *p_data, const char *format)
     * }
     */
    public static MemorySegment igDataTypeFormatString$address() {
        return igDataTypeFormatString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igDataTypeFormatString(char *buf, int buf_size, ImGuiDataType data_type, const void *p_data, const char *format)
     * }
     */
    public static int igDataTypeFormatString(MemorySegment buf, int buf_size, int data_type, MemorySegment p_data, MemorySegment format) {
        var mh$ = igDataTypeFormatString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDataTypeFormatString", buf, buf_size, data_type, p_data, format);
            }
            return (int)mh$.invokeExact(buf, buf_size, data_type, p_data, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDataTypeApplyOp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDataTypeApplyOp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDataTypeApplyOp(ImGuiDataType data_type, int op, void *output, const void *arg_1, const void *arg_2)
     * }
     */
    public static FunctionDescriptor igDataTypeApplyOp$descriptor() {
        return igDataTypeApplyOp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDataTypeApplyOp(ImGuiDataType data_type, int op, void *output, const void *arg_1, const void *arg_2)
     * }
     */
    public static MethodHandle igDataTypeApplyOp$handle() {
        return igDataTypeApplyOp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDataTypeApplyOp(ImGuiDataType data_type, int op, void *output, const void *arg_1, const void *arg_2)
     * }
     */
    public static MemorySegment igDataTypeApplyOp$address() {
        return igDataTypeApplyOp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDataTypeApplyOp(ImGuiDataType data_type, int op, void *output, const void *arg_1, const void *arg_2)
     * }
     */
    public static void igDataTypeApplyOp(int data_type, int op, MemorySegment output, MemorySegment arg_1, MemorySegment arg_2) {
        var mh$ = igDataTypeApplyOp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDataTypeApplyOp", data_type, op, output, arg_1, arg_2);
            }
            mh$.invokeExact(data_type, op, output, arg_1, arg_2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDataTypeApplyFromText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDataTypeApplyFromText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDataTypeApplyFromText(const char *buf, ImGuiDataType data_type, void *p_data, const char *format, void *p_data_when_empty)
     * }
     */
    public static FunctionDescriptor igDataTypeApplyFromText$descriptor() {
        return igDataTypeApplyFromText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDataTypeApplyFromText(const char *buf, ImGuiDataType data_type, void *p_data, const char *format, void *p_data_when_empty)
     * }
     */
    public static MethodHandle igDataTypeApplyFromText$handle() {
        return igDataTypeApplyFromText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDataTypeApplyFromText(const char *buf, ImGuiDataType data_type, void *p_data, const char *format, void *p_data_when_empty)
     * }
     */
    public static MemorySegment igDataTypeApplyFromText$address() {
        return igDataTypeApplyFromText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDataTypeApplyFromText(const char *buf, ImGuiDataType data_type, void *p_data, const char *format, void *p_data_when_empty)
     * }
     */
    public static boolean igDataTypeApplyFromText(MemorySegment buf, int data_type, MemorySegment p_data, MemorySegment format, MemorySegment p_data_when_empty) {
        var mh$ = igDataTypeApplyFromText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDataTypeApplyFromText", buf, data_type, p_data, format, p_data_when_empty);
            }
            return (boolean)mh$.invokeExact(buf, data_type, p_data, format, p_data_when_empty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDataTypeCompare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDataTypeCompare");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igDataTypeCompare(ImGuiDataType data_type, const void *arg_1, const void *arg_2)
     * }
     */
    public static FunctionDescriptor igDataTypeCompare$descriptor() {
        return igDataTypeCompare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igDataTypeCompare(ImGuiDataType data_type, const void *arg_1, const void *arg_2)
     * }
     */
    public static MethodHandle igDataTypeCompare$handle() {
        return igDataTypeCompare.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igDataTypeCompare(ImGuiDataType data_type, const void *arg_1, const void *arg_2)
     * }
     */
    public static MemorySegment igDataTypeCompare$address() {
        return igDataTypeCompare.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igDataTypeCompare(ImGuiDataType data_type, const void *arg_1, const void *arg_2)
     * }
     */
    public static int igDataTypeCompare(int data_type, MemorySegment arg_1, MemorySegment arg_2) {
        var mh$ = igDataTypeCompare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDataTypeCompare", data_type, arg_1, arg_2);
            }
            return (int)mh$.invokeExact(data_type, arg_1, arg_2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDataTypeClamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDataTypeClamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDataTypeClamp(ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max)
     * }
     */
    public static FunctionDescriptor igDataTypeClamp$descriptor() {
        return igDataTypeClamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDataTypeClamp(ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max)
     * }
     */
    public static MethodHandle igDataTypeClamp$handle() {
        return igDataTypeClamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDataTypeClamp(ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max)
     * }
     */
    public static MemorySegment igDataTypeClamp$address() {
        return igDataTypeClamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDataTypeClamp(ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max)
     * }
     */
    public static boolean igDataTypeClamp(int data_type, MemorySegment p_data, MemorySegment p_min, MemorySegment p_max) {
        var mh$ = igDataTypeClamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDataTypeClamp", data_type, p_data, p_min, p_max);
            }
            return (boolean)mh$.invokeExact(data_type, p_data, p_min, p_max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputTextEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputTextEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputTextEx(const char *label, const char *hint, char *buf, int buf_size, const ImVec2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static FunctionDescriptor igInputTextEx$descriptor() {
        return igInputTextEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputTextEx(const char *label, const char *hint, char *buf, int buf_size, const ImVec2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static MethodHandle igInputTextEx$handle() {
        return igInputTextEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputTextEx(const char *label, const char *hint, char *buf, int buf_size, const ImVec2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static MemorySegment igInputTextEx$address() {
        return igInputTextEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputTextEx(const char *label, const char *hint, char *buf, int buf_size, const ImVec2 size_arg, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static boolean igInputTextEx(MemorySegment label, MemorySegment hint, MemorySegment buf, int buf_size, MemorySegment size_arg, int flags, MemorySegment callback, MemorySegment user_data) {
        var mh$ = igInputTextEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputTextEx", label, hint, buf, buf_size, size_arg, flags, callback, user_data);
            }
            return (boolean)mh$.invokeExact(label, hint, buf, buf_size, size_arg, flags, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputTextDeactivateHook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputTextDeactivateHook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igInputTextDeactivateHook(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igInputTextDeactivateHook$descriptor() {
        return igInputTextDeactivateHook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igInputTextDeactivateHook(ImGuiID id)
     * }
     */
    public static MethodHandle igInputTextDeactivateHook$handle() {
        return igInputTextDeactivateHook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igInputTextDeactivateHook(ImGuiID id)
     * }
     */
    public static MemorySegment igInputTextDeactivateHook$address() {
        return igInputTextDeactivateHook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igInputTextDeactivateHook(ImGuiID id)
     * }
     */
    public static void igInputTextDeactivateHook(int id) {
        var mh$ = igInputTextDeactivateHook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputTextDeactivateHook", id);
            }
            mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTempInputText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTempInputText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTempInputText(const ImRect bb, ImGuiID id, const char *label, char *buf, int buf_size, ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igTempInputText$descriptor() {
        return igTempInputText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTempInputText(const ImRect bb, ImGuiID id, const char *label, char *buf, int buf_size, ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igTempInputText$handle() {
        return igTempInputText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTempInputText(const ImRect bb, ImGuiID id, const char *label, char *buf, int buf_size, ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igTempInputText$address() {
        return igTempInputText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTempInputText(const ImRect bb, ImGuiID id, const char *label, char *buf, int buf_size, ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igTempInputText(MemorySegment bb, int id, MemorySegment label, MemorySegment buf, int buf_size, int flags) {
        var mh$ = igTempInputText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTempInputText", bb, id, label, buf, buf_size, flags);
            }
            return (boolean)mh$.invokeExact(bb, id, label, buf, buf_size, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTempInputScalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImRect.layout(),
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTempInputScalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTempInputScalar(const ImRect bb, ImGuiID id, const char *label, ImGuiDataType data_type, void *p_data, const char *format, const void *p_clamp_min, const void *p_clamp_max)
     * }
     */
    public static FunctionDescriptor igTempInputScalar$descriptor() {
        return igTempInputScalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTempInputScalar(const ImRect bb, ImGuiID id, const char *label, ImGuiDataType data_type, void *p_data, const char *format, const void *p_clamp_min, const void *p_clamp_max)
     * }
     */
    public static MethodHandle igTempInputScalar$handle() {
        return igTempInputScalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTempInputScalar(const ImRect bb, ImGuiID id, const char *label, ImGuiDataType data_type, void *p_data, const char *format, const void *p_clamp_min, const void *p_clamp_max)
     * }
     */
    public static MemorySegment igTempInputScalar$address() {
        return igTempInputScalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTempInputScalar(const ImRect bb, ImGuiID id, const char *label, ImGuiDataType data_type, void *p_data, const char *format, const void *p_clamp_min, const void *p_clamp_max)
     * }
     */
    public static boolean igTempInputScalar(MemorySegment bb, int id, MemorySegment label, int data_type, MemorySegment p_data, MemorySegment format, MemorySegment p_clamp_min, MemorySegment p_clamp_max) {
        var mh$ = igTempInputScalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTempInputScalar", bb, id, label, data_type, p_data, format, p_clamp_min, p_clamp_max);
            }
            return (boolean)mh$.invokeExact(bb, id, label, data_type, p_data, format, p_clamp_min, p_clamp_max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTempInputIsActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTempInputIsActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTempInputIsActive(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igTempInputIsActive$descriptor() {
        return igTempInputIsActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTempInputIsActive(ImGuiID id)
     * }
     */
    public static MethodHandle igTempInputIsActive$handle() {
        return igTempInputIsActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTempInputIsActive(ImGuiID id)
     * }
     */
    public static MemorySegment igTempInputIsActive$address() {
        return igTempInputIsActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTempInputIsActive(ImGuiID id)
     * }
     */
    public static boolean igTempInputIsActive(int id) {
        var mh$ = igTempInputIsActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTempInputIsActive", id);
            }
            return (boolean)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetInputTextState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetInputTextState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiInputTextState *igGetInputTextState(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igGetInputTextState$descriptor() {
        return igGetInputTextState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiInputTextState *igGetInputTextState(ImGuiID id)
     * }
     */
    public static MethodHandle igGetInputTextState$handle() {
        return igGetInputTextState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiInputTextState *igGetInputTextState(ImGuiID id)
     * }
     */
    public static MemorySegment igGetInputTextState$address() {
        return igGetInputTextState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiInputTextState *igGetInputTextState(ImGuiID id)
     * }
     */
    public static MemorySegment igGetInputTextState(int id) {
        var mh$ = igGetInputTextState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetInputTextState", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextItemRefVal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextItemRefVal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextItemRefVal(ImGuiDataType data_type, void *p_data)
     * }
     */
    public static FunctionDescriptor igSetNextItemRefVal$descriptor() {
        return igSetNextItemRefVal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextItemRefVal(ImGuiDataType data_type, void *p_data)
     * }
     */
    public static MethodHandle igSetNextItemRefVal$handle() {
        return igSetNextItemRefVal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextItemRefVal(ImGuiDataType data_type, void *p_data)
     * }
     */
    public static MemorySegment igSetNextItemRefVal$address() {
        return igSetNextItemRefVal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextItemRefVal(ImGuiDataType data_type, void *p_data)
     * }
     */
    public static void igSetNextItemRefVal(int data_type, MemorySegment p_data) {
        var mh$ = igSetNextItemRefVal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextItemRefVal", data_type, p_data);
            }
            mh$.invokeExact(data_type, p_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorTooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorTooltip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igColorTooltip(const char *text, const float *col, ImGuiColorEditFlags flags)
     * }
     */
    public static FunctionDescriptor igColorTooltip$descriptor() {
        return igColorTooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igColorTooltip(const char *text, const float *col, ImGuiColorEditFlags flags)
     * }
     */
    public static MethodHandle igColorTooltip$handle() {
        return igColorTooltip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igColorTooltip(const char *text, const float *col, ImGuiColorEditFlags flags)
     * }
     */
    public static MemorySegment igColorTooltip$address() {
        return igColorTooltip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igColorTooltip(const char *text, const float *col, ImGuiColorEditFlags flags)
     * }
     */
    public static void igColorTooltip(MemorySegment text, MemorySegment col, int flags) {
        var mh$ = igColorTooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorTooltip", text, col, flags);
            }
            mh$.invokeExact(text, col, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorEditOptionsPopup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorEditOptionsPopup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igColorEditOptionsPopup(const float *col, ImGuiColorEditFlags flags)
     * }
     */
    public static FunctionDescriptor igColorEditOptionsPopup$descriptor() {
        return igColorEditOptionsPopup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igColorEditOptionsPopup(const float *col, ImGuiColorEditFlags flags)
     * }
     */
    public static MethodHandle igColorEditOptionsPopup$handle() {
        return igColorEditOptionsPopup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igColorEditOptionsPopup(const float *col, ImGuiColorEditFlags flags)
     * }
     */
    public static MemorySegment igColorEditOptionsPopup$address() {
        return igColorEditOptionsPopup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igColorEditOptionsPopup(const float *col, ImGuiColorEditFlags flags)
     * }
     */
    public static void igColorEditOptionsPopup(MemorySegment col, int flags) {
        var mh$ = igColorEditOptionsPopup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorEditOptionsPopup", col, flags);
            }
            mh$.invokeExact(col, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorPickerOptionsPopup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorPickerOptionsPopup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igColorPickerOptionsPopup(const float *ref_col, ImGuiColorEditFlags flags)
     * }
     */
    public static FunctionDescriptor igColorPickerOptionsPopup$descriptor() {
        return igColorPickerOptionsPopup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igColorPickerOptionsPopup(const float *ref_col, ImGuiColorEditFlags flags)
     * }
     */
    public static MethodHandle igColorPickerOptionsPopup$handle() {
        return igColorPickerOptionsPopup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igColorPickerOptionsPopup(const float *ref_col, ImGuiColorEditFlags flags)
     * }
     */
    public static MemorySegment igColorPickerOptionsPopup$address() {
        return igColorPickerOptionsPopup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igColorPickerOptionsPopup(const float *ref_col, ImGuiColorEditFlags flags)
     * }
     */
    public static void igColorPickerOptionsPopup(MemorySegment ref_col, int flags) {
        var mh$ = igColorPickerOptionsPopup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorPickerOptionsPopup", ref_col, flags);
            }
            mh$.invokeExact(ref_col, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPlotEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPlotEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igPlotEx(ImGuiPlotType plot_type, const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)
     * }
     */
    public static FunctionDescriptor igPlotEx$descriptor() {
        return igPlotEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igPlotEx(ImGuiPlotType plot_type, const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)
     * }
     */
    public static MethodHandle igPlotEx$handle() {
        return igPlotEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igPlotEx(ImGuiPlotType plot_type, const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)
     * }
     */
    public static MemorySegment igPlotEx$address() {
        return igPlotEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igPlotEx(ImGuiPlotType plot_type, const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, const ImVec2 size_arg)
     * }
     */
    public static int igPlotEx(int plot_type, MemorySegment label, MemorySegment values_getter, MemorySegment data, int values_count, int values_offset, MemorySegment overlay_text, float scale_min, float scale_max, MemorySegment size_arg) {
        var mh$ = igPlotEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPlotEx", plot_type, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, size_arg);
            }
            return (int)mh$.invokeExact(plot_type, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, size_arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShadeVertsLinearColorGradientKeepAlpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShadeVertsLinearColorGradientKeepAlpha");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, ImVec2 gradient_p0, ImVec2 gradient_p1, ImU32 col0, ImU32 col1)
     * }
     */
    public static FunctionDescriptor igShadeVertsLinearColorGradientKeepAlpha$descriptor() {
        return igShadeVertsLinearColorGradientKeepAlpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, ImVec2 gradient_p0, ImVec2 gradient_p1, ImU32 col0, ImU32 col1)
     * }
     */
    public static MethodHandle igShadeVertsLinearColorGradientKeepAlpha$handle() {
        return igShadeVertsLinearColorGradientKeepAlpha.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, ImVec2 gradient_p0, ImVec2 gradient_p1, ImU32 col0, ImU32 col1)
     * }
     */
    public static MemorySegment igShadeVertsLinearColorGradientKeepAlpha$address() {
        return igShadeVertsLinearColorGradientKeepAlpha.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShadeVertsLinearColorGradientKeepAlpha(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, ImVec2 gradient_p0, ImVec2 gradient_p1, ImU32 col0, ImU32 col1)
     * }
     */
    public static void igShadeVertsLinearColorGradientKeepAlpha(MemorySegment draw_list, int vert_start_idx, int vert_end_idx, MemorySegment gradient_p0, MemorySegment gradient_p1, int col0, int col1) {
        var mh$ = igShadeVertsLinearColorGradientKeepAlpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShadeVertsLinearColorGradientKeepAlpha", draw_list, vert_start_idx, vert_end_idx, gradient_p0, gradient_p1, col0, col1);
            }
            mh$.invokeExact(draw_list, vert_start_idx, vert_end_idx, gradient_p0, gradient_p1, col0, col1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShadeVertsLinearUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShadeVertsLinearUV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShadeVertsLinearUV(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, const ImVec2 a, const ImVec2 b, const ImVec2 uv_a, const ImVec2 uv_b, bool clamp)
     * }
     */
    public static FunctionDescriptor igShadeVertsLinearUV$descriptor() {
        return igShadeVertsLinearUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShadeVertsLinearUV(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, const ImVec2 a, const ImVec2 b, const ImVec2 uv_a, const ImVec2 uv_b, bool clamp)
     * }
     */
    public static MethodHandle igShadeVertsLinearUV$handle() {
        return igShadeVertsLinearUV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShadeVertsLinearUV(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, const ImVec2 a, const ImVec2 b, const ImVec2 uv_a, const ImVec2 uv_b, bool clamp)
     * }
     */
    public static MemorySegment igShadeVertsLinearUV$address() {
        return igShadeVertsLinearUV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShadeVertsLinearUV(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, const ImVec2 a, const ImVec2 b, const ImVec2 uv_a, const ImVec2 uv_b, bool clamp)
     * }
     */
    public static void igShadeVertsLinearUV(MemorySegment draw_list, int vert_start_idx, int vert_end_idx, MemorySegment a, MemorySegment b, MemorySegment uv_a, MemorySegment uv_b, boolean clamp) {
        var mh$ = igShadeVertsLinearUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShadeVertsLinearUV", draw_list, vert_start_idx, vert_end_idx, a, b, uv_a, uv_b, clamp);
            }
            mh$.invokeExact(draw_list, vert_start_idx, vert_end_idx, a, b, uv_a, uv_b, clamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShadeVertsTransformPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShadeVertsTransformPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShadeVertsTransformPos(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, const ImVec2 pivot_in, float cos_a, float sin_a, const ImVec2 pivot_out)
     * }
     */
    public static FunctionDescriptor igShadeVertsTransformPos$descriptor() {
        return igShadeVertsTransformPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShadeVertsTransformPos(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, const ImVec2 pivot_in, float cos_a, float sin_a, const ImVec2 pivot_out)
     * }
     */
    public static MethodHandle igShadeVertsTransformPos$handle() {
        return igShadeVertsTransformPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShadeVertsTransformPos(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, const ImVec2 pivot_in, float cos_a, float sin_a, const ImVec2 pivot_out)
     * }
     */
    public static MemorySegment igShadeVertsTransformPos$address() {
        return igShadeVertsTransformPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShadeVertsTransformPos(ImDrawList *draw_list, int vert_start_idx, int vert_end_idx, const ImVec2 pivot_in, float cos_a, float sin_a, const ImVec2 pivot_out)
     * }
     */
    public static void igShadeVertsTransformPos(MemorySegment draw_list, int vert_start_idx, int vert_end_idx, MemorySegment pivot_in, float cos_a, float sin_a, MemorySegment pivot_out) {
        var mh$ = igShadeVertsTransformPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShadeVertsTransformPos", draw_list, vert_start_idx, vert_end_idx, pivot_in, cos_a, sin_a, pivot_out);
            }
            mh$.invokeExact(draw_list, vert_start_idx, vert_end_idx, pivot_in, cos_a, sin_a, pivot_out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGcCompactTransientMiscBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGcCompactTransientMiscBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGcCompactTransientMiscBuffers()
     * }
     */
    public static FunctionDescriptor igGcCompactTransientMiscBuffers$descriptor() {
        return igGcCompactTransientMiscBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGcCompactTransientMiscBuffers()
     * }
     */
    public static MethodHandle igGcCompactTransientMiscBuffers$handle() {
        return igGcCompactTransientMiscBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGcCompactTransientMiscBuffers()
     * }
     */
    public static MemorySegment igGcCompactTransientMiscBuffers$address() {
        return igGcCompactTransientMiscBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGcCompactTransientMiscBuffers()
     * }
     */
    public static void igGcCompactTransientMiscBuffers() {
        var mh$ = igGcCompactTransientMiscBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGcCompactTransientMiscBuffers");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGcCompactTransientWindowBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGcCompactTransientWindowBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGcCompactTransientWindowBuffers(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igGcCompactTransientWindowBuffers$descriptor() {
        return igGcCompactTransientWindowBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGcCompactTransientWindowBuffers(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igGcCompactTransientWindowBuffers$handle() {
        return igGcCompactTransientWindowBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGcCompactTransientWindowBuffers(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igGcCompactTransientWindowBuffers$address() {
        return igGcCompactTransientWindowBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGcCompactTransientWindowBuffers(ImGuiWindow *window)
     * }
     */
    public static void igGcCompactTransientWindowBuffers(MemorySegment window) {
        var mh$ = igGcCompactTransientWindowBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGcCompactTransientWindowBuffers", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGcAwakeTransientWindowBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGcAwakeTransientWindowBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGcAwakeTransientWindowBuffers(ImGuiWindow *window)
     * }
     */
    public static FunctionDescriptor igGcAwakeTransientWindowBuffers$descriptor() {
        return igGcAwakeTransientWindowBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGcAwakeTransientWindowBuffers(ImGuiWindow *window)
     * }
     */
    public static MethodHandle igGcAwakeTransientWindowBuffers$handle() {
        return igGcAwakeTransientWindowBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGcAwakeTransientWindowBuffers(ImGuiWindow *window)
     * }
     */
    public static MemorySegment igGcAwakeTransientWindowBuffers$address() {
        return igGcAwakeTransientWindowBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGcAwakeTransientWindowBuffers(ImGuiWindow *window)
     * }
     */
    public static void igGcAwakeTransientWindowBuffers(MemorySegment window) {
        var mh$ = igGcAwakeTransientWindowBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGcAwakeTransientWindowBuffers", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugAllocHook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugAllocHook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugAllocHook(ImGuiDebugAllocInfo *info, int frame_count, void *ptr, size_t size)
     * }
     */
    public static FunctionDescriptor igDebugAllocHook$descriptor() {
        return igDebugAllocHook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugAllocHook(ImGuiDebugAllocInfo *info, int frame_count, void *ptr, size_t size)
     * }
     */
    public static MethodHandle igDebugAllocHook$handle() {
        return igDebugAllocHook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugAllocHook(ImGuiDebugAllocInfo *info, int frame_count, void *ptr, size_t size)
     * }
     */
    public static MemorySegment igDebugAllocHook$address() {
        return igDebugAllocHook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugAllocHook(ImGuiDebugAllocInfo *info, int frame_count, void *ptr, size_t size)
     * }
     */
    public static void igDebugAllocHook(MemorySegment info, int frame_count, MemorySegment ptr, long size) {
        var mh$ = igDebugAllocHook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugAllocHook", info, frame_count, ptr, size);
            }
            mh$.invokeExact(info, frame_count, ptr, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igErrorCheckEndFrameRecover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igErrorCheckEndFrameRecover");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void *user_data)
     * }
     */
    public static FunctionDescriptor igErrorCheckEndFrameRecover$descriptor() {
        return igErrorCheckEndFrameRecover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void *user_data)
     * }
     */
    public static MethodHandle igErrorCheckEndFrameRecover$handle() {
        return igErrorCheckEndFrameRecover.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void *user_data)
     * }
     */
    public static MemorySegment igErrorCheckEndFrameRecover$address() {
        return igErrorCheckEndFrameRecover.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void *user_data)
     * }
     */
    public static void igErrorCheckEndFrameRecover(MemorySegment log_callback, MemorySegment user_data) {
        var mh$ = igErrorCheckEndFrameRecover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igErrorCheckEndFrameRecover", log_callback, user_data);
            }
            mh$.invokeExact(log_callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igErrorCheckEndWindowRecover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igErrorCheckEndWindowRecover");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void *user_data)
     * }
     */
    public static FunctionDescriptor igErrorCheckEndWindowRecover$descriptor() {
        return igErrorCheckEndWindowRecover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void *user_data)
     * }
     */
    public static MethodHandle igErrorCheckEndWindowRecover$handle() {
        return igErrorCheckEndWindowRecover.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void *user_data)
     * }
     */
    public static MemorySegment igErrorCheckEndWindowRecover$address() {
        return igErrorCheckEndWindowRecover.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void *user_data)
     * }
     */
    public static void igErrorCheckEndWindowRecover(MemorySegment log_callback, MemorySegment user_data) {
        var mh$ = igErrorCheckEndWindowRecover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igErrorCheckEndWindowRecover", log_callback, user_data);
            }
            mh$.invokeExact(log_callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igErrorCheckUsingSetCursorPosToExtendParentBoundaries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igErrorCheckUsingSetCursorPosToExtendParentBoundaries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igErrorCheckUsingSetCursorPosToExtendParentBoundaries()
     * }
     */
    public static FunctionDescriptor igErrorCheckUsingSetCursorPosToExtendParentBoundaries$descriptor() {
        return igErrorCheckUsingSetCursorPosToExtendParentBoundaries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igErrorCheckUsingSetCursorPosToExtendParentBoundaries()
     * }
     */
    public static MethodHandle igErrorCheckUsingSetCursorPosToExtendParentBoundaries$handle() {
        return igErrorCheckUsingSetCursorPosToExtendParentBoundaries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igErrorCheckUsingSetCursorPosToExtendParentBoundaries()
     * }
     */
    public static MemorySegment igErrorCheckUsingSetCursorPosToExtendParentBoundaries$address() {
        return igErrorCheckUsingSetCursorPosToExtendParentBoundaries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igErrorCheckUsingSetCursorPosToExtendParentBoundaries()
     * }
     */
    public static void igErrorCheckUsingSetCursorPosToExtendParentBoundaries() {
        var mh$ = igErrorCheckUsingSetCursorPosToExtendParentBoundaries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igErrorCheckUsingSetCursorPosToExtendParentBoundaries");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugDrawCursorPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugDrawCursorPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugDrawCursorPos(ImU32 col)
     * }
     */
    public static FunctionDescriptor igDebugDrawCursorPos$descriptor() {
        return igDebugDrawCursorPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugDrawCursorPos(ImU32 col)
     * }
     */
    public static MethodHandle igDebugDrawCursorPos$handle() {
        return igDebugDrawCursorPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugDrawCursorPos(ImU32 col)
     * }
     */
    public static MemorySegment igDebugDrawCursorPos$address() {
        return igDebugDrawCursorPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugDrawCursorPos(ImU32 col)
     * }
     */
    public static void igDebugDrawCursorPos(int col) {
        var mh$ = igDebugDrawCursorPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugDrawCursorPos", col);
            }
            mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugDrawLineExtents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugDrawLineExtents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugDrawLineExtents(ImU32 col)
     * }
     */
    public static FunctionDescriptor igDebugDrawLineExtents$descriptor() {
        return igDebugDrawLineExtents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugDrawLineExtents(ImU32 col)
     * }
     */
    public static MethodHandle igDebugDrawLineExtents$handle() {
        return igDebugDrawLineExtents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugDrawLineExtents(ImU32 col)
     * }
     */
    public static MemorySegment igDebugDrawLineExtents$address() {
        return igDebugDrawLineExtents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugDrawLineExtents(ImU32 col)
     * }
     */
    public static void igDebugDrawLineExtents(int col) {
        var mh$ = igDebugDrawLineExtents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugDrawLineExtents", col);
            }
            mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugDrawItemRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugDrawItemRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugDrawItemRect(ImU32 col)
     * }
     */
    public static FunctionDescriptor igDebugDrawItemRect$descriptor() {
        return igDebugDrawItemRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugDrawItemRect(ImU32 col)
     * }
     */
    public static MethodHandle igDebugDrawItemRect$handle() {
        return igDebugDrawItemRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugDrawItemRect(ImU32 col)
     * }
     */
    public static MemorySegment igDebugDrawItemRect$address() {
        return igDebugDrawItemRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugDrawItemRect(ImU32 col)
     * }
     */
    public static void igDebugDrawItemRect(int col) {
        var mh$ = igDebugDrawItemRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugDrawItemRect", col);
            }
            mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugTextUnformattedWithLocateItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugTextUnformattedWithLocateItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugTextUnformattedWithLocateItem(const char *line_begin, const char *line_end)
     * }
     */
    public static FunctionDescriptor igDebugTextUnformattedWithLocateItem$descriptor() {
        return igDebugTextUnformattedWithLocateItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugTextUnformattedWithLocateItem(const char *line_begin, const char *line_end)
     * }
     */
    public static MethodHandle igDebugTextUnformattedWithLocateItem$handle() {
        return igDebugTextUnformattedWithLocateItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugTextUnformattedWithLocateItem(const char *line_begin, const char *line_end)
     * }
     */
    public static MemorySegment igDebugTextUnformattedWithLocateItem$address() {
        return igDebugTextUnformattedWithLocateItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugTextUnformattedWithLocateItem(const char *line_begin, const char *line_end)
     * }
     */
    public static void igDebugTextUnformattedWithLocateItem(MemorySegment line_begin, MemorySegment line_end) {
        var mh$ = igDebugTextUnformattedWithLocateItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugTextUnformattedWithLocateItem", line_begin, line_end);
            }
            mh$.invokeExact(line_begin, line_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugLocateItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugLocateItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugLocateItem(ImGuiID target_id)
     * }
     */
    public static FunctionDescriptor igDebugLocateItem$descriptor() {
        return igDebugLocateItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugLocateItem(ImGuiID target_id)
     * }
     */
    public static MethodHandle igDebugLocateItem$handle() {
        return igDebugLocateItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugLocateItem(ImGuiID target_id)
     * }
     */
    public static MemorySegment igDebugLocateItem$address() {
        return igDebugLocateItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugLocateItem(ImGuiID target_id)
     * }
     */
    public static void igDebugLocateItem(int target_id) {
        var mh$ = igDebugLocateItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugLocateItem", target_id);
            }
            mh$.invokeExact(target_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugLocateItemOnHover {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugLocateItemOnHover");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugLocateItemOnHover(ImGuiID target_id)
     * }
     */
    public static FunctionDescriptor igDebugLocateItemOnHover$descriptor() {
        return igDebugLocateItemOnHover.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugLocateItemOnHover(ImGuiID target_id)
     * }
     */
    public static MethodHandle igDebugLocateItemOnHover$handle() {
        return igDebugLocateItemOnHover.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugLocateItemOnHover(ImGuiID target_id)
     * }
     */
    public static MemorySegment igDebugLocateItemOnHover$address() {
        return igDebugLocateItemOnHover.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugLocateItemOnHover(ImGuiID target_id)
     * }
     */
    public static void igDebugLocateItemOnHover(int target_id) {
        var mh$ = igDebugLocateItemOnHover.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugLocateItemOnHover", target_id);
            }
            mh$.invokeExact(target_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugLocateItemResolveWithLastItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugLocateItemResolveWithLastItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugLocateItemResolveWithLastItem()
     * }
     */
    public static FunctionDescriptor igDebugLocateItemResolveWithLastItem$descriptor() {
        return igDebugLocateItemResolveWithLastItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugLocateItemResolveWithLastItem()
     * }
     */
    public static MethodHandle igDebugLocateItemResolveWithLastItem$handle() {
        return igDebugLocateItemResolveWithLastItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugLocateItemResolveWithLastItem()
     * }
     */
    public static MemorySegment igDebugLocateItemResolveWithLastItem$address() {
        return igDebugLocateItemResolveWithLastItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugLocateItemResolveWithLastItem()
     * }
     */
    public static void igDebugLocateItemResolveWithLastItem() {
        var mh$ = igDebugLocateItemResolveWithLastItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugLocateItemResolveWithLastItem");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugBreakClearData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugBreakClearData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugBreakClearData()
     * }
     */
    public static FunctionDescriptor igDebugBreakClearData$descriptor() {
        return igDebugBreakClearData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugBreakClearData()
     * }
     */
    public static MethodHandle igDebugBreakClearData$handle() {
        return igDebugBreakClearData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugBreakClearData()
     * }
     */
    public static MemorySegment igDebugBreakClearData$address() {
        return igDebugBreakClearData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugBreakClearData()
     * }
     */
    public static void igDebugBreakClearData() {
        var mh$ = igDebugBreakClearData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugBreakClearData");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugBreakButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugBreakButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDebugBreakButton(const char *label, const char *description_of_location)
     * }
     */
    public static FunctionDescriptor igDebugBreakButton$descriptor() {
        return igDebugBreakButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDebugBreakButton(const char *label, const char *description_of_location)
     * }
     */
    public static MethodHandle igDebugBreakButton$handle() {
        return igDebugBreakButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDebugBreakButton(const char *label, const char *description_of_location)
     * }
     */
    public static MemorySegment igDebugBreakButton$address() {
        return igDebugBreakButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDebugBreakButton(const char *label, const char *description_of_location)
     * }
     */
    public static boolean igDebugBreakButton(MemorySegment label, MemorySegment description_of_location) {
        var mh$ = igDebugBreakButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugBreakButton", label, description_of_location);
            }
            return (boolean)mh$.invokeExact(label, description_of_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugBreakButtonTooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugBreakButtonTooltip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugBreakButtonTooltip(bool keyboard_only, const char *description_of_location)
     * }
     */
    public static FunctionDescriptor igDebugBreakButtonTooltip$descriptor() {
        return igDebugBreakButtonTooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugBreakButtonTooltip(bool keyboard_only, const char *description_of_location)
     * }
     */
    public static MethodHandle igDebugBreakButtonTooltip$handle() {
        return igDebugBreakButtonTooltip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugBreakButtonTooltip(bool keyboard_only, const char *description_of_location)
     * }
     */
    public static MemorySegment igDebugBreakButtonTooltip$address() {
        return igDebugBreakButtonTooltip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugBreakButtonTooltip(bool keyboard_only, const char *description_of_location)
     * }
     */
    public static void igDebugBreakButtonTooltip(boolean keyboard_only, MemorySegment description_of_location) {
        var mh$ = igDebugBreakButtonTooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugBreakButtonTooltip", keyboard_only, description_of_location);
            }
            mh$.invokeExact(keyboard_only, description_of_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowFontAtlas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowFontAtlas");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShowFontAtlas(ImFontAtlas *atlas)
     * }
     */
    public static FunctionDescriptor igShowFontAtlas$descriptor() {
        return igShowFontAtlas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShowFontAtlas(ImFontAtlas *atlas)
     * }
     */
    public static MethodHandle igShowFontAtlas$handle() {
        return igShowFontAtlas.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShowFontAtlas(ImFontAtlas *atlas)
     * }
     */
    public static MemorySegment igShowFontAtlas$address() {
        return igShowFontAtlas.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShowFontAtlas(ImFontAtlas *atlas)
     * }
     */
    public static void igShowFontAtlas(MemorySegment atlas) {
        var mh$ = igShowFontAtlas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowFontAtlas", atlas);
            }
            mh$.invokeExact(atlas);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugHookIdInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugHookIdInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void *data_id, const void *data_id_end)
     * }
     */
    public static FunctionDescriptor igDebugHookIdInfo$descriptor() {
        return igDebugHookIdInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void *data_id, const void *data_id_end)
     * }
     */
    public static MethodHandle igDebugHookIdInfo$handle() {
        return igDebugHookIdInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void *data_id, const void *data_id_end)
     * }
     */
    public static MemorySegment igDebugHookIdInfo$address() {
        return igDebugHookIdInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void *data_id, const void *data_id_end)
     * }
     */
    public static void igDebugHookIdInfo(int id, int data_type, MemorySegment data_id, MemorySegment data_id_end) {
        var mh$ = igDebugHookIdInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugHookIdInfo", id, data_type, data_id, data_id_end);
            }
            mh$.invokeExact(id, data_type, data_id, data_id_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeColumns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeColumns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeColumns(ImGuiOldColumns *columns)
     * }
     */
    public static FunctionDescriptor igDebugNodeColumns$descriptor() {
        return igDebugNodeColumns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeColumns(ImGuiOldColumns *columns)
     * }
     */
    public static MethodHandle igDebugNodeColumns$handle() {
        return igDebugNodeColumns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeColumns(ImGuiOldColumns *columns)
     * }
     */
    public static MemorySegment igDebugNodeColumns$address() {
        return igDebugNodeColumns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeColumns(ImGuiOldColumns *columns)
     * }
     */
    public static void igDebugNodeColumns(MemorySegment columns) {
        var mh$ = igDebugNodeColumns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeColumns", columns);
            }
            mh$.invokeExact(columns);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeDockNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeDockNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeDockNode(ImGuiDockNode *node, const char *label)
     * }
     */
    public static FunctionDescriptor igDebugNodeDockNode$descriptor() {
        return igDebugNodeDockNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeDockNode(ImGuiDockNode *node, const char *label)
     * }
     */
    public static MethodHandle igDebugNodeDockNode$handle() {
        return igDebugNodeDockNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeDockNode(ImGuiDockNode *node, const char *label)
     * }
     */
    public static MemorySegment igDebugNodeDockNode$address() {
        return igDebugNodeDockNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeDockNode(ImGuiDockNode *node, const char *label)
     * }
     */
    public static void igDebugNodeDockNode(MemorySegment node, MemorySegment label) {
        var mh$ = igDebugNodeDockNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeDockNode", node, label);
            }
            mh$.invokeExact(node, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeDrawList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeDrawList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeDrawList(ImGuiWindow *window, ImGuiViewportP *viewport, const ImDrawList *draw_list, const char *label)
     * }
     */
    public static FunctionDescriptor igDebugNodeDrawList$descriptor() {
        return igDebugNodeDrawList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeDrawList(ImGuiWindow *window, ImGuiViewportP *viewport, const ImDrawList *draw_list, const char *label)
     * }
     */
    public static MethodHandle igDebugNodeDrawList$handle() {
        return igDebugNodeDrawList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeDrawList(ImGuiWindow *window, ImGuiViewportP *viewport, const ImDrawList *draw_list, const char *label)
     * }
     */
    public static MemorySegment igDebugNodeDrawList$address() {
        return igDebugNodeDrawList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeDrawList(ImGuiWindow *window, ImGuiViewportP *viewport, const ImDrawList *draw_list, const char *label)
     * }
     */
    public static void igDebugNodeDrawList(MemorySegment window, MemorySegment viewport, MemorySegment draw_list, MemorySegment label) {
        var mh$ = igDebugNodeDrawList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeDrawList", window, viewport, draw_list, label);
            }
            mh$.invokeExact(window, viewport, draw_list, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeDrawCmdShowMeshAndBoundingBox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeDrawCmdShowMeshAndBoundingBox");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList *out_draw_list, const ImDrawList *draw_list, const ImDrawCmd *draw_cmd, bool show_mesh, bool show_aabb)
     * }
     */
    public static FunctionDescriptor igDebugNodeDrawCmdShowMeshAndBoundingBox$descriptor() {
        return igDebugNodeDrawCmdShowMeshAndBoundingBox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList *out_draw_list, const ImDrawList *draw_list, const ImDrawCmd *draw_cmd, bool show_mesh, bool show_aabb)
     * }
     */
    public static MethodHandle igDebugNodeDrawCmdShowMeshAndBoundingBox$handle() {
        return igDebugNodeDrawCmdShowMeshAndBoundingBox.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList *out_draw_list, const ImDrawList *draw_list, const ImDrawCmd *draw_cmd, bool show_mesh, bool show_aabb)
     * }
     */
    public static MemorySegment igDebugNodeDrawCmdShowMeshAndBoundingBox$address() {
        return igDebugNodeDrawCmdShowMeshAndBoundingBox.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList *out_draw_list, const ImDrawList *draw_list, const ImDrawCmd *draw_cmd, bool show_mesh, bool show_aabb)
     * }
     */
    public static void igDebugNodeDrawCmdShowMeshAndBoundingBox(MemorySegment out_draw_list, MemorySegment draw_list, MemorySegment draw_cmd, boolean show_mesh, boolean show_aabb) {
        var mh$ = igDebugNodeDrawCmdShowMeshAndBoundingBox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeDrawCmdShowMeshAndBoundingBox", out_draw_list, draw_list, draw_cmd, show_mesh, show_aabb);
            }
            mh$.invokeExact(out_draw_list, draw_list, draw_cmd, show_mesh, show_aabb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeFont(ImFont *font)
     * }
     */
    public static FunctionDescriptor igDebugNodeFont$descriptor() {
        return igDebugNodeFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeFont(ImFont *font)
     * }
     */
    public static MethodHandle igDebugNodeFont$handle() {
        return igDebugNodeFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeFont(ImFont *font)
     * }
     */
    public static MemorySegment igDebugNodeFont$address() {
        return igDebugNodeFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeFont(ImFont *font)
     * }
     */
    public static void igDebugNodeFont(MemorySegment font) {
        var mh$ = igDebugNodeFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeFont", font);
            }
            mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeFontGlyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeFontGlyph");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeFontGlyph(ImFont *font, const ImFontGlyph *glyph)
     * }
     */
    public static FunctionDescriptor igDebugNodeFontGlyph$descriptor() {
        return igDebugNodeFontGlyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeFontGlyph(ImFont *font, const ImFontGlyph *glyph)
     * }
     */
    public static MethodHandle igDebugNodeFontGlyph$handle() {
        return igDebugNodeFontGlyph.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeFontGlyph(ImFont *font, const ImFontGlyph *glyph)
     * }
     */
    public static MemorySegment igDebugNodeFontGlyph$address() {
        return igDebugNodeFontGlyph.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeFontGlyph(ImFont *font, const ImFontGlyph *glyph)
     * }
     */
    public static void igDebugNodeFontGlyph(MemorySegment font, MemorySegment glyph) {
        var mh$ = igDebugNodeFontGlyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeFontGlyph", font, glyph);
            }
            mh$.invokeExact(font, glyph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeStorage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeStorage(ImGuiStorage *storage, const char *label)
     * }
     */
    public static FunctionDescriptor igDebugNodeStorage$descriptor() {
        return igDebugNodeStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeStorage(ImGuiStorage *storage, const char *label)
     * }
     */
    public static MethodHandle igDebugNodeStorage$handle() {
        return igDebugNodeStorage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeStorage(ImGuiStorage *storage, const char *label)
     * }
     */
    public static MemorySegment igDebugNodeStorage$address() {
        return igDebugNodeStorage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeStorage(ImGuiStorage *storage, const char *label)
     * }
     */
    public static void igDebugNodeStorage(MemorySegment storage, MemorySegment label) {
        var mh$ = igDebugNodeStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeStorage", storage, label);
            }
            mh$.invokeExact(storage, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeTabBar(ImGuiTabBar *tab_bar, const char *label)
     * }
     */
    public static FunctionDescriptor igDebugNodeTabBar$descriptor() {
        return igDebugNodeTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeTabBar(ImGuiTabBar *tab_bar, const char *label)
     * }
     */
    public static MethodHandle igDebugNodeTabBar$handle() {
        return igDebugNodeTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeTabBar(ImGuiTabBar *tab_bar, const char *label)
     * }
     */
    public static MemorySegment igDebugNodeTabBar$address() {
        return igDebugNodeTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeTabBar(ImGuiTabBar *tab_bar, const char *label)
     * }
     */
    public static void igDebugNodeTabBar(MemorySegment tab_bar, MemorySegment label) {
        var mh$ = igDebugNodeTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeTabBar", tab_bar, label);
            }
            mh$.invokeExact(tab_bar, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeTable(ImGuiTable *table)
     * }
     */
    public static FunctionDescriptor igDebugNodeTable$descriptor() {
        return igDebugNodeTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeTable(ImGuiTable *table)
     * }
     */
    public static MethodHandle igDebugNodeTable$handle() {
        return igDebugNodeTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeTable(ImGuiTable *table)
     * }
     */
    public static MemorySegment igDebugNodeTable$address() {
        return igDebugNodeTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeTable(ImGuiTable *table)
     * }
     */
    public static void igDebugNodeTable(MemorySegment table) {
        var mh$ = igDebugNodeTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeTable", table);
            }
            mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeTableSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeTableSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeTableSettings(ImGuiTableSettings *settings)
     * }
     */
    public static FunctionDescriptor igDebugNodeTableSettings$descriptor() {
        return igDebugNodeTableSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeTableSettings(ImGuiTableSettings *settings)
     * }
     */
    public static MethodHandle igDebugNodeTableSettings$handle() {
        return igDebugNodeTableSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeTableSettings(ImGuiTableSettings *settings)
     * }
     */
    public static MemorySegment igDebugNodeTableSettings$address() {
        return igDebugNodeTableSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeTableSettings(ImGuiTableSettings *settings)
     * }
     */
    public static void igDebugNodeTableSettings(MemorySegment settings) {
        var mh$ = igDebugNodeTableSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeTableSettings", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeInputTextState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeInputTextState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeInputTextState(ImGuiInputTextState *state)
     * }
     */
    public static FunctionDescriptor igDebugNodeInputTextState$descriptor() {
        return igDebugNodeInputTextState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeInputTextState(ImGuiInputTextState *state)
     * }
     */
    public static MethodHandle igDebugNodeInputTextState$handle() {
        return igDebugNodeInputTextState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeInputTextState(ImGuiInputTextState *state)
     * }
     */
    public static MemorySegment igDebugNodeInputTextState$address() {
        return igDebugNodeInputTextState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeInputTextState(ImGuiInputTextState *state)
     * }
     */
    public static void igDebugNodeInputTextState(MemorySegment state) {
        var mh$ = igDebugNodeInputTextState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeInputTextState", state);
            }
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeTypingSelectState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeTypingSelectState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeTypingSelectState(ImGuiTypingSelectState *state)
     * }
     */
    public static FunctionDescriptor igDebugNodeTypingSelectState$descriptor() {
        return igDebugNodeTypingSelectState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeTypingSelectState(ImGuiTypingSelectState *state)
     * }
     */
    public static MethodHandle igDebugNodeTypingSelectState$handle() {
        return igDebugNodeTypingSelectState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeTypingSelectState(ImGuiTypingSelectState *state)
     * }
     */
    public static MemorySegment igDebugNodeTypingSelectState$address() {
        return igDebugNodeTypingSelectState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeTypingSelectState(ImGuiTypingSelectState *state)
     * }
     */
    public static void igDebugNodeTypingSelectState(MemorySegment state) {
        var mh$ = igDebugNodeTypingSelectState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeTypingSelectState", state);
            }
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeMultiSelectState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeMultiSelectState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeMultiSelectState(ImGuiMultiSelectState *state)
     * }
     */
    public static FunctionDescriptor igDebugNodeMultiSelectState$descriptor() {
        return igDebugNodeMultiSelectState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeMultiSelectState(ImGuiMultiSelectState *state)
     * }
     */
    public static MethodHandle igDebugNodeMultiSelectState$handle() {
        return igDebugNodeMultiSelectState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeMultiSelectState(ImGuiMultiSelectState *state)
     * }
     */
    public static MemorySegment igDebugNodeMultiSelectState$address() {
        return igDebugNodeMultiSelectState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeMultiSelectState(ImGuiMultiSelectState *state)
     * }
     */
    public static void igDebugNodeMultiSelectState(MemorySegment state) {
        var mh$ = igDebugNodeMultiSelectState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeMultiSelectState", state);
            }
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindow(ImGuiWindow *window, const char *label)
     * }
     */
    public static FunctionDescriptor igDebugNodeWindow$descriptor() {
        return igDebugNodeWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindow(ImGuiWindow *window, const char *label)
     * }
     */
    public static MethodHandle igDebugNodeWindow$handle() {
        return igDebugNodeWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindow(ImGuiWindow *window, const char *label)
     * }
     */
    public static MemorySegment igDebugNodeWindow$address() {
        return igDebugNodeWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeWindow(ImGuiWindow *window, const char *label)
     * }
     */
    public static void igDebugNodeWindow(MemorySegment window, MemorySegment label) {
        var mh$ = igDebugNodeWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeWindow", window, label);
            }
            mh$.invokeExact(window, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeWindowSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeWindowSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindowSettings(ImGuiWindowSettings *settings)
     * }
     */
    public static FunctionDescriptor igDebugNodeWindowSettings$descriptor() {
        return igDebugNodeWindowSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindowSettings(ImGuiWindowSettings *settings)
     * }
     */
    public static MethodHandle igDebugNodeWindowSettings$handle() {
        return igDebugNodeWindowSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindowSettings(ImGuiWindowSettings *settings)
     * }
     */
    public static MemorySegment igDebugNodeWindowSettings$address() {
        return igDebugNodeWindowSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeWindowSettings(ImGuiWindowSettings *settings)
     * }
     */
    public static void igDebugNodeWindowSettings(MemorySegment settings) {
        var mh$ = igDebugNodeWindowSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeWindowSettings", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeWindowsList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeWindowsList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindowsList(ImVector_ImGuiWindowPtr *windows, const char *label)
     * }
     */
    public static FunctionDescriptor igDebugNodeWindowsList$descriptor() {
        return igDebugNodeWindowsList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindowsList(ImVector_ImGuiWindowPtr *windows, const char *label)
     * }
     */
    public static MethodHandle igDebugNodeWindowsList$handle() {
        return igDebugNodeWindowsList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindowsList(ImVector_ImGuiWindowPtr *windows, const char *label)
     * }
     */
    public static MemorySegment igDebugNodeWindowsList$address() {
        return igDebugNodeWindowsList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeWindowsList(ImVector_ImGuiWindowPtr *windows, const char *label)
     * }
     */
    public static void igDebugNodeWindowsList(MemorySegment windows, MemorySegment label) {
        var mh$ = igDebugNodeWindowsList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeWindowsList", windows, label);
            }
            mh$.invokeExact(windows, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeWindowsListByBeginStackParent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeWindowsListByBeginStackParent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindowsListByBeginStackParent(ImGuiWindow **windows, int windows_size, ImGuiWindow *parent_in_begin_stack)
     * }
     */
    public static FunctionDescriptor igDebugNodeWindowsListByBeginStackParent$descriptor() {
        return igDebugNodeWindowsListByBeginStackParent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindowsListByBeginStackParent(ImGuiWindow **windows, int windows_size, ImGuiWindow *parent_in_begin_stack)
     * }
     */
    public static MethodHandle igDebugNodeWindowsListByBeginStackParent$handle() {
        return igDebugNodeWindowsListByBeginStackParent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeWindowsListByBeginStackParent(ImGuiWindow **windows, int windows_size, ImGuiWindow *parent_in_begin_stack)
     * }
     */
    public static MemorySegment igDebugNodeWindowsListByBeginStackParent$address() {
        return igDebugNodeWindowsListByBeginStackParent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeWindowsListByBeginStackParent(ImGuiWindow **windows, int windows_size, ImGuiWindow *parent_in_begin_stack)
     * }
     */
    public static void igDebugNodeWindowsListByBeginStackParent(MemorySegment windows, int windows_size, MemorySegment parent_in_begin_stack) {
        var mh$ = igDebugNodeWindowsListByBeginStackParent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeWindowsListByBeginStackParent", windows, windows_size, parent_in_begin_stack);
            }
            mh$.invokeExact(windows, windows_size, parent_in_begin_stack);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodeViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodeViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodeViewport(ImGuiViewportP *viewport)
     * }
     */
    public static FunctionDescriptor igDebugNodeViewport$descriptor() {
        return igDebugNodeViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodeViewport(ImGuiViewportP *viewport)
     * }
     */
    public static MethodHandle igDebugNodeViewport$handle() {
        return igDebugNodeViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodeViewport(ImGuiViewportP *viewport)
     * }
     */
    public static MemorySegment igDebugNodeViewport$address() {
        return igDebugNodeViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodeViewport(ImGuiViewportP *viewport)
     * }
     */
    public static void igDebugNodeViewport(MemorySegment viewport) {
        var mh$ = igDebugNodeViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodeViewport", viewport);
            }
            mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugNodePlatformMonitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugNodePlatformMonitor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugNodePlatformMonitor(ImGuiPlatformMonitor *monitor, const char *label, int idx)
     * }
     */
    public static FunctionDescriptor igDebugNodePlatformMonitor$descriptor() {
        return igDebugNodePlatformMonitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugNodePlatformMonitor(ImGuiPlatformMonitor *monitor, const char *label, int idx)
     * }
     */
    public static MethodHandle igDebugNodePlatformMonitor$handle() {
        return igDebugNodePlatformMonitor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugNodePlatformMonitor(ImGuiPlatformMonitor *monitor, const char *label, int idx)
     * }
     */
    public static MemorySegment igDebugNodePlatformMonitor$address() {
        return igDebugNodePlatformMonitor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugNodePlatformMonitor(ImGuiPlatformMonitor *monitor, const char *label, int idx)
     * }
     */
    public static void igDebugNodePlatformMonitor(MemorySegment monitor, MemorySegment label, int idx) {
        var mh$ = igDebugNodePlatformMonitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugNodePlatformMonitor", monitor, label, idx);
            }
            mh$.invokeExact(monitor, label, idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugRenderKeyboardPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugRenderKeyboardPreview");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugRenderKeyboardPreview(ImDrawList *draw_list)
     * }
     */
    public static FunctionDescriptor igDebugRenderKeyboardPreview$descriptor() {
        return igDebugRenderKeyboardPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugRenderKeyboardPreview(ImDrawList *draw_list)
     * }
     */
    public static MethodHandle igDebugRenderKeyboardPreview$handle() {
        return igDebugRenderKeyboardPreview.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugRenderKeyboardPreview(ImDrawList *draw_list)
     * }
     */
    public static MemorySegment igDebugRenderKeyboardPreview$address() {
        return igDebugRenderKeyboardPreview.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugRenderKeyboardPreview(ImDrawList *draw_list)
     * }
     */
    public static void igDebugRenderKeyboardPreview(MemorySegment draw_list) {
        var mh$ = igDebugRenderKeyboardPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugRenderKeyboardPreview", draw_list);
            }
            mh$.invokeExact(draw_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugRenderViewportThumbnail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugRenderViewportThumbnail");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugRenderViewportThumbnail(ImDrawList *draw_list, ImGuiViewportP *viewport, const ImRect bb)
     * }
     */
    public static FunctionDescriptor igDebugRenderViewportThumbnail$descriptor() {
        return igDebugRenderViewportThumbnail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugRenderViewportThumbnail(ImDrawList *draw_list, ImGuiViewportP *viewport, const ImRect bb)
     * }
     */
    public static MethodHandle igDebugRenderViewportThumbnail$handle() {
        return igDebugRenderViewportThumbnail.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugRenderViewportThumbnail(ImDrawList *draw_list, ImGuiViewportP *viewport, const ImRect bb)
     * }
     */
    public static MemorySegment igDebugRenderViewportThumbnail$address() {
        return igDebugRenderViewportThumbnail.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugRenderViewportThumbnail(ImDrawList *draw_list, ImGuiViewportP *viewport, const ImRect bb)
     * }
     */
    public static void igDebugRenderViewportThumbnail(MemorySegment draw_list, MemorySegment viewport, MemorySegment bb) {
        var mh$ = igDebugRenderViewportThumbnail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugRenderViewportThumbnail", draw_list, viewport, bb);
            }
            mh$.invokeExact(draw_list, viewport, bb);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasGetBuilderForStbTruetype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasGetBuilderForStbTruetype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImFontBuilderIO *igImFontAtlasGetBuilderForStbTruetype()
     * }
     */
    public static FunctionDescriptor igImFontAtlasGetBuilderForStbTruetype$descriptor() {
        return igImFontAtlasGetBuilderForStbTruetype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImFontBuilderIO *igImFontAtlasGetBuilderForStbTruetype()
     * }
     */
    public static MethodHandle igImFontAtlasGetBuilderForStbTruetype$handle() {
        return igImFontAtlasGetBuilderForStbTruetype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImFontBuilderIO *igImFontAtlasGetBuilderForStbTruetype()
     * }
     */
    public static MemorySegment igImFontAtlasGetBuilderForStbTruetype$address() {
        return igImFontAtlasGetBuilderForStbTruetype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImFontBuilderIO *igImFontAtlasGetBuilderForStbTruetype()
     * }
     */
    public static MemorySegment igImFontAtlasGetBuilderForStbTruetype() {
        var mh$ = igImFontAtlasGetBuilderForStbTruetype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasGetBuilderForStbTruetype");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasUpdateConfigDataPointers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasUpdateConfigDataPointers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFontAtlasUpdateConfigDataPointers(ImFontAtlas *atlas)
     * }
     */
    public static FunctionDescriptor igImFontAtlasUpdateConfigDataPointers$descriptor() {
        return igImFontAtlasUpdateConfigDataPointers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFontAtlasUpdateConfigDataPointers(ImFontAtlas *atlas)
     * }
     */
    public static MethodHandle igImFontAtlasUpdateConfigDataPointers$handle() {
        return igImFontAtlasUpdateConfigDataPointers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFontAtlasUpdateConfigDataPointers(ImFontAtlas *atlas)
     * }
     */
    public static MemorySegment igImFontAtlasUpdateConfigDataPointers$address() {
        return igImFontAtlasUpdateConfigDataPointers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFontAtlasUpdateConfigDataPointers(ImFontAtlas *atlas)
     * }
     */
    public static void igImFontAtlasUpdateConfigDataPointers(MemorySegment atlas) {
        var mh$ = igImFontAtlasUpdateConfigDataPointers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasUpdateConfigDataPointers", atlas);
            }
            mh$.invokeExact(atlas);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasBuildInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasBuildInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildInit(ImFontAtlas *atlas)
     * }
     */
    public static FunctionDescriptor igImFontAtlasBuildInit$descriptor() {
        return igImFontAtlasBuildInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildInit(ImFontAtlas *atlas)
     * }
     */
    public static MethodHandle igImFontAtlasBuildInit$handle() {
        return igImFontAtlasBuildInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildInit(ImFontAtlas *atlas)
     * }
     */
    public static MemorySegment igImFontAtlasBuildInit$address() {
        return igImFontAtlasBuildInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildInit(ImFontAtlas *atlas)
     * }
     */
    public static void igImFontAtlasBuildInit(MemorySegment atlas) {
        var mh$ = igImFontAtlasBuildInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasBuildInit", atlas);
            }
            mh$.invokeExact(atlas);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasBuildSetupFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasBuildSetupFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildSetupFont(ImFontAtlas *atlas, ImFont *font, ImFontConfig *font_config, float ascent, float descent)
     * }
     */
    public static FunctionDescriptor igImFontAtlasBuildSetupFont$descriptor() {
        return igImFontAtlasBuildSetupFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildSetupFont(ImFontAtlas *atlas, ImFont *font, ImFontConfig *font_config, float ascent, float descent)
     * }
     */
    public static MethodHandle igImFontAtlasBuildSetupFont$handle() {
        return igImFontAtlasBuildSetupFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildSetupFont(ImFontAtlas *atlas, ImFont *font, ImFontConfig *font_config, float ascent, float descent)
     * }
     */
    public static MemorySegment igImFontAtlasBuildSetupFont$address() {
        return igImFontAtlasBuildSetupFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildSetupFont(ImFontAtlas *atlas, ImFont *font, ImFontConfig *font_config, float ascent, float descent)
     * }
     */
    public static void igImFontAtlasBuildSetupFont(MemorySegment atlas, MemorySegment font, MemorySegment font_config, float ascent, float descent) {
        var mh$ = igImFontAtlasBuildSetupFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasBuildSetupFont", atlas, font, font_config, ascent, descent);
            }
            mh$.invokeExact(atlas, font, font_config, ascent, descent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasBuildPackCustomRects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasBuildPackCustomRects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildPackCustomRects(ImFontAtlas *atlas, void *stbrp_context_opaque)
     * }
     */
    public static FunctionDescriptor igImFontAtlasBuildPackCustomRects$descriptor() {
        return igImFontAtlasBuildPackCustomRects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildPackCustomRects(ImFontAtlas *atlas, void *stbrp_context_opaque)
     * }
     */
    public static MethodHandle igImFontAtlasBuildPackCustomRects$handle() {
        return igImFontAtlasBuildPackCustomRects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildPackCustomRects(ImFontAtlas *atlas, void *stbrp_context_opaque)
     * }
     */
    public static MemorySegment igImFontAtlasBuildPackCustomRects$address() {
        return igImFontAtlasBuildPackCustomRects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildPackCustomRects(ImFontAtlas *atlas, void *stbrp_context_opaque)
     * }
     */
    public static void igImFontAtlasBuildPackCustomRects(MemorySegment atlas, MemorySegment stbrp_context_opaque) {
        var mh$ = igImFontAtlasBuildPackCustomRects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasBuildPackCustomRects", atlas, stbrp_context_opaque);
            }
            mh$.invokeExact(atlas, stbrp_context_opaque);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasBuildFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasBuildFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildFinish(ImFontAtlas *atlas)
     * }
     */
    public static FunctionDescriptor igImFontAtlasBuildFinish$descriptor() {
        return igImFontAtlasBuildFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildFinish(ImFontAtlas *atlas)
     * }
     */
    public static MethodHandle igImFontAtlasBuildFinish$handle() {
        return igImFontAtlasBuildFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildFinish(ImFontAtlas *atlas)
     * }
     */
    public static MemorySegment igImFontAtlasBuildFinish$address() {
        return igImFontAtlasBuildFinish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildFinish(ImFontAtlas *atlas)
     * }
     */
    public static void igImFontAtlasBuildFinish(MemorySegment atlas) {
        var mh$ = igImFontAtlasBuildFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasBuildFinish", atlas);
            }
            mh$.invokeExact(atlas);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasBuildRender8bppRectFromString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_CHAR,
            imgui.C_CHAR
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasBuildRender8bppRectFromString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildRender8bppRectFromString(ImFontAtlas *atlas, int x, int y, int w, int h, const char *in_str, char in_marker_char, unsigned char in_marker_pixel_value)
     * }
     */
    public static FunctionDescriptor igImFontAtlasBuildRender8bppRectFromString$descriptor() {
        return igImFontAtlasBuildRender8bppRectFromString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildRender8bppRectFromString(ImFontAtlas *atlas, int x, int y, int w, int h, const char *in_str, char in_marker_char, unsigned char in_marker_pixel_value)
     * }
     */
    public static MethodHandle igImFontAtlasBuildRender8bppRectFromString$handle() {
        return igImFontAtlasBuildRender8bppRectFromString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildRender8bppRectFromString(ImFontAtlas *atlas, int x, int y, int w, int h, const char *in_str, char in_marker_char, unsigned char in_marker_pixel_value)
     * }
     */
    public static MemorySegment igImFontAtlasBuildRender8bppRectFromString$address() {
        return igImFontAtlasBuildRender8bppRectFromString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildRender8bppRectFromString(ImFontAtlas *atlas, int x, int y, int w, int h, const char *in_str, char in_marker_char, unsigned char in_marker_pixel_value)
     * }
     */
    public static void igImFontAtlasBuildRender8bppRectFromString(MemorySegment atlas, int x, int y, int w, int h, MemorySegment in_str, byte in_marker_char, byte in_marker_pixel_value) {
        var mh$ = igImFontAtlasBuildRender8bppRectFromString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasBuildRender8bppRectFromString", atlas, x, y, w, h, in_str, in_marker_char, in_marker_pixel_value);
            }
            mh$.invokeExact(atlas, x, y, w, h, in_str, in_marker_char, in_marker_pixel_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasBuildRender32bppRectFromString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_CHAR,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasBuildRender32bppRectFromString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildRender32bppRectFromString(ImFontAtlas *atlas, int x, int y, int w, int h, const char *in_str, char in_marker_char, unsigned int in_marker_pixel_value)
     * }
     */
    public static FunctionDescriptor igImFontAtlasBuildRender32bppRectFromString$descriptor() {
        return igImFontAtlasBuildRender32bppRectFromString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildRender32bppRectFromString(ImFontAtlas *atlas, int x, int y, int w, int h, const char *in_str, char in_marker_char, unsigned int in_marker_pixel_value)
     * }
     */
    public static MethodHandle igImFontAtlasBuildRender32bppRectFromString$handle() {
        return igImFontAtlasBuildRender32bppRectFromString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildRender32bppRectFromString(ImFontAtlas *atlas, int x, int y, int w, int h, const char *in_str, char in_marker_char, unsigned int in_marker_pixel_value)
     * }
     */
    public static MemorySegment igImFontAtlasBuildRender32bppRectFromString$address() {
        return igImFontAtlasBuildRender32bppRectFromString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildRender32bppRectFromString(ImFontAtlas *atlas, int x, int y, int w, int h, const char *in_str, char in_marker_char, unsigned int in_marker_pixel_value)
     * }
     */
    public static void igImFontAtlasBuildRender32bppRectFromString(MemorySegment atlas, int x, int y, int w, int h, MemorySegment in_str, byte in_marker_char, int in_marker_pixel_value) {
        var mh$ = igImFontAtlasBuildRender32bppRectFromString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasBuildRender32bppRectFromString", atlas, x, y, w, h, in_str, in_marker_char, in_marker_pixel_value);
            }
            mh$.invokeExact(atlas, x, y, w, h, in_str, in_marker_char, in_marker_pixel_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasBuildMultiplyCalcLookupTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasBuildMultiplyCalcLookupTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_multiply_factor)
     * }
     */
    public static FunctionDescriptor igImFontAtlasBuildMultiplyCalcLookupTable$descriptor() {
        return igImFontAtlasBuildMultiplyCalcLookupTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_multiply_factor)
     * }
     */
    public static MethodHandle igImFontAtlasBuildMultiplyCalcLookupTable$handle() {
        return igImFontAtlasBuildMultiplyCalcLookupTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_multiply_factor)
     * }
     */
    public static MemorySegment igImFontAtlasBuildMultiplyCalcLookupTable$address() {
        return igImFontAtlasBuildMultiplyCalcLookupTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_multiply_factor)
     * }
     */
    public static void igImFontAtlasBuildMultiplyCalcLookupTable(MemorySegment out_table, float in_multiply_factor) {
        var mh$ = igImFontAtlasBuildMultiplyCalcLookupTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasBuildMultiplyCalcLookupTable", out_table, in_multiply_factor);
            }
            mh$.invokeExact(out_table, in_multiply_factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFontAtlasBuildMultiplyRectAlpha8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFontAtlasBuildMultiplyRectAlpha8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char *pixels, int x, int y, int w, int h, int stride)
     * }
     */
    public static FunctionDescriptor igImFontAtlasBuildMultiplyRectAlpha8$descriptor() {
        return igImFontAtlasBuildMultiplyRectAlpha8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char *pixels, int x, int y, int w, int h, int stride)
     * }
     */
    public static MethodHandle igImFontAtlasBuildMultiplyRectAlpha8$handle() {
        return igImFontAtlasBuildMultiplyRectAlpha8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char *pixels, int x, int y, int w, int h, int stride)
     * }
     */
    public static MemorySegment igImFontAtlasBuildMultiplyRectAlpha8$address() {
        return igImFontAtlasBuildMultiplyRectAlpha8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char *pixels, int x, int y, int w, int h, int stride)
     * }
     */
    public static void igImFontAtlasBuildMultiplyRectAlpha8(MemorySegment table, MemorySegment pixels, int x, int y, int w, int h, int stride) {
        var mh$ = igImFontAtlasBuildMultiplyRectAlpha8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFontAtlasBuildMultiplyRectAlpha8", table, pixels, x, y, w, h, stride);
            }
            mh$.invokeExact(table, pixels, x, y, w, h, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igLogText(const char *fmt, ...)
     * }
     */
    public static class igLogText {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igLogText");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igLogText(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igLogText(const char *fmt, ...)
         * }
         */
        public static igLogText makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igLogText(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igLogText", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_appendf(struct ImGuiTextBuffer *buffer, const char *fmt, ...)
     * }
     */
    public static class ImGuiTextBuffer_appendf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER,
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_appendf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private ImGuiTextBuffer_appendf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void ImGuiTextBuffer_appendf(struct ImGuiTextBuffer *buffer, const char *fmt, ...)
         * }
         */
        public static ImGuiTextBuffer_appendf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new ImGuiTextBuffer_appendf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment buffer, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("ImGuiTextBuffer_appendf", buffer, fmt, x2);
                }
                spreader.invokeExact(buffer, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igGET_FLT_MAX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGET_FLT_MAX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGET_FLT_MAX()
     * }
     */
    public static FunctionDescriptor igGET_FLT_MAX$descriptor() {
        return igGET_FLT_MAX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGET_FLT_MAX()
     * }
     */
    public static MethodHandle igGET_FLT_MAX$handle() {
        return igGET_FLT_MAX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGET_FLT_MAX()
     * }
     */
    public static MemorySegment igGET_FLT_MAX$address() {
        return igGET_FLT_MAX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGET_FLT_MAX()
     * }
     */
    public static float igGET_FLT_MAX() {
        var mh$ = igGET_FLT_MAX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGET_FLT_MAX");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGET_FLT_MIN {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGET_FLT_MIN");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGET_FLT_MIN()
     * }
     */
    public static FunctionDescriptor igGET_FLT_MIN$descriptor() {
        return igGET_FLT_MIN.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGET_FLT_MIN()
     * }
     */
    public static MethodHandle igGET_FLT_MIN$handle() {
        return igGET_FLT_MIN.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGET_FLT_MIN()
     * }
     */
    public static MemorySegment igGET_FLT_MIN$address() {
        return igGET_FLT_MIN.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGET_FLT_MIN()
     * }
     */
    public static float igGET_FLT_MIN() {
        var mh$ = igGET_FLT_MIN.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGET_FLT_MIN");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVector_ImWchar_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVector_ImWchar_create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVector_ImWchar *ImVector_ImWchar_create()
     * }
     */
    public static FunctionDescriptor ImVector_ImWchar_create$descriptor() {
        return ImVector_ImWchar_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVector_ImWchar *ImVector_ImWchar_create()
     * }
     */
    public static MethodHandle ImVector_ImWchar_create$handle() {
        return ImVector_ImWchar_create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVector_ImWchar *ImVector_ImWchar_create()
     * }
     */
    public static MemorySegment ImVector_ImWchar_create$address() {
        return ImVector_ImWchar_create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVector_ImWchar *ImVector_ImWchar_create()
     * }
     */
    public static MemorySegment ImVector_ImWchar_create() {
        var mh$ = ImVector_ImWchar_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVector_ImWchar_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVector_ImWchar_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVector_ImWchar_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_destroy(ImVector_ImWchar *self)
     * }
     */
    public static FunctionDescriptor ImVector_ImWchar_destroy$descriptor() {
        return ImVector_ImWchar_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_destroy(ImVector_ImWchar *self)
     * }
     */
    public static MethodHandle ImVector_ImWchar_destroy$handle() {
        return ImVector_ImWchar_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_destroy(ImVector_ImWchar *self)
     * }
     */
    public static MemorySegment ImVector_ImWchar_destroy$address() {
        return ImVector_ImWchar_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_destroy(ImVector_ImWchar *self)
     * }
     */
    public static void ImVector_ImWchar_destroy(MemorySegment self) {
        var mh$ = ImVector_ImWchar_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVector_ImWchar_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVector_ImWchar_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVector_ImWchar_Init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_Init(ImVector_ImWchar *p)
     * }
     */
    public static FunctionDescriptor ImVector_ImWchar_Init$descriptor() {
        return ImVector_ImWchar_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_Init(ImVector_ImWchar *p)
     * }
     */
    public static MethodHandle ImVector_ImWchar_Init$handle() {
        return ImVector_ImWchar_Init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_Init(ImVector_ImWchar *p)
     * }
     */
    public static MemorySegment ImVector_ImWchar_Init$address() {
        return ImVector_ImWchar_Init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_Init(ImVector_ImWchar *p)
     * }
     */
    public static void ImVector_ImWchar_Init(MemorySegment p) {
        var mh$ = ImVector_ImWchar_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVector_ImWchar_Init", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVector_ImWchar_UnInit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVector_ImWchar_UnInit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_UnInit(ImVector_ImWchar *p)
     * }
     */
    public static FunctionDescriptor ImVector_ImWchar_UnInit$descriptor() {
        return ImVector_ImWchar_UnInit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_UnInit(ImVector_ImWchar *p)
     * }
     */
    public static MethodHandle ImVector_ImWchar_UnInit$handle() {
        return ImVector_ImWchar_UnInit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_UnInit(ImVector_ImWchar *p)
     * }
     */
    public static MemorySegment ImVector_ImWchar_UnInit$address() {
        return ImVector_ImWchar_UnInit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImVector_ImWchar_UnInit(ImVector_ImWchar *p)
     * }
     */
    public static void ImVector_ImWchar_UnInit(MemorySegment p) {
        var mh$ = ImVector_ImWchar_UnInit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVector_ImWchar_UnInit", p);
            }
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPlatformIO_Set_Platform_GetWindowPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPlatformIO_Set_Platform_GetWindowPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_Set_Platform_GetWindowPos(ImGuiPlatformIO *platform_io, void (*user_callback)(ImGuiViewport *, ImVec2 *))
     * }
     */
    public static FunctionDescriptor ImGuiPlatformIO_Set_Platform_GetWindowPos$descriptor() {
        return ImGuiPlatformIO_Set_Platform_GetWindowPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_Set_Platform_GetWindowPos(ImGuiPlatformIO *platform_io, void (*user_callback)(ImGuiViewport *, ImVec2 *))
     * }
     */
    public static MethodHandle ImGuiPlatformIO_Set_Platform_GetWindowPos$handle() {
        return ImGuiPlatformIO_Set_Platform_GetWindowPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_Set_Platform_GetWindowPos(ImGuiPlatformIO *platform_io, void (*user_callback)(ImGuiViewport *, ImVec2 *))
     * }
     */
    public static MemorySegment ImGuiPlatformIO_Set_Platform_GetWindowPos$address() {
        return ImGuiPlatformIO_Set_Platform_GetWindowPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_Set_Platform_GetWindowPos(ImGuiPlatformIO *platform_io, void (*user_callback)(ImGuiViewport *, ImVec2 *))
     * }
     */
    public static void ImGuiPlatformIO_Set_Platform_GetWindowPos(MemorySegment platform_io, MemorySegment user_callback) {
        var mh$ = ImGuiPlatformIO_Set_Platform_GetWindowPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPlatformIO_Set_Platform_GetWindowPos", platform_io, user_callback);
            }
            mh$.invokeExact(platform_io, user_callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPlatformIO_Set_Platform_GetWindowSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPlatformIO_Set_Platform_GetWindowSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_Set_Platform_GetWindowSize(ImGuiPlatformIO *platform_io, void (*user_callback)(ImGuiViewport *, ImVec2 *))
     * }
     */
    public static FunctionDescriptor ImGuiPlatformIO_Set_Platform_GetWindowSize$descriptor() {
        return ImGuiPlatformIO_Set_Platform_GetWindowSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_Set_Platform_GetWindowSize(ImGuiPlatformIO *platform_io, void (*user_callback)(ImGuiViewport *, ImVec2 *))
     * }
     */
    public static MethodHandle ImGuiPlatformIO_Set_Platform_GetWindowSize$handle() {
        return ImGuiPlatformIO_Set_Platform_GetWindowSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_Set_Platform_GetWindowSize(ImGuiPlatformIO *platform_io, void (*user_callback)(ImGuiViewport *, ImVec2 *))
     * }
     */
    public static MemorySegment ImGuiPlatformIO_Set_Platform_GetWindowSize$address() {
        return ImGuiPlatformIO_Set_Platform_GetWindowSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_Set_Platform_GetWindowSize(ImGuiPlatformIO *platform_io, void (*user_callback)(ImGuiViewport *, ImVec2 *))
     * }
     */
    public static void ImGuiPlatformIO_Set_Platform_GetWindowSize(MemorySegment platform_io, MemorySegment user_callback) {
        var mh$ = ImGuiPlatformIO_Set_Platform_GetWindowSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPlatformIO_Set_Platform_GetWindowSize", platform_io, user_callback);
            }
            mh$.invokeExact(platform_io, user_callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment ImDrawCallback_ResetRenderState = MemorySegment.ofAddress(-8L);
    /**
     * {@snippet lang=c :
     * #define ImDrawCallback_ResetRenderState (void*) -8
     * }
     */
    public static MemorySegment ImDrawCallback_ResetRenderState() {
        return ImDrawCallback_ResetRenderState;
    }
}

