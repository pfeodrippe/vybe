// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StbUndoRecord {
 *     int where;
 *     int insert_length;
 *     int delete_length;
 *     int char_storage;
 * }
 * }
 */
public class StbUndoRecord {

    StbUndoRecord() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("where"),
        imgui.C_INT.withName("insert_length"),
        imgui.C_INT.withName("delete_length"),
        imgui.C_INT.withName("char_storage")
    ).withName("StbUndoRecord");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt where$LAYOUT = (OfInt)$LAYOUT.select(groupElement("where"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int where
     * }
     */
    public static final OfInt where$layout() {
        return where$LAYOUT;
    }

    private static final long where$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int where
     * }
     */
    public static final long where$offset() {
        return where$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int where
     * }
     */
    public static int where(MemorySegment struct) {
        return struct.get(where$LAYOUT, where$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int where
     * }
     */
    public static void where(MemorySegment struct, int fieldValue) {
        struct.set(where$LAYOUT, where$OFFSET, fieldValue);
    }

    private static final OfInt insert_length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("insert_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int insert_length
     * }
     */
    public static final OfInt insert_length$layout() {
        return insert_length$LAYOUT;
    }

    private static final long insert_length$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int insert_length
     * }
     */
    public static final long insert_length$offset() {
        return insert_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int insert_length
     * }
     */
    public static int insert_length(MemorySegment struct) {
        return struct.get(insert_length$LAYOUT, insert_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int insert_length
     * }
     */
    public static void insert_length(MemorySegment struct, int fieldValue) {
        struct.set(insert_length$LAYOUT, insert_length$OFFSET, fieldValue);
    }

    private static final OfInt delete_length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("delete_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int delete_length
     * }
     */
    public static final OfInt delete_length$layout() {
        return delete_length$LAYOUT;
    }

    private static final long delete_length$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int delete_length
     * }
     */
    public static final long delete_length$offset() {
        return delete_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int delete_length
     * }
     */
    public static int delete_length(MemorySegment struct) {
        return struct.get(delete_length$LAYOUT, delete_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int delete_length
     * }
     */
    public static void delete_length(MemorySegment struct, int fieldValue) {
        struct.set(delete_length$LAYOUT, delete_length$OFFSET, fieldValue);
    }

    private static final OfInt char_storage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("char_storage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int char_storage
     * }
     */
    public static final OfInt char_storage$layout() {
        return char_storage$LAYOUT;
    }

    private static final long char_storage$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int char_storage
     * }
     */
    public static final long char_storage$offset() {
        return char_storage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int char_storage
     * }
     */
    public static int char_storage(MemorySegment struct) {
        return struct.get(char_storage$LAYOUT, char_storage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int char_storage
     * }
     */
    public static void char_storage(MemorySegment struct, int fieldValue) {
        struct.set(char_storage$LAYOUT, char_storage$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

