// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiWindowSettings {
 *     ImGuiID ID;
 *     ImVec2ih Pos;
 *     ImVec2ih Size;
 *     ImVec2ih ViewportPos;
 *     ImGuiID ViewportId;
 *     ImGuiID DockId;
 *     ImGuiID ClassId;
 *     short DockOrder;
 *     bool Collapsed;
 *     bool IsChild;
 *     bool WantApply;
 *     bool WantDelete;
 * }
 * }
 */
public class ImGuiWindowSettings {

    ImGuiWindowSettings() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("ID"),
        ImVec2ih.layout().withName("Pos"),
        ImVec2ih.layout().withName("Size"),
        ImVec2ih.layout().withName("ViewportPos"),
        imgui.C_INT.withName("ViewportId"),
        imgui.C_INT.withName("DockId"),
        imgui.C_INT.withName("ClassId"),
        imgui.C_SHORT.withName("DockOrder"),
        imgui.C_BOOL.withName("Collapsed"),
        imgui.C_BOOL.withName("IsChild"),
        imgui.C_BOOL.withName("WantApply"),
        imgui.C_BOOL.withName("WantDelete"),
        MemoryLayout.paddingLayout(2)
    ).withName("ImGuiWindowSettings");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final OfInt ID$layout() {
        return ID$LAYOUT;
    }

    private static final long ID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final long ID$offset() {
        return ID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static int ID(MemorySegment struct) {
        return struct.get(ID$LAYOUT, ID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static void ID(MemorySegment struct, int fieldValue) {
        struct.set(ID$LAYOUT, ID$OFFSET, fieldValue);
    }

    private static final GroupLayout Pos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2ih Pos
     * }
     */
    public static final GroupLayout Pos$layout() {
        return Pos$LAYOUT;
    }

    private static final long Pos$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2ih Pos
     * }
     */
    public static final long Pos$offset() {
        return Pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2ih Pos
     * }
     */
    public static MemorySegment Pos(MemorySegment struct) {
        return struct.asSlice(Pos$OFFSET, Pos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2ih Pos
     * }
     */
    public static void Pos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Pos$OFFSET, Pos$LAYOUT.byteSize());
    }

    private static final GroupLayout Size$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2ih Size
     * }
     */
    public static final GroupLayout Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2ih Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2ih Size
     * }
     */
    public static MemorySegment Size(MemorySegment struct) {
        return struct.asSlice(Size$OFFSET, Size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2ih Size
     * }
     */
    public static void Size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Size$OFFSET, Size$LAYOUT.byteSize());
    }

    private static final GroupLayout ViewportPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ViewportPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2ih ViewportPos
     * }
     */
    public static final GroupLayout ViewportPos$layout() {
        return ViewportPos$LAYOUT;
    }

    private static final long ViewportPos$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2ih ViewportPos
     * }
     */
    public static final long ViewportPos$offset() {
        return ViewportPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2ih ViewportPos
     * }
     */
    public static MemorySegment ViewportPos(MemorySegment struct) {
        return struct.asSlice(ViewportPos$OFFSET, ViewportPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2ih ViewportPos
     * }
     */
    public static void ViewportPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ViewportPos$OFFSET, ViewportPos$LAYOUT.byteSize());
    }

    private static final OfInt ViewportId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ViewportId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ViewportId
     * }
     */
    public static final OfInt ViewportId$layout() {
        return ViewportId$LAYOUT;
    }

    private static final long ViewportId$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ViewportId
     * }
     */
    public static final long ViewportId$offset() {
        return ViewportId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ViewportId
     * }
     */
    public static int ViewportId(MemorySegment struct) {
        return struct.get(ViewportId$LAYOUT, ViewportId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ViewportId
     * }
     */
    public static void ViewportId(MemorySegment struct, int fieldValue) {
        struct.set(ViewportId$LAYOUT, ViewportId$OFFSET, fieldValue);
    }

    private static final OfInt DockId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DockId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DockId
     * }
     */
    public static final OfInt DockId$layout() {
        return DockId$LAYOUT;
    }

    private static final long DockId$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DockId
     * }
     */
    public static final long DockId$offset() {
        return DockId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DockId
     * }
     */
    public static int DockId(MemorySegment struct) {
        return struct.get(DockId$LAYOUT, DockId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DockId
     * }
     */
    public static void DockId(MemorySegment struct, int fieldValue) {
        struct.set(DockId$LAYOUT, DockId$OFFSET, fieldValue);
    }

    private static final OfInt ClassId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ClassId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ClassId
     * }
     */
    public static final OfInt ClassId$layout() {
        return ClassId$LAYOUT;
    }

    private static final long ClassId$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ClassId
     * }
     */
    public static final long ClassId$offset() {
        return ClassId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ClassId
     * }
     */
    public static int ClassId(MemorySegment struct) {
        return struct.get(ClassId$LAYOUT, ClassId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ClassId
     * }
     */
    public static void ClassId(MemorySegment struct, int fieldValue) {
        struct.set(ClassId$LAYOUT, ClassId$OFFSET, fieldValue);
    }

    private static final OfShort DockOrder$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DockOrder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short DockOrder
     * }
     */
    public static final OfShort DockOrder$layout() {
        return DockOrder$LAYOUT;
    }

    private static final long DockOrder$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short DockOrder
     * }
     */
    public static final long DockOrder$offset() {
        return DockOrder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short DockOrder
     * }
     */
    public static short DockOrder(MemorySegment struct) {
        return struct.get(DockOrder$LAYOUT, DockOrder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short DockOrder
     * }
     */
    public static void DockOrder(MemorySegment struct, short fieldValue) {
        struct.set(DockOrder$LAYOUT, DockOrder$OFFSET, fieldValue);
    }

    private static final OfBoolean Collapsed$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("Collapsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool Collapsed
     * }
     */
    public static final OfBoolean Collapsed$layout() {
        return Collapsed$LAYOUT;
    }

    private static final long Collapsed$OFFSET = 30;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool Collapsed
     * }
     */
    public static final long Collapsed$offset() {
        return Collapsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool Collapsed
     * }
     */
    public static boolean Collapsed(MemorySegment struct) {
        return struct.get(Collapsed$LAYOUT, Collapsed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool Collapsed
     * }
     */
    public static void Collapsed(MemorySegment struct, boolean fieldValue) {
        struct.set(Collapsed$LAYOUT, Collapsed$OFFSET, fieldValue);
    }

    private static final OfBoolean IsChild$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsChild"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsChild
     * }
     */
    public static final OfBoolean IsChild$layout() {
        return IsChild$LAYOUT;
    }

    private static final long IsChild$OFFSET = 31;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsChild
     * }
     */
    public static final long IsChild$offset() {
        return IsChild$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsChild
     * }
     */
    public static boolean IsChild(MemorySegment struct) {
        return struct.get(IsChild$LAYOUT, IsChild$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsChild
     * }
     */
    public static void IsChild(MemorySegment struct, boolean fieldValue) {
        struct.set(IsChild$LAYOUT, IsChild$OFFSET, fieldValue);
    }

    private static final OfBoolean WantApply$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantApply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantApply
     * }
     */
    public static final OfBoolean WantApply$layout() {
        return WantApply$LAYOUT;
    }

    private static final long WantApply$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantApply
     * }
     */
    public static final long WantApply$offset() {
        return WantApply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantApply
     * }
     */
    public static boolean WantApply(MemorySegment struct) {
        return struct.get(WantApply$LAYOUT, WantApply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantApply
     * }
     */
    public static void WantApply(MemorySegment struct, boolean fieldValue) {
        struct.set(WantApply$LAYOUT, WantApply$OFFSET, fieldValue);
    }

    private static final OfBoolean WantDelete$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantDelete"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantDelete
     * }
     */
    public static final OfBoolean WantDelete$layout() {
        return WantDelete$LAYOUT;
    }

    private static final long WantDelete$OFFSET = 33;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantDelete
     * }
     */
    public static final long WantDelete$offset() {
        return WantDelete$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantDelete
     * }
     */
    public static boolean WantDelete(MemorySegment struct) {
        return struct.get(WantDelete$LAYOUT, WantDelete$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantDelete
     * }
     */
    public static void WantDelete(MemorySegment struct, boolean fieldValue) {
        struct.set(WantDelete$LAYOUT, WantDelete$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

