// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiListClipper {
 *     ImGuiContext *Ctx;
 *     int DisplayStart;
 *     int DisplayEnd;
 *     int ItemsCount;
 *     float ItemsHeight;
 *     float StartPosY;
 *     double StartSeekOffsetY;
 *     void *TempData;
 * }
 * }
 */
public class ImGuiListClipper {

    ImGuiListClipper() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_POINTER.withName("Ctx"),
        imgui.C_INT.withName("DisplayStart"),
        imgui.C_INT.withName("DisplayEnd"),
        imgui.C_INT.withName("ItemsCount"),
        imgui.C_FLOAT.withName("ItemsHeight"),
        imgui.C_FLOAT.withName("StartPosY"),
        MemoryLayout.paddingLayout(4),
        imgui.C_DOUBLE.withName("StartSeekOffsetY"),
        imgui.C_POINTER.withName("TempData")
    ).withName("ImGuiListClipper");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout Ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static final AddressLayout Ctx$layout() {
        return Ctx$LAYOUT;
    }

    private static final long Ctx$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static final long Ctx$offset() {
        return Ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static MemorySegment Ctx(MemorySegment struct) {
        return struct.get(Ctx$LAYOUT, Ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static void Ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Ctx$LAYOUT, Ctx$OFFSET, fieldValue);
    }

    private static final OfInt DisplayStart$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DisplayStart"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int DisplayStart
     * }
     */
    public static final OfInt DisplayStart$layout() {
        return DisplayStart$LAYOUT;
    }

    private static final long DisplayStart$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int DisplayStart
     * }
     */
    public static final long DisplayStart$offset() {
        return DisplayStart$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int DisplayStart
     * }
     */
    public static int DisplayStart(MemorySegment struct) {
        return struct.get(DisplayStart$LAYOUT, DisplayStart$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int DisplayStart
     * }
     */
    public static void DisplayStart(MemorySegment struct, int fieldValue) {
        struct.set(DisplayStart$LAYOUT, DisplayStart$OFFSET, fieldValue);
    }

    private static final OfInt DisplayEnd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DisplayEnd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int DisplayEnd
     * }
     */
    public static final OfInt DisplayEnd$layout() {
        return DisplayEnd$LAYOUT;
    }

    private static final long DisplayEnd$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int DisplayEnd
     * }
     */
    public static final long DisplayEnd$offset() {
        return DisplayEnd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int DisplayEnd
     * }
     */
    public static int DisplayEnd(MemorySegment struct) {
        return struct.get(DisplayEnd$LAYOUT, DisplayEnd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int DisplayEnd
     * }
     */
    public static void DisplayEnd(MemorySegment struct, int fieldValue) {
        struct.set(DisplayEnd$LAYOUT, DisplayEnd$OFFSET, fieldValue);
    }

    private static final OfInt ItemsCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ItemsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ItemsCount
     * }
     */
    public static final OfInt ItemsCount$layout() {
        return ItemsCount$LAYOUT;
    }

    private static final long ItemsCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ItemsCount
     * }
     */
    public static final long ItemsCount$offset() {
        return ItemsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ItemsCount
     * }
     */
    public static int ItemsCount(MemorySegment struct) {
        return struct.get(ItemsCount$LAYOUT, ItemsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ItemsCount
     * }
     */
    public static void ItemsCount(MemorySegment struct, int fieldValue) {
        struct.set(ItemsCount$LAYOUT, ItemsCount$OFFSET, fieldValue);
    }

    private static final OfFloat ItemsHeight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ItemsHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ItemsHeight
     * }
     */
    public static final OfFloat ItemsHeight$layout() {
        return ItemsHeight$LAYOUT;
    }

    private static final long ItemsHeight$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ItemsHeight
     * }
     */
    public static final long ItemsHeight$offset() {
        return ItemsHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ItemsHeight
     * }
     */
    public static float ItemsHeight(MemorySegment struct) {
        return struct.get(ItemsHeight$LAYOUT, ItemsHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ItemsHeight
     * }
     */
    public static void ItemsHeight(MemorySegment struct, float fieldValue) {
        struct.set(ItemsHeight$LAYOUT, ItemsHeight$OFFSET, fieldValue);
    }

    private static final OfFloat StartPosY$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("StartPosY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float StartPosY
     * }
     */
    public static final OfFloat StartPosY$layout() {
        return StartPosY$LAYOUT;
    }

    private static final long StartPosY$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float StartPosY
     * }
     */
    public static final long StartPosY$offset() {
        return StartPosY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float StartPosY
     * }
     */
    public static float StartPosY(MemorySegment struct) {
        return struct.get(StartPosY$LAYOUT, StartPosY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float StartPosY
     * }
     */
    public static void StartPosY(MemorySegment struct, float fieldValue) {
        struct.set(StartPosY$LAYOUT, StartPosY$OFFSET, fieldValue);
    }

    private static final OfDouble StartSeekOffsetY$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("StartSeekOffsetY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double StartSeekOffsetY
     * }
     */
    public static final OfDouble StartSeekOffsetY$layout() {
        return StartSeekOffsetY$LAYOUT;
    }

    private static final long StartSeekOffsetY$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double StartSeekOffsetY
     * }
     */
    public static final long StartSeekOffsetY$offset() {
        return StartSeekOffsetY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double StartSeekOffsetY
     * }
     */
    public static double StartSeekOffsetY(MemorySegment struct) {
        return struct.get(StartSeekOffsetY$LAYOUT, StartSeekOffsetY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double StartSeekOffsetY
     * }
     */
    public static void StartSeekOffsetY(MemorySegment struct, double fieldValue) {
        struct.set(StartSeekOffsetY$LAYOUT, StartSeekOffsetY$OFFSET, fieldValue);
    }

    private static final AddressLayout TempData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TempData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *TempData
     * }
     */
    public static final AddressLayout TempData$layout() {
        return TempData$LAYOUT;
    }

    private static final long TempData$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *TempData
     * }
     */
    public static final long TempData$offset() {
        return TempData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *TempData
     * }
     */
    public static MemorySegment TempData(MemorySegment struct) {
        return struct.get(TempData$LAYOUT, TempData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *TempData
     * }
     */
    public static void TempData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TempData$LAYOUT, TempData$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

