// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiStoragePair {
 *     ImGuiID key;
 *     union {
 *         int val_i;
 *         float val_f;
 *         void *val_p;
 *     };
 * }
 * }
 */
public class ImGuiStoragePair {

    ImGuiStoragePair() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("key"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            imgui.C_INT.withName("val_i"),
            imgui.C_FLOAT.withName("val_f"),
            imgui.C_POINTER.withName("val_p")
        ).withName("$anon$1200:5")
    ).withName("ImGuiStoragePair");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt key$LAYOUT = (OfInt)$LAYOUT.select(groupElement("key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID key
     * }
     */
    public static final OfInt key$layout() {
        return key$LAYOUT;
    }

    private static final long key$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID key
     * }
     */
    public static final long key$offset() {
        return key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID key
     * }
     */
    public static int key(MemorySegment struct) {
        return struct.get(key$LAYOUT, key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID key
     * }
     */
    public static void key(MemorySegment struct, int fieldValue) {
        struct.set(key$LAYOUT, key$OFFSET, fieldValue);
    }

    private static final OfInt val_i$LAYOUT = (OfInt)$LAYOUT.select(groupElement("$anon$1200:5"), groupElement("val_i"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int val_i
     * }
     */
    public static final OfInt val_i$layout() {
        return val_i$LAYOUT;
    }

    private static final long val_i$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int val_i
     * }
     */
    public static final long val_i$offset() {
        return val_i$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int val_i
     * }
     */
    public static int val_i(MemorySegment struct) {
        return struct.get(val_i$LAYOUT, val_i$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int val_i
     * }
     */
    public static void val_i(MemorySegment struct, int fieldValue) {
        struct.set(val_i$LAYOUT, val_i$OFFSET, fieldValue);
    }

    private static final OfFloat val_f$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("$anon$1200:5"), groupElement("val_f"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float val_f
     * }
     */
    public static final OfFloat val_f$layout() {
        return val_f$LAYOUT;
    }

    private static final long val_f$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float val_f
     * }
     */
    public static final long val_f$offset() {
        return val_f$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float val_f
     * }
     */
    public static float val_f(MemorySegment struct) {
        return struct.get(val_f$LAYOUT, val_f$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float val_f
     * }
     */
    public static void val_f(MemorySegment struct, float fieldValue) {
        struct.set(val_f$LAYOUT, val_f$OFFSET, fieldValue);
    }

    private static final AddressLayout val_p$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("$anon$1200:5"), groupElement("val_p"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *val_p
     * }
     */
    public static final AddressLayout val_p$layout() {
        return val_p$LAYOUT;
    }

    private static final long val_p$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *val_p
     * }
     */
    public static final long val_p$offset() {
        return val_p$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *val_p
     * }
     */
    public static MemorySegment val_p(MemorySegment struct) {
        return struct.get(val_p$LAYOUT, val_p$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *val_p
     * }
     */
    public static void val_p(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(val_p$LAYOUT, val_p$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

