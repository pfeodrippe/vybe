// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiMultiSelectTempData {
 *     ImGuiMultiSelectIO IO;
 *     ImGuiMultiSelectState *Storage;
 *     ImGuiID FocusScopeId;
 *     ImGuiMultiSelectFlags Flags;
 *     ImVec2 ScopeRectMin;
 *     ImVec2 BackupCursorMaxPos;
 *     ImGuiSelectionUserData LastSubmittedItem;
 *     ImGuiID BoxSelectId;
 *     ImGuiKeyChord KeyMods;
 *     ImS8 LoopRequestSetAll;
 *     bool IsEndIO;
 *     bool IsFocused;
 *     bool IsKeyboardSetRange;
 *     bool NavIdPassedBy;
 *     bool RangeSrcPassedBy;
 *     bool RangeDstPassedBy;
 * }
 * }
 */
public class ImGuiMultiSelectTempData {

    ImGuiMultiSelectTempData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImGuiMultiSelectIO.layout().withName("IO"),
        imgui.C_POINTER.withName("Storage"),
        imgui.C_INT.withName("FocusScopeId"),
        imgui.C_INT.withName("Flags"),
        ImVec2.layout().withName("ScopeRectMin"),
        ImVec2.layout().withName("BackupCursorMaxPos"),
        imgui.C_LONG_LONG.withName("LastSubmittedItem"),
        imgui.C_INT.withName("BoxSelectId"),
        imgui.C_INT.withName("KeyMods"),
        imgui.C_CHAR.withName("LoopRequestSetAll"),
        imgui.C_BOOL.withName("IsEndIO"),
        imgui.C_BOOL.withName("IsFocused"),
        imgui.C_BOOL.withName("IsKeyboardSetRange"),
        imgui.C_BOOL.withName("NavIdPassedBy"),
        imgui.C_BOOL.withName("RangeSrcPassedBy"),
        imgui.C_BOOL.withName("RangeDstPassedBy"),
        MemoryLayout.paddingLayout(1)
    ).withName("ImGuiMultiSelectTempData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout IO$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IO"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectIO IO
     * }
     */
    public static final GroupLayout IO$layout() {
        return IO$LAYOUT;
    }

    private static final long IO$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectIO IO
     * }
     */
    public static final long IO$offset() {
        return IO$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectIO IO
     * }
     */
    public static MemorySegment IO(MemorySegment struct) {
        return struct.asSlice(IO$OFFSET, IO$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectIO IO
     * }
     */
    public static void IO(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, IO$OFFSET, IO$LAYOUT.byteSize());
    }

    private static final AddressLayout Storage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Storage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectState *Storage
     * }
     */
    public static final AddressLayout Storage$layout() {
        return Storage$LAYOUT;
    }

    private static final long Storage$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectState *Storage
     * }
     */
    public static final long Storage$offset() {
        return Storage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectState *Storage
     * }
     */
    public static MemorySegment Storage(MemorySegment struct) {
        return struct.get(Storage$LAYOUT, Storage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectState *Storage
     * }
     */
    public static void Storage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Storage$LAYOUT, Storage$OFFSET, fieldValue);
    }

    private static final OfInt FocusScopeId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FocusScopeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID FocusScopeId
     * }
     */
    public static final OfInt FocusScopeId$layout() {
        return FocusScopeId$LAYOUT;
    }

    private static final long FocusScopeId$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID FocusScopeId
     * }
     */
    public static final long FocusScopeId$offset() {
        return FocusScopeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID FocusScopeId
     * }
     */
    public static int FocusScopeId(MemorySegment struct) {
        return struct.get(FocusScopeId$LAYOUT, FocusScopeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID FocusScopeId
     * }
     */
    public static void FocusScopeId(MemorySegment struct, int fieldValue) {
        struct.set(FocusScopeId$LAYOUT, FocusScopeId$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectFlags Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectFlags Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectFlags Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectFlags Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final GroupLayout ScopeRectMin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ScopeRectMin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ScopeRectMin
     * }
     */
    public static final GroupLayout ScopeRectMin$layout() {
        return ScopeRectMin$LAYOUT;
    }

    private static final long ScopeRectMin$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ScopeRectMin
     * }
     */
    public static final long ScopeRectMin$offset() {
        return ScopeRectMin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ScopeRectMin
     * }
     */
    public static MemorySegment ScopeRectMin(MemorySegment struct) {
        return struct.asSlice(ScopeRectMin$OFFSET, ScopeRectMin$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ScopeRectMin
     * }
     */
    public static void ScopeRectMin(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ScopeRectMin$OFFSET, ScopeRectMin$LAYOUT.byteSize());
    }

    private static final GroupLayout BackupCursorMaxPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BackupCursorMaxPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorMaxPos
     * }
     */
    public static final GroupLayout BackupCursorMaxPos$layout() {
        return BackupCursorMaxPos$LAYOUT;
    }

    private static final long BackupCursorMaxPos$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorMaxPos
     * }
     */
    public static final long BackupCursorMaxPos$offset() {
        return BackupCursorMaxPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorMaxPos
     * }
     */
    public static MemorySegment BackupCursorMaxPos(MemorySegment struct) {
        return struct.asSlice(BackupCursorMaxPos$OFFSET, BackupCursorMaxPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 BackupCursorMaxPos
     * }
     */
    public static void BackupCursorMaxPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupCursorMaxPos$OFFSET, BackupCursorMaxPos$LAYOUT.byteSize());
    }

    private static final OfLong LastSubmittedItem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("LastSubmittedItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData LastSubmittedItem
     * }
     */
    public static final OfLong LastSubmittedItem$layout() {
        return LastSubmittedItem$LAYOUT;
    }

    private static final long LastSubmittedItem$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData LastSubmittedItem
     * }
     */
    public static final long LastSubmittedItem$offset() {
        return LastSubmittedItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData LastSubmittedItem
     * }
     */
    public static long LastSubmittedItem(MemorySegment struct) {
        return struct.get(LastSubmittedItem$LAYOUT, LastSubmittedItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData LastSubmittedItem
     * }
     */
    public static void LastSubmittedItem(MemorySegment struct, long fieldValue) {
        struct.set(LastSubmittedItem$LAYOUT, LastSubmittedItem$OFFSET, fieldValue);
    }

    private static final OfInt BoxSelectId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BoxSelectId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID BoxSelectId
     * }
     */
    public static final OfInt BoxSelectId$layout() {
        return BoxSelectId$LAYOUT;
    }

    private static final long BoxSelectId$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID BoxSelectId
     * }
     */
    public static final long BoxSelectId$offset() {
        return BoxSelectId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID BoxSelectId
     * }
     */
    public static int BoxSelectId(MemorySegment struct) {
        return struct.get(BoxSelectId$LAYOUT, BoxSelectId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID BoxSelectId
     * }
     */
    public static void BoxSelectId(MemorySegment struct, int fieldValue) {
        struct.set(BoxSelectId$LAYOUT, BoxSelectId$OFFSET, fieldValue);
    }

    private static final OfInt KeyMods$LAYOUT = (OfInt)$LAYOUT.select(groupElement("KeyMods"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyChord KeyMods
     * }
     */
    public static final OfInt KeyMods$layout() {
        return KeyMods$LAYOUT;
    }

    private static final long KeyMods$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyChord KeyMods
     * }
     */
    public static final long KeyMods$offset() {
        return KeyMods$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord KeyMods
     * }
     */
    public static int KeyMods(MemorySegment struct) {
        return struct.get(KeyMods$LAYOUT, KeyMods$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord KeyMods
     * }
     */
    public static void KeyMods(MemorySegment struct, int fieldValue) {
        struct.set(KeyMods$LAYOUT, KeyMods$OFFSET, fieldValue);
    }

    private static final OfByte LoopRequestSetAll$LAYOUT = (OfByte)$LAYOUT.select(groupElement("LoopRequestSetAll"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 LoopRequestSetAll
     * }
     */
    public static final OfByte LoopRequestSetAll$layout() {
        return LoopRequestSetAll$LAYOUT;
    }

    private static final long LoopRequestSetAll$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 LoopRequestSetAll
     * }
     */
    public static final long LoopRequestSetAll$offset() {
        return LoopRequestSetAll$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 LoopRequestSetAll
     * }
     */
    public static byte LoopRequestSetAll(MemorySegment struct) {
        return struct.get(LoopRequestSetAll$LAYOUT, LoopRequestSetAll$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 LoopRequestSetAll
     * }
     */
    public static void LoopRequestSetAll(MemorySegment struct, byte fieldValue) {
        struct.set(LoopRequestSetAll$LAYOUT, LoopRequestSetAll$OFFSET, fieldValue);
    }

    private static final OfBoolean IsEndIO$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsEndIO"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsEndIO
     * }
     */
    public static final OfBoolean IsEndIO$layout() {
        return IsEndIO$LAYOUT;
    }

    private static final long IsEndIO$OFFSET = 89;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsEndIO
     * }
     */
    public static final long IsEndIO$offset() {
        return IsEndIO$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsEndIO
     * }
     */
    public static boolean IsEndIO(MemorySegment struct) {
        return struct.get(IsEndIO$LAYOUT, IsEndIO$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsEndIO
     * }
     */
    public static void IsEndIO(MemorySegment struct, boolean fieldValue) {
        struct.set(IsEndIO$LAYOUT, IsEndIO$OFFSET, fieldValue);
    }

    private static final OfBoolean IsFocused$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsFocused"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsFocused
     * }
     */
    public static final OfBoolean IsFocused$layout() {
        return IsFocused$LAYOUT;
    }

    private static final long IsFocused$OFFSET = 90;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsFocused
     * }
     */
    public static final long IsFocused$offset() {
        return IsFocused$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsFocused
     * }
     */
    public static boolean IsFocused(MemorySegment struct) {
        return struct.get(IsFocused$LAYOUT, IsFocused$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsFocused
     * }
     */
    public static void IsFocused(MemorySegment struct, boolean fieldValue) {
        struct.set(IsFocused$LAYOUT, IsFocused$OFFSET, fieldValue);
    }

    private static final OfBoolean IsKeyboardSetRange$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsKeyboardSetRange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsKeyboardSetRange
     * }
     */
    public static final OfBoolean IsKeyboardSetRange$layout() {
        return IsKeyboardSetRange$LAYOUT;
    }

    private static final long IsKeyboardSetRange$OFFSET = 91;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsKeyboardSetRange
     * }
     */
    public static final long IsKeyboardSetRange$offset() {
        return IsKeyboardSetRange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsKeyboardSetRange
     * }
     */
    public static boolean IsKeyboardSetRange(MemorySegment struct) {
        return struct.get(IsKeyboardSetRange$LAYOUT, IsKeyboardSetRange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsKeyboardSetRange
     * }
     */
    public static void IsKeyboardSetRange(MemorySegment struct, boolean fieldValue) {
        struct.set(IsKeyboardSetRange$LAYOUT, IsKeyboardSetRange$OFFSET, fieldValue);
    }

    private static final OfBoolean NavIdPassedBy$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavIdPassedBy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavIdPassedBy
     * }
     */
    public static final OfBoolean NavIdPassedBy$layout() {
        return NavIdPassedBy$LAYOUT;
    }

    private static final long NavIdPassedBy$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavIdPassedBy
     * }
     */
    public static final long NavIdPassedBy$offset() {
        return NavIdPassedBy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavIdPassedBy
     * }
     */
    public static boolean NavIdPassedBy(MemorySegment struct) {
        return struct.get(NavIdPassedBy$LAYOUT, NavIdPassedBy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavIdPassedBy
     * }
     */
    public static void NavIdPassedBy(MemorySegment struct, boolean fieldValue) {
        struct.set(NavIdPassedBy$LAYOUT, NavIdPassedBy$OFFSET, fieldValue);
    }

    private static final OfBoolean RangeSrcPassedBy$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("RangeSrcPassedBy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool RangeSrcPassedBy
     * }
     */
    public static final OfBoolean RangeSrcPassedBy$layout() {
        return RangeSrcPassedBy$LAYOUT;
    }

    private static final long RangeSrcPassedBy$OFFSET = 93;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool RangeSrcPassedBy
     * }
     */
    public static final long RangeSrcPassedBy$offset() {
        return RangeSrcPassedBy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool RangeSrcPassedBy
     * }
     */
    public static boolean RangeSrcPassedBy(MemorySegment struct) {
        return struct.get(RangeSrcPassedBy$LAYOUT, RangeSrcPassedBy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool RangeSrcPassedBy
     * }
     */
    public static void RangeSrcPassedBy(MemorySegment struct, boolean fieldValue) {
        struct.set(RangeSrcPassedBy$LAYOUT, RangeSrcPassedBy$OFFSET, fieldValue);
    }

    private static final OfBoolean RangeDstPassedBy$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("RangeDstPassedBy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool RangeDstPassedBy
     * }
     */
    public static final OfBoolean RangeDstPassedBy$layout() {
        return RangeDstPassedBy$LAYOUT;
    }

    private static final long RangeDstPassedBy$OFFSET = 94;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool RangeDstPassedBy
     * }
     */
    public static final long RangeDstPassedBy$offset() {
        return RangeDstPassedBy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool RangeDstPassedBy
     * }
     */
    public static boolean RangeDstPassedBy(MemorySegment struct) {
        return struct.get(RangeDstPassedBy$LAYOUT, RangeDstPassedBy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool RangeDstPassedBy
     * }
     */
    public static void RangeDstPassedBy(MemorySegment struct, boolean fieldValue) {
        struct.set(RangeDstPassedBy$LAYOUT, RangeDstPassedBy$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

