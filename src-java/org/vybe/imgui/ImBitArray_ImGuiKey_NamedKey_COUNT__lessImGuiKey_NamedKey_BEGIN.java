// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN {
 *     ImU32 Storage[5];
 * }
 * }
 */
public class ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN {

    ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(5, imgui.C_INT).withName("Storage")
    ).withName("ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout Storage$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Storage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 Storage[5]
     * }
     */
    public static final SequenceLayout Storage$layout() {
        return Storage$LAYOUT;
    }

    private static final long Storage$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 Storage[5]
     * }
     */
    public static final long Storage$offset() {
        return Storage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 Storage[5]
     * }
     */
    public static MemorySegment Storage(MemorySegment struct) {
        return struct.asSlice(Storage$OFFSET, Storage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 Storage[5]
     * }
     */
    public static void Storage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Storage$OFFSET, Storage$LAYOUT.byteSize());
    }

    private static long[] Storage$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImU32 Storage[5]
     * }
     */
    public static long[] Storage$dimensions() {
        return Storage$DIMS;
    }
    private static final VarHandle Storage$ELEM_HANDLE = Storage$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImU32 Storage[5]
     * }
     */
    public static int Storage(MemorySegment struct, long index0) {
        return (int)Storage$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImU32 Storage[5]
     * }
     */
    public static void Storage(MemorySegment struct, long index0, int fieldValue) {
        Storage$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

