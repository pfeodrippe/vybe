// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiWindowTempData {
 *     ImVec2 CursorPos;
 *     ImVec2 CursorPosPrevLine;
 *     ImVec2 CursorStartPos;
 *     ImVec2 CursorMaxPos;
 *     ImVec2 IdealMaxPos;
 *     ImVec2 CurrLineSize;
 *     ImVec2 PrevLineSize;
 *     float CurrLineTextBaseOffset;
 *     float PrevLineTextBaseOffset;
 *     bool IsSameLine;
 *     bool IsSetPos;
 *     ImVec1 Indent;
 *     ImVec1 ColumnsOffset;
 *     ImVec1 GroupOffset;
 *     ImVec2 CursorStartPosLossyness;
 *     ImGuiNavLayer NavLayerCurrent;
 *     short NavLayersActiveMask;
 *     short NavLayersActiveMaskNext;
 *     bool NavIsScrollPushableX;
 *     bool NavHideHighlightOneFrame;
 *     bool NavWindowHasScrollY;
 *     bool MenuBarAppending;
 *     ImVec2 MenuBarOffset;
 *     ImGuiMenuColumns MenuColumns;
 *     int TreeDepth;
 *     ImU32 TreeHasStackDataDepthMask;
 *     ImVector_ImGuiWindowPtr ChildWindows;
 *     ImGuiStorage *StateStorage;
 *     ImGuiOldColumns *CurrentColumns;
 *     int CurrentTableIdx;
 *     ImGuiLayoutType LayoutType;
 *     ImGuiLayoutType ParentLayoutType;
 *     ImU32 ModalDimBgColor;
 *     float ItemWidth;
 *     float TextWrapPos;
 *     ImVector_float ItemWidthStack;
 *     ImVector_float TextWrapPosStack;
 * }
 * }
 */
public class ImGuiWindowTempData {

    ImGuiWindowTempData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImVec2.layout().withName("CursorPos"),
        ImVec2.layout().withName("CursorPosPrevLine"),
        ImVec2.layout().withName("CursorStartPos"),
        ImVec2.layout().withName("CursorMaxPos"),
        ImVec2.layout().withName("IdealMaxPos"),
        ImVec2.layout().withName("CurrLineSize"),
        ImVec2.layout().withName("PrevLineSize"),
        imgui.C_FLOAT.withName("CurrLineTextBaseOffset"),
        imgui.C_FLOAT.withName("PrevLineTextBaseOffset"),
        imgui.C_BOOL.withName("IsSameLine"),
        imgui.C_BOOL.withName("IsSetPos"),
        MemoryLayout.paddingLayout(2),
        ImVec1.layout().withName("Indent"),
        ImVec1.layout().withName("ColumnsOffset"),
        ImVec1.layout().withName("GroupOffset"),
        ImVec2.layout().withName("CursorStartPosLossyness"),
        imgui.C_INT.withName("NavLayerCurrent"),
        imgui.C_SHORT.withName("NavLayersActiveMask"),
        imgui.C_SHORT.withName("NavLayersActiveMaskNext"),
        imgui.C_BOOL.withName("NavIsScrollPushableX"),
        imgui.C_BOOL.withName("NavHideHighlightOneFrame"),
        imgui.C_BOOL.withName("NavWindowHasScrollY"),
        imgui.C_BOOL.withName("MenuBarAppending"),
        ImVec2.layout().withName("MenuBarOffset"),
        ImGuiMenuColumns.layout().withName("MenuColumns"),
        imgui.C_INT.withName("TreeDepth"),
        imgui.C_INT.withName("TreeHasStackDataDepthMask"),
        ImVector_ImGuiWindowPtr.layout().withName("ChildWindows"),
        imgui.C_POINTER.withName("StateStorage"),
        imgui.C_POINTER.withName("CurrentColumns"),
        imgui.C_INT.withName("CurrentTableIdx"),
        imgui.C_INT.withName("LayoutType"),
        imgui.C_INT.withName("ParentLayoutType"),
        imgui.C_INT.withName("ModalDimBgColor"),
        imgui.C_FLOAT.withName("ItemWidth"),
        imgui.C_FLOAT.withName("TextWrapPos"),
        ImVector_float.layout().withName("ItemWidthStack"),
        ImVector_float.layout().withName("TextWrapPosStack")
    ).withName("ImGuiWindowTempData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout CursorPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CursorPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 CursorPos
     * }
     */
    public static final GroupLayout CursorPos$layout() {
        return CursorPos$LAYOUT;
    }

    private static final long CursorPos$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 CursorPos
     * }
     */
    public static final long CursorPos$offset() {
        return CursorPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 CursorPos
     * }
     */
    public static MemorySegment CursorPos(MemorySegment struct) {
        return struct.asSlice(CursorPos$OFFSET, CursorPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 CursorPos
     * }
     */
    public static void CursorPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CursorPos$OFFSET, CursorPos$LAYOUT.byteSize());
    }

    private static final GroupLayout CursorPosPrevLine$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CursorPosPrevLine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 CursorPosPrevLine
     * }
     */
    public static final GroupLayout CursorPosPrevLine$layout() {
        return CursorPosPrevLine$LAYOUT;
    }

    private static final long CursorPosPrevLine$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 CursorPosPrevLine
     * }
     */
    public static final long CursorPosPrevLine$offset() {
        return CursorPosPrevLine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 CursorPosPrevLine
     * }
     */
    public static MemorySegment CursorPosPrevLine(MemorySegment struct) {
        return struct.asSlice(CursorPosPrevLine$OFFSET, CursorPosPrevLine$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 CursorPosPrevLine
     * }
     */
    public static void CursorPosPrevLine(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CursorPosPrevLine$OFFSET, CursorPosPrevLine$LAYOUT.byteSize());
    }

    private static final GroupLayout CursorStartPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CursorStartPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 CursorStartPos
     * }
     */
    public static final GroupLayout CursorStartPos$layout() {
        return CursorStartPos$LAYOUT;
    }

    private static final long CursorStartPos$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 CursorStartPos
     * }
     */
    public static final long CursorStartPos$offset() {
        return CursorStartPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 CursorStartPos
     * }
     */
    public static MemorySegment CursorStartPos(MemorySegment struct) {
        return struct.asSlice(CursorStartPos$OFFSET, CursorStartPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 CursorStartPos
     * }
     */
    public static void CursorStartPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CursorStartPos$OFFSET, CursorStartPos$LAYOUT.byteSize());
    }

    private static final GroupLayout CursorMaxPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CursorMaxPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 CursorMaxPos
     * }
     */
    public static final GroupLayout CursorMaxPos$layout() {
        return CursorMaxPos$LAYOUT;
    }

    private static final long CursorMaxPos$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 CursorMaxPos
     * }
     */
    public static final long CursorMaxPos$offset() {
        return CursorMaxPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 CursorMaxPos
     * }
     */
    public static MemorySegment CursorMaxPos(MemorySegment struct) {
        return struct.asSlice(CursorMaxPos$OFFSET, CursorMaxPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 CursorMaxPos
     * }
     */
    public static void CursorMaxPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CursorMaxPos$OFFSET, CursorMaxPos$LAYOUT.byteSize());
    }

    private static final GroupLayout IdealMaxPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IdealMaxPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 IdealMaxPos
     * }
     */
    public static final GroupLayout IdealMaxPos$layout() {
        return IdealMaxPos$LAYOUT;
    }

    private static final long IdealMaxPos$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 IdealMaxPos
     * }
     */
    public static final long IdealMaxPos$offset() {
        return IdealMaxPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 IdealMaxPos
     * }
     */
    public static MemorySegment IdealMaxPos(MemorySegment struct) {
        return struct.asSlice(IdealMaxPos$OFFSET, IdealMaxPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 IdealMaxPos
     * }
     */
    public static void IdealMaxPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, IdealMaxPos$OFFSET, IdealMaxPos$LAYOUT.byteSize());
    }

    private static final GroupLayout CurrLineSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CurrLineSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 CurrLineSize
     * }
     */
    public static final GroupLayout CurrLineSize$layout() {
        return CurrLineSize$LAYOUT;
    }

    private static final long CurrLineSize$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 CurrLineSize
     * }
     */
    public static final long CurrLineSize$offset() {
        return CurrLineSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 CurrLineSize
     * }
     */
    public static MemorySegment CurrLineSize(MemorySegment struct) {
        return struct.asSlice(CurrLineSize$OFFSET, CurrLineSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 CurrLineSize
     * }
     */
    public static void CurrLineSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CurrLineSize$OFFSET, CurrLineSize$LAYOUT.byteSize());
    }

    private static final GroupLayout PrevLineSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PrevLineSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 PrevLineSize
     * }
     */
    public static final GroupLayout PrevLineSize$layout() {
        return PrevLineSize$LAYOUT;
    }

    private static final long PrevLineSize$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 PrevLineSize
     * }
     */
    public static final long PrevLineSize$offset() {
        return PrevLineSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 PrevLineSize
     * }
     */
    public static MemorySegment PrevLineSize(MemorySegment struct) {
        return struct.asSlice(PrevLineSize$OFFSET, PrevLineSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 PrevLineSize
     * }
     */
    public static void PrevLineSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PrevLineSize$OFFSET, PrevLineSize$LAYOUT.byteSize());
    }

    private static final OfFloat CurrLineTextBaseOffset$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("CurrLineTextBaseOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float CurrLineTextBaseOffset
     * }
     */
    public static final OfFloat CurrLineTextBaseOffset$layout() {
        return CurrLineTextBaseOffset$LAYOUT;
    }

    private static final long CurrLineTextBaseOffset$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float CurrLineTextBaseOffset
     * }
     */
    public static final long CurrLineTextBaseOffset$offset() {
        return CurrLineTextBaseOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float CurrLineTextBaseOffset
     * }
     */
    public static float CurrLineTextBaseOffset(MemorySegment struct) {
        return struct.get(CurrLineTextBaseOffset$LAYOUT, CurrLineTextBaseOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float CurrLineTextBaseOffset
     * }
     */
    public static void CurrLineTextBaseOffset(MemorySegment struct, float fieldValue) {
        struct.set(CurrLineTextBaseOffset$LAYOUT, CurrLineTextBaseOffset$OFFSET, fieldValue);
    }

    private static final OfFloat PrevLineTextBaseOffset$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("PrevLineTextBaseOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float PrevLineTextBaseOffset
     * }
     */
    public static final OfFloat PrevLineTextBaseOffset$layout() {
        return PrevLineTextBaseOffset$LAYOUT;
    }

    private static final long PrevLineTextBaseOffset$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float PrevLineTextBaseOffset
     * }
     */
    public static final long PrevLineTextBaseOffset$offset() {
        return PrevLineTextBaseOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float PrevLineTextBaseOffset
     * }
     */
    public static float PrevLineTextBaseOffset(MemorySegment struct) {
        return struct.get(PrevLineTextBaseOffset$LAYOUT, PrevLineTextBaseOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float PrevLineTextBaseOffset
     * }
     */
    public static void PrevLineTextBaseOffset(MemorySegment struct, float fieldValue) {
        struct.set(PrevLineTextBaseOffset$LAYOUT, PrevLineTextBaseOffset$OFFSET, fieldValue);
    }

    private static final OfBoolean IsSameLine$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsSameLine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsSameLine
     * }
     */
    public static final OfBoolean IsSameLine$layout() {
        return IsSameLine$LAYOUT;
    }

    private static final long IsSameLine$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsSameLine
     * }
     */
    public static final long IsSameLine$offset() {
        return IsSameLine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsSameLine
     * }
     */
    public static boolean IsSameLine(MemorySegment struct) {
        return struct.get(IsSameLine$LAYOUT, IsSameLine$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsSameLine
     * }
     */
    public static void IsSameLine(MemorySegment struct, boolean fieldValue) {
        struct.set(IsSameLine$LAYOUT, IsSameLine$OFFSET, fieldValue);
    }

    private static final OfBoolean IsSetPos$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsSetPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsSetPos
     * }
     */
    public static final OfBoolean IsSetPos$layout() {
        return IsSetPos$LAYOUT;
    }

    private static final long IsSetPos$OFFSET = 65;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsSetPos
     * }
     */
    public static final long IsSetPos$offset() {
        return IsSetPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsSetPos
     * }
     */
    public static boolean IsSetPos(MemorySegment struct) {
        return struct.get(IsSetPos$LAYOUT, IsSetPos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsSetPos
     * }
     */
    public static void IsSetPos(MemorySegment struct, boolean fieldValue) {
        struct.set(IsSetPos$LAYOUT, IsSetPos$OFFSET, fieldValue);
    }

    private static final GroupLayout Indent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Indent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec1 Indent
     * }
     */
    public static final GroupLayout Indent$layout() {
        return Indent$LAYOUT;
    }

    private static final long Indent$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec1 Indent
     * }
     */
    public static final long Indent$offset() {
        return Indent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec1 Indent
     * }
     */
    public static MemorySegment Indent(MemorySegment struct) {
        return struct.asSlice(Indent$OFFSET, Indent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec1 Indent
     * }
     */
    public static void Indent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Indent$OFFSET, Indent$LAYOUT.byteSize());
    }

    private static final GroupLayout ColumnsOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ColumnsOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec1 ColumnsOffset
     * }
     */
    public static final GroupLayout ColumnsOffset$layout() {
        return ColumnsOffset$LAYOUT;
    }

    private static final long ColumnsOffset$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec1 ColumnsOffset
     * }
     */
    public static final long ColumnsOffset$offset() {
        return ColumnsOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec1 ColumnsOffset
     * }
     */
    public static MemorySegment ColumnsOffset(MemorySegment struct) {
        return struct.asSlice(ColumnsOffset$OFFSET, ColumnsOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec1 ColumnsOffset
     * }
     */
    public static void ColumnsOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ColumnsOffset$OFFSET, ColumnsOffset$LAYOUT.byteSize());
    }

    private static final GroupLayout GroupOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("GroupOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec1 GroupOffset
     * }
     */
    public static final GroupLayout GroupOffset$layout() {
        return GroupOffset$LAYOUT;
    }

    private static final long GroupOffset$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec1 GroupOffset
     * }
     */
    public static final long GroupOffset$offset() {
        return GroupOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec1 GroupOffset
     * }
     */
    public static MemorySegment GroupOffset(MemorySegment struct) {
        return struct.asSlice(GroupOffset$OFFSET, GroupOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec1 GroupOffset
     * }
     */
    public static void GroupOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, GroupOffset$OFFSET, GroupOffset$LAYOUT.byteSize());
    }

    private static final GroupLayout CursorStartPosLossyness$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CursorStartPosLossyness"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 CursorStartPosLossyness
     * }
     */
    public static final GroupLayout CursorStartPosLossyness$layout() {
        return CursorStartPosLossyness$LAYOUT;
    }

    private static final long CursorStartPosLossyness$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 CursorStartPosLossyness
     * }
     */
    public static final long CursorStartPosLossyness$offset() {
        return CursorStartPosLossyness$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 CursorStartPosLossyness
     * }
     */
    public static MemorySegment CursorStartPosLossyness(MemorySegment struct) {
        return struct.asSlice(CursorStartPosLossyness$OFFSET, CursorStartPosLossyness$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 CursorStartPosLossyness
     * }
     */
    public static void CursorStartPosLossyness(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CursorStartPosLossyness$OFFSET, CursorStartPosLossyness$LAYOUT.byteSize());
    }

    private static final OfInt NavLayerCurrent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavLayerCurrent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNavLayer NavLayerCurrent
     * }
     */
    public static final OfInt NavLayerCurrent$layout() {
        return NavLayerCurrent$LAYOUT;
    }

    private static final long NavLayerCurrent$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNavLayer NavLayerCurrent
     * }
     */
    public static final long NavLayerCurrent$offset() {
        return NavLayerCurrent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNavLayer NavLayerCurrent
     * }
     */
    public static int NavLayerCurrent(MemorySegment struct) {
        return struct.get(NavLayerCurrent$LAYOUT, NavLayerCurrent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNavLayer NavLayerCurrent
     * }
     */
    public static void NavLayerCurrent(MemorySegment struct, int fieldValue) {
        struct.set(NavLayerCurrent$LAYOUT, NavLayerCurrent$OFFSET, fieldValue);
    }

    private static final OfShort NavLayersActiveMask$LAYOUT = (OfShort)$LAYOUT.select(groupElement("NavLayersActiveMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short NavLayersActiveMask
     * }
     */
    public static final OfShort NavLayersActiveMask$layout() {
        return NavLayersActiveMask$LAYOUT;
    }

    private static final long NavLayersActiveMask$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short NavLayersActiveMask
     * }
     */
    public static final long NavLayersActiveMask$offset() {
        return NavLayersActiveMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short NavLayersActiveMask
     * }
     */
    public static short NavLayersActiveMask(MemorySegment struct) {
        return struct.get(NavLayersActiveMask$LAYOUT, NavLayersActiveMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short NavLayersActiveMask
     * }
     */
    public static void NavLayersActiveMask(MemorySegment struct, short fieldValue) {
        struct.set(NavLayersActiveMask$LAYOUT, NavLayersActiveMask$OFFSET, fieldValue);
    }

    private static final OfShort NavLayersActiveMaskNext$LAYOUT = (OfShort)$LAYOUT.select(groupElement("NavLayersActiveMaskNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short NavLayersActiveMaskNext
     * }
     */
    public static final OfShort NavLayersActiveMaskNext$layout() {
        return NavLayersActiveMaskNext$LAYOUT;
    }

    private static final long NavLayersActiveMaskNext$OFFSET = 94;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short NavLayersActiveMaskNext
     * }
     */
    public static final long NavLayersActiveMaskNext$offset() {
        return NavLayersActiveMaskNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short NavLayersActiveMaskNext
     * }
     */
    public static short NavLayersActiveMaskNext(MemorySegment struct) {
        return struct.get(NavLayersActiveMaskNext$LAYOUT, NavLayersActiveMaskNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short NavLayersActiveMaskNext
     * }
     */
    public static void NavLayersActiveMaskNext(MemorySegment struct, short fieldValue) {
        struct.set(NavLayersActiveMaskNext$LAYOUT, NavLayersActiveMaskNext$OFFSET, fieldValue);
    }

    private static final OfBoolean NavIsScrollPushableX$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavIsScrollPushableX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavIsScrollPushableX
     * }
     */
    public static final OfBoolean NavIsScrollPushableX$layout() {
        return NavIsScrollPushableX$LAYOUT;
    }

    private static final long NavIsScrollPushableX$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavIsScrollPushableX
     * }
     */
    public static final long NavIsScrollPushableX$offset() {
        return NavIsScrollPushableX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavIsScrollPushableX
     * }
     */
    public static boolean NavIsScrollPushableX(MemorySegment struct) {
        return struct.get(NavIsScrollPushableX$LAYOUT, NavIsScrollPushableX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavIsScrollPushableX
     * }
     */
    public static void NavIsScrollPushableX(MemorySegment struct, boolean fieldValue) {
        struct.set(NavIsScrollPushableX$LAYOUT, NavIsScrollPushableX$OFFSET, fieldValue);
    }

    private static final OfBoolean NavHideHighlightOneFrame$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavHideHighlightOneFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavHideHighlightOneFrame
     * }
     */
    public static final OfBoolean NavHideHighlightOneFrame$layout() {
        return NavHideHighlightOneFrame$LAYOUT;
    }

    private static final long NavHideHighlightOneFrame$OFFSET = 97;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavHideHighlightOneFrame
     * }
     */
    public static final long NavHideHighlightOneFrame$offset() {
        return NavHideHighlightOneFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavHideHighlightOneFrame
     * }
     */
    public static boolean NavHideHighlightOneFrame(MemorySegment struct) {
        return struct.get(NavHideHighlightOneFrame$LAYOUT, NavHideHighlightOneFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavHideHighlightOneFrame
     * }
     */
    public static void NavHideHighlightOneFrame(MemorySegment struct, boolean fieldValue) {
        struct.set(NavHideHighlightOneFrame$LAYOUT, NavHideHighlightOneFrame$OFFSET, fieldValue);
    }

    private static final OfBoolean NavWindowHasScrollY$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavWindowHasScrollY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavWindowHasScrollY
     * }
     */
    public static final OfBoolean NavWindowHasScrollY$layout() {
        return NavWindowHasScrollY$LAYOUT;
    }

    private static final long NavWindowHasScrollY$OFFSET = 98;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavWindowHasScrollY
     * }
     */
    public static final long NavWindowHasScrollY$offset() {
        return NavWindowHasScrollY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavWindowHasScrollY
     * }
     */
    public static boolean NavWindowHasScrollY(MemorySegment struct) {
        return struct.get(NavWindowHasScrollY$LAYOUT, NavWindowHasScrollY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavWindowHasScrollY
     * }
     */
    public static void NavWindowHasScrollY(MemorySegment struct, boolean fieldValue) {
        struct.set(NavWindowHasScrollY$LAYOUT, NavWindowHasScrollY$OFFSET, fieldValue);
    }

    private static final OfBoolean MenuBarAppending$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("MenuBarAppending"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MenuBarAppending
     * }
     */
    public static final OfBoolean MenuBarAppending$layout() {
        return MenuBarAppending$LAYOUT;
    }

    private static final long MenuBarAppending$OFFSET = 99;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MenuBarAppending
     * }
     */
    public static final long MenuBarAppending$offset() {
        return MenuBarAppending$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MenuBarAppending
     * }
     */
    public static boolean MenuBarAppending(MemorySegment struct) {
        return struct.get(MenuBarAppending$LAYOUT, MenuBarAppending$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MenuBarAppending
     * }
     */
    public static void MenuBarAppending(MemorySegment struct, boolean fieldValue) {
        struct.set(MenuBarAppending$LAYOUT, MenuBarAppending$OFFSET, fieldValue);
    }

    private static final GroupLayout MenuBarOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MenuBarOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 MenuBarOffset
     * }
     */
    public static final GroupLayout MenuBarOffset$layout() {
        return MenuBarOffset$LAYOUT;
    }

    private static final long MenuBarOffset$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 MenuBarOffset
     * }
     */
    public static final long MenuBarOffset$offset() {
        return MenuBarOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 MenuBarOffset
     * }
     */
    public static MemorySegment MenuBarOffset(MemorySegment struct) {
        return struct.asSlice(MenuBarOffset$OFFSET, MenuBarOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 MenuBarOffset
     * }
     */
    public static void MenuBarOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MenuBarOffset$OFFSET, MenuBarOffset$LAYOUT.byteSize());
    }

    private static final GroupLayout MenuColumns$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MenuColumns"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMenuColumns MenuColumns
     * }
     */
    public static final GroupLayout MenuColumns$layout() {
        return MenuColumns$LAYOUT;
    }

    private static final long MenuColumns$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMenuColumns MenuColumns
     * }
     */
    public static final long MenuColumns$offset() {
        return MenuColumns$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMenuColumns MenuColumns
     * }
     */
    public static MemorySegment MenuColumns(MemorySegment struct) {
        return struct.asSlice(MenuColumns$OFFSET, MenuColumns$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMenuColumns MenuColumns
     * }
     */
    public static void MenuColumns(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MenuColumns$OFFSET, MenuColumns$LAYOUT.byteSize());
    }

    private static final OfInt TreeDepth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TreeDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int TreeDepth
     * }
     */
    public static final OfInt TreeDepth$layout() {
        return TreeDepth$LAYOUT;
    }

    private static final long TreeDepth$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int TreeDepth
     * }
     */
    public static final long TreeDepth$offset() {
        return TreeDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int TreeDepth
     * }
     */
    public static int TreeDepth(MemorySegment struct) {
        return struct.get(TreeDepth$LAYOUT, TreeDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int TreeDepth
     * }
     */
    public static void TreeDepth(MemorySegment struct, int fieldValue) {
        struct.set(TreeDepth$LAYOUT, TreeDepth$OFFSET, fieldValue);
    }

    private static final OfInt TreeHasStackDataDepthMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TreeHasStackDataDepthMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 TreeHasStackDataDepthMask
     * }
     */
    public static final OfInt TreeHasStackDataDepthMask$layout() {
        return TreeHasStackDataDepthMask$LAYOUT;
    }

    private static final long TreeHasStackDataDepthMask$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 TreeHasStackDataDepthMask
     * }
     */
    public static final long TreeHasStackDataDepthMask$offset() {
        return TreeHasStackDataDepthMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 TreeHasStackDataDepthMask
     * }
     */
    public static int TreeHasStackDataDepthMask(MemorySegment struct) {
        return struct.get(TreeHasStackDataDepthMask$LAYOUT, TreeHasStackDataDepthMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 TreeHasStackDataDepthMask
     * }
     */
    public static void TreeHasStackDataDepthMask(MemorySegment struct, int fieldValue) {
        struct.set(TreeHasStackDataDepthMask$LAYOUT, TreeHasStackDataDepthMask$OFFSET, fieldValue);
    }

    private static final GroupLayout ChildWindows$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ChildWindows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr ChildWindows
     * }
     */
    public static final GroupLayout ChildWindows$layout() {
        return ChildWindows$LAYOUT;
    }

    private static final long ChildWindows$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr ChildWindows
     * }
     */
    public static final long ChildWindows$offset() {
        return ChildWindows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr ChildWindows
     * }
     */
    public static MemorySegment ChildWindows(MemorySegment struct) {
        return struct.asSlice(ChildWindows$OFFSET, ChildWindows$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr ChildWindows
     * }
     */
    public static void ChildWindows(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ChildWindows$OFFSET, ChildWindows$LAYOUT.byteSize());
    }

    private static final AddressLayout StateStorage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("StateStorage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiStorage *StateStorage
     * }
     */
    public static final AddressLayout StateStorage$layout() {
        return StateStorage$LAYOUT;
    }

    private static final long StateStorage$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiStorage *StateStorage
     * }
     */
    public static final long StateStorage$offset() {
        return StateStorage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiStorage *StateStorage
     * }
     */
    public static MemorySegment StateStorage(MemorySegment struct) {
        return struct.get(StateStorage$LAYOUT, StateStorage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiStorage *StateStorage
     * }
     */
    public static void StateStorage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(StateStorage$LAYOUT, StateStorage$OFFSET, fieldValue);
    }

    private static final AddressLayout CurrentColumns$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CurrentColumns"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiOldColumns *CurrentColumns
     * }
     */
    public static final AddressLayout CurrentColumns$layout() {
        return CurrentColumns$LAYOUT;
    }

    private static final long CurrentColumns$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiOldColumns *CurrentColumns
     * }
     */
    public static final long CurrentColumns$offset() {
        return CurrentColumns$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiOldColumns *CurrentColumns
     * }
     */
    public static MemorySegment CurrentColumns(MemorySegment struct) {
        return struct.get(CurrentColumns$LAYOUT, CurrentColumns$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiOldColumns *CurrentColumns
     * }
     */
    public static void CurrentColumns(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CurrentColumns$LAYOUT, CurrentColumns$OFFSET, fieldValue);
    }

    private static final OfInt CurrentTableIdx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CurrentTableIdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int CurrentTableIdx
     * }
     */
    public static final OfInt CurrentTableIdx$layout() {
        return CurrentTableIdx$LAYOUT;
    }

    private static final long CurrentTableIdx$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int CurrentTableIdx
     * }
     */
    public static final long CurrentTableIdx$offset() {
        return CurrentTableIdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int CurrentTableIdx
     * }
     */
    public static int CurrentTableIdx(MemorySegment struct) {
        return struct.get(CurrentTableIdx$LAYOUT, CurrentTableIdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int CurrentTableIdx
     * }
     */
    public static void CurrentTableIdx(MemorySegment struct, int fieldValue) {
        struct.set(CurrentTableIdx$LAYOUT, CurrentTableIdx$OFFSET, fieldValue);
    }

    private static final OfInt LayoutType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LayoutType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiLayoutType LayoutType
     * }
     */
    public static final OfInt LayoutType$layout() {
        return LayoutType$LAYOUT;
    }

    private static final long LayoutType$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiLayoutType LayoutType
     * }
     */
    public static final long LayoutType$offset() {
        return LayoutType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiLayoutType LayoutType
     * }
     */
    public static int LayoutType(MemorySegment struct) {
        return struct.get(LayoutType$LAYOUT, LayoutType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiLayoutType LayoutType
     * }
     */
    public static void LayoutType(MemorySegment struct, int fieldValue) {
        struct.set(LayoutType$LAYOUT, LayoutType$OFFSET, fieldValue);
    }

    private static final OfInt ParentLayoutType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ParentLayoutType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiLayoutType ParentLayoutType
     * }
     */
    public static final OfInt ParentLayoutType$layout() {
        return ParentLayoutType$LAYOUT;
    }

    private static final long ParentLayoutType$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiLayoutType ParentLayoutType
     * }
     */
    public static final long ParentLayoutType$offset() {
        return ParentLayoutType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiLayoutType ParentLayoutType
     * }
     */
    public static int ParentLayoutType(MemorySegment struct) {
        return struct.get(ParentLayoutType$LAYOUT, ParentLayoutType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiLayoutType ParentLayoutType
     * }
     */
    public static void ParentLayoutType(MemorySegment struct, int fieldValue) {
        struct.set(ParentLayoutType$LAYOUT, ParentLayoutType$OFFSET, fieldValue);
    }

    private static final OfInt ModalDimBgColor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ModalDimBgColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 ModalDimBgColor
     * }
     */
    public static final OfInt ModalDimBgColor$layout() {
        return ModalDimBgColor$LAYOUT;
    }

    private static final long ModalDimBgColor$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 ModalDimBgColor
     * }
     */
    public static final long ModalDimBgColor$offset() {
        return ModalDimBgColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 ModalDimBgColor
     * }
     */
    public static int ModalDimBgColor(MemorySegment struct) {
        return struct.get(ModalDimBgColor$LAYOUT, ModalDimBgColor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 ModalDimBgColor
     * }
     */
    public static void ModalDimBgColor(MemorySegment struct, int fieldValue) {
        struct.set(ModalDimBgColor$LAYOUT, ModalDimBgColor$OFFSET, fieldValue);
    }

    private static final OfFloat ItemWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ItemWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ItemWidth
     * }
     */
    public static final OfFloat ItemWidth$layout() {
        return ItemWidth$LAYOUT;
    }

    private static final long ItemWidth$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ItemWidth
     * }
     */
    public static final long ItemWidth$offset() {
        return ItemWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ItemWidth
     * }
     */
    public static float ItemWidth(MemorySegment struct) {
        return struct.get(ItemWidth$LAYOUT, ItemWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ItemWidth
     * }
     */
    public static void ItemWidth(MemorySegment struct, float fieldValue) {
        struct.set(ItemWidth$LAYOUT, ItemWidth$OFFSET, fieldValue);
    }

    private static final OfFloat TextWrapPos$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("TextWrapPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float TextWrapPos
     * }
     */
    public static final OfFloat TextWrapPos$layout() {
        return TextWrapPos$LAYOUT;
    }

    private static final long TextWrapPos$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float TextWrapPos
     * }
     */
    public static final long TextWrapPos$offset() {
        return TextWrapPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float TextWrapPos
     * }
     */
    public static float TextWrapPos(MemorySegment struct) {
        return struct.get(TextWrapPos$LAYOUT, TextWrapPos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float TextWrapPos
     * }
     */
    public static void TextWrapPos(MemorySegment struct, float fieldValue) {
        struct.set(TextWrapPos$LAYOUT, TextWrapPos$OFFSET, fieldValue);
    }

    private static final GroupLayout ItemWidthStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ItemWidthStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_float ItemWidthStack
     * }
     */
    public static final GroupLayout ItemWidthStack$layout() {
        return ItemWidthStack$LAYOUT;
    }

    private static final long ItemWidthStack$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_float ItemWidthStack
     * }
     */
    public static final long ItemWidthStack$offset() {
        return ItemWidthStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_float ItemWidthStack
     * }
     */
    public static MemorySegment ItemWidthStack(MemorySegment struct) {
        return struct.asSlice(ItemWidthStack$OFFSET, ItemWidthStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_float ItemWidthStack
     * }
     */
    public static void ItemWidthStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ItemWidthStack$OFFSET, ItemWidthStack$LAYOUT.byteSize());
    }

    private static final GroupLayout TextWrapPosStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TextWrapPosStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_float TextWrapPosStack
     * }
     */
    public static final GroupLayout TextWrapPosStack$layout() {
        return TextWrapPosStack$LAYOUT;
    }

    private static final long TextWrapPosStack$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_float TextWrapPosStack
     * }
     */
    public static final long TextWrapPosStack$offset() {
        return TextWrapPosStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_float TextWrapPosStack
     * }
     */
    public static MemorySegment TextWrapPosStack(MemorySegment struct) {
        return struct.asSlice(TextWrapPosStack$OFFSET, TextWrapPosStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_float TextWrapPosStack
     * }
     */
    public static void TextWrapPosStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TextWrapPosStack$OFFSET, TextWrapPosStack$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

