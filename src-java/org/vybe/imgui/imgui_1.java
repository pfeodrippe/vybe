// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class imgui_1 extends imgui_2 {

    imgui_1() {
        // Should not be called directly
    }
    private static final int ImGuiWindowDockStyleCol_TabSelected = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiWindowDockStyleCol_TabSelected = 3
     * }
     */
    public static int ImGuiWindowDockStyleCol_TabSelected() {
        return ImGuiWindowDockStyleCol_TabSelected;
    }
    private static final int ImGuiWindowDockStyleCol_TabSelectedOverline = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiWindowDockStyleCol_TabSelectedOverline = 4
     * }
     */
    public static int ImGuiWindowDockStyleCol_TabSelectedOverline() {
        return ImGuiWindowDockStyleCol_TabSelectedOverline;
    }
    private static final int ImGuiWindowDockStyleCol_TabDimmed = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiWindowDockStyleCol_TabDimmed = 5
     * }
     */
    public static int ImGuiWindowDockStyleCol_TabDimmed() {
        return ImGuiWindowDockStyleCol_TabDimmed;
    }
    private static final int ImGuiWindowDockStyleCol_TabDimmedSelected = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiWindowDockStyleCol_TabDimmedSelected = 6
     * }
     */
    public static int ImGuiWindowDockStyleCol_TabDimmedSelected() {
        return ImGuiWindowDockStyleCol_TabDimmedSelected;
    }
    private static final int ImGuiWindowDockStyleCol_TabDimmedSelectedOverline = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiWindowDockStyleCol_TabDimmedSelectedOverline = 7
     * }
     */
    public static int ImGuiWindowDockStyleCol_TabDimmedSelectedOverline() {
        return ImGuiWindowDockStyleCol_TabDimmedSelectedOverline;
    }
    private static final int ImGuiWindowDockStyleCol_COUNT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiWindowDockStyleCol_COUNT = 8
     * }
     */
    public static int ImGuiWindowDockStyleCol_COUNT() {
        return ImGuiWindowDockStyleCol_COUNT;
    }
    private static final int ImGuiLocKey_VersionStr = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_VersionStr = 0
     * }
     */
    public static int ImGuiLocKey_VersionStr() {
        return ImGuiLocKey_VersionStr;
    }
    private static final int ImGuiLocKey_TableSizeOne = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_TableSizeOne = 1
     * }
     */
    public static int ImGuiLocKey_TableSizeOne() {
        return ImGuiLocKey_TableSizeOne;
    }
    private static final int ImGuiLocKey_TableSizeAllFit = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_TableSizeAllFit = 2
     * }
     */
    public static int ImGuiLocKey_TableSizeAllFit() {
        return ImGuiLocKey_TableSizeAllFit;
    }
    private static final int ImGuiLocKey_TableSizeAllDefault = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_TableSizeAllDefault = 3
     * }
     */
    public static int ImGuiLocKey_TableSizeAllDefault() {
        return ImGuiLocKey_TableSizeAllDefault;
    }
    private static final int ImGuiLocKey_TableResetOrder = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_TableResetOrder = 4
     * }
     */
    public static int ImGuiLocKey_TableResetOrder() {
        return ImGuiLocKey_TableResetOrder;
    }
    private static final int ImGuiLocKey_WindowingMainMenuBar = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_WindowingMainMenuBar = 5
     * }
     */
    public static int ImGuiLocKey_WindowingMainMenuBar() {
        return ImGuiLocKey_WindowingMainMenuBar;
    }
    private static final int ImGuiLocKey_WindowingPopup = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_WindowingPopup = 6
     * }
     */
    public static int ImGuiLocKey_WindowingPopup() {
        return ImGuiLocKey_WindowingPopup;
    }
    private static final int ImGuiLocKey_WindowingUntitled = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_WindowingUntitled = 7
     * }
     */
    public static int ImGuiLocKey_WindowingUntitled() {
        return ImGuiLocKey_WindowingUntitled;
    }
    private static final int ImGuiLocKey_CopyLink = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_CopyLink = 8
     * }
     */
    public static int ImGuiLocKey_CopyLink() {
        return ImGuiLocKey_CopyLink;
    }
    private static final int ImGuiLocKey_DockingHideTabBar = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_DockingHideTabBar = 9
     * }
     */
    public static int ImGuiLocKey_DockingHideTabBar() {
        return ImGuiLocKey_DockingHideTabBar;
    }
    private static final int ImGuiLocKey_DockingHoldShiftToDock = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_DockingHoldShiftToDock = 10
     * }
     */
    public static int ImGuiLocKey_DockingHoldShiftToDock() {
        return ImGuiLocKey_DockingHoldShiftToDock;
    }
    private static final int ImGuiLocKey_DockingDragToUndockOrMoveNode = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_DockingDragToUndockOrMoveNode = 11
     * }
     */
    public static int ImGuiLocKey_DockingDragToUndockOrMoveNode() {
        return ImGuiLocKey_DockingDragToUndockOrMoveNode;
    }
    private static final int ImGuiLocKey_COUNT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiLocKey_COUNT = 12
     * }
     */
    public static int ImGuiLocKey_COUNT() {
        return ImGuiLocKey_COUNT;
    }
    private static final int ImGuiDebugLogFlags_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_None = 0
     * }
     */
    public static int ImGuiDebugLogFlags_None() {
        return ImGuiDebugLogFlags_None;
    }
    private static final int ImGuiDebugLogFlags_EventActiveId = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventActiveId = 1
     * }
     */
    public static int ImGuiDebugLogFlags_EventActiveId() {
        return ImGuiDebugLogFlags_EventActiveId;
    }
    private static final int ImGuiDebugLogFlags_EventFocus = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventFocus = 2
     * }
     */
    public static int ImGuiDebugLogFlags_EventFocus() {
        return ImGuiDebugLogFlags_EventFocus;
    }
    private static final int ImGuiDebugLogFlags_EventPopup = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventPopup = 4
     * }
     */
    public static int ImGuiDebugLogFlags_EventPopup() {
        return ImGuiDebugLogFlags_EventPopup;
    }
    private static final int ImGuiDebugLogFlags_EventNav = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventNav = 8
     * }
     */
    public static int ImGuiDebugLogFlags_EventNav() {
        return ImGuiDebugLogFlags_EventNav;
    }
    private static final int ImGuiDebugLogFlags_EventClipper = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventClipper = 16
     * }
     */
    public static int ImGuiDebugLogFlags_EventClipper() {
        return ImGuiDebugLogFlags_EventClipper;
    }
    private static final int ImGuiDebugLogFlags_EventSelection = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventSelection = 32
     * }
     */
    public static int ImGuiDebugLogFlags_EventSelection() {
        return ImGuiDebugLogFlags_EventSelection;
    }
    private static final int ImGuiDebugLogFlags_EventIO = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventIO = 64
     * }
     */
    public static int ImGuiDebugLogFlags_EventIO() {
        return ImGuiDebugLogFlags_EventIO;
    }
    private static final int ImGuiDebugLogFlags_EventInputRouting = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventInputRouting = 128
     * }
     */
    public static int ImGuiDebugLogFlags_EventInputRouting() {
        return ImGuiDebugLogFlags_EventInputRouting;
    }
    private static final int ImGuiDebugLogFlags_EventDocking = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventDocking = 256
     * }
     */
    public static int ImGuiDebugLogFlags_EventDocking() {
        return ImGuiDebugLogFlags_EventDocking;
    }
    private static final int ImGuiDebugLogFlags_EventViewport = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventViewport = 512
     * }
     */
    public static int ImGuiDebugLogFlags_EventViewport() {
        return ImGuiDebugLogFlags_EventViewport;
    }
    private static final int ImGuiDebugLogFlags_EventMask_ = (int)1023L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_EventMask_ = 1023
     * }
     */
    public static int ImGuiDebugLogFlags_EventMask_() {
        return ImGuiDebugLogFlags_EventMask_;
    }
    private static final int ImGuiDebugLogFlags_OutputToTTY = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_OutputToTTY = 1048576
     * }
     */
    public static int ImGuiDebugLogFlags_OutputToTTY() {
        return ImGuiDebugLogFlags_OutputToTTY;
    }
    private static final int ImGuiDebugLogFlags_OutputToTestEngine = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiDebugLogFlags_OutputToTestEngine = 2097152
     * }
     */
    public static int ImGuiDebugLogFlags_OutputToTestEngine() {
        return ImGuiDebugLogFlags_OutputToTestEngine;
    }
    private static final int ImGuiContextHookType_NewFramePre = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiContextHookType_NewFramePre = 0
     * }
     */
    public static int ImGuiContextHookType_NewFramePre() {
        return ImGuiContextHookType_NewFramePre;
    }
    private static final int ImGuiContextHookType_NewFramePost = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiContextHookType_NewFramePost = 1
     * }
     */
    public static int ImGuiContextHookType_NewFramePost() {
        return ImGuiContextHookType_NewFramePost;
    }
    private static final int ImGuiContextHookType_EndFramePre = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiContextHookType_EndFramePre = 2
     * }
     */
    public static int ImGuiContextHookType_EndFramePre() {
        return ImGuiContextHookType_EndFramePre;
    }
    private static final int ImGuiContextHookType_EndFramePost = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiContextHookType_EndFramePost = 3
     * }
     */
    public static int ImGuiContextHookType_EndFramePost() {
        return ImGuiContextHookType_EndFramePost;
    }
    private static final int ImGuiContextHookType_RenderPre = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiContextHookType_RenderPre = 4
     * }
     */
    public static int ImGuiContextHookType_RenderPre() {
        return ImGuiContextHookType_RenderPre;
    }
    private static final int ImGuiContextHookType_RenderPost = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiContextHookType_RenderPost = 5
     * }
     */
    public static int ImGuiContextHookType_RenderPost() {
        return ImGuiContextHookType_RenderPost;
    }
    private static final int ImGuiContextHookType_Shutdown = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiContextHookType_Shutdown = 6
     * }
     */
    public static int ImGuiContextHookType_Shutdown() {
        return ImGuiContextHookType_Shutdown;
    }
    private static final int ImGuiContextHookType_PendingRemoval_ = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiContextHookType_PendingRemoval_ = 7
     * }
     */
    public static int ImGuiContextHookType_PendingRemoval_() {
        return ImGuiContextHookType_PendingRemoval_;
    }
    private static final int ImGuiTabBarFlags_DockNode = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiTabBarFlags_DockNode = 1048576
     * }
     */
    public static int ImGuiTabBarFlags_DockNode() {
        return ImGuiTabBarFlags_DockNode;
    }
    private static final int ImGuiTabBarFlags_IsFocused = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiTabBarFlags_IsFocused = 2097152
     * }
     */
    public static int ImGuiTabBarFlags_IsFocused() {
        return ImGuiTabBarFlags_IsFocused;
    }
    private static final int ImGuiTabBarFlags_SaveSettings = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiTabBarFlags_SaveSettings = 4194304
     * }
     */
    public static int ImGuiTabBarFlags_SaveSettings() {
        return ImGuiTabBarFlags_SaveSettings;
    }
    private static final int ImGuiTabItemFlags_SectionMask_ = (int)192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiTabItemFlags_SectionMask_ = 192
     * }
     */
    public static int ImGuiTabItemFlags_SectionMask_() {
        return ImGuiTabItemFlags_SectionMask_;
    }
    private static final int ImGuiTabItemFlags_NoCloseButton = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiTabItemFlags_NoCloseButton = 1048576
     * }
     */
    public static int ImGuiTabItemFlags_NoCloseButton() {
        return ImGuiTabItemFlags_NoCloseButton;
    }
    private static final int ImGuiTabItemFlags_Button = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiTabItemFlags_Button = 2097152
     * }
     */
    public static int ImGuiTabItemFlags_Button() {
        return ImGuiTabItemFlags_Button;
    }
    private static final int ImGuiTabItemFlags_Unsorted = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ImGuiTabItemFlags_Unsorted = 4194304
     * }
     */
    public static int ImGuiTabItemFlags_Unsorted() {
        return ImGuiTabItemFlags_Unsorted;
    }
    /**
     * {@snippet lang=c :
     * typedef ImS16 ImGuiTableColumnIdx
     * }
     */
    public static final OfShort ImGuiTableColumnIdx = imgui.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef ImU16 ImGuiTableDrawChannelIdx
     * }
     */
    public static final OfShort ImGuiTableDrawChannelIdx = imgui.C_SHORT;

    private static class ImVec2_ImVec2_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec2_ImVec2_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVec2 *ImVec2_ImVec2_Nil()
     * }
     */
    public static FunctionDescriptor ImVec2_ImVec2_Nil$descriptor() {
        return ImVec2_ImVec2_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVec2 *ImVec2_ImVec2_Nil()
     * }
     */
    public static MethodHandle ImVec2_ImVec2_Nil$handle() {
        return ImVec2_ImVec2_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVec2 *ImVec2_ImVec2_Nil()
     * }
     */
    public static MemorySegment ImVec2_ImVec2_Nil$address() {
        return ImVec2_ImVec2_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVec2 *ImVec2_ImVec2_Nil()
     * }
     */
    public static MemorySegment ImVec2_ImVec2_Nil() {
        var mh$ = ImVec2_ImVec2_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec2_ImVec2_Nil");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec2_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec2_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImVec2_destroy(ImVec2 *self)
     * }
     */
    public static FunctionDescriptor ImVec2_destroy$descriptor() {
        return ImVec2_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImVec2_destroy(ImVec2 *self)
     * }
     */
    public static MethodHandle ImVec2_destroy$handle() {
        return ImVec2_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImVec2_destroy(ImVec2 *self)
     * }
     */
    public static MemorySegment ImVec2_destroy$address() {
        return ImVec2_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImVec2_destroy(ImVec2 *self)
     * }
     */
    public static void ImVec2_destroy(MemorySegment self) {
        var mh$ = ImVec2_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec2_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec2_ImVec2_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec2_ImVec2_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVec2 *ImVec2_ImVec2_Float(float _x, float _y)
     * }
     */
    public static FunctionDescriptor ImVec2_ImVec2_Float$descriptor() {
        return ImVec2_ImVec2_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVec2 *ImVec2_ImVec2_Float(float _x, float _y)
     * }
     */
    public static MethodHandle ImVec2_ImVec2_Float$handle() {
        return ImVec2_ImVec2_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVec2 *ImVec2_ImVec2_Float(float _x, float _y)
     * }
     */
    public static MemorySegment ImVec2_ImVec2_Float$address() {
        return ImVec2_ImVec2_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVec2 *ImVec2_ImVec2_Float(float _x, float _y)
     * }
     */
    public static MemorySegment ImVec2_ImVec2_Float(float _x, float _y) {
        var mh$ = ImVec2_ImVec2_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec2_ImVec2_Float", _x, _y);
            }
            return (MemorySegment)mh$.invokeExact(_x, _y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec4_ImVec4_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec4_ImVec4_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVec4 *ImVec4_ImVec4_Nil()
     * }
     */
    public static FunctionDescriptor ImVec4_ImVec4_Nil$descriptor() {
        return ImVec4_ImVec4_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVec4 *ImVec4_ImVec4_Nil()
     * }
     */
    public static MethodHandle ImVec4_ImVec4_Nil$handle() {
        return ImVec4_ImVec4_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVec4 *ImVec4_ImVec4_Nil()
     * }
     */
    public static MemorySegment ImVec4_ImVec4_Nil$address() {
        return ImVec4_ImVec4_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVec4 *ImVec4_ImVec4_Nil()
     * }
     */
    public static MemorySegment ImVec4_ImVec4_Nil() {
        var mh$ = ImVec4_ImVec4_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec4_ImVec4_Nil");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec4_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec4_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImVec4_destroy(ImVec4 *self)
     * }
     */
    public static FunctionDescriptor ImVec4_destroy$descriptor() {
        return ImVec4_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImVec4_destroy(ImVec4 *self)
     * }
     */
    public static MethodHandle ImVec4_destroy$handle() {
        return ImVec4_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImVec4_destroy(ImVec4 *self)
     * }
     */
    public static MemorySegment ImVec4_destroy$address() {
        return ImVec4_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImVec4_destroy(ImVec4 *self)
     * }
     */
    public static void ImVec4_destroy(MemorySegment self) {
        var mh$ = ImVec4_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec4_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec4_ImVec4_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec4_ImVec4_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVec4 *ImVec4_ImVec4_Float(float _x, float _y, float _z, float _w)
     * }
     */
    public static FunctionDescriptor ImVec4_ImVec4_Float$descriptor() {
        return ImVec4_ImVec4_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVec4 *ImVec4_ImVec4_Float(float _x, float _y, float _z, float _w)
     * }
     */
    public static MethodHandle ImVec4_ImVec4_Float$handle() {
        return ImVec4_ImVec4_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVec4 *ImVec4_ImVec4_Float(float _x, float _y, float _z, float _w)
     * }
     */
    public static MemorySegment ImVec4_ImVec4_Float$address() {
        return ImVec4_ImVec4_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVec4 *ImVec4_ImVec4_Float(float _x, float _y, float _z, float _w)
     * }
     */
    public static MemorySegment ImVec4_ImVec4_Float(float _x, float _y, float _z, float _w) {
        var mh$ = ImVec4_ImVec4_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec4_ImVec4_Float", _x, _y, _z, _w);
            }
            return (MemorySegment)mh$.invokeExact(_x, _y, _z, _w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCreateContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCreateContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiContext *igCreateContext(ImFontAtlas *shared_font_atlas)
     * }
     */
    public static FunctionDescriptor igCreateContext$descriptor() {
        return igCreateContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiContext *igCreateContext(ImFontAtlas *shared_font_atlas)
     * }
     */
    public static MethodHandle igCreateContext$handle() {
        return igCreateContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiContext *igCreateContext(ImFontAtlas *shared_font_atlas)
     * }
     */
    public static MemorySegment igCreateContext$address() {
        return igCreateContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiContext *igCreateContext(ImFontAtlas *shared_font_atlas)
     * }
     */
    public static MemorySegment igCreateContext(MemorySegment shared_font_atlas) {
        var mh$ = igCreateContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCreateContext", shared_font_atlas);
            }
            return (MemorySegment)mh$.invokeExact(shared_font_atlas);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDestroyContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDestroyContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDestroyContext(ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor igDestroyContext$descriptor() {
        return igDestroyContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDestroyContext(ImGuiContext *ctx)
     * }
     */
    public static MethodHandle igDestroyContext$handle() {
        return igDestroyContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDestroyContext(ImGuiContext *ctx)
     * }
     */
    public static MemorySegment igDestroyContext$address() {
        return igDestroyContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDestroyContext(ImGuiContext *ctx)
     * }
     */
    public static void igDestroyContext(MemorySegment ctx) {
        var mh$ = igDestroyContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDestroyContext", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCurrentContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCurrentContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiContext *igGetCurrentContext()
     * }
     */
    public static FunctionDescriptor igGetCurrentContext$descriptor() {
        return igGetCurrentContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiContext *igGetCurrentContext()
     * }
     */
    public static MethodHandle igGetCurrentContext$handle() {
        return igGetCurrentContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiContext *igGetCurrentContext()
     * }
     */
    public static MemorySegment igGetCurrentContext$address() {
        return igGetCurrentContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiContext *igGetCurrentContext()
     * }
     */
    public static MemorySegment igGetCurrentContext() {
        var mh$ = igGetCurrentContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCurrentContext");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetCurrentContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetCurrentContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetCurrentContext(ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor igSetCurrentContext$descriptor() {
        return igSetCurrentContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetCurrentContext(ImGuiContext *ctx)
     * }
     */
    public static MethodHandle igSetCurrentContext$handle() {
        return igSetCurrentContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetCurrentContext(ImGuiContext *ctx)
     * }
     */
    public static MemorySegment igSetCurrentContext$address() {
        return igSetCurrentContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetCurrentContext(ImGuiContext *ctx)
     * }
     */
    public static void igSetCurrentContext(MemorySegment ctx) {
        var mh$ = igSetCurrentContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetCurrentContext", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetIO {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetIO");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiIO *igGetIO()
     * }
     */
    public static FunctionDescriptor igGetIO$descriptor() {
        return igGetIO.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiIO *igGetIO()
     * }
     */
    public static MethodHandle igGetIO$handle() {
        return igGetIO.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiIO *igGetIO()
     * }
     */
    public static MemorySegment igGetIO$address() {
        return igGetIO.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiIO *igGetIO()
     * }
     */
    public static MemorySegment igGetIO() {
        var mh$ = igGetIO.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetIO");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetStyle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetStyle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStyle *igGetStyle()
     * }
     */
    public static FunctionDescriptor igGetStyle$descriptor() {
        return igGetStyle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStyle *igGetStyle()
     * }
     */
    public static MethodHandle igGetStyle$handle() {
        return igGetStyle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStyle *igGetStyle()
     * }
     */
    public static MemorySegment igGetStyle$address() {
        return igGetStyle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStyle *igGetStyle()
     * }
     */
    public static MemorySegment igGetStyle() {
        var mh$ = igGetStyle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetStyle");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNewFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNewFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNewFrame()
     * }
     */
    public static FunctionDescriptor igNewFrame$descriptor() {
        return igNewFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNewFrame()
     * }
     */
    public static MethodHandle igNewFrame$handle() {
        return igNewFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNewFrame()
     * }
     */
    public static MemorySegment igNewFrame$address() {
        return igNewFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNewFrame()
     * }
     */
    public static void igNewFrame() {
        var mh$ = igNewFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNewFrame");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndFrame()
     * }
     */
    public static FunctionDescriptor igEndFrame$descriptor() {
        return igEndFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndFrame()
     * }
     */
    public static MethodHandle igEndFrame$handle() {
        return igEndFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndFrame()
     * }
     */
    public static MemorySegment igEndFrame$address() {
        return igEndFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndFrame()
     * }
     */
    public static void igEndFrame() {
        var mh$ = igEndFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndFrame");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRender {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRender");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRender()
     * }
     */
    public static FunctionDescriptor igRender$descriptor() {
        return igRender.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRender()
     * }
     */
    public static MethodHandle igRender$handle() {
        return igRender.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRender()
     * }
     */
    public static MemorySegment igRender$address() {
        return igRender.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRender()
     * }
     */
    public static void igRender() {
        var mh$ = igRender.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRender");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetDrawData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetDrawData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawData *igGetDrawData()
     * }
     */
    public static FunctionDescriptor igGetDrawData$descriptor() {
        return igGetDrawData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawData *igGetDrawData()
     * }
     */
    public static MethodHandle igGetDrawData$handle() {
        return igGetDrawData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawData *igGetDrawData()
     * }
     */
    public static MemorySegment igGetDrawData$address() {
        return igGetDrawData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawData *igGetDrawData()
     * }
     */
    public static MemorySegment igGetDrawData() {
        var mh$ = igGetDrawData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetDrawData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowDemoWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowDemoWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShowDemoWindow(bool *p_open)
     * }
     */
    public static FunctionDescriptor igShowDemoWindow$descriptor() {
        return igShowDemoWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShowDemoWindow(bool *p_open)
     * }
     */
    public static MethodHandle igShowDemoWindow$handle() {
        return igShowDemoWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShowDemoWindow(bool *p_open)
     * }
     */
    public static MemorySegment igShowDemoWindow$address() {
        return igShowDemoWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShowDemoWindow(bool *p_open)
     * }
     */
    public static void igShowDemoWindow(MemorySegment p_open) {
        var mh$ = igShowDemoWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowDemoWindow", p_open);
            }
            mh$.invokeExact(p_open);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowMetricsWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowMetricsWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShowMetricsWindow(bool *p_open)
     * }
     */
    public static FunctionDescriptor igShowMetricsWindow$descriptor() {
        return igShowMetricsWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShowMetricsWindow(bool *p_open)
     * }
     */
    public static MethodHandle igShowMetricsWindow$handle() {
        return igShowMetricsWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShowMetricsWindow(bool *p_open)
     * }
     */
    public static MemorySegment igShowMetricsWindow$address() {
        return igShowMetricsWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShowMetricsWindow(bool *p_open)
     * }
     */
    public static void igShowMetricsWindow(MemorySegment p_open) {
        var mh$ = igShowMetricsWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowMetricsWindow", p_open);
            }
            mh$.invokeExact(p_open);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowDebugLogWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowDebugLogWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShowDebugLogWindow(bool *p_open)
     * }
     */
    public static FunctionDescriptor igShowDebugLogWindow$descriptor() {
        return igShowDebugLogWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShowDebugLogWindow(bool *p_open)
     * }
     */
    public static MethodHandle igShowDebugLogWindow$handle() {
        return igShowDebugLogWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShowDebugLogWindow(bool *p_open)
     * }
     */
    public static MemorySegment igShowDebugLogWindow$address() {
        return igShowDebugLogWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShowDebugLogWindow(bool *p_open)
     * }
     */
    public static void igShowDebugLogWindow(MemorySegment p_open) {
        var mh$ = igShowDebugLogWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowDebugLogWindow", p_open);
            }
            mh$.invokeExact(p_open);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowIDStackToolWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowIDStackToolWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShowIDStackToolWindow(bool *p_open)
     * }
     */
    public static FunctionDescriptor igShowIDStackToolWindow$descriptor() {
        return igShowIDStackToolWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShowIDStackToolWindow(bool *p_open)
     * }
     */
    public static MethodHandle igShowIDStackToolWindow$handle() {
        return igShowIDStackToolWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShowIDStackToolWindow(bool *p_open)
     * }
     */
    public static MemorySegment igShowIDStackToolWindow$address() {
        return igShowIDStackToolWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShowIDStackToolWindow(bool *p_open)
     * }
     */
    public static void igShowIDStackToolWindow(MemorySegment p_open) {
        var mh$ = igShowIDStackToolWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowIDStackToolWindow", p_open);
            }
            mh$.invokeExact(p_open);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowAboutWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowAboutWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShowAboutWindow(bool *p_open)
     * }
     */
    public static FunctionDescriptor igShowAboutWindow$descriptor() {
        return igShowAboutWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShowAboutWindow(bool *p_open)
     * }
     */
    public static MethodHandle igShowAboutWindow$handle() {
        return igShowAboutWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShowAboutWindow(bool *p_open)
     * }
     */
    public static MemorySegment igShowAboutWindow$address() {
        return igShowAboutWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShowAboutWindow(bool *p_open)
     * }
     */
    public static void igShowAboutWindow(MemorySegment p_open) {
        var mh$ = igShowAboutWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowAboutWindow", p_open);
            }
            mh$.invokeExact(p_open);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowStyleEditor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowStyleEditor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShowStyleEditor(ImGuiStyle *ref)
     * }
     */
    public static FunctionDescriptor igShowStyleEditor$descriptor() {
        return igShowStyleEditor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShowStyleEditor(ImGuiStyle *ref)
     * }
     */
    public static MethodHandle igShowStyleEditor$handle() {
        return igShowStyleEditor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShowStyleEditor(ImGuiStyle *ref)
     * }
     */
    public static MemorySegment igShowStyleEditor$address() {
        return igShowStyleEditor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShowStyleEditor(ImGuiStyle *ref)
     * }
     */
    public static void igShowStyleEditor(MemorySegment ref) {
        var mh$ = igShowStyleEditor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowStyleEditor", ref);
            }
            mh$.invokeExact(ref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowStyleSelector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowStyleSelector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igShowStyleSelector(const char *label)
     * }
     */
    public static FunctionDescriptor igShowStyleSelector$descriptor() {
        return igShowStyleSelector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igShowStyleSelector(const char *label)
     * }
     */
    public static MethodHandle igShowStyleSelector$handle() {
        return igShowStyleSelector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igShowStyleSelector(const char *label)
     * }
     */
    public static MemorySegment igShowStyleSelector$address() {
        return igShowStyleSelector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igShowStyleSelector(const char *label)
     * }
     */
    public static boolean igShowStyleSelector(MemorySegment label) {
        var mh$ = igShowStyleSelector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowStyleSelector", label);
            }
            return (boolean)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowFontSelector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowFontSelector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShowFontSelector(const char *label)
     * }
     */
    public static FunctionDescriptor igShowFontSelector$descriptor() {
        return igShowFontSelector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShowFontSelector(const char *label)
     * }
     */
    public static MethodHandle igShowFontSelector$handle() {
        return igShowFontSelector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShowFontSelector(const char *label)
     * }
     */
    public static MemorySegment igShowFontSelector$address() {
        return igShowFontSelector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShowFontSelector(const char *label)
     * }
     */
    public static void igShowFontSelector(MemorySegment label) {
        var mh$ = igShowFontSelector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowFontSelector", label);
            }
            mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShowUserGuide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShowUserGuide");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igShowUserGuide()
     * }
     */
    public static FunctionDescriptor igShowUserGuide$descriptor() {
        return igShowUserGuide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igShowUserGuide()
     * }
     */
    public static MethodHandle igShowUserGuide$handle() {
        return igShowUserGuide.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igShowUserGuide()
     * }
     */
    public static MemorySegment igShowUserGuide$address() {
        return igShowUserGuide.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igShowUserGuide()
     * }
     */
    public static void igShowUserGuide() {
        var mh$ = igShowUserGuide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShowUserGuide");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetVersion");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igGetVersion()
     * }
     */
    public static FunctionDescriptor igGetVersion$descriptor() {
        return igGetVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igGetVersion()
     * }
     */
    public static MethodHandle igGetVersion$handle() {
        return igGetVersion.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igGetVersion()
     * }
     */
    public static MemorySegment igGetVersion$address() {
        return igGetVersion.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igGetVersion()
     * }
     */
    public static MemorySegment igGetVersion() {
        var mh$ = igGetVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetVersion");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igStyleColorsDark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igStyleColorsDark");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igStyleColorsDark(ImGuiStyle *dst)
     * }
     */
    public static FunctionDescriptor igStyleColorsDark$descriptor() {
        return igStyleColorsDark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igStyleColorsDark(ImGuiStyle *dst)
     * }
     */
    public static MethodHandle igStyleColorsDark$handle() {
        return igStyleColorsDark.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igStyleColorsDark(ImGuiStyle *dst)
     * }
     */
    public static MemorySegment igStyleColorsDark$address() {
        return igStyleColorsDark.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igStyleColorsDark(ImGuiStyle *dst)
     * }
     */
    public static void igStyleColorsDark(MemorySegment dst) {
        var mh$ = igStyleColorsDark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igStyleColorsDark", dst);
            }
            mh$.invokeExact(dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igStyleColorsLight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igStyleColorsLight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igStyleColorsLight(ImGuiStyle *dst)
     * }
     */
    public static FunctionDescriptor igStyleColorsLight$descriptor() {
        return igStyleColorsLight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igStyleColorsLight(ImGuiStyle *dst)
     * }
     */
    public static MethodHandle igStyleColorsLight$handle() {
        return igStyleColorsLight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igStyleColorsLight(ImGuiStyle *dst)
     * }
     */
    public static MemorySegment igStyleColorsLight$address() {
        return igStyleColorsLight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igStyleColorsLight(ImGuiStyle *dst)
     * }
     */
    public static void igStyleColorsLight(MemorySegment dst) {
        var mh$ = igStyleColorsLight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igStyleColorsLight", dst);
            }
            mh$.invokeExact(dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igStyleColorsClassic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igStyleColorsClassic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igStyleColorsClassic(ImGuiStyle *dst)
     * }
     */
    public static FunctionDescriptor igStyleColorsClassic$descriptor() {
        return igStyleColorsClassic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igStyleColorsClassic(ImGuiStyle *dst)
     * }
     */
    public static MethodHandle igStyleColorsClassic$handle() {
        return igStyleColorsClassic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igStyleColorsClassic(ImGuiStyle *dst)
     * }
     */
    public static MemorySegment igStyleColorsClassic$address() {
        return igStyleColorsClassic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igStyleColorsClassic(ImGuiStyle *dst)
     * }
     */
    public static void igStyleColorsClassic(MemorySegment dst) {
        var mh$ = igStyleColorsClassic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igStyleColorsClassic", dst);
            }
            mh$.invokeExact(dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBegin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBegin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBegin(const char *name, bool *p_open, ImGuiWindowFlags flags)
     * }
     */
    public static FunctionDescriptor igBegin$descriptor() {
        return igBegin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBegin(const char *name, bool *p_open, ImGuiWindowFlags flags)
     * }
     */
    public static MethodHandle igBegin$handle() {
        return igBegin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBegin(const char *name, bool *p_open, ImGuiWindowFlags flags)
     * }
     */
    public static MemorySegment igBegin$address() {
        return igBegin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBegin(const char *name, bool *p_open, ImGuiWindowFlags flags)
     * }
     */
    public static boolean igBegin(MemorySegment name, MemorySegment p_open, int flags) {
        var mh$ = igBegin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBegin", name, p_open, flags);
            }
            return (boolean)mh$.invokeExact(name, p_open, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEnd()
     * }
     */
    public static FunctionDescriptor igEnd$descriptor() {
        return igEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEnd()
     * }
     */
    public static MethodHandle igEnd$handle() {
        return igEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEnd()
     * }
     */
    public static MemorySegment igEnd$address() {
        return igEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEnd()
     * }
     */
    public static void igEnd() {
        var mh$ = igEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEnd");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginChild_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginChild_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginChild_Str(const char *str_id, const ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static FunctionDescriptor igBeginChild_Str$descriptor() {
        return igBeginChild_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginChild_Str(const char *str_id, const ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static MethodHandle igBeginChild_Str$handle() {
        return igBeginChild_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginChild_Str(const char *str_id, const ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static MemorySegment igBeginChild_Str$address() {
        return igBeginChild_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginChild_Str(const char *str_id, const ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static boolean igBeginChild_Str(MemorySegment str_id, MemorySegment size, int child_flags, int window_flags) {
        var mh$ = igBeginChild_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginChild_Str", str_id, size, child_flags, window_flags);
            }
            return (boolean)mh$.invokeExact(str_id, size, child_flags, window_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginChild_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginChild_ID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginChild_ID(ImGuiID id, const ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static FunctionDescriptor igBeginChild_ID$descriptor() {
        return igBeginChild_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginChild_ID(ImGuiID id, const ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static MethodHandle igBeginChild_ID$handle() {
        return igBeginChild_ID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginChild_ID(ImGuiID id, const ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static MemorySegment igBeginChild_ID$address() {
        return igBeginChild_ID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginChild_ID(ImGuiID id, const ImVec2 size, ImGuiChildFlags child_flags, ImGuiWindowFlags window_flags)
     * }
     */
    public static boolean igBeginChild_ID(int id, MemorySegment size, int child_flags, int window_flags) {
        var mh$ = igBeginChild_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginChild_ID", id, size, child_flags, window_flags);
            }
            return (boolean)mh$.invokeExact(id, size, child_flags, window_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndChild {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndChild");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndChild()
     * }
     */
    public static FunctionDescriptor igEndChild$descriptor() {
        return igEndChild.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndChild()
     * }
     */
    public static MethodHandle igEndChild$handle() {
        return igEndChild.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndChild()
     * }
     */
    public static MemorySegment igEndChild$address() {
        return igEndChild.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndChild()
     * }
     */
    public static void igEndChild() {
        var mh$ = igEndChild.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndChild");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowAppearing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowAppearing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowAppearing()
     * }
     */
    public static FunctionDescriptor igIsWindowAppearing$descriptor() {
        return igIsWindowAppearing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowAppearing()
     * }
     */
    public static MethodHandle igIsWindowAppearing$handle() {
        return igIsWindowAppearing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowAppearing()
     * }
     */
    public static MemorySegment igIsWindowAppearing$address() {
        return igIsWindowAppearing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowAppearing()
     * }
     */
    public static boolean igIsWindowAppearing() {
        var mh$ = igIsWindowAppearing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowAppearing");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowCollapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowCollapsed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowCollapsed()
     * }
     */
    public static FunctionDescriptor igIsWindowCollapsed$descriptor() {
        return igIsWindowCollapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowCollapsed()
     * }
     */
    public static MethodHandle igIsWindowCollapsed$handle() {
        return igIsWindowCollapsed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowCollapsed()
     * }
     */
    public static MemorySegment igIsWindowCollapsed$address() {
        return igIsWindowCollapsed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowCollapsed()
     * }
     */
    public static boolean igIsWindowCollapsed() {
        var mh$ = igIsWindowCollapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowCollapsed");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowFocused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowFocused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowFocused(ImGuiFocusedFlags flags)
     * }
     */
    public static FunctionDescriptor igIsWindowFocused$descriptor() {
        return igIsWindowFocused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowFocused(ImGuiFocusedFlags flags)
     * }
     */
    public static MethodHandle igIsWindowFocused$handle() {
        return igIsWindowFocused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowFocused(ImGuiFocusedFlags flags)
     * }
     */
    public static MemorySegment igIsWindowFocused$address() {
        return igIsWindowFocused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowFocused(ImGuiFocusedFlags flags)
     * }
     */
    public static boolean igIsWindowFocused(int flags) {
        var mh$ = igIsWindowFocused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowFocused", flags);
            }
            return (boolean)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowHovered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowHovered");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowHovered(ImGuiHoveredFlags flags)
     * }
     */
    public static FunctionDescriptor igIsWindowHovered$descriptor() {
        return igIsWindowHovered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowHovered(ImGuiHoveredFlags flags)
     * }
     */
    public static MethodHandle igIsWindowHovered$handle() {
        return igIsWindowHovered.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowHovered(ImGuiHoveredFlags flags)
     * }
     */
    public static MemorySegment igIsWindowHovered$address() {
        return igIsWindowHovered.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowHovered(ImGuiHoveredFlags flags)
     * }
     */
    public static boolean igIsWindowHovered(int flags) {
        var mh$ = igIsWindowHovered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowHovered", flags);
            }
            return (boolean)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowDrawList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowDrawList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetWindowDrawList()
     * }
     */
    public static FunctionDescriptor igGetWindowDrawList$descriptor() {
        return igGetWindowDrawList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetWindowDrawList()
     * }
     */
    public static MethodHandle igGetWindowDrawList$handle() {
        return igGetWindowDrawList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetWindowDrawList()
     * }
     */
    public static MemorySegment igGetWindowDrawList$address() {
        return igGetWindowDrawList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawList *igGetWindowDrawList()
     * }
     */
    public static MemorySegment igGetWindowDrawList() {
        var mh$ = igGetWindowDrawList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowDrawList");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowDpiScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowDpiScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetWindowDpiScale()
     * }
     */
    public static FunctionDescriptor igGetWindowDpiScale$descriptor() {
        return igGetWindowDpiScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetWindowDpiScale()
     * }
     */
    public static MethodHandle igGetWindowDpiScale$handle() {
        return igGetWindowDpiScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetWindowDpiScale()
     * }
     */
    public static MemorySegment igGetWindowDpiScale$address() {
        return igGetWindowDpiScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetWindowDpiScale()
     * }
     */
    public static float igGetWindowDpiScale() {
        var mh$ = igGetWindowDpiScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowDpiScale");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetWindowPos(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetWindowPos$descriptor() {
        return igGetWindowPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetWindowPos(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetWindowPos$handle() {
        return igGetWindowPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetWindowPos(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetWindowPos$address() {
        return igGetWindowPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetWindowPos(ImVec2 *pOut)
     * }
     */
    public static void igGetWindowPos(MemorySegment pOut) {
        var mh$ = igGetWindowPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowPos", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetWindowSize(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetWindowSize$descriptor() {
        return igGetWindowSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetWindowSize(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetWindowSize$handle() {
        return igGetWindowSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetWindowSize(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetWindowSize$address() {
        return igGetWindowSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetWindowSize(ImVec2 *pOut)
     * }
     */
    public static void igGetWindowSize(MemorySegment pOut) {
        var mh$ = igGetWindowSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowSize", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetWindowWidth()
     * }
     */
    public static FunctionDescriptor igGetWindowWidth$descriptor() {
        return igGetWindowWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetWindowWidth()
     * }
     */
    public static MethodHandle igGetWindowWidth$handle() {
        return igGetWindowWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetWindowWidth()
     * }
     */
    public static MemorySegment igGetWindowWidth$address() {
        return igGetWindowWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetWindowWidth()
     * }
     */
    public static float igGetWindowWidth() {
        var mh$ = igGetWindowWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowWidth");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetWindowHeight()
     * }
     */
    public static FunctionDescriptor igGetWindowHeight$descriptor() {
        return igGetWindowHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetWindowHeight()
     * }
     */
    public static MethodHandle igGetWindowHeight$handle() {
        return igGetWindowHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetWindowHeight()
     * }
     */
    public static MemorySegment igGetWindowHeight$address() {
        return igGetWindowHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetWindowHeight()
     * }
     */
    public static float igGetWindowHeight() {
        var mh$ = igGetWindowHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowHeight");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igGetWindowViewport()
     * }
     */
    public static FunctionDescriptor igGetWindowViewport$descriptor() {
        return igGetWindowViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igGetWindowViewport()
     * }
     */
    public static MethodHandle igGetWindowViewport$handle() {
        return igGetWindowViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igGetWindowViewport()
     * }
     */
    public static MemorySegment igGetWindowViewport$address() {
        return igGetWindowViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiViewport *igGetWindowViewport()
     * }
     */
    public static MemorySegment igGetWindowViewport() {
        var mh$ = igGetWindowViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowViewport");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            imgui.C_INT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowPos(const ImVec2 pos, ImGuiCond cond, const ImVec2 pivot)
     * }
     */
    public static FunctionDescriptor igSetNextWindowPos$descriptor() {
        return igSetNextWindowPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowPos(const ImVec2 pos, ImGuiCond cond, const ImVec2 pivot)
     * }
     */
    public static MethodHandle igSetNextWindowPos$handle() {
        return igSetNextWindowPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowPos(const ImVec2 pos, ImGuiCond cond, const ImVec2 pivot)
     * }
     */
    public static MemorySegment igSetNextWindowPos$address() {
        return igSetNextWindowPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowPos(const ImVec2 pos, ImGuiCond cond, const ImVec2 pivot)
     * }
     */
    public static void igSetNextWindowPos(MemorySegment pos, int cond, MemorySegment pivot) {
        var mh$ = igSetNextWindowPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowPos", pos, cond, pivot);
            }
            mh$.invokeExact(pos, cond, pivot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowSize(const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetNextWindowSize$descriptor() {
        return igSetNextWindowSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowSize(const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetNextWindowSize$handle() {
        return igSetNextWindowSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowSize(const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetNextWindowSize$address() {
        return igSetNextWindowSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowSize(const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static void igSetNextWindowSize(MemorySegment size, int cond) {
        var mh$ = igSetNextWindowSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowSize", size, cond);
            }
            mh$.invokeExact(size, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowSizeConstraints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowSizeConstraints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowSizeConstraints(const ImVec2 size_min, const ImVec2 size_max, ImGuiSizeCallback custom_callback, void *custom_callback_data)
     * }
     */
    public static FunctionDescriptor igSetNextWindowSizeConstraints$descriptor() {
        return igSetNextWindowSizeConstraints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowSizeConstraints(const ImVec2 size_min, const ImVec2 size_max, ImGuiSizeCallback custom_callback, void *custom_callback_data)
     * }
     */
    public static MethodHandle igSetNextWindowSizeConstraints$handle() {
        return igSetNextWindowSizeConstraints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowSizeConstraints(const ImVec2 size_min, const ImVec2 size_max, ImGuiSizeCallback custom_callback, void *custom_callback_data)
     * }
     */
    public static MemorySegment igSetNextWindowSizeConstraints$address() {
        return igSetNextWindowSizeConstraints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowSizeConstraints(const ImVec2 size_min, const ImVec2 size_max, ImGuiSizeCallback custom_callback, void *custom_callback_data)
     * }
     */
    public static void igSetNextWindowSizeConstraints(MemorySegment size_min, MemorySegment size_max, MemorySegment custom_callback, MemorySegment custom_callback_data) {
        var mh$ = igSetNextWindowSizeConstraints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowSizeConstraints", size_min, size_max, custom_callback, custom_callback_data);
            }
            mh$.invokeExact(size_min, size_max, custom_callback, custom_callback_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowContentSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowContentSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowContentSize(const ImVec2 size)
     * }
     */
    public static FunctionDescriptor igSetNextWindowContentSize$descriptor() {
        return igSetNextWindowContentSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowContentSize(const ImVec2 size)
     * }
     */
    public static MethodHandle igSetNextWindowContentSize$handle() {
        return igSetNextWindowContentSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowContentSize(const ImVec2 size)
     * }
     */
    public static MemorySegment igSetNextWindowContentSize$address() {
        return igSetNextWindowContentSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowContentSize(const ImVec2 size)
     * }
     */
    public static void igSetNextWindowContentSize(MemorySegment size) {
        var mh$ = igSetNextWindowContentSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowContentSize", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowCollapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowCollapsed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetNextWindowCollapsed$descriptor() {
        return igSetNextWindowCollapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetNextWindowCollapsed$handle() {
        return igSetNextWindowCollapsed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetNextWindowCollapsed$address() {
        return igSetNextWindowCollapsed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowCollapsed(bool collapsed, ImGuiCond cond)
     * }
     */
    public static void igSetNextWindowCollapsed(boolean collapsed, int cond) {
        var mh$ = igSetNextWindowCollapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowCollapsed", collapsed, cond);
            }
            mh$.invokeExact(collapsed, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowFocus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowFocus()
     * }
     */
    public static FunctionDescriptor igSetNextWindowFocus$descriptor() {
        return igSetNextWindowFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowFocus()
     * }
     */
    public static MethodHandle igSetNextWindowFocus$handle() {
        return igSetNextWindowFocus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowFocus()
     * }
     */
    public static MemorySegment igSetNextWindowFocus$address() {
        return igSetNextWindowFocus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowFocus()
     * }
     */
    public static void igSetNextWindowFocus() {
        var mh$ = igSetNextWindowFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowFocus");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowScroll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowScroll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowScroll(const ImVec2 scroll)
     * }
     */
    public static FunctionDescriptor igSetNextWindowScroll$descriptor() {
        return igSetNextWindowScroll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowScroll(const ImVec2 scroll)
     * }
     */
    public static MethodHandle igSetNextWindowScroll$handle() {
        return igSetNextWindowScroll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowScroll(const ImVec2 scroll)
     * }
     */
    public static MemorySegment igSetNextWindowScroll$address() {
        return igSetNextWindowScroll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowScroll(const ImVec2 scroll)
     * }
     */
    public static void igSetNextWindowScroll(MemorySegment scroll) {
        var mh$ = igSetNextWindowScroll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowScroll", scroll);
            }
            mh$.invokeExact(scroll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowBgAlpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowBgAlpha");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowBgAlpha(float alpha)
     * }
     */
    public static FunctionDescriptor igSetNextWindowBgAlpha$descriptor() {
        return igSetNextWindowBgAlpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowBgAlpha(float alpha)
     * }
     */
    public static MethodHandle igSetNextWindowBgAlpha$handle() {
        return igSetNextWindowBgAlpha.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowBgAlpha(float alpha)
     * }
     */
    public static MemorySegment igSetNextWindowBgAlpha$address() {
        return igSetNextWindowBgAlpha.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowBgAlpha(float alpha)
     * }
     */
    public static void igSetNextWindowBgAlpha(float alpha) {
        var mh$ = igSetNextWindowBgAlpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowBgAlpha", alpha);
            }
            mh$.invokeExact(alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowViewport(ImGuiID viewport_id)
     * }
     */
    public static FunctionDescriptor igSetNextWindowViewport$descriptor() {
        return igSetNextWindowViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowViewport(ImGuiID viewport_id)
     * }
     */
    public static MethodHandle igSetNextWindowViewport$handle() {
        return igSetNextWindowViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowViewport(ImGuiID viewport_id)
     * }
     */
    public static MemorySegment igSetNextWindowViewport$address() {
        return igSetNextWindowViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowViewport(ImGuiID viewport_id)
     * }
     */
    public static void igSetNextWindowViewport(int viewport_id) {
        var mh$ = igSetNextWindowViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowViewport", viewport_id);
            }
            mh$.invokeExact(viewport_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowPos_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowPos_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowPos_Vec2(const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowPos_Vec2$descriptor() {
        return igSetWindowPos_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowPos_Vec2(const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowPos_Vec2$handle() {
        return igSetWindowPos_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowPos_Vec2(const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowPos_Vec2$address() {
        return igSetWindowPos_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowPos_Vec2(const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static void igSetWindowPos_Vec2(MemorySegment pos, int cond) {
        var mh$ = igSetWindowPos_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowPos_Vec2", pos, cond);
            }
            mh$.invokeExact(pos, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowSize_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowSize_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowSize_Vec2(const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowSize_Vec2$descriptor() {
        return igSetWindowSize_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowSize_Vec2(const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowSize_Vec2$handle() {
        return igSetWindowSize_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowSize_Vec2(const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowSize_Vec2$address() {
        return igSetWindowSize_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowSize_Vec2(const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static void igSetWindowSize_Vec2(MemorySegment size, int cond) {
        var mh$ = igSetWindowSize_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowSize_Vec2", size, cond);
            }
            mh$.invokeExact(size, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowCollapsed_Bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowCollapsed_Bool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_Bool(bool collapsed, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowCollapsed_Bool$descriptor() {
        return igSetWindowCollapsed_Bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_Bool(bool collapsed, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowCollapsed_Bool$handle() {
        return igSetWindowCollapsed_Bool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_Bool(bool collapsed, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowCollapsed_Bool$address() {
        return igSetWindowCollapsed_Bool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_Bool(bool collapsed, ImGuiCond cond)
     * }
     */
    public static void igSetWindowCollapsed_Bool(boolean collapsed, int cond) {
        var mh$ = igSetWindowCollapsed_Bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowCollapsed_Bool", collapsed, cond);
            }
            mh$.invokeExact(collapsed, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowFocus_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowFocus_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowFocus_Nil()
     * }
     */
    public static FunctionDescriptor igSetWindowFocus_Nil$descriptor() {
        return igSetWindowFocus_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowFocus_Nil()
     * }
     */
    public static MethodHandle igSetWindowFocus_Nil$handle() {
        return igSetWindowFocus_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowFocus_Nil()
     * }
     */
    public static MemorySegment igSetWindowFocus_Nil$address() {
        return igSetWindowFocus_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowFocus_Nil()
     * }
     */
    public static void igSetWindowFocus_Nil() {
        var mh$ = igSetWindowFocus_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowFocus_Nil");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowFontScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowFontScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowFontScale(float scale)
     * }
     */
    public static FunctionDescriptor igSetWindowFontScale$descriptor() {
        return igSetWindowFontScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowFontScale(float scale)
     * }
     */
    public static MethodHandle igSetWindowFontScale$handle() {
        return igSetWindowFontScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowFontScale(float scale)
     * }
     */
    public static MemorySegment igSetWindowFontScale$address() {
        return igSetWindowFontScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowFontScale(float scale)
     * }
     */
    public static void igSetWindowFontScale(float scale) {
        var mh$ = igSetWindowFontScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowFontScale", scale);
            }
            mh$.invokeExact(scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowPos_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowPos_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowPos_Str(const char *name, const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowPos_Str$descriptor() {
        return igSetWindowPos_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowPos_Str(const char *name, const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowPos_Str$handle() {
        return igSetWindowPos_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowPos_Str(const char *name, const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowPos_Str$address() {
        return igSetWindowPos_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowPos_Str(const char *name, const ImVec2 pos, ImGuiCond cond)
     * }
     */
    public static void igSetWindowPos_Str(MemorySegment name, MemorySegment pos, int cond) {
        var mh$ = igSetWindowPos_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowPos_Str", name, pos, cond);
            }
            mh$.invokeExact(name, pos, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowSize_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowSize_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowSize_Str(const char *name, const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowSize_Str$descriptor() {
        return igSetWindowSize_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowSize_Str(const char *name, const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowSize_Str$handle() {
        return igSetWindowSize_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowSize_Str(const char *name, const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowSize_Str$address() {
        return igSetWindowSize_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowSize_Str(const char *name, const ImVec2 size, ImGuiCond cond)
     * }
     */
    public static void igSetWindowSize_Str(MemorySegment name, MemorySegment size, int cond) {
        var mh$ = igSetWindowSize_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowSize_Str", name, size, cond);
            }
            mh$.invokeExact(name, size, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowCollapsed_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowCollapsed_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_Str(const char *name, bool collapsed, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetWindowCollapsed_Str$descriptor() {
        return igSetWindowCollapsed_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_Str(const char *name, bool collapsed, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetWindowCollapsed_Str$handle() {
        return igSetWindowCollapsed_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_Str(const char *name, bool collapsed, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetWindowCollapsed_Str$address() {
        return igSetWindowCollapsed_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowCollapsed_Str(const char *name, bool collapsed, ImGuiCond cond)
     * }
     */
    public static void igSetWindowCollapsed_Str(MemorySegment name, boolean collapsed, int cond) {
        var mh$ = igSetWindowCollapsed_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowCollapsed_Str", name, collapsed, cond);
            }
            mh$.invokeExact(name, collapsed, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetWindowFocus_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetWindowFocus_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetWindowFocus_Str(const char *name)
     * }
     */
    public static FunctionDescriptor igSetWindowFocus_Str$descriptor() {
        return igSetWindowFocus_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetWindowFocus_Str(const char *name)
     * }
     */
    public static MethodHandle igSetWindowFocus_Str$handle() {
        return igSetWindowFocus_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetWindowFocus_Str(const char *name)
     * }
     */
    public static MemorySegment igSetWindowFocus_Str$address() {
        return igSetWindowFocus_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetWindowFocus_Str(const char *name)
     * }
     */
    public static void igSetWindowFocus_Str(MemorySegment name) {
        var mh$ = igSetWindowFocus_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetWindowFocus_Str", name);
            }
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetScrollX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetScrollX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetScrollX()
     * }
     */
    public static FunctionDescriptor igGetScrollX$descriptor() {
        return igGetScrollX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetScrollX()
     * }
     */
    public static MethodHandle igGetScrollX$handle() {
        return igGetScrollX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetScrollX()
     * }
     */
    public static MemorySegment igGetScrollX$address() {
        return igGetScrollX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetScrollX()
     * }
     */
    public static float igGetScrollX() {
        var mh$ = igGetScrollX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetScrollX");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetScrollY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetScrollY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetScrollY()
     * }
     */
    public static FunctionDescriptor igGetScrollY$descriptor() {
        return igGetScrollY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetScrollY()
     * }
     */
    public static MethodHandle igGetScrollY$handle() {
        return igGetScrollY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetScrollY()
     * }
     */
    public static MemorySegment igGetScrollY$address() {
        return igGetScrollY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetScrollY()
     * }
     */
    public static float igGetScrollY() {
        var mh$ = igGetScrollY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetScrollY");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollX_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollX_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollX_Float(float scroll_x)
     * }
     */
    public static FunctionDescriptor igSetScrollX_Float$descriptor() {
        return igSetScrollX_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollX_Float(float scroll_x)
     * }
     */
    public static MethodHandle igSetScrollX_Float$handle() {
        return igSetScrollX_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollX_Float(float scroll_x)
     * }
     */
    public static MemorySegment igSetScrollX_Float$address() {
        return igSetScrollX_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollX_Float(float scroll_x)
     * }
     */
    public static void igSetScrollX_Float(float scroll_x) {
        var mh$ = igSetScrollX_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollX_Float", scroll_x);
            }
            mh$.invokeExact(scroll_x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollY_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollY_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollY_Float(float scroll_y)
     * }
     */
    public static FunctionDescriptor igSetScrollY_Float$descriptor() {
        return igSetScrollY_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollY_Float(float scroll_y)
     * }
     */
    public static MethodHandle igSetScrollY_Float$handle() {
        return igSetScrollY_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollY_Float(float scroll_y)
     * }
     */
    public static MemorySegment igSetScrollY_Float$address() {
        return igSetScrollY_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollY_Float(float scroll_y)
     * }
     */
    public static void igSetScrollY_Float(float scroll_y) {
        var mh$ = igSetScrollY_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollY_Float", scroll_y);
            }
            mh$.invokeExact(scroll_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetScrollMaxX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetScrollMaxX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetScrollMaxX()
     * }
     */
    public static FunctionDescriptor igGetScrollMaxX$descriptor() {
        return igGetScrollMaxX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetScrollMaxX()
     * }
     */
    public static MethodHandle igGetScrollMaxX$handle() {
        return igGetScrollMaxX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetScrollMaxX()
     * }
     */
    public static MemorySegment igGetScrollMaxX$address() {
        return igGetScrollMaxX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetScrollMaxX()
     * }
     */
    public static float igGetScrollMaxX() {
        var mh$ = igGetScrollMaxX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetScrollMaxX");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetScrollMaxY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetScrollMaxY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetScrollMaxY()
     * }
     */
    public static FunctionDescriptor igGetScrollMaxY$descriptor() {
        return igGetScrollMaxY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetScrollMaxY()
     * }
     */
    public static MethodHandle igGetScrollMaxY$handle() {
        return igGetScrollMaxY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetScrollMaxY()
     * }
     */
    public static MemorySegment igGetScrollMaxY$address() {
        return igGetScrollMaxY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetScrollMaxY()
     * }
     */
    public static float igGetScrollMaxY() {
        var mh$ = igGetScrollMaxY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetScrollMaxY");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollHereX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollHereX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollHereX(float center_x_ratio)
     * }
     */
    public static FunctionDescriptor igSetScrollHereX$descriptor() {
        return igSetScrollHereX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollHereX(float center_x_ratio)
     * }
     */
    public static MethodHandle igSetScrollHereX$handle() {
        return igSetScrollHereX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollHereX(float center_x_ratio)
     * }
     */
    public static MemorySegment igSetScrollHereX$address() {
        return igSetScrollHereX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollHereX(float center_x_ratio)
     * }
     */
    public static void igSetScrollHereX(float center_x_ratio) {
        var mh$ = igSetScrollHereX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollHereX", center_x_ratio);
            }
            mh$.invokeExact(center_x_ratio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollHereY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollHereY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollHereY(float center_y_ratio)
     * }
     */
    public static FunctionDescriptor igSetScrollHereY$descriptor() {
        return igSetScrollHereY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollHereY(float center_y_ratio)
     * }
     */
    public static MethodHandle igSetScrollHereY$handle() {
        return igSetScrollHereY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollHereY(float center_y_ratio)
     * }
     */
    public static MemorySegment igSetScrollHereY$address() {
        return igSetScrollHereY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollHereY(float center_y_ratio)
     * }
     */
    public static void igSetScrollHereY(float center_y_ratio) {
        var mh$ = igSetScrollHereY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollHereY", center_y_ratio);
            }
            mh$.invokeExact(center_y_ratio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollFromPosX_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollFromPosX_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosX_Float(float local_x, float center_x_ratio)
     * }
     */
    public static FunctionDescriptor igSetScrollFromPosX_Float$descriptor() {
        return igSetScrollFromPosX_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosX_Float(float local_x, float center_x_ratio)
     * }
     */
    public static MethodHandle igSetScrollFromPosX_Float$handle() {
        return igSetScrollFromPosX_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosX_Float(float local_x, float center_x_ratio)
     * }
     */
    public static MemorySegment igSetScrollFromPosX_Float$address() {
        return igSetScrollFromPosX_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollFromPosX_Float(float local_x, float center_x_ratio)
     * }
     */
    public static void igSetScrollFromPosX_Float(float local_x, float center_x_ratio) {
        var mh$ = igSetScrollFromPosX_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollFromPosX_Float", local_x, center_x_ratio);
            }
            mh$.invokeExact(local_x, center_x_ratio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetScrollFromPosY_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetScrollFromPosY_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosY_Float(float local_y, float center_y_ratio)
     * }
     */
    public static FunctionDescriptor igSetScrollFromPosY_Float$descriptor() {
        return igSetScrollFromPosY_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosY_Float(float local_y, float center_y_ratio)
     * }
     */
    public static MethodHandle igSetScrollFromPosY_Float$handle() {
        return igSetScrollFromPosY_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetScrollFromPosY_Float(float local_y, float center_y_ratio)
     * }
     */
    public static MemorySegment igSetScrollFromPosY_Float$address() {
        return igSetScrollFromPosY_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetScrollFromPosY_Float(float local_y, float center_y_ratio)
     * }
     */
    public static void igSetScrollFromPosY_Float(float local_y, float center_y_ratio) {
        var mh$ = igSetScrollFromPosY_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetScrollFromPosY_Float", local_y, center_y_ratio);
            }
            mh$.invokeExact(local_y, center_y_ratio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushFont(ImFont *font)
     * }
     */
    public static FunctionDescriptor igPushFont$descriptor() {
        return igPushFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushFont(ImFont *font)
     * }
     */
    public static MethodHandle igPushFont$handle() {
        return igPushFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushFont(ImFont *font)
     * }
     */
    public static MemorySegment igPushFont$address() {
        return igPushFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushFont(ImFont *font)
     * }
     */
    public static void igPushFont(MemorySegment font) {
        var mh$ = igPushFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushFont", font);
            }
            mh$.invokeExact(font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopFont()
     * }
     */
    public static FunctionDescriptor igPopFont$descriptor() {
        return igPopFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopFont()
     * }
     */
    public static MethodHandle igPopFont$handle() {
        return igPopFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopFont()
     * }
     */
    public static MemorySegment igPopFont$address() {
        return igPopFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopFont()
     * }
     */
    public static void igPopFont() {
        var mh$ = igPopFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopFont");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushStyleColor_U32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushStyleColor_U32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushStyleColor_U32(ImGuiCol idx, ImU32 col)
     * }
     */
    public static FunctionDescriptor igPushStyleColor_U32$descriptor() {
        return igPushStyleColor_U32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushStyleColor_U32(ImGuiCol idx, ImU32 col)
     * }
     */
    public static MethodHandle igPushStyleColor_U32$handle() {
        return igPushStyleColor_U32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushStyleColor_U32(ImGuiCol idx, ImU32 col)
     * }
     */
    public static MemorySegment igPushStyleColor_U32$address() {
        return igPushStyleColor_U32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushStyleColor_U32(ImGuiCol idx, ImU32 col)
     * }
     */
    public static void igPushStyleColor_U32(int idx, int col) {
        var mh$ = igPushStyleColor_U32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushStyleColor_U32", idx, col);
            }
            mh$.invokeExact(idx, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushStyleColor_Vec4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            ImVec4.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushStyleColor_Vec4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushStyleColor_Vec4(ImGuiCol idx, const ImVec4 col)
     * }
     */
    public static FunctionDescriptor igPushStyleColor_Vec4$descriptor() {
        return igPushStyleColor_Vec4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushStyleColor_Vec4(ImGuiCol idx, const ImVec4 col)
     * }
     */
    public static MethodHandle igPushStyleColor_Vec4$handle() {
        return igPushStyleColor_Vec4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushStyleColor_Vec4(ImGuiCol idx, const ImVec4 col)
     * }
     */
    public static MemorySegment igPushStyleColor_Vec4$address() {
        return igPushStyleColor_Vec4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushStyleColor_Vec4(ImGuiCol idx, const ImVec4 col)
     * }
     */
    public static void igPushStyleColor_Vec4(int idx, MemorySegment col) {
        var mh$ = igPushStyleColor_Vec4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushStyleColor_Vec4", idx, col);
            }
            mh$.invokeExact(idx, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopStyleColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopStyleColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopStyleColor(int count)
     * }
     */
    public static FunctionDescriptor igPopStyleColor$descriptor() {
        return igPopStyleColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopStyleColor(int count)
     * }
     */
    public static MethodHandle igPopStyleColor$handle() {
        return igPopStyleColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopStyleColor(int count)
     * }
     */
    public static MemorySegment igPopStyleColor$address() {
        return igPopStyleColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopStyleColor(int count)
     * }
     */
    public static void igPopStyleColor(int count) {
        var mh$ = igPopStyleColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopStyleColor", count);
            }
            mh$.invokeExact(count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushStyleVar_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushStyleVar_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushStyleVar_Float(ImGuiStyleVar idx, float val)
     * }
     */
    public static FunctionDescriptor igPushStyleVar_Float$descriptor() {
        return igPushStyleVar_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushStyleVar_Float(ImGuiStyleVar idx, float val)
     * }
     */
    public static MethodHandle igPushStyleVar_Float$handle() {
        return igPushStyleVar_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushStyleVar_Float(ImGuiStyleVar idx, float val)
     * }
     */
    public static MemorySegment igPushStyleVar_Float$address() {
        return igPushStyleVar_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushStyleVar_Float(ImGuiStyleVar idx, float val)
     * }
     */
    public static void igPushStyleVar_Float(int idx, float val) {
        var mh$ = igPushStyleVar_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushStyleVar_Float", idx, val);
            }
            mh$.invokeExact(idx, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushStyleVar_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushStyleVar_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushStyleVar_Vec2(ImGuiStyleVar idx, const ImVec2 val)
     * }
     */
    public static FunctionDescriptor igPushStyleVar_Vec2$descriptor() {
        return igPushStyleVar_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushStyleVar_Vec2(ImGuiStyleVar idx, const ImVec2 val)
     * }
     */
    public static MethodHandle igPushStyleVar_Vec2$handle() {
        return igPushStyleVar_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushStyleVar_Vec2(ImGuiStyleVar idx, const ImVec2 val)
     * }
     */
    public static MemorySegment igPushStyleVar_Vec2$address() {
        return igPushStyleVar_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushStyleVar_Vec2(ImGuiStyleVar idx, const ImVec2 val)
     * }
     */
    public static void igPushStyleVar_Vec2(int idx, MemorySegment val) {
        var mh$ = igPushStyleVar_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushStyleVar_Vec2", idx, val);
            }
            mh$.invokeExact(idx, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopStyleVar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopStyleVar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopStyleVar(int count)
     * }
     */
    public static FunctionDescriptor igPopStyleVar$descriptor() {
        return igPopStyleVar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopStyleVar(int count)
     * }
     */
    public static MethodHandle igPopStyleVar$handle() {
        return igPopStyleVar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopStyleVar(int count)
     * }
     */
    public static MemorySegment igPopStyleVar$address() {
        return igPopStyleVar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopStyleVar(int count)
     * }
     */
    public static void igPopStyleVar(int count) {
        var mh$ = igPopStyleVar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopStyleVar", count);
            }
            mh$.invokeExact(count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushItemFlag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushItemFlag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushItemFlag(ImGuiItemFlags option, bool enabled)
     * }
     */
    public static FunctionDescriptor igPushItemFlag$descriptor() {
        return igPushItemFlag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushItemFlag(ImGuiItemFlags option, bool enabled)
     * }
     */
    public static MethodHandle igPushItemFlag$handle() {
        return igPushItemFlag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushItemFlag(ImGuiItemFlags option, bool enabled)
     * }
     */
    public static MemorySegment igPushItemFlag$address() {
        return igPushItemFlag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushItemFlag(ImGuiItemFlags option, bool enabled)
     * }
     */
    public static void igPushItemFlag(int option, boolean enabled) {
        var mh$ = igPushItemFlag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushItemFlag", option, enabled);
            }
            mh$.invokeExact(option, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopItemFlag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopItemFlag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopItemFlag()
     * }
     */
    public static FunctionDescriptor igPopItemFlag$descriptor() {
        return igPopItemFlag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopItemFlag()
     * }
     */
    public static MethodHandle igPopItemFlag$handle() {
        return igPopItemFlag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopItemFlag()
     * }
     */
    public static MemorySegment igPopItemFlag$address() {
        return igPopItemFlag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopItemFlag()
     * }
     */
    public static void igPopItemFlag() {
        var mh$ = igPopItemFlag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopItemFlag");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushItemWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushItemWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushItemWidth(float item_width)
     * }
     */
    public static FunctionDescriptor igPushItemWidth$descriptor() {
        return igPushItemWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushItemWidth(float item_width)
     * }
     */
    public static MethodHandle igPushItemWidth$handle() {
        return igPushItemWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushItemWidth(float item_width)
     * }
     */
    public static MemorySegment igPushItemWidth$address() {
        return igPushItemWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushItemWidth(float item_width)
     * }
     */
    public static void igPushItemWidth(float item_width) {
        var mh$ = igPushItemWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushItemWidth", item_width);
            }
            mh$.invokeExact(item_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopItemWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopItemWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopItemWidth()
     * }
     */
    public static FunctionDescriptor igPopItemWidth$descriptor() {
        return igPopItemWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopItemWidth()
     * }
     */
    public static MethodHandle igPopItemWidth$handle() {
        return igPopItemWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopItemWidth()
     * }
     */
    public static MemorySegment igPopItemWidth$address() {
        return igPopItemWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopItemWidth()
     * }
     */
    public static void igPopItemWidth() {
        var mh$ = igPopItemWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopItemWidth");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextItemWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextItemWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextItemWidth(float item_width)
     * }
     */
    public static FunctionDescriptor igSetNextItemWidth$descriptor() {
        return igSetNextItemWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextItemWidth(float item_width)
     * }
     */
    public static MethodHandle igSetNextItemWidth$handle() {
        return igSetNextItemWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextItemWidth(float item_width)
     * }
     */
    public static MemorySegment igSetNextItemWidth$address() {
        return igSetNextItemWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextItemWidth(float item_width)
     * }
     */
    public static void igSetNextItemWidth(float item_width) {
        var mh$ = igSetNextItemWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextItemWidth", item_width);
            }
            mh$.invokeExact(item_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCalcItemWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCalcItemWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igCalcItemWidth()
     * }
     */
    public static FunctionDescriptor igCalcItemWidth$descriptor() {
        return igCalcItemWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igCalcItemWidth()
     * }
     */
    public static MethodHandle igCalcItemWidth$handle() {
        return igCalcItemWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igCalcItemWidth()
     * }
     */
    public static MemorySegment igCalcItemWidth$address() {
        return igCalcItemWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igCalcItemWidth()
     * }
     */
    public static float igCalcItemWidth() {
        var mh$ = igCalcItemWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCalcItemWidth");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushTextWrapPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushTextWrapPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushTextWrapPos(float wrap_local_pos_x)
     * }
     */
    public static FunctionDescriptor igPushTextWrapPos$descriptor() {
        return igPushTextWrapPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushTextWrapPos(float wrap_local_pos_x)
     * }
     */
    public static MethodHandle igPushTextWrapPos$handle() {
        return igPushTextWrapPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushTextWrapPos(float wrap_local_pos_x)
     * }
     */
    public static MemorySegment igPushTextWrapPos$address() {
        return igPushTextWrapPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushTextWrapPos(float wrap_local_pos_x)
     * }
     */
    public static void igPushTextWrapPos(float wrap_local_pos_x) {
        var mh$ = igPushTextWrapPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushTextWrapPos", wrap_local_pos_x);
            }
            mh$.invokeExact(wrap_local_pos_x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopTextWrapPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopTextWrapPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopTextWrapPos()
     * }
     */
    public static FunctionDescriptor igPopTextWrapPos$descriptor() {
        return igPopTextWrapPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopTextWrapPos()
     * }
     */
    public static MethodHandle igPopTextWrapPos$handle() {
        return igPopTextWrapPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopTextWrapPos()
     * }
     */
    public static MemorySegment igPopTextWrapPos$address() {
        return igPopTextWrapPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopTextWrapPos()
     * }
     */
    public static void igPopTextWrapPos() {
        var mh$ = igPopTextWrapPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopTextWrapPos");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFont *igGetFont()
     * }
     */
    public static FunctionDescriptor igGetFont$descriptor() {
        return igGetFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFont *igGetFont()
     * }
     */
    public static MethodHandle igGetFont$handle() {
        return igGetFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFont *igGetFont()
     * }
     */
    public static MemorySegment igGetFont$address() {
        return igGetFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFont *igGetFont()
     * }
     */
    public static MemorySegment igGetFont() {
        var mh$ = igGetFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetFont");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetFontSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetFontSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetFontSize()
     * }
     */
    public static FunctionDescriptor igGetFontSize$descriptor() {
        return igGetFontSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetFontSize()
     * }
     */
    public static MethodHandle igGetFontSize$handle() {
        return igGetFontSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetFontSize()
     * }
     */
    public static MemorySegment igGetFontSize$address() {
        return igGetFontSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetFontSize()
     * }
     */
    public static float igGetFontSize() {
        var mh$ = igGetFontSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetFontSize");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetFontTexUvWhitePixel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetFontTexUvWhitePixel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetFontTexUvWhitePixel(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetFontTexUvWhitePixel$descriptor() {
        return igGetFontTexUvWhitePixel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetFontTexUvWhitePixel(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetFontTexUvWhitePixel$handle() {
        return igGetFontTexUvWhitePixel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetFontTexUvWhitePixel(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetFontTexUvWhitePixel$address() {
        return igGetFontTexUvWhitePixel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetFontTexUvWhitePixel(ImVec2 *pOut)
     * }
     */
    public static void igGetFontTexUvWhitePixel(MemorySegment pOut) {
        var mh$ = igGetFontTexUvWhitePixel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetFontTexUvWhitePixel", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColorU32_Col {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColorU32_Col");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_Col(ImGuiCol idx, float alpha_mul)
     * }
     */
    public static FunctionDescriptor igGetColorU32_Col$descriptor() {
        return igGetColorU32_Col.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_Col(ImGuiCol idx, float alpha_mul)
     * }
     */
    public static MethodHandle igGetColorU32_Col$handle() {
        return igGetColorU32_Col.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_Col(ImGuiCol idx, float alpha_mul)
     * }
     */
    public static MemorySegment igGetColorU32_Col$address() {
        return igGetColorU32_Col.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_Col(ImGuiCol idx, float alpha_mul)
     * }
     */
    public static int igGetColorU32_Col(int idx, float alpha_mul) {
        var mh$ = igGetColorU32_Col.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColorU32_Col", idx, alpha_mul);
            }
            return (int)mh$.invokeExact(idx, alpha_mul);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColorU32_Vec4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            ImVec4.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColorU32_Vec4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_Vec4(const ImVec4 col)
     * }
     */
    public static FunctionDescriptor igGetColorU32_Vec4$descriptor() {
        return igGetColorU32_Vec4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_Vec4(const ImVec4 col)
     * }
     */
    public static MethodHandle igGetColorU32_Vec4$handle() {
        return igGetColorU32_Vec4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_Vec4(const ImVec4 col)
     * }
     */
    public static MemorySegment igGetColorU32_Vec4$address() {
        return igGetColorU32_Vec4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_Vec4(const ImVec4 col)
     * }
     */
    public static int igGetColorU32_Vec4(MemorySegment col) {
        var mh$ = igGetColorU32_Vec4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColorU32_Vec4", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColorU32_U32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColorU32_U32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_U32(ImU32 col, float alpha_mul)
     * }
     */
    public static FunctionDescriptor igGetColorU32_U32$descriptor() {
        return igGetColorU32_U32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_U32(ImU32 col, float alpha_mul)
     * }
     */
    public static MethodHandle igGetColorU32_U32$handle() {
        return igGetColorU32_U32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_U32(ImU32 col, float alpha_mul)
     * }
     */
    public static MemorySegment igGetColorU32_U32$address() {
        return igGetColorU32_U32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImU32 igGetColorU32_U32(ImU32 col, float alpha_mul)
     * }
     */
    public static int igGetColorU32_U32(int col, float alpha_mul) {
        var mh$ = igGetColorU32_U32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColorU32_U32", col, alpha_mul);
            }
            return (int)mh$.invokeExact(col, alpha_mul);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetStyleColorVec4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetStyleColorVec4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImVec4 *igGetStyleColorVec4(ImGuiCol idx)
     * }
     */
    public static FunctionDescriptor igGetStyleColorVec4$descriptor() {
        return igGetStyleColorVec4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImVec4 *igGetStyleColorVec4(ImGuiCol idx)
     * }
     */
    public static MethodHandle igGetStyleColorVec4$handle() {
        return igGetStyleColorVec4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImVec4 *igGetStyleColorVec4(ImGuiCol idx)
     * }
     */
    public static MemorySegment igGetStyleColorVec4$address() {
        return igGetStyleColorVec4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImVec4 *igGetStyleColorVec4(ImGuiCol idx)
     * }
     */
    public static MemorySegment igGetStyleColorVec4(int idx) {
        var mh$ = igGetStyleColorVec4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetStyleColorVec4", idx);
            }
            return (MemorySegment)mh$.invokeExact(idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCursorScreenPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCursorScreenPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetCursorScreenPos(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetCursorScreenPos$descriptor() {
        return igGetCursorScreenPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetCursorScreenPos(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetCursorScreenPos$handle() {
        return igGetCursorScreenPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetCursorScreenPos(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetCursorScreenPos$address() {
        return igGetCursorScreenPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetCursorScreenPos(ImVec2 *pOut)
     * }
     */
    public static void igGetCursorScreenPos(MemorySegment pOut) {
        var mh$ = igGetCursorScreenPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCursorScreenPos", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetCursorScreenPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetCursorScreenPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetCursorScreenPos(const ImVec2 pos)
     * }
     */
    public static FunctionDescriptor igSetCursorScreenPos$descriptor() {
        return igSetCursorScreenPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetCursorScreenPos(const ImVec2 pos)
     * }
     */
    public static MethodHandle igSetCursorScreenPos$handle() {
        return igSetCursorScreenPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetCursorScreenPos(const ImVec2 pos)
     * }
     */
    public static MemorySegment igSetCursorScreenPos$address() {
        return igSetCursorScreenPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetCursorScreenPos(const ImVec2 pos)
     * }
     */
    public static void igSetCursorScreenPos(MemorySegment pos) {
        var mh$ = igSetCursorScreenPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetCursorScreenPos", pos);
            }
            mh$.invokeExact(pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetContentRegionAvail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetContentRegionAvail");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetContentRegionAvail(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetContentRegionAvail$descriptor() {
        return igGetContentRegionAvail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetContentRegionAvail(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetContentRegionAvail$handle() {
        return igGetContentRegionAvail.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetContentRegionAvail(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetContentRegionAvail$address() {
        return igGetContentRegionAvail.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetContentRegionAvail(ImVec2 *pOut)
     * }
     */
    public static void igGetContentRegionAvail(MemorySegment pOut) {
        var mh$ = igGetContentRegionAvail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetContentRegionAvail", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCursorPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCursorPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetCursorPos(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetCursorPos$descriptor() {
        return igGetCursorPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetCursorPos(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetCursorPos$handle() {
        return igGetCursorPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetCursorPos(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetCursorPos$address() {
        return igGetCursorPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetCursorPos(ImVec2 *pOut)
     * }
     */
    public static void igGetCursorPos(MemorySegment pOut) {
        var mh$ = igGetCursorPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCursorPos", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCursorPosX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCursorPosX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetCursorPosX()
     * }
     */
    public static FunctionDescriptor igGetCursorPosX$descriptor() {
        return igGetCursorPosX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetCursorPosX()
     * }
     */
    public static MethodHandle igGetCursorPosX$handle() {
        return igGetCursorPosX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetCursorPosX()
     * }
     */
    public static MemorySegment igGetCursorPosX$address() {
        return igGetCursorPosX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetCursorPosX()
     * }
     */
    public static float igGetCursorPosX() {
        var mh$ = igGetCursorPosX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCursorPosX");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCursorPosY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCursorPosY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetCursorPosY()
     * }
     */
    public static FunctionDescriptor igGetCursorPosY$descriptor() {
        return igGetCursorPosY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetCursorPosY()
     * }
     */
    public static MethodHandle igGetCursorPosY$handle() {
        return igGetCursorPosY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetCursorPosY()
     * }
     */
    public static MemorySegment igGetCursorPosY$address() {
        return igGetCursorPosY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetCursorPosY()
     * }
     */
    public static float igGetCursorPosY() {
        var mh$ = igGetCursorPosY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCursorPosY");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetCursorPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetCursorPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetCursorPos(const ImVec2 local_pos)
     * }
     */
    public static FunctionDescriptor igSetCursorPos$descriptor() {
        return igSetCursorPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetCursorPos(const ImVec2 local_pos)
     * }
     */
    public static MethodHandle igSetCursorPos$handle() {
        return igSetCursorPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetCursorPos(const ImVec2 local_pos)
     * }
     */
    public static MemorySegment igSetCursorPos$address() {
        return igSetCursorPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetCursorPos(const ImVec2 local_pos)
     * }
     */
    public static void igSetCursorPos(MemorySegment local_pos) {
        var mh$ = igSetCursorPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetCursorPos", local_pos);
            }
            mh$.invokeExact(local_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetCursorPosX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetCursorPosX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetCursorPosX(float local_x)
     * }
     */
    public static FunctionDescriptor igSetCursorPosX$descriptor() {
        return igSetCursorPosX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetCursorPosX(float local_x)
     * }
     */
    public static MethodHandle igSetCursorPosX$handle() {
        return igSetCursorPosX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetCursorPosX(float local_x)
     * }
     */
    public static MemorySegment igSetCursorPosX$address() {
        return igSetCursorPosX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetCursorPosX(float local_x)
     * }
     */
    public static void igSetCursorPosX(float local_x) {
        var mh$ = igSetCursorPosX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetCursorPosX", local_x);
            }
            mh$.invokeExact(local_x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetCursorPosY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetCursorPosY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetCursorPosY(float local_y)
     * }
     */
    public static FunctionDescriptor igSetCursorPosY$descriptor() {
        return igSetCursorPosY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetCursorPosY(float local_y)
     * }
     */
    public static MethodHandle igSetCursorPosY$handle() {
        return igSetCursorPosY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetCursorPosY(float local_y)
     * }
     */
    public static MemorySegment igSetCursorPosY$address() {
        return igSetCursorPosY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetCursorPosY(float local_y)
     * }
     */
    public static void igSetCursorPosY(float local_y) {
        var mh$ = igSetCursorPosY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetCursorPosY", local_y);
            }
            mh$.invokeExact(local_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetCursorStartPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetCursorStartPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetCursorStartPos(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetCursorStartPos$descriptor() {
        return igGetCursorStartPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetCursorStartPos(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetCursorStartPos$handle() {
        return igGetCursorStartPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetCursorStartPos(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetCursorStartPos$address() {
        return igGetCursorStartPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetCursorStartPos(ImVec2 *pOut)
     * }
     */
    public static void igGetCursorStartPos(MemorySegment pOut) {
        var mh$ = igGetCursorStartPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetCursorStartPos", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSeparator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSeparator");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSeparator()
     * }
     */
    public static FunctionDescriptor igSeparator$descriptor() {
        return igSeparator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSeparator()
     * }
     */
    public static MethodHandle igSeparator$handle() {
        return igSeparator.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSeparator()
     * }
     */
    public static MemorySegment igSeparator$address() {
        return igSeparator.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSeparator()
     * }
     */
    public static void igSeparator() {
        var mh$ = igSeparator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSeparator");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSameLine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSameLine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSameLine(float offset_from_start_x, float spacing)
     * }
     */
    public static FunctionDescriptor igSameLine$descriptor() {
        return igSameLine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSameLine(float offset_from_start_x, float spacing)
     * }
     */
    public static MethodHandle igSameLine$handle() {
        return igSameLine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSameLine(float offset_from_start_x, float spacing)
     * }
     */
    public static MemorySegment igSameLine$address() {
        return igSameLine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSameLine(float offset_from_start_x, float spacing)
     * }
     */
    public static void igSameLine(float offset_from_start_x, float spacing) {
        var mh$ = igSameLine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSameLine", offset_from_start_x, spacing);
            }
            mh$.invokeExact(offset_from_start_x, spacing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNewLine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNewLine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNewLine()
     * }
     */
    public static FunctionDescriptor igNewLine$descriptor() {
        return igNewLine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNewLine()
     * }
     */
    public static MethodHandle igNewLine$handle() {
        return igNewLine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNewLine()
     * }
     */
    public static MemorySegment igNewLine$address() {
        return igNewLine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNewLine()
     * }
     */
    public static void igNewLine() {
        var mh$ = igNewLine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNewLine");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSpacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSpacing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSpacing()
     * }
     */
    public static FunctionDescriptor igSpacing$descriptor() {
        return igSpacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSpacing()
     * }
     */
    public static MethodHandle igSpacing$handle() {
        return igSpacing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSpacing()
     * }
     */
    public static MemorySegment igSpacing$address() {
        return igSpacing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSpacing()
     * }
     */
    public static void igSpacing() {
        var mh$ = igSpacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSpacing");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDummy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDummy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDummy(const ImVec2 size)
     * }
     */
    public static FunctionDescriptor igDummy$descriptor() {
        return igDummy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDummy(const ImVec2 size)
     * }
     */
    public static MethodHandle igDummy$handle() {
        return igDummy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDummy(const ImVec2 size)
     * }
     */
    public static MemorySegment igDummy$address() {
        return igDummy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDummy(const ImVec2 size)
     * }
     */
    public static void igDummy(MemorySegment size) {
        var mh$ = igDummy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDummy", size);
            }
            mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIndent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIndent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igIndent(float indent_w)
     * }
     */
    public static FunctionDescriptor igIndent$descriptor() {
        return igIndent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igIndent(float indent_w)
     * }
     */
    public static MethodHandle igIndent$handle() {
        return igIndent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igIndent(float indent_w)
     * }
     */
    public static MemorySegment igIndent$address() {
        return igIndent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igIndent(float indent_w)
     * }
     */
    public static void igIndent(float indent_w) {
        var mh$ = igIndent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIndent", indent_w);
            }
            mh$.invokeExact(indent_w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igUnindent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igUnindent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igUnindent(float indent_w)
     * }
     */
    public static FunctionDescriptor igUnindent$descriptor() {
        return igUnindent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igUnindent(float indent_w)
     * }
     */
    public static MethodHandle igUnindent$handle() {
        return igUnindent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igUnindent(float indent_w)
     * }
     */
    public static MemorySegment igUnindent$address() {
        return igUnindent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igUnindent(float indent_w)
     * }
     */
    public static void igUnindent(float indent_w) {
        var mh$ = igUnindent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igUnindent", indent_w);
            }
            mh$.invokeExact(indent_w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBeginGroup()
     * }
     */
    public static FunctionDescriptor igBeginGroup$descriptor() {
        return igBeginGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBeginGroup()
     * }
     */
    public static MethodHandle igBeginGroup$handle() {
        return igBeginGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBeginGroup()
     * }
     */
    public static MemorySegment igBeginGroup$address() {
        return igBeginGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBeginGroup()
     * }
     */
    public static void igBeginGroup() {
        var mh$ = igBeginGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginGroup");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndGroup()
     * }
     */
    public static FunctionDescriptor igEndGroup$descriptor() {
        return igEndGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndGroup()
     * }
     */
    public static MethodHandle igEndGroup$handle() {
        return igEndGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndGroup()
     * }
     */
    public static MemorySegment igEndGroup$address() {
        return igEndGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndGroup()
     * }
     */
    public static void igEndGroup() {
        var mh$ = igEndGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndGroup");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igAlignTextToFramePadding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igAlignTextToFramePadding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igAlignTextToFramePadding()
     * }
     */
    public static FunctionDescriptor igAlignTextToFramePadding$descriptor() {
        return igAlignTextToFramePadding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igAlignTextToFramePadding()
     * }
     */
    public static MethodHandle igAlignTextToFramePadding$handle() {
        return igAlignTextToFramePadding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igAlignTextToFramePadding()
     * }
     */
    public static MemorySegment igAlignTextToFramePadding$address() {
        return igAlignTextToFramePadding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igAlignTextToFramePadding()
     * }
     */
    public static void igAlignTextToFramePadding() {
        var mh$ = igAlignTextToFramePadding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igAlignTextToFramePadding");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetTextLineHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetTextLineHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetTextLineHeight()
     * }
     */
    public static FunctionDescriptor igGetTextLineHeight$descriptor() {
        return igGetTextLineHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetTextLineHeight()
     * }
     */
    public static MethodHandle igGetTextLineHeight$handle() {
        return igGetTextLineHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetTextLineHeight()
     * }
     */
    public static MemorySegment igGetTextLineHeight$address() {
        return igGetTextLineHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetTextLineHeight()
     * }
     */
    public static float igGetTextLineHeight() {
        var mh$ = igGetTextLineHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetTextLineHeight");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetTextLineHeightWithSpacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetTextLineHeightWithSpacing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetTextLineHeightWithSpacing()
     * }
     */
    public static FunctionDescriptor igGetTextLineHeightWithSpacing$descriptor() {
        return igGetTextLineHeightWithSpacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetTextLineHeightWithSpacing()
     * }
     */
    public static MethodHandle igGetTextLineHeightWithSpacing$handle() {
        return igGetTextLineHeightWithSpacing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetTextLineHeightWithSpacing()
     * }
     */
    public static MemorySegment igGetTextLineHeightWithSpacing$address() {
        return igGetTextLineHeightWithSpacing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetTextLineHeightWithSpacing()
     * }
     */
    public static float igGetTextLineHeightWithSpacing() {
        var mh$ = igGetTextLineHeightWithSpacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetTextLineHeightWithSpacing");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetFrameHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetFrameHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetFrameHeight()
     * }
     */
    public static FunctionDescriptor igGetFrameHeight$descriptor() {
        return igGetFrameHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetFrameHeight()
     * }
     */
    public static MethodHandle igGetFrameHeight$handle() {
        return igGetFrameHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetFrameHeight()
     * }
     */
    public static MemorySegment igGetFrameHeight$address() {
        return igGetFrameHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetFrameHeight()
     * }
     */
    public static float igGetFrameHeight() {
        var mh$ = igGetFrameHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetFrameHeight");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetFrameHeightWithSpacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetFrameHeightWithSpacing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetFrameHeightWithSpacing()
     * }
     */
    public static FunctionDescriptor igGetFrameHeightWithSpacing$descriptor() {
        return igGetFrameHeightWithSpacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetFrameHeightWithSpacing()
     * }
     */
    public static MethodHandle igGetFrameHeightWithSpacing$handle() {
        return igGetFrameHeightWithSpacing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetFrameHeightWithSpacing()
     * }
     */
    public static MemorySegment igGetFrameHeightWithSpacing$address() {
        return igGetFrameHeightWithSpacing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetFrameHeightWithSpacing()
     * }
     */
    public static float igGetFrameHeightWithSpacing() {
        var mh$ = igGetFrameHeightWithSpacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetFrameHeightWithSpacing");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushID_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushID_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushID_Str(const char *str_id)
     * }
     */
    public static FunctionDescriptor igPushID_Str$descriptor() {
        return igPushID_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushID_Str(const char *str_id)
     * }
     */
    public static MethodHandle igPushID_Str$handle() {
        return igPushID_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushID_Str(const char *str_id)
     * }
     */
    public static MemorySegment igPushID_Str$address() {
        return igPushID_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushID_Str(const char *str_id)
     * }
     */
    public static void igPushID_Str(MemorySegment str_id) {
        var mh$ = igPushID_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushID_Str", str_id);
            }
            mh$.invokeExact(str_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushID_StrStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushID_StrStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushID_StrStr(const char *str_id_begin, const char *str_id_end)
     * }
     */
    public static FunctionDescriptor igPushID_StrStr$descriptor() {
        return igPushID_StrStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushID_StrStr(const char *str_id_begin, const char *str_id_end)
     * }
     */
    public static MethodHandle igPushID_StrStr$handle() {
        return igPushID_StrStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushID_StrStr(const char *str_id_begin, const char *str_id_end)
     * }
     */
    public static MemorySegment igPushID_StrStr$address() {
        return igPushID_StrStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushID_StrStr(const char *str_id_begin, const char *str_id_end)
     * }
     */
    public static void igPushID_StrStr(MemorySegment str_id_begin, MemorySegment str_id_end) {
        var mh$ = igPushID_StrStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushID_StrStr", str_id_begin, str_id_end);
            }
            mh$.invokeExact(str_id_begin, str_id_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushID_Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushID_Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushID_Ptr(const void *ptr_id)
     * }
     */
    public static FunctionDescriptor igPushID_Ptr$descriptor() {
        return igPushID_Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushID_Ptr(const void *ptr_id)
     * }
     */
    public static MethodHandle igPushID_Ptr$handle() {
        return igPushID_Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushID_Ptr(const void *ptr_id)
     * }
     */
    public static MemorySegment igPushID_Ptr$address() {
        return igPushID_Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushID_Ptr(const void *ptr_id)
     * }
     */
    public static void igPushID_Ptr(MemorySegment ptr_id) {
        var mh$ = igPushID_Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushID_Ptr", ptr_id);
            }
            mh$.invokeExact(ptr_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushID_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushID_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushID_Int(int int_id)
     * }
     */
    public static FunctionDescriptor igPushID_Int$descriptor() {
        return igPushID_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushID_Int(int int_id)
     * }
     */
    public static MethodHandle igPushID_Int$handle() {
        return igPushID_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushID_Int(int int_id)
     * }
     */
    public static MemorySegment igPushID_Int$address() {
        return igPushID_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushID_Int(int int_id)
     * }
     */
    public static void igPushID_Int(int int_id) {
        var mh$ = igPushID_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushID_Int", int_id);
            }
            mh$.invokeExact(int_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopID()
     * }
     */
    public static FunctionDescriptor igPopID$descriptor() {
        return igPopID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopID()
     * }
     */
    public static MethodHandle igPopID$handle() {
        return igPopID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopID()
     * }
     */
    public static MemorySegment igPopID$address() {
        return igPopID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopID()
     * }
     */
    public static void igPopID() {
        var mh$ = igPopID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopID");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetID_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetID_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Str(const char *str_id)
     * }
     */
    public static FunctionDescriptor igGetID_Str$descriptor() {
        return igGetID_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Str(const char *str_id)
     * }
     */
    public static MethodHandle igGetID_Str$handle() {
        return igGetID_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Str(const char *str_id)
     * }
     */
    public static MemorySegment igGetID_Str$address() {
        return igGetID_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Str(const char *str_id)
     * }
     */
    public static int igGetID_Str(MemorySegment str_id) {
        var mh$ = igGetID_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetID_Str", str_id);
            }
            return (int)mh$.invokeExact(str_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetID_StrStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetID_StrStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_StrStr(const char *str_id_begin, const char *str_id_end)
     * }
     */
    public static FunctionDescriptor igGetID_StrStr$descriptor() {
        return igGetID_StrStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_StrStr(const char *str_id_begin, const char *str_id_end)
     * }
     */
    public static MethodHandle igGetID_StrStr$handle() {
        return igGetID_StrStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_StrStr(const char *str_id_begin, const char *str_id_end)
     * }
     */
    public static MemorySegment igGetID_StrStr$address() {
        return igGetID_StrStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetID_StrStr(const char *str_id_begin, const char *str_id_end)
     * }
     */
    public static int igGetID_StrStr(MemorySegment str_id_begin, MemorySegment str_id_end) {
        var mh$ = igGetID_StrStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetID_StrStr", str_id_begin, str_id_end);
            }
            return (int)mh$.invokeExact(str_id_begin, str_id_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetID_Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetID_Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Ptr(const void *ptr_id)
     * }
     */
    public static FunctionDescriptor igGetID_Ptr$descriptor() {
        return igGetID_Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Ptr(const void *ptr_id)
     * }
     */
    public static MethodHandle igGetID_Ptr$handle() {
        return igGetID_Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Ptr(const void *ptr_id)
     * }
     */
    public static MemorySegment igGetID_Ptr$address() {
        return igGetID_Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Ptr(const void *ptr_id)
     * }
     */
    public static int igGetID_Ptr(MemorySegment ptr_id) {
        var mh$ = igGetID_Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetID_Ptr", ptr_id);
            }
            return (int)mh$.invokeExact(ptr_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetID_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetID_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Int(int int_id)
     * }
     */
    public static FunctionDescriptor igGetID_Int$descriptor() {
        return igGetID_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Int(int int_id)
     * }
     */
    public static MethodHandle igGetID_Int$handle() {
        return igGetID_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Int(int int_id)
     * }
     */
    public static MemorySegment igGetID_Int$address() {
        return igGetID_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetID_Int(int int_id)
     * }
     */
    public static int igGetID_Int(int int_id) {
        var mh$ = igGetID_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetID_Int", int_id);
            }
            return (int)mh$.invokeExact(int_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTextUnformatted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTextUnformatted");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTextUnformatted(const char *text, const char *text_end)
     * }
     */
    public static FunctionDescriptor igTextUnformatted$descriptor() {
        return igTextUnformatted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTextUnformatted(const char *text, const char *text_end)
     * }
     */
    public static MethodHandle igTextUnformatted$handle() {
        return igTextUnformatted.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTextUnformatted(const char *text, const char *text_end)
     * }
     */
    public static MemorySegment igTextUnformatted$address() {
        return igTextUnformatted.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTextUnformatted(const char *text, const char *text_end)
     * }
     */
    public static void igTextUnformatted(MemorySegment text, MemorySegment text_end) {
        var mh$ = igTextUnformatted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTextUnformatted", text, text_end);
            }
            mh$.invokeExact(text, text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igText(const char *fmt, ...)
     * }
     */
    public static class igText {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igText");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igText(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igText(const char *fmt, ...)
         * }
         */
        public static igText makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igText(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igText", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igTextV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTextV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTextV(const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igTextV$descriptor() {
        return igTextV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTextV(const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igTextV$handle() {
        return igTextV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTextV(const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igTextV$address() {
        return igTextV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTextV(const char *fmt, va_list args)
     * }
     */
    public static void igTextV(MemorySegment fmt, MemorySegment args) {
        var mh$ = igTextV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTextV", fmt, args);
            }
            mh$.invokeExact(fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igTextColored(const ImVec4 col, const char *fmt, ...)
     * }
     */
    public static class igTextColored {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                ImVec4.layout(),
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igTextColored");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igTextColored(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igTextColored(const ImVec4 col, const char *fmt, ...)
         * }
         */
        public static igTextColored makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igTextColored(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment col, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igTextColored", col, fmt, x2);
                }
                spreader.invokeExact(col, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igTextColoredV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec4.layout(),
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTextColoredV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTextColoredV(const ImVec4 col, const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igTextColoredV$descriptor() {
        return igTextColoredV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTextColoredV(const ImVec4 col, const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igTextColoredV$handle() {
        return igTextColoredV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTextColoredV(const ImVec4 col, const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igTextColoredV$address() {
        return igTextColoredV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTextColoredV(const ImVec4 col, const char *fmt, va_list args)
     * }
     */
    public static void igTextColoredV(MemorySegment col, MemorySegment fmt, MemorySegment args) {
        var mh$ = igTextColoredV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTextColoredV", col, fmt, args);
            }
            mh$.invokeExact(col, fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igTextDisabled(const char *fmt, ...)
     * }
     */
    public static class igTextDisabled {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igTextDisabled");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igTextDisabled(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igTextDisabled(const char *fmt, ...)
         * }
         */
        public static igTextDisabled makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igTextDisabled(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igTextDisabled", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igTextDisabledV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTextDisabledV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTextDisabledV(const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igTextDisabledV$descriptor() {
        return igTextDisabledV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTextDisabledV(const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igTextDisabledV$handle() {
        return igTextDisabledV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTextDisabledV(const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igTextDisabledV$address() {
        return igTextDisabledV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTextDisabledV(const char *fmt, va_list args)
     * }
     */
    public static void igTextDisabledV(MemorySegment fmt, MemorySegment args) {
        var mh$ = igTextDisabledV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTextDisabledV", fmt, args);
            }
            mh$.invokeExact(fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igTextWrapped(const char *fmt, ...)
     * }
     */
    public static class igTextWrapped {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igTextWrapped");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igTextWrapped(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igTextWrapped(const char *fmt, ...)
         * }
         */
        public static igTextWrapped makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igTextWrapped(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igTextWrapped", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igTextWrappedV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTextWrappedV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTextWrappedV(const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igTextWrappedV$descriptor() {
        return igTextWrappedV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTextWrappedV(const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igTextWrappedV$handle() {
        return igTextWrappedV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTextWrappedV(const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igTextWrappedV$address() {
        return igTextWrappedV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTextWrappedV(const char *fmt, va_list args)
     * }
     */
    public static void igTextWrappedV(MemorySegment fmt, MemorySegment args) {
        var mh$ = igTextWrappedV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTextWrappedV", fmt, args);
            }
            mh$.invokeExact(fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igLabelText(const char *label, const char *fmt, ...)
     * }
     */
    public static class igLabelText {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER,
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igLabelText");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igLabelText(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igLabelText(const char *label, const char *fmt, ...)
         * }
         */
        public static igLabelText makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igLabelText(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment label, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igLabelText", label, fmt, x2);
                }
                spreader.invokeExact(label, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igLabelTextV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLabelTextV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLabelTextV(const char *label, const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igLabelTextV$descriptor() {
        return igLabelTextV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLabelTextV(const char *label, const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igLabelTextV$handle() {
        return igLabelTextV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLabelTextV(const char *label, const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igLabelTextV$address() {
        return igLabelTextV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLabelTextV(const char *label, const char *fmt, va_list args)
     * }
     */
    public static void igLabelTextV(MemorySegment label, MemorySegment fmt, MemorySegment args) {
        var mh$ = igLabelTextV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLabelTextV", label, fmt, args);
            }
            mh$.invokeExact(label, fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igBulletText(const char *fmt, ...)
     * }
     */
    public static class igBulletText {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igBulletText");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igBulletText(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igBulletText(const char *fmt, ...)
         * }
         */
        public static igBulletText makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igBulletText(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igBulletText", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igBulletTextV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBulletTextV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBulletTextV(const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igBulletTextV$descriptor() {
        return igBulletTextV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBulletTextV(const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igBulletTextV$handle() {
        return igBulletTextV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBulletTextV(const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igBulletTextV$address() {
        return igBulletTextV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBulletTextV(const char *fmt, va_list args)
     * }
     */
    public static void igBulletTextV(MemorySegment fmt, MemorySegment args) {
        var mh$ = igBulletTextV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBulletTextV", fmt, args);
            }
            mh$.invokeExact(fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSeparatorText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSeparatorText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSeparatorText(const char *label)
     * }
     */
    public static FunctionDescriptor igSeparatorText$descriptor() {
        return igSeparatorText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSeparatorText(const char *label)
     * }
     */
    public static MethodHandle igSeparatorText$handle() {
        return igSeparatorText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSeparatorText(const char *label)
     * }
     */
    public static MemorySegment igSeparatorText$address() {
        return igSeparatorText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSeparatorText(const char *label)
     * }
     */
    public static void igSeparatorText(MemorySegment label) {
        var mh$ = igSeparatorText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSeparatorText", label);
            }
            mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igButton(const char *label, const ImVec2 size)
     * }
     */
    public static FunctionDescriptor igButton$descriptor() {
        return igButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igButton(const char *label, const ImVec2 size)
     * }
     */
    public static MethodHandle igButton$handle() {
        return igButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igButton(const char *label, const ImVec2 size)
     * }
     */
    public static MemorySegment igButton$address() {
        return igButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igButton(const char *label, const ImVec2 size)
     * }
     */
    public static boolean igButton(MemorySegment label, MemorySegment size) {
        var mh$ = igButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igButton", label, size);
            }
            return (boolean)mh$.invokeExact(label, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSmallButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSmallButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSmallButton(const char *label)
     * }
     */
    public static FunctionDescriptor igSmallButton$descriptor() {
        return igSmallButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSmallButton(const char *label)
     * }
     */
    public static MethodHandle igSmallButton$handle() {
        return igSmallButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSmallButton(const char *label)
     * }
     */
    public static MemorySegment igSmallButton$address() {
        return igSmallButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSmallButton(const char *label)
     * }
     */
    public static boolean igSmallButton(MemorySegment label) {
        var mh$ = igSmallButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSmallButton", label);
            }
            return (boolean)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInvisibleButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInvisibleButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInvisibleButton(const char *str_id, const ImVec2 size, ImGuiButtonFlags flags)
     * }
     */
    public static FunctionDescriptor igInvisibleButton$descriptor() {
        return igInvisibleButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInvisibleButton(const char *str_id, const ImVec2 size, ImGuiButtonFlags flags)
     * }
     */
    public static MethodHandle igInvisibleButton$handle() {
        return igInvisibleButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInvisibleButton(const char *str_id, const ImVec2 size, ImGuiButtonFlags flags)
     * }
     */
    public static MemorySegment igInvisibleButton$address() {
        return igInvisibleButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInvisibleButton(const char *str_id, const ImVec2 size, ImGuiButtonFlags flags)
     * }
     */
    public static boolean igInvisibleButton(MemorySegment str_id, MemorySegment size, int flags) {
        var mh$ = igInvisibleButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInvisibleButton", str_id, size, flags);
            }
            return (boolean)mh$.invokeExact(str_id, size, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igArrowButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igArrowButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igArrowButton(const char *str_id, ImGuiDir dir)
     * }
     */
    public static FunctionDescriptor igArrowButton$descriptor() {
        return igArrowButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igArrowButton(const char *str_id, ImGuiDir dir)
     * }
     */
    public static MethodHandle igArrowButton$handle() {
        return igArrowButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igArrowButton(const char *str_id, ImGuiDir dir)
     * }
     */
    public static MemorySegment igArrowButton$address() {
        return igArrowButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igArrowButton(const char *str_id, ImGuiDir dir)
     * }
     */
    public static boolean igArrowButton(MemorySegment str_id, int dir) {
        var mh$ = igArrowButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igArrowButton", str_id, dir);
            }
            return (boolean)mh$.invokeExact(str_id, dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCheckbox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCheckbox");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCheckbox(const char *label, bool *v)
     * }
     */
    public static FunctionDescriptor igCheckbox$descriptor() {
        return igCheckbox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCheckbox(const char *label, bool *v)
     * }
     */
    public static MethodHandle igCheckbox$handle() {
        return igCheckbox.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCheckbox(const char *label, bool *v)
     * }
     */
    public static MemorySegment igCheckbox$address() {
        return igCheckbox.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCheckbox(const char *label, bool *v)
     * }
     */
    public static boolean igCheckbox(MemorySegment label, MemorySegment v) {
        var mh$ = igCheckbox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCheckbox", label, v);
            }
            return (boolean)mh$.invokeExact(label, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCheckboxFlags_IntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCheckboxFlags_IntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_IntPtr(const char *label, int *flags, int flags_value)
     * }
     */
    public static FunctionDescriptor igCheckboxFlags_IntPtr$descriptor() {
        return igCheckboxFlags_IntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_IntPtr(const char *label, int *flags, int flags_value)
     * }
     */
    public static MethodHandle igCheckboxFlags_IntPtr$handle() {
        return igCheckboxFlags_IntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_IntPtr(const char *label, int *flags, int flags_value)
     * }
     */
    public static MemorySegment igCheckboxFlags_IntPtr$address() {
        return igCheckboxFlags_IntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_IntPtr(const char *label, int *flags, int flags_value)
     * }
     */
    public static boolean igCheckboxFlags_IntPtr(MemorySegment label, MemorySegment flags, int flags_value) {
        var mh$ = igCheckboxFlags_IntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCheckboxFlags_IntPtr", label, flags, flags_value);
            }
            return (boolean)mh$.invokeExact(label, flags, flags_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCheckboxFlags_UintPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCheckboxFlags_UintPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_UintPtr(const char *label, unsigned int *flags, unsigned int flags_value)
     * }
     */
    public static FunctionDescriptor igCheckboxFlags_UintPtr$descriptor() {
        return igCheckboxFlags_UintPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_UintPtr(const char *label, unsigned int *flags, unsigned int flags_value)
     * }
     */
    public static MethodHandle igCheckboxFlags_UintPtr$handle() {
        return igCheckboxFlags_UintPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_UintPtr(const char *label, unsigned int *flags, unsigned int flags_value)
     * }
     */
    public static MemorySegment igCheckboxFlags_UintPtr$address() {
        return igCheckboxFlags_UintPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCheckboxFlags_UintPtr(const char *label, unsigned int *flags, unsigned int flags_value)
     * }
     */
    public static boolean igCheckboxFlags_UintPtr(MemorySegment label, MemorySegment flags, int flags_value) {
        var mh$ = igCheckboxFlags_UintPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCheckboxFlags_UintPtr", label, flags, flags_value);
            }
            return (boolean)mh$.invokeExact(label, flags, flags_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRadioButton_Bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRadioButton_Bool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igRadioButton_Bool(const char *label, bool active)
     * }
     */
    public static FunctionDescriptor igRadioButton_Bool$descriptor() {
        return igRadioButton_Bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igRadioButton_Bool(const char *label, bool active)
     * }
     */
    public static MethodHandle igRadioButton_Bool$handle() {
        return igRadioButton_Bool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igRadioButton_Bool(const char *label, bool active)
     * }
     */
    public static MemorySegment igRadioButton_Bool$address() {
        return igRadioButton_Bool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igRadioButton_Bool(const char *label, bool active)
     * }
     */
    public static boolean igRadioButton_Bool(MemorySegment label, boolean active) {
        var mh$ = igRadioButton_Bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRadioButton_Bool", label, active);
            }
            return (boolean)mh$.invokeExact(label, active);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRadioButton_IntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRadioButton_IntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igRadioButton_IntPtr(const char *label, int *v, int v_button)
     * }
     */
    public static FunctionDescriptor igRadioButton_IntPtr$descriptor() {
        return igRadioButton_IntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igRadioButton_IntPtr(const char *label, int *v, int v_button)
     * }
     */
    public static MethodHandle igRadioButton_IntPtr$handle() {
        return igRadioButton_IntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igRadioButton_IntPtr(const char *label, int *v, int v_button)
     * }
     */
    public static MemorySegment igRadioButton_IntPtr$address() {
        return igRadioButton_IntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igRadioButton_IntPtr(const char *label, int *v, int v_button)
     * }
     */
    public static boolean igRadioButton_IntPtr(MemorySegment label, MemorySegment v, int v_button) {
        var mh$ = igRadioButton_IntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRadioButton_IntPtr", label, v, v_button);
            }
            return (boolean)mh$.invokeExact(label, v, v_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igProgressBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT,
            ImVec2.layout(),
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igProgressBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igProgressBar(float fraction, const ImVec2 size_arg, const char *overlay)
     * }
     */
    public static FunctionDescriptor igProgressBar$descriptor() {
        return igProgressBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igProgressBar(float fraction, const ImVec2 size_arg, const char *overlay)
     * }
     */
    public static MethodHandle igProgressBar$handle() {
        return igProgressBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igProgressBar(float fraction, const ImVec2 size_arg, const char *overlay)
     * }
     */
    public static MemorySegment igProgressBar$address() {
        return igProgressBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igProgressBar(float fraction, const ImVec2 size_arg, const char *overlay)
     * }
     */
    public static void igProgressBar(float fraction, MemorySegment size_arg, MemorySegment overlay) {
        var mh$ = igProgressBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igProgressBar", fraction, size_arg, overlay);
            }
            mh$.invokeExact(fraction, size_arg, overlay);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBullet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBullet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBullet()
     * }
     */
    public static FunctionDescriptor igBullet$descriptor() {
        return igBullet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBullet()
     * }
     */
    public static MethodHandle igBullet$handle() {
        return igBullet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBullet()
     * }
     */
    public static MemorySegment igBullet$address() {
        return igBullet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBullet()
     * }
     */
    public static void igBullet() {
        var mh$ = igBullet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBullet");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTextLink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTextLink");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTextLink(const char *label)
     * }
     */
    public static FunctionDescriptor igTextLink$descriptor() {
        return igTextLink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTextLink(const char *label)
     * }
     */
    public static MethodHandle igTextLink$handle() {
        return igTextLink.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTextLink(const char *label)
     * }
     */
    public static MemorySegment igTextLink$address() {
        return igTextLink.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTextLink(const char *label)
     * }
     */
    public static boolean igTextLink(MemorySegment label) {
        var mh$ = igTextLink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTextLink", label);
            }
            return (boolean)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTextLinkOpenURL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTextLinkOpenURL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTextLinkOpenURL(const char *label, const char *url)
     * }
     */
    public static FunctionDescriptor igTextLinkOpenURL$descriptor() {
        return igTextLinkOpenURL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTextLinkOpenURL(const char *label, const char *url)
     * }
     */
    public static MethodHandle igTextLinkOpenURL$handle() {
        return igTextLinkOpenURL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTextLinkOpenURL(const char *label, const char *url)
     * }
     */
    public static MemorySegment igTextLinkOpenURL$address() {
        return igTextLinkOpenURL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTextLinkOpenURL(const char *label, const char *url)
     * }
     */
    public static void igTextLinkOpenURL(MemorySegment label, MemorySegment url) {
        var mh$ = igTextLinkOpenURL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTextLinkOpenURL", label, url);
            }
            mh$.invokeExact(label, url);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec4.layout(),
            ImVec4.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImage(ImTextureID user_texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 tint_col, const ImVec4 border_col)
     * }
     */
    public static FunctionDescriptor igImage$descriptor() {
        return igImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImage(ImTextureID user_texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 tint_col, const ImVec4 border_col)
     * }
     */
    public static MethodHandle igImage$handle() {
        return igImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImage(ImTextureID user_texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 tint_col, const ImVec4 border_col)
     * }
     */
    public static MemorySegment igImage$address() {
        return igImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImage(ImTextureID user_texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 tint_col, const ImVec4 border_col)
     * }
     */
    public static void igImage(MemorySegment user_texture_id, MemorySegment image_size, MemorySegment uv0, MemorySegment uv1, MemorySegment tint_col, MemorySegment border_col) {
        var mh$ = igImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImage", user_texture_id, image_size, uv0, uv1, tint_col, border_col);
            }
            mh$.invokeExact(user_texture_id, image_size, uv0, uv1, tint_col, border_col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImageButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec4.layout(),
            ImVec4.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImageButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImageButton(const char *str_id, ImTextureID user_texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 bg_col, const ImVec4 tint_col)
     * }
     */
    public static FunctionDescriptor igImageButton$descriptor() {
        return igImageButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImageButton(const char *str_id, ImTextureID user_texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 bg_col, const ImVec4 tint_col)
     * }
     */
    public static MethodHandle igImageButton$handle() {
        return igImageButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImageButton(const char *str_id, ImTextureID user_texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 bg_col, const ImVec4 tint_col)
     * }
     */
    public static MemorySegment igImageButton$address() {
        return igImageButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImageButton(const char *str_id, ImTextureID user_texture_id, const ImVec2 image_size, const ImVec2 uv0, const ImVec2 uv1, const ImVec4 bg_col, const ImVec4 tint_col)
     * }
     */
    public static boolean igImageButton(MemorySegment str_id, MemorySegment user_texture_id, MemorySegment image_size, MemorySegment uv0, MemorySegment uv1, MemorySegment bg_col, MemorySegment tint_col) {
        var mh$ = igImageButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImageButton", str_id, user_texture_id, image_size, uv0, uv1, bg_col, tint_col);
            }
            return (boolean)mh$.invokeExact(str_id, user_texture_id, image_size, uv0, uv1, bg_col, tint_col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginCombo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginCombo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginCombo(const char *label, const char *preview_value, ImGuiComboFlags flags)
     * }
     */
    public static FunctionDescriptor igBeginCombo$descriptor() {
        return igBeginCombo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginCombo(const char *label, const char *preview_value, ImGuiComboFlags flags)
     * }
     */
    public static MethodHandle igBeginCombo$handle() {
        return igBeginCombo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginCombo(const char *label, const char *preview_value, ImGuiComboFlags flags)
     * }
     */
    public static MemorySegment igBeginCombo$address() {
        return igBeginCombo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginCombo(const char *label, const char *preview_value, ImGuiComboFlags flags)
     * }
     */
    public static boolean igBeginCombo(MemorySegment label, MemorySegment preview_value, int flags) {
        var mh$ = igBeginCombo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginCombo", label, preview_value, flags);
            }
            return (boolean)mh$.invokeExact(label, preview_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndCombo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndCombo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndCombo()
     * }
     */
    public static FunctionDescriptor igEndCombo$descriptor() {
        return igEndCombo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndCombo()
     * }
     */
    public static MethodHandle igEndCombo$handle() {
        return igEndCombo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndCombo()
     * }
     */
    public static MemorySegment igEndCombo$address() {
        return igEndCombo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndCombo()
     * }
     */
    public static void igEndCombo() {
        var mh$ = igEndCombo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndCombo");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCombo_Str_arr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCombo_Str_arr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCombo_Str_arr(const char *label, int *current_item, const char *const items[], int items_count, int popup_max_height_in_items)
     * }
     */
    public static FunctionDescriptor igCombo_Str_arr$descriptor() {
        return igCombo_Str_arr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCombo_Str_arr(const char *label, int *current_item, const char *const items[], int items_count, int popup_max_height_in_items)
     * }
     */
    public static MethodHandle igCombo_Str_arr$handle() {
        return igCombo_Str_arr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCombo_Str_arr(const char *label, int *current_item, const char *const items[], int items_count, int popup_max_height_in_items)
     * }
     */
    public static MemorySegment igCombo_Str_arr$address() {
        return igCombo_Str_arr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCombo_Str_arr(const char *label, int *current_item, const char *const items[], int items_count, int popup_max_height_in_items)
     * }
     */
    public static boolean igCombo_Str_arr(MemorySegment label, MemorySegment current_item, MemorySegment items, int items_count, int popup_max_height_in_items) {
        var mh$ = igCombo_Str_arr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCombo_Str_arr", label, current_item, items, items_count, popup_max_height_in_items);
            }
            return (boolean)mh$.invokeExact(label, current_item, items, items_count, popup_max_height_in_items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCombo_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCombo_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCombo_Str(const char *label, int *current_item, const char *items_separated_by_zeros, int popup_max_height_in_items)
     * }
     */
    public static FunctionDescriptor igCombo_Str$descriptor() {
        return igCombo_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCombo_Str(const char *label, int *current_item, const char *items_separated_by_zeros, int popup_max_height_in_items)
     * }
     */
    public static MethodHandle igCombo_Str$handle() {
        return igCombo_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCombo_Str(const char *label, int *current_item, const char *items_separated_by_zeros, int popup_max_height_in_items)
     * }
     */
    public static MemorySegment igCombo_Str$address() {
        return igCombo_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCombo_Str(const char *label, int *current_item, const char *items_separated_by_zeros, int popup_max_height_in_items)
     * }
     */
    public static boolean igCombo_Str(MemorySegment label, MemorySegment current_item, MemorySegment items_separated_by_zeros, int popup_max_height_in_items) {
        var mh$ = igCombo_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCombo_Str", label, current_item, items_separated_by_zeros, popup_max_height_in_items);
            }
            return (boolean)mh$.invokeExact(label, current_item, items_separated_by_zeros, popup_max_height_in_items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCombo_FnStrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCombo_FnStrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCombo_FnStrPtr(const char *label, int *current_item, const char *(*getter)(void *, int), void *user_data, int items_count, int popup_max_height_in_items)
     * }
     */
    public static FunctionDescriptor igCombo_FnStrPtr$descriptor() {
        return igCombo_FnStrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCombo_FnStrPtr(const char *label, int *current_item, const char *(*getter)(void *, int), void *user_data, int items_count, int popup_max_height_in_items)
     * }
     */
    public static MethodHandle igCombo_FnStrPtr$handle() {
        return igCombo_FnStrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCombo_FnStrPtr(const char *label, int *current_item, const char *(*getter)(void *, int), void *user_data, int items_count, int popup_max_height_in_items)
     * }
     */
    public static MemorySegment igCombo_FnStrPtr$address() {
        return igCombo_FnStrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCombo_FnStrPtr(const char *label, int *current_item, const char *(*getter)(void *, int), void *user_data, int items_count, int popup_max_height_in_items)
     * }
     */
    public static boolean igCombo_FnStrPtr(MemorySegment label, MemorySegment current_item, MemorySegment getter, MemorySegment user_data, int items_count, int popup_max_height_in_items) {
        var mh$ = igCombo_FnStrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCombo_FnStrPtr", label, current_item, getter, user_data, items_count, popup_max_height_in_items);
            }
            return (boolean)mh$.invokeExact(label, current_item, getter, user_data, items_count, popup_max_height_in_items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragFloat(const char *label, float *v, float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragFloat$descriptor() {
        return igDragFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragFloat(const char *label, float *v, float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragFloat$handle() {
        return igDragFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragFloat(const char *label, float *v, float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragFloat$address() {
        return igDragFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragFloat(const char *label, float *v, float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragFloat(MemorySegment label, MemorySegment v, float v_speed, float v_min, float v_max, MemorySegment format, int flags) {
        var mh$ = igDragFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragFloat", label, v, v_speed, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_speed, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragFloat2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragFloat2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragFloat2(const char *label, float v[2], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragFloat2$descriptor() {
        return igDragFloat2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragFloat2(const char *label, float v[2], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragFloat2$handle() {
        return igDragFloat2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragFloat2(const char *label, float v[2], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragFloat2$address() {
        return igDragFloat2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragFloat2(const char *label, float v[2], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragFloat2(MemorySegment label, MemorySegment v, float v_speed, float v_min, float v_max, MemorySegment format, int flags) {
        var mh$ = igDragFloat2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragFloat2", label, v, v_speed, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_speed, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragFloat3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragFloat3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragFloat3(const char *label, float v[3], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragFloat3$descriptor() {
        return igDragFloat3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragFloat3(const char *label, float v[3], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragFloat3$handle() {
        return igDragFloat3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragFloat3(const char *label, float v[3], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragFloat3$address() {
        return igDragFloat3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragFloat3(const char *label, float v[3], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragFloat3(MemorySegment label, MemorySegment v, float v_speed, float v_min, float v_max, MemorySegment format, int flags) {
        var mh$ = igDragFloat3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragFloat3", label, v, v_speed, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_speed, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragFloat4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragFloat4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragFloat4(const char *label, float v[4], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragFloat4$descriptor() {
        return igDragFloat4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragFloat4(const char *label, float v[4], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragFloat4$handle() {
        return igDragFloat4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragFloat4(const char *label, float v[4], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragFloat4$address() {
        return igDragFloat4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragFloat4(const char *label, float v[4], float v_speed, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragFloat4(MemorySegment label, MemorySegment v, float v_speed, float v_min, float v_max, MemorySegment format, int flags) {
        var mh$ = igDragFloat4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragFloat4", label, v, v_speed, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_speed, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragFloatRange2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragFloatRange2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragFloatRange2(const char *label, float *v_current_min, float *v_current_max, float v_speed, float v_min, float v_max, const char *format, const char *format_max, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragFloatRange2$descriptor() {
        return igDragFloatRange2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragFloatRange2(const char *label, float *v_current_min, float *v_current_max, float v_speed, float v_min, float v_max, const char *format, const char *format_max, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragFloatRange2$handle() {
        return igDragFloatRange2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragFloatRange2(const char *label, float *v_current_min, float *v_current_max, float v_speed, float v_min, float v_max, const char *format, const char *format_max, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragFloatRange2$address() {
        return igDragFloatRange2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragFloatRange2(const char *label, float *v_current_min, float *v_current_max, float v_speed, float v_min, float v_max, const char *format, const char *format_max, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragFloatRange2(MemorySegment label, MemorySegment v_current_min, MemorySegment v_current_max, float v_speed, float v_min, float v_max, MemorySegment format, MemorySegment format_max, int flags) {
        var mh$ = igDragFloatRange2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragFloatRange2", label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
            }
            return (boolean)mh$.invokeExact(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragInt(const char *label, int *v, float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragInt$descriptor() {
        return igDragInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragInt(const char *label, int *v, float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragInt$handle() {
        return igDragInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragInt(const char *label, int *v, float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragInt$address() {
        return igDragInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragInt(const char *label, int *v, float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragInt(MemorySegment label, MemorySegment v, float v_speed, int v_min, int v_max, MemorySegment format, int flags) {
        var mh$ = igDragInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragInt", label, v, v_speed, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_speed, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragInt2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragInt2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragInt2(const char *label, int v[2], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragInt2$descriptor() {
        return igDragInt2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragInt2(const char *label, int v[2], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragInt2$handle() {
        return igDragInt2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragInt2(const char *label, int v[2], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragInt2$address() {
        return igDragInt2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragInt2(const char *label, int v[2], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragInt2(MemorySegment label, MemorySegment v, float v_speed, int v_min, int v_max, MemorySegment format, int flags) {
        var mh$ = igDragInt2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragInt2", label, v, v_speed, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_speed, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragInt3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragInt3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragInt3(const char *label, int v[3], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragInt3$descriptor() {
        return igDragInt3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragInt3(const char *label, int v[3], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragInt3$handle() {
        return igDragInt3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragInt3(const char *label, int v[3], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragInt3$address() {
        return igDragInt3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragInt3(const char *label, int v[3], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragInt3(MemorySegment label, MemorySegment v, float v_speed, int v_min, int v_max, MemorySegment format, int flags) {
        var mh$ = igDragInt3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragInt3", label, v, v_speed, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_speed, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragInt4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragInt4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragInt4(const char *label, int v[4], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragInt4$descriptor() {
        return igDragInt4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragInt4(const char *label, int v[4], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragInt4$handle() {
        return igDragInt4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragInt4(const char *label, int v[4], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragInt4$address() {
        return igDragInt4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragInt4(const char *label, int v[4], float v_speed, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragInt4(MemorySegment label, MemorySegment v, float v_speed, int v_min, int v_max, MemorySegment format, int flags) {
        var mh$ = igDragInt4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragInt4", label, v, v_speed, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_speed, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragIntRange2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragIntRange2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragIntRange2(const char *label, int *v_current_min, int *v_current_max, float v_speed, int v_min, int v_max, const char *format, const char *format_max, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragIntRange2$descriptor() {
        return igDragIntRange2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragIntRange2(const char *label, int *v_current_min, int *v_current_max, float v_speed, int v_min, int v_max, const char *format, const char *format_max, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragIntRange2$handle() {
        return igDragIntRange2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragIntRange2(const char *label, int *v_current_min, int *v_current_max, float v_speed, int v_min, int v_max, const char *format, const char *format_max, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragIntRange2$address() {
        return igDragIntRange2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragIntRange2(const char *label, int *v_current_min, int *v_current_max, float v_speed, int v_min, int v_max, const char *format, const char *format_max, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragIntRange2(MemorySegment label, MemorySegment v_current_min, MemorySegment v_current_max, float v_speed, int v_min, int v_max, MemorySegment format, MemorySegment format_max, int flags) {
        var mh$ = igDragIntRange2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragIntRange2", label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
            }
            return (boolean)mh$.invokeExact(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragScalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragScalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragScalar(const char *label, ImGuiDataType data_type, void *p_data, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragScalar$descriptor() {
        return igDragScalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragScalar(const char *label, ImGuiDataType data_type, void *p_data, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragScalar$handle() {
        return igDragScalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragScalar(const char *label, ImGuiDataType data_type, void *p_data, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragScalar$address() {
        return igDragScalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragScalar(const char *label, ImGuiDataType data_type, void *p_data, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragScalar(MemorySegment label, int data_type, MemorySegment p_data, float v_speed, MemorySegment p_min, MemorySegment p_max, MemorySegment format, int flags) {
        var mh$ = igDragScalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragScalar", label, data_type, p_data, v_speed, p_min, p_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, data_type, p_data, v_speed, p_min, p_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDragScalarN {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDragScalarN");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDragScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igDragScalarN$descriptor() {
        return igDragScalarN.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDragScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igDragScalarN$handle() {
        return igDragScalarN.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDragScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igDragScalarN$address() {
        return igDragScalarN.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDragScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, float v_speed, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igDragScalarN(MemorySegment label, int data_type, MemorySegment p_data, int components, float v_speed, MemorySegment p_min, MemorySegment p_max, MemorySegment format, int flags) {
        var mh$ = igDragScalarN.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDragScalarN", label, data_type, p_data, components, v_speed, p_min, p_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, data_type, p_data, components, v_speed, p_min, p_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderFloat(const char *label, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderFloat$descriptor() {
        return igSliderFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderFloat(const char *label, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderFloat$handle() {
        return igSliderFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderFloat(const char *label, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderFloat$address() {
        return igSliderFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderFloat(const char *label, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderFloat(MemorySegment label, MemorySegment v, float v_min, float v_max, MemorySegment format, int flags) {
        var mh$ = igSliderFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderFloat", label, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderFloat2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderFloat2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderFloat2(const char *label, float v[2], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderFloat2$descriptor() {
        return igSliderFloat2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderFloat2(const char *label, float v[2], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderFloat2$handle() {
        return igSliderFloat2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderFloat2(const char *label, float v[2], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderFloat2$address() {
        return igSliderFloat2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderFloat2(const char *label, float v[2], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderFloat2(MemorySegment label, MemorySegment v, float v_min, float v_max, MemorySegment format, int flags) {
        var mh$ = igSliderFloat2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderFloat2", label, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderFloat3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderFloat3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderFloat3(const char *label, float v[3], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderFloat3$descriptor() {
        return igSliderFloat3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderFloat3(const char *label, float v[3], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderFloat3$handle() {
        return igSliderFloat3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderFloat3(const char *label, float v[3], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderFloat3$address() {
        return igSliderFloat3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderFloat3(const char *label, float v[3], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderFloat3(MemorySegment label, MemorySegment v, float v_min, float v_max, MemorySegment format, int flags) {
        var mh$ = igSliderFloat3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderFloat3", label, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderFloat4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderFloat4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderFloat4(const char *label, float v[4], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderFloat4$descriptor() {
        return igSliderFloat4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderFloat4(const char *label, float v[4], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderFloat4$handle() {
        return igSliderFloat4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderFloat4(const char *label, float v[4], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderFloat4$address() {
        return igSliderFloat4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderFloat4(const char *label, float v[4], float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderFloat4(MemorySegment label, MemorySegment v, float v_min, float v_max, MemorySegment format, int flags) {
        var mh$ = igSliderFloat4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderFloat4", label, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderAngle(const char *label, float *v_rad, float v_degrees_min, float v_degrees_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderAngle$descriptor() {
        return igSliderAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderAngle(const char *label, float *v_rad, float v_degrees_min, float v_degrees_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderAngle$handle() {
        return igSliderAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderAngle(const char *label, float *v_rad, float v_degrees_min, float v_degrees_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderAngle$address() {
        return igSliderAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderAngle(const char *label, float *v_rad, float v_degrees_min, float v_degrees_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderAngle(MemorySegment label, MemorySegment v_rad, float v_degrees_min, float v_degrees_max, MemorySegment format, int flags) {
        var mh$ = igSliderAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderAngle", label, v_rad, v_degrees_min, v_degrees_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v_rad, v_degrees_min, v_degrees_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderInt(const char *label, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderInt$descriptor() {
        return igSliderInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderInt(const char *label, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderInt$handle() {
        return igSliderInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderInt(const char *label, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderInt$address() {
        return igSliderInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderInt(const char *label, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderInt(MemorySegment label, MemorySegment v, int v_min, int v_max, MemorySegment format, int flags) {
        var mh$ = igSliderInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderInt", label, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderInt2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderInt2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderInt2(const char *label, int v[2], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderInt2$descriptor() {
        return igSliderInt2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderInt2(const char *label, int v[2], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderInt2$handle() {
        return igSliderInt2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderInt2(const char *label, int v[2], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderInt2$address() {
        return igSliderInt2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderInt2(const char *label, int v[2], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderInt2(MemorySegment label, MemorySegment v, int v_min, int v_max, MemorySegment format, int flags) {
        var mh$ = igSliderInt2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderInt2", label, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderInt3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderInt3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderInt3(const char *label, int v[3], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderInt3$descriptor() {
        return igSliderInt3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderInt3(const char *label, int v[3], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderInt3$handle() {
        return igSliderInt3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderInt3(const char *label, int v[3], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderInt3$address() {
        return igSliderInt3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderInt3(const char *label, int v[3], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderInt3(MemorySegment label, MemorySegment v, int v_min, int v_max, MemorySegment format, int flags) {
        var mh$ = igSliderInt3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderInt3", label, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderInt4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderInt4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderInt4(const char *label, int v[4], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderInt4$descriptor() {
        return igSliderInt4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderInt4(const char *label, int v[4], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderInt4$handle() {
        return igSliderInt4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderInt4(const char *label, int v[4], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderInt4$address() {
        return igSliderInt4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderInt4(const char *label, int v[4], int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderInt4(MemorySegment label, MemorySegment v, int v_min, int v_max, MemorySegment format, int flags) {
        var mh$ = igSliderInt4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderInt4", label, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderScalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderScalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderScalar(const char *label, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderScalar$descriptor() {
        return igSliderScalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderScalar(const char *label, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderScalar$handle() {
        return igSliderScalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderScalar(const char *label, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderScalar$address() {
        return igSliderScalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderScalar(const char *label, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderScalar(MemorySegment label, int data_type, MemorySegment p_data, MemorySegment p_min, MemorySegment p_max, MemorySegment format, int flags) {
        var mh$ = igSliderScalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderScalar", label, data_type, p_data, p_min, p_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, data_type, p_data, p_min, p_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSliderScalarN {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSliderScalarN");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSliderScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igSliderScalarN$descriptor() {
        return igSliderScalarN.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSliderScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igSliderScalarN$handle() {
        return igSliderScalarN.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSliderScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igSliderScalarN$address() {
        return igSliderScalarN.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSliderScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igSliderScalarN(MemorySegment label, int data_type, MemorySegment p_data, int components, MemorySegment p_min, MemorySegment p_max, MemorySegment format, int flags) {
        var mh$ = igSliderScalarN.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSliderScalarN", label, data_type, p_data, components, p_min, p_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, data_type, p_data, components, p_min, p_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igVSliderFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igVSliderFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igVSliderFloat(const char *label, const ImVec2 size, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igVSliderFloat$descriptor() {
        return igVSliderFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igVSliderFloat(const char *label, const ImVec2 size, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igVSliderFloat$handle() {
        return igVSliderFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igVSliderFloat(const char *label, const ImVec2 size, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igVSliderFloat$address() {
        return igVSliderFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igVSliderFloat(const char *label, const ImVec2 size, float *v, float v_min, float v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igVSliderFloat(MemorySegment label, MemorySegment size, MemorySegment v, float v_min, float v_max, MemorySegment format, int flags) {
        var mh$ = igVSliderFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igVSliderFloat", label, size, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, size, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igVSliderInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igVSliderInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igVSliderInt(const char *label, const ImVec2 size, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igVSliderInt$descriptor() {
        return igVSliderInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igVSliderInt(const char *label, const ImVec2 size, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igVSliderInt$handle() {
        return igVSliderInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igVSliderInt(const char *label, const ImVec2 size, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igVSliderInt$address() {
        return igVSliderInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igVSliderInt(const char *label, const ImVec2 size, int *v, int v_min, int v_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igVSliderInt(MemorySegment label, MemorySegment size, MemorySegment v, int v_min, int v_max, MemorySegment format, int flags) {
        var mh$ = igVSliderInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igVSliderInt", label, size, v, v_min, v_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, size, v, v_min, v_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igVSliderScalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igVSliderScalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igVSliderScalar(const char *label, const ImVec2 size, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static FunctionDescriptor igVSliderScalar$descriptor() {
        return igVSliderScalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igVSliderScalar(const char *label, const ImVec2 size, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MethodHandle igVSliderScalar$handle() {
        return igVSliderScalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igVSliderScalar(const char *label, const ImVec2 size, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static MemorySegment igVSliderScalar$address() {
        return igVSliderScalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igVSliderScalar(const char *label, const ImVec2 size, ImGuiDataType data_type, void *p_data, const void *p_min, const void *p_max, const char *format, ImGuiSliderFlags flags)
     * }
     */
    public static boolean igVSliderScalar(MemorySegment label, MemorySegment size, int data_type, MemorySegment p_data, MemorySegment p_min, MemorySegment p_max, MemorySegment format, int flags) {
        var mh$ = igVSliderScalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igVSliderScalar", label, size, data_type, p_data, p_min, p_max, format, flags);
            }
            return (boolean)mh$.invokeExact(label, size, data_type, p_data, p_min, p_max, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputText(const char *label, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static FunctionDescriptor igInputText$descriptor() {
        return igInputText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputText(const char *label, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static MethodHandle igInputText$handle() {
        return igInputText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputText(const char *label, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static MemorySegment igInputText$address() {
        return igInputText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputText(const char *label, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static boolean igInputText(MemorySegment label, MemorySegment buf, long buf_size, int flags, MemorySegment callback, MemorySegment user_data) {
        var mh$ = igInputText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputText", label, buf, buf_size, flags, callback, user_data);
            }
            return (boolean)mh$.invokeExact(label, buf, buf_size, flags, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputTextMultiline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputTextMultiline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputTextMultiline(const char *label, char *buf, size_t buf_size, const ImVec2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static FunctionDescriptor igInputTextMultiline$descriptor() {
        return igInputTextMultiline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputTextMultiline(const char *label, char *buf, size_t buf_size, const ImVec2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static MethodHandle igInputTextMultiline$handle() {
        return igInputTextMultiline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputTextMultiline(const char *label, char *buf, size_t buf_size, const ImVec2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static MemorySegment igInputTextMultiline$address() {
        return igInputTextMultiline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputTextMultiline(const char *label, char *buf, size_t buf_size, const ImVec2 size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static boolean igInputTextMultiline(MemorySegment label, MemorySegment buf, long buf_size, MemorySegment size, int flags, MemorySegment callback, MemorySegment user_data) {
        var mh$ = igInputTextMultiline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputTextMultiline", label, buf, buf_size, size, flags, callback, user_data);
            }
            return (boolean)mh$.invokeExact(label, buf, buf_size, size, flags, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputTextWithHint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputTextWithHint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputTextWithHint(const char *label, const char *hint, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static FunctionDescriptor igInputTextWithHint$descriptor() {
        return igInputTextWithHint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputTextWithHint(const char *label, const char *hint, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static MethodHandle igInputTextWithHint$handle() {
        return igInputTextWithHint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputTextWithHint(const char *label, const char *hint, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static MemorySegment igInputTextWithHint$address() {
        return igInputTextWithHint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputTextWithHint(const char *label, const char *hint, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiInputTextCallback callback, void *user_data)
     * }
     */
    public static boolean igInputTextWithHint(MemorySegment label, MemorySegment hint, MemorySegment buf, long buf_size, int flags, MemorySegment callback, MemorySegment user_data) {
        var mh$ = igInputTextWithHint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputTextWithHint", label, hint, buf, buf_size, flags, callback, user_data);
            }
            return (boolean)mh$.invokeExact(label, hint, buf, buf_size, flags, callback, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputFloat(const char *label, float *v, float step, float step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputFloat$descriptor() {
        return igInputFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputFloat(const char *label, float *v, float step, float step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputFloat$handle() {
        return igInputFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputFloat(const char *label, float *v, float step, float step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputFloat$address() {
        return igInputFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputFloat(const char *label, float *v, float step, float step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputFloat(MemorySegment label, MemorySegment v, float step, float step_fast, MemorySegment format, int flags) {
        var mh$ = igInputFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputFloat", label, v, step, step_fast, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, step, step_fast, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputFloat2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputFloat2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputFloat2(const char *label, float v[2], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputFloat2$descriptor() {
        return igInputFloat2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputFloat2(const char *label, float v[2], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputFloat2$handle() {
        return igInputFloat2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputFloat2(const char *label, float v[2], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputFloat2$address() {
        return igInputFloat2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputFloat2(const char *label, float v[2], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputFloat2(MemorySegment label, MemorySegment v, MemorySegment format, int flags) {
        var mh$ = igInputFloat2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputFloat2", label, v, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputFloat3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputFloat3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputFloat3(const char *label, float v[3], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputFloat3$descriptor() {
        return igInputFloat3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputFloat3(const char *label, float v[3], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputFloat3$handle() {
        return igInputFloat3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputFloat3(const char *label, float v[3], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputFloat3$address() {
        return igInputFloat3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputFloat3(const char *label, float v[3], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputFloat3(MemorySegment label, MemorySegment v, MemorySegment format, int flags) {
        var mh$ = igInputFloat3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputFloat3", label, v, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputFloat4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputFloat4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputFloat4(const char *label, float v[4], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputFloat4$descriptor() {
        return igInputFloat4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputFloat4(const char *label, float v[4], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputFloat4$handle() {
        return igInputFloat4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputFloat4(const char *label, float v[4], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputFloat4$address() {
        return igInputFloat4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputFloat4(const char *label, float v[4], const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputFloat4(MemorySegment label, MemorySegment v, MemorySegment format, int flags) {
        var mh$ = igInputFloat4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputFloat4", label, v, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputInt(const char *label, int *v, int step, int step_fast, ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputInt$descriptor() {
        return igInputInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputInt(const char *label, int *v, int step, int step_fast, ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputInt$handle() {
        return igInputInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputInt(const char *label, int *v, int step, int step_fast, ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputInt$address() {
        return igInputInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputInt(const char *label, int *v, int step, int step_fast, ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputInt(MemorySegment label, MemorySegment v, int step, int step_fast, int flags) {
        var mh$ = igInputInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputInt", label, v, step, step_fast, flags);
            }
            return (boolean)mh$.invokeExact(label, v, step, step_fast, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputInt2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputInt2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputInt2(const char *label, int v[2], ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputInt2$descriptor() {
        return igInputInt2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputInt2(const char *label, int v[2], ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputInt2$handle() {
        return igInputInt2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputInt2(const char *label, int v[2], ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputInt2$address() {
        return igInputInt2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputInt2(const char *label, int v[2], ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputInt2(MemorySegment label, MemorySegment v, int flags) {
        var mh$ = igInputInt2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputInt2", label, v, flags);
            }
            return (boolean)mh$.invokeExact(label, v, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputInt3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputInt3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputInt3(const char *label, int v[3], ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputInt3$descriptor() {
        return igInputInt3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputInt3(const char *label, int v[3], ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputInt3$handle() {
        return igInputInt3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputInt3(const char *label, int v[3], ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputInt3$address() {
        return igInputInt3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputInt3(const char *label, int v[3], ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputInt3(MemorySegment label, MemorySegment v, int flags) {
        var mh$ = igInputInt3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputInt3", label, v, flags);
            }
            return (boolean)mh$.invokeExact(label, v, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputInt4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputInt4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputInt4(const char *label, int v[4], ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputInt4$descriptor() {
        return igInputInt4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputInt4(const char *label, int v[4], ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputInt4$handle() {
        return igInputInt4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputInt4(const char *label, int v[4], ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputInt4$address() {
        return igInputInt4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputInt4(const char *label, int v[4], ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputInt4(MemorySegment label, MemorySegment v, int flags) {
        var mh$ = igInputInt4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputInt4", label, v, flags);
            }
            return (boolean)mh$.invokeExact(label, v, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputDouble {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_DOUBLE,
            imgui.C_DOUBLE,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputDouble");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputDouble(const char *label, double *v, double step, double step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputDouble$descriptor() {
        return igInputDouble.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputDouble(const char *label, double *v, double step, double step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputDouble$handle() {
        return igInputDouble.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputDouble(const char *label, double *v, double step, double step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputDouble$address() {
        return igInputDouble.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputDouble(const char *label, double *v, double step, double step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputDouble(MemorySegment label, MemorySegment v, double step, double step_fast, MemorySegment format, int flags) {
        var mh$ = igInputDouble.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputDouble", label, v, step, step_fast, format, flags);
            }
            return (boolean)mh$.invokeExact(label, v, step, step_fast, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputScalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputScalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputScalar(const char *label, ImGuiDataType data_type, void *p_data, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputScalar$descriptor() {
        return igInputScalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputScalar(const char *label, ImGuiDataType data_type, void *p_data, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputScalar$handle() {
        return igInputScalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputScalar(const char *label, ImGuiDataType data_type, void *p_data, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputScalar$address() {
        return igInputScalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputScalar(const char *label, ImGuiDataType data_type, void *p_data, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputScalar(MemorySegment label, int data_type, MemorySegment p_data, MemorySegment p_step, MemorySegment p_step_fast, MemorySegment format, int flags) {
        var mh$ = igInputScalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputScalar", label, data_type, p_data, p_step, p_step_fast, format, flags);
            }
            return (boolean)mh$.invokeExact(label, data_type, p_data, p_step, p_step_fast, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igInputScalarN {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igInputScalarN");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igInputScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static FunctionDescriptor igInputScalarN$descriptor() {
        return igInputScalarN.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igInputScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MethodHandle igInputScalarN$handle() {
        return igInputScalarN.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igInputScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static MemorySegment igInputScalarN$address() {
        return igInputScalarN.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igInputScalarN(const char *label, ImGuiDataType data_type, void *p_data, int components, const void *p_step, const void *p_step_fast, const char *format, ImGuiInputTextFlags flags)
     * }
     */
    public static boolean igInputScalarN(MemorySegment label, int data_type, MemorySegment p_data, int components, MemorySegment p_step, MemorySegment p_step_fast, MemorySegment format, int flags) {
        var mh$ = igInputScalarN.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igInputScalarN", label, data_type, p_data, components, p_step, p_step_fast, format, flags);
            }
            return (boolean)mh$.invokeExact(label, data_type, p_data, components, p_step, p_step_fast, format, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorEdit3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorEdit3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igColorEdit3(const char *label, float col[3], ImGuiColorEditFlags flags)
     * }
     */
    public static FunctionDescriptor igColorEdit3$descriptor() {
        return igColorEdit3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igColorEdit3(const char *label, float col[3], ImGuiColorEditFlags flags)
     * }
     */
    public static MethodHandle igColorEdit3$handle() {
        return igColorEdit3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igColorEdit3(const char *label, float col[3], ImGuiColorEditFlags flags)
     * }
     */
    public static MemorySegment igColorEdit3$address() {
        return igColorEdit3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igColorEdit3(const char *label, float col[3], ImGuiColorEditFlags flags)
     * }
     */
    public static boolean igColorEdit3(MemorySegment label, MemorySegment col, int flags) {
        var mh$ = igColorEdit3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorEdit3", label, col, flags);
            }
            return (boolean)mh$.invokeExact(label, col, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorEdit4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorEdit4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igColorEdit4(const char *label, float col[4], ImGuiColorEditFlags flags)
     * }
     */
    public static FunctionDescriptor igColorEdit4$descriptor() {
        return igColorEdit4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igColorEdit4(const char *label, float col[4], ImGuiColorEditFlags flags)
     * }
     */
    public static MethodHandle igColorEdit4$handle() {
        return igColorEdit4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igColorEdit4(const char *label, float col[4], ImGuiColorEditFlags flags)
     * }
     */
    public static MemorySegment igColorEdit4$address() {
        return igColorEdit4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igColorEdit4(const char *label, float col[4], ImGuiColorEditFlags flags)
     * }
     */
    public static boolean igColorEdit4(MemorySegment label, MemorySegment col, int flags) {
        var mh$ = igColorEdit4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorEdit4", label, col, flags);
            }
            return (boolean)mh$.invokeExact(label, col, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorPicker3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorPicker3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igColorPicker3(const char *label, float col[3], ImGuiColorEditFlags flags)
     * }
     */
    public static FunctionDescriptor igColorPicker3$descriptor() {
        return igColorPicker3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igColorPicker3(const char *label, float col[3], ImGuiColorEditFlags flags)
     * }
     */
    public static MethodHandle igColorPicker3$handle() {
        return igColorPicker3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igColorPicker3(const char *label, float col[3], ImGuiColorEditFlags flags)
     * }
     */
    public static MemorySegment igColorPicker3$address() {
        return igColorPicker3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igColorPicker3(const char *label, float col[3], ImGuiColorEditFlags flags)
     * }
     */
    public static boolean igColorPicker3(MemorySegment label, MemorySegment col, int flags) {
        var mh$ = igColorPicker3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorPicker3", label, col, flags);
            }
            return (boolean)mh$.invokeExact(label, col, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorPicker4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorPicker4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igColorPicker4(const char *label, float col[4], ImGuiColorEditFlags flags, const float *ref_col)
     * }
     */
    public static FunctionDescriptor igColorPicker4$descriptor() {
        return igColorPicker4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igColorPicker4(const char *label, float col[4], ImGuiColorEditFlags flags, const float *ref_col)
     * }
     */
    public static MethodHandle igColorPicker4$handle() {
        return igColorPicker4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igColorPicker4(const char *label, float col[4], ImGuiColorEditFlags flags, const float *ref_col)
     * }
     */
    public static MemorySegment igColorPicker4$address() {
        return igColorPicker4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igColorPicker4(const char *label, float col[4], ImGuiColorEditFlags flags, const float *ref_col)
     * }
     */
    public static boolean igColorPicker4(MemorySegment label, MemorySegment col, int flags, MemorySegment ref_col) {
        var mh$ = igColorPicker4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorPicker4", label, col, flags, ref_col);
            }
            return (boolean)mh$.invokeExact(label, col, flags, ref_col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec4.layout(),
            imgui.C_INT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igColorButton(const char *desc_id, const ImVec4 col, ImGuiColorEditFlags flags, const ImVec2 size)
     * }
     */
    public static FunctionDescriptor igColorButton$descriptor() {
        return igColorButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igColorButton(const char *desc_id, const ImVec4 col, ImGuiColorEditFlags flags, const ImVec2 size)
     * }
     */
    public static MethodHandle igColorButton$handle() {
        return igColorButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igColorButton(const char *desc_id, const ImVec4 col, ImGuiColorEditFlags flags, const ImVec2 size)
     * }
     */
    public static MemorySegment igColorButton$address() {
        return igColorButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igColorButton(const char *desc_id, const ImVec4 col, ImGuiColorEditFlags flags, const ImVec2 size)
     * }
     */
    public static boolean igColorButton(MemorySegment desc_id, MemorySegment col, int flags, MemorySegment size) {
        var mh$ = igColorButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorButton", desc_id, col, flags, size);
            }
            return (boolean)mh$.invokeExact(desc_id, col, flags, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetColorEditOptions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetColorEditOptions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetColorEditOptions(ImGuiColorEditFlags flags)
     * }
     */
    public static FunctionDescriptor igSetColorEditOptions$descriptor() {
        return igSetColorEditOptions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetColorEditOptions(ImGuiColorEditFlags flags)
     * }
     */
    public static MethodHandle igSetColorEditOptions$handle() {
        return igSetColorEditOptions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetColorEditOptions(ImGuiColorEditFlags flags)
     * }
     */
    public static MemorySegment igSetColorEditOptions$address() {
        return igSetColorEditOptions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetColorEditOptions(ImGuiColorEditFlags flags)
     * }
     */
    public static void igSetColorEditOptions(int flags) {
        var mh$ = igSetColorEditOptions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetColorEditOptions", flags);
            }
            mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreeNode_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNode_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTreeNode_Str(const char *label)
     * }
     */
    public static FunctionDescriptor igTreeNode_Str$descriptor() {
        return igTreeNode_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTreeNode_Str(const char *label)
     * }
     */
    public static MethodHandle igTreeNode_Str$handle() {
        return igTreeNode_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTreeNode_Str(const char *label)
     * }
     */
    public static MemorySegment igTreeNode_Str$address() {
        return igTreeNode_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTreeNode_Str(const char *label)
     * }
     */
    public static boolean igTreeNode_Str(MemorySegment label) {
        var mh$ = igTreeNode_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNode_Str", label);
            }
            return (boolean)mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern bool igTreeNode_StrStr(const char *str_id, const char *fmt, ...)
     * }
     */
    public static class igTreeNode_StrStr {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                imgui.C_BOOL,
                imgui.C_POINTER,
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igTreeNode_StrStr");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igTreeNode_StrStr(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern bool igTreeNode_StrStr(const char *str_id, const char *fmt, ...)
         * }
         */
        public static igTreeNode_StrStr makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igTreeNode_StrStr(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public boolean apply(MemorySegment str_id, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igTreeNode_StrStr", str_id, fmt, x2);
                }
                return (boolean)spreader.invokeExact(str_id, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern bool igTreeNode_Ptr(const void *ptr_id, const char *fmt, ...)
     * }
     */
    public static class igTreeNode_Ptr {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                imgui.C_BOOL,
                imgui.C_POINTER,
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igTreeNode_Ptr");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igTreeNode_Ptr(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern bool igTreeNode_Ptr(const void *ptr_id, const char *fmt, ...)
         * }
         */
        public static igTreeNode_Ptr makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igTreeNode_Ptr(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public boolean apply(MemorySegment ptr_id, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igTreeNode_Ptr", ptr_id, fmt, x2);
                }
                return (boolean)spreader.invokeExact(ptr_id, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igTreeNodeV_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeV_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTreeNodeV_Str(const char *str_id, const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igTreeNodeV_Str$descriptor() {
        return igTreeNodeV_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTreeNodeV_Str(const char *str_id, const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igTreeNodeV_Str$handle() {
        return igTreeNodeV_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTreeNodeV_Str(const char *str_id, const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igTreeNodeV_Str$address() {
        return igTreeNodeV_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTreeNodeV_Str(const char *str_id, const char *fmt, va_list args)
     * }
     */
    public static boolean igTreeNodeV_Str(MemorySegment str_id, MemorySegment fmt, MemorySegment args) {
        var mh$ = igTreeNodeV_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNodeV_Str", str_id, fmt, args);
            }
            return (boolean)mh$.invokeExact(str_id, fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreeNodeV_Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeV_Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTreeNodeV_Ptr(const void *ptr_id, const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igTreeNodeV_Ptr$descriptor() {
        return igTreeNodeV_Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTreeNodeV_Ptr(const void *ptr_id, const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igTreeNodeV_Ptr$handle() {
        return igTreeNodeV_Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTreeNodeV_Ptr(const void *ptr_id, const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igTreeNodeV_Ptr$address() {
        return igTreeNodeV_Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTreeNodeV_Ptr(const void *ptr_id, const char *fmt, va_list args)
     * }
     */
    public static boolean igTreeNodeV_Ptr(MemorySegment ptr_id, MemorySegment fmt, MemorySegment args) {
        var mh$ = igTreeNodeV_Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNodeV_Ptr", ptr_id, fmt, args);
            }
            return (boolean)mh$.invokeExact(ptr_id, fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreeNodeEx_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeEx_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTreeNodeEx_Str(const char *label, ImGuiTreeNodeFlags flags)
     * }
     */
    public static FunctionDescriptor igTreeNodeEx_Str$descriptor() {
        return igTreeNodeEx_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTreeNodeEx_Str(const char *label, ImGuiTreeNodeFlags flags)
     * }
     */
    public static MethodHandle igTreeNodeEx_Str$handle() {
        return igTreeNodeEx_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTreeNodeEx_Str(const char *label, ImGuiTreeNodeFlags flags)
     * }
     */
    public static MemorySegment igTreeNodeEx_Str$address() {
        return igTreeNodeEx_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTreeNodeEx_Str(const char *label, ImGuiTreeNodeFlags flags)
     * }
     */
    public static boolean igTreeNodeEx_Str(MemorySegment label, int flags) {
        var mh$ = igTreeNodeEx_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNodeEx_Str", label, flags);
            }
            return (boolean)mh$.invokeExact(label, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern bool igTreeNodeEx_StrStr(const char *str_id, ImGuiTreeNodeFlags flags, const char *fmt, ...)
     * }
     */
    public static class igTreeNodeEx_StrStr {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                imgui.C_BOOL,
                imgui.C_POINTER,
                imgui.C_INT,
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeEx_StrStr");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igTreeNodeEx_StrStr(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern bool igTreeNodeEx_StrStr(const char *str_id, ImGuiTreeNodeFlags flags, const char *fmt, ...)
         * }
         */
        public static igTreeNodeEx_StrStr makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igTreeNodeEx_StrStr(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public boolean apply(MemorySegment str_id, int flags, MemorySegment fmt, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igTreeNodeEx_StrStr", str_id, flags, fmt, x3);
                }
                return (boolean)spreader.invokeExact(str_id, flags, fmt, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern bool igTreeNodeEx_Ptr(const void *ptr_id, ImGuiTreeNodeFlags flags, const char *fmt, ...)
     * }
     */
    public static class igTreeNodeEx_Ptr {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                imgui.C_BOOL,
                imgui.C_POINTER,
                imgui.C_INT,
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeEx_Ptr");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igTreeNodeEx_Ptr(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern bool igTreeNodeEx_Ptr(const void *ptr_id, ImGuiTreeNodeFlags flags, const char *fmt, ...)
         * }
         */
        public static igTreeNodeEx_Ptr makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igTreeNodeEx_Ptr(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public boolean apply(MemorySegment ptr_id, int flags, MemorySegment fmt, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igTreeNodeEx_Ptr", ptr_id, flags, fmt, x3);
                }
                return (boolean)spreader.invokeExact(ptr_id, flags, fmt, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igTreeNodeExV_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeExV_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTreeNodeExV_Str(const char *str_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igTreeNodeExV_Str$descriptor() {
        return igTreeNodeExV_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTreeNodeExV_Str(const char *str_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igTreeNodeExV_Str$handle() {
        return igTreeNodeExV_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTreeNodeExV_Str(const char *str_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igTreeNodeExV_Str$address() {
        return igTreeNodeExV_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTreeNodeExV_Str(const char *str_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args)
     * }
     */
    public static boolean igTreeNodeExV_Str(MemorySegment str_id, int flags, MemorySegment fmt, MemorySegment args) {
        var mh$ = igTreeNodeExV_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNodeExV_Str", str_id, flags, fmt, args);
            }
            return (boolean)mh$.invokeExact(str_id, flags, fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreeNodeExV_Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreeNodeExV_Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTreeNodeExV_Ptr(const void *ptr_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igTreeNodeExV_Ptr$descriptor() {
        return igTreeNodeExV_Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTreeNodeExV_Ptr(const void *ptr_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igTreeNodeExV_Ptr$handle() {
        return igTreeNodeExV_Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTreeNodeExV_Ptr(const void *ptr_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igTreeNodeExV_Ptr$address() {
        return igTreeNodeExV_Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTreeNodeExV_Ptr(const void *ptr_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args)
     * }
     */
    public static boolean igTreeNodeExV_Ptr(MemorySegment ptr_id, int flags, MemorySegment fmt, MemorySegment args) {
        var mh$ = igTreeNodeExV_Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreeNodeExV_Ptr", ptr_id, flags, fmt, args);
            }
            return (boolean)mh$.invokeExact(ptr_id, flags, fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreePush_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreePush_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTreePush_Str(const char *str_id)
     * }
     */
    public static FunctionDescriptor igTreePush_Str$descriptor() {
        return igTreePush_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTreePush_Str(const char *str_id)
     * }
     */
    public static MethodHandle igTreePush_Str$handle() {
        return igTreePush_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTreePush_Str(const char *str_id)
     * }
     */
    public static MemorySegment igTreePush_Str$address() {
        return igTreePush_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTreePush_Str(const char *str_id)
     * }
     */
    public static void igTreePush_Str(MemorySegment str_id) {
        var mh$ = igTreePush_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreePush_Str", str_id);
            }
            mh$.invokeExact(str_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreePush_Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreePush_Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTreePush_Ptr(const void *ptr_id)
     * }
     */
    public static FunctionDescriptor igTreePush_Ptr$descriptor() {
        return igTreePush_Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTreePush_Ptr(const void *ptr_id)
     * }
     */
    public static MethodHandle igTreePush_Ptr$handle() {
        return igTreePush_Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTreePush_Ptr(const void *ptr_id)
     * }
     */
    public static MemorySegment igTreePush_Ptr$address() {
        return igTreePush_Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTreePush_Ptr(const void *ptr_id)
     * }
     */
    public static void igTreePush_Ptr(MemorySegment ptr_id) {
        var mh$ = igTreePush_Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreePush_Ptr", ptr_id);
            }
            mh$.invokeExact(ptr_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTreePop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTreePop");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTreePop()
     * }
     */
    public static FunctionDescriptor igTreePop$descriptor() {
        return igTreePop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTreePop()
     * }
     */
    public static MethodHandle igTreePop$handle() {
        return igTreePop.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTreePop()
     * }
     */
    public static MemorySegment igTreePop$address() {
        return igTreePop.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTreePop()
     * }
     */
    public static void igTreePop() {
        var mh$ = igTreePop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTreePop");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetTreeNodeToLabelSpacing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetTreeNodeToLabelSpacing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetTreeNodeToLabelSpacing()
     * }
     */
    public static FunctionDescriptor igGetTreeNodeToLabelSpacing$descriptor() {
        return igGetTreeNodeToLabelSpacing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetTreeNodeToLabelSpacing()
     * }
     */
    public static MethodHandle igGetTreeNodeToLabelSpacing$handle() {
        return igGetTreeNodeToLabelSpacing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetTreeNodeToLabelSpacing()
     * }
     */
    public static MemorySegment igGetTreeNodeToLabelSpacing$address() {
        return igGetTreeNodeToLabelSpacing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetTreeNodeToLabelSpacing()
     * }
     */
    public static float igGetTreeNodeToLabelSpacing() {
        var mh$ = igGetTreeNodeToLabelSpacing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetTreeNodeToLabelSpacing");
            }
            return (float)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCollapsingHeader_TreeNodeFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCollapsingHeader_TreeNodeFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCollapsingHeader_TreeNodeFlags(const char *label, ImGuiTreeNodeFlags flags)
     * }
     */
    public static FunctionDescriptor igCollapsingHeader_TreeNodeFlags$descriptor() {
        return igCollapsingHeader_TreeNodeFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCollapsingHeader_TreeNodeFlags(const char *label, ImGuiTreeNodeFlags flags)
     * }
     */
    public static MethodHandle igCollapsingHeader_TreeNodeFlags$handle() {
        return igCollapsingHeader_TreeNodeFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCollapsingHeader_TreeNodeFlags(const char *label, ImGuiTreeNodeFlags flags)
     * }
     */
    public static MemorySegment igCollapsingHeader_TreeNodeFlags$address() {
        return igCollapsingHeader_TreeNodeFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCollapsingHeader_TreeNodeFlags(const char *label, ImGuiTreeNodeFlags flags)
     * }
     */
    public static boolean igCollapsingHeader_TreeNodeFlags(MemorySegment label, int flags) {
        var mh$ = igCollapsingHeader_TreeNodeFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCollapsingHeader_TreeNodeFlags", label, flags);
            }
            return (boolean)mh$.invokeExact(label, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCollapsingHeader_BoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCollapsingHeader_BoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igCollapsingHeader_BoolPtr(const char *label, bool *p_visible, ImGuiTreeNodeFlags flags)
     * }
     */
    public static FunctionDescriptor igCollapsingHeader_BoolPtr$descriptor() {
        return igCollapsingHeader_BoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igCollapsingHeader_BoolPtr(const char *label, bool *p_visible, ImGuiTreeNodeFlags flags)
     * }
     */
    public static MethodHandle igCollapsingHeader_BoolPtr$handle() {
        return igCollapsingHeader_BoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igCollapsingHeader_BoolPtr(const char *label, bool *p_visible, ImGuiTreeNodeFlags flags)
     * }
     */
    public static MemorySegment igCollapsingHeader_BoolPtr$address() {
        return igCollapsingHeader_BoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igCollapsingHeader_BoolPtr(const char *label, bool *p_visible, ImGuiTreeNodeFlags flags)
     * }
     */
    public static boolean igCollapsingHeader_BoolPtr(MemorySegment label, MemorySegment p_visible, int flags) {
        var mh$ = igCollapsingHeader_BoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCollapsingHeader_BoolPtr", label, p_visible, flags);
            }
            return (boolean)mh$.invokeExact(label, p_visible, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextItemOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextItemOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextItemOpen(bool is_open, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetNextItemOpen$descriptor() {
        return igSetNextItemOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextItemOpen(bool is_open, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetNextItemOpen$handle() {
        return igSetNextItemOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextItemOpen(bool is_open, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetNextItemOpen$address() {
        return igSetNextItemOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextItemOpen(bool is_open, ImGuiCond cond)
     * }
     */
    public static void igSetNextItemOpen(boolean is_open, int cond) {
        var mh$ = igSetNextItemOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextItemOpen", is_open, cond);
            }
            mh$.invokeExact(is_open, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextItemStorageID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextItemStorageID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextItemStorageID(ImGuiID storage_id)
     * }
     */
    public static FunctionDescriptor igSetNextItemStorageID$descriptor() {
        return igSetNextItemStorageID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextItemStorageID(ImGuiID storage_id)
     * }
     */
    public static MethodHandle igSetNextItemStorageID$handle() {
        return igSetNextItemStorageID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextItemStorageID(ImGuiID storage_id)
     * }
     */
    public static MemorySegment igSetNextItemStorageID$address() {
        return igSetNextItemStorageID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextItemStorageID(ImGuiID storage_id)
     * }
     */
    public static void igSetNextItemStorageID(int storage_id) {
        var mh$ = igSetNextItemStorageID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextItemStorageID", storage_id);
            }
            mh$.invokeExact(storage_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSelectable_Bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_BOOL,
            imgui.C_INT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSelectable_Bool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSelectable_Bool(const char *label, bool selected, ImGuiSelectableFlags flags, const ImVec2 size)
     * }
     */
    public static FunctionDescriptor igSelectable_Bool$descriptor() {
        return igSelectable_Bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSelectable_Bool(const char *label, bool selected, ImGuiSelectableFlags flags, const ImVec2 size)
     * }
     */
    public static MethodHandle igSelectable_Bool$handle() {
        return igSelectable_Bool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSelectable_Bool(const char *label, bool selected, ImGuiSelectableFlags flags, const ImVec2 size)
     * }
     */
    public static MemorySegment igSelectable_Bool$address() {
        return igSelectable_Bool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSelectable_Bool(const char *label, bool selected, ImGuiSelectableFlags flags, const ImVec2 size)
     * }
     */
    public static boolean igSelectable_Bool(MemorySegment label, boolean selected, int flags, MemorySegment size) {
        var mh$ = igSelectable_Bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSelectable_Bool", label, selected, flags, size);
            }
            return (boolean)mh$.invokeExact(label, selected, flags, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSelectable_BoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSelectable_BoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSelectable_BoolPtr(const char *label, bool *p_selected, ImGuiSelectableFlags flags, const ImVec2 size)
     * }
     */
    public static FunctionDescriptor igSelectable_BoolPtr$descriptor() {
        return igSelectable_BoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSelectable_BoolPtr(const char *label, bool *p_selected, ImGuiSelectableFlags flags, const ImVec2 size)
     * }
     */
    public static MethodHandle igSelectable_BoolPtr$handle() {
        return igSelectable_BoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSelectable_BoolPtr(const char *label, bool *p_selected, ImGuiSelectableFlags flags, const ImVec2 size)
     * }
     */
    public static MemorySegment igSelectable_BoolPtr$address() {
        return igSelectable_BoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSelectable_BoolPtr(const char *label, bool *p_selected, ImGuiSelectableFlags flags, const ImVec2 size)
     * }
     */
    public static boolean igSelectable_BoolPtr(MemorySegment label, MemorySegment p_selected, int flags, MemorySegment size) {
        var mh$ = igSelectable_BoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSelectable_BoolPtr", label, p_selected, flags, size);
            }
            return (boolean)mh$.invokeExact(label, p_selected, flags, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginMultiSelect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginMultiSelect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectIO *igBeginMultiSelect(ImGuiMultiSelectFlags flags, int selection_size, int items_count)
     * }
     */
    public static FunctionDescriptor igBeginMultiSelect$descriptor() {
        return igBeginMultiSelect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectIO *igBeginMultiSelect(ImGuiMultiSelectFlags flags, int selection_size, int items_count)
     * }
     */
    public static MethodHandle igBeginMultiSelect$handle() {
        return igBeginMultiSelect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectIO *igBeginMultiSelect(ImGuiMultiSelectFlags flags, int selection_size, int items_count)
     * }
     */
    public static MemorySegment igBeginMultiSelect$address() {
        return igBeginMultiSelect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiMultiSelectIO *igBeginMultiSelect(ImGuiMultiSelectFlags flags, int selection_size, int items_count)
     * }
     */
    public static MemorySegment igBeginMultiSelect(int flags, int selection_size, int items_count) {
        var mh$ = igBeginMultiSelect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginMultiSelect", flags, selection_size, items_count);
            }
            return (MemorySegment)mh$.invokeExact(flags, selection_size, items_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndMultiSelect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndMultiSelect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectIO *igEndMultiSelect()
     * }
     */
    public static FunctionDescriptor igEndMultiSelect$descriptor() {
        return igEndMultiSelect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectIO *igEndMultiSelect()
     * }
     */
    public static MethodHandle igEndMultiSelect$handle() {
        return igEndMultiSelect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectIO *igEndMultiSelect()
     * }
     */
    public static MemorySegment igEndMultiSelect$address() {
        return igEndMultiSelect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiMultiSelectIO *igEndMultiSelect()
     * }
     */
    public static MemorySegment igEndMultiSelect() {
        var mh$ = igEndMultiSelect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndMultiSelect");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextItemSelectionUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_LONG_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextItemSelectionUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data)
     * }
     */
    public static FunctionDescriptor igSetNextItemSelectionUserData$descriptor() {
        return igSetNextItemSelectionUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data)
     * }
     */
    public static MethodHandle igSetNextItemSelectionUserData$handle() {
        return igSetNextItemSelectionUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data)
     * }
     */
    public static MemorySegment igSetNextItemSelectionUserData$address() {
        return igSetNextItemSelectionUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data)
     * }
     */
    public static void igSetNextItemSelectionUserData(long selection_user_data) {
        var mh$ = igSetNextItemSelectionUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextItemSelectionUserData", selection_user_data);
            }
            mh$.invokeExact(selection_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemToggledSelection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemToggledSelection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemToggledSelection()
     * }
     */
    public static FunctionDescriptor igIsItemToggledSelection$descriptor() {
        return igIsItemToggledSelection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemToggledSelection()
     * }
     */
    public static MethodHandle igIsItemToggledSelection$handle() {
        return igIsItemToggledSelection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemToggledSelection()
     * }
     */
    public static MemorySegment igIsItemToggledSelection$address() {
        return igIsItemToggledSelection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemToggledSelection()
     * }
     */
    public static boolean igIsItemToggledSelection() {
        var mh$ = igIsItemToggledSelection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemToggledSelection");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginListBox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginListBox");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginListBox(const char *label, const ImVec2 size)
     * }
     */
    public static FunctionDescriptor igBeginListBox$descriptor() {
        return igBeginListBox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginListBox(const char *label, const ImVec2 size)
     * }
     */
    public static MethodHandle igBeginListBox$handle() {
        return igBeginListBox.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginListBox(const char *label, const ImVec2 size)
     * }
     */
    public static MemorySegment igBeginListBox$address() {
        return igBeginListBox.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginListBox(const char *label, const ImVec2 size)
     * }
     */
    public static boolean igBeginListBox(MemorySegment label, MemorySegment size) {
        var mh$ = igBeginListBox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginListBox", label, size);
            }
            return (boolean)mh$.invokeExact(label, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndListBox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndListBox");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndListBox()
     * }
     */
    public static FunctionDescriptor igEndListBox$descriptor() {
        return igEndListBox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndListBox()
     * }
     */
    public static MethodHandle igEndListBox$handle() {
        return igEndListBox.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndListBox()
     * }
     */
    public static MemorySegment igEndListBox$address() {
        return igEndListBox.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndListBox()
     * }
     */
    public static void igEndListBox() {
        var mh$ = igEndListBox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndListBox");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igListBox_Str_arr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igListBox_Str_arr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igListBox_Str_arr(const char *label, int *current_item, const char *const items[], int items_count, int height_in_items)
     * }
     */
    public static FunctionDescriptor igListBox_Str_arr$descriptor() {
        return igListBox_Str_arr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igListBox_Str_arr(const char *label, int *current_item, const char *const items[], int items_count, int height_in_items)
     * }
     */
    public static MethodHandle igListBox_Str_arr$handle() {
        return igListBox_Str_arr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igListBox_Str_arr(const char *label, int *current_item, const char *const items[], int items_count, int height_in_items)
     * }
     */
    public static MemorySegment igListBox_Str_arr$address() {
        return igListBox_Str_arr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igListBox_Str_arr(const char *label, int *current_item, const char *const items[], int items_count, int height_in_items)
     * }
     */
    public static boolean igListBox_Str_arr(MemorySegment label, MemorySegment current_item, MemorySegment items, int items_count, int height_in_items) {
        var mh$ = igListBox_Str_arr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igListBox_Str_arr", label, current_item, items, items_count, height_in_items);
            }
            return (boolean)mh$.invokeExact(label, current_item, items, items_count, height_in_items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igListBox_FnStrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igListBox_FnStrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igListBox_FnStrPtr(const char *label, int *current_item, const char *(*getter)(void *, int), void *user_data, int items_count, int height_in_items)
     * }
     */
    public static FunctionDescriptor igListBox_FnStrPtr$descriptor() {
        return igListBox_FnStrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igListBox_FnStrPtr(const char *label, int *current_item, const char *(*getter)(void *, int), void *user_data, int items_count, int height_in_items)
     * }
     */
    public static MethodHandle igListBox_FnStrPtr$handle() {
        return igListBox_FnStrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igListBox_FnStrPtr(const char *label, int *current_item, const char *(*getter)(void *, int), void *user_data, int items_count, int height_in_items)
     * }
     */
    public static MemorySegment igListBox_FnStrPtr$address() {
        return igListBox_FnStrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igListBox_FnStrPtr(const char *label, int *current_item, const char *(*getter)(void *, int), void *user_data, int items_count, int height_in_items)
     * }
     */
    public static boolean igListBox_FnStrPtr(MemorySegment label, MemorySegment current_item, MemorySegment getter, MemorySegment user_data, int items_count, int height_in_items) {
        var mh$ = igListBox_FnStrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igListBox_FnStrPtr", label, current_item, getter, user_data, items_count, height_in_items);
            }
            return (boolean)mh$.invokeExact(label, current_item, getter, user_data, items_count, height_in_items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPlotLines_FloatPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPlotLines_FloatPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPlotLines_FloatPtr(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
     * }
     */
    public static FunctionDescriptor igPlotLines_FloatPtr$descriptor() {
        return igPlotLines_FloatPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPlotLines_FloatPtr(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
     * }
     */
    public static MethodHandle igPlotLines_FloatPtr$handle() {
        return igPlotLines_FloatPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPlotLines_FloatPtr(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
     * }
     */
    public static MemorySegment igPlotLines_FloatPtr$address() {
        return igPlotLines_FloatPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPlotLines_FloatPtr(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
     * }
     */
    public static void igPlotLines_FloatPtr(MemorySegment label, MemorySegment values, int values_count, int values_offset, MemorySegment overlay_text, float scale_min, float scale_max, MemorySegment graph_size, int stride) {
        var mh$ = igPlotLines_FloatPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPlotLines_FloatPtr", label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
            }
            mh$.invokeExact(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPlotLines_FnFloatPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPlotLines_FnFloatPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPlotLines_FnFloatPtr(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
     * }
     */
    public static FunctionDescriptor igPlotLines_FnFloatPtr$descriptor() {
        return igPlotLines_FnFloatPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPlotLines_FnFloatPtr(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
     * }
     */
    public static MethodHandle igPlotLines_FnFloatPtr$handle() {
        return igPlotLines_FnFloatPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPlotLines_FnFloatPtr(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
     * }
     */
    public static MemorySegment igPlotLines_FnFloatPtr$address() {
        return igPlotLines_FnFloatPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPlotLines_FnFloatPtr(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
     * }
     */
    public static void igPlotLines_FnFloatPtr(MemorySegment label, MemorySegment values_getter, MemorySegment data, int values_count, int values_offset, MemorySegment overlay_text, float scale_min, float scale_max, MemorySegment graph_size) {
        var mh$ = igPlotLines_FnFloatPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPlotLines_FnFloatPtr", label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
            }
            mh$.invokeExact(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPlotHistogram_FloatPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPlotHistogram_FloatPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPlotHistogram_FloatPtr(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
     * }
     */
    public static FunctionDescriptor igPlotHistogram_FloatPtr$descriptor() {
        return igPlotHistogram_FloatPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPlotHistogram_FloatPtr(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
     * }
     */
    public static MethodHandle igPlotHistogram_FloatPtr$handle() {
        return igPlotHistogram_FloatPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPlotHistogram_FloatPtr(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
     * }
     */
    public static MemorySegment igPlotHistogram_FloatPtr$address() {
        return igPlotHistogram_FloatPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPlotHistogram_FloatPtr(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
     * }
     */
    public static void igPlotHistogram_FloatPtr(MemorySegment label, MemorySegment values, int values_count, int values_offset, MemorySegment overlay_text, float scale_min, float scale_max, MemorySegment graph_size, int stride) {
        var mh$ = igPlotHistogram_FloatPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPlotHistogram_FloatPtr", label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
            }
            mh$.invokeExact(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPlotHistogram_FnFloatPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPlotHistogram_FnFloatPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPlotHistogram_FnFloatPtr(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
     * }
     */
    public static FunctionDescriptor igPlotHistogram_FnFloatPtr$descriptor() {
        return igPlotHistogram_FnFloatPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPlotHistogram_FnFloatPtr(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
     * }
     */
    public static MethodHandle igPlotHistogram_FnFloatPtr$handle() {
        return igPlotHistogram_FnFloatPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPlotHistogram_FnFloatPtr(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
     * }
     */
    public static MemorySegment igPlotHistogram_FnFloatPtr$address() {
        return igPlotHistogram_FnFloatPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPlotHistogram_FnFloatPtr(const char *label, float (*values_getter)(void *, int), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
     * }
     */
    public static void igPlotHistogram_FnFloatPtr(MemorySegment label, MemorySegment values_getter, MemorySegment data, int values_count, int values_offset, MemorySegment overlay_text, float scale_min, float scale_max, MemorySegment graph_size) {
        var mh$ = igPlotHistogram_FnFloatPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPlotHistogram_FnFloatPtr", label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
            }
            mh$.invokeExact(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igValue_Bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igValue_Bool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igValue_Bool(const char *prefix, bool b)
     * }
     */
    public static FunctionDescriptor igValue_Bool$descriptor() {
        return igValue_Bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igValue_Bool(const char *prefix, bool b)
     * }
     */
    public static MethodHandle igValue_Bool$handle() {
        return igValue_Bool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igValue_Bool(const char *prefix, bool b)
     * }
     */
    public static MemorySegment igValue_Bool$address() {
        return igValue_Bool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igValue_Bool(const char *prefix, bool b)
     * }
     */
    public static void igValue_Bool(MemorySegment prefix, boolean b) {
        var mh$ = igValue_Bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igValue_Bool", prefix, b);
            }
            mh$.invokeExact(prefix, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igValue_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igValue_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igValue_Int(const char *prefix, int v)
     * }
     */
    public static FunctionDescriptor igValue_Int$descriptor() {
        return igValue_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igValue_Int(const char *prefix, int v)
     * }
     */
    public static MethodHandle igValue_Int$handle() {
        return igValue_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igValue_Int(const char *prefix, int v)
     * }
     */
    public static MemorySegment igValue_Int$address() {
        return igValue_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igValue_Int(const char *prefix, int v)
     * }
     */
    public static void igValue_Int(MemorySegment prefix, int v) {
        var mh$ = igValue_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igValue_Int", prefix, v);
            }
            mh$.invokeExact(prefix, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igValue_Uint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igValue_Uint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igValue_Uint(const char *prefix, unsigned int v)
     * }
     */
    public static FunctionDescriptor igValue_Uint$descriptor() {
        return igValue_Uint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igValue_Uint(const char *prefix, unsigned int v)
     * }
     */
    public static MethodHandle igValue_Uint$handle() {
        return igValue_Uint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igValue_Uint(const char *prefix, unsigned int v)
     * }
     */
    public static MemorySegment igValue_Uint$address() {
        return igValue_Uint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igValue_Uint(const char *prefix, unsigned int v)
     * }
     */
    public static void igValue_Uint(MemorySegment prefix, int v) {
        var mh$ = igValue_Uint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igValue_Uint", prefix, v);
            }
            mh$.invokeExact(prefix, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igValue_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igValue_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igValue_Float(const char *prefix, float v, const char *float_format)
     * }
     */
    public static FunctionDescriptor igValue_Float$descriptor() {
        return igValue_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igValue_Float(const char *prefix, float v, const char *float_format)
     * }
     */
    public static MethodHandle igValue_Float$handle() {
        return igValue_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igValue_Float(const char *prefix, float v, const char *float_format)
     * }
     */
    public static MemorySegment igValue_Float$address() {
        return igValue_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igValue_Float(const char *prefix, float v, const char *float_format)
     * }
     */
    public static void igValue_Float(MemorySegment prefix, float v, MemorySegment float_format) {
        var mh$ = igValue_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igValue_Float", prefix, v, float_format);
            }
            mh$.invokeExact(prefix, v, float_format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginMenuBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginMenuBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginMenuBar()
     * }
     */
    public static FunctionDescriptor igBeginMenuBar$descriptor() {
        return igBeginMenuBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginMenuBar()
     * }
     */
    public static MethodHandle igBeginMenuBar$handle() {
        return igBeginMenuBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginMenuBar()
     * }
     */
    public static MemorySegment igBeginMenuBar$address() {
        return igBeginMenuBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginMenuBar()
     * }
     */
    public static boolean igBeginMenuBar() {
        var mh$ = igBeginMenuBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginMenuBar");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndMenuBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndMenuBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndMenuBar()
     * }
     */
    public static FunctionDescriptor igEndMenuBar$descriptor() {
        return igEndMenuBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndMenuBar()
     * }
     */
    public static MethodHandle igEndMenuBar$handle() {
        return igEndMenuBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndMenuBar()
     * }
     */
    public static MemorySegment igEndMenuBar$address() {
        return igEndMenuBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndMenuBar()
     * }
     */
    public static void igEndMenuBar() {
        var mh$ = igEndMenuBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndMenuBar");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginMainMenuBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginMainMenuBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginMainMenuBar()
     * }
     */
    public static FunctionDescriptor igBeginMainMenuBar$descriptor() {
        return igBeginMainMenuBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginMainMenuBar()
     * }
     */
    public static MethodHandle igBeginMainMenuBar$handle() {
        return igBeginMainMenuBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginMainMenuBar()
     * }
     */
    public static MemorySegment igBeginMainMenuBar$address() {
        return igBeginMainMenuBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginMainMenuBar()
     * }
     */
    public static boolean igBeginMainMenuBar() {
        var mh$ = igBeginMainMenuBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginMainMenuBar");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndMainMenuBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndMainMenuBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndMainMenuBar()
     * }
     */
    public static FunctionDescriptor igEndMainMenuBar$descriptor() {
        return igEndMainMenuBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndMainMenuBar()
     * }
     */
    public static MethodHandle igEndMainMenuBar$handle() {
        return igEndMainMenuBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndMainMenuBar()
     * }
     */
    public static MemorySegment igEndMainMenuBar$address() {
        return igEndMainMenuBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndMainMenuBar()
     * }
     */
    public static void igEndMainMenuBar() {
        var mh$ = igEndMainMenuBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndMainMenuBar");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginMenu(const char *label, bool enabled)
     * }
     */
    public static FunctionDescriptor igBeginMenu$descriptor() {
        return igBeginMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginMenu(const char *label, bool enabled)
     * }
     */
    public static MethodHandle igBeginMenu$handle() {
        return igBeginMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginMenu(const char *label, bool enabled)
     * }
     */
    public static MemorySegment igBeginMenu$address() {
        return igBeginMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginMenu(const char *label, bool enabled)
     * }
     */
    public static boolean igBeginMenu(MemorySegment label, boolean enabled) {
        var mh$ = igBeginMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginMenu", label, enabled);
            }
            return (boolean)mh$.invokeExact(label, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndMenu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndMenu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndMenu()
     * }
     */
    public static FunctionDescriptor igEndMenu$descriptor() {
        return igEndMenu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndMenu()
     * }
     */
    public static MethodHandle igEndMenu$handle() {
        return igEndMenu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndMenu()
     * }
     */
    public static MemorySegment igEndMenu$address() {
        return igEndMenu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndMenu()
     * }
     */
    public static void igEndMenu() {
        var mh$ = igEndMenu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndMenu");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMenuItem_Bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMenuItem_Bool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igMenuItem_Bool(const char *label, const char *shortcut, bool selected, bool enabled)
     * }
     */
    public static FunctionDescriptor igMenuItem_Bool$descriptor() {
        return igMenuItem_Bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igMenuItem_Bool(const char *label, const char *shortcut, bool selected, bool enabled)
     * }
     */
    public static MethodHandle igMenuItem_Bool$handle() {
        return igMenuItem_Bool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igMenuItem_Bool(const char *label, const char *shortcut, bool selected, bool enabled)
     * }
     */
    public static MemorySegment igMenuItem_Bool$address() {
        return igMenuItem_Bool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igMenuItem_Bool(const char *label, const char *shortcut, bool selected, bool enabled)
     * }
     */
    public static boolean igMenuItem_Bool(MemorySegment label, MemorySegment shortcut, boolean selected, boolean enabled) {
        var mh$ = igMenuItem_Bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMenuItem_Bool", label, shortcut, selected, enabled);
            }
            return (boolean)mh$.invokeExact(label, shortcut, selected, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMenuItem_BoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMenuItem_BoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igMenuItem_BoolPtr(const char *label, const char *shortcut, bool *p_selected, bool enabled)
     * }
     */
    public static FunctionDescriptor igMenuItem_BoolPtr$descriptor() {
        return igMenuItem_BoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igMenuItem_BoolPtr(const char *label, const char *shortcut, bool *p_selected, bool enabled)
     * }
     */
    public static MethodHandle igMenuItem_BoolPtr$handle() {
        return igMenuItem_BoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igMenuItem_BoolPtr(const char *label, const char *shortcut, bool *p_selected, bool enabled)
     * }
     */
    public static MemorySegment igMenuItem_BoolPtr$address() {
        return igMenuItem_BoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igMenuItem_BoolPtr(const char *label, const char *shortcut, bool *p_selected, bool enabled)
     * }
     */
    public static boolean igMenuItem_BoolPtr(MemorySegment label, MemorySegment shortcut, MemorySegment p_selected, boolean enabled) {
        var mh$ = igMenuItem_BoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMenuItem_BoolPtr", label, shortcut, p_selected, enabled);
            }
            return (boolean)mh$.invokeExact(label, shortcut, p_selected, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginTooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginTooltip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginTooltip()
     * }
     */
    public static FunctionDescriptor igBeginTooltip$descriptor() {
        return igBeginTooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginTooltip()
     * }
     */
    public static MethodHandle igBeginTooltip$handle() {
        return igBeginTooltip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginTooltip()
     * }
     */
    public static MemorySegment igBeginTooltip$address() {
        return igBeginTooltip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginTooltip()
     * }
     */
    public static boolean igBeginTooltip() {
        var mh$ = igBeginTooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginTooltip");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndTooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndTooltip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndTooltip()
     * }
     */
    public static FunctionDescriptor igEndTooltip$descriptor() {
        return igEndTooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndTooltip()
     * }
     */
    public static MethodHandle igEndTooltip$handle() {
        return igEndTooltip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndTooltip()
     * }
     */
    public static MemorySegment igEndTooltip$address() {
        return igEndTooltip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndTooltip()
     * }
     */
    public static void igEndTooltip() {
        var mh$ = igEndTooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndTooltip");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igSetTooltip(const char *fmt, ...)
     * }
     */
    public static class igSetTooltip {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igSetTooltip");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igSetTooltip(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igSetTooltip(const char *fmt, ...)
         * }
         */
        public static igSetTooltip makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igSetTooltip(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igSetTooltip", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igSetTooltipV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetTooltipV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetTooltipV(const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igSetTooltipV$descriptor() {
        return igSetTooltipV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetTooltipV(const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igSetTooltipV$handle() {
        return igSetTooltipV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetTooltipV(const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igSetTooltipV$address() {
        return igSetTooltipV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetTooltipV(const char *fmt, va_list args)
     * }
     */
    public static void igSetTooltipV(MemorySegment fmt, MemorySegment args) {
        var mh$ = igSetTooltipV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetTooltipV", fmt, args);
            }
            mh$.invokeExact(fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginItemTooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginItemTooltip");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginItemTooltip()
     * }
     */
    public static FunctionDescriptor igBeginItemTooltip$descriptor() {
        return igBeginItemTooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginItemTooltip()
     * }
     */
    public static MethodHandle igBeginItemTooltip$handle() {
        return igBeginItemTooltip.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginItemTooltip()
     * }
     */
    public static MemorySegment igBeginItemTooltip$address() {
        return igBeginItemTooltip.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginItemTooltip()
     * }
     */
    public static boolean igBeginItemTooltip() {
        var mh$ = igBeginItemTooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginItemTooltip");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igSetItemTooltip(const char *fmt, ...)
     * }
     */
    public static class igSetItemTooltip {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igSetItemTooltip");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igSetItemTooltip(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igSetItemTooltip(const char *fmt, ...)
         * }
         */
        public static igSetItemTooltip makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igSetItemTooltip(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igSetItemTooltip", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igSetItemTooltipV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetItemTooltipV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetItemTooltipV(const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igSetItemTooltipV$descriptor() {
        return igSetItemTooltipV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetItemTooltipV(const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igSetItemTooltipV$handle() {
        return igSetItemTooltipV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetItemTooltipV(const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igSetItemTooltipV$address() {
        return igSetItemTooltipV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetItemTooltipV(const char *fmt, va_list args)
     * }
     */
    public static void igSetItemTooltipV(MemorySegment fmt, MemorySegment args) {
        var mh$ = igSetItemTooltipV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetItemTooltipV", fmt, args);
            }
            mh$.invokeExact(fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginPopup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginPopup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginPopup(const char *str_id, ImGuiWindowFlags flags)
     * }
     */
    public static FunctionDescriptor igBeginPopup$descriptor() {
        return igBeginPopup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginPopup(const char *str_id, ImGuiWindowFlags flags)
     * }
     */
    public static MethodHandle igBeginPopup$handle() {
        return igBeginPopup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginPopup(const char *str_id, ImGuiWindowFlags flags)
     * }
     */
    public static MemorySegment igBeginPopup$address() {
        return igBeginPopup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginPopup(const char *str_id, ImGuiWindowFlags flags)
     * }
     */
    public static boolean igBeginPopup(MemorySegment str_id, int flags) {
        var mh$ = igBeginPopup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginPopup", str_id, flags);
            }
            return (boolean)mh$.invokeExact(str_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginPopupModal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginPopupModal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginPopupModal(const char *name, bool *p_open, ImGuiWindowFlags flags)
     * }
     */
    public static FunctionDescriptor igBeginPopupModal$descriptor() {
        return igBeginPopupModal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginPopupModal(const char *name, bool *p_open, ImGuiWindowFlags flags)
     * }
     */
    public static MethodHandle igBeginPopupModal$handle() {
        return igBeginPopupModal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginPopupModal(const char *name, bool *p_open, ImGuiWindowFlags flags)
     * }
     */
    public static MemorySegment igBeginPopupModal$address() {
        return igBeginPopupModal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginPopupModal(const char *name, bool *p_open, ImGuiWindowFlags flags)
     * }
     */
    public static boolean igBeginPopupModal(MemorySegment name, MemorySegment p_open, int flags) {
        var mh$ = igBeginPopupModal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginPopupModal", name, p_open, flags);
            }
            return (boolean)mh$.invokeExact(name, p_open, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndPopup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndPopup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndPopup()
     * }
     */
    public static FunctionDescriptor igEndPopup$descriptor() {
        return igEndPopup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndPopup()
     * }
     */
    public static MethodHandle igEndPopup$handle() {
        return igEndPopup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndPopup()
     * }
     */
    public static MemorySegment igEndPopup$address() {
        return igEndPopup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndPopup()
     * }
     */
    public static void igEndPopup() {
        var mh$ = igEndPopup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndPopup");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igOpenPopup_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igOpenPopup_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igOpenPopup_Str(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static FunctionDescriptor igOpenPopup_Str$descriptor() {
        return igOpenPopup_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igOpenPopup_Str(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MethodHandle igOpenPopup_Str$handle() {
        return igOpenPopup_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igOpenPopup_Str(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MemorySegment igOpenPopup_Str$address() {
        return igOpenPopup_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igOpenPopup_Str(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static void igOpenPopup_Str(MemorySegment str_id, int popup_flags) {
        var mh$ = igOpenPopup_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igOpenPopup_Str", str_id, popup_flags);
            }
            mh$.invokeExact(str_id, popup_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igOpenPopup_ID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igOpenPopup_ID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igOpenPopup_ID(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static FunctionDescriptor igOpenPopup_ID$descriptor() {
        return igOpenPopup_ID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igOpenPopup_ID(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MethodHandle igOpenPopup_ID$handle() {
        return igOpenPopup_ID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igOpenPopup_ID(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MemorySegment igOpenPopup_ID$address() {
        return igOpenPopup_ID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igOpenPopup_ID(ImGuiID id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static void igOpenPopup_ID(int id, int popup_flags) {
        var mh$ = igOpenPopup_ID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igOpenPopup_ID", id, popup_flags);
            }
            mh$.invokeExact(id, popup_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igOpenPopupOnItemClick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igOpenPopupOnItemClick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igOpenPopupOnItemClick(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static FunctionDescriptor igOpenPopupOnItemClick$descriptor() {
        return igOpenPopupOnItemClick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igOpenPopupOnItemClick(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MethodHandle igOpenPopupOnItemClick$handle() {
        return igOpenPopupOnItemClick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igOpenPopupOnItemClick(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MemorySegment igOpenPopupOnItemClick$address() {
        return igOpenPopupOnItemClick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igOpenPopupOnItemClick(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static void igOpenPopupOnItemClick(MemorySegment str_id, int popup_flags) {
        var mh$ = igOpenPopupOnItemClick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igOpenPopupOnItemClick", str_id, popup_flags);
            }
            mh$.invokeExact(str_id, popup_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCloseCurrentPopup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCloseCurrentPopup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igCloseCurrentPopup()
     * }
     */
    public static FunctionDescriptor igCloseCurrentPopup$descriptor() {
        return igCloseCurrentPopup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igCloseCurrentPopup()
     * }
     */
    public static MethodHandle igCloseCurrentPopup$handle() {
        return igCloseCurrentPopup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igCloseCurrentPopup()
     * }
     */
    public static MemorySegment igCloseCurrentPopup$address() {
        return igCloseCurrentPopup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igCloseCurrentPopup()
     * }
     */
    public static void igCloseCurrentPopup() {
        var mh$ = igCloseCurrentPopup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCloseCurrentPopup");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginPopupContextItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginPopupContextItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginPopupContextItem(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static FunctionDescriptor igBeginPopupContextItem$descriptor() {
        return igBeginPopupContextItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginPopupContextItem(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MethodHandle igBeginPopupContextItem$handle() {
        return igBeginPopupContextItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginPopupContextItem(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MemorySegment igBeginPopupContextItem$address() {
        return igBeginPopupContextItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginPopupContextItem(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static boolean igBeginPopupContextItem(MemorySegment str_id, int popup_flags) {
        var mh$ = igBeginPopupContextItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginPopupContextItem", str_id, popup_flags);
            }
            return (boolean)mh$.invokeExact(str_id, popup_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginPopupContextWindow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginPopupContextWindow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginPopupContextWindow(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static FunctionDescriptor igBeginPopupContextWindow$descriptor() {
        return igBeginPopupContextWindow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginPopupContextWindow(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MethodHandle igBeginPopupContextWindow$handle() {
        return igBeginPopupContextWindow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginPopupContextWindow(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MemorySegment igBeginPopupContextWindow$address() {
        return igBeginPopupContextWindow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginPopupContextWindow(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static boolean igBeginPopupContextWindow(MemorySegment str_id, int popup_flags) {
        var mh$ = igBeginPopupContextWindow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginPopupContextWindow", str_id, popup_flags);
            }
            return (boolean)mh$.invokeExact(str_id, popup_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginPopupContextVoid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginPopupContextVoid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginPopupContextVoid(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static FunctionDescriptor igBeginPopupContextVoid$descriptor() {
        return igBeginPopupContextVoid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginPopupContextVoid(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MethodHandle igBeginPopupContextVoid$handle() {
        return igBeginPopupContextVoid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginPopupContextVoid(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static MemorySegment igBeginPopupContextVoid$address() {
        return igBeginPopupContextVoid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginPopupContextVoid(const char *str_id, ImGuiPopupFlags popup_flags)
     * }
     */
    public static boolean igBeginPopupContextVoid(MemorySegment str_id, int popup_flags) {
        var mh$ = igBeginPopupContextVoid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginPopupContextVoid", str_id, popup_flags);
            }
            return (boolean)mh$.invokeExact(str_id, popup_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsPopupOpen_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsPopupOpen_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsPopupOpen_Str(const char *str_id, ImGuiPopupFlags flags)
     * }
     */
    public static FunctionDescriptor igIsPopupOpen_Str$descriptor() {
        return igIsPopupOpen_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsPopupOpen_Str(const char *str_id, ImGuiPopupFlags flags)
     * }
     */
    public static MethodHandle igIsPopupOpen_Str$handle() {
        return igIsPopupOpen_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsPopupOpen_Str(const char *str_id, ImGuiPopupFlags flags)
     * }
     */
    public static MemorySegment igIsPopupOpen_Str$address() {
        return igIsPopupOpen_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsPopupOpen_Str(const char *str_id, ImGuiPopupFlags flags)
     * }
     */
    public static boolean igIsPopupOpen_Str(MemorySegment str_id, int flags) {
        var mh$ = igIsPopupOpen_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsPopupOpen_Str", str_id, flags);
            }
            return (boolean)mh$.invokeExact(str_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginTable(const char *str_id, int columns, ImGuiTableFlags flags, const ImVec2 outer_size, float inner_width)
     * }
     */
    public static FunctionDescriptor igBeginTable$descriptor() {
        return igBeginTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginTable(const char *str_id, int columns, ImGuiTableFlags flags, const ImVec2 outer_size, float inner_width)
     * }
     */
    public static MethodHandle igBeginTable$handle() {
        return igBeginTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginTable(const char *str_id, int columns, ImGuiTableFlags flags, const ImVec2 outer_size, float inner_width)
     * }
     */
    public static MemorySegment igBeginTable$address() {
        return igBeginTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginTable(const char *str_id, int columns, ImGuiTableFlags flags, const ImVec2 outer_size, float inner_width)
     * }
     */
    public static boolean igBeginTable(MemorySegment str_id, int columns, int flags, MemorySegment outer_size, float inner_width) {
        var mh$ = igBeginTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginTable", str_id, columns, flags, outer_size, inner_width);
            }
            return (boolean)mh$.invokeExact(str_id, columns, flags, outer_size, inner_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndTable()
     * }
     */
    public static FunctionDescriptor igEndTable$descriptor() {
        return igEndTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndTable()
     * }
     */
    public static MethodHandle igEndTable$handle() {
        return igEndTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndTable()
     * }
     */
    public static MemorySegment igEndTable$address() {
        return igEndTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndTable()
     * }
     */
    public static void igEndTable() {
        var mh$ = igEndTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndTable");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableNextRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableNextRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableNextRow(ImGuiTableRowFlags row_flags, float min_row_height)
     * }
     */
    public static FunctionDescriptor igTableNextRow$descriptor() {
        return igTableNextRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableNextRow(ImGuiTableRowFlags row_flags, float min_row_height)
     * }
     */
    public static MethodHandle igTableNextRow$handle() {
        return igTableNextRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableNextRow(ImGuiTableRowFlags row_flags, float min_row_height)
     * }
     */
    public static MemorySegment igTableNextRow$address() {
        return igTableNextRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableNextRow(ImGuiTableRowFlags row_flags, float min_row_height)
     * }
     */
    public static void igTableNextRow(int row_flags, float min_row_height) {
        var mh$ = igTableNextRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableNextRow", row_flags, min_row_height);
            }
            mh$.invokeExact(row_flags, min_row_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableNextColumn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableNextColumn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTableNextColumn()
     * }
     */
    public static FunctionDescriptor igTableNextColumn$descriptor() {
        return igTableNextColumn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTableNextColumn()
     * }
     */
    public static MethodHandle igTableNextColumn$handle() {
        return igTableNextColumn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTableNextColumn()
     * }
     */
    public static MemorySegment igTableNextColumn$address() {
        return igTableNextColumn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTableNextColumn()
     * }
     */
    public static boolean igTableNextColumn() {
        var mh$ = igTableNextColumn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableNextColumn");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetColumnIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetColumnIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTableSetColumnIndex(int column_n)
     * }
     */
    public static FunctionDescriptor igTableSetColumnIndex$descriptor() {
        return igTableSetColumnIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTableSetColumnIndex(int column_n)
     * }
     */
    public static MethodHandle igTableSetColumnIndex$handle() {
        return igTableSetColumnIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTableSetColumnIndex(int column_n)
     * }
     */
    public static MemorySegment igTableSetColumnIndex$address() {
        return igTableSetColumnIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTableSetColumnIndex(int column_n)
     * }
     */
    public static boolean igTableSetColumnIndex(int column_n) {
        var mh$ = igTableSetColumnIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetColumnIndex", column_n);
            }
            return (boolean)mh$.invokeExact(column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetupColumn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetupColumn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSetupColumn(const char *label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id)
     * }
     */
    public static FunctionDescriptor igTableSetupColumn$descriptor() {
        return igTableSetupColumn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSetupColumn(const char *label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id)
     * }
     */
    public static MethodHandle igTableSetupColumn$handle() {
        return igTableSetupColumn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSetupColumn(const char *label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id)
     * }
     */
    public static MemorySegment igTableSetupColumn$address() {
        return igTableSetupColumn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSetupColumn(const char *label, ImGuiTableColumnFlags flags, float init_width_or_weight, ImGuiID user_id)
     * }
     */
    public static void igTableSetupColumn(MemorySegment label, int flags, float init_width_or_weight, int user_id) {
        var mh$ = igTableSetupColumn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetupColumn", label, flags, init_width_or_weight, user_id);
            }
            mh$.invokeExact(label, flags, init_width_or_weight, user_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetupScrollFreeze {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetupScrollFreeze");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSetupScrollFreeze(int cols, int rows)
     * }
     */
    public static FunctionDescriptor igTableSetupScrollFreeze$descriptor() {
        return igTableSetupScrollFreeze.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSetupScrollFreeze(int cols, int rows)
     * }
     */
    public static MethodHandle igTableSetupScrollFreeze$handle() {
        return igTableSetupScrollFreeze.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSetupScrollFreeze(int cols, int rows)
     * }
     */
    public static MemorySegment igTableSetupScrollFreeze$address() {
        return igTableSetupScrollFreeze.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSetupScrollFreeze(int cols, int rows)
     * }
     */
    public static void igTableSetupScrollFreeze(int cols, int rows) {
        var mh$ = igTableSetupScrollFreeze.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetupScrollFreeze", cols, rows);
            }
            mh$.invokeExact(cols, rows);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableHeader(const char *label)
     * }
     */
    public static FunctionDescriptor igTableHeader$descriptor() {
        return igTableHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableHeader(const char *label)
     * }
     */
    public static MethodHandle igTableHeader$handle() {
        return igTableHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableHeader(const char *label)
     * }
     */
    public static MemorySegment igTableHeader$address() {
        return igTableHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableHeader(const char *label)
     * }
     */
    public static void igTableHeader(MemorySegment label) {
        var mh$ = igTableHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableHeader", label);
            }
            mh$.invokeExact(label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableHeadersRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableHeadersRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableHeadersRow()
     * }
     */
    public static FunctionDescriptor igTableHeadersRow$descriptor() {
        return igTableHeadersRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableHeadersRow()
     * }
     */
    public static MethodHandle igTableHeadersRow$handle() {
        return igTableHeadersRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableHeadersRow()
     * }
     */
    public static MemorySegment igTableHeadersRow$address() {
        return igTableHeadersRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableHeadersRow()
     * }
     */
    public static void igTableHeadersRow() {
        var mh$ = igTableHeadersRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableHeadersRow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableAngledHeadersRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableAngledHeadersRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableAngledHeadersRow()
     * }
     */
    public static FunctionDescriptor igTableAngledHeadersRow$descriptor() {
        return igTableAngledHeadersRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableAngledHeadersRow()
     * }
     */
    public static MethodHandle igTableAngledHeadersRow$handle() {
        return igTableAngledHeadersRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableAngledHeadersRow()
     * }
     */
    public static MemorySegment igTableAngledHeadersRow$address() {
        return igTableAngledHeadersRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableAngledHeadersRow()
     * }
     */
    public static void igTableAngledHeadersRow() {
        var mh$ = igTableAngledHeadersRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableAngledHeadersRow");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetSortSpecs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetSortSpecs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableSortSpecs *igTableGetSortSpecs()
     * }
     */
    public static FunctionDescriptor igTableGetSortSpecs$descriptor() {
        return igTableGetSortSpecs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableSortSpecs *igTableGetSortSpecs()
     * }
     */
    public static MethodHandle igTableGetSortSpecs$handle() {
        return igTableGetSortSpecs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableSortSpecs *igTableGetSortSpecs()
     * }
     */
    public static MemorySegment igTableGetSortSpecs$address() {
        return igTableGetSortSpecs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableSortSpecs *igTableGetSortSpecs()
     * }
     */
    public static MemorySegment igTableGetSortSpecs() {
        var mh$ = igTableGetSortSpecs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetSortSpecs");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetColumnCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetColumnCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igTableGetColumnCount()
     * }
     */
    public static FunctionDescriptor igTableGetColumnCount$descriptor() {
        return igTableGetColumnCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igTableGetColumnCount()
     * }
     */
    public static MethodHandle igTableGetColumnCount$handle() {
        return igTableGetColumnCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igTableGetColumnCount()
     * }
     */
    public static MemorySegment igTableGetColumnCount$address() {
        return igTableGetColumnCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igTableGetColumnCount()
     * }
     */
    public static int igTableGetColumnCount() {
        var mh$ = igTableGetColumnCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetColumnCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetColumnIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetColumnIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igTableGetColumnIndex()
     * }
     */
    public static FunctionDescriptor igTableGetColumnIndex$descriptor() {
        return igTableGetColumnIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igTableGetColumnIndex()
     * }
     */
    public static MethodHandle igTableGetColumnIndex$handle() {
        return igTableGetColumnIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igTableGetColumnIndex()
     * }
     */
    public static MemorySegment igTableGetColumnIndex$address() {
        return igTableGetColumnIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igTableGetColumnIndex()
     * }
     */
    public static int igTableGetColumnIndex() {
        var mh$ = igTableGetColumnIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetColumnIndex");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetRowIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetRowIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igTableGetRowIndex()
     * }
     */
    public static FunctionDescriptor igTableGetRowIndex$descriptor() {
        return igTableGetRowIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igTableGetRowIndex()
     * }
     */
    public static MethodHandle igTableGetRowIndex$handle() {
        return igTableGetRowIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igTableGetRowIndex()
     * }
     */
    public static MemorySegment igTableGetRowIndex$address() {
        return igTableGetRowIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igTableGetRowIndex()
     * }
     */
    public static int igTableGetRowIndex() {
        var mh$ = igTableGetRowIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetRowIndex");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetColumnName_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetColumnName_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igTableGetColumnName_Int(int column_n)
     * }
     */
    public static FunctionDescriptor igTableGetColumnName_Int$descriptor() {
        return igTableGetColumnName_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igTableGetColumnName_Int(int column_n)
     * }
     */
    public static MethodHandle igTableGetColumnName_Int$handle() {
        return igTableGetColumnName_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igTableGetColumnName_Int(int column_n)
     * }
     */
    public static MemorySegment igTableGetColumnName_Int$address() {
        return igTableGetColumnName_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igTableGetColumnName_Int(int column_n)
     * }
     */
    public static MemorySegment igTableGetColumnName_Int(int column_n) {
        var mh$ = igTableGetColumnName_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetColumnName_Int", column_n);
            }
            return (MemorySegment)mh$.invokeExact(column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetColumnFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetColumnFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnFlags igTableGetColumnFlags(int column_n)
     * }
     */
    public static FunctionDescriptor igTableGetColumnFlags$descriptor() {
        return igTableGetColumnFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnFlags igTableGetColumnFlags(int column_n)
     * }
     */
    public static MethodHandle igTableGetColumnFlags$handle() {
        return igTableGetColumnFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnFlags igTableGetColumnFlags(int column_n)
     * }
     */
    public static MemorySegment igTableGetColumnFlags$address() {
        return igTableGetColumnFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableColumnFlags igTableGetColumnFlags(int column_n)
     * }
     */
    public static int igTableGetColumnFlags(int column_n) {
        var mh$ = igTableGetColumnFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetColumnFlags", column_n);
            }
            return (int)mh$.invokeExact(column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetColumnEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetColumnEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSetColumnEnabled(int column_n, bool v)
     * }
     */
    public static FunctionDescriptor igTableSetColumnEnabled$descriptor() {
        return igTableSetColumnEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSetColumnEnabled(int column_n, bool v)
     * }
     */
    public static MethodHandle igTableSetColumnEnabled$handle() {
        return igTableSetColumnEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSetColumnEnabled(int column_n, bool v)
     * }
     */
    public static MemorySegment igTableSetColumnEnabled$address() {
        return igTableSetColumnEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSetColumnEnabled(int column_n, bool v)
     * }
     */
    public static void igTableSetColumnEnabled(int column_n, boolean v) {
        var mh$ = igTableSetColumnEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetColumnEnabled", column_n, v);
            }
            mh$.invokeExact(column_n, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableGetHoveredColumn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableGetHoveredColumn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igTableGetHoveredColumn()
     * }
     */
    public static FunctionDescriptor igTableGetHoveredColumn$descriptor() {
        return igTableGetHoveredColumn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igTableGetHoveredColumn()
     * }
     */
    public static MethodHandle igTableGetHoveredColumn$handle() {
        return igTableGetHoveredColumn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igTableGetHoveredColumn()
     * }
     */
    public static MemorySegment igTableGetHoveredColumn$address() {
        return igTableGetHoveredColumn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igTableGetHoveredColumn()
     * }
     */
    public static int igTableGetHoveredColumn() {
        var mh$ = igTableGetHoveredColumn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableGetHoveredColumn");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTableSetBgColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTableSetBgColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igTableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)
     * }
     */
    public static FunctionDescriptor igTableSetBgColor$descriptor() {
        return igTableSetBgColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igTableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)
     * }
     */
    public static MethodHandle igTableSetBgColor$handle() {
        return igTableSetBgColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igTableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)
     * }
     */
    public static MemorySegment igTableSetBgColor$address() {
        return igTableSetBgColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igTableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)
     * }
     */
    public static void igTableSetBgColor(int target, int color, int column_n) {
        var mh$ = igTableSetBgColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTableSetBgColor", target, color, column_n);
            }
            mh$.invokeExact(target, color, column_n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColumns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColumns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igColumns(int count, const char *id, bool border)
     * }
     */
    public static FunctionDescriptor igColumns$descriptor() {
        return igColumns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igColumns(int count, const char *id, bool border)
     * }
     */
    public static MethodHandle igColumns$handle() {
        return igColumns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igColumns(int count, const char *id, bool border)
     * }
     */
    public static MemorySegment igColumns$address() {
        return igColumns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igColumns(int count, const char *id, bool border)
     * }
     */
    public static void igColumns(int count, MemorySegment id, boolean border) {
        var mh$ = igColumns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColumns", count, id, border);
            }
            mh$.invokeExact(count, id, border);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igNextColumn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igNextColumn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igNextColumn()
     * }
     */
    public static FunctionDescriptor igNextColumn$descriptor() {
        return igNextColumn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igNextColumn()
     * }
     */
    public static MethodHandle igNextColumn$handle() {
        return igNextColumn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igNextColumn()
     * }
     */
    public static MemorySegment igNextColumn$address() {
        return igNextColumn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igNextColumn()
     * }
     */
    public static void igNextColumn() {
        var mh$ = igNextColumn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igNextColumn");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColumnIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColumnIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igGetColumnIndex()
     * }
     */
    public static FunctionDescriptor igGetColumnIndex$descriptor() {
        return igGetColumnIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igGetColumnIndex()
     * }
     */
    public static MethodHandle igGetColumnIndex$handle() {
        return igGetColumnIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igGetColumnIndex()
     * }
     */
    public static MemorySegment igGetColumnIndex$address() {
        return igGetColumnIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igGetColumnIndex()
     * }
     */
    public static int igGetColumnIndex() {
        var mh$ = igGetColumnIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColumnIndex");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColumnWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColumnWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetColumnWidth(int column_index)
     * }
     */
    public static FunctionDescriptor igGetColumnWidth$descriptor() {
        return igGetColumnWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetColumnWidth(int column_index)
     * }
     */
    public static MethodHandle igGetColumnWidth$handle() {
        return igGetColumnWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetColumnWidth(int column_index)
     * }
     */
    public static MemorySegment igGetColumnWidth$address() {
        return igGetColumnWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetColumnWidth(int column_index)
     * }
     */
    public static float igGetColumnWidth(int column_index) {
        var mh$ = igGetColumnWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColumnWidth", column_index);
            }
            return (float)mh$.invokeExact(column_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetColumnWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetColumnWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetColumnWidth(int column_index, float width)
     * }
     */
    public static FunctionDescriptor igSetColumnWidth$descriptor() {
        return igSetColumnWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetColumnWidth(int column_index, float width)
     * }
     */
    public static MethodHandle igSetColumnWidth$handle() {
        return igSetColumnWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetColumnWidth(int column_index, float width)
     * }
     */
    public static MemorySegment igSetColumnWidth$address() {
        return igSetColumnWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetColumnWidth(int column_index, float width)
     * }
     */
    public static void igSetColumnWidth(int column_index, float width) {
        var mh$ = igSetColumnWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetColumnWidth", column_index, width);
            }
            mh$.invokeExact(column_index, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColumnOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColumnOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igGetColumnOffset(int column_index)
     * }
     */
    public static FunctionDescriptor igGetColumnOffset$descriptor() {
        return igGetColumnOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igGetColumnOffset(int column_index)
     * }
     */
    public static MethodHandle igGetColumnOffset$handle() {
        return igGetColumnOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igGetColumnOffset(int column_index)
     * }
     */
    public static MemorySegment igGetColumnOffset$address() {
        return igGetColumnOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igGetColumnOffset(int column_index)
     * }
     */
    public static float igGetColumnOffset(int column_index) {
        var mh$ = igGetColumnOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColumnOffset", column_index);
            }
            return (float)mh$.invokeExact(column_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetColumnOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetColumnOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetColumnOffset(int column_index, float offset_x)
     * }
     */
    public static FunctionDescriptor igSetColumnOffset$descriptor() {
        return igSetColumnOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetColumnOffset(int column_index, float offset_x)
     * }
     */
    public static MethodHandle igSetColumnOffset$handle() {
        return igSetColumnOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetColumnOffset(int column_index, float offset_x)
     * }
     */
    public static MemorySegment igSetColumnOffset$address() {
        return igSetColumnOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetColumnOffset(int column_index, float offset_x)
     * }
     */
    public static void igSetColumnOffset(int column_index, float offset_x) {
        var mh$ = igSetColumnOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetColumnOffset", column_index, offset_x);
            }
            mh$.invokeExact(column_index, offset_x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetColumnsCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetColumnsCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igGetColumnsCount()
     * }
     */
    public static FunctionDescriptor igGetColumnsCount$descriptor() {
        return igGetColumnsCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igGetColumnsCount()
     * }
     */
    public static MethodHandle igGetColumnsCount$handle() {
        return igGetColumnsCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igGetColumnsCount()
     * }
     */
    public static MemorySegment igGetColumnsCount$address() {
        return igGetColumnsCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igGetColumnsCount()
     * }
     */
    public static int igGetColumnsCount() {
        var mh$ = igGetColumnsCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetColumnsCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginTabBar(const char *str_id, ImGuiTabBarFlags flags)
     * }
     */
    public static FunctionDescriptor igBeginTabBar$descriptor() {
        return igBeginTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginTabBar(const char *str_id, ImGuiTabBarFlags flags)
     * }
     */
    public static MethodHandle igBeginTabBar$handle() {
        return igBeginTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginTabBar(const char *str_id, ImGuiTabBarFlags flags)
     * }
     */
    public static MemorySegment igBeginTabBar$address() {
        return igBeginTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginTabBar(const char *str_id, ImGuiTabBarFlags flags)
     * }
     */
    public static boolean igBeginTabBar(MemorySegment str_id, int flags) {
        var mh$ = igBeginTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginTabBar", str_id, flags);
            }
            return (boolean)mh$.invokeExact(str_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndTabBar()
     * }
     */
    public static FunctionDescriptor igEndTabBar$descriptor() {
        return igEndTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndTabBar()
     * }
     */
    public static MethodHandle igEndTabBar$handle() {
        return igEndTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndTabBar()
     * }
     */
    public static MemorySegment igEndTabBar$address() {
        return igEndTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndTabBar()
     * }
     */
    public static void igEndTabBar() {
        var mh$ = igEndTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndTabBar");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginTabItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginTabItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginTabItem(const char *label, bool *p_open, ImGuiTabItemFlags flags)
     * }
     */
    public static FunctionDescriptor igBeginTabItem$descriptor() {
        return igBeginTabItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginTabItem(const char *label, bool *p_open, ImGuiTabItemFlags flags)
     * }
     */
    public static MethodHandle igBeginTabItem$handle() {
        return igBeginTabItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginTabItem(const char *label, bool *p_open, ImGuiTabItemFlags flags)
     * }
     */
    public static MemorySegment igBeginTabItem$address() {
        return igBeginTabItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginTabItem(const char *label, bool *p_open, ImGuiTabItemFlags flags)
     * }
     */
    public static boolean igBeginTabItem(MemorySegment label, MemorySegment p_open, int flags) {
        var mh$ = igBeginTabItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginTabItem", label, p_open, flags);
            }
            return (boolean)mh$.invokeExact(label, p_open, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndTabItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndTabItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndTabItem()
     * }
     */
    public static FunctionDescriptor igEndTabItem$descriptor() {
        return igEndTabItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndTabItem()
     * }
     */
    public static MethodHandle igEndTabItem$handle() {
        return igEndTabItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndTabItem()
     * }
     */
    public static MemorySegment igEndTabItem$address() {
        return igEndTabItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndTabItem()
     * }
     */
    public static void igEndTabItem() {
        var mh$ = igEndTabItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndTabItem");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igTabItemButton {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igTabItemButton");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igTabItemButton(const char *label, ImGuiTabItemFlags flags)
     * }
     */
    public static FunctionDescriptor igTabItemButton$descriptor() {
        return igTabItemButton.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igTabItemButton(const char *label, ImGuiTabItemFlags flags)
     * }
     */
    public static MethodHandle igTabItemButton$handle() {
        return igTabItemButton.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igTabItemButton(const char *label, ImGuiTabItemFlags flags)
     * }
     */
    public static MemorySegment igTabItemButton$address() {
        return igTabItemButton.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igTabItemButton(const char *label, ImGuiTabItemFlags flags)
     * }
     */
    public static boolean igTabItemButton(MemorySegment label, int flags) {
        var mh$ = igTabItemButton.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igTabItemButton", label, flags);
            }
            return (boolean)mh$.invokeExact(label, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetTabItemClosed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetTabItemClosed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetTabItemClosed(const char *tab_or_docked_window_label)
     * }
     */
    public static FunctionDescriptor igSetTabItemClosed$descriptor() {
        return igSetTabItemClosed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetTabItemClosed(const char *tab_or_docked_window_label)
     * }
     */
    public static MethodHandle igSetTabItemClosed$handle() {
        return igSetTabItemClosed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetTabItemClosed(const char *tab_or_docked_window_label)
     * }
     */
    public static MemorySegment igSetTabItemClosed$address() {
        return igSetTabItemClosed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetTabItemClosed(const char *tab_or_docked_window_label)
     * }
     */
    public static void igSetTabItemClosed(MemorySegment tab_or_docked_window_label) {
        var mh$ = igSetTabItemClosed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetTabItemClosed", tab_or_docked_window_label);
            }
            mh$.invokeExact(tab_or_docked_window_label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igDockSpace(ImGuiID dockspace_id, const ImVec2 size, ImGuiDockNodeFlags flags, const ImGuiWindowClass *window_class)
     * }
     */
    public static FunctionDescriptor igDockSpace$descriptor() {
        return igDockSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igDockSpace(ImGuiID dockspace_id, const ImVec2 size, ImGuiDockNodeFlags flags, const ImGuiWindowClass *window_class)
     * }
     */
    public static MethodHandle igDockSpace$handle() {
        return igDockSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igDockSpace(ImGuiID dockspace_id, const ImVec2 size, ImGuiDockNodeFlags flags, const ImGuiWindowClass *window_class)
     * }
     */
    public static MemorySegment igDockSpace$address() {
        return igDockSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igDockSpace(ImGuiID dockspace_id, const ImVec2 size, ImGuiDockNodeFlags flags, const ImGuiWindowClass *window_class)
     * }
     */
    public static int igDockSpace(int dockspace_id, MemorySegment size, int flags, MemorySegment window_class) {
        var mh$ = igDockSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockSpace", dockspace_id, size, flags, window_class);
            }
            return (int)mh$.invokeExact(dockspace_id, size, flags, window_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDockSpaceOverViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDockSpaceOverViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igDockSpaceOverViewport(ImGuiID dockspace_id, const ImGuiViewport *viewport, ImGuiDockNodeFlags flags, const ImGuiWindowClass *window_class)
     * }
     */
    public static FunctionDescriptor igDockSpaceOverViewport$descriptor() {
        return igDockSpaceOverViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igDockSpaceOverViewport(ImGuiID dockspace_id, const ImGuiViewport *viewport, ImGuiDockNodeFlags flags, const ImGuiWindowClass *window_class)
     * }
     */
    public static MethodHandle igDockSpaceOverViewport$handle() {
        return igDockSpaceOverViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igDockSpaceOverViewport(ImGuiID dockspace_id, const ImGuiViewport *viewport, ImGuiDockNodeFlags flags, const ImGuiWindowClass *window_class)
     * }
     */
    public static MemorySegment igDockSpaceOverViewport$address() {
        return igDockSpaceOverViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igDockSpaceOverViewport(ImGuiID dockspace_id, const ImGuiViewport *viewport, ImGuiDockNodeFlags flags, const ImGuiWindowClass *window_class)
     * }
     */
    public static int igDockSpaceOverViewport(int dockspace_id, MemorySegment viewport, int flags, MemorySegment window_class) {
        var mh$ = igDockSpaceOverViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDockSpaceOverViewport", dockspace_id, viewport, flags, window_class);
            }
            return (int)mh$.invokeExact(dockspace_id, viewport, flags, window_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowDockID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowDockID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetNextWindowDockID$descriptor() {
        return igSetNextWindowDockID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetNextWindowDockID$handle() {
        return igSetNextWindowDockID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetNextWindowDockID$address() {
        return igSetNextWindowDockID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowDockID(ImGuiID dock_id, ImGuiCond cond)
     * }
     */
    public static void igSetNextWindowDockID(int dock_id, int cond) {
        var mh$ = igSetNextWindowDockID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowDockID", dock_id, cond);
            }
            mh$.invokeExact(dock_id, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextWindowClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextWindowClass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextWindowClass(const ImGuiWindowClass *window_class)
     * }
     */
    public static FunctionDescriptor igSetNextWindowClass$descriptor() {
        return igSetNextWindowClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextWindowClass(const ImGuiWindowClass *window_class)
     * }
     */
    public static MethodHandle igSetNextWindowClass$handle() {
        return igSetNextWindowClass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextWindowClass(const ImGuiWindowClass *window_class)
     * }
     */
    public static MemorySegment igSetNextWindowClass$address() {
        return igSetNextWindowClass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextWindowClass(const ImGuiWindowClass *window_class)
     * }
     */
    public static void igSetNextWindowClass(MemorySegment window_class) {
        var mh$ = igSetNextWindowClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextWindowClass", window_class);
            }
            mh$.invokeExact(window_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetWindowDockID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetWindowDockID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowDockID()
     * }
     */
    public static FunctionDescriptor igGetWindowDockID$descriptor() {
        return igGetWindowDockID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowDockID()
     * }
     */
    public static MethodHandle igGetWindowDockID$handle() {
        return igGetWindowDockID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowDockID()
     * }
     */
    public static MemorySegment igGetWindowDockID$address() {
        return igGetWindowDockID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetWindowDockID()
     * }
     */
    public static int igGetWindowDockID() {
        var mh$ = igGetWindowDockID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetWindowDockID");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsWindowDocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsWindowDocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsWindowDocked()
     * }
     */
    public static FunctionDescriptor igIsWindowDocked$descriptor() {
        return igIsWindowDocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsWindowDocked()
     * }
     */
    public static MethodHandle igIsWindowDocked$handle() {
        return igIsWindowDocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsWindowDocked()
     * }
     */
    public static MemorySegment igIsWindowDocked$address() {
        return igIsWindowDocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsWindowDocked()
     * }
     */
    public static boolean igIsWindowDocked() {
        var mh$ = igIsWindowDocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsWindowDocked");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogToTTY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogToTTY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogToTTY(int auto_open_depth)
     * }
     */
    public static FunctionDescriptor igLogToTTY$descriptor() {
        return igLogToTTY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogToTTY(int auto_open_depth)
     * }
     */
    public static MethodHandle igLogToTTY$handle() {
        return igLogToTTY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogToTTY(int auto_open_depth)
     * }
     */
    public static MemorySegment igLogToTTY$address() {
        return igLogToTTY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogToTTY(int auto_open_depth)
     * }
     */
    public static void igLogToTTY(int auto_open_depth) {
        var mh$ = igLogToTTY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogToTTY", auto_open_depth);
            }
            mh$.invokeExact(auto_open_depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogToFile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogToFile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogToFile(int auto_open_depth, const char *filename)
     * }
     */
    public static FunctionDescriptor igLogToFile$descriptor() {
        return igLogToFile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogToFile(int auto_open_depth, const char *filename)
     * }
     */
    public static MethodHandle igLogToFile$handle() {
        return igLogToFile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogToFile(int auto_open_depth, const char *filename)
     * }
     */
    public static MemorySegment igLogToFile$address() {
        return igLogToFile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogToFile(int auto_open_depth, const char *filename)
     * }
     */
    public static void igLogToFile(int auto_open_depth, MemorySegment filename) {
        var mh$ = igLogToFile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogToFile", auto_open_depth, filename);
            }
            mh$.invokeExact(auto_open_depth, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogToClipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogToClipboard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogToClipboard(int auto_open_depth)
     * }
     */
    public static FunctionDescriptor igLogToClipboard$descriptor() {
        return igLogToClipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogToClipboard(int auto_open_depth)
     * }
     */
    public static MethodHandle igLogToClipboard$handle() {
        return igLogToClipboard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogToClipboard(int auto_open_depth)
     * }
     */
    public static MemorySegment igLogToClipboard$address() {
        return igLogToClipboard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogToClipboard(int auto_open_depth)
     * }
     */
    public static void igLogToClipboard(int auto_open_depth) {
        var mh$ = igLogToClipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogToClipboard", auto_open_depth);
            }
            mh$.invokeExact(auto_open_depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogFinish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogFinish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogFinish()
     * }
     */
    public static FunctionDescriptor igLogFinish$descriptor() {
        return igLogFinish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogFinish()
     * }
     */
    public static MethodHandle igLogFinish$handle() {
        return igLogFinish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogFinish()
     * }
     */
    public static MemorySegment igLogFinish$address() {
        return igLogFinish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogFinish()
     * }
     */
    public static void igLogFinish() {
        var mh$ = igLogFinish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogFinish");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogButtons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogButtons");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogButtons()
     * }
     */
    public static FunctionDescriptor igLogButtons$descriptor() {
        return igLogButtons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogButtons()
     * }
     */
    public static MethodHandle igLogButtons$handle() {
        return igLogButtons.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogButtons()
     * }
     */
    public static MemorySegment igLogButtons$address() {
        return igLogButtons.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogButtons()
     * }
     */
    public static void igLogButtons() {
        var mh$ = igLogButtons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogButtons");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLogTextV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLogTextV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLogTextV(const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igLogTextV$descriptor() {
        return igLogTextV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLogTextV(const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igLogTextV$handle() {
        return igLogTextV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLogTextV(const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igLogTextV$address() {
        return igLogTextV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLogTextV(const char *fmt, va_list args)
     * }
     */
    public static void igLogTextV(MemorySegment fmt, MemorySegment args) {
        var mh$ = igLogTextV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLogTextV", fmt, args);
            }
            mh$.invokeExact(fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginDragDropSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginDragDropSource");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginDragDropSource(ImGuiDragDropFlags flags)
     * }
     */
    public static FunctionDescriptor igBeginDragDropSource$descriptor() {
        return igBeginDragDropSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginDragDropSource(ImGuiDragDropFlags flags)
     * }
     */
    public static MethodHandle igBeginDragDropSource$handle() {
        return igBeginDragDropSource.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginDragDropSource(ImGuiDragDropFlags flags)
     * }
     */
    public static MemorySegment igBeginDragDropSource$address() {
        return igBeginDragDropSource.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginDragDropSource(ImGuiDragDropFlags flags)
     * }
     */
    public static boolean igBeginDragDropSource(int flags) {
        var mh$ = igBeginDragDropSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginDragDropSource", flags);
            }
            return (boolean)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetDragDropPayload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetDragDropPayload");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igSetDragDropPayload(const char *type, const void *data, size_t sz, ImGuiCond cond)
     * }
     */
    public static FunctionDescriptor igSetDragDropPayload$descriptor() {
        return igSetDragDropPayload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igSetDragDropPayload(const char *type, const void *data, size_t sz, ImGuiCond cond)
     * }
     */
    public static MethodHandle igSetDragDropPayload$handle() {
        return igSetDragDropPayload.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igSetDragDropPayload(const char *type, const void *data, size_t sz, ImGuiCond cond)
     * }
     */
    public static MemorySegment igSetDragDropPayload$address() {
        return igSetDragDropPayload.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igSetDragDropPayload(const char *type, const void *data, size_t sz, ImGuiCond cond)
     * }
     */
    public static boolean igSetDragDropPayload(MemorySegment type, MemorySegment data, long sz, int cond) {
        var mh$ = igSetDragDropPayload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetDragDropPayload", type, data, sz, cond);
            }
            return (boolean)mh$.invokeExact(type, data, sz, cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndDragDropSource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndDragDropSource");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndDragDropSource()
     * }
     */
    public static FunctionDescriptor igEndDragDropSource$descriptor() {
        return igEndDragDropSource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndDragDropSource()
     * }
     */
    public static MethodHandle igEndDragDropSource$handle() {
        return igEndDragDropSource.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndDragDropSource()
     * }
     */
    public static MemorySegment igEndDragDropSource$address() {
        return igEndDragDropSource.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndDragDropSource()
     * }
     */
    public static void igEndDragDropSource() {
        var mh$ = igEndDragDropSource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndDragDropSource");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginDragDropTarget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginDragDropTarget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igBeginDragDropTarget()
     * }
     */
    public static FunctionDescriptor igBeginDragDropTarget$descriptor() {
        return igBeginDragDropTarget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igBeginDragDropTarget()
     * }
     */
    public static MethodHandle igBeginDragDropTarget$handle() {
        return igBeginDragDropTarget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igBeginDragDropTarget()
     * }
     */
    public static MemorySegment igBeginDragDropTarget$address() {
        return igBeginDragDropTarget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igBeginDragDropTarget()
     * }
     */
    public static boolean igBeginDragDropTarget() {
        var mh$ = igBeginDragDropTarget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginDragDropTarget");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igAcceptDragDropPayload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igAcceptDragDropPayload");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImGuiPayload *igAcceptDragDropPayload(const char *type, ImGuiDragDropFlags flags)
     * }
     */
    public static FunctionDescriptor igAcceptDragDropPayload$descriptor() {
        return igAcceptDragDropPayload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImGuiPayload *igAcceptDragDropPayload(const char *type, ImGuiDragDropFlags flags)
     * }
     */
    public static MethodHandle igAcceptDragDropPayload$handle() {
        return igAcceptDragDropPayload.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImGuiPayload *igAcceptDragDropPayload(const char *type, ImGuiDragDropFlags flags)
     * }
     */
    public static MemorySegment igAcceptDragDropPayload$address() {
        return igAcceptDragDropPayload.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImGuiPayload *igAcceptDragDropPayload(const char *type, ImGuiDragDropFlags flags)
     * }
     */
    public static MemorySegment igAcceptDragDropPayload(MemorySegment type, int flags) {
        var mh$ = igAcceptDragDropPayload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igAcceptDragDropPayload", type, flags);
            }
            return (MemorySegment)mh$.invokeExact(type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndDragDropTarget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndDragDropTarget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndDragDropTarget()
     * }
     */
    public static FunctionDescriptor igEndDragDropTarget$descriptor() {
        return igEndDragDropTarget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndDragDropTarget()
     * }
     */
    public static MethodHandle igEndDragDropTarget$handle() {
        return igEndDragDropTarget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndDragDropTarget()
     * }
     */
    public static MemorySegment igEndDragDropTarget$address() {
        return igEndDragDropTarget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndDragDropTarget()
     * }
     */
    public static void igEndDragDropTarget() {
        var mh$ = igEndDragDropTarget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndDragDropTarget");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetDragDropPayload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetDragDropPayload");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImGuiPayload *igGetDragDropPayload()
     * }
     */
    public static FunctionDescriptor igGetDragDropPayload$descriptor() {
        return igGetDragDropPayload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImGuiPayload *igGetDragDropPayload()
     * }
     */
    public static MethodHandle igGetDragDropPayload$handle() {
        return igGetDragDropPayload.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImGuiPayload *igGetDragDropPayload()
     * }
     */
    public static MemorySegment igGetDragDropPayload$address() {
        return igGetDragDropPayload.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImGuiPayload *igGetDragDropPayload()
     * }
     */
    public static MemorySegment igGetDragDropPayload() {
        var mh$ = igGetDragDropPayload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetDragDropPayload");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igBeginDisabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igBeginDisabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igBeginDisabled(bool disabled)
     * }
     */
    public static FunctionDescriptor igBeginDisabled$descriptor() {
        return igBeginDisabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igBeginDisabled(bool disabled)
     * }
     */
    public static MethodHandle igBeginDisabled$handle() {
        return igBeginDisabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igBeginDisabled(bool disabled)
     * }
     */
    public static MemorySegment igBeginDisabled$address() {
        return igBeginDisabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igBeginDisabled(bool disabled)
     * }
     */
    public static void igBeginDisabled(boolean disabled) {
        var mh$ = igBeginDisabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igBeginDisabled", disabled);
            }
            mh$.invokeExact(disabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igEndDisabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igEndDisabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igEndDisabled()
     * }
     */
    public static FunctionDescriptor igEndDisabled$descriptor() {
        return igEndDisabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igEndDisabled()
     * }
     */
    public static MethodHandle igEndDisabled$handle() {
        return igEndDisabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igEndDisabled()
     * }
     */
    public static MemorySegment igEndDisabled$address() {
        return igEndDisabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igEndDisabled()
     * }
     */
    public static void igEndDisabled() {
        var mh$ = igEndDisabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igEndDisabled");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPushClipRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPushClipRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPushClipRect(const ImVec2 clip_rect_min, const ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
     * }
     */
    public static FunctionDescriptor igPushClipRect$descriptor() {
        return igPushClipRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPushClipRect(const ImVec2 clip_rect_min, const ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
     * }
     */
    public static MethodHandle igPushClipRect$handle() {
        return igPushClipRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPushClipRect(const ImVec2 clip_rect_min, const ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
     * }
     */
    public static MemorySegment igPushClipRect$address() {
        return igPushClipRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPushClipRect(const ImVec2 clip_rect_min, const ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
     * }
     */
    public static void igPushClipRect(MemorySegment clip_rect_min, MemorySegment clip_rect_max, boolean intersect_with_current_clip_rect) {
        var mh$ = igPushClipRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPushClipRect", clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
            }
            mh$.invokeExact(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igPopClipRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igPopClipRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igPopClipRect()
     * }
     */
    public static FunctionDescriptor igPopClipRect$descriptor() {
        return igPopClipRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igPopClipRect()
     * }
     */
    public static MethodHandle igPopClipRect$handle() {
        return igPopClipRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igPopClipRect()
     * }
     */
    public static MemorySegment igPopClipRect$address() {
        return igPopClipRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igPopClipRect()
     * }
     */
    public static void igPopClipRect() {
        var mh$ = igPopClipRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igPopClipRect");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetItemDefaultFocus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetItemDefaultFocus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetItemDefaultFocus()
     * }
     */
    public static FunctionDescriptor igSetItemDefaultFocus$descriptor() {
        return igSetItemDefaultFocus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetItemDefaultFocus()
     * }
     */
    public static MethodHandle igSetItemDefaultFocus$handle() {
        return igSetItemDefaultFocus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetItemDefaultFocus()
     * }
     */
    public static MemorySegment igSetItemDefaultFocus$address() {
        return igSetItemDefaultFocus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetItemDefaultFocus()
     * }
     */
    public static void igSetItemDefaultFocus() {
        var mh$ = igSetItemDefaultFocus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetItemDefaultFocus");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetKeyboardFocusHere {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetKeyboardFocusHere");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetKeyboardFocusHere(int offset)
     * }
     */
    public static FunctionDescriptor igSetKeyboardFocusHere$descriptor() {
        return igSetKeyboardFocusHere.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetKeyboardFocusHere(int offset)
     * }
     */
    public static MethodHandle igSetKeyboardFocusHere$handle() {
        return igSetKeyboardFocusHere.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetKeyboardFocusHere(int offset)
     * }
     */
    public static MemorySegment igSetKeyboardFocusHere$address() {
        return igSetKeyboardFocusHere.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetKeyboardFocusHere(int offset)
     * }
     */
    public static void igSetKeyboardFocusHere(int offset) {
        var mh$ = igSetKeyboardFocusHere.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetKeyboardFocusHere", offset);
            }
            mh$.invokeExact(offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextItemAllowOverlap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextItemAllowOverlap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextItemAllowOverlap()
     * }
     */
    public static FunctionDescriptor igSetNextItemAllowOverlap$descriptor() {
        return igSetNextItemAllowOverlap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextItemAllowOverlap()
     * }
     */
    public static MethodHandle igSetNextItemAllowOverlap$handle() {
        return igSetNextItemAllowOverlap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextItemAllowOverlap()
     * }
     */
    public static MemorySegment igSetNextItemAllowOverlap$address() {
        return igSetNextItemAllowOverlap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextItemAllowOverlap()
     * }
     */
    public static void igSetNextItemAllowOverlap() {
        var mh$ = igSetNextItemAllowOverlap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextItemAllowOverlap");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemHovered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemHovered");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemHovered(ImGuiHoveredFlags flags)
     * }
     */
    public static FunctionDescriptor igIsItemHovered$descriptor() {
        return igIsItemHovered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemHovered(ImGuiHoveredFlags flags)
     * }
     */
    public static MethodHandle igIsItemHovered$handle() {
        return igIsItemHovered.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemHovered(ImGuiHoveredFlags flags)
     * }
     */
    public static MemorySegment igIsItemHovered$address() {
        return igIsItemHovered.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemHovered(ImGuiHoveredFlags flags)
     * }
     */
    public static boolean igIsItemHovered(int flags) {
        var mh$ = igIsItemHovered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemHovered", flags);
            }
            return (boolean)mh$.invokeExact(flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemActive()
     * }
     */
    public static FunctionDescriptor igIsItemActive$descriptor() {
        return igIsItemActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemActive()
     * }
     */
    public static MethodHandle igIsItemActive$handle() {
        return igIsItemActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemActive()
     * }
     */
    public static MemorySegment igIsItemActive$address() {
        return igIsItemActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemActive()
     * }
     */
    public static boolean igIsItemActive() {
        var mh$ = igIsItemActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemActive");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemFocused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemFocused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemFocused()
     * }
     */
    public static FunctionDescriptor igIsItemFocused$descriptor() {
        return igIsItemFocused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemFocused()
     * }
     */
    public static MethodHandle igIsItemFocused$handle() {
        return igIsItemFocused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemFocused()
     * }
     */
    public static MemorySegment igIsItemFocused$address() {
        return igIsItemFocused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemFocused()
     * }
     */
    public static boolean igIsItemFocused() {
        var mh$ = igIsItemFocused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemFocused");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemClicked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemClicked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemClicked(ImGuiMouseButton mouse_button)
     * }
     */
    public static FunctionDescriptor igIsItemClicked$descriptor() {
        return igIsItemClicked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemClicked(ImGuiMouseButton mouse_button)
     * }
     */
    public static MethodHandle igIsItemClicked$handle() {
        return igIsItemClicked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemClicked(ImGuiMouseButton mouse_button)
     * }
     */
    public static MemorySegment igIsItemClicked$address() {
        return igIsItemClicked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemClicked(ImGuiMouseButton mouse_button)
     * }
     */
    public static boolean igIsItemClicked(int mouse_button) {
        var mh$ = igIsItemClicked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemClicked", mouse_button);
            }
            return (boolean)mh$.invokeExact(mouse_button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemVisible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemVisible");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemVisible()
     * }
     */
    public static FunctionDescriptor igIsItemVisible$descriptor() {
        return igIsItemVisible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemVisible()
     * }
     */
    public static MethodHandle igIsItemVisible$handle() {
        return igIsItemVisible.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemVisible()
     * }
     */
    public static MemorySegment igIsItemVisible$address() {
        return igIsItemVisible.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemVisible()
     * }
     */
    public static boolean igIsItemVisible() {
        var mh$ = igIsItemVisible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemVisible");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemEdited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemEdited");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemEdited()
     * }
     */
    public static FunctionDescriptor igIsItemEdited$descriptor() {
        return igIsItemEdited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemEdited()
     * }
     */
    public static MethodHandle igIsItemEdited$handle() {
        return igIsItemEdited.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemEdited()
     * }
     */
    public static MemorySegment igIsItemEdited$address() {
        return igIsItemEdited.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemEdited()
     * }
     */
    public static boolean igIsItemEdited() {
        var mh$ = igIsItemEdited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemEdited");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemActivated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemActivated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemActivated()
     * }
     */
    public static FunctionDescriptor igIsItemActivated$descriptor() {
        return igIsItemActivated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemActivated()
     * }
     */
    public static MethodHandle igIsItemActivated$handle() {
        return igIsItemActivated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemActivated()
     * }
     */
    public static MemorySegment igIsItemActivated$address() {
        return igIsItemActivated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemActivated()
     * }
     */
    public static boolean igIsItemActivated() {
        var mh$ = igIsItemActivated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemActivated");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemDeactivated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemDeactivated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemDeactivated()
     * }
     */
    public static FunctionDescriptor igIsItemDeactivated$descriptor() {
        return igIsItemDeactivated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemDeactivated()
     * }
     */
    public static MethodHandle igIsItemDeactivated$handle() {
        return igIsItemDeactivated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemDeactivated()
     * }
     */
    public static MemorySegment igIsItemDeactivated$address() {
        return igIsItemDeactivated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemDeactivated()
     * }
     */
    public static boolean igIsItemDeactivated() {
        var mh$ = igIsItemDeactivated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemDeactivated");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemDeactivatedAfterEdit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemDeactivatedAfterEdit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemDeactivatedAfterEdit()
     * }
     */
    public static FunctionDescriptor igIsItemDeactivatedAfterEdit$descriptor() {
        return igIsItemDeactivatedAfterEdit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemDeactivatedAfterEdit()
     * }
     */
    public static MethodHandle igIsItemDeactivatedAfterEdit$handle() {
        return igIsItemDeactivatedAfterEdit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemDeactivatedAfterEdit()
     * }
     */
    public static MemorySegment igIsItemDeactivatedAfterEdit$address() {
        return igIsItemDeactivatedAfterEdit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemDeactivatedAfterEdit()
     * }
     */
    public static boolean igIsItemDeactivatedAfterEdit() {
        var mh$ = igIsItemDeactivatedAfterEdit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemDeactivatedAfterEdit");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsItemToggledOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsItemToggledOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsItemToggledOpen()
     * }
     */
    public static FunctionDescriptor igIsItemToggledOpen$descriptor() {
        return igIsItemToggledOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsItemToggledOpen()
     * }
     */
    public static MethodHandle igIsItemToggledOpen$handle() {
        return igIsItemToggledOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsItemToggledOpen()
     * }
     */
    public static MemorySegment igIsItemToggledOpen$address() {
        return igIsItemToggledOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsItemToggledOpen()
     * }
     */
    public static boolean igIsItemToggledOpen() {
        var mh$ = igIsItemToggledOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsItemToggledOpen");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsAnyItemHovered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsAnyItemHovered");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsAnyItemHovered()
     * }
     */
    public static FunctionDescriptor igIsAnyItemHovered$descriptor() {
        return igIsAnyItemHovered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsAnyItemHovered()
     * }
     */
    public static MethodHandle igIsAnyItemHovered$handle() {
        return igIsAnyItemHovered.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsAnyItemHovered()
     * }
     */
    public static MemorySegment igIsAnyItemHovered$address() {
        return igIsAnyItemHovered.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsAnyItemHovered()
     * }
     */
    public static boolean igIsAnyItemHovered() {
        var mh$ = igIsAnyItemHovered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsAnyItemHovered");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsAnyItemActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsAnyItemActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsAnyItemActive()
     * }
     */
    public static FunctionDescriptor igIsAnyItemActive$descriptor() {
        return igIsAnyItemActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsAnyItemActive()
     * }
     */
    public static MethodHandle igIsAnyItemActive$handle() {
        return igIsAnyItemActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsAnyItemActive()
     * }
     */
    public static MemorySegment igIsAnyItemActive$address() {
        return igIsAnyItemActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsAnyItemActive()
     * }
     */
    public static boolean igIsAnyItemActive() {
        var mh$ = igIsAnyItemActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsAnyItemActive");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsAnyItemFocused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsAnyItemFocused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsAnyItemFocused()
     * }
     */
    public static FunctionDescriptor igIsAnyItemFocused$descriptor() {
        return igIsAnyItemFocused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsAnyItemFocused()
     * }
     */
    public static MethodHandle igIsAnyItemFocused$handle() {
        return igIsAnyItemFocused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsAnyItemFocused()
     * }
     */
    public static MemorySegment igIsAnyItemFocused$address() {
        return igIsAnyItemFocused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsAnyItemFocused()
     * }
     */
    public static boolean igIsAnyItemFocused() {
        var mh$ = igIsAnyItemFocused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsAnyItemFocused");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetItemID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetItemID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igGetItemID()
     * }
     */
    public static FunctionDescriptor igGetItemID$descriptor() {
        return igGetItemID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igGetItemID()
     * }
     */
    public static MethodHandle igGetItemID$handle() {
        return igGetItemID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igGetItemID()
     * }
     */
    public static MemorySegment igGetItemID$address() {
        return igGetItemID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igGetItemID()
     * }
     */
    public static int igGetItemID() {
        var mh$ = igGetItemID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetItemID");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetItemRectMin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetItemRectMin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetItemRectMin(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetItemRectMin$descriptor() {
        return igGetItemRectMin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetItemRectMin(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetItemRectMin$handle() {
        return igGetItemRectMin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetItemRectMin(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetItemRectMin$address() {
        return igGetItemRectMin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetItemRectMin(ImVec2 *pOut)
     * }
     */
    public static void igGetItemRectMin(MemorySegment pOut) {
        var mh$ = igGetItemRectMin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetItemRectMin", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetItemRectMax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetItemRectMax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetItemRectMax(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetItemRectMax$descriptor() {
        return igGetItemRectMax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetItemRectMax(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetItemRectMax$handle() {
        return igGetItemRectMax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetItemRectMax(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetItemRectMax$address() {
        return igGetItemRectMax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetItemRectMax(ImVec2 *pOut)
     * }
     */
    public static void igGetItemRectMax(MemorySegment pOut) {
        var mh$ = igGetItemRectMax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetItemRectMax", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetItemRectSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetItemRectSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetItemRectSize(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetItemRectSize$descriptor() {
        return igGetItemRectSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetItemRectSize(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetItemRectSize$handle() {
        return igGetItemRectSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetItemRectSize(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetItemRectSize$address() {
        return igGetItemRectSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetItemRectSize(ImVec2 *pOut)
     * }
     */
    public static void igGetItemRectSize(MemorySegment pOut) {
        var mh$ = igGetItemRectSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetItemRectSize", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetMainViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetMainViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igGetMainViewport()
     * }
     */
    public static FunctionDescriptor igGetMainViewport$descriptor() {
        return igGetMainViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igGetMainViewport()
     * }
     */
    public static MethodHandle igGetMainViewport$handle() {
        return igGetMainViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igGetMainViewport()
     * }
     */
    public static MemorySegment igGetMainViewport$address() {
        return igGetMainViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiViewport *igGetMainViewport()
     * }
     */
    public static MemorySegment igGetMainViewport() {
        var mh$ = igGetMainViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetMainViewport");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetBackgroundDrawList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetBackgroundDrawList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetBackgroundDrawList(ImGuiViewport *viewport)
     * }
     */
    public static FunctionDescriptor igGetBackgroundDrawList$descriptor() {
        return igGetBackgroundDrawList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetBackgroundDrawList(ImGuiViewport *viewport)
     * }
     */
    public static MethodHandle igGetBackgroundDrawList$handle() {
        return igGetBackgroundDrawList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetBackgroundDrawList(ImGuiViewport *viewport)
     * }
     */
    public static MemorySegment igGetBackgroundDrawList$address() {
        return igGetBackgroundDrawList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawList *igGetBackgroundDrawList(ImGuiViewport *viewport)
     * }
     */
    public static MemorySegment igGetBackgroundDrawList(MemorySegment viewport) {
        var mh$ = igGetBackgroundDrawList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetBackgroundDrawList", viewport);
            }
            return (MemorySegment)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetForegroundDrawList_ViewportPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetForegroundDrawList_ViewportPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetForegroundDrawList_ViewportPtr(ImGuiViewport *viewport)
     * }
     */
    public static FunctionDescriptor igGetForegroundDrawList_ViewportPtr$descriptor() {
        return igGetForegroundDrawList_ViewportPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetForegroundDrawList_ViewportPtr(ImGuiViewport *viewport)
     * }
     */
    public static MethodHandle igGetForegroundDrawList_ViewportPtr$handle() {
        return igGetForegroundDrawList_ViewportPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawList *igGetForegroundDrawList_ViewportPtr(ImGuiViewport *viewport)
     * }
     */
    public static MemorySegment igGetForegroundDrawList_ViewportPtr$address() {
        return igGetForegroundDrawList_ViewportPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawList *igGetForegroundDrawList_ViewportPtr(ImGuiViewport *viewport)
     * }
     */
    public static MemorySegment igGetForegroundDrawList_ViewportPtr(MemorySegment viewport) {
        var mh$ = igGetForegroundDrawList_ViewportPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetForegroundDrawList_ViewportPtr", viewport);
            }
            return (MemorySegment)mh$.invokeExact(viewport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsRectVisible_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsRectVisible_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsRectVisible_Nil(const ImVec2 size)
     * }
     */
    public static FunctionDescriptor igIsRectVisible_Nil$descriptor() {
        return igIsRectVisible_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsRectVisible_Nil(const ImVec2 size)
     * }
     */
    public static MethodHandle igIsRectVisible_Nil$handle() {
        return igIsRectVisible_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsRectVisible_Nil(const ImVec2 size)
     * }
     */
    public static MemorySegment igIsRectVisible_Nil$address() {
        return igIsRectVisible_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsRectVisible_Nil(const ImVec2 size)
     * }
     */
    public static boolean igIsRectVisible_Nil(MemorySegment size) {
        var mh$ = igIsRectVisible_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsRectVisible_Nil", size);
            }
            return (boolean)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsRectVisible_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsRectVisible_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsRectVisible_Vec2(const ImVec2 rect_min, const ImVec2 rect_max)
     * }
     */
    public static FunctionDescriptor igIsRectVisible_Vec2$descriptor() {
        return igIsRectVisible_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsRectVisible_Vec2(const ImVec2 rect_min, const ImVec2 rect_max)
     * }
     */
    public static MethodHandle igIsRectVisible_Vec2$handle() {
        return igIsRectVisible_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsRectVisible_Vec2(const ImVec2 rect_min, const ImVec2 rect_max)
     * }
     */
    public static MemorySegment igIsRectVisible_Vec2$address() {
        return igIsRectVisible_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsRectVisible_Vec2(const ImVec2 rect_min, const ImVec2 rect_max)
     * }
     */
    public static boolean igIsRectVisible_Vec2(MemorySegment rect_min, MemorySegment rect_max) {
        var mh$ = igIsRectVisible_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsRectVisible_Vec2", rect_min, rect_max);
            }
            return (boolean)mh$.invokeExact(rect_min, rect_max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_DOUBLE    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double igGetTime()
     * }
     */
    public static FunctionDescriptor igGetTime$descriptor() {
        return igGetTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double igGetTime()
     * }
     */
    public static MethodHandle igGetTime$handle() {
        return igGetTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double igGetTime()
     * }
     */
    public static MemorySegment igGetTime$address() {
        return igGetTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double igGetTime()
     * }
     */
    public static double igGetTime() {
        var mh$ = igGetTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetTime");
            }
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetFrameCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetFrameCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igGetFrameCount()
     * }
     */
    public static FunctionDescriptor igGetFrameCount$descriptor() {
        return igGetFrameCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igGetFrameCount()
     * }
     */
    public static MethodHandle igGetFrameCount$handle() {
        return igGetFrameCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igGetFrameCount()
     * }
     */
    public static MemorySegment igGetFrameCount$address() {
        return igGetFrameCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igGetFrameCount()
     * }
     */
    public static int igGetFrameCount() {
        var mh$ = igGetFrameCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetFrameCount");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetDrawListSharedData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetDrawListSharedData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawListSharedData *igGetDrawListSharedData()
     * }
     */
    public static FunctionDescriptor igGetDrawListSharedData$descriptor() {
        return igGetDrawListSharedData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawListSharedData *igGetDrawListSharedData()
     * }
     */
    public static MethodHandle igGetDrawListSharedData$handle() {
        return igGetDrawListSharedData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawListSharedData *igGetDrawListSharedData()
     * }
     */
    public static MemorySegment igGetDrawListSharedData$address() {
        return igGetDrawListSharedData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawListSharedData *igGetDrawListSharedData()
     * }
     */
    public static MemorySegment igGetDrawListSharedData() {
        var mh$ = igGetDrawListSharedData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetDrawListSharedData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetStyleColorName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetStyleColorName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igGetStyleColorName(ImGuiCol idx)
     * }
     */
    public static FunctionDescriptor igGetStyleColorName$descriptor() {
        return igGetStyleColorName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igGetStyleColorName(ImGuiCol idx)
     * }
     */
    public static MethodHandle igGetStyleColorName$handle() {
        return igGetStyleColorName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igGetStyleColorName(ImGuiCol idx)
     * }
     */
    public static MemorySegment igGetStyleColorName$address() {
        return igGetStyleColorName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igGetStyleColorName(ImGuiCol idx)
     * }
     */
    public static MemorySegment igGetStyleColorName(int idx) {
        var mh$ = igGetStyleColorName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetStyleColorName", idx);
            }
            return (MemorySegment)mh$.invokeExact(idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetStateStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetStateStorage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetStateStorage(ImGuiStorage *storage)
     * }
     */
    public static FunctionDescriptor igSetStateStorage$descriptor() {
        return igSetStateStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetStateStorage(ImGuiStorage *storage)
     * }
     */
    public static MethodHandle igSetStateStorage$handle() {
        return igSetStateStorage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetStateStorage(ImGuiStorage *storage)
     * }
     */
    public static MemorySegment igSetStateStorage$address() {
        return igSetStateStorage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetStateStorage(ImGuiStorage *storage)
     * }
     */
    public static void igSetStateStorage(MemorySegment storage) {
        var mh$ = igSetStateStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetStateStorage", storage);
            }
            mh$.invokeExact(storage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetStateStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetStateStorage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStorage *igGetStateStorage()
     * }
     */
    public static FunctionDescriptor igGetStateStorage$descriptor() {
        return igGetStateStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStorage *igGetStateStorage()
     * }
     */
    public static MethodHandle igGetStateStorage$handle() {
        return igGetStateStorage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStorage *igGetStateStorage()
     * }
     */
    public static MemorySegment igGetStateStorage$address() {
        return igGetStateStorage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStorage *igGetStateStorage()
     * }
     */
    public static MemorySegment igGetStateStorage() {
        var mh$ = igGetStateStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetStateStorage");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igCalcTextSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_BOOL,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igCalcTextSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igCalcTextSize(ImVec2 *pOut, const char *text, const char *text_end, bool hide_text_after_double_hash, float wrap_width)
     * }
     */
    public static FunctionDescriptor igCalcTextSize$descriptor() {
        return igCalcTextSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igCalcTextSize(ImVec2 *pOut, const char *text, const char *text_end, bool hide_text_after_double_hash, float wrap_width)
     * }
     */
    public static MethodHandle igCalcTextSize$handle() {
        return igCalcTextSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igCalcTextSize(ImVec2 *pOut, const char *text, const char *text_end, bool hide_text_after_double_hash, float wrap_width)
     * }
     */
    public static MemorySegment igCalcTextSize$address() {
        return igCalcTextSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igCalcTextSize(ImVec2 *pOut, const char *text, const char *text_end, bool hide_text_after_double_hash, float wrap_width)
     * }
     */
    public static void igCalcTextSize(MemorySegment pOut, MemorySegment text, MemorySegment text_end, boolean hide_text_after_double_hash, float wrap_width) {
        var mh$ = igCalcTextSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igCalcTextSize", pOut, text, text_end, hide_text_after_double_hash, wrap_width);
            }
            mh$.invokeExact(pOut, text, text_end, hide_text_after_double_hash, wrap_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorConvertU32ToFloat4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorConvertU32ToFloat4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igColorConvertU32ToFloat4(ImVec4 *pOut, ImU32 in)
     * }
     */
    public static FunctionDescriptor igColorConvertU32ToFloat4$descriptor() {
        return igColorConvertU32ToFloat4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igColorConvertU32ToFloat4(ImVec4 *pOut, ImU32 in)
     * }
     */
    public static MethodHandle igColorConvertU32ToFloat4$handle() {
        return igColorConvertU32ToFloat4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igColorConvertU32ToFloat4(ImVec4 *pOut, ImU32 in)
     * }
     */
    public static MemorySegment igColorConvertU32ToFloat4$address() {
        return igColorConvertU32ToFloat4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igColorConvertU32ToFloat4(ImVec4 *pOut, ImU32 in)
     * }
     */
    public static void igColorConvertU32ToFloat4(MemorySegment pOut, int in) {
        var mh$ = igColorConvertU32ToFloat4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorConvertU32ToFloat4", pOut, in);
            }
            mh$.invokeExact(pOut, in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorConvertFloat4ToU32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            ImVec4.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorConvertFloat4ToU32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImU32 igColorConvertFloat4ToU32(const ImVec4 in)
     * }
     */
    public static FunctionDescriptor igColorConvertFloat4ToU32$descriptor() {
        return igColorConvertFloat4ToU32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImU32 igColorConvertFloat4ToU32(const ImVec4 in)
     * }
     */
    public static MethodHandle igColorConvertFloat4ToU32$handle() {
        return igColorConvertFloat4ToU32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImU32 igColorConvertFloat4ToU32(const ImVec4 in)
     * }
     */
    public static MemorySegment igColorConvertFloat4ToU32$address() {
        return igColorConvertFloat4ToU32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImU32 igColorConvertFloat4ToU32(const ImVec4 in)
     * }
     */
    public static int igColorConvertFloat4ToU32(MemorySegment in) {
        var mh$ = igColorConvertFloat4ToU32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorConvertFloat4ToU32", in);
            }
            return (int)mh$.invokeExact(in);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorConvertRGBtoHSV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorConvertRGBtoHSV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igColorConvertRGBtoHSV(float r, float g, float b, float *out_h, float *out_s, float *out_v)
     * }
     */
    public static FunctionDescriptor igColorConvertRGBtoHSV$descriptor() {
        return igColorConvertRGBtoHSV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igColorConvertRGBtoHSV(float r, float g, float b, float *out_h, float *out_s, float *out_v)
     * }
     */
    public static MethodHandle igColorConvertRGBtoHSV$handle() {
        return igColorConvertRGBtoHSV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igColorConvertRGBtoHSV(float r, float g, float b, float *out_h, float *out_s, float *out_v)
     * }
     */
    public static MemorySegment igColorConvertRGBtoHSV$address() {
        return igColorConvertRGBtoHSV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igColorConvertRGBtoHSV(float r, float g, float b, float *out_h, float *out_s, float *out_v)
     * }
     */
    public static void igColorConvertRGBtoHSV(float r, float g, float b, MemorySegment out_h, MemorySegment out_s, MemorySegment out_v) {
        var mh$ = igColorConvertRGBtoHSV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorConvertRGBtoHSV", r, g, b, out_h, out_s, out_v);
            }
            mh$.invokeExact(r, g, b, out_h, out_s, out_v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igColorConvertHSVtoRGB {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igColorConvertHSVtoRGB");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igColorConvertHSVtoRGB(float h, float s, float v, float *out_r, float *out_g, float *out_b)
     * }
     */
    public static FunctionDescriptor igColorConvertHSVtoRGB$descriptor() {
        return igColorConvertHSVtoRGB.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igColorConvertHSVtoRGB(float h, float s, float v, float *out_r, float *out_g, float *out_b)
     * }
     */
    public static MethodHandle igColorConvertHSVtoRGB$handle() {
        return igColorConvertHSVtoRGB.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igColorConvertHSVtoRGB(float h, float s, float v, float *out_r, float *out_g, float *out_b)
     * }
     */
    public static MemorySegment igColorConvertHSVtoRGB$address() {
        return igColorConvertHSVtoRGB.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igColorConvertHSVtoRGB(float h, float s, float v, float *out_r, float *out_g, float *out_b)
     * }
     */
    public static void igColorConvertHSVtoRGB(float h, float s, float v, MemorySegment out_r, MemorySegment out_g, MemorySegment out_b) {
        var mh$ = igColorConvertHSVtoRGB.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igColorConvertHSVtoRGB", h, s, v, out_r, out_g, out_b);
            }
            mh$.invokeExact(h, s, v, out_r, out_g, out_b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsKeyDown_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsKeyDown_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsKeyDown_Nil(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsKeyDown_Nil$descriptor() {
        return igIsKeyDown_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsKeyDown_Nil(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsKeyDown_Nil$handle() {
        return igIsKeyDown_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsKeyDown_Nil(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsKeyDown_Nil$address() {
        return igIsKeyDown_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsKeyDown_Nil(ImGuiKey key)
     * }
     */
    public static boolean igIsKeyDown_Nil(int key) {
        var mh$ = igIsKeyDown_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsKeyDown_Nil", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsKeyPressed_Bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsKeyPressed_Bool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsKeyPressed_Bool(ImGuiKey key, bool repeat)
     * }
     */
    public static FunctionDescriptor igIsKeyPressed_Bool$descriptor() {
        return igIsKeyPressed_Bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsKeyPressed_Bool(ImGuiKey key, bool repeat)
     * }
     */
    public static MethodHandle igIsKeyPressed_Bool$handle() {
        return igIsKeyPressed_Bool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsKeyPressed_Bool(ImGuiKey key, bool repeat)
     * }
     */
    public static MemorySegment igIsKeyPressed_Bool$address() {
        return igIsKeyPressed_Bool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsKeyPressed_Bool(ImGuiKey key, bool repeat)
     * }
     */
    public static boolean igIsKeyPressed_Bool(int key, boolean repeat) {
        var mh$ = igIsKeyPressed_Bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsKeyPressed_Bool", key, repeat);
            }
            return (boolean)mh$.invokeExact(key, repeat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsKeyReleased_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsKeyReleased_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsKeyReleased_Nil(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igIsKeyReleased_Nil$descriptor() {
        return igIsKeyReleased_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsKeyReleased_Nil(ImGuiKey key)
     * }
     */
    public static MethodHandle igIsKeyReleased_Nil$handle() {
        return igIsKeyReleased_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsKeyReleased_Nil(ImGuiKey key)
     * }
     */
    public static MemorySegment igIsKeyReleased_Nil$address() {
        return igIsKeyReleased_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsKeyReleased_Nil(ImGuiKey key)
     * }
     */
    public static boolean igIsKeyReleased_Nil(int key) {
        var mh$ = igIsKeyReleased_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsKeyReleased_Nil", key);
            }
            return (boolean)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsKeyChordPressed_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsKeyChordPressed_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsKeyChordPressed_Nil(ImGuiKeyChord key_chord)
     * }
     */
    public static FunctionDescriptor igIsKeyChordPressed_Nil$descriptor() {
        return igIsKeyChordPressed_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsKeyChordPressed_Nil(ImGuiKeyChord key_chord)
     * }
     */
    public static MethodHandle igIsKeyChordPressed_Nil$handle() {
        return igIsKeyChordPressed_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsKeyChordPressed_Nil(ImGuiKeyChord key_chord)
     * }
     */
    public static MemorySegment igIsKeyChordPressed_Nil$address() {
        return igIsKeyChordPressed_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsKeyChordPressed_Nil(ImGuiKeyChord key_chord)
     * }
     */
    public static boolean igIsKeyChordPressed_Nil(int key_chord) {
        var mh$ = igIsKeyChordPressed_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsKeyChordPressed_Nil", key_chord);
            }
            return (boolean)mh$.invokeExact(key_chord);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetKeyPressedAmount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetKeyPressedAmount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igGetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
     * }
     */
    public static FunctionDescriptor igGetKeyPressedAmount$descriptor() {
        return igGetKeyPressedAmount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igGetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
     * }
     */
    public static MethodHandle igGetKeyPressedAmount$handle() {
        return igGetKeyPressedAmount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igGetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
     * }
     */
    public static MemorySegment igGetKeyPressedAmount$address() {
        return igGetKeyPressedAmount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igGetKeyPressedAmount(ImGuiKey key, float repeat_delay, float rate)
     * }
     */
    public static int igGetKeyPressedAmount(int key, float repeat_delay, float rate) {
        var mh$ = igGetKeyPressedAmount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetKeyPressedAmount", key, repeat_delay, rate);
            }
            return (int)mh$.invokeExact(key, repeat_delay, rate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetKeyName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetKeyName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igGetKeyName(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igGetKeyName$descriptor() {
        return igGetKeyName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igGetKeyName(ImGuiKey key)
     * }
     */
    public static MethodHandle igGetKeyName$handle() {
        return igGetKeyName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igGetKeyName(ImGuiKey key)
     * }
     */
    public static MemorySegment igGetKeyName$address() {
        return igGetKeyName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igGetKeyName(ImGuiKey key)
     * }
     */
    public static MemorySegment igGetKeyName(int key) {
        var mh$ = igGetKeyName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetKeyName", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextFrameWantCaptureKeyboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextFrameWantCaptureKeyboard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
     * }
     */
    public static FunctionDescriptor igSetNextFrameWantCaptureKeyboard$descriptor() {
        return igSetNextFrameWantCaptureKeyboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
     * }
     */
    public static MethodHandle igSetNextFrameWantCaptureKeyboard$handle() {
        return igSetNextFrameWantCaptureKeyboard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
     * }
     */
    public static MemorySegment igSetNextFrameWantCaptureKeyboard$address() {
        return igSetNextFrameWantCaptureKeyboard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)
     * }
     */
    public static void igSetNextFrameWantCaptureKeyboard(boolean want_capture_keyboard) {
        var mh$ = igSetNextFrameWantCaptureKeyboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextFrameWantCaptureKeyboard", want_capture_keyboard);
            }
            mh$.invokeExact(want_capture_keyboard);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igShortcut_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igShortcut_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igShortcut_Nil(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
     * }
     */
    public static FunctionDescriptor igShortcut_Nil$descriptor() {
        return igShortcut_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igShortcut_Nil(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
     * }
     */
    public static MethodHandle igShortcut_Nil$handle() {
        return igShortcut_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igShortcut_Nil(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
     * }
     */
    public static MemorySegment igShortcut_Nil$address() {
        return igShortcut_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igShortcut_Nil(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
     * }
     */
    public static boolean igShortcut_Nil(int key_chord, int flags) {
        var mh$ = igShortcut_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igShortcut_Nil", key_chord, flags);
            }
            return (boolean)mh$.invokeExact(key_chord, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextItemShortcut {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextItemShortcut");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextItemShortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
     * }
     */
    public static FunctionDescriptor igSetNextItemShortcut$descriptor() {
        return igSetNextItemShortcut.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextItemShortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
     * }
     */
    public static MethodHandle igSetNextItemShortcut$handle() {
        return igSetNextItemShortcut.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextItemShortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
     * }
     */
    public static MemorySegment igSetNextItemShortcut$address() {
        return igSetNextItemShortcut.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextItemShortcut(ImGuiKeyChord key_chord, ImGuiInputFlags flags)
     * }
     */
    public static void igSetNextItemShortcut(int key_chord, int flags) {
        var mh$ = igSetNextItemShortcut.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextItemShortcut", key_chord, flags);
            }
            mh$.invokeExact(key_chord, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetItemKeyOwner_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetItemKeyOwner_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetItemKeyOwner_Nil(ImGuiKey key)
     * }
     */
    public static FunctionDescriptor igSetItemKeyOwner_Nil$descriptor() {
        return igSetItemKeyOwner_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetItemKeyOwner_Nil(ImGuiKey key)
     * }
     */
    public static MethodHandle igSetItemKeyOwner_Nil$handle() {
        return igSetItemKeyOwner_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetItemKeyOwner_Nil(ImGuiKey key)
     * }
     */
    public static MemorySegment igSetItemKeyOwner_Nil$address() {
        return igSetItemKeyOwner_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetItemKeyOwner_Nil(ImGuiKey key)
     * }
     */
    public static void igSetItemKeyOwner_Nil(int key) {
        var mh$ = igSetItemKeyOwner_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetItemKeyOwner_Nil", key);
            }
            mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseDown_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseDown_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseDown_Nil(ImGuiMouseButton button)
     * }
     */
    public static FunctionDescriptor igIsMouseDown_Nil$descriptor() {
        return igIsMouseDown_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseDown_Nil(ImGuiMouseButton button)
     * }
     */
    public static MethodHandle igIsMouseDown_Nil$handle() {
        return igIsMouseDown_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseDown_Nil(ImGuiMouseButton button)
     * }
     */
    public static MemorySegment igIsMouseDown_Nil$address() {
        return igIsMouseDown_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseDown_Nil(ImGuiMouseButton button)
     * }
     */
    public static boolean igIsMouseDown_Nil(int button) {
        var mh$ = igIsMouseDown_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseDown_Nil", button);
            }
            return (boolean)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseClicked_Bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseClicked_Bool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseClicked_Bool(ImGuiMouseButton button, bool repeat)
     * }
     */
    public static FunctionDescriptor igIsMouseClicked_Bool$descriptor() {
        return igIsMouseClicked_Bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseClicked_Bool(ImGuiMouseButton button, bool repeat)
     * }
     */
    public static MethodHandle igIsMouseClicked_Bool$handle() {
        return igIsMouseClicked_Bool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseClicked_Bool(ImGuiMouseButton button, bool repeat)
     * }
     */
    public static MemorySegment igIsMouseClicked_Bool$address() {
        return igIsMouseClicked_Bool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseClicked_Bool(ImGuiMouseButton button, bool repeat)
     * }
     */
    public static boolean igIsMouseClicked_Bool(int button, boolean repeat) {
        var mh$ = igIsMouseClicked_Bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseClicked_Bool", button, repeat);
            }
            return (boolean)mh$.invokeExact(button, repeat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseReleased_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseReleased_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseReleased_Nil(ImGuiMouseButton button)
     * }
     */
    public static FunctionDescriptor igIsMouseReleased_Nil$descriptor() {
        return igIsMouseReleased_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseReleased_Nil(ImGuiMouseButton button)
     * }
     */
    public static MethodHandle igIsMouseReleased_Nil$handle() {
        return igIsMouseReleased_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseReleased_Nil(ImGuiMouseButton button)
     * }
     */
    public static MemorySegment igIsMouseReleased_Nil$address() {
        return igIsMouseReleased_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseReleased_Nil(ImGuiMouseButton button)
     * }
     */
    public static boolean igIsMouseReleased_Nil(int button) {
        var mh$ = igIsMouseReleased_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseReleased_Nil", button);
            }
            return (boolean)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseDoubleClicked_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseDoubleClicked_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseDoubleClicked_Nil(ImGuiMouseButton button)
     * }
     */
    public static FunctionDescriptor igIsMouseDoubleClicked_Nil$descriptor() {
        return igIsMouseDoubleClicked_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseDoubleClicked_Nil(ImGuiMouseButton button)
     * }
     */
    public static MethodHandle igIsMouseDoubleClicked_Nil$handle() {
        return igIsMouseDoubleClicked_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseDoubleClicked_Nil(ImGuiMouseButton button)
     * }
     */
    public static MemorySegment igIsMouseDoubleClicked_Nil$address() {
        return igIsMouseDoubleClicked_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseDoubleClicked_Nil(ImGuiMouseButton button)
     * }
     */
    public static boolean igIsMouseDoubleClicked_Nil(int button) {
        var mh$ = igIsMouseDoubleClicked_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseDoubleClicked_Nil", button);
            }
            return (boolean)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetMouseClickedCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetMouseClickedCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igGetMouseClickedCount(ImGuiMouseButton button)
     * }
     */
    public static FunctionDescriptor igGetMouseClickedCount$descriptor() {
        return igGetMouseClickedCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igGetMouseClickedCount(ImGuiMouseButton button)
     * }
     */
    public static MethodHandle igGetMouseClickedCount$handle() {
        return igGetMouseClickedCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igGetMouseClickedCount(ImGuiMouseButton button)
     * }
     */
    public static MemorySegment igGetMouseClickedCount$address() {
        return igGetMouseClickedCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igGetMouseClickedCount(ImGuiMouseButton button)
     * }
     */
    public static int igGetMouseClickedCount(int button) {
        var mh$ = igGetMouseClickedCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetMouseClickedCount", button);
            }
            return (int)mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseHoveringRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseHoveringRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseHoveringRect(const ImVec2 r_min, const ImVec2 r_max, bool clip)
     * }
     */
    public static FunctionDescriptor igIsMouseHoveringRect$descriptor() {
        return igIsMouseHoveringRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseHoveringRect(const ImVec2 r_min, const ImVec2 r_max, bool clip)
     * }
     */
    public static MethodHandle igIsMouseHoveringRect$handle() {
        return igIsMouseHoveringRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseHoveringRect(const ImVec2 r_min, const ImVec2 r_max, bool clip)
     * }
     */
    public static MemorySegment igIsMouseHoveringRect$address() {
        return igIsMouseHoveringRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseHoveringRect(const ImVec2 r_min, const ImVec2 r_max, bool clip)
     * }
     */
    public static boolean igIsMouseHoveringRect(MemorySegment r_min, MemorySegment r_max, boolean clip) {
        var mh$ = igIsMouseHoveringRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseHoveringRect", r_min, r_max, clip);
            }
            return (boolean)mh$.invokeExact(r_min, r_max, clip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMousePosValid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMousePosValid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMousePosValid(const ImVec2 *mouse_pos)
     * }
     */
    public static FunctionDescriptor igIsMousePosValid$descriptor() {
        return igIsMousePosValid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMousePosValid(const ImVec2 *mouse_pos)
     * }
     */
    public static MethodHandle igIsMousePosValid$handle() {
        return igIsMousePosValid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMousePosValid(const ImVec2 *mouse_pos)
     * }
     */
    public static MemorySegment igIsMousePosValid$address() {
        return igIsMousePosValid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMousePosValid(const ImVec2 *mouse_pos)
     * }
     */
    public static boolean igIsMousePosValid(MemorySegment mouse_pos) {
        var mh$ = igIsMousePosValid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMousePosValid", mouse_pos);
            }
            return (boolean)mh$.invokeExact(mouse_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsAnyMouseDown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsAnyMouseDown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsAnyMouseDown()
     * }
     */
    public static FunctionDescriptor igIsAnyMouseDown$descriptor() {
        return igIsAnyMouseDown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsAnyMouseDown()
     * }
     */
    public static MethodHandle igIsAnyMouseDown$handle() {
        return igIsAnyMouseDown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsAnyMouseDown()
     * }
     */
    public static MemorySegment igIsAnyMouseDown$address() {
        return igIsAnyMouseDown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsAnyMouseDown()
     * }
     */
    public static boolean igIsAnyMouseDown() {
        var mh$ = igIsAnyMouseDown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsAnyMouseDown");
            }
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetMousePos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetMousePos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetMousePos(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetMousePos$descriptor() {
        return igGetMousePos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetMousePos(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetMousePos$handle() {
        return igGetMousePos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetMousePos(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetMousePos$address() {
        return igGetMousePos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetMousePos(ImVec2 *pOut)
     * }
     */
    public static void igGetMousePos(MemorySegment pOut) {
        var mh$ = igGetMousePos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetMousePos", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetMousePosOnOpeningCurrentPopup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetMousePosOnOpeningCurrentPopup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetMousePosOnOpeningCurrentPopup(ImVec2 *pOut)
     * }
     */
    public static FunctionDescriptor igGetMousePosOnOpeningCurrentPopup$descriptor() {
        return igGetMousePosOnOpeningCurrentPopup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetMousePosOnOpeningCurrentPopup(ImVec2 *pOut)
     * }
     */
    public static MethodHandle igGetMousePosOnOpeningCurrentPopup$handle() {
        return igGetMousePosOnOpeningCurrentPopup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetMousePosOnOpeningCurrentPopup(ImVec2 *pOut)
     * }
     */
    public static MemorySegment igGetMousePosOnOpeningCurrentPopup$address() {
        return igGetMousePosOnOpeningCurrentPopup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetMousePosOnOpeningCurrentPopup(ImVec2 *pOut)
     * }
     */
    public static void igGetMousePosOnOpeningCurrentPopup(MemorySegment pOut) {
        var mh$ = igGetMousePosOnOpeningCurrentPopup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetMousePosOnOpeningCurrentPopup", pOut);
            }
            mh$.invokeExact(pOut);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igIsMouseDragging {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igIsMouseDragging");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igIsMouseDragging(ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static FunctionDescriptor igIsMouseDragging$descriptor() {
        return igIsMouseDragging.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igIsMouseDragging(ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static MethodHandle igIsMouseDragging$handle() {
        return igIsMouseDragging.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igIsMouseDragging(ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static MemorySegment igIsMouseDragging$address() {
        return igIsMouseDragging.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igIsMouseDragging(ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static boolean igIsMouseDragging(int button, float lock_threshold) {
        var mh$ = igIsMouseDragging.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igIsMouseDragging", button, lock_threshold);
            }
            return (boolean)mh$.invokeExact(button, lock_threshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetMouseDragDelta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetMouseDragDelta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetMouseDragDelta(ImVec2 *pOut, ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static FunctionDescriptor igGetMouseDragDelta$descriptor() {
        return igGetMouseDragDelta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetMouseDragDelta(ImVec2 *pOut, ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static MethodHandle igGetMouseDragDelta$handle() {
        return igGetMouseDragDelta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetMouseDragDelta(ImVec2 *pOut, ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static MemorySegment igGetMouseDragDelta$address() {
        return igGetMouseDragDelta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetMouseDragDelta(ImVec2 *pOut, ImGuiMouseButton button, float lock_threshold)
     * }
     */
    public static void igGetMouseDragDelta(MemorySegment pOut, int button, float lock_threshold) {
        var mh$ = igGetMouseDragDelta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetMouseDragDelta", pOut, button, lock_threshold);
            }
            mh$.invokeExact(pOut, button, lock_threshold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igResetMouseDragDelta {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igResetMouseDragDelta");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igResetMouseDragDelta(ImGuiMouseButton button)
     * }
     */
    public static FunctionDescriptor igResetMouseDragDelta$descriptor() {
        return igResetMouseDragDelta.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igResetMouseDragDelta(ImGuiMouseButton button)
     * }
     */
    public static MethodHandle igResetMouseDragDelta$handle() {
        return igResetMouseDragDelta.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igResetMouseDragDelta(ImGuiMouseButton button)
     * }
     */
    public static MemorySegment igResetMouseDragDelta$address() {
        return igResetMouseDragDelta.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igResetMouseDragDelta(ImGuiMouseButton button)
     * }
     */
    public static void igResetMouseDragDelta(int button) {
        var mh$ = igResetMouseDragDelta.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igResetMouseDragDelta", button);
            }
            mh$.invokeExact(button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetMouseCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetMouseCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiMouseCursor igGetMouseCursor()
     * }
     */
    public static FunctionDescriptor igGetMouseCursor$descriptor() {
        return igGetMouseCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiMouseCursor igGetMouseCursor()
     * }
     */
    public static MethodHandle igGetMouseCursor$handle() {
        return igGetMouseCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiMouseCursor igGetMouseCursor()
     * }
     */
    public static MemorySegment igGetMouseCursor$address() {
        return igGetMouseCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiMouseCursor igGetMouseCursor()
     * }
     */
    public static int igGetMouseCursor() {
        var mh$ = igGetMouseCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetMouseCursor");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetMouseCursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetMouseCursor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetMouseCursor(ImGuiMouseCursor cursor_type)
     * }
     */
    public static FunctionDescriptor igSetMouseCursor$descriptor() {
        return igSetMouseCursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetMouseCursor(ImGuiMouseCursor cursor_type)
     * }
     */
    public static MethodHandle igSetMouseCursor$handle() {
        return igSetMouseCursor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetMouseCursor(ImGuiMouseCursor cursor_type)
     * }
     */
    public static MemorySegment igSetMouseCursor$address() {
        return igSetMouseCursor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetMouseCursor(ImGuiMouseCursor cursor_type)
     * }
     */
    public static void igSetMouseCursor(int cursor_type) {
        var mh$ = igSetMouseCursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetMouseCursor", cursor_type);
            }
            mh$.invokeExact(cursor_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetNextFrameWantCaptureMouse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetNextFrameWantCaptureMouse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetNextFrameWantCaptureMouse(bool want_capture_mouse)
     * }
     */
    public static FunctionDescriptor igSetNextFrameWantCaptureMouse$descriptor() {
        return igSetNextFrameWantCaptureMouse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetNextFrameWantCaptureMouse(bool want_capture_mouse)
     * }
     */
    public static MethodHandle igSetNextFrameWantCaptureMouse$handle() {
        return igSetNextFrameWantCaptureMouse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetNextFrameWantCaptureMouse(bool want_capture_mouse)
     * }
     */
    public static MemorySegment igSetNextFrameWantCaptureMouse$address() {
        return igSetNextFrameWantCaptureMouse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetNextFrameWantCaptureMouse(bool want_capture_mouse)
     * }
     */
    public static void igSetNextFrameWantCaptureMouse(boolean want_capture_mouse) {
        var mh$ = igSetNextFrameWantCaptureMouse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetNextFrameWantCaptureMouse", want_capture_mouse);
            }
            mh$.invokeExact(want_capture_mouse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetClipboardText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetClipboardText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igGetClipboardText()
     * }
     */
    public static FunctionDescriptor igGetClipboardText$descriptor() {
        return igGetClipboardText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igGetClipboardText()
     * }
     */
    public static MethodHandle igGetClipboardText$handle() {
        return igGetClipboardText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igGetClipboardText()
     * }
     */
    public static MemorySegment igGetClipboardText$address() {
        return igGetClipboardText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igGetClipboardText()
     * }
     */
    public static MemorySegment igGetClipboardText() {
        var mh$ = igGetClipboardText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetClipboardText");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetClipboardText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetClipboardText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetClipboardText(const char *text)
     * }
     */
    public static FunctionDescriptor igSetClipboardText$descriptor() {
        return igSetClipboardText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetClipboardText(const char *text)
     * }
     */
    public static MethodHandle igSetClipboardText$handle() {
        return igSetClipboardText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetClipboardText(const char *text)
     * }
     */
    public static MemorySegment igSetClipboardText$address() {
        return igSetClipboardText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetClipboardText(const char *text)
     * }
     */
    public static void igSetClipboardText(MemorySegment text) {
        var mh$ = igSetClipboardText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetClipboardText", text);
            }
            mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLoadIniSettingsFromDisk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLoadIniSettingsFromDisk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLoadIniSettingsFromDisk(const char *ini_filename)
     * }
     */
    public static FunctionDescriptor igLoadIniSettingsFromDisk$descriptor() {
        return igLoadIniSettingsFromDisk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLoadIniSettingsFromDisk(const char *ini_filename)
     * }
     */
    public static MethodHandle igLoadIniSettingsFromDisk$handle() {
        return igLoadIniSettingsFromDisk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLoadIniSettingsFromDisk(const char *ini_filename)
     * }
     */
    public static MemorySegment igLoadIniSettingsFromDisk$address() {
        return igLoadIniSettingsFromDisk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLoadIniSettingsFromDisk(const char *ini_filename)
     * }
     */
    public static void igLoadIniSettingsFromDisk(MemorySegment ini_filename) {
        var mh$ = igLoadIniSettingsFromDisk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLoadIniSettingsFromDisk", ini_filename);
            }
            mh$.invokeExact(ini_filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igLoadIniSettingsFromMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igLoadIniSettingsFromMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igLoadIniSettingsFromMemory(const char *ini_data, size_t ini_size)
     * }
     */
    public static FunctionDescriptor igLoadIniSettingsFromMemory$descriptor() {
        return igLoadIniSettingsFromMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igLoadIniSettingsFromMemory(const char *ini_data, size_t ini_size)
     * }
     */
    public static MethodHandle igLoadIniSettingsFromMemory$handle() {
        return igLoadIniSettingsFromMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igLoadIniSettingsFromMemory(const char *ini_data, size_t ini_size)
     * }
     */
    public static MemorySegment igLoadIniSettingsFromMemory$address() {
        return igLoadIniSettingsFromMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igLoadIniSettingsFromMemory(const char *ini_data, size_t ini_size)
     * }
     */
    public static void igLoadIniSettingsFromMemory(MemorySegment ini_data, long ini_size) {
        var mh$ = igLoadIniSettingsFromMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igLoadIniSettingsFromMemory", ini_data, ini_size);
            }
            mh$.invokeExact(ini_data, ini_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSaveIniSettingsToDisk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSaveIniSettingsToDisk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSaveIniSettingsToDisk(const char *ini_filename)
     * }
     */
    public static FunctionDescriptor igSaveIniSettingsToDisk$descriptor() {
        return igSaveIniSettingsToDisk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSaveIniSettingsToDisk(const char *ini_filename)
     * }
     */
    public static MethodHandle igSaveIniSettingsToDisk$handle() {
        return igSaveIniSettingsToDisk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSaveIniSettingsToDisk(const char *ini_filename)
     * }
     */
    public static MemorySegment igSaveIniSettingsToDisk$address() {
        return igSaveIniSettingsToDisk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSaveIniSettingsToDisk(const char *ini_filename)
     * }
     */
    public static void igSaveIniSettingsToDisk(MemorySegment ini_filename) {
        var mh$ = igSaveIniSettingsToDisk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSaveIniSettingsToDisk", ini_filename);
            }
            mh$.invokeExact(ini_filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSaveIniSettingsToMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSaveIniSettingsToMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igSaveIniSettingsToMemory(size_t *out_ini_size)
     * }
     */
    public static FunctionDescriptor igSaveIniSettingsToMemory$descriptor() {
        return igSaveIniSettingsToMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igSaveIniSettingsToMemory(size_t *out_ini_size)
     * }
     */
    public static MethodHandle igSaveIniSettingsToMemory$handle() {
        return igSaveIniSettingsToMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igSaveIniSettingsToMemory(size_t *out_ini_size)
     * }
     */
    public static MemorySegment igSaveIniSettingsToMemory$address() {
        return igSaveIniSettingsToMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igSaveIniSettingsToMemory(size_t *out_ini_size)
     * }
     */
    public static MemorySegment igSaveIniSettingsToMemory(MemorySegment out_ini_size) {
        var mh$ = igSaveIniSettingsToMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSaveIniSettingsToMemory", out_ini_size);
            }
            return (MemorySegment)mh$.invokeExact(out_ini_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugTextEncoding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugTextEncoding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugTextEncoding(const char *text)
     * }
     */
    public static FunctionDescriptor igDebugTextEncoding$descriptor() {
        return igDebugTextEncoding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugTextEncoding(const char *text)
     * }
     */
    public static MethodHandle igDebugTextEncoding$handle() {
        return igDebugTextEncoding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugTextEncoding(const char *text)
     * }
     */
    public static MemorySegment igDebugTextEncoding$address() {
        return igDebugTextEncoding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugTextEncoding(const char *text)
     * }
     */
    public static void igDebugTextEncoding(MemorySegment text) {
        var mh$ = igDebugTextEncoding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugTextEncoding", text);
            }
            mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugFlashStyleColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugFlashStyleColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugFlashStyleColor(ImGuiCol idx)
     * }
     */
    public static FunctionDescriptor igDebugFlashStyleColor$descriptor() {
        return igDebugFlashStyleColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugFlashStyleColor(ImGuiCol idx)
     * }
     */
    public static MethodHandle igDebugFlashStyleColor$handle() {
        return igDebugFlashStyleColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugFlashStyleColor(ImGuiCol idx)
     * }
     */
    public static MemorySegment igDebugFlashStyleColor$address() {
        return igDebugFlashStyleColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugFlashStyleColor(ImGuiCol idx)
     * }
     */
    public static void igDebugFlashStyleColor(int idx) {
        var mh$ = igDebugFlashStyleColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugFlashStyleColor", idx);
            }
            mh$.invokeExact(idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugStartItemPicker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugStartItemPicker");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugStartItemPicker()
     * }
     */
    public static FunctionDescriptor igDebugStartItemPicker$descriptor() {
        return igDebugStartItemPicker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugStartItemPicker()
     * }
     */
    public static MethodHandle igDebugStartItemPicker$handle() {
        return igDebugStartItemPicker.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugStartItemPicker()
     * }
     */
    public static MemorySegment igDebugStartItemPicker$address() {
        return igDebugStartItemPicker.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugStartItemPicker()
     * }
     */
    public static void igDebugStartItemPicker() {
        var mh$ = igDebugStartItemPicker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugStartItemPicker");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDebugCheckVersionAndDataLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_LONG,
            imgui.C_LONG,
            imgui.C_LONG,
            imgui.C_LONG,
            imgui.C_LONG,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugCheckVersionAndDataLayout");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igDebugCheckVersionAndDataLayout(const char *version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)
     * }
     */
    public static FunctionDescriptor igDebugCheckVersionAndDataLayout$descriptor() {
        return igDebugCheckVersionAndDataLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igDebugCheckVersionAndDataLayout(const char *version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)
     * }
     */
    public static MethodHandle igDebugCheckVersionAndDataLayout$handle() {
        return igDebugCheckVersionAndDataLayout.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igDebugCheckVersionAndDataLayout(const char *version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)
     * }
     */
    public static MemorySegment igDebugCheckVersionAndDataLayout$address() {
        return igDebugCheckVersionAndDataLayout.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igDebugCheckVersionAndDataLayout(const char *version_str, size_t sz_io, size_t sz_style, size_t sz_vec2, size_t sz_vec4, size_t sz_drawvert, size_t sz_drawidx)
     * }
     */
    public static boolean igDebugCheckVersionAndDataLayout(MemorySegment version_str, long sz_io, long sz_style, long sz_vec2, long sz_vec4, long sz_drawvert, long sz_drawidx) {
        var mh$ = igDebugCheckVersionAndDataLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugCheckVersionAndDataLayout", version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
            }
            return (boolean)mh$.invokeExact(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igDebugLog(const char *fmt, ...)
     * }
     */
    public static class igDebugLog {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igDebugLog");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igDebugLog(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igDebugLog(const char *fmt, ...)
         * }
         */
        public static igDebugLog makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igDebugLog(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment fmt, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igDebugLog", fmt, x1);
                }
                spreader.invokeExact(fmt, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igDebugLogV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDebugLogV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDebugLogV(const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igDebugLogV$descriptor() {
        return igDebugLogV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDebugLogV(const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igDebugLogV$handle() {
        return igDebugLogV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDebugLogV(const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igDebugLogV$address() {
        return igDebugLogV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDebugLogV(const char *fmt, va_list args)
     * }
     */
    public static void igDebugLogV(MemorySegment fmt, MemorySegment args) {
        var mh$ = igDebugLogV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDebugLogV", fmt, args);
            }
            mh$.invokeExact(fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igSetAllocatorFunctions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igSetAllocatorFunctions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igSetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void *user_data)
     * }
     */
    public static FunctionDescriptor igSetAllocatorFunctions$descriptor() {
        return igSetAllocatorFunctions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igSetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void *user_data)
     * }
     */
    public static MethodHandle igSetAllocatorFunctions$handle() {
        return igSetAllocatorFunctions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igSetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void *user_data)
     * }
     */
    public static MemorySegment igSetAllocatorFunctions$address() {
        return igSetAllocatorFunctions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igSetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void *user_data)
     * }
     */
    public static void igSetAllocatorFunctions(MemorySegment alloc_func, MemorySegment free_func, MemorySegment user_data) {
        var mh$ = igSetAllocatorFunctions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igSetAllocatorFunctions", alloc_func, free_func, user_data);
            }
            mh$.invokeExact(alloc_func, free_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetAllocatorFunctions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetAllocatorFunctions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igGetAllocatorFunctions(ImGuiMemAllocFunc *p_alloc_func, ImGuiMemFreeFunc *p_free_func, void **p_user_data)
     * }
     */
    public static FunctionDescriptor igGetAllocatorFunctions$descriptor() {
        return igGetAllocatorFunctions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igGetAllocatorFunctions(ImGuiMemAllocFunc *p_alloc_func, ImGuiMemFreeFunc *p_free_func, void **p_user_data)
     * }
     */
    public static MethodHandle igGetAllocatorFunctions$handle() {
        return igGetAllocatorFunctions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igGetAllocatorFunctions(ImGuiMemAllocFunc *p_alloc_func, ImGuiMemFreeFunc *p_free_func, void **p_user_data)
     * }
     */
    public static MemorySegment igGetAllocatorFunctions$address() {
        return igGetAllocatorFunctions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igGetAllocatorFunctions(ImGuiMemAllocFunc *p_alloc_func, ImGuiMemFreeFunc *p_free_func, void **p_user_data)
     * }
     */
    public static void igGetAllocatorFunctions(MemorySegment p_alloc_func, MemorySegment p_free_func, MemorySegment p_user_data) {
        var mh$ = igGetAllocatorFunctions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetAllocatorFunctions", p_alloc_func, p_free_func, p_user_data);
            }
            mh$.invokeExact(p_alloc_func, p_free_func, p_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMemAlloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMemAlloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *igMemAlloc(size_t size)
     * }
     */
    public static FunctionDescriptor igMemAlloc$descriptor() {
        return igMemAlloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *igMemAlloc(size_t size)
     * }
     */
    public static MethodHandle igMemAlloc$handle() {
        return igMemAlloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *igMemAlloc(size_t size)
     * }
     */
    public static MemorySegment igMemAlloc$address() {
        return igMemAlloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *igMemAlloc(size_t size)
     * }
     */
    public static MemorySegment igMemAlloc(long size) {
        var mh$ = igMemAlloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMemAlloc", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igMemFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igMemFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igMemFree(void *ptr)
     * }
     */
    public static FunctionDescriptor igMemFree$descriptor() {
        return igMemFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igMemFree(void *ptr)
     * }
     */
    public static MethodHandle igMemFree$handle() {
        return igMemFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igMemFree(void *ptr)
     * }
     */
    public static MemorySegment igMemFree$address() {
        return igMemFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igMemFree(void *ptr)
     * }
     */
    public static void igMemFree(MemorySegment ptr) {
        var mh$ = igMemFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igMemFree", ptr);
            }
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igGetPlatformIO {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igGetPlatformIO");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiPlatformIO *igGetPlatformIO()
     * }
     */
    public static FunctionDescriptor igGetPlatformIO$descriptor() {
        return igGetPlatformIO.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiPlatformIO *igGetPlatformIO()
     * }
     */
    public static MethodHandle igGetPlatformIO$handle() {
        return igGetPlatformIO.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiPlatformIO *igGetPlatformIO()
     * }
     */
    public static MemorySegment igGetPlatformIO$address() {
        return igGetPlatformIO.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiPlatformIO *igGetPlatformIO()
     * }
     */
    public static MemorySegment igGetPlatformIO() {
        var mh$ = igGetPlatformIO.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igGetPlatformIO");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igUpdatePlatformWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igUpdatePlatformWindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igUpdatePlatformWindows()
     * }
     */
    public static FunctionDescriptor igUpdatePlatformWindows$descriptor() {
        return igUpdatePlatformWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igUpdatePlatformWindows()
     * }
     */
    public static MethodHandle igUpdatePlatformWindows$handle() {
        return igUpdatePlatformWindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igUpdatePlatformWindows()
     * }
     */
    public static MemorySegment igUpdatePlatformWindows$address() {
        return igUpdatePlatformWindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igUpdatePlatformWindows()
     * }
     */
    public static void igUpdatePlatformWindows() {
        var mh$ = igUpdatePlatformWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igUpdatePlatformWindows");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igRenderPlatformWindowsDefault {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igRenderPlatformWindowsDefault");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igRenderPlatformWindowsDefault(void *platform_render_arg, void *renderer_render_arg)
     * }
     */
    public static FunctionDescriptor igRenderPlatformWindowsDefault$descriptor() {
        return igRenderPlatformWindowsDefault.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igRenderPlatformWindowsDefault(void *platform_render_arg, void *renderer_render_arg)
     * }
     */
    public static MethodHandle igRenderPlatformWindowsDefault$handle() {
        return igRenderPlatformWindowsDefault.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igRenderPlatformWindowsDefault(void *platform_render_arg, void *renderer_render_arg)
     * }
     */
    public static MemorySegment igRenderPlatformWindowsDefault$address() {
        return igRenderPlatformWindowsDefault.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igRenderPlatformWindowsDefault(void *platform_render_arg, void *renderer_render_arg)
     * }
     */
    public static void igRenderPlatformWindowsDefault(MemorySegment platform_render_arg, MemorySegment renderer_render_arg) {
        var mh$ = igRenderPlatformWindowsDefault.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igRenderPlatformWindowsDefault", platform_render_arg, renderer_render_arg);
            }
            mh$.invokeExact(platform_render_arg, renderer_render_arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igDestroyPlatformWindows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = imgui.findOrThrow("igDestroyPlatformWindows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igDestroyPlatformWindows()
     * }
     */
    public static FunctionDescriptor igDestroyPlatformWindows$descriptor() {
        return igDestroyPlatformWindows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igDestroyPlatformWindows()
     * }
     */
    public static MethodHandle igDestroyPlatformWindows$handle() {
        return igDestroyPlatformWindows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igDestroyPlatformWindows()
     * }
     */
    public static MemorySegment igDestroyPlatformWindows$address() {
        return igDestroyPlatformWindows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igDestroyPlatformWindows()
     * }
     */
    public static void igDestroyPlatformWindows() {
        var mh$ = igDestroyPlatformWindows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igDestroyPlatformWindows");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindViewportByID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindViewportByID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igFindViewportByID(ImGuiID id)
     * }
     */
    public static FunctionDescriptor igFindViewportByID$descriptor() {
        return igFindViewportByID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igFindViewportByID(ImGuiID id)
     * }
     */
    public static MethodHandle igFindViewportByID$handle() {
        return igFindViewportByID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igFindViewportByID(ImGuiID id)
     * }
     */
    public static MemorySegment igFindViewportByID$address() {
        return igFindViewportByID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiViewport *igFindViewportByID(ImGuiID id)
     * }
     */
    public static MemorySegment igFindViewportByID(int id) {
        var mh$ = igFindViewportByID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindViewportByID", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igFindViewportByPlatformHandle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igFindViewportByPlatformHandle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igFindViewportByPlatformHandle(void *platform_handle)
     * }
     */
    public static FunctionDescriptor igFindViewportByPlatformHandle$descriptor() {
        return igFindViewportByPlatformHandle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igFindViewportByPlatformHandle(void *platform_handle)
     * }
     */
    public static MethodHandle igFindViewportByPlatformHandle$handle() {
        return igFindViewportByPlatformHandle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiViewport *igFindViewportByPlatformHandle(void *platform_handle)
     * }
     */
    public static MemorySegment igFindViewportByPlatformHandle$address() {
        return igFindViewportByPlatformHandle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiViewport *igFindViewportByPlatformHandle(void *platform_handle)
     * }
     */
    public static MemorySegment igFindViewportByPlatformHandle(MemorySegment platform_handle) {
        var mh$ = igFindViewportByPlatformHandle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igFindViewportByPlatformHandle", platform_handle);
            }
            return (MemorySegment)mh$.invokeExact(platform_handle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableSortSpecs_ImGuiTableSortSpecs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableSortSpecs_ImGuiTableSortSpecs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableSortSpecs *ImGuiTableSortSpecs_ImGuiTableSortSpecs()
     * }
     */
    public static FunctionDescriptor ImGuiTableSortSpecs_ImGuiTableSortSpecs$descriptor() {
        return ImGuiTableSortSpecs_ImGuiTableSortSpecs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableSortSpecs *ImGuiTableSortSpecs_ImGuiTableSortSpecs()
     * }
     */
    public static MethodHandle ImGuiTableSortSpecs_ImGuiTableSortSpecs$handle() {
        return ImGuiTableSortSpecs_ImGuiTableSortSpecs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableSortSpecs *ImGuiTableSortSpecs_ImGuiTableSortSpecs()
     * }
     */
    public static MemorySegment ImGuiTableSortSpecs_ImGuiTableSortSpecs$address() {
        return ImGuiTableSortSpecs_ImGuiTableSortSpecs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableSortSpecs *ImGuiTableSortSpecs_ImGuiTableSortSpecs()
     * }
     */
    public static MemorySegment ImGuiTableSortSpecs_ImGuiTableSortSpecs() {
        var mh$ = ImGuiTableSortSpecs_ImGuiTableSortSpecs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableSortSpecs_ImGuiTableSortSpecs");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableSortSpecs_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableSortSpecs_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTableSortSpecs_destroy(ImGuiTableSortSpecs *self)
     * }
     */
    public static FunctionDescriptor ImGuiTableSortSpecs_destroy$descriptor() {
        return ImGuiTableSortSpecs_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTableSortSpecs_destroy(ImGuiTableSortSpecs *self)
     * }
     */
    public static MethodHandle ImGuiTableSortSpecs_destroy$handle() {
        return ImGuiTableSortSpecs_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTableSortSpecs_destroy(ImGuiTableSortSpecs *self)
     * }
     */
    public static MemorySegment ImGuiTableSortSpecs_destroy$address() {
        return ImGuiTableSortSpecs_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTableSortSpecs_destroy(ImGuiTableSortSpecs *self)
     * }
     */
    public static void ImGuiTableSortSpecs_destroy(MemorySegment self) {
        var mh$ = ImGuiTableSortSpecs_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableSortSpecs_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnSortSpecs *ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs()
     * }
     */
    public static FunctionDescriptor ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs$descriptor() {
        return ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnSortSpecs *ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs()
     * }
     */
    public static MethodHandle ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs$handle() {
        return ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTableColumnSortSpecs *ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs()
     * }
     */
    public static MemorySegment ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs$address() {
        return ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTableColumnSortSpecs *ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs()
     * }
     */
    public static MemorySegment ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs() {
        var mh$ = ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTableColumnSortSpecs_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTableColumnSortSpecs_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTableColumnSortSpecs_destroy(ImGuiTableColumnSortSpecs *self)
     * }
     */
    public static FunctionDescriptor ImGuiTableColumnSortSpecs_destroy$descriptor() {
        return ImGuiTableColumnSortSpecs_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTableColumnSortSpecs_destroy(ImGuiTableColumnSortSpecs *self)
     * }
     */
    public static MethodHandle ImGuiTableColumnSortSpecs_destroy$handle() {
        return ImGuiTableColumnSortSpecs_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTableColumnSortSpecs_destroy(ImGuiTableColumnSortSpecs *self)
     * }
     */
    public static MemorySegment ImGuiTableColumnSortSpecs_destroy$address() {
        return ImGuiTableColumnSortSpecs_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTableColumnSortSpecs_destroy(ImGuiTableColumnSortSpecs *self)
     * }
     */
    public static void ImGuiTableColumnSortSpecs_destroy(MemorySegment self) {
        var mh$ = ImGuiTableColumnSortSpecs_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTableColumnSortSpecs_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStyle_ImGuiStyle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStyle_ImGuiStyle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStyle *ImGuiStyle_ImGuiStyle()
     * }
     */
    public static FunctionDescriptor ImGuiStyle_ImGuiStyle$descriptor() {
        return ImGuiStyle_ImGuiStyle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStyle *ImGuiStyle_ImGuiStyle()
     * }
     */
    public static MethodHandle ImGuiStyle_ImGuiStyle$handle() {
        return ImGuiStyle_ImGuiStyle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStyle *ImGuiStyle_ImGuiStyle()
     * }
     */
    public static MemorySegment ImGuiStyle_ImGuiStyle$address() {
        return ImGuiStyle_ImGuiStyle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStyle *ImGuiStyle_ImGuiStyle()
     * }
     */
    public static MemorySegment ImGuiStyle_ImGuiStyle() {
        var mh$ = ImGuiStyle_ImGuiStyle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStyle_ImGuiStyle");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStyle_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStyle_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStyle_destroy(ImGuiStyle *self)
     * }
     */
    public static FunctionDescriptor ImGuiStyle_destroy$descriptor() {
        return ImGuiStyle_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStyle_destroy(ImGuiStyle *self)
     * }
     */
    public static MethodHandle ImGuiStyle_destroy$handle() {
        return ImGuiStyle_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStyle_destroy(ImGuiStyle *self)
     * }
     */
    public static MemorySegment ImGuiStyle_destroy$address() {
        return ImGuiStyle_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStyle_destroy(ImGuiStyle *self)
     * }
     */
    public static void ImGuiStyle_destroy(MemorySegment self) {
        var mh$ = ImGuiStyle_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStyle_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStyle_ScaleAllSizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStyle_ScaleAllSizes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStyle_ScaleAllSizes(ImGuiStyle *self, float scale_factor)
     * }
     */
    public static FunctionDescriptor ImGuiStyle_ScaleAllSizes$descriptor() {
        return ImGuiStyle_ScaleAllSizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStyle_ScaleAllSizes(ImGuiStyle *self, float scale_factor)
     * }
     */
    public static MethodHandle ImGuiStyle_ScaleAllSizes$handle() {
        return ImGuiStyle_ScaleAllSizes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStyle_ScaleAllSizes(ImGuiStyle *self, float scale_factor)
     * }
     */
    public static MemorySegment ImGuiStyle_ScaleAllSizes$address() {
        return ImGuiStyle_ScaleAllSizes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStyle_ScaleAllSizes(ImGuiStyle *self, float scale_factor)
     * }
     */
    public static void ImGuiStyle_ScaleAllSizes(MemorySegment self, float scale_factor) {
        var mh$ = ImGuiStyle_ScaleAllSizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStyle_ScaleAllSizes", self, scale_factor);
            }
            mh$.invokeExact(self, scale_factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddKeyEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddKeyEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddKeyEvent(ImGuiIO *self, ImGuiKey key, bool down)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddKeyEvent$descriptor() {
        return ImGuiIO_AddKeyEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddKeyEvent(ImGuiIO *self, ImGuiKey key, bool down)
     * }
     */
    public static MethodHandle ImGuiIO_AddKeyEvent$handle() {
        return ImGuiIO_AddKeyEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddKeyEvent(ImGuiIO *self, ImGuiKey key, bool down)
     * }
     */
    public static MemorySegment ImGuiIO_AddKeyEvent$address() {
        return ImGuiIO_AddKeyEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddKeyEvent(ImGuiIO *self, ImGuiKey key, bool down)
     * }
     */
    public static void ImGuiIO_AddKeyEvent(MemorySegment self, int key, boolean down) {
        var mh$ = ImGuiIO_AddKeyEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddKeyEvent", self, key, down);
            }
            mh$.invokeExact(self, key, down);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddKeyAnalogEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_BOOL,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddKeyAnalogEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddKeyAnalogEvent(ImGuiIO *self, ImGuiKey key, bool down, float v)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddKeyAnalogEvent$descriptor() {
        return ImGuiIO_AddKeyAnalogEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddKeyAnalogEvent(ImGuiIO *self, ImGuiKey key, bool down, float v)
     * }
     */
    public static MethodHandle ImGuiIO_AddKeyAnalogEvent$handle() {
        return ImGuiIO_AddKeyAnalogEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddKeyAnalogEvent(ImGuiIO *self, ImGuiKey key, bool down, float v)
     * }
     */
    public static MemorySegment ImGuiIO_AddKeyAnalogEvent$address() {
        return ImGuiIO_AddKeyAnalogEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddKeyAnalogEvent(ImGuiIO *self, ImGuiKey key, bool down, float v)
     * }
     */
    public static void ImGuiIO_AddKeyAnalogEvent(MemorySegment self, int key, boolean down, float v) {
        var mh$ = ImGuiIO_AddKeyAnalogEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddKeyAnalogEvent", self, key, down, v);
            }
            mh$.invokeExact(self, key, down, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddMousePosEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddMousePosEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMousePosEvent(ImGuiIO *self, float x, float y)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddMousePosEvent$descriptor() {
        return ImGuiIO_AddMousePosEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMousePosEvent(ImGuiIO *self, float x, float y)
     * }
     */
    public static MethodHandle ImGuiIO_AddMousePosEvent$handle() {
        return ImGuiIO_AddMousePosEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMousePosEvent(ImGuiIO *self, float x, float y)
     * }
     */
    public static MemorySegment ImGuiIO_AddMousePosEvent$address() {
        return ImGuiIO_AddMousePosEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMousePosEvent(ImGuiIO *self, float x, float y)
     * }
     */
    public static void ImGuiIO_AddMousePosEvent(MemorySegment self, float x, float y) {
        var mh$ = ImGuiIO_AddMousePosEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddMousePosEvent", self, x, y);
            }
            mh$.invokeExact(self, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddMouseButtonEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddMouseButtonEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseButtonEvent(ImGuiIO *self, int button, bool down)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddMouseButtonEvent$descriptor() {
        return ImGuiIO_AddMouseButtonEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseButtonEvent(ImGuiIO *self, int button, bool down)
     * }
     */
    public static MethodHandle ImGuiIO_AddMouseButtonEvent$handle() {
        return ImGuiIO_AddMouseButtonEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseButtonEvent(ImGuiIO *self, int button, bool down)
     * }
     */
    public static MemorySegment ImGuiIO_AddMouseButtonEvent$address() {
        return ImGuiIO_AddMouseButtonEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseButtonEvent(ImGuiIO *self, int button, bool down)
     * }
     */
    public static void ImGuiIO_AddMouseButtonEvent(MemorySegment self, int button, boolean down) {
        var mh$ = ImGuiIO_AddMouseButtonEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddMouseButtonEvent", self, button, down);
            }
            mh$.invokeExact(self, button, down);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddMouseWheelEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddMouseWheelEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseWheelEvent(ImGuiIO *self, float wheel_x, float wheel_y)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddMouseWheelEvent$descriptor() {
        return ImGuiIO_AddMouseWheelEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseWheelEvent(ImGuiIO *self, float wheel_x, float wheel_y)
     * }
     */
    public static MethodHandle ImGuiIO_AddMouseWheelEvent$handle() {
        return ImGuiIO_AddMouseWheelEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseWheelEvent(ImGuiIO *self, float wheel_x, float wheel_y)
     * }
     */
    public static MemorySegment ImGuiIO_AddMouseWheelEvent$address() {
        return ImGuiIO_AddMouseWheelEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseWheelEvent(ImGuiIO *self, float wheel_x, float wheel_y)
     * }
     */
    public static void ImGuiIO_AddMouseWheelEvent(MemorySegment self, float wheel_x, float wheel_y) {
        var mh$ = ImGuiIO_AddMouseWheelEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddMouseWheelEvent", self, wheel_x, wheel_y);
            }
            mh$.invokeExact(self, wheel_x, wheel_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddMouseSourceEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddMouseSourceEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseSourceEvent(ImGuiIO *self, ImGuiMouseSource source)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddMouseSourceEvent$descriptor() {
        return ImGuiIO_AddMouseSourceEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseSourceEvent(ImGuiIO *self, ImGuiMouseSource source)
     * }
     */
    public static MethodHandle ImGuiIO_AddMouseSourceEvent$handle() {
        return ImGuiIO_AddMouseSourceEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseSourceEvent(ImGuiIO *self, ImGuiMouseSource source)
     * }
     */
    public static MemorySegment ImGuiIO_AddMouseSourceEvent$address() {
        return ImGuiIO_AddMouseSourceEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseSourceEvent(ImGuiIO *self, ImGuiMouseSource source)
     * }
     */
    public static void ImGuiIO_AddMouseSourceEvent(MemorySegment self, int source) {
        var mh$ = ImGuiIO_AddMouseSourceEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddMouseSourceEvent", self, source);
            }
            mh$.invokeExact(self, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddMouseViewportEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddMouseViewportEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseViewportEvent(ImGuiIO *self, ImGuiID id)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddMouseViewportEvent$descriptor() {
        return ImGuiIO_AddMouseViewportEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseViewportEvent(ImGuiIO *self, ImGuiID id)
     * }
     */
    public static MethodHandle ImGuiIO_AddMouseViewportEvent$handle() {
        return ImGuiIO_AddMouseViewportEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseViewportEvent(ImGuiIO *self, ImGuiID id)
     * }
     */
    public static MemorySegment ImGuiIO_AddMouseViewportEvent$address() {
        return ImGuiIO_AddMouseViewportEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddMouseViewportEvent(ImGuiIO *self, ImGuiID id)
     * }
     */
    public static void ImGuiIO_AddMouseViewportEvent(MemorySegment self, int id) {
        var mh$ = ImGuiIO_AddMouseViewportEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddMouseViewportEvent", self, id);
            }
            mh$.invokeExact(self, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddFocusEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddFocusEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddFocusEvent(ImGuiIO *self, bool focused)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddFocusEvent$descriptor() {
        return ImGuiIO_AddFocusEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddFocusEvent(ImGuiIO *self, bool focused)
     * }
     */
    public static MethodHandle ImGuiIO_AddFocusEvent$handle() {
        return ImGuiIO_AddFocusEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddFocusEvent(ImGuiIO *self, bool focused)
     * }
     */
    public static MemorySegment ImGuiIO_AddFocusEvent$address() {
        return ImGuiIO_AddFocusEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddFocusEvent(ImGuiIO *self, bool focused)
     * }
     */
    public static void ImGuiIO_AddFocusEvent(MemorySegment self, boolean focused) {
        var mh$ = ImGuiIO_AddFocusEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddFocusEvent", self, focused);
            }
            mh$.invokeExact(self, focused);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddInputCharacter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddInputCharacter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharacter(ImGuiIO *self, unsigned int c)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddInputCharacter$descriptor() {
        return ImGuiIO_AddInputCharacter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharacter(ImGuiIO *self, unsigned int c)
     * }
     */
    public static MethodHandle ImGuiIO_AddInputCharacter$handle() {
        return ImGuiIO_AddInputCharacter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharacter(ImGuiIO *self, unsigned int c)
     * }
     */
    public static MemorySegment ImGuiIO_AddInputCharacter$address() {
        return ImGuiIO_AddInputCharacter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharacter(ImGuiIO *self, unsigned int c)
     * }
     */
    public static void ImGuiIO_AddInputCharacter(MemorySegment self, int c) {
        var mh$ = ImGuiIO_AddInputCharacter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddInputCharacter", self, c);
            }
            mh$.invokeExact(self, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddInputCharacterUTF16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_SHORT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddInputCharacterUTF16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharacterUTF16(ImGuiIO *self, ImWchar16 c)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddInputCharacterUTF16$descriptor() {
        return ImGuiIO_AddInputCharacterUTF16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharacterUTF16(ImGuiIO *self, ImWchar16 c)
     * }
     */
    public static MethodHandle ImGuiIO_AddInputCharacterUTF16$handle() {
        return ImGuiIO_AddInputCharacterUTF16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharacterUTF16(ImGuiIO *self, ImWchar16 c)
     * }
     */
    public static MemorySegment ImGuiIO_AddInputCharacterUTF16$address() {
        return ImGuiIO_AddInputCharacterUTF16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharacterUTF16(ImGuiIO *self, ImWchar16 c)
     * }
     */
    public static void ImGuiIO_AddInputCharacterUTF16(MemorySegment self, short c) {
        var mh$ = ImGuiIO_AddInputCharacterUTF16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddInputCharacterUTF16", self, c);
            }
            mh$.invokeExact(self, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_AddInputCharactersUTF8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_AddInputCharactersUTF8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharactersUTF8(ImGuiIO *self, const char *str)
     * }
     */
    public static FunctionDescriptor ImGuiIO_AddInputCharactersUTF8$descriptor() {
        return ImGuiIO_AddInputCharactersUTF8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharactersUTF8(ImGuiIO *self, const char *str)
     * }
     */
    public static MethodHandle ImGuiIO_AddInputCharactersUTF8$handle() {
        return ImGuiIO_AddInputCharactersUTF8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharactersUTF8(ImGuiIO *self, const char *str)
     * }
     */
    public static MemorySegment ImGuiIO_AddInputCharactersUTF8$address() {
        return ImGuiIO_AddInputCharactersUTF8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_AddInputCharactersUTF8(ImGuiIO *self, const char *str)
     * }
     */
    public static void ImGuiIO_AddInputCharactersUTF8(MemorySegment self, MemorySegment str) {
        var mh$ = ImGuiIO_AddInputCharactersUTF8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_AddInputCharactersUTF8", self, str);
            }
            mh$.invokeExact(self, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_SetKeyEventNativeData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_SetKeyEventNativeData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_SetKeyEventNativeData(ImGuiIO *self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index)
     * }
     */
    public static FunctionDescriptor ImGuiIO_SetKeyEventNativeData$descriptor() {
        return ImGuiIO_SetKeyEventNativeData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_SetKeyEventNativeData(ImGuiIO *self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index)
     * }
     */
    public static MethodHandle ImGuiIO_SetKeyEventNativeData$handle() {
        return ImGuiIO_SetKeyEventNativeData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_SetKeyEventNativeData(ImGuiIO *self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index)
     * }
     */
    public static MemorySegment ImGuiIO_SetKeyEventNativeData$address() {
        return ImGuiIO_SetKeyEventNativeData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_SetKeyEventNativeData(ImGuiIO *self, ImGuiKey key, int native_keycode, int native_scancode, int native_legacy_index)
     * }
     */
    public static void ImGuiIO_SetKeyEventNativeData(MemorySegment self, int key, int native_keycode, int native_scancode, int native_legacy_index) {
        var mh$ = ImGuiIO_SetKeyEventNativeData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_SetKeyEventNativeData", self, key, native_keycode, native_scancode, native_legacy_index);
            }
            mh$.invokeExact(self, key, native_keycode, native_scancode, native_legacy_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_SetAppAcceptingEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_SetAppAcceptingEvents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_SetAppAcceptingEvents(ImGuiIO *self, bool accepting_events)
     * }
     */
    public static FunctionDescriptor ImGuiIO_SetAppAcceptingEvents$descriptor() {
        return ImGuiIO_SetAppAcceptingEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_SetAppAcceptingEvents(ImGuiIO *self, bool accepting_events)
     * }
     */
    public static MethodHandle ImGuiIO_SetAppAcceptingEvents$handle() {
        return ImGuiIO_SetAppAcceptingEvents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_SetAppAcceptingEvents(ImGuiIO *self, bool accepting_events)
     * }
     */
    public static MemorySegment ImGuiIO_SetAppAcceptingEvents$address() {
        return ImGuiIO_SetAppAcceptingEvents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_SetAppAcceptingEvents(ImGuiIO *self, bool accepting_events)
     * }
     */
    public static void ImGuiIO_SetAppAcceptingEvents(MemorySegment self, boolean accepting_events) {
        var mh$ = ImGuiIO_SetAppAcceptingEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_SetAppAcceptingEvents", self, accepting_events);
            }
            mh$.invokeExact(self, accepting_events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_ClearEventsQueue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_ClearEventsQueue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearEventsQueue(ImGuiIO *self)
     * }
     */
    public static FunctionDescriptor ImGuiIO_ClearEventsQueue$descriptor() {
        return ImGuiIO_ClearEventsQueue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearEventsQueue(ImGuiIO *self)
     * }
     */
    public static MethodHandle ImGuiIO_ClearEventsQueue$handle() {
        return ImGuiIO_ClearEventsQueue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearEventsQueue(ImGuiIO *self)
     * }
     */
    public static MemorySegment ImGuiIO_ClearEventsQueue$address() {
        return ImGuiIO_ClearEventsQueue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearEventsQueue(ImGuiIO *self)
     * }
     */
    public static void ImGuiIO_ClearEventsQueue(MemorySegment self) {
        var mh$ = ImGuiIO_ClearEventsQueue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_ClearEventsQueue", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_ClearInputKeys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_ClearInputKeys");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearInputKeys(ImGuiIO *self)
     * }
     */
    public static FunctionDescriptor ImGuiIO_ClearInputKeys$descriptor() {
        return ImGuiIO_ClearInputKeys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearInputKeys(ImGuiIO *self)
     * }
     */
    public static MethodHandle ImGuiIO_ClearInputKeys$handle() {
        return ImGuiIO_ClearInputKeys.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearInputKeys(ImGuiIO *self)
     * }
     */
    public static MemorySegment ImGuiIO_ClearInputKeys$address() {
        return ImGuiIO_ClearInputKeys.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearInputKeys(ImGuiIO *self)
     * }
     */
    public static void ImGuiIO_ClearInputKeys(MemorySegment self) {
        var mh$ = ImGuiIO_ClearInputKeys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_ClearInputKeys", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_ClearInputMouse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_ClearInputMouse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearInputMouse(ImGuiIO *self)
     * }
     */
    public static FunctionDescriptor ImGuiIO_ClearInputMouse$descriptor() {
        return ImGuiIO_ClearInputMouse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearInputMouse(ImGuiIO *self)
     * }
     */
    public static MethodHandle ImGuiIO_ClearInputMouse$handle() {
        return ImGuiIO_ClearInputMouse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearInputMouse(ImGuiIO *self)
     * }
     */
    public static MemorySegment ImGuiIO_ClearInputMouse$address() {
        return ImGuiIO_ClearInputMouse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_ClearInputMouse(ImGuiIO *self)
     * }
     */
    public static void ImGuiIO_ClearInputMouse(MemorySegment self) {
        var mh$ = ImGuiIO_ClearInputMouse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_ClearInputMouse", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_ImGuiIO {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_ImGuiIO");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiIO *ImGuiIO_ImGuiIO()
     * }
     */
    public static FunctionDescriptor ImGuiIO_ImGuiIO$descriptor() {
        return ImGuiIO_ImGuiIO.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiIO *ImGuiIO_ImGuiIO()
     * }
     */
    public static MethodHandle ImGuiIO_ImGuiIO$handle() {
        return ImGuiIO_ImGuiIO.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiIO *ImGuiIO_ImGuiIO()
     * }
     */
    public static MemorySegment ImGuiIO_ImGuiIO$address() {
        return ImGuiIO_ImGuiIO.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiIO *ImGuiIO_ImGuiIO()
     * }
     */
    public static MemorySegment ImGuiIO_ImGuiIO() {
        var mh$ = ImGuiIO_ImGuiIO.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_ImGuiIO");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIO_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIO_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIO_destroy(ImGuiIO *self)
     * }
     */
    public static FunctionDescriptor ImGuiIO_destroy$descriptor() {
        return ImGuiIO_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIO_destroy(ImGuiIO *self)
     * }
     */
    public static MethodHandle ImGuiIO_destroy$handle() {
        return ImGuiIO_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIO_destroy(ImGuiIO *self)
     * }
     */
    public static MemorySegment ImGuiIO_destroy$address() {
        return ImGuiIO_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIO_destroy(ImGuiIO *self)
     * }
     */
    public static void ImGuiIO_destroy(MemorySegment self) {
        var mh$ = ImGuiIO_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIO_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextCallbackData_ImGuiInputTextCallbackData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextCallbackData_ImGuiInputTextCallbackData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiInputTextCallbackData *ImGuiInputTextCallbackData_ImGuiInputTextCallbackData()
     * }
     */
    public static FunctionDescriptor ImGuiInputTextCallbackData_ImGuiInputTextCallbackData$descriptor() {
        return ImGuiInputTextCallbackData_ImGuiInputTextCallbackData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiInputTextCallbackData *ImGuiInputTextCallbackData_ImGuiInputTextCallbackData()
     * }
     */
    public static MethodHandle ImGuiInputTextCallbackData_ImGuiInputTextCallbackData$handle() {
        return ImGuiInputTextCallbackData_ImGuiInputTextCallbackData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiInputTextCallbackData *ImGuiInputTextCallbackData_ImGuiInputTextCallbackData()
     * }
     */
    public static MemorySegment ImGuiInputTextCallbackData_ImGuiInputTextCallbackData$address() {
        return ImGuiInputTextCallbackData_ImGuiInputTextCallbackData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiInputTextCallbackData *ImGuiInputTextCallbackData_ImGuiInputTextCallbackData()
     * }
     */
    public static MemorySegment ImGuiInputTextCallbackData_ImGuiInputTextCallbackData() {
        var mh$ = ImGuiInputTextCallbackData_ImGuiInputTextCallbackData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextCallbackData_ImGuiInputTextCallbackData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextCallbackData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextCallbackData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextCallbackData_destroy$descriptor() {
        return ImGuiInputTextCallbackData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData *self)
     * }
     */
    public static MethodHandle ImGuiInputTextCallbackData_destroy$handle() {
        return ImGuiInputTextCallbackData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData *self)
     * }
     */
    public static MemorySegment ImGuiInputTextCallbackData_destroy$address() {
        return ImGuiInputTextCallbackData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_destroy(ImGuiInputTextCallbackData *self)
     * }
     */
    public static void ImGuiInputTextCallbackData_destroy(MemorySegment self) {
        var mh$ = ImGuiInputTextCallbackData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextCallbackData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextCallbackData_DeleteChars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextCallbackData_DeleteChars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData *self, int pos, int bytes_count)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextCallbackData_DeleteChars$descriptor() {
        return ImGuiInputTextCallbackData_DeleteChars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData *self, int pos, int bytes_count)
     * }
     */
    public static MethodHandle ImGuiInputTextCallbackData_DeleteChars$handle() {
        return ImGuiInputTextCallbackData_DeleteChars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData *self, int pos, int bytes_count)
     * }
     */
    public static MemorySegment ImGuiInputTextCallbackData_DeleteChars$address() {
        return ImGuiInputTextCallbackData_DeleteChars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_DeleteChars(ImGuiInputTextCallbackData *self, int pos, int bytes_count)
     * }
     */
    public static void ImGuiInputTextCallbackData_DeleteChars(MemorySegment self, int pos, int bytes_count) {
        var mh$ = ImGuiInputTextCallbackData_DeleteChars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextCallbackData_DeleteChars", self, pos, bytes_count);
            }
            mh$.invokeExact(self, pos, bytes_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextCallbackData_InsertChars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextCallbackData_InsertChars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData *self, int pos, const char *text, const char *text_end)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextCallbackData_InsertChars$descriptor() {
        return ImGuiInputTextCallbackData_InsertChars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData *self, int pos, const char *text, const char *text_end)
     * }
     */
    public static MethodHandle ImGuiInputTextCallbackData_InsertChars$handle() {
        return ImGuiInputTextCallbackData_InsertChars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData *self, int pos, const char *text, const char *text_end)
     * }
     */
    public static MemorySegment ImGuiInputTextCallbackData_InsertChars$address() {
        return ImGuiInputTextCallbackData_InsertChars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_InsertChars(ImGuiInputTextCallbackData *self, int pos, const char *text, const char *text_end)
     * }
     */
    public static void ImGuiInputTextCallbackData_InsertChars(MemorySegment self, int pos, MemorySegment text, MemorySegment text_end) {
        var mh$ = ImGuiInputTextCallbackData_InsertChars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextCallbackData_InsertChars", self, pos, text, text_end);
            }
            mh$.invokeExact(self, pos, text, text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextCallbackData_SelectAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextCallbackData_SelectAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextCallbackData_SelectAll$descriptor() {
        return ImGuiInputTextCallbackData_SelectAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData *self)
     * }
     */
    public static MethodHandle ImGuiInputTextCallbackData_SelectAll$handle() {
        return ImGuiInputTextCallbackData_SelectAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData *self)
     * }
     */
    public static MemorySegment ImGuiInputTextCallbackData_SelectAll$address() {
        return ImGuiInputTextCallbackData_SelectAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_SelectAll(ImGuiInputTextCallbackData *self)
     * }
     */
    public static void ImGuiInputTextCallbackData_SelectAll(MemorySegment self) {
        var mh$ = ImGuiInputTextCallbackData_SelectAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextCallbackData_SelectAll", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextCallbackData_ClearSelection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextCallbackData_ClearSelection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextCallbackData_ClearSelection$descriptor() {
        return ImGuiInputTextCallbackData_ClearSelection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData *self)
     * }
     */
    public static MethodHandle ImGuiInputTextCallbackData_ClearSelection$handle() {
        return ImGuiInputTextCallbackData_ClearSelection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData *self)
     * }
     */
    public static MemorySegment ImGuiInputTextCallbackData_ClearSelection$address() {
        return ImGuiInputTextCallbackData_ClearSelection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextCallbackData_ClearSelection(ImGuiInputTextCallbackData *self)
     * }
     */
    public static void ImGuiInputTextCallbackData_ClearSelection(MemorySegment self) {
        var mh$ = ImGuiInputTextCallbackData_ClearSelection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextCallbackData_ClearSelection", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextCallbackData_HasSelection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextCallbackData_HasSelection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextCallbackData_HasSelection$descriptor() {
        return ImGuiInputTextCallbackData_HasSelection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData *self)
     * }
     */
    public static MethodHandle ImGuiInputTextCallbackData_HasSelection$handle() {
        return ImGuiInputTextCallbackData_HasSelection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData *self)
     * }
     */
    public static MemorySegment ImGuiInputTextCallbackData_HasSelection$address() {
        return ImGuiInputTextCallbackData_HasSelection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiInputTextCallbackData_HasSelection(ImGuiInputTextCallbackData *self)
     * }
     */
    public static boolean ImGuiInputTextCallbackData_HasSelection(MemorySegment self) {
        var mh$ = ImGuiInputTextCallbackData_HasSelection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextCallbackData_HasSelection", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindowClass_ImGuiWindowClass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindowClass_ImGuiWindowClass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindowClass *ImGuiWindowClass_ImGuiWindowClass()
     * }
     */
    public static FunctionDescriptor ImGuiWindowClass_ImGuiWindowClass$descriptor() {
        return ImGuiWindowClass_ImGuiWindowClass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindowClass *ImGuiWindowClass_ImGuiWindowClass()
     * }
     */
    public static MethodHandle ImGuiWindowClass_ImGuiWindowClass$handle() {
        return ImGuiWindowClass_ImGuiWindowClass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindowClass *ImGuiWindowClass_ImGuiWindowClass()
     * }
     */
    public static MemorySegment ImGuiWindowClass_ImGuiWindowClass$address() {
        return ImGuiWindowClass_ImGuiWindowClass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindowClass *ImGuiWindowClass_ImGuiWindowClass()
     * }
     */
    public static MemorySegment ImGuiWindowClass_ImGuiWindowClass() {
        var mh$ = ImGuiWindowClass_ImGuiWindowClass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindowClass_ImGuiWindowClass");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindowClass_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindowClass_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiWindowClass_destroy(ImGuiWindowClass *self)
     * }
     */
    public static FunctionDescriptor ImGuiWindowClass_destroy$descriptor() {
        return ImGuiWindowClass_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiWindowClass_destroy(ImGuiWindowClass *self)
     * }
     */
    public static MethodHandle ImGuiWindowClass_destroy$handle() {
        return ImGuiWindowClass_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiWindowClass_destroy(ImGuiWindowClass *self)
     * }
     */
    public static MemorySegment ImGuiWindowClass_destroy$address() {
        return ImGuiWindowClass_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiWindowClass_destroy(ImGuiWindowClass *self)
     * }
     */
    public static void ImGuiWindowClass_destroy(MemorySegment self) {
        var mh$ = ImGuiWindowClass_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindowClass_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPayload_ImGuiPayload {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPayload_ImGuiPayload");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiPayload *ImGuiPayload_ImGuiPayload()
     * }
     */
    public static FunctionDescriptor ImGuiPayload_ImGuiPayload$descriptor() {
        return ImGuiPayload_ImGuiPayload.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiPayload *ImGuiPayload_ImGuiPayload()
     * }
     */
    public static MethodHandle ImGuiPayload_ImGuiPayload$handle() {
        return ImGuiPayload_ImGuiPayload.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiPayload *ImGuiPayload_ImGuiPayload()
     * }
     */
    public static MemorySegment ImGuiPayload_ImGuiPayload$address() {
        return ImGuiPayload_ImGuiPayload.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiPayload *ImGuiPayload_ImGuiPayload()
     * }
     */
    public static MemorySegment ImGuiPayload_ImGuiPayload() {
        var mh$ = ImGuiPayload_ImGuiPayload.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPayload_ImGuiPayload");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPayload_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPayload_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiPayload_destroy(ImGuiPayload *self)
     * }
     */
    public static FunctionDescriptor ImGuiPayload_destroy$descriptor() {
        return ImGuiPayload_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiPayload_destroy(ImGuiPayload *self)
     * }
     */
    public static MethodHandle ImGuiPayload_destroy$handle() {
        return ImGuiPayload_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiPayload_destroy(ImGuiPayload *self)
     * }
     */
    public static MemorySegment ImGuiPayload_destroy$address() {
        return ImGuiPayload_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiPayload_destroy(ImGuiPayload *self)
     * }
     */
    public static void ImGuiPayload_destroy(MemorySegment self) {
        var mh$ = ImGuiPayload_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPayload_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPayload_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPayload_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiPayload_Clear(ImGuiPayload *self)
     * }
     */
    public static FunctionDescriptor ImGuiPayload_Clear$descriptor() {
        return ImGuiPayload_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiPayload_Clear(ImGuiPayload *self)
     * }
     */
    public static MethodHandle ImGuiPayload_Clear$handle() {
        return ImGuiPayload_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiPayload_Clear(ImGuiPayload *self)
     * }
     */
    public static MemorySegment ImGuiPayload_Clear$address() {
        return ImGuiPayload_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiPayload_Clear(ImGuiPayload *self)
     * }
     */
    public static void ImGuiPayload_Clear(MemorySegment self) {
        var mh$ = ImGuiPayload_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPayload_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPayload_IsDataType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPayload_IsDataType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsDataType(ImGuiPayload *self, const char *type)
     * }
     */
    public static FunctionDescriptor ImGuiPayload_IsDataType$descriptor() {
        return ImGuiPayload_IsDataType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsDataType(ImGuiPayload *self, const char *type)
     * }
     */
    public static MethodHandle ImGuiPayload_IsDataType$handle() {
        return ImGuiPayload_IsDataType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsDataType(ImGuiPayload *self, const char *type)
     * }
     */
    public static MemorySegment ImGuiPayload_IsDataType$address() {
        return ImGuiPayload_IsDataType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsDataType(ImGuiPayload *self, const char *type)
     * }
     */
    public static boolean ImGuiPayload_IsDataType(MemorySegment self, MemorySegment type) {
        var mh$ = ImGuiPayload_IsDataType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPayload_IsDataType", self, type);
            }
            return (boolean)mh$.invokeExact(self, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPayload_IsPreview {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPayload_IsPreview");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsPreview(ImGuiPayload *self)
     * }
     */
    public static FunctionDescriptor ImGuiPayload_IsPreview$descriptor() {
        return ImGuiPayload_IsPreview.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsPreview(ImGuiPayload *self)
     * }
     */
    public static MethodHandle ImGuiPayload_IsPreview$handle() {
        return ImGuiPayload_IsPreview.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsPreview(ImGuiPayload *self)
     * }
     */
    public static MemorySegment ImGuiPayload_IsPreview$address() {
        return ImGuiPayload_IsPreview.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsPreview(ImGuiPayload *self)
     * }
     */
    public static boolean ImGuiPayload_IsPreview(MemorySegment self) {
        var mh$ = ImGuiPayload_IsPreview.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPayload_IsPreview", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPayload_IsDelivery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPayload_IsDelivery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsDelivery(ImGuiPayload *self)
     * }
     */
    public static FunctionDescriptor ImGuiPayload_IsDelivery$descriptor() {
        return ImGuiPayload_IsDelivery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsDelivery(ImGuiPayload *self)
     * }
     */
    public static MethodHandle ImGuiPayload_IsDelivery$handle() {
        return ImGuiPayload_IsDelivery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsDelivery(ImGuiPayload *self)
     * }
     */
    public static MemorySegment ImGuiPayload_IsDelivery$address() {
        return ImGuiPayload_IsDelivery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiPayload_IsDelivery(ImGuiPayload *self)
     * }
     */
    public static boolean ImGuiPayload_IsDelivery(MemorySegment self) {
        var mh$ = ImGuiPayload_IsDelivery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPayload_IsDelivery", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiOnceUponAFrame_ImGuiOnceUponAFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiOnceUponAFrame_ImGuiOnceUponAFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiOnceUponAFrame *ImGuiOnceUponAFrame_ImGuiOnceUponAFrame()
     * }
     */
    public static FunctionDescriptor ImGuiOnceUponAFrame_ImGuiOnceUponAFrame$descriptor() {
        return ImGuiOnceUponAFrame_ImGuiOnceUponAFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiOnceUponAFrame *ImGuiOnceUponAFrame_ImGuiOnceUponAFrame()
     * }
     */
    public static MethodHandle ImGuiOnceUponAFrame_ImGuiOnceUponAFrame$handle() {
        return ImGuiOnceUponAFrame_ImGuiOnceUponAFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiOnceUponAFrame *ImGuiOnceUponAFrame_ImGuiOnceUponAFrame()
     * }
     */
    public static MemorySegment ImGuiOnceUponAFrame_ImGuiOnceUponAFrame$address() {
        return ImGuiOnceUponAFrame_ImGuiOnceUponAFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiOnceUponAFrame *ImGuiOnceUponAFrame_ImGuiOnceUponAFrame()
     * }
     */
    public static MemorySegment ImGuiOnceUponAFrame_ImGuiOnceUponAFrame() {
        var mh$ = ImGuiOnceUponAFrame_ImGuiOnceUponAFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiOnceUponAFrame_ImGuiOnceUponAFrame");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiOnceUponAFrame_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiOnceUponAFrame_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame *self)
     * }
     */
    public static FunctionDescriptor ImGuiOnceUponAFrame_destroy$descriptor() {
        return ImGuiOnceUponAFrame_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame *self)
     * }
     */
    public static MethodHandle ImGuiOnceUponAFrame_destroy$handle() {
        return ImGuiOnceUponAFrame_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame *self)
     * }
     */
    public static MemorySegment ImGuiOnceUponAFrame_destroy$address() {
        return ImGuiOnceUponAFrame_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiOnceUponAFrame_destroy(ImGuiOnceUponAFrame *self)
     * }
     */
    public static void ImGuiOnceUponAFrame_destroy(MemorySegment self) {
        var mh$ = ImGuiOnceUponAFrame_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiOnceUponAFrame_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextFilter_ImGuiTextFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextFilter_ImGuiTextFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTextFilter *ImGuiTextFilter_ImGuiTextFilter(const char *default_filter)
     * }
     */
    public static FunctionDescriptor ImGuiTextFilter_ImGuiTextFilter$descriptor() {
        return ImGuiTextFilter_ImGuiTextFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTextFilter *ImGuiTextFilter_ImGuiTextFilter(const char *default_filter)
     * }
     */
    public static MethodHandle ImGuiTextFilter_ImGuiTextFilter$handle() {
        return ImGuiTextFilter_ImGuiTextFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTextFilter *ImGuiTextFilter_ImGuiTextFilter(const char *default_filter)
     * }
     */
    public static MemorySegment ImGuiTextFilter_ImGuiTextFilter$address() {
        return ImGuiTextFilter_ImGuiTextFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTextFilter *ImGuiTextFilter_ImGuiTextFilter(const char *default_filter)
     * }
     */
    public static MemorySegment ImGuiTextFilter_ImGuiTextFilter(MemorySegment default_filter) {
        var mh$ = ImGuiTextFilter_ImGuiTextFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextFilter_ImGuiTextFilter", default_filter);
            }
            return (MemorySegment)mh$.invokeExact(default_filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextFilter_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextFilter_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_destroy(ImGuiTextFilter *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextFilter_destroy$descriptor() {
        return ImGuiTextFilter_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_destroy(ImGuiTextFilter *self)
     * }
     */
    public static MethodHandle ImGuiTextFilter_destroy$handle() {
        return ImGuiTextFilter_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_destroy(ImGuiTextFilter *self)
     * }
     */
    public static MemorySegment ImGuiTextFilter_destroy$address() {
        return ImGuiTextFilter_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_destroy(ImGuiTextFilter *self)
     * }
     */
    public static void ImGuiTextFilter_destroy(MemorySegment self) {
        var mh$ = ImGuiTextFilter_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextFilter_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextFilter_Draw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextFilter_Draw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_Draw(ImGuiTextFilter *self, const char *label, float width)
     * }
     */
    public static FunctionDescriptor ImGuiTextFilter_Draw$descriptor() {
        return ImGuiTextFilter_Draw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_Draw(ImGuiTextFilter *self, const char *label, float width)
     * }
     */
    public static MethodHandle ImGuiTextFilter_Draw$handle() {
        return ImGuiTextFilter_Draw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_Draw(ImGuiTextFilter *self, const char *label, float width)
     * }
     */
    public static MemorySegment ImGuiTextFilter_Draw$address() {
        return ImGuiTextFilter_Draw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_Draw(ImGuiTextFilter *self, const char *label, float width)
     * }
     */
    public static boolean ImGuiTextFilter_Draw(MemorySegment self, MemorySegment label, float width) {
        var mh$ = ImGuiTextFilter_Draw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextFilter_Draw", self, label, width);
            }
            return (boolean)mh$.invokeExact(self, label, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextFilter_PassFilter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextFilter_PassFilter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_PassFilter(ImGuiTextFilter *self, const char *text, const char *text_end)
     * }
     */
    public static FunctionDescriptor ImGuiTextFilter_PassFilter$descriptor() {
        return ImGuiTextFilter_PassFilter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_PassFilter(ImGuiTextFilter *self, const char *text, const char *text_end)
     * }
     */
    public static MethodHandle ImGuiTextFilter_PassFilter$handle() {
        return ImGuiTextFilter_PassFilter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_PassFilter(ImGuiTextFilter *self, const char *text, const char *text_end)
     * }
     */
    public static MemorySegment ImGuiTextFilter_PassFilter$address() {
        return ImGuiTextFilter_PassFilter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_PassFilter(ImGuiTextFilter *self, const char *text, const char *text_end)
     * }
     */
    public static boolean ImGuiTextFilter_PassFilter(MemorySegment self, MemorySegment text, MemorySegment text_end) {
        var mh$ = ImGuiTextFilter_PassFilter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextFilter_PassFilter", self, text, text_end);
            }
            return (boolean)mh$.invokeExact(self, text, text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextFilter_Build {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextFilter_Build");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_Build(ImGuiTextFilter *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextFilter_Build$descriptor() {
        return ImGuiTextFilter_Build.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_Build(ImGuiTextFilter *self)
     * }
     */
    public static MethodHandle ImGuiTextFilter_Build$handle() {
        return ImGuiTextFilter_Build.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_Build(ImGuiTextFilter *self)
     * }
     */
    public static MemorySegment ImGuiTextFilter_Build$address() {
        return ImGuiTextFilter_Build.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_Build(ImGuiTextFilter *self)
     * }
     */
    public static void ImGuiTextFilter_Build(MemorySegment self) {
        var mh$ = ImGuiTextFilter_Build.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextFilter_Build", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextFilter_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextFilter_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_Clear(ImGuiTextFilter *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextFilter_Clear$descriptor() {
        return ImGuiTextFilter_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_Clear(ImGuiTextFilter *self)
     * }
     */
    public static MethodHandle ImGuiTextFilter_Clear$handle() {
        return ImGuiTextFilter_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_Clear(ImGuiTextFilter *self)
     * }
     */
    public static MemorySegment ImGuiTextFilter_Clear$address() {
        return ImGuiTextFilter_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextFilter_Clear(ImGuiTextFilter *self)
     * }
     */
    public static void ImGuiTextFilter_Clear(MemorySegment self) {
        var mh$ = ImGuiTextFilter_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextFilter_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextFilter_IsActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextFilter_IsActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_IsActive(ImGuiTextFilter *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextFilter_IsActive$descriptor() {
        return ImGuiTextFilter_IsActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_IsActive(ImGuiTextFilter *self)
     * }
     */
    public static MethodHandle ImGuiTextFilter_IsActive$handle() {
        return ImGuiTextFilter_IsActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_IsActive(ImGuiTextFilter *self)
     * }
     */
    public static MemorySegment ImGuiTextFilter_IsActive$address() {
        return ImGuiTextFilter_IsActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiTextFilter_IsActive(ImGuiTextFilter *self)
     * }
     */
    public static boolean ImGuiTextFilter_IsActive(MemorySegment self) {
        var mh$ = ImGuiTextFilter_IsActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextFilter_IsActive", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextRange_ImGuiTextRange_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextRange_ImGuiTextRange_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTextRange *ImGuiTextRange_ImGuiTextRange_Nil()
     * }
     */
    public static FunctionDescriptor ImGuiTextRange_ImGuiTextRange_Nil$descriptor() {
        return ImGuiTextRange_ImGuiTextRange_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTextRange *ImGuiTextRange_ImGuiTextRange_Nil()
     * }
     */
    public static MethodHandle ImGuiTextRange_ImGuiTextRange_Nil$handle() {
        return ImGuiTextRange_ImGuiTextRange_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTextRange *ImGuiTextRange_ImGuiTextRange_Nil()
     * }
     */
    public static MemorySegment ImGuiTextRange_ImGuiTextRange_Nil$address() {
        return ImGuiTextRange_ImGuiTextRange_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTextRange *ImGuiTextRange_ImGuiTextRange_Nil()
     * }
     */
    public static MemorySegment ImGuiTextRange_ImGuiTextRange_Nil() {
        var mh$ = ImGuiTextRange_ImGuiTextRange_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextRange_ImGuiTextRange_Nil");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextRange_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextRange_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextRange_destroy(ImGuiTextRange *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextRange_destroy$descriptor() {
        return ImGuiTextRange_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextRange_destroy(ImGuiTextRange *self)
     * }
     */
    public static MethodHandle ImGuiTextRange_destroy$handle() {
        return ImGuiTextRange_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextRange_destroy(ImGuiTextRange *self)
     * }
     */
    public static MemorySegment ImGuiTextRange_destroy$address() {
        return ImGuiTextRange_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextRange_destroy(ImGuiTextRange *self)
     * }
     */
    public static void ImGuiTextRange_destroy(MemorySegment self) {
        var mh$ = ImGuiTextRange_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextRange_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextRange_ImGuiTextRange_Str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextRange_ImGuiTextRange_Str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTextRange *ImGuiTextRange_ImGuiTextRange_Str(const char *_b, const char *_e)
     * }
     */
    public static FunctionDescriptor ImGuiTextRange_ImGuiTextRange_Str$descriptor() {
        return ImGuiTextRange_ImGuiTextRange_Str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTextRange *ImGuiTextRange_ImGuiTextRange_Str(const char *_b, const char *_e)
     * }
     */
    public static MethodHandle ImGuiTextRange_ImGuiTextRange_Str$handle() {
        return ImGuiTextRange_ImGuiTextRange_Str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTextRange *ImGuiTextRange_ImGuiTextRange_Str(const char *_b, const char *_e)
     * }
     */
    public static MemorySegment ImGuiTextRange_ImGuiTextRange_Str$address() {
        return ImGuiTextRange_ImGuiTextRange_Str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTextRange *ImGuiTextRange_ImGuiTextRange_Str(const char *_b, const char *_e)
     * }
     */
    public static MemorySegment ImGuiTextRange_ImGuiTextRange_Str(MemorySegment _b, MemorySegment _e) {
        var mh$ = ImGuiTextRange_ImGuiTextRange_Str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextRange_ImGuiTextRange_Str", _b, _e);
            }
            return (MemorySegment)mh$.invokeExact(_b, _e);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextRange_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextRange_empty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiTextRange_empty(ImGuiTextRange *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextRange_empty$descriptor() {
        return ImGuiTextRange_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiTextRange_empty(ImGuiTextRange *self)
     * }
     */
    public static MethodHandle ImGuiTextRange_empty$handle() {
        return ImGuiTextRange_empty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiTextRange_empty(ImGuiTextRange *self)
     * }
     */
    public static MemorySegment ImGuiTextRange_empty$address() {
        return ImGuiTextRange_empty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiTextRange_empty(ImGuiTextRange *self)
     * }
     */
    public static boolean ImGuiTextRange_empty(MemorySegment self) {
        var mh$ = ImGuiTextRange_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextRange_empty", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextRange_split {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_CHAR,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextRange_split");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextRange_split(ImGuiTextRange *self, char separator, ImVector_ImGuiTextRange *out)
     * }
     */
    public static FunctionDescriptor ImGuiTextRange_split$descriptor() {
        return ImGuiTextRange_split.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextRange_split(ImGuiTextRange *self, char separator, ImVector_ImGuiTextRange *out)
     * }
     */
    public static MethodHandle ImGuiTextRange_split$handle() {
        return ImGuiTextRange_split.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextRange_split(ImGuiTextRange *self, char separator, ImVector_ImGuiTextRange *out)
     * }
     */
    public static MemorySegment ImGuiTextRange_split$address() {
        return ImGuiTextRange_split.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextRange_split(ImGuiTextRange *self, char separator, ImVector_ImGuiTextRange *out)
     * }
     */
    public static void ImGuiTextRange_split(MemorySegment self, byte separator, MemorySegment out) {
        var mh$ = ImGuiTextRange_split.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextRange_split", self, separator, out);
            }
            mh$.invokeExact(self, separator, out);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_ImGuiTextBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_ImGuiTextBuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTextBuffer *ImGuiTextBuffer_ImGuiTextBuffer()
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_ImGuiTextBuffer$descriptor() {
        return ImGuiTextBuffer_ImGuiTextBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTextBuffer *ImGuiTextBuffer_ImGuiTextBuffer()
     * }
     */
    public static MethodHandle ImGuiTextBuffer_ImGuiTextBuffer$handle() {
        return ImGuiTextBuffer_ImGuiTextBuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTextBuffer *ImGuiTextBuffer_ImGuiTextBuffer()
     * }
     */
    public static MemorySegment ImGuiTextBuffer_ImGuiTextBuffer$address() {
        return ImGuiTextBuffer_ImGuiTextBuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTextBuffer *ImGuiTextBuffer_ImGuiTextBuffer()
     * }
     */
    public static MemorySegment ImGuiTextBuffer_ImGuiTextBuffer() {
        var mh$ = ImGuiTextBuffer_ImGuiTextBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_ImGuiTextBuffer");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_destroy(ImGuiTextBuffer *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_destroy$descriptor() {
        return ImGuiTextBuffer_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_destroy(ImGuiTextBuffer *self)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_destroy$handle() {
        return ImGuiTextBuffer_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_destroy(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_destroy$address() {
        return ImGuiTextBuffer_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_destroy(ImGuiTextBuffer *self)
     * }
     */
    public static void ImGuiTextBuffer_destroy(MemorySegment self) {
        var mh$ = ImGuiTextBuffer_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_begin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_begin(ImGuiTextBuffer *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_begin$descriptor() {
        return ImGuiTextBuffer_begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_begin(ImGuiTextBuffer *self)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_begin$handle() {
        return ImGuiTextBuffer_begin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_begin(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_begin$address() {
        return ImGuiTextBuffer_begin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_begin(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_begin(MemorySegment self) {
        var mh$ = ImGuiTextBuffer_begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_begin", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_end");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_end(ImGuiTextBuffer *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_end$descriptor() {
        return ImGuiTextBuffer_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_end(ImGuiTextBuffer *self)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_end$handle() {
        return ImGuiTextBuffer_end.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_end(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_end$address() {
        return ImGuiTextBuffer_end.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_end(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_end(MemorySegment self) {
        var mh$ = ImGuiTextBuffer_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_end", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImGuiTextBuffer_size(ImGuiTextBuffer *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_size$descriptor() {
        return ImGuiTextBuffer_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImGuiTextBuffer_size(ImGuiTextBuffer *self)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_size$handle() {
        return ImGuiTextBuffer_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImGuiTextBuffer_size(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_size$address() {
        return ImGuiTextBuffer_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImGuiTextBuffer_size(ImGuiTextBuffer *self)
     * }
     */
    public static int ImGuiTextBuffer_size(MemorySegment self) {
        var mh$ = ImGuiTextBuffer_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_size", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_empty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiTextBuffer_empty(ImGuiTextBuffer *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_empty$descriptor() {
        return ImGuiTextBuffer_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiTextBuffer_empty(ImGuiTextBuffer *self)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_empty$handle() {
        return ImGuiTextBuffer_empty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiTextBuffer_empty(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_empty$address() {
        return ImGuiTextBuffer_empty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiTextBuffer_empty(ImGuiTextBuffer *self)
     * }
     */
    public static boolean ImGuiTextBuffer_empty(MemorySegment self) {
        var mh$ = ImGuiTextBuffer_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_empty", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_clear(ImGuiTextBuffer *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_clear$descriptor() {
        return ImGuiTextBuffer_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_clear(ImGuiTextBuffer *self)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_clear$handle() {
        return ImGuiTextBuffer_clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_clear(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_clear$address() {
        return ImGuiTextBuffer_clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_clear(ImGuiTextBuffer *self)
     * }
     */
    public static void ImGuiTextBuffer_clear(MemorySegment self) {
        var mh$ = ImGuiTextBuffer_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_reserve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_reserve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_reserve(ImGuiTextBuffer *self, int capacity)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_reserve$descriptor() {
        return ImGuiTextBuffer_reserve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_reserve(ImGuiTextBuffer *self, int capacity)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_reserve$handle() {
        return ImGuiTextBuffer_reserve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_reserve(ImGuiTextBuffer *self, int capacity)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_reserve$address() {
        return ImGuiTextBuffer_reserve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_reserve(ImGuiTextBuffer *self, int capacity)
     * }
     */
    public static void ImGuiTextBuffer_reserve(MemorySegment self, int capacity) {
        var mh$ = ImGuiTextBuffer_reserve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_reserve", self, capacity);
            }
            mh$.invokeExact(self, capacity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_c_str {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_c_str");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_c_str(ImGuiTextBuffer *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_c_str$descriptor() {
        return ImGuiTextBuffer_c_str.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_c_str(ImGuiTextBuffer *self)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_c_str$handle() {
        return ImGuiTextBuffer_c_str.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_c_str(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_c_str$address() {
        return ImGuiTextBuffer_c_str.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ImGuiTextBuffer_c_str(ImGuiTextBuffer *self)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_c_str(MemorySegment self) {
        var mh$ = ImGuiTextBuffer_c_str.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_c_str", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_append");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_append(ImGuiTextBuffer *self, const char *str, const char *str_end)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_append$descriptor() {
        return ImGuiTextBuffer_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_append(ImGuiTextBuffer *self, const char *str, const char *str_end)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_append$handle() {
        return ImGuiTextBuffer_append.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_append(ImGuiTextBuffer *self, const char *str, const char *str_end)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_append$address() {
        return ImGuiTextBuffer_append.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_append(ImGuiTextBuffer *self, const char *str, const char *str_end)
     * }
     */
    public static void ImGuiTextBuffer_append(MemorySegment self, MemorySegment str, MemorySegment str_end) {
        var mh$ = ImGuiTextBuffer_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_append", self, str, str_end);
            }
            mh$.invokeExact(self, str, str_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextBuffer_appendfv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextBuffer_appendfv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_appendfv(ImGuiTextBuffer *self, const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor ImGuiTextBuffer_appendfv$descriptor() {
        return ImGuiTextBuffer_appendfv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_appendfv(ImGuiTextBuffer *self, const char *fmt, va_list args)
     * }
     */
    public static MethodHandle ImGuiTextBuffer_appendfv$handle() {
        return ImGuiTextBuffer_appendfv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_appendfv(ImGuiTextBuffer *self, const char *fmt, va_list args)
     * }
     */
    public static MemorySegment ImGuiTextBuffer_appendfv$address() {
        return ImGuiTextBuffer_appendfv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextBuffer_appendfv(ImGuiTextBuffer *self, const char *fmt, va_list args)
     * }
     */
    public static void ImGuiTextBuffer_appendfv(MemorySegment self, MemorySegment fmt, MemorySegment args) {
        var mh$ = ImGuiTextBuffer_appendfv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextBuffer_appendfv", self, fmt, args);
            }
            mh$.invokeExact(self, fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStoragePair_ImGuiStoragePair_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStoragePair_ImGuiStoragePair_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Int(ImGuiID _key, int _val)
     * }
     */
    public static FunctionDescriptor ImGuiStoragePair_ImGuiStoragePair_Int$descriptor() {
        return ImGuiStoragePair_ImGuiStoragePair_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Int(ImGuiID _key, int _val)
     * }
     */
    public static MethodHandle ImGuiStoragePair_ImGuiStoragePair_Int$handle() {
        return ImGuiStoragePair_ImGuiStoragePair_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Int(ImGuiID _key, int _val)
     * }
     */
    public static MemorySegment ImGuiStoragePair_ImGuiStoragePair_Int$address() {
        return ImGuiStoragePair_ImGuiStoragePair_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Int(ImGuiID _key, int _val)
     * }
     */
    public static MemorySegment ImGuiStoragePair_ImGuiStoragePair_Int(int _key, int _val) {
        var mh$ = ImGuiStoragePair_ImGuiStoragePair_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStoragePair_ImGuiStoragePair_Int", _key, _val);
            }
            return (MemorySegment)mh$.invokeExact(_key, _val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStoragePair_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStoragePair_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStoragePair_destroy(ImGuiStoragePair *self)
     * }
     */
    public static FunctionDescriptor ImGuiStoragePair_destroy$descriptor() {
        return ImGuiStoragePair_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStoragePair_destroy(ImGuiStoragePair *self)
     * }
     */
    public static MethodHandle ImGuiStoragePair_destroy$handle() {
        return ImGuiStoragePair_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStoragePair_destroy(ImGuiStoragePair *self)
     * }
     */
    public static MemorySegment ImGuiStoragePair_destroy$address() {
        return ImGuiStoragePair_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStoragePair_destroy(ImGuiStoragePair *self)
     * }
     */
    public static void ImGuiStoragePair_destroy(MemorySegment self) {
        var mh$ = ImGuiStoragePair_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStoragePair_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStoragePair_ImGuiStoragePair_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStoragePair_ImGuiStoragePair_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Float(ImGuiID _key, float _val)
     * }
     */
    public static FunctionDescriptor ImGuiStoragePair_ImGuiStoragePair_Float$descriptor() {
        return ImGuiStoragePair_ImGuiStoragePair_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Float(ImGuiID _key, float _val)
     * }
     */
    public static MethodHandle ImGuiStoragePair_ImGuiStoragePair_Float$handle() {
        return ImGuiStoragePair_ImGuiStoragePair_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Float(ImGuiID _key, float _val)
     * }
     */
    public static MemorySegment ImGuiStoragePair_ImGuiStoragePair_Float$address() {
        return ImGuiStoragePair_ImGuiStoragePair_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Float(ImGuiID _key, float _val)
     * }
     */
    public static MemorySegment ImGuiStoragePair_ImGuiStoragePair_Float(int _key, float _val) {
        var mh$ = ImGuiStoragePair_ImGuiStoragePair_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStoragePair_ImGuiStoragePair_Float", _key, _val);
            }
            return (MemorySegment)mh$.invokeExact(_key, _val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStoragePair_ImGuiStoragePair_Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStoragePair_ImGuiStoragePair_Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Ptr(ImGuiID _key, void *_val)
     * }
     */
    public static FunctionDescriptor ImGuiStoragePair_ImGuiStoragePair_Ptr$descriptor() {
        return ImGuiStoragePair_ImGuiStoragePair_Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Ptr(ImGuiID _key, void *_val)
     * }
     */
    public static MethodHandle ImGuiStoragePair_ImGuiStoragePair_Ptr$handle() {
        return ImGuiStoragePair_ImGuiStoragePair_Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Ptr(ImGuiID _key, void *_val)
     * }
     */
    public static MemorySegment ImGuiStoragePair_ImGuiStoragePair_Ptr$address() {
        return ImGuiStoragePair_ImGuiStoragePair_Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStoragePair *ImGuiStoragePair_ImGuiStoragePair_Ptr(ImGuiID _key, void *_val)
     * }
     */
    public static MemorySegment ImGuiStoragePair_ImGuiStoragePair_Ptr(int _key, MemorySegment _val) {
        var mh$ = ImGuiStoragePair_ImGuiStoragePair_Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStoragePair_ImGuiStoragePair_Ptr", _key, _val);
            }
            return (MemorySegment)mh$.invokeExact(_key, _val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_Clear(ImGuiStorage *self)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_Clear$descriptor() {
        return ImGuiStorage_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_Clear(ImGuiStorage *self)
     * }
     */
    public static MethodHandle ImGuiStorage_Clear$handle() {
        return ImGuiStorage_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_Clear(ImGuiStorage *self)
     * }
     */
    public static MemorySegment ImGuiStorage_Clear$address() {
        return ImGuiStorage_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStorage_Clear(ImGuiStorage *self)
     * }
     */
    public static void ImGuiStorage_Clear(MemorySegment self) {
        var mh$ = ImGuiStorage_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_GetInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_GetInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImGuiStorage_GetInt(ImGuiStorage *self, ImGuiID key, int default_val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_GetInt$descriptor() {
        return ImGuiStorage_GetInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImGuiStorage_GetInt(ImGuiStorage *self, ImGuiID key, int default_val)
     * }
     */
    public static MethodHandle ImGuiStorage_GetInt$handle() {
        return ImGuiStorage_GetInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImGuiStorage_GetInt(ImGuiStorage *self, ImGuiID key, int default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetInt$address() {
        return ImGuiStorage_GetInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImGuiStorage_GetInt(ImGuiStorage *self, ImGuiID key, int default_val)
     * }
     */
    public static int ImGuiStorage_GetInt(MemorySegment self, int key, int default_val) {
        var mh$ = ImGuiStorage_GetInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_GetInt", self, key, default_val);
            }
            return (int)mh$.invokeExact(self, key, default_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_SetInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_SetInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetInt(ImGuiStorage *self, ImGuiID key, int val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_SetInt$descriptor() {
        return ImGuiStorage_SetInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetInt(ImGuiStorage *self, ImGuiID key, int val)
     * }
     */
    public static MethodHandle ImGuiStorage_SetInt$handle() {
        return ImGuiStorage_SetInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetInt(ImGuiStorage *self, ImGuiID key, int val)
     * }
     */
    public static MemorySegment ImGuiStorage_SetInt$address() {
        return ImGuiStorage_SetInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetInt(ImGuiStorage *self, ImGuiID key, int val)
     * }
     */
    public static void ImGuiStorage_SetInt(MemorySegment self, int key, int val) {
        var mh$ = ImGuiStorage_SetInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_SetInt", self, key, val);
            }
            mh$.invokeExact(self, key, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_GetBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_GetBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiStorage_GetBool(ImGuiStorage *self, ImGuiID key, bool default_val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_GetBool$descriptor() {
        return ImGuiStorage_GetBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiStorage_GetBool(ImGuiStorage *self, ImGuiID key, bool default_val)
     * }
     */
    public static MethodHandle ImGuiStorage_GetBool$handle() {
        return ImGuiStorage_GetBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiStorage_GetBool(ImGuiStorage *self, ImGuiID key, bool default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetBool$address() {
        return ImGuiStorage_GetBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiStorage_GetBool(ImGuiStorage *self, ImGuiID key, bool default_val)
     * }
     */
    public static boolean ImGuiStorage_GetBool(MemorySegment self, int key, boolean default_val) {
        var mh$ = ImGuiStorage_GetBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_GetBool", self, key, default_val);
            }
            return (boolean)mh$.invokeExact(self, key, default_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_SetBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_SetBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetBool(ImGuiStorage *self, ImGuiID key, bool val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_SetBool$descriptor() {
        return ImGuiStorage_SetBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetBool(ImGuiStorage *self, ImGuiID key, bool val)
     * }
     */
    public static MethodHandle ImGuiStorage_SetBool$handle() {
        return ImGuiStorage_SetBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetBool(ImGuiStorage *self, ImGuiID key, bool val)
     * }
     */
    public static MemorySegment ImGuiStorage_SetBool$address() {
        return ImGuiStorage_SetBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetBool(ImGuiStorage *self, ImGuiID key, bool val)
     * }
     */
    public static void ImGuiStorage_SetBool(MemorySegment self, int key, boolean val) {
        var mh$ = ImGuiStorage_SetBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_SetBool", self, key, val);
            }
            mh$.invokeExact(self, key, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_GetFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_GetFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ImGuiStorage_GetFloat(ImGuiStorage *self, ImGuiID key, float default_val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_GetFloat$descriptor() {
        return ImGuiStorage_GetFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ImGuiStorage_GetFloat(ImGuiStorage *self, ImGuiID key, float default_val)
     * }
     */
    public static MethodHandle ImGuiStorage_GetFloat$handle() {
        return ImGuiStorage_GetFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ImGuiStorage_GetFloat(ImGuiStorage *self, ImGuiID key, float default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetFloat$address() {
        return ImGuiStorage_GetFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ImGuiStorage_GetFloat(ImGuiStorage *self, ImGuiID key, float default_val)
     * }
     */
    public static float ImGuiStorage_GetFloat(MemorySegment self, int key, float default_val) {
        var mh$ = ImGuiStorage_GetFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_GetFloat", self, key, default_val);
            }
            return (float)mh$.invokeExact(self, key, default_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_SetFloat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_SetFloat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetFloat(ImGuiStorage *self, ImGuiID key, float val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_SetFloat$descriptor() {
        return ImGuiStorage_SetFloat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetFloat(ImGuiStorage *self, ImGuiID key, float val)
     * }
     */
    public static MethodHandle ImGuiStorage_SetFloat$handle() {
        return ImGuiStorage_SetFloat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetFloat(ImGuiStorage *self, ImGuiID key, float val)
     * }
     */
    public static MemorySegment ImGuiStorage_SetFloat$address() {
        return ImGuiStorage_SetFloat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetFloat(ImGuiStorage *self, ImGuiID key, float val)
     * }
     */
    public static void ImGuiStorage_SetFloat(MemorySegment self, int key, float val) {
        var mh$ = ImGuiStorage_SetFloat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_SetFloat", self, key, val);
            }
            mh$.invokeExact(self, key, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_GetVoidPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_GetVoidPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *ImGuiStorage_GetVoidPtr(ImGuiStorage *self, ImGuiID key)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_GetVoidPtr$descriptor() {
        return ImGuiStorage_GetVoidPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *ImGuiStorage_GetVoidPtr(ImGuiStorage *self, ImGuiID key)
     * }
     */
    public static MethodHandle ImGuiStorage_GetVoidPtr$handle() {
        return ImGuiStorage_GetVoidPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *ImGuiStorage_GetVoidPtr(ImGuiStorage *self, ImGuiID key)
     * }
     */
    public static MemorySegment ImGuiStorage_GetVoidPtr$address() {
        return ImGuiStorage_GetVoidPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *ImGuiStorage_GetVoidPtr(ImGuiStorage *self, ImGuiID key)
     * }
     */
    public static MemorySegment ImGuiStorage_GetVoidPtr(MemorySegment self, int key) {
        var mh$ = ImGuiStorage_GetVoidPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_GetVoidPtr", self, key);
            }
            return (MemorySegment)mh$.invokeExact(self, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_SetVoidPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_SetVoidPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetVoidPtr(ImGuiStorage *self, ImGuiID key, void *val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_SetVoidPtr$descriptor() {
        return ImGuiStorage_SetVoidPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetVoidPtr(ImGuiStorage *self, ImGuiID key, void *val)
     * }
     */
    public static MethodHandle ImGuiStorage_SetVoidPtr$handle() {
        return ImGuiStorage_SetVoidPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetVoidPtr(ImGuiStorage *self, ImGuiID key, void *val)
     * }
     */
    public static MemorySegment ImGuiStorage_SetVoidPtr$address() {
        return ImGuiStorage_SetVoidPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetVoidPtr(ImGuiStorage *self, ImGuiID key, void *val)
     * }
     */
    public static void ImGuiStorage_SetVoidPtr(MemorySegment self, int key, MemorySegment val) {
        var mh$ = ImGuiStorage_SetVoidPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_SetVoidPtr", self, key, val);
            }
            mh$.invokeExact(self, key, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_GetIntRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_GetIntRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *ImGuiStorage_GetIntRef(ImGuiStorage *self, ImGuiID key, int default_val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_GetIntRef$descriptor() {
        return ImGuiStorage_GetIntRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *ImGuiStorage_GetIntRef(ImGuiStorage *self, ImGuiID key, int default_val)
     * }
     */
    public static MethodHandle ImGuiStorage_GetIntRef$handle() {
        return ImGuiStorage_GetIntRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int *ImGuiStorage_GetIntRef(ImGuiStorage *self, ImGuiID key, int default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetIntRef$address() {
        return ImGuiStorage_GetIntRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int *ImGuiStorage_GetIntRef(ImGuiStorage *self, ImGuiID key, int default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetIntRef(MemorySegment self, int key, int default_val) {
        var mh$ = ImGuiStorage_GetIntRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_GetIntRef", self, key, default_val);
            }
            return (MemorySegment)mh$.invokeExact(self, key, default_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_GetBoolRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_GetBoolRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool *ImGuiStorage_GetBoolRef(ImGuiStorage *self, ImGuiID key, bool default_val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_GetBoolRef$descriptor() {
        return ImGuiStorage_GetBoolRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool *ImGuiStorage_GetBoolRef(ImGuiStorage *self, ImGuiID key, bool default_val)
     * }
     */
    public static MethodHandle ImGuiStorage_GetBoolRef$handle() {
        return ImGuiStorage_GetBoolRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool *ImGuiStorage_GetBoolRef(ImGuiStorage *self, ImGuiID key, bool default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetBoolRef$address() {
        return ImGuiStorage_GetBoolRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool *ImGuiStorage_GetBoolRef(ImGuiStorage *self, ImGuiID key, bool default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetBoolRef(MemorySegment self, int key, boolean default_val) {
        var mh$ = ImGuiStorage_GetBoolRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_GetBoolRef", self, key, default_val);
            }
            return (MemorySegment)mh$.invokeExact(self, key, default_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_GetFloatRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_GetFloatRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float *ImGuiStorage_GetFloatRef(ImGuiStorage *self, ImGuiID key, float default_val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_GetFloatRef$descriptor() {
        return ImGuiStorage_GetFloatRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float *ImGuiStorage_GetFloatRef(ImGuiStorage *self, ImGuiID key, float default_val)
     * }
     */
    public static MethodHandle ImGuiStorage_GetFloatRef$handle() {
        return ImGuiStorage_GetFloatRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float *ImGuiStorage_GetFloatRef(ImGuiStorage *self, ImGuiID key, float default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetFloatRef$address() {
        return ImGuiStorage_GetFloatRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float *ImGuiStorage_GetFloatRef(ImGuiStorage *self, ImGuiID key, float default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetFloatRef(MemorySegment self, int key, float default_val) {
        var mh$ = ImGuiStorage_GetFloatRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_GetFloatRef", self, key, default_val);
            }
            return (MemorySegment)mh$.invokeExact(self, key, default_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_GetVoidPtrRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_GetVoidPtrRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void **ImGuiStorage_GetVoidPtrRef(ImGuiStorage *self, ImGuiID key, void *default_val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_GetVoidPtrRef$descriptor() {
        return ImGuiStorage_GetVoidPtrRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void **ImGuiStorage_GetVoidPtrRef(ImGuiStorage *self, ImGuiID key, void *default_val)
     * }
     */
    public static MethodHandle ImGuiStorage_GetVoidPtrRef$handle() {
        return ImGuiStorage_GetVoidPtrRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void **ImGuiStorage_GetVoidPtrRef(ImGuiStorage *self, ImGuiID key, void *default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetVoidPtrRef$address() {
        return ImGuiStorage_GetVoidPtrRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void **ImGuiStorage_GetVoidPtrRef(ImGuiStorage *self, ImGuiID key, void *default_val)
     * }
     */
    public static MemorySegment ImGuiStorage_GetVoidPtrRef(MemorySegment self, int key, MemorySegment default_val) {
        var mh$ = ImGuiStorage_GetVoidPtrRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_GetVoidPtrRef", self, key, default_val);
            }
            return (MemorySegment)mh$.invokeExact(self, key, default_val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_BuildSortByKey {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_BuildSortByKey");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_BuildSortByKey(ImGuiStorage *self)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_BuildSortByKey$descriptor() {
        return ImGuiStorage_BuildSortByKey.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_BuildSortByKey(ImGuiStorage *self)
     * }
     */
    public static MethodHandle ImGuiStorage_BuildSortByKey$handle() {
        return ImGuiStorage_BuildSortByKey.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_BuildSortByKey(ImGuiStorage *self)
     * }
     */
    public static MemorySegment ImGuiStorage_BuildSortByKey$address() {
        return ImGuiStorage_BuildSortByKey.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStorage_BuildSortByKey(ImGuiStorage *self)
     * }
     */
    public static void ImGuiStorage_BuildSortByKey(MemorySegment self) {
        var mh$ = ImGuiStorage_BuildSortByKey.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_BuildSortByKey", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStorage_SetAllInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStorage_SetAllInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetAllInt(ImGuiStorage *self, int val)
     * }
     */
    public static FunctionDescriptor ImGuiStorage_SetAllInt$descriptor() {
        return ImGuiStorage_SetAllInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetAllInt(ImGuiStorage *self, int val)
     * }
     */
    public static MethodHandle ImGuiStorage_SetAllInt$handle() {
        return ImGuiStorage_SetAllInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetAllInt(ImGuiStorage *self, int val)
     * }
     */
    public static MemorySegment ImGuiStorage_SetAllInt$address() {
        return ImGuiStorage_SetAllInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStorage_SetAllInt(ImGuiStorage *self, int val)
     * }
     */
    public static void ImGuiStorage_SetAllInt(MemorySegment self, int val) {
        var mh$ = ImGuiStorage_SetAllInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStorage_SetAllInt", self, val);
            }
            mh$.invokeExact(self, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipper_ImGuiListClipper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipper_ImGuiListClipper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiListClipper *ImGuiListClipper_ImGuiListClipper()
     * }
     */
    public static FunctionDescriptor ImGuiListClipper_ImGuiListClipper$descriptor() {
        return ImGuiListClipper_ImGuiListClipper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiListClipper *ImGuiListClipper_ImGuiListClipper()
     * }
     */
    public static MethodHandle ImGuiListClipper_ImGuiListClipper$handle() {
        return ImGuiListClipper_ImGuiListClipper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiListClipper *ImGuiListClipper_ImGuiListClipper()
     * }
     */
    public static MemorySegment ImGuiListClipper_ImGuiListClipper$address() {
        return ImGuiListClipper_ImGuiListClipper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiListClipper *ImGuiListClipper_ImGuiListClipper()
     * }
     */
    public static MemorySegment ImGuiListClipper_ImGuiListClipper() {
        var mh$ = ImGuiListClipper_ImGuiListClipper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipper_ImGuiListClipper");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipper_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipper_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_destroy(ImGuiListClipper *self)
     * }
     */
    public static FunctionDescriptor ImGuiListClipper_destroy$descriptor() {
        return ImGuiListClipper_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_destroy(ImGuiListClipper *self)
     * }
     */
    public static MethodHandle ImGuiListClipper_destroy$handle() {
        return ImGuiListClipper_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_destroy(ImGuiListClipper *self)
     * }
     */
    public static MemorySegment ImGuiListClipper_destroy$address() {
        return ImGuiListClipper_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiListClipper_destroy(ImGuiListClipper *self)
     * }
     */
    public static void ImGuiListClipper_destroy(MemorySegment self) {
        var mh$ = ImGuiListClipper_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipper_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipper_Begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipper_Begin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_Begin(ImGuiListClipper *self, int items_count, float items_height)
     * }
     */
    public static FunctionDescriptor ImGuiListClipper_Begin$descriptor() {
        return ImGuiListClipper_Begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_Begin(ImGuiListClipper *self, int items_count, float items_height)
     * }
     */
    public static MethodHandle ImGuiListClipper_Begin$handle() {
        return ImGuiListClipper_Begin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_Begin(ImGuiListClipper *self, int items_count, float items_height)
     * }
     */
    public static MemorySegment ImGuiListClipper_Begin$address() {
        return ImGuiListClipper_Begin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiListClipper_Begin(ImGuiListClipper *self, int items_count, float items_height)
     * }
     */
    public static void ImGuiListClipper_Begin(MemorySegment self, int items_count, float items_height) {
        var mh$ = ImGuiListClipper_Begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipper_Begin", self, items_count, items_height);
            }
            mh$.invokeExact(self, items_count, items_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipper_End {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipper_End");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_End(ImGuiListClipper *self)
     * }
     */
    public static FunctionDescriptor ImGuiListClipper_End$descriptor() {
        return ImGuiListClipper_End.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_End(ImGuiListClipper *self)
     * }
     */
    public static MethodHandle ImGuiListClipper_End$handle() {
        return ImGuiListClipper_End.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_End(ImGuiListClipper *self)
     * }
     */
    public static MemorySegment ImGuiListClipper_End$address() {
        return ImGuiListClipper_End.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiListClipper_End(ImGuiListClipper *self)
     * }
     */
    public static void ImGuiListClipper_End(MemorySegment self) {
        var mh$ = ImGuiListClipper_End.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipper_End", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipper_Step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipper_Step");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiListClipper_Step(ImGuiListClipper *self)
     * }
     */
    public static FunctionDescriptor ImGuiListClipper_Step$descriptor() {
        return ImGuiListClipper_Step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiListClipper_Step(ImGuiListClipper *self)
     * }
     */
    public static MethodHandle ImGuiListClipper_Step$handle() {
        return ImGuiListClipper_Step.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiListClipper_Step(ImGuiListClipper *self)
     * }
     */
    public static MemorySegment ImGuiListClipper_Step$address() {
        return ImGuiListClipper_Step.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiListClipper_Step(ImGuiListClipper *self)
     * }
     */
    public static boolean ImGuiListClipper_Step(MemorySegment self) {
        var mh$ = ImGuiListClipper_Step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipper_Step", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipper_IncludeItemByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipper_IncludeItemByIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_IncludeItemByIndex(ImGuiListClipper *self, int item_index)
     * }
     */
    public static FunctionDescriptor ImGuiListClipper_IncludeItemByIndex$descriptor() {
        return ImGuiListClipper_IncludeItemByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_IncludeItemByIndex(ImGuiListClipper *self, int item_index)
     * }
     */
    public static MethodHandle ImGuiListClipper_IncludeItemByIndex$handle() {
        return ImGuiListClipper_IncludeItemByIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_IncludeItemByIndex(ImGuiListClipper *self, int item_index)
     * }
     */
    public static MemorySegment ImGuiListClipper_IncludeItemByIndex$address() {
        return ImGuiListClipper_IncludeItemByIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiListClipper_IncludeItemByIndex(ImGuiListClipper *self, int item_index)
     * }
     */
    public static void ImGuiListClipper_IncludeItemByIndex(MemorySegment self, int item_index) {
        var mh$ = ImGuiListClipper_IncludeItemByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipper_IncludeItemByIndex", self, item_index);
            }
            mh$.invokeExact(self, item_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipper_IncludeItemsByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipper_IncludeItemsByIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_IncludeItemsByIndex(ImGuiListClipper *self, int item_begin, int item_end)
     * }
     */
    public static FunctionDescriptor ImGuiListClipper_IncludeItemsByIndex$descriptor() {
        return ImGuiListClipper_IncludeItemsByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_IncludeItemsByIndex(ImGuiListClipper *self, int item_begin, int item_end)
     * }
     */
    public static MethodHandle ImGuiListClipper_IncludeItemsByIndex$handle() {
        return ImGuiListClipper_IncludeItemsByIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_IncludeItemsByIndex(ImGuiListClipper *self, int item_begin, int item_end)
     * }
     */
    public static MemorySegment ImGuiListClipper_IncludeItemsByIndex$address() {
        return ImGuiListClipper_IncludeItemsByIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiListClipper_IncludeItemsByIndex(ImGuiListClipper *self, int item_begin, int item_end)
     * }
     */
    public static void ImGuiListClipper_IncludeItemsByIndex(MemorySegment self, int item_begin, int item_end) {
        var mh$ = ImGuiListClipper_IncludeItemsByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipper_IncludeItemsByIndex", self, item_begin, item_end);
            }
            mh$.invokeExact(self, item_begin, item_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipper_SeekCursorForItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipper_SeekCursorForItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper *self, int item_index)
     * }
     */
    public static FunctionDescriptor ImGuiListClipper_SeekCursorForItem$descriptor() {
        return ImGuiListClipper_SeekCursorForItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper *self, int item_index)
     * }
     */
    public static MethodHandle ImGuiListClipper_SeekCursorForItem$handle() {
        return ImGuiListClipper_SeekCursorForItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper *self, int item_index)
     * }
     */
    public static MemorySegment ImGuiListClipper_SeekCursorForItem$address() {
        return ImGuiListClipper_SeekCursorForItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper *self, int item_index)
     * }
     */
    public static void ImGuiListClipper_SeekCursorForItem(MemorySegment self, int item_index) {
        var mh$ = ImGuiListClipper_SeekCursorForItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipper_SeekCursorForItem", self, item_index);
            }
            mh$.invokeExact(self, item_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImColor_ImColor_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImColor_ImColor_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Nil()
     * }
     */
    public static FunctionDescriptor ImColor_ImColor_Nil$descriptor() {
        return ImColor_ImColor_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Nil()
     * }
     */
    public static MethodHandle ImColor_ImColor_Nil$handle() {
        return ImColor_ImColor_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Nil()
     * }
     */
    public static MemorySegment ImColor_ImColor_Nil$address() {
        return ImColor_ImColor_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Nil()
     * }
     */
    public static MemorySegment ImColor_ImColor_Nil() {
        var mh$ = ImColor_ImColor_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImColor_ImColor_Nil");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImColor_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImColor_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImColor_destroy(ImColor *self)
     * }
     */
    public static FunctionDescriptor ImColor_destroy$descriptor() {
        return ImColor_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImColor_destroy(ImColor *self)
     * }
     */
    public static MethodHandle ImColor_destroy$handle() {
        return ImColor_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImColor_destroy(ImColor *self)
     * }
     */
    public static MemorySegment ImColor_destroy$address() {
        return ImColor_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImColor_destroy(ImColor *self)
     * }
     */
    public static void ImColor_destroy(MemorySegment self) {
        var mh$ = ImColor_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImColor_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImColor_ImColor_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImColor_ImColor_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Float(float r, float g, float b, float a)
     * }
     */
    public static FunctionDescriptor ImColor_ImColor_Float$descriptor() {
        return ImColor_ImColor_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Float(float r, float g, float b, float a)
     * }
     */
    public static MethodHandle ImColor_ImColor_Float$handle() {
        return ImColor_ImColor_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Float(float r, float g, float b, float a)
     * }
     */
    public static MemorySegment ImColor_ImColor_Float$address() {
        return ImColor_ImColor_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Float(float r, float g, float b, float a)
     * }
     */
    public static MemorySegment ImColor_ImColor_Float(float r, float g, float b, float a) {
        var mh$ = ImColor_ImColor_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImColor_ImColor_Float", r, g, b, a);
            }
            return (MemorySegment)mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImColor_ImColor_Vec4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            ImVec4.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImColor_ImColor_Vec4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Vec4(const ImVec4 col)
     * }
     */
    public static FunctionDescriptor ImColor_ImColor_Vec4$descriptor() {
        return ImColor_ImColor_Vec4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Vec4(const ImVec4 col)
     * }
     */
    public static MethodHandle ImColor_ImColor_Vec4$handle() {
        return ImColor_ImColor_Vec4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Vec4(const ImVec4 col)
     * }
     */
    public static MemorySegment ImColor_ImColor_Vec4$address() {
        return ImColor_ImColor_Vec4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Vec4(const ImVec4 col)
     * }
     */
    public static MemorySegment ImColor_ImColor_Vec4(MemorySegment col) {
        var mh$ = ImColor_ImColor_Vec4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImColor_ImColor_Vec4", col);
            }
            return (MemorySegment)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImColor_ImColor_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImColor_ImColor_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Int(int r, int g, int b, int a)
     * }
     */
    public static FunctionDescriptor ImColor_ImColor_Int$descriptor() {
        return ImColor_ImColor_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Int(int r, int g, int b, int a)
     * }
     */
    public static MethodHandle ImColor_ImColor_Int$handle() {
        return ImColor_ImColor_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Int(int r, int g, int b, int a)
     * }
     */
    public static MemorySegment ImColor_ImColor_Int$address() {
        return ImColor_ImColor_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_Int(int r, int g, int b, int a)
     * }
     */
    public static MemorySegment ImColor_ImColor_Int(int r, int g, int b, int a) {
        var mh$ = ImColor_ImColor_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImColor_ImColor_Int", r, g, b, a);
            }
            return (MemorySegment)mh$.invokeExact(r, g, b, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImColor_ImColor_U32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImColor_ImColor_U32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_U32(ImU32 rgba)
     * }
     */
    public static FunctionDescriptor ImColor_ImColor_U32$descriptor() {
        return ImColor_ImColor_U32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_U32(ImU32 rgba)
     * }
     */
    public static MethodHandle ImColor_ImColor_U32$handle() {
        return ImColor_ImColor_U32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_U32(ImU32 rgba)
     * }
     */
    public static MemorySegment ImColor_ImColor_U32$address() {
        return ImColor_ImColor_U32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImColor *ImColor_ImColor_U32(ImU32 rgba)
     * }
     */
    public static MemorySegment ImColor_ImColor_U32(int rgba) {
        var mh$ = ImColor_ImColor_U32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImColor_ImColor_U32", rgba);
            }
            return (MemorySegment)mh$.invokeExact(rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImColor_SetHSV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImColor_SetHSV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImColor_SetHSV(ImColor *self, float h, float s, float v, float a)
     * }
     */
    public static FunctionDescriptor ImColor_SetHSV$descriptor() {
        return ImColor_SetHSV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImColor_SetHSV(ImColor *self, float h, float s, float v, float a)
     * }
     */
    public static MethodHandle ImColor_SetHSV$handle() {
        return ImColor_SetHSV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImColor_SetHSV(ImColor *self, float h, float s, float v, float a)
     * }
     */
    public static MemorySegment ImColor_SetHSV$address() {
        return ImColor_SetHSV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImColor_SetHSV(ImColor *self, float h, float s, float v, float a)
     * }
     */
    public static void ImColor_SetHSV(MemorySegment self, float h, float s, float v, float a) {
        var mh$ = ImColor_SetHSV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImColor_SetHSV", self, h, s, v, a);
            }
            mh$.invokeExact(self, h, s, v, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImColor_HSV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImColor_HSV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImColor_HSV(ImColor *pOut, float h, float s, float v, float a)
     * }
     */
    public static FunctionDescriptor ImColor_HSV$descriptor() {
        return ImColor_HSV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImColor_HSV(ImColor *pOut, float h, float s, float v, float a)
     * }
     */
    public static MethodHandle ImColor_HSV$handle() {
        return ImColor_HSV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImColor_HSV(ImColor *pOut, float h, float s, float v, float a)
     * }
     */
    public static MemorySegment ImColor_HSV$address() {
        return ImColor_HSV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImColor_HSV(ImColor *pOut, float h, float s, float v, float a)
     * }
     */
    public static void ImColor_HSV(MemorySegment pOut, float h, float s, float v, float a) {
        var mh$ = ImColor_HSV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImColor_HSV", pOut, h, s, v, a);
            }
            mh$.invokeExact(pOut, h, s, v, a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiSelectionBasicStorage *ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage()
     * }
     */
    public static FunctionDescriptor ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage$descriptor() {
        return ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiSelectionBasicStorage *ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage()
     * }
     */
    public static MethodHandle ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage$handle() {
        return ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiSelectionBasicStorage *ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage()
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage$address() {
        return ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiSelectionBasicStorage *ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage()
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage() {
        var mh$ = ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionBasicStorage_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionBasicStorage_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_destroy(ImGuiSelectionBasicStorage *self)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionBasicStorage_destroy$descriptor() {
        return ImGuiSelectionBasicStorage_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_destroy(ImGuiSelectionBasicStorage *self)
     * }
     */
    public static MethodHandle ImGuiSelectionBasicStorage_destroy$handle() {
        return ImGuiSelectionBasicStorage_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_destroy(ImGuiSelectionBasicStorage *self)
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_destroy$address() {
        return ImGuiSelectionBasicStorage_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_destroy(ImGuiSelectionBasicStorage *self)
     * }
     */
    public static void ImGuiSelectionBasicStorage_destroy(MemorySegment self) {
        var mh$ = ImGuiSelectionBasicStorage_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionBasicStorage_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionBasicStorage_ApplyRequests {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionBasicStorage_ApplyRequests");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_ApplyRequests(ImGuiSelectionBasicStorage *self, ImGuiMultiSelectIO *ms_io)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionBasicStorage_ApplyRequests$descriptor() {
        return ImGuiSelectionBasicStorage_ApplyRequests.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_ApplyRequests(ImGuiSelectionBasicStorage *self, ImGuiMultiSelectIO *ms_io)
     * }
     */
    public static MethodHandle ImGuiSelectionBasicStorage_ApplyRequests$handle() {
        return ImGuiSelectionBasicStorage_ApplyRequests.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_ApplyRequests(ImGuiSelectionBasicStorage *self, ImGuiMultiSelectIO *ms_io)
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_ApplyRequests$address() {
        return ImGuiSelectionBasicStorage_ApplyRequests.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_ApplyRequests(ImGuiSelectionBasicStorage *self, ImGuiMultiSelectIO *ms_io)
     * }
     */
    public static void ImGuiSelectionBasicStorage_ApplyRequests(MemorySegment self, MemorySegment ms_io) {
        var mh$ = ImGuiSelectionBasicStorage_ApplyRequests.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionBasicStorage_ApplyRequests", self, ms_io);
            }
            mh$.invokeExact(self, ms_io);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionBasicStorage_Contains {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionBasicStorage_Contains");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiSelectionBasicStorage_Contains(ImGuiSelectionBasicStorage *self, ImGuiID id)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionBasicStorage_Contains$descriptor() {
        return ImGuiSelectionBasicStorage_Contains.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiSelectionBasicStorage_Contains(ImGuiSelectionBasicStorage *self, ImGuiID id)
     * }
     */
    public static MethodHandle ImGuiSelectionBasicStorage_Contains$handle() {
        return ImGuiSelectionBasicStorage_Contains.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiSelectionBasicStorage_Contains(ImGuiSelectionBasicStorage *self, ImGuiID id)
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_Contains$address() {
        return ImGuiSelectionBasicStorage_Contains.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiSelectionBasicStorage_Contains(ImGuiSelectionBasicStorage *self, ImGuiID id)
     * }
     */
    public static boolean ImGuiSelectionBasicStorage_Contains(MemorySegment self, int id) {
        var mh$ = ImGuiSelectionBasicStorage_Contains.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionBasicStorage_Contains", self, id);
            }
            return (boolean)mh$.invokeExact(self, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionBasicStorage_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionBasicStorage_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_Clear(ImGuiSelectionBasicStorage *self)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionBasicStorage_Clear$descriptor() {
        return ImGuiSelectionBasicStorage_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_Clear(ImGuiSelectionBasicStorage *self)
     * }
     */
    public static MethodHandle ImGuiSelectionBasicStorage_Clear$handle() {
        return ImGuiSelectionBasicStorage_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_Clear(ImGuiSelectionBasicStorage *self)
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_Clear$address() {
        return ImGuiSelectionBasicStorage_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_Clear(ImGuiSelectionBasicStorage *self)
     * }
     */
    public static void ImGuiSelectionBasicStorage_Clear(MemorySegment self) {
        var mh$ = ImGuiSelectionBasicStorage_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionBasicStorage_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionBasicStorage_Swap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionBasicStorage_Swap");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_Swap(ImGuiSelectionBasicStorage *self, ImGuiSelectionBasicStorage *r)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionBasicStorage_Swap$descriptor() {
        return ImGuiSelectionBasicStorage_Swap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_Swap(ImGuiSelectionBasicStorage *self, ImGuiSelectionBasicStorage *r)
     * }
     */
    public static MethodHandle ImGuiSelectionBasicStorage_Swap$handle() {
        return ImGuiSelectionBasicStorage_Swap.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_Swap(ImGuiSelectionBasicStorage *self, ImGuiSelectionBasicStorage *r)
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_Swap$address() {
        return ImGuiSelectionBasicStorage_Swap.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_Swap(ImGuiSelectionBasicStorage *self, ImGuiSelectionBasicStorage *r)
     * }
     */
    public static void ImGuiSelectionBasicStorage_Swap(MemorySegment self, MemorySegment r) {
        var mh$ = ImGuiSelectionBasicStorage_Swap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionBasicStorage_Swap", self, r);
            }
            mh$.invokeExact(self, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionBasicStorage_SetItemSelected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionBasicStorage_SetItemSelected");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_SetItemSelected(ImGuiSelectionBasicStorage *self, ImGuiID id, bool selected)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionBasicStorage_SetItemSelected$descriptor() {
        return ImGuiSelectionBasicStorage_SetItemSelected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_SetItemSelected(ImGuiSelectionBasicStorage *self, ImGuiID id, bool selected)
     * }
     */
    public static MethodHandle ImGuiSelectionBasicStorage_SetItemSelected$handle() {
        return ImGuiSelectionBasicStorage_SetItemSelected.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_SetItemSelected(ImGuiSelectionBasicStorage *self, ImGuiID id, bool selected)
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_SetItemSelected$address() {
        return ImGuiSelectionBasicStorage_SetItemSelected.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiSelectionBasicStorage_SetItemSelected(ImGuiSelectionBasicStorage *self, ImGuiID id, bool selected)
     * }
     */
    public static void ImGuiSelectionBasicStorage_SetItemSelected(MemorySegment self, int id, boolean selected) {
        var mh$ = ImGuiSelectionBasicStorage_SetItemSelected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionBasicStorage_SetItemSelected", self, id, selected);
            }
            mh$.invokeExact(self, id, selected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionBasicStorage_GetNextSelectedItem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionBasicStorage_GetNextSelectedItem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiSelectionBasicStorage_GetNextSelectedItem(ImGuiSelectionBasicStorage *self, void **opaque_it, ImGuiID *out_id)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionBasicStorage_GetNextSelectedItem$descriptor() {
        return ImGuiSelectionBasicStorage_GetNextSelectedItem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiSelectionBasicStorage_GetNextSelectedItem(ImGuiSelectionBasicStorage *self, void **opaque_it, ImGuiID *out_id)
     * }
     */
    public static MethodHandle ImGuiSelectionBasicStorage_GetNextSelectedItem$handle() {
        return ImGuiSelectionBasicStorage_GetNextSelectedItem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiSelectionBasicStorage_GetNextSelectedItem(ImGuiSelectionBasicStorage *self, void **opaque_it, ImGuiID *out_id)
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_GetNextSelectedItem$address() {
        return ImGuiSelectionBasicStorage_GetNextSelectedItem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiSelectionBasicStorage_GetNextSelectedItem(ImGuiSelectionBasicStorage *self, void **opaque_it, ImGuiID *out_id)
     * }
     */
    public static boolean ImGuiSelectionBasicStorage_GetNextSelectedItem(MemorySegment self, MemorySegment opaque_it, MemorySegment out_id) {
        var mh$ = ImGuiSelectionBasicStorage_GetNextSelectedItem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionBasicStorage_GetNextSelectedItem", self, opaque_it, out_id);
            }
            return (boolean)mh$.invokeExact(self, opaque_it, out_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionBasicStorage_GetStorageIdFromIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionBasicStorage_GetStorageIdFromIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiSelectionBasicStorage_GetStorageIdFromIndex(ImGuiSelectionBasicStorage *self, int idx)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionBasicStorage_GetStorageIdFromIndex$descriptor() {
        return ImGuiSelectionBasicStorage_GetStorageIdFromIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiSelectionBasicStorage_GetStorageIdFromIndex(ImGuiSelectionBasicStorage *self, int idx)
     * }
     */
    public static MethodHandle ImGuiSelectionBasicStorage_GetStorageIdFromIndex$handle() {
        return ImGuiSelectionBasicStorage_GetStorageIdFromIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID ImGuiSelectionBasicStorage_GetStorageIdFromIndex(ImGuiSelectionBasicStorage *self, int idx)
     * }
     */
    public static MemorySegment ImGuiSelectionBasicStorage_GetStorageIdFromIndex$address() {
        return ImGuiSelectionBasicStorage_GetStorageIdFromIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID ImGuiSelectionBasicStorage_GetStorageIdFromIndex(ImGuiSelectionBasicStorage *self, int idx)
     * }
     */
    public static int ImGuiSelectionBasicStorage_GetStorageIdFromIndex(MemorySegment self, int idx) {
        var mh$ = ImGuiSelectionBasicStorage_GetStorageIdFromIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionBasicStorage_GetStorageIdFromIndex", self, idx);
            }
            return (int)mh$.invokeExact(self, idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiSelectionExternalStorage *ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage()
     * }
     */
    public static FunctionDescriptor ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage$descriptor() {
        return ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiSelectionExternalStorage *ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage()
     * }
     */
    public static MethodHandle ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage$handle() {
        return ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiSelectionExternalStorage *ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage()
     * }
     */
    public static MemorySegment ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage$address() {
        return ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiSelectionExternalStorage *ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage()
     * }
     */
    public static MemorySegment ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage() {
        var mh$ = ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionExternalStorage_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionExternalStorage_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionExternalStorage_destroy(ImGuiSelectionExternalStorage *self)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionExternalStorage_destroy$descriptor() {
        return ImGuiSelectionExternalStorage_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionExternalStorage_destroy(ImGuiSelectionExternalStorage *self)
     * }
     */
    public static MethodHandle ImGuiSelectionExternalStorage_destroy$handle() {
        return ImGuiSelectionExternalStorage_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionExternalStorage_destroy(ImGuiSelectionExternalStorage *self)
     * }
     */
    public static MemorySegment ImGuiSelectionExternalStorage_destroy$address() {
        return ImGuiSelectionExternalStorage_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiSelectionExternalStorage_destroy(ImGuiSelectionExternalStorage *self)
     * }
     */
    public static void ImGuiSelectionExternalStorage_destroy(MemorySegment self) {
        var mh$ = ImGuiSelectionExternalStorage_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionExternalStorage_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSelectionExternalStorage_ApplyRequests {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSelectionExternalStorage_ApplyRequests");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionExternalStorage_ApplyRequests(ImGuiSelectionExternalStorage *self, ImGuiMultiSelectIO *ms_io)
     * }
     */
    public static FunctionDescriptor ImGuiSelectionExternalStorage_ApplyRequests$descriptor() {
        return ImGuiSelectionExternalStorage_ApplyRequests.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionExternalStorage_ApplyRequests(ImGuiSelectionExternalStorage *self, ImGuiMultiSelectIO *ms_io)
     * }
     */
    public static MethodHandle ImGuiSelectionExternalStorage_ApplyRequests$handle() {
        return ImGuiSelectionExternalStorage_ApplyRequests.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiSelectionExternalStorage_ApplyRequests(ImGuiSelectionExternalStorage *self, ImGuiMultiSelectIO *ms_io)
     * }
     */
    public static MemorySegment ImGuiSelectionExternalStorage_ApplyRequests$address() {
        return ImGuiSelectionExternalStorage_ApplyRequests.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiSelectionExternalStorage_ApplyRequests(ImGuiSelectionExternalStorage *self, ImGuiMultiSelectIO *ms_io)
     * }
     */
    public static void ImGuiSelectionExternalStorage_ApplyRequests(MemorySegment self, MemorySegment ms_io) {
        var mh$ = ImGuiSelectionExternalStorage_ApplyRequests.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSelectionExternalStorage_ApplyRequests", self, ms_io);
            }
            mh$.invokeExact(self, ms_io);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawCmd_ImDrawCmd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawCmd_ImDrawCmd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawCmd *ImDrawCmd_ImDrawCmd()
     * }
     */
    public static FunctionDescriptor ImDrawCmd_ImDrawCmd$descriptor() {
        return ImDrawCmd_ImDrawCmd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawCmd *ImDrawCmd_ImDrawCmd()
     * }
     */
    public static MethodHandle ImDrawCmd_ImDrawCmd$handle() {
        return ImDrawCmd_ImDrawCmd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawCmd *ImDrawCmd_ImDrawCmd()
     * }
     */
    public static MemorySegment ImDrawCmd_ImDrawCmd$address() {
        return ImDrawCmd_ImDrawCmd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawCmd *ImDrawCmd_ImDrawCmd()
     * }
     */
    public static MemorySegment ImDrawCmd_ImDrawCmd() {
        var mh$ = ImDrawCmd_ImDrawCmd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawCmd_ImDrawCmd");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawCmd_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawCmd_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawCmd_destroy(ImDrawCmd *self)
     * }
     */
    public static FunctionDescriptor ImDrawCmd_destroy$descriptor() {
        return ImDrawCmd_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawCmd_destroy(ImDrawCmd *self)
     * }
     */
    public static MethodHandle ImDrawCmd_destroy$handle() {
        return ImDrawCmd_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawCmd_destroy(ImDrawCmd *self)
     * }
     */
    public static MemorySegment ImDrawCmd_destroy$address() {
        return ImDrawCmd_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawCmd_destroy(ImDrawCmd *self)
     * }
     */
    public static void ImDrawCmd_destroy(MemorySegment self) {
        var mh$ = ImDrawCmd_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawCmd_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawCmd_GetTexID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawCmd_GetTexID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImTextureID ImDrawCmd_GetTexID(ImDrawCmd *self)
     * }
     */
    public static FunctionDescriptor ImDrawCmd_GetTexID$descriptor() {
        return ImDrawCmd_GetTexID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImTextureID ImDrawCmd_GetTexID(ImDrawCmd *self)
     * }
     */
    public static MethodHandle ImDrawCmd_GetTexID$handle() {
        return ImDrawCmd_GetTexID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImTextureID ImDrawCmd_GetTexID(ImDrawCmd *self)
     * }
     */
    public static MemorySegment ImDrawCmd_GetTexID$address() {
        return ImDrawCmd_GetTexID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImTextureID ImDrawCmd_GetTexID(ImDrawCmd *self)
     * }
     */
    public static MemorySegment ImDrawCmd_GetTexID(MemorySegment self) {
        var mh$ = ImDrawCmd_GetTexID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawCmd_GetTexID", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSplitter_ImDrawListSplitter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSplitter_ImDrawListSplitter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawListSplitter *ImDrawListSplitter_ImDrawListSplitter()
     * }
     */
    public static FunctionDescriptor ImDrawListSplitter_ImDrawListSplitter$descriptor() {
        return ImDrawListSplitter_ImDrawListSplitter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawListSplitter *ImDrawListSplitter_ImDrawListSplitter()
     * }
     */
    public static MethodHandle ImDrawListSplitter_ImDrawListSplitter$handle() {
        return ImDrawListSplitter_ImDrawListSplitter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawListSplitter *ImDrawListSplitter_ImDrawListSplitter()
     * }
     */
    public static MemorySegment ImDrawListSplitter_ImDrawListSplitter$address() {
        return ImDrawListSplitter_ImDrawListSplitter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawListSplitter *ImDrawListSplitter_ImDrawListSplitter()
     * }
     */
    public static MemorySegment ImDrawListSplitter_ImDrawListSplitter() {
        var mh$ = ImDrawListSplitter_ImDrawListSplitter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSplitter_ImDrawListSplitter");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSplitter_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSplitter_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_destroy(ImDrawListSplitter *self)
     * }
     */
    public static FunctionDescriptor ImDrawListSplitter_destroy$descriptor() {
        return ImDrawListSplitter_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_destroy(ImDrawListSplitter *self)
     * }
     */
    public static MethodHandle ImDrawListSplitter_destroy$handle() {
        return ImDrawListSplitter_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_destroy(ImDrawListSplitter *self)
     * }
     */
    public static MemorySegment ImDrawListSplitter_destroy$address() {
        return ImDrawListSplitter_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_destroy(ImDrawListSplitter *self)
     * }
     */
    public static void ImDrawListSplitter_destroy(MemorySegment self) {
        var mh$ = ImDrawListSplitter_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSplitter_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSplitter_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSplitter_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Clear(ImDrawListSplitter *self)
     * }
     */
    public static FunctionDescriptor ImDrawListSplitter_Clear$descriptor() {
        return ImDrawListSplitter_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Clear(ImDrawListSplitter *self)
     * }
     */
    public static MethodHandle ImDrawListSplitter_Clear$handle() {
        return ImDrawListSplitter_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Clear(ImDrawListSplitter *self)
     * }
     */
    public static MemorySegment ImDrawListSplitter_Clear$address() {
        return ImDrawListSplitter_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Clear(ImDrawListSplitter *self)
     * }
     */
    public static void ImDrawListSplitter_Clear(MemorySegment self) {
        var mh$ = ImDrawListSplitter_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSplitter_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSplitter_ClearFreeMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSplitter_ClearFreeMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter *self)
     * }
     */
    public static FunctionDescriptor ImDrawListSplitter_ClearFreeMemory$descriptor() {
        return ImDrawListSplitter_ClearFreeMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter *self)
     * }
     */
    public static MethodHandle ImDrawListSplitter_ClearFreeMemory$handle() {
        return ImDrawListSplitter_ClearFreeMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter *self)
     * }
     */
    public static MemorySegment ImDrawListSplitter_ClearFreeMemory$address() {
        return ImDrawListSplitter_ClearFreeMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_ClearFreeMemory(ImDrawListSplitter *self)
     * }
     */
    public static void ImDrawListSplitter_ClearFreeMemory(MemorySegment self) {
        var mh$ = ImDrawListSplitter_ClearFreeMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSplitter_ClearFreeMemory", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSplitter_Split {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSplitter_Split");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Split(ImDrawListSplitter *self, ImDrawList *draw_list, int count)
     * }
     */
    public static FunctionDescriptor ImDrawListSplitter_Split$descriptor() {
        return ImDrawListSplitter_Split.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Split(ImDrawListSplitter *self, ImDrawList *draw_list, int count)
     * }
     */
    public static MethodHandle ImDrawListSplitter_Split$handle() {
        return ImDrawListSplitter_Split.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Split(ImDrawListSplitter *self, ImDrawList *draw_list, int count)
     * }
     */
    public static MemorySegment ImDrawListSplitter_Split$address() {
        return ImDrawListSplitter_Split.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Split(ImDrawListSplitter *self, ImDrawList *draw_list, int count)
     * }
     */
    public static void ImDrawListSplitter_Split(MemorySegment self, MemorySegment draw_list, int count) {
        var mh$ = ImDrawListSplitter_Split.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSplitter_Split", self, draw_list, count);
            }
            mh$.invokeExact(self, draw_list, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSplitter_Merge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSplitter_Merge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Merge(ImDrawListSplitter *self, ImDrawList *draw_list)
     * }
     */
    public static FunctionDescriptor ImDrawListSplitter_Merge$descriptor() {
        return ImDrawListSplitter_Merge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Merge(ImDrawListSplitter *self, ImDrawList *draw_list)
     * }
     */
    public static MethodHandle ImDrawListSplitter_Merge$handle() {
        return ImDrawListSplitter_Merge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Merge(ImDrawListSplitter *self, ImDrawList *draw_list)
     * }
     */
    public static MemorySegment ImDrawListSplitter_Merge$address() {
        return ImDrawListSplitter_Merge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_Merge(ImDrawListSplitter *self, ImDrawList *draw_list)
     * }
     */
    public static void ImDrawListSplitter_Merge(MemorySegment self, MemorySegment draw_list) {
        var mh$ = ImDrawListSplitter_Merge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSplitter_Merge", self, draw_list);
            }
            mh$.invokeExact(self, draw_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSplitter_SetCurrentChannel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSplitter_SetCurrentChannel");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter *self, ImDrawList *draw_list, int channel_idx)
     * }
     */
    public static FunctionDescriptor ImDrawListSplitter_SetCurrentChannel$descriptor() {
        return ImDrawListSplitter_SetCurrentChannel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter *self, ImDrawList *draw_list, int channel_idx)
     * }
     */
    public static MethodHandle ImDrawListSplitter_SetCurrentChannel$handle() {
        return ImDrawListSplitter_SetCurrentChannel.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter *self, ImDrawList *draw_list, int channel_idx)
     * }
     */
    public static MemorySegment ImDrawListSplitter_SetCurrentChannel$address() {
        return ImDrawListSplitter_SetCurrentChannel.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawListSplitter_SetCurrentChannel(ImDrawListSplitter *self, ImDrawList *draw_list, int channel_idx)
     * }
     */
    public static void ImDrawListSplitter_SetCurrentChannel(MemorySegment self, MemorySegment draw_list, int channel_idx) {
        var mh$ = ImDrawListSplitter_SetCurrentChannel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSplitter_SetCurrentChannel", self, draw_list, channel_idx);
            }
            mh$.invokeExact(self, draw_list, channel_idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_ImDrawList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_ImDrawList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawList *ImDrawList_ImDrawList(ImDrawListSharedData *shared_data)
     * }
     */
    public static FunctionDescriptor ImDrawList_ImDrawList$descriptor() {
        return ImDrawList_ImDrawList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawList *ImDrawList_ImDrawList(ImDrawListSharedData *shared_data)
     * }
     */
    public static MethodHandle ImDrawList_ImDrawList$handle() {
        return ImDrawList_ImDrawList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawList *ImDrawList_ImDrawList(ImDrawListSharedData *shared_data)
     * }
     */
    public static MemorySegment ImDrawList_ImDrawList$address() {
        return ImDrawList_ImDrawList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawList *ImDrawList_ImDrawList(ImDrawListSharedData *shared_data)
     * }
     */
    public static MemorySegment ImDrawList_ImDrawList(MemorySegment shared_data) {
        var mh$ = ImDrawList_ImDrawList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_ImDrawList", shared_data);
            }
            return (MemorySegment)mh$.invokeExact(shared_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_destroy(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_destroy$descriptor() {
        return ImDrawList_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_destroy(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_destroy$handle() {
        return ImDrawList_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_destroy(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_destroy$address() {
        return ImDrawList_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_destroy(ImDrawList *self)
     * }
     */
    public static void ImDrawList_destroy(MemorySegment self) {
        var mh$ = ImDrawList_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PushClipRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PushClipRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PushClipRect(ImDrawList *self, const ImVec2 clip_rect_min, const ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
     * }
     */
    public static FunctionDescriptor ImDrawList_PushClipRect$descriptor() {
        return ImDrawList_PushClipRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PushClipRect(ImDrawList *self, const ImVec2 clip_rect_min, const ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
     * }
     */
    public static MethodHandle ImDrawList_PushClipRect$handle() {
        return ImDrawList_PushClipRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PushClipRect(ImDrawList *self, const ImVec2 clip_rect_min, const ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
     * }
     */
    public static MemorySegment ImDrawList_PushClipRect$address() {
        return ImDrawList_PushClipRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PushClipRect(ImDrawList *self, const ImVec2 clip_rect_min, const ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
     * }
     */
    public static void ImDrawList_PushClipRect(MemorySegment self, MemorySegment clip_rect_min, MemorySegment clip_rect_max, boolean intersect_with_current_clip_rect) {
        var mh$ = ImDrawList_PushClipRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PushClipRect", self, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
            }
            mh$.invokeExact(self, clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PushClipRectFullScreen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PushClipRectFullScreen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PushClipRectFullScreen(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_PushClipRectFullScreen$descriptor() {
        return ImDrawList_PushClipRectFullScreen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PushClipRectFullScreen(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_PushClipRectFullScreen$handle() {
        return ImDrawList_PushClipRectFullScreen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PushClipRectFullScreen(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_PushClipRectFullScreen$address() {
        return ImDrawList_PushClipRectFullScreen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PushClipRectFullScreen(ImDrawList *self)
     * }
     */
    public static void ImDrawList_PushClipRectFullScreen(MemorySegment self) {
        var mh$ = ImDrawList_PushClipRectFullScreen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PushClipRectFullScreen", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PopClipRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PopClipRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PopClipRect(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_PopClipRect$descriptor() {
        return ImDrawList_PopClipRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PopClipRect(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_PopClipRect$handle() {
        return ImDrawList_PopClipRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PopClipRect(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_PopClipRect$address() {
        return ImDrawList_PopClipRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PopClipRect(ImDrawList *self)
     * }
     */
    public static void ImDrawList_PopClipRect(MemorySegment self) {
        var mh$ = ImDrawList_PopClipRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PopClipRect", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PushTextureID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PushTextureID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PushTextureID(ImDrawList *self, ImTextureID texture_id)
     * }
     */
    public static FunctionDescriptor ImDrawList_PushTextureID$descriptor() {
        return ImDrawList_PushTextureID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PushTextureID(ImDrawList *self, ImTextureID texture_id)
     * }
     */
    public static MethodHandle ImDrawList_PushTextureID$handle() {
        return ImDrawList_PushTextureID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PushTextureID(ImDrawList *self, ImTextureID texture_id)
     * }
     */
    public static MemorySegment ImDrawList_PushTextureID$address() {
        return ImDrawList_PushTextureID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PushTextureID(ImDrawList *self, ImTextureID texture_id)
     * }
     */
    public static void ImDrawList_PushTextureID(MemorySegment self, MemorySegment texture_id) {
        var mh$ = ImDrawList_PushTextureID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PushTextureID", self, texture_id);
            }
            mh$.invokeExact(self, texture_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PopTextureID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PopTextureID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PopTextureID(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_PopTextureID$descriptor() {
        return ImDrawList_PopTextureID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PopTextureID(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_PopTextureID$handle() {
        return ImDrawList_PopTextureID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PopTextureID(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_PopTextureID$address() {
        return ImDrawList_PopTextureID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PopTextureID(ImDrawList *self)
     * }
     */
    public static void ImDrawList_PopTextureID(MemorySegment self) {
        var mh$ = ImDrawList_PopTextureID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PopTextureID", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_GetClipRectMin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_GetClipRectMin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_GetClipRectMin(ImVec2 *pOut, ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_GetClipRectMin$descriptor() {
        return ImDrawList_GetClipRectMin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_GetClipRectMin(ImVec2 *pOut, ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_GetClipRectMin$handle() {
        return ImDrawList_GetClipRectMin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_GetClipRectMin(ImVec2 *pOut, ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_GetClipRectMin$address() {
        return ImDrawList_GetClipRectMin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_GetClipRectMin(ImVec2 *pOut, ImDrawList *self)
     * }
     */
    public static void ImDrawList_GetClipRectMin(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImDrawList_GetClipRectMin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_GetClipRectMin", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_GetClipRectMax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_GetClipRectMax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_GetClipRectMax(ImVec2 *pOut, ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_GetClipRectMax$descriptor() {
        return ImDrawList_GetClipRectMax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_GetClipRectMax(ImVec2 *pOut, ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_GetClipRectMax$handle() {
        return ImDrawList_GetClipRectMax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_GetClipRectMax(ImVec2 *pOut, ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_GetClipRectMax$address() {
        return ImDrawList_GetClipRectMax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_GetClipRectMax(ImVec2 *pOut, ImDrawList *self)
     * }
     */
    public static void ImDrawList_GetClipRectMax(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImDrawList_GetClipRectMax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_GetClipRectMax", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddLine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddLine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddLine(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, ImU32 col, float thickness)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddLine$descriptor() {
        return ImDrawList_AddLine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddLine(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, ImU32 col, float thickness)
     * }
     */
    public static MethodHandle ImDrawList_AddLine$handle() {
        return ImDrawList_AddLine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddLine(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, ImU32 col, float thickness)
     * }
     */
    public static MemorySegment ImDrawList_AddLine$address() {
        return ImDrawList_AddLine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddLine(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, ImU32 col, float thickness)
     * }
     */
    public static void ImDrawList_AddLine(MemorySegment self, MemorySegment p1, MemorySegment p2, int col, float thickness) {
        var mh$ = ImDrawList_AddLine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddLine", self, p1, p2, col, thickness);
            }
            mh$.invokeExact(self, p1, p2, col, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddRect(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags, float thickness)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddRect$descriptor() {
        return ImDrawList_AddRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddRect(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags, float thickness)
     * }
     */
    public static MethodHandle ImDrawList_AddRect$handle() {
        return ImDrawList_AddRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddRect(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags, float thickness)
     * }
     */
    public static MemorySegment ImDrawList_AddRect$address() {
        return ImDrawList_AddRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddRect(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags, float thickness)
     * }
     */
    public static void ImDrawList_AddRect(MemorySegment self, MemorySegment p_min, MemorySegment p_max, int col, float rounding, int flags, float thickness) {
        var mh$ = ImDrawList_AddRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddRect", self, p_min, p_max, col, rounding, flags, thickness);
            }
            mh$.invokeExact(self, p_min, p_max, col, rounding, flags, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddRectFilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddRectFilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddRectFilled(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddRectFilled$descriptor() {
        return ImDrawList_AddRectFilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddRectFilled(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags)
     * }
     */
    public static MethodHandle ImDrawList_AddRectFilled$handle() {
        return ImDrawList_AddRectFilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddRectFilled(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags)
     * }
     */
    public static MemorySegment ImDrawList_AddRectFilled$address() {
        return ImDrawList_AddRectFilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddRectFilled(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col, float rounding, ImDrawFlags flags)
     * }
     */
    public static void ImDrawList_AddRectFilled(MemorySegment self, MemorySegment p_min, MemorySegment p_max, int col, float rounding, int flags) {
        var mh$ = ImDrawList_AddRectFilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddRectFilled", self, p_min, p_max, col, rounding, flags);
            }
            mh$.invokeExact(self, p_min, p_max, col, rounding, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddRectFilledMultiColor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddRectFilledMultiColor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddRectFilledMultiColor(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddRectFilledMultiColor$descriptor() {
        return ImDrawList_AddRectFilledMultiColor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddRectFilledMultiColor(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)
     * }
     */
    public static MethodHandle ImDrawList_AddRectFilledMultiColor$handle() {
        return ImDrawList_AddRectFilledMultiColor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddRectFilledMultiColor(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)
     * }
     */
    public static MemorySegment ImDrawList_AddRectFilledMultiColor$address() {
        return ImDrawList_AddRectFilledMultiColor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddRectFilledMultiColor(ImDrawList *self, const ImVec2 p_min, const ImVec2 p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left)
     * }
     */
    public static void ImDrawList_AddRectFilledMultiColor(MemorySegment self, MemorySegment p_min, MemorySegment p_max, int col_upr_left, int col_upr_right, int col_bot_right, int col_bot_left) {
        var mh$ = ImDrawList_AddRectFilledMultiColor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddRectFilledMultiColor", self, p_min, p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
            }
            mh$.invokeExact(self, p_min, p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddQuad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddQuad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddQuad(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col, float thickness)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddQuad$descriptor() {
        return ImDrawList_AddQuad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddQuad(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col, float thickness)
     * }
     */
    public static MethodHandle ImDrawList_AddQuad$handle() {
        return ImDrawList_AddQuad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddQuad(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col, float thickness)
     * }
     */
    public static MemorySegment ImDrawList_AddQuad$address() {
        return ImDrawList_AddQuad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddQuad(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col, float thickness)
     * }
     */
    public static void ImDrawList_AddQuad(MemorySegment self, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, int col, float thickness) {
        var mh$ = ImDrawList_AddQuad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddQuad", self, p1, p2, p3, p4, col, thickness);
            }
            mh$.invokeExact(self, p1, p2, p3, p4, col, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddQuadFilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddQuadFilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddQuadFilled(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddQuadFilled$descriptor() {
        return ImDrawList_AddQuadFilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddQuadFilled(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_AddQuadFilled$handle() {
        return ImDrawList_AddQuadFilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddQuadFilled(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_AddQuadFilled$address() {
        return ImDrawList_AddQuadFilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddQuadFilled(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col)
     * }
     */
    public static void ImDrawList_AddQuadFilled(MemorySegment self, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, int col) {
        var mh$ = ImDrawList_AddQuadFilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddQuadFilled", self, p1, p2, p3, p4, col);
            }
            mh$.invokeExact(self, p1, p2, p3, p4, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddTriangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddTriangle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddTriangle(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col, float thickness)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddTriangle$descriptor() {
        return ImDrawList_AddTriangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddTriangle(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col, float thickness)
     * }
     */
    public static MethodHandle ImDrawList_AddTriangle$handle() {
        return ImDrawList_AddTriangle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddTriangle(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col, float thickness)
     * }
     */
    public static MemorySegment ImDrawList_AddTriangle$address() {
        return ImDrawList_AddTriangle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddTriangle(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col, float thickness)
     * }
     */
    public static void ImDrawList_AddTriangle(MemorySegment self, MemorySegment p1, MemorySegment p2, MemorySegment p3, int col, float thickness) {
        var mh$ = ImDrawList_AddTriangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddTriangle", self, p1, p2, p3, col, thickness);
            }
            mh$.invokeExact(self, p1, p2, p3, col, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddTriangleFilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddTriangleFilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddTriangleFilled(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddTriangleFilled$descriptor() {
        return ImDrawList_AddTriangleFilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddTriangleFilled(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_AddTriangleFilled$handle() {
        return ImDrawList_AddTriangleFilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddTriangleFilled(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_AddTriangleFilled$address() {
        return ImDrawList_AddTriangleFilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddTriangleFilled(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col)
     * }
     */
    public static void ImDrawList_AddTriangleFilled(MemorySegment self, MemorySegment p1, MemorySegment p2, MemorySegment p3, int col) {
        var mh$ = ImDrawList_AddTriangleFilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddTriangleFilled", self, p1, p2, p3, col);
            }
            mh$.invokeExact(self, p1, p2, p3, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddCircle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddCircle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddCircle(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddCircle$descriptor() {
        return ImDrawList_AddCircle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddCircle(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
     * }
     */
    public static MethodHandle ImDrawList_AddCircle$handle() {
        return ImDrawList_AddCircle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddCircle(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
     * }
     */
    public static MemorySegment ImDrawList_AddCircle$address() {
        return ImDrawList_AddCircle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddCircle(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
     * }
     */
    public static void ImDrawList_AddCircle(MemorySegment self, MemorySegment center, float radius, int col, int num_segments, float thickness) {
        var mh$ = ImDrawList_AddCircle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddCircle", self, center, radius, col, num_segments, thickness);
            }
            mh$.invokeExact(self, center, radius, col, num_segments, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddCircleFilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddCircleFilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddCircleFilled(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddCircleFilled$descriptor() {
        return ImDrawList_AddCircleFilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddCircleFilled(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList_AddCircleFilled$handle() {
        return ImDrawList_AddCircleFilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddCircleFilled(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList_AddCircleFilled$address() {
        return ImDrawList_AddCircleFilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddCircleFilled(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments)
     * }
     */
    public static void ImDrawList_AddCircleFilled(MemorySegment self, MemorySegment center, float radius, int col, int num_segments) {
        var mh$ = ImDrawList_AddCircleFilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddCircleFilled", self, center, radius, col, num_segments);
            }
            mh$.invokeExact(self, center, radius, col, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddNgon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddNgon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddNgon(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddNgon$descriptor() {
        return ImDrawList_AddNgon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddNgon(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
     * }
     */
    public static MethodHandle ImDrawList_AddNgon$handle() {
        return ImDrawList_AddNgon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddNgon(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
     * }
     */
    public static MemorySegment ImDrawList_AddNgon$address() {
        return ImDrawList_AddNgon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddNgon(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments, float thickness)
     * }
     */
    public static void ImDrawList_AddNgon(MemorySegment self, MemorySegment center, float radius, int col, int num_segments, float thickness) {
        var mh$ = ImDrawList_AddNgon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddNgon", self, center, radius, col, num_segments, thickness);
            }
            mh$.invokeExact(self, center, radius, col, num_segments, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddNgonFilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddNgonFilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddNgonFilled(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddNgonFilled$descriptor() {
        return ImDrawList_AddNgonFilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddNgonFilled(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList_AddNgonFilled$handle() {
        return ImDrawList_AddNgonFilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddNgonFilled(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList_AddNgonFilled$address() {
        return ImDrawList_AddNgonFilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddNgonFilled(ImDrawList *self, const ImVec2 center, float radius, ImU32 col, int num_segments)
     * }
     */
    public static void ImDrawList_AddNgonFilled(MemorySegment self, MemorySegment center, float radius, int col, int num_segments) {
        var mh$ = ImDrawList_AddNgonFilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddNgonFilled", self, center, radius, col, num_segments);
            }
            mh$.invokeExact(self, center, radius, col, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddEllipse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddEllipse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddEllipse(ImDrawList *self, const ImVec2 center, const ImVec2 radius, ImU32 col, float rot, int num_segments, float thickness)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddEllipse$descriptor() {
        return ImDrawList_AddEllipse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddEllipse(ImDrawList *self, const ImVec2 center, const ImVec2 radius, ImU32 col, float rot, int num_segments, float thickness)
     * }
     */
    public static MethodHandle ImDrawList_AddEllipse$handle() {
        return ImDrawList_AddEllipse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddEllipse(ImDrawList *self, const ImVec2 center, const ImVec2 radius, ImU32 col, float rot, int num_segments, float thickness)
     * }
     */
    public static MemorySegment ImDrawList_AddEllipse$address() {
        return ImDrawList_AddEllipse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddEllipse(ImDrawList *self, const ImVec2 center, const ImVec2 radius, ImU32 col, float rot, int num_segments, float thickness)
     * }
     */
    public static void ImDrawList_AddEllipse(MemorySegment self, MemorySegment center, MemorySegment radius, int col, float rot, int num_segments, float thickness) {
        var mh$ = ImDrawList_AddEllipse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddEllipse", self, center, radius, col, rot, num_segments, thickness);
            }
            mh$.invokeExact(self, center, radius, col, rot, num_segments, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddEllipseFilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddEllipseFilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddEllipseFilled(ImDrawList *self, const ImVec2 center, const ImVec2 radius, ImU32 col, float rot, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddEllipseFilled$descriptor() {
        return ImDrawList_AddEllipseFilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddEllipseFilled(ImDrawList *self, const ImVec2 center, const ImVec2 radius, ImU32 col, float rot, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList_AddEllipseFilled$handle() {
        return ImDrawList_AddEllipseFilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddEllipseFilled(ImDrawList *self, const ImVec2 center, const ImVec2 radius, ImU32 col, float rot, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList_AddEllipseFilled$address() {
        return ImDrawList_AddEllipseFilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddEllipseFilled(ImDrawList *self, const ImVec2 center, const ImVec2 radius, ImU32 col, float rot, int num_segments)
     * }
     */
    public static void ImDrawList_AddEllipseFilled(MemorySegment self, MemorySegment center, MemorySegment radius, int col, float rot, int num_segments) {
        var mh$ = ImDrawList_AddEllipseFilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddEllipseFilled", self, center, radius, col, rot, num_segments);
            }
            mh$.invokeExact(self, center, radius, col, rot, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddText_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddText_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddText_Vec2(ImDrawList *self, const ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddText_Vec2$descriptor() {
        return ImDrawList_AddText_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddText_Vec2(ImDrawList *self, const ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end)
     * }
     */
    public static MethodHandle ImDrawList_AddText_Vec2$handle() {
        return ImDrawList_AddText_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddText_Vec2(ImDrawList *self, const ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end)
     * }
     */
    public static MemorySegment ImDrawList_AddText_Vec2$address() {
        return ImDrawList_AddText_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddText_Vec2(ImDrawList *self, const ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end)
     * }
     */
    public static void ImDrawList_AddText_Vec2(MemorySegment self, MemorySegment pos, int col, MemorySegment text_begin, MemorySegment text_end) {
        var mh$ = ImDrawList_AddText_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddText_Vec2", self, pos, col, text_begin, text_end);
            }
            mh$.invokeExact(self, pos, col, text_begin, text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddText_FontPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddText_FontPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddText_FontPtr(ImDrawList *self, const ImFont *font, float font_size, const ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end, float wrap_width, const ImVec4 *cpu_fine_clip_rect)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddText_FontPtr$descriptor() {
        return ImDrawList_AddText_FontPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddText_FontPtr(ImDrawList *self, const ImFont *font, float font_size, const ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end, float wrap_width, const ImVec4 *cpu_fine_clip_rect)
     * }
     */
    public static MethodHandle ImDrawList_AddText_FontPtr$handle() {
        return ImDrawList_AddText_FontPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddText_FontPtr(ImDrawList *self, const ImFont *font, float font_size, const ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end, float wrap_width, const ImVec4 *cpu_fine_clip_rect)
     * }
     */
    public static MemorySegment ImDrawList_AddText_FontPtr$address() {
        return ImDrawList_AddText_FontPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddText_FontPtr(ImDrawList *self, const ImFont *font, float font_size, const ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end, float wrap_width, const ImVec4 *cpu_fine_clip_rect)
     * }
     */
    public static void ImDrawList_AddText_FontPtr(MemorySegment self, MemorySegment font, float font_size, MemorySegment pos, int col, MemorySegment text_begin, MemorySegment text_end, float wrap_width, MemorySegment cpu_fine_clip_rect) {
        var mh$ = ImDrawList_AddText_FontPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddText_FontPtr", self, font, font_size, pos, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect);
            }
            mh$.invokeExact(self, font, font_size, pos, col, text_begin, text_end, wrap_width, cpu_fine_clip_rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddBezierCubic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddBezierCubic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddBezierCubic(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col, float thickness, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddBezierCubic$descriptor() {
        return ImDrawList_AddBezierCubic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddBezierCubic(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col, float thickness, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList_AddBezierCubic$handle() {
        return ImDrawList_AddBezierCubic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddBezierCubic(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col, float thickness, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList_AddBezierCubic$address() {
        return ImDrawList_AddBezierCubic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddBezierCubic(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, ImU32 col, float thickness, int num_segments)
     * }
     */
    public static void ImDrawList_AddBezierCubic(MemorySegment self, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, int col, float thickness, int num_segments) {
        var mh$ = ImDrawList_AddBezierCubic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddBezierCubic", self, p1, p2, p3, p4, col, thickness, num_segments);
            }
            mh$.invokeExact(self, p1, p2, p3, p4, col, thickness, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddBezierQuadratic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddBezierQuadratic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddBezierQuadratic(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col, float thickness, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddBezierQuadratic$descriptor() {
        return ImDrawList_AddBezierQuadratic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddBezierQuadratic(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col, float thickness, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList_AddBezierQuadratic$handle() {
        return ImDrawList_AddBezierQuadratic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddBezierQuadratic(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col, float thickness, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList_AddBezierQuadratic$address() {
        return ImDrawList_AddBezierQuadratic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddBezierQuadratic(ImDrawList *self, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, ImU32 col, float thickness, int num_segments)
     * }
     */
    public static void ImDrawList_AddBezierQuadratic(MemorySegment self, MemorySegment p1, MemorySegment p2, MemorySegment p3, int col, float thickness, int num_segments) {
        var mh$ = ImDrawList_AddBezierQuadratic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddBezierQuadratic", self, p1, p2, p3, col, thickness, num_segments);
            }
            mh$.invokeExact(self, p1, p2, p3, col, thickness, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddPolyline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddPolyline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddPolyline(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col, ImDrawFlags flags, float thickness)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddPolyline$descriptor() {
        return ImDrawList_AddPolyline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddPolyline(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col, ImDrawFlags flags, float thickness)
     * }
     */
    public static MethodHandle ImDrawList_AddPolyline$handle() {
        return ImDrawList_AddPolyline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddPolyline(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col, ImDrawFlags flags, float thickness)
     * }
     */
    public static MemorySegment ImDrawList_AddPolyline$address() {
        return ImDrawList_AddPolyline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddPolyline(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col, ImDrawFlags flags, float thickness)
     * }
     */
    public static void ImDrawList_AddPolyline(MemorySegment self, MemorySegment points, int num_points, int col, int flags, float thickness) {
        var mh$ = ImDrawList_AddPolyline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddPolyline", self, points, num_points, col, flags, thickness);
            }
            mh$.invokeExact(self, points, num_points, col, flags, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddConvexPolyFilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddConvexPolyFilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddConvexPolyFilled(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddConvexPolyFilled$descriptor() {
        return ImDrawList_AddConvexPolyFilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddConvexPolyFilled(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_AddConvexPolyFilled$handle() {
        return ImDrawList_AddConvexPolyFilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddConvexPolyFilled(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_AddConvexPolyFilled$address() {
        return ImDrawList_AddConvexPolyFilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddConvexPolyFilled(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col)
     * }
     */
    public static void ImDrawList_AddConvexPolyFilled(MemorySegment self, MemorySegment points, int num_points, int col) {
        var mh$ = ImDrawList_AddConvexPolyFilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddConvexPolyFilled", self, points, num_points, col);
            }
            mh$.invokeExact(self, points, num_points, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddConcavePolyFilled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddConcavePolyFilled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddConcavePolyFilled(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddConcavePolyFilled$descriptor() {
        return ImDrawList_AddConcavePolyFilled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddConcavePolyFilled(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_AddConcavePolyFilled$handle() {
        return ImDrawList_AddConcavePolyFilled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddConcavePolyFilled(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_AddConcavePolyFilled$address() {
        return ImDrawList_AddConcavePolyFilled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddConcavePolyFilled(ImDrawList *self, const ImVec2 *points, int num_points, ImU32 col)
     * }
     */
    public static void ImDrawList_AddConcavePolyFilled(MemorySegment self, MemorySegment points, int num_points, int col) {
        var mh$ = ImDrawList_AddConcavePolyFilled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddConcavePolyFilled", self, points, num_points, col);
            }
            mh$.invokeExact(self, points, num_points, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddImage(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p_min, const ImVec2 p_max, const ImVec2 uv_min, const ImVec2 uv_max, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddImage$descriptor() {
        return ImDrawList_AddImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddImage(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p_min, const ImVec2 p_max, const ImVec2 uv_min, const ImVec2 uv_max, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_AddImage$handle() {
        return ImDrawList_AddImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddImage(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p_min, const ImVec2 p_max, const ImVec2 uv_min, const ImVec2 uv_max, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_AddImage$address() {
        return ImDrawList_AddImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddImage(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p_min, const ImVec2 p_max, const ImVec2 uv_min, const ImVec2 uv_max, ImU32 col)
     * }
     */
    public static void ImDrawList_AddImage(MemorySegment self, MemorySegment user_texture_id, MemorySegment p_min, MemorySegment p_max, MemorySegment uv_min, MemorySegment uv_max, int col) {
        var mh$ = ImDrawList_AddImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddImage", self, user_texture_id, p_min, p_max, uv_min, uv_max, col);
            }
            mh$.invokeExact(self, user_texture_id, p_min, p_max, uv_min, uv_max, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddImageQuad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddImageQuad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddImageQuad(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 uv1, const ImVec2 uv2, const ImVec2 uv3, const ImVec2 uv4, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddImageQuad$descriptor() {
        return ImDrawList_AddImageQuad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddImageQuad(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 uv1, const ImVec2 uv2, const ImVec2 uv3, const ImVec2 uv4, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_AddImageQuad$handle() {
        return ImDrawList_AddImageQuad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddImageQuad(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 uv1, const ImVec2 uv2, const ImVec2 uv3, const ImVec2 uv4, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_AddImageQuad$address() {
        return ImDrawList_AddImageQuad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddImageQuad(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 uv1, const ImVec2 uv2, const ImVec2 uv3, const ImVec2 uv4, ImU32 col)
     * }
     */
    public static void ImDrawList_AddImageQuad(MemorySegment self, MemorySegment user_texture_id, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, MemorySegment uv1, MemorySegment uv2, MemorySegment uv3, MemorySegment uv4, int col) {
        var mh$ = ImDrawList_AddImageQuad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddImageQuad", self, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
            }
            mh$.invokeExact(self, user_texture_id, p1, p2, p3, p4, uv1, uv2, uv3, uv4, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddImageRounded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddImageRounded");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddImageRounded(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p_min, const ImVec2 p_max, const ImVec2 uv_min, const ImVec2 uv_max, ImU32 col, float rounding, ImDrawFlags flags)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddImageRounded$descriptor() {
        return ImDrawList_AddImageRounded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddImageRounded(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p_min, const ImVec2 p_max, const ImVec2 uv_min, const ImVec2 uv_max, ImU32 col, float rounding, ImDrawFlags flags)
     * }
     */
    public static MethodHandle ImDrawList_AddImageRounded$handle() {
        return ImDrawList_AddImageRounded.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddImageRounded(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p_min, const ImVec2 p_max, const ImVec2 uv_min, const ImVec2 uv_max, ImU32 col, float rounding, ImDrawFlags flags)
     * }
     */
    public static MemorySegment ImDrawList_AddImageRounded$address() {
        return ImDrawList_AddImageRounded.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddImageRounded(ImDrawList *self, ImTextureID user_texture_id, const ImVec2 p_min, const ImVec2 p_max, const ImVec2 uv_min, const ImVec2 uv_max, ImU32 col, float rounding, ImDrawFlags flags)
     * }
     */
    public static void ImDrawList_AddImageRounded(MemorySegment self, MemorySegment user_texture_id, MemorySegment p_min, MemorySegment p_max, MemorySegment uv_min, MemorySegment uv_max, int col, float rounding, int flags) {
        var mh$ = ImDrawList_AddImageRounded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddImageRounded", self, user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, flags);
            }
            mh$.invokeExact(self, user_texture_id, p_min, p_max, uv_min, uv_max, col, rounding, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathClear(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathClear$descriptor() {
        return ImDrawList_PathClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathClear(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_PathClear$handle() {
        return ImDrawList_PathClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathClear(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_PathClear$address() {
        return ImDrawList_PathClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathClear(ImDrawList *self)
     * }
     */
    public static void ImDrawList_PathClear(MemorySegment self) {
        var mh$ = ImDrawList_PathClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathClear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathLineTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathLineTo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathLineTo(ImDrawList *self, const ImVec2 pos)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathLineTo$descriptor() {
        return ImDrawList_PathLineTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathLineTo(ImDrawList *self, const ImVec2 pos)
     * }
     */
    public static MethodHandle ImDrawList_PathLineTo$handle() {
        return ImDrawList_PathLineTo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathLineTo(ImDrawList *self, const ImVec2 pos)
     * }
     */
    public static MemorySegment ImDrawList_PathLineTo$address() {
        return ImDrawList_PathLineTo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathLineTo(ImDrawList *self, const ImVec2 pos)
     * }
     */
    public static void ImDrawList_PathLineTo(MemorySegment self, MemorySegment pos) {
        var mh$ = ImDrawList_PathLineTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathLineTo", self, pos);
            }
            mh$.invokeExact(self, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathLineToMergeDuplicate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathLineToMergeDuplicate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathLineToMergeDuplicate(ImDrawList *self, const ImVec2 pos)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathLineToMergeDuplicate$descriptor() {
        return ImDrawList_PathLineToMergeDuplicate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathLineToMergeDuplicate(ImDrawList *self, const ImVec2 pos)
     * }
     */
    public static MethodHandle ImDrawList_PathLineToMergeDuplicate$handle() {
        return ImDrawList_PathLineToMergeDuplicate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathLineToMergeDuplicate(ImDrawList *self, const ImVec2 pos)
     * }
     */
    public static MemorySegment ImDrawList_PathLineToMergeDuplicate$address() {
        return ImDrawList_PathLineToMergeDuplicate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathLineToMergeDuplicate(ImDrawList *self, const ImVec2 pos)
     * }
     */
    public static void ImDrawList_PathLineToMergeDuplicate(MemorySegment self, MemorySegment pos) {
        var mh$ = ImDrawList_PathLineToMergeDuplicate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathLineToMergeDuplicate", self, pos);
            }
            mh$.invokeExact(self, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathFillConvex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathFillConvex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathFillConvex(ImDrawList *self, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathFillConvex$descriptor() {
        return ImDrawList_PathFillConvex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathFillConvex(ImDrawList *self, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_PathFillConvex$handle() {
        return ImDrawList_PathFillConvex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathFillConvex(ImDrawList *self, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_PathFillConvex$address() {
        return ImDrawList_PathFillConvex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathFillConvex(ImDrawList *self, ImU32 col)
     * }
     */
    public static void ImDrawList_PathFillConvex(MemorySegment self, int col) {
        var mh$ = ImDrawList_PathFillConvex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathFillConvex", self, col);
            }
            mh$.invokeExact(self, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathFillConcave {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathFillConcave");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathFillConcave(ImDrawList *self, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathFillConcave$descriptor() {
        return ImDrawList_PathFillConcave.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathFillConcave(ImDrawList *self, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_PathFillConcave$handle() {
        return ImDrawList_PathFillConcave.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathFillConcave(ImDrawList *self, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_PathFillConcave$address() {
        return ImDrawList_PathFillConcave.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathFillConcave(ImDrawList *self, ImU32 col)
     * }
     */
    public static void ImDrawList_PathFillConcave(MemorySegment self, int col) {
        var mh$ = ImDrawList_PathFillConcave.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathFillConcave", self, col);
            }
            mh$.invokeExact(self, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathStroke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathStroke");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathStroke(ImDrawList *self, ImU32 col, ImDrawFlags flags, float thickness)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathStroke$descriptor() {
        return ImDrawList_PathStroke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathStroke(ImDrawList *self, ImU32 col, ImDrawFlags flags, float thickness)
     * }
     */
    public static MethodHandle ImDrawList_PathStroke$handle() {
        return ImDrawList_PathStroke.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathStroke(ImDrawList *self, ImU32 col, ImDrawFlags flags, float thickness)
     * }
     */
    public static MemorySegment ImDrawList_PathStroke$address() {
        return ImDrawList_PathStroke.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathStroke(ImDrawList *self, ImU32 col, ImDrawFlags flags, float thickness)
     * }
     */
    public static void ImDrawList_PathStroke(MemorySegment self, int col, int flags, float thickness) {
        var mh$ = ImDrawList_PathStroke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathStroke", self, col, flags, thickness);
            }
            mh$.invokeExact(self, col, flags, thickness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathArcTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathArcTo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathArcTo(ImDrawList *self, const ImVec2 center, float radius, float a_min, float a_max, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathArcTo$descriptor() {
        return ImDrawList_PathArcTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathArcTo(ImDrawList *self, const ImVec2 center, float radius, float a_min, float a_max, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList_PathArcTo$handle() {
        return ImDrawList_PathArcTo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathArcTo(ImDrawList *self, const ImVec2 center, float radius, float a_min, float a_max, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList_PathArcTo$address() {
        return ImDrawList_PathArcTo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathArcTo(ImDrawList *self, const ImVec2 center, float radius, float a_min, float a_max, int num_segments)
     * }
     */
    public static void ImDrawList_PathArcTo(MemorySegment self, MemorySegment center, float radius, float a_min, float a_max, int num_segments) {
        var mh$ = ImDrawList_PathArcTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathArcTo", self, center, radius, a_min, a_max, num_segments);
            }
            mh$.invokeExact(self, center, radius, a_min, a_max, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathArcToFast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathArcToFast");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathArcToFast(ImDrawList *self, const ImVec2 center, float radius, int a_min_of_12, int a_max_of_12)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathArcToFast$descriptor() {
        return ImDrawList_PathArcToFast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathArcToFast(ImDrawList *self, const ImVec2 center, float radius, int a_min_of_12, int a_max_of_12)
     * }
     */
    public static MethodHandle ImDrawList_PathArcToFast$handle() {
        return ImDrawList_PathArcToFast.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathArcToFast(ImDrawList *self, const ImVec2 center, float radius, int a_min_of_12, int a_max_of_12)
     * }
     */
    public static MemorySegment ImDrawList_PathArcToFast$address() {
        return ImDrawList_PathArcToFast.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathArcToFast(ImDrawList *self, const ImVec2 center, float radius, int a_min_of_12, int a_max_of_12)
     * }
     */
    public static void ImDrawList_PathArcToFast(MemorySegment self, MemorySegment center, float radius, int a_min_of_12, int a_max_of_12) {
        var mh$ = ImDrawList_PathArcToFast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathArcToFast", self, center, radius, a_min_of_12, a_max_of_12);
            }
            mh$.invokeExact(self, center, radius, a_min_of_12, a_max_of_12);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathEllipticalArcTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathEllipticalArcTo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathEllipticalArcTo(ImDrawList *self, const ImVec2 center, const ImVec2 radius, float rot, float a_min, float a_max, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathEllipticalArcTo$descriptor() {
        return ImDrawList_PathEllipticalArcTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathEllipticalArcTo(ImDrawList *self, const ImVec2 center, const ImVec2 radius, float rot, float a_min, float a_max, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList_PathEllipticalArcTo$handle() {
        return ImDrawList_PathEllipticalArcTo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathEllipticalArcTo(ImDrawList *self, const ImVec2 center, const ImVec2 radius, float rot, float a_min, float a_max, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList_PathEllipticalArcTo$address() {
        return ImDrawList_PathEllipticalArcTo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathEllipticalArcTo(ImDrawList *self, const ImVec2 center, const ImVec2 radius, float rot, float a_min, float a_max, int num_segments)
     * }
     */
    public static void ImDrawList_PathEllipticalArcTo(MemorySegment self, MemorySegment center, MemorySegment radius, float rot, float a_min, float a_max, int num_segments) {
        var mh$ = ImDrawList_PathEllipticalArcTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathEllipticalArcTo", self, center, radius, rot, a_min, a_max, num_segments);
            }
            mh$.invokeExact(self, center, radius, rot, a_min, a_max, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathBezierCubicCurveTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathBezierCubicCurveTo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathBezierCubicCurveTo(ImDrawList *self, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathBezierCubicCurveTo$descriptor() {
        return ImDrawList_PathBezierCubicCurveTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathBezierCubicCurveTo(ImDrawList *self, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList_PathBezierCubicCurveTo$handle() {
        return ImDrawList_PathBezierCubicCurveTo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathBezierCubicCurveTo(ImDrawList *self, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList_PathBezierCubicCurveTo$address() {
        return ImDrawList_PathBezierCubicCurveTo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathBezierCubicCurveTo(ImDrawList *self, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, int num_segments)
     * }
     */
    public static void ImDrawList_PathBezierCubicCurveTo(MemorySegment self, MemorySegment p2, MemorySegment p3, MemorySegment p4, int num_segments) {
        var mh$ = ImDrawList_PathBezierCubicCurveTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathBezierCubicCurveTo", self, p2, p3, p4, num_segments);
            }
            mh$.invokeExact(self, p2, p3, p4, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathBezierQuadraticCurveTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathBezierQuadraticCurveTo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList *self, const ImVec2 p2, const ImVec2 p3, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathBezierQuadraticCurveTo$descriptor() {
        return ImDrawList_PathBezierQuadraticCurveTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList *self, const ImVec2 p2, const ImVec2 p3, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList_PathBezierQuadraticCurveTo$handle() {
        return ImDrawList_PathBezierQuadraticCurveTo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList *self, const ImVec2 p2, const ImVec2 p3, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList_PathBezierQuadraticCurveTo$address() {
        return ImDrawList_PathBezierQuadraticCurveTo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathBezierQuadraticCurveTo(ImDrawList *self, const ImVec2 p2, const ImVec2 p3, int num_segments)
     * }
     */
    public static void ImDrawList_PathBezierQuadraticCurveTo(MemorySegment self, MemorySegment p2, MemorySegment p3, int num_segments) {
        var mh$ = ImDrawList_PathBezierQuadraticCurveTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathBezierQuadraticCurveTo", self, p2, p3, num_segments);
            }
            mh$.invokeExact(self, p2, p3, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PathRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PathRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathRect(ImDrawList *self, const ImVec2 rect_min, const ImVec2 rect_max, float rounding, ImDrawFlags flags)
     * }
     */
    public static FunctionDescriptor ImDrawList_PathRect$descriptor() {
        return ImDrawList_PathRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathRect(ImDrawList *self, const ImVec2 rect_min, const ImVec2 rect_max, float rounding, ImDrawFlags flags)
     * }
     */
    public static MethodHandle ImDrawList_PathRect$handle() {
        return ImDrawList_PathRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PathRect(ImDrawList *self, const ImVec2 rect_min, const ImVec2 rect_max, float rounding, ImDrawFlags flags)
     * }
     */
    public static MemorySegment ImDrawList_PathRect$address() {
        return ImDrawList_PathRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PathRect(ImDrawList *self, const ImVec2 rect_min, const ImVec2 rect_max, float rounding, ImDrawFlags flags)
     * }
     */
    public static void ImDrawList_PathRect(MemorySegment self, MemorySegment rect_min, MemorySegment rect_max, float rounding, int flags) {
        var mh$ = ImDrawList_PathRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PathRect", self, rect_min, rect_max, rounding, flags);
            }
            mh$.invokeExact(self, rect_min, rect_max, rounding, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddCallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddCallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddCallback(ImDrawList *self, ImDrawCallback callback, void *callback_data)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddCallback$descriptor() {
        return ImDrawList_AddCallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddCallback(ImDrawList *self, ImDrawCallback callback, void *callback_data)
     * }
     */
    public static MethodHandle ImDrawList_AddCallback$handle() {
        return ImDrawList_AddCallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddCallback(ImDrawList *self, ImDrawCallback callback, void *callback_data)
     * }
     */
    public static MemorySegment ImDrawList_AddCallback$address() {
        return ImDrawList_AddCallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddCallback(ImDrawList *self, ImDrawCallback callback, void *callback_data)
     * }
     */
    public static void ImDrawList_AddCallback(MemorySegment self, MemorySegment callback, MemorySegment callback_data) {
        var mh$ = ImDrawList_AddCallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddCallback", self, callback, callback_data);
            }
            mh$.invokeExact(self, callback, callback_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_AddDrawCmd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_AddDrawCmd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddDrawCmd(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_AddDrawCmd$descriptor() {
        return ImDrawList_AddDrawCmd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddDrawCmd(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_AddDrawCmd$handle() {
        return ImDrawList_AddDrawCmd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_AddDrawCmd(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_AddDrawCmd$address() {
        return ImDrawList_AddDrawCmd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_AddDrawCmd(ImDrawList *self)
     * }
     */
    public static void ImDrawList_AddDrawCmd(MemorySegment self) {
        var mh$ = ImDrawList_AddDrawCmd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_AddDrawCmd", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_CloneOutput {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_CloneOutput");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawList *ImDrawList_CloneOutput(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_CloneOutput$descriptor() {
        return ImDrawList_CloneOutput.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawList *ImDrawList_CloneOutput(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_CloneOutput$handle() {
        return ImDrawList_CloneOutput.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawList *ImDrawList_CloneOutput(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_CloneOutput$address() {
        return ImDrawList_CloneOutput.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawList *ImDrawList_CloneOutput(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_CloneOutput(MemorySegment self) {
        var mh$ = ImDrawList_CloneOutput.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_CloneOutput", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_ChannelsSplit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_ChannelsSplit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsSplit(ImDrawList *self, int count)
     * }
     */
    public static FunctionDescriptor ImDrawList_ChannelsSplit$descriptor() {
        return ImDrawList_ChannelsSplit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsSplit(ImDrawList *self, int count)
     * }
     */
    public static MethodHandle ImDrawList_ChannelsSplit$handle() {
        return ImDrawList_ChannelsSplit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsSplit(ImDrawList *self, int count)
     * }
     */
    public static MemorySegment ImDrawList_ChannelsSplit$address() {
        return ImDrawList_ChannelsSplit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsSplit(ImDrawList *self, int count)
     * }
     */
    public static void ImDrawList_ChannelsSplit(MemorySegment self, int count) {
        var mh$ = ImDrawList_ChannelsSplit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_ChannelsSplit", self, count);
            }
            mh$.invokeExact(self, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_ChannelsMerge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_ChannelsMerge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsMerge(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList_ChannelsMerge$descriptor() {
        return ImDrawList_ChannelsMerge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsMerge(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList_ChannelsMerge$handle() {
        return ImDrawList_ChannelsMerge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsMerge(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList_ChannelsMerge$address() {
        return ImDrawList_ChannelsMerge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsMerge(ImDrawList *self)
     * }
     */
    public static void ImDrawList_ChannelsMerge(MemorySegment self) {
        var mh$ = ImDrawList_ChannelsMerge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_ChannelsMerge", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_ChannelsSetCurrent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_ChannelsSetCurrent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsSetCurrent(ImDrawList *self, int n)
     * }
     */
    public static FunctionDescriptor ImDrawList_ChannelsSetCurrent$descriptor() {
        return ImDrawList_ChannelsSetCurrent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsSetCurrent(ImDrawList *self, int n)
     * }
     */
    public static MethodHandle ImDrawList_ChannelsSetCurrent$handle() {
        return ImDrawList_ChannelsSetCurrent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsSetCurrent(ImDrawList *self, int n)
     * }
     */
    public static MemorySegment ImDrawList_ChannelsSetCurrent$address() {
        return ImDrawList_ChannelsSetCurrent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_ChannelsSetCurrent(ImDrawList *self, int n)
     * }
     */
    public static void ImDrawList_ChannelsSetCurrent(MemorySegment self, int n) {
        var mh$ = ImDrawList_ChannelsSetCurrent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_ChannelsSetCurrent", self, n);
            }
            mh$.invokeExact(self, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PrimReserve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PrimReserve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimReserve(ImDrawList *self, int idx_count, int vtx_count)
     * }
     */
    public static FunctionDescriptor ImDrawList_PrimReserve$descriptor() {
        return ImDrawList_PrimReserve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimReserve(ImDrawList *self, int idx_count, int vtx_count)
     * }
     */
    public static MethodHandle ImDrawList_PrimReserve$handle() {
        return ImDrawList_PrimReserve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimReserve(ImDrawList *self, int idx_count, int vtx_count)
     * }
     */
    public static MemorySegment ImDrawList_PrimReserve$address() {
        return ImDrawList_PrimReserve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PrimReserve(ImDrawList *self, int idx_count, int vtx_count)
     * }
     */
    public static void ImDrawList_PrimReserve(MemorySegment self, int idx_count, int vtx_count) {
        var mh$ = ImDrawList_PrimReserve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PrimReserve", self, idx_count, vtx_count);
            }
            mh$.invokeExact(self, idx_count, vtx_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PrimUnreserve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PrimUnreserve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimUnreserve(ImDrawList *self, int idx_count, int vtx_count)
     * }
     */
    public static FunctionDescriptor ImDrawList_PrimUnreserve$descriptor() {
        return ImDrawList_PrimUnreserve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimUnreserve(ImDrawList *self, int idx_count, int vtx_count)
     * }
     */
    public static MethodHandle ImDrawList_PrimUnreserve$handle() {
        return ImDrawList_PrimUnreserve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimUnreserve(ImDrawList *self, int idx_count, int vtx_count)
     * }
     */
    public static MemorySegment ImDrawList_PrimUnreserve$address() {
        return ImDrawList_PrimUnreserve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PrimUnreserve(ImDrawList *self, int idx_count, int vtx_count)
     * }
     */
    public static void ImDrawList_PrimUnreserve(MemorySegment self, int idx_count, int vtx_count) {
        var mh$ = ImDrawList_PrimUnreserve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PrimUnreserve", self, idx_count, vtx_count);
            }
            mh$.invokeExact(self, idx_count, vtx_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PrimRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PrimRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimRect(ImDrawList *self, const ImVec2 a, const ImVec2 b, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_PrimRect$descriptor() {
        return ImDrawList_PrimRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimRect(ImDrawList *self, const ImVec2 a, const ImVec2 b, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_PrimRect$handle() {
        return ImDrawList_PrimRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimRect(ImDrawList *self, const ImVec2 a, const ImVec2 b, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_PrimRect$address() {
        return ImDrawList_PrimRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PrimRect(ImDrawList *self, const ImVec2 a, const ImVec2 b, ImU32 col)
     * }
     */
    public static void ImDrawList_PrimRect(MemorySegment self, MemorySegment a, MemorySegment b, int col) {
        var mh$ = ImDrawList_PrimRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PrimRect", self, a, b, col);
            }
            mh$.invokeExact(self, a, b, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PrimRectUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PrimRectUV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimRectUV(ImDrawList *self, const ImVec2 a, const ImVec2 b, const ImVec2 uv_a, const ImVec2 uv_b, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_PrimRectUV$descriptor() {
        return ImDrawList_PrimRectUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimRectUV(ImDrawList *self, const ImVec2 a, const ImVec2 b, const ImVec2 uv_a, const ImVec2 uv_b, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_PrimRectUV$handle() {
        return ImDrawList_PrimRectUV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimRectUV(ImDrawList *self, const ImVec2 a, const ImVec2 b, const ImVec2 uv_a, const ImVec2 uv_b, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_PrimRectUV$address() {
        return ImDrawList_PrimRectUV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PrimRectUV(ImDrawList *self, const ImVec2 a, const ImVec2 b, const ImVec2 uv_a, const ImVec2 uv_b, ImU32 col)
     * }
     */
    public static void ImDrawList_PrimRectUV(MemorySegment self, MemorySegment a, MemorySegment b, MemorySegment uv_a, MemorySegment uv_b, int col) {
        var mh$ = ImDrawList_PrimRectUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PrimRectUV", self, a, b, uv_a, uv_b, col);
            }
            mh$.invokeExact(self, a, b, uv_a, uv_b, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PrimQuadUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PrimQuadUV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimQuadUV(ImDrawList *self, const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 d, const ImVec2 uv_a, const ImVec2 uv_b, const ImVec2 uv_c, const ImVec2 uv_d, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_PrimQuadUV$descriptor() {
        return ImDrawList_PrimQuadUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimQuadUV(ImDrawList *self, const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 d, const ImVec2 uv_a, const ImVec2 uv_b, const ImVec2 uv_c, const ImVec2 uv_d, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_PrimQuadUV$handle() {
        return ImDrawList_PrimQuadUV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimQuadUV(ImDrawList *self, const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 d, const ImVec2 uv_a, const ImVec2 uv_b, const ImVec2 uv_c, const ImVec2 uv_d, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_PrimQuadUV$address() {
        return ImDrawList_PrimQuadUV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PrimQuadUV(ImDrawList *self, const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 d, const ImVec2 uv_a, const ImVec2 uv_b, const ImVec2 uv_c, const ImVec2 uv_d, ImU32 col)
     * }
     */
    public static void ImDrawList_PrimQuadUV(MemorySegment self, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment d, MemorySegment uv_a, MemorySegment uv_b, MemorySegment uv_c, MemorySegment uv_d, int col) {
        var mh$ = ImDrawList_PrimQuadUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PrimQuadUV", self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);
            }
            mh$.invokeExact(self, a, b, c, d, uv_a, uv_b, uv_c, uv_d, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PrimWriteVtx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PrimWriteVtx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimWriteVtx(ImDrawList *self, const ImVec2 pos, const ImVec2 uv, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_PrimWriteVtx$descriptor() {
        return ImDrawList_PrimWriteVtx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimWriteVtx(ImDrawList *self, const ImVec2 pos, const ImVec2 uv, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_PrimWriteVtx$handle() {
        return ImDrawList_PrimWriteVtx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimWriteVtx(ImDrawList *self, const ImVec2 pos, const ImVec2 uv, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_PrimWriteVtx$address() {
        return ImDrawList_PrimWriteVtx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PrimWriteVtx(ImDrawList *self, const ImVec2 pos, const ImVec2 uv, ImU32 col)
     * }
     */
    public static void ImDrawList_PrimWriteVtx(MemorySegment self, MemorySegment pos, MemorySegment uv, int col) {
        var mh$ = ImDrawList_PrimWriteVtx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PrimWriteVtx", self, pos, uv, col);
            }
            mh$.invokeExact(self, pos, uv, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PrimWriteIdx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_SHORT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PrimWriteIdx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimWriteIdx(ImDrawList *self, ImDrawIdx idx)
     * }
     */
    public static FunctionDescriptor ImDrawList_PrimWriteIdx$descriptor() {
        return ImDrawList_PrimWriteIdx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimWriteIdx(ImDrawList *self, ImDrawIdx idx)
     * }
     */
    public static MethodHandle ImDrawList_PrimWriteIdx$handle() {
        return ImDrawList_PrimWriteIdx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimWriteIdx(ImDrawList *self, ImDrawIdx idx)
     * }
     */
    public static MemorySegment ImDrawList_PrimWriteIdx$address() {
        return ImDrawList_PrimWriteIdx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PrimWriteIdx(ImDrawList *self, ImDrawIdx idx)
     * }
     */
    public static void ImDrawList_PrimWriteIdx(MemorySegment self, short idx) {
        var mh$ = ImDrawList_PrimWriteIdx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PrimWriteIdx", self, idx);
            }
            mh$.invokeExact(self, idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList_PrimVtx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList_PrimVtx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimVtx(ImDrawList *self, const ImVec2 pos, const ImVec2 uv, ImU32 col)
     * }
     */
    public static FunctionDescriptor ImDrawList_PrimVtx$descriptor() {
        return ImDrawList_PrimVtx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimVtx(ImDrawList *self, const ImVec2 pos, const ImVec2 uv, ImU32 col)
     * }
     */
    public static MethodHandle ImDrawList_PrimVtx$handle() {
        return ImDrawList_PrimVtx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList_PrimVtx(ImDrawList *self, const ImVec2 pos, const ImVec2 uv, ImU32 col)
     * }
     */
    public static MemorySegment ImDrawList_PrimVtx$address() {
        return ImDrawList_PrimVtx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList_PrimVtx(ImDrawList *self, const ImVec2 pos, const ImVec2 uv, ImU32 col)
     * }
     */
    public static void ImDrawList_PrimVtx(MemorySegment self, MemorySegment pos, MemorySegment uv, int col) {
        var mh$ = ImDrawList_PrimVtx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList_PrimVtx", self, pos, uv, col);
            }
            mh$.invokeExact(self, pos, uv, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__ResetForNewFrame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__ResetForNewFrame");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList__ResetForNewFrame(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList__ResetForNewFrame$descriptor() {
        return ImDrawList__ResetForNewFrame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList__ResetForNewFrame(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList__ResetForNewFrame$handle() {
        return ImDrawList__ResetForNewFrame.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList__ResetForNewFrame(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList__ResetForNewFrame$address() {
        return ImDrawList__ResetForNewFrame.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList__ResetForNewFrame(ImDrawList *self)
     * }
     */
    public static void ImDrawList__ResetForNewFrame(MemorySegment self) {
        var mh$ = ImDrawList__ResetForNewFrame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__ResetForNewFrame", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__ClearFreeMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__ClearFreeMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList__ClearFreeMemory(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList__ClearFreeMemory$descriptor() {
        return ImDrawList__ClearFreeMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList__ClearFreeMemory(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList__ClearFreeMemory$handle() {
        return ImDrawList__ClearFreeMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList__ClearFreeMemory(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList__ClearFreeMemory$address() {
        return ImDrawList__ClearFreeMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList__ClearFreeMemory(ImDrawList *self)
     * }
     */
    public static void ImDrawList__ClearFreeMemory(MemorySegment self) {
        var mh$ = ImDrawList__ClearFreeMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__ClearFreeMemory", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__PopUnusedDrawCmd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__PopUnusedDrawCmd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList__PopUnusedDrawCmd(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList__PopUnusedDrawCmd$descriptor() {
        return ImDrawList__PopUnusedDrawCmd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList__PopUnusedDrawCmd(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList__PopUnusedDrawCmd$handle() {
        return ImDrawList__PopUnusedDrawCmd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList__PopUnusedDrawCmd(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList__PopUnusedDrawCmd$address() {
        return ImDrawList__PopUnusedDrawCmd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList__PopUnusedDrawCmd(ImDrawList *self)
     * }
     */
    public static void ImDrawList__PopUnusedDrawCmd(MemorySegment self) {
        var mh$ = ImDrawList__PopUnusedDrawCmd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__PopUnusedDrawCmd", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__TryMergeDrawCmds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__TryMergeDrawCmds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList__TryMergeDrawCmds(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList__TryMergeDrawCmds$descriptor() {
        return ImDrawList__TryMergeDrawCmds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList__TryMergeDrawCmds(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList__TryMergeDrawCmds$handle() {
        return ImDrawList__TryMergeDrawCmds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList__TryMergeDrawCmds(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList__TryMergeDrawCmds$address() {
        return ImDrawList__TryMergeDrawCmds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList__TryMergeDrawCmds(ImDrawList *self)
     * }
     */
    public static void ImDrawList__TryMergeDrawCmds(MemorySegment self) {
        var mh$ = ImDrawList__TryMergeDrawCmds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__TryMergeDrawCmds", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__OnChangedClipRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__OnChangedClipRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedClipRect(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList__OnChangedClipRect$descriptor() {
        return ImDrawList__OnChangedClipRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedClipRect(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList__OnChangedClipRect$handle() {
        return ImDrawList__OnChangedClipRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedClipRect(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList__OnChangedClipRect$address() {
        return ImDrawList__OnChangedClipRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedClipRect(ImDrawList *self)
     * }
     */
    public static void ImDrawList__OnChangedClipRect(MemorySegment self) {
        var mh$ = ImDrawList__OnChangedClipRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__OnChangedClipRect", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__OnChangedTextureID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__OnChangedTextureID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedTextureID(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList__OnChangedTextureID$descriptor() {
        return ImDrawList__OnChangedTextureID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedTextureID(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList__OnChangedTextureID$handle() {
        return ImDrawList__OnChangedTextureID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedTextureID(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList__OnChangedTextureID$address() {
        return ImDrawList__OnChangedTextureID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedTextureID(ImDrawList *self)
     * }
     */
    public static void ImDrawList__OnChangedTextureID(MemorySegment self) {
        var mh$ = ImDrawList__OnChangedTextureID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__OnChangedTextureID", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__OnChangedVtxOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__OnChangedVtxOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedVtxOffset(ImDrawList *self)
     * }
     */
    public static FunctionDescriptor ImDrawList__OnChangedVtxOffset$descriptor() {
        return ImDrawList__OnChangedVtxOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedVtxOffset(ImDrawList *self)
     * }
     */
    public static MethodHandle ImDrawList__OnChangedVtxOffset$handle() {
        return ImDrawList__OnChangedVtxOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedVtxOffset(ImDrawList *self)
     * }
     */
    public static MemorySegment ImDrawList__OnChangedVtxOffset$address() {
        return ImDrawList__OnChangedVtxOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList__OnChangedVtxOffset(ImDrawList *self)
     * }
     */
    public static void ImDrawList__OnChangedVtxOffset(MemorySegment self) {
        var mh$ = ImDrawList__OnChangedVtxOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__OnChangedVtxOffset", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__CalcCircleAutoSegmentCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__CalcCircleAutoSegmentCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImDrawList__CalcCircleAutoSegmentCount(ImDrawList *self, float radius)
     * }
     */
    public static FunctionDescriptor ImDrawList__CalcCircleAutoSegmentCount$descriptor() {
        return ImDrawList__CalcCircleAutoSegmentCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImDrawList__CalcCircleAutoSegmentCount(ImDrawList *self, float radius)
     * }
     */
    public static MethodHandle ImDrawList__CalcCircleAutoSegmentCount$handle() {
        return ImDrawList__CalcCircleAutoSegmentCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImDrawList__CalcCircleAutoSegmentCount(ImDrawList *self, float radius)
     * }
     */
    public static MemorySegment ImDrawList__CalcCircleAutoSegmentCount$address() {
        return ImDrawList__CalcCircleAutoSegmentCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImDrawList__CalcCircleAutoSegmentCount(ImDrawList *self, float radius)
     * }
     */
    public static int ImDrawList__CalcCircleAutoSegmentCount(MemorySegment self, float radius) {
        var mh$ = ImDrawList__CalcCircleAutoSegmentCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__CalcCircleAutoSegmentCount", self, radius);
            }
            return (int)mh$.invokeExact(self, radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__PathArcToFastEx {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__PathArcToFastEx");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList__PathArcToFastEx(ImDrawList *self, const ImVec2 center, float radius, int a_min_sample, int a_max_sample, int a_step)
     * }
     */
    public static FunctionDescriptor ImDrawList__PathArcToFastEx$descriptor() {
        return ImDrawList__PathArcToFastEx.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList__PathArcToFastEx(ImDrawList *self, const ImVec2 center, float radius, int a_min_sample, int a_max_sample, int a_step)
     * }
     */
    public static MethodHandle ImDrawList__PathArcToFastEx$handle() {
        return ImDrawList__PathArcToFastEx.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList__PathArcToFastEx(ImDrawList *self, const ImVec2 center, float radius, int a_min_sample, int a_max_sample, int a_step)
     * }
     */
    public static MemorySegment ImDrawList__PathArcToFastEx$address() {
        return ImDrawList__PathArcToFastEx.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList__PathArcToFastEx(ImDrawList *self, const ImVec2 center, float radius, int a_min_sample, int a_max_sample, int a_step)
     * }
     */
    public static void ImDrawList__PathArcToFastEx(MemorySegment self, MemorySegment center, float radius, int a_min_sample, int a_max_sample, int a_step) {
        var mh$ = ImDrawList__PathArcToFastEx.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__PathArcToFastEx", self, center, radius, a_min_sample, a_max_sample, a_step);
            }
            mh$.invokeExact(self, center, radius, a_min_sample, a_max_sample, a_step);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawList__PathArcToN {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawList__PathArcToN");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawList__PathArcToN(ImDrawList *self, const ImVec2 center, float radius, float a_min, float a_max, int num_segments)
     * }
     */
    public static FunctionDescriptor ImDrawList__PathArcToN$descriptor() {
        return ImDrawList__PathArcToN.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawList__PathArcToN(ImDrawList *self, const ImVec2 center, float radius, float a_min, float a_max, int num_segments)
     * }
     */
    public static MethodHandle ImDrawList__PathArcToN$handle() {
        return ImDrawList__PathArcToN.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawList__PathArcToN(ImDrawList *self, const ImVec2 center, float radius, float a_min, float a_max, int num_segments)
     * }
     */
    public static MemorySegment ImDrawList__PathArcToN$address() {
        return ImDrawList__PathArcToN.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawList__PathArcToN(ImDrawList *self, const ImVec2 center, float radius, float a_min, float a_max, int num_segments)
     * }
     */
    public static void ImDrawList__PathArcToN(MemorySegment self, MemorySegment center, float radius, float a_min, float a_max, int num_segments) {
        var mh$ = ImDrawList__PathArcToN.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawList__PathArcToN", self, center, radius, a_min, a_max, num_segments);
            }
            mh$.invokeExact(self, center, radius, a_min, a_max, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawData_ImDrawData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawData_ImDrawData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawData *ImDrawData_ImDrawData()
     * }
     */
    public static FunctionDescriptor ImDrawData_ImDrawData$descriptor() {
        return ImDrawData_ImDrawData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawData *ImDrawData_ImDrawData()
     * }
     */
    public static MethodHandle ImDrawData_ImDrawData$handle() {
        return ImDrawData_ImDrawData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawData *ImDrawData_ImDrawData()
     * }
     */
    public static MemorySegment ImDrawData_ImDrawData$address() {
        return ImDrawData_ImDrawData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawData *ImDrawData_ImDrawData()
     * }
     */
    public static MemorySegment ImDrawData_ImDrawData() {
        var mh$ = ImDrawData_ImDrawData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawData_ImDrawData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawData_destroy(ImDrawData *self)
     * }
     */
    public static FunctionDescriptor ImDrawData_destroy$descriptor() {
        return ImDrawData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawData_destroy(ImDrawData *self)
     * }
     */
    public static MethodHandle ImDrawData_destroy$handle() {
        return ImDrawData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawData_destroy(ImDrawData *self)
     * }
     */
    public static MemorySegment ImDrawData_destroy$address() {
        return ImDrawData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawData_destroy(ImDrawData *self)
     * }
     */
    public static void ImDrawData_destroy(MemorySegment self) {
        var mh$ = ImDrawData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawData_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawData_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawData_Clear(ImDrawData *self)
     * }
     */
    public static FunctionDescriptor ImDrawData_Clear$descriptor() {
        return ImDrawData_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawData_Clear(ImDrawData *self)
     * }
     */
    public static MethodHandle ImDrawData_Clear$handle() {
        return ImDrawData_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawData_Clear(ImDrawData *self)
     * }
     */
    public static MemorySegment ImDrawData_Clear$address() {
        return ImDrawData_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawData_Clear(ImDrawData *self)
     * }
     */
    public static void ImDrawData_Clear(MemorySegment self) {
        var mh$ = ImDrawData_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawData_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawData_AddDrawList {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawData_AddDrawList");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawData_AddDrawList(ImDrawData *self, ImDrawList *draw_list)
     * }
     */
    public static FunctionDescriptor ImDrawData_AddDrawList$descriptor() {
        return ImDrawData_AddDrawList.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawData_AddDrawList(ImDrawData *self, ImDrawList *draw_list)
     * }
     */
    public static MethodHandle ImDrawData_AddDrawList$handle() {
        return ImDrawData_AddDrawList.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawData_AddDrawList(ImDrawData *self, ImDrawList *draw_list)
     * }
     */
    public static MemorySegment ImDrawData_AddDrawList$address() {
        return ImDrawData_AddDrawList.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawData_AddDrawList(ImDrawData *self, ImDrawList *draw_list)
     * }
     */
    public static void ImDrawData_AddDrawList(MemorySegment self, MemorySegment draw_list) {
        var mh$ = ImDrawData_AddDrawList.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawData_AddDrawList", self, draw_list);
            }
            mh$.invokeExact(self, draw_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawData_DeIndexAllBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawData_DeIndexAllBuffers");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawData_DeIndexAllBuffers(ImDrawData *self)
     * }
     */
    public static FunctionDescriptor ImDrawData_DeIndexAllBuffers$descriptor() {
        return ImDrawData_DeIndexAllBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawData_DeIndexAllBuffers(ImDrawData *self)
     * }
     */
    public static MethodHandle ImDrawData_DeIndexAllBuffers$handle() {
        return ImDrawData_DeIndexAllBuffers.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawData_DeIndexAllBuffers(ImDrawData *self)
     * }
     */
    public static MemorySegment ImDrawData_DeIndexAllBuffers$address() {
        return ImDrawData_DeIndexAllBuffers.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawData_DeIndexAllBuffers(ImDrawData *self)
     * }
     */
    public static void ImDrawData_DeIndexAllBuffers(MemorySegment self) {
        var mh$ = ImDrawData_DeIndexAllBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawData_DeIndexAllBuffers", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawData_ScaleClipRects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawData_ScaleClipRects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawData_ScaleClipRects(ImDrawData *self, const ImVec2 fb_scale)
     * }
     */
    public static FunctionDescriptor ImDrawData_ScaleClipRects$descriptor() {
        return ImDrawData_ScaleClipRects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawData_ScaleClipRects(ImDrawData *self, const ImVec2 fb_scale)
     * }
     */
    public static MethodHandle ImDrawData_ScaleClipRects$handle() {
        return ImDrawData_ScaleClipRects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawData_ScaleClipRects(ImDrawData *self, const ImVec2 fb_scale)
     * }
     */
    public static MemorySegment ImDrawData_ScaleClipRects$address() {
        return ImDrawData_ScaleClipRects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawData_ScaleClipRects(ImDrawData *self, const ImVec2 fb_scale)
     * }
     */
    public static void ImDrawData_ScaleClipRects(MemorySegment self, MemorySegment fb_scale) {
        var mh$ = ImDrawData_ScaleClipRects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawData_ScaleClipRects", self, fb_scale);
            }
            mh$.invokeExact(self, fb_scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontConfig_ImFontConfig {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontConfig_ImFontConfig");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFontConfig *ImFontConfig_ImFontConfig()
     * }
     */
    public static FunctionDescriptor ImFontConfig_ImFontConfig$descriptor() {
        return ImFontConfig_ImFontConfig.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFontConfig *ImFontConfig_ImFontConfig()
     * }
     */
    public static MethodHandle ImFontConfig_ImFontConfig$handle() {
        return ImFontConfig_ImFontConfig.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFontConfig *ImFontConfig_ImFontConfig()
     * }
     */
    public static MemorySegment ImFontConfig_ImFontConfig$address() {
        return ImFontConfig_ImFontConfig.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFontConfig *ImFontConfig_ImFontConfig()
     * }
     */
    public static MemorySegment ImFontConfig_ImFontConfig() {
        var mh$ = ImFontConfig_ImFontConfig.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontConfig_ImFontConfig");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontConfig_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontConfig_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontConfig_destroy(ImFontConfig *self)
     * }
     */
    public static FunctionDescriptor ImFontConfig_destroy$descriptor() {
        return ImFontConfig_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontConfig_destroy(ImFontConfig *self)
     * }
     */
    public static MethodHandle ImFontConfig_destroy$handle() {
        return ImFontConfig_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontConfig_destroy(ImFontConfig *self)
     * }
     */
    public static MemorySegment ImFontConfig_destroy$address() {
        return ImFontConfig_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontConfig_destroy(ImFontConfig *self)
     * }
     */
    public static void ImFontConfig_destroy(MemorySegment self) {
        var mh$ = ImFontConfig_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontConfig_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFontGlyphRangesBuilder *ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder()
     * }
     */
    public static FunctionDescriptor ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder$descriptor() {
        return ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFontGlyphRangesBuilder *ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder()
     * }
     */
    public static MethodHandle ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder$handle() {
        return ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFontGlyphRangesBuilder *ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder()
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder$address() {
        return ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFontGlyphRangesBuilder *ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder()
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder() {
        var mh$ = ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontGlyphRangesBuilder_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontGlyphRangesBuilder_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder *self)
     * }
     */
    public static FunctionDescriptor ImFontGlyphRangesBuilder_destroy$descriptor() {
        return ImFontGlyphRangesBuilder_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder *self)
     * }
     */
    public static MethodHandle ImFontGlyphRangesBuilder_destroy$handle() {
        return ImFontGlyphRangesBuilder_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder *self)
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_destroy$address() {
        return ImFontGlyphRangesBuilder_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_destroy(ImFontGlyphRangesBuilder *self)
     * }
     */
    public static void ImFontGlyphRangesBuilder_destroy(MemorySegment self) {
        var mh$ = ImFontGlyphRangesBuilder_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontGlyphRangesBuilder_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontGlyphRangesBuilder_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontGlyphRangesBuilder_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder *self)
     * }
     */
    public static FunctionDescriptor ImFontGlyphRangesBuilder_Clear$descriptor() {
        return ImFontGlyphRangesBuilder_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder *self)
     * }
     */
    public static MethodHandle ImFontGlyphRangesBuilder_Clear$handle() {
        return ImFontGlyphRangesBuilder_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder *self)
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_Clear$address() {
        return ImFontGlyphRangesBuilder_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_Clear(ImFontGlyphRangesBuilder *self)
     * }
     */
    public static void ImFontGlyphRangesBuilder_Clear(MemorySegment self) {
        var mh$ = ImFontGlyphRangesBuilder_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontGlyphRangesBuilder_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontGlyphRangesBuilder_GetBit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontGlyphRangesBuilder_GetBit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder *self, size_t n)
     * }
     */
    public static FunctionDescriptor ImFontGlyphRangesBuilder_GetBit$descriptor() {
        return ImFontGlyphRangesBuilder_GetBit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder *self, size_t n)
     * }
     */
    public static MethodHandle ImFontGlyphRangesBuilder_GetBit$handle() {
        return ImFontGlyphRangesBuilder_GetBit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder *self, size_t n)
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_GetBit$address() {
        return ImFontGlyphRangesBuilder_GetBit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImFontGlyphRangesBuilder_GetBit(ImFontGlyphRangesBuilder *self, size_t n)
     * }
     */
    public static boolean ImFontGlyphRangesBuilder_GetBit(MemorySegment self, long n) {
        var mh$ = ImFontGlyphRangesBuilder_GetBit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontGlyphRangesBuilder_GetBit", self, n);
            }
            return (boolean)mh$.invokeExact(self, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontGlyphRangesBuilder_SetBit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontGlyphRangesBuilder_SetBit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder *self, size_t n)
     * }
     */
    public static FunctionDescriptor ImFontGlyphRangesBuilder_SetBit$descriptor() {
        return ImFontGlyphRangesBuilder_SetBit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder *self, size_t n)
     * }
     */
    public static MethodHandle ImFontGlyphRangesBuilder_SetBit$handle() {
        return ImFontGlyphRangesBuilder_SetBit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder *self, size_t n)
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_SetBit$address() {
        return ImFontGlyphRangesBuilder_SetBit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_SetBit(ImFontGlyphRangesBuilder *self, size_t n)
     * }
     */
    public static void ImFontGlyphRangesBuilder_SetBit(MemorySegment self, long n) {
        var mh$ = ImFontGlyphRangesBuilder_SetBit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontGlyphRangesBuilder_SetBit", self, n);
            }
            mh$.invokeExact(self, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontGlyphRangesBuilder_AddChar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_SHORT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontGlyphRangesBuilder_AddChar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder *self, ImWchar c)
     * }
     */
    public static FunctionDescriptor ImFontGlyphRangesBuilder_AddChar$descriptor() {
        return ImFontGlyphRangesBuilder_AddChar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder *self, ImWchar c)
     * }
     */
    public static MethodHandle ImFontGlyphRangesBuilder_AddChar$handle() {
        return ImFontGlyphRangesBuilder_AddChar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder *self, ImWchar c)
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_AddChar$address() {
        return ImFontGlyphRangesBuilder_AddChar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddChar(ImFontGlyphRangesBuilder *self, ImWchar c)
     * }
     */
    public static void ImFontGlyphRangesBuilder_AddChar(MemorySegment self, short c) {
        var mh$ = ImFontGlyphRangesBuilder_AddChar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontGlyphRangesBuilder_AddChar", self, c);
            }
            mh$.invokeExact(self, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontGlyphRangesBuilder_AddText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontGlyphRangesBuilder_AddText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder *self, const char *text, const char *text_end)
     * }
     */
    public static FunctionDescriptor ImFontGlyphRangesBuilder_AddText$descriptor() {
        return ImFontGlyphRangesBuilder_AddText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder *self, const char *text, const char *text_end)
     * }
     */
    public static MethodHandle ImFontGlyphRangesBuilder_AddText$handle() {
        return ImFontGlyphRangesBuilder_AddText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder *self, const char *text, const char *text_end)
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_AddText$address() {
        return ImFontGlyphRangesBuilder_AddText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddText(ImFontGlyphRangesBuilder *self, const char *text, const char *text_end)
     * }
     */
    public static void ImFontGlyphRangesBuilder_AddText(MemorySegment self, MemorySegment text, MemorySegment text_end) {
        var mh$ = ImFontGlyphRangesBuilder_AddText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontGlyphRangesBuilder_AddText", self, text, text_end);
            }
            mh$.invokeExact(self, text, text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontGlyphRangesBuilder_AddRanges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontGlyphRangesBuilder_AddRanges");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder *self, const ImWchar *ranges)
     * }
     */
    public static FunctionDescriptor ImFontGlyphRangesBuilder_AddRanges$descriptor() {
        return ImFontGlyphRangesBuilder_AddRanges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder *self, const ImWchar *ranges)
     * }
     */
    public static MethodHandle ImFontGlyphRangesBuilder_AddRanges$handle() {
        return ImFontGlyphRangesBuilder_AddRanges.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder *self, const ImWchar *ranges)
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_AddRanges$address() {
        return ImFontGlyphRangesBuilder_AddRanges.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_AddRanges(ImFontGlyphRangesBuilder *self, const ImWchar *ranges)
     * }
     */
    public static void ImFontGlyphRangesBuilder_AddRanges(MemorySegment self, MemorySegment ranges) {
        var mh$ = ImFontGlyphRangesBuilder_AddRanges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontGlyphRangesBuilder_AddRanges", self, ranges);
            }
            mh$.invokeExact(self, ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontGlyphRangesBuilder_BuildRanges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontGlyphRangesBuilder_BuildRanges");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder *self, ImVector_ImWchar *out_ranges)
     * }
     */
    public static FunctionDescriptor ImFontGlyphRangesBuilder_BuildRanges$descriptor() {
        return ImFontGlyphRangesBuilder_BuildRanges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder *self, ImVector_ImWchar *out_ranges)
     * }
     */
    public static MethodHandle ImFontGlyphRangesBuilder_BuildRanges$handle() {
        return ImFontGlyphRangesBuilder_BuildRanges.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder *self, ImVector_ImWchar *out_ranges)
     * }
     */
    public static MemorySegment ImFontGlyphRangesBuilder_BuildRanges$address() {
        return ImFontGlyphRangesBuilder_BuildRanges.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontGlyphRangesBuilder_BuildRanges(ImFontGlyphRangesBuilder *self, ImVector_ImWchar *out_ranges)
     * }
     */
    public static void ImFontGlyphRangesBuilder_BuildRanges(MemorySegment self, MemorySegment out_ranges) {
        var mh$ = ImFontGlyphRangesBuilder_BuildRanges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontGlyphRangesBuilder_BuildRanges", self, out_ranges);
            }
            mh$.invokeExact(self, out_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlasCustomRect_ImFontAtlasCustomRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlasCustomRect_ImFontAtlasCustomRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFontAtlasCustomRect *ImFontAtlasCustomRect_ImFontAtlasCustomRect()
     * }
     */
    public static FunctionDescriptor ImFontAtlasCustomRect_ImFontAtlasCustomRect$descriptor() {
        return ImFontAtlasCustomRect_ImFontAtlasCustomRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFontAtlasCustomRect *ImFontAtlasCustomRect_ImFontAtlasCustomRect()
     * }
     */
    public static MethodHandle ImFontAtlasCustomRect_ImFontAtlasCustomRect$handle() {
        return ImFontAtlasCustomRect_ImFontAtlasCustomRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFontAtlasCustomRect *ImFontAtlasCustomRect_ImFontAtlasCustomRect()
     * }
     */
    public static MemorySegment ImFontAtlasCustomRect_ImFontAtlasCustomRect$address() {
        return ImFontAtlasCustomRect_ImFontAtlasCustomRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFontAtlasCustomRect *ImFontAtlasCustomRect_ImFontAtlasCustomRect()
     * }
     */
    public static MemorySegment ImFontAtlasCustomRect_ImFontAtlasCustomRect() {
        var mh$ = ImFontAtlasCustomRect_ImFontAtlasCustomRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlasCustomRect_ImFontAtlasCustomRect");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlasCustomRect_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlasCustomRect_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlasCustomRect_destroy$descriptor() {
        return ImFontAtlasCustomRect_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect *self)
     * }
     */
    public static MethodHandle ImFontAtlasCustomRect_destroy$handle() {
        return ImFontAtlasCustomRect_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect *self)
     * }
     */
    public static MemorySegment ImFontAtlasCustomRect_destroy$address() {
        return ImFontAtlasCustomRect_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlasCustomRect_destroy(ImFontAtlasCustomRect *self)
     * }
     */
    public static void ImFontAtlasCustomRect_destroy(MemorySegment self) {
        var mh$ = ImFontAtlasCustomRect_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlasCustomRect_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlasCustomRect_IsPacked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlasCustomRect_IsPacked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlasCustomRect_IsPacked$descriptor() {
        return ImFontAtlasCustomRect_IsPacked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect *self)
     * }
     */
    public static MethodHandle ImFontAtlasCustomRect_IsPacked$handle() {
        return ImFontAtlasCustomRect_IsPacked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect *self)
     * }
     */
    public static MemorySegment ImFontAtlasCustomRect_IsPacked$address() {
        return ImFontAtlasCustomRect_IsPacked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImFontAtlasCustomRect_IsPacked(ImFontAtlasCustomRect *self)
     * }
     */
    public static boolean ImFontAtlasCustomRect_IsPacked(MemorySegment self) {
        var mh$ = ImFontAtlasCustomRect_IsPacked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlasCustomRect_IsPacked", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_ImFontAtlas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_ImFontAtlas");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFontAtlas *ImFontAtlas_ImFontAtlas()
     * }
     */
    public static FunctionDescriptor ImFontAtlas_ImFontAtlas$descriptor() {
        return ImFontAtlas_ImFontAtlas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFontAtlas *ImFontAtlas_ImFontAtlas()
     * }
     */
    public static MethodHandle ImFontAtlas_ImFontAtlas$handle() {
        return ImFontAtlas_ImFontAtlas.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFontAtlas *ImFontAtlas_ImFontAtlas()
     * }
     */
    public static MemorySegment ImFontAtlas_ImFontAtlas$address() {
        return ImFontAtlas_ImFontAtlas.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFontAtlas *ImFontAtlas_ImFontAtlas()
     * }
     */
    public static MemorySegment ImFontAtlas_ImFontAtlas() {
        var mh$ = ImFontAtlas_ImFontAtlas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_ImFontAtlas");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_destroy(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_destroy$descriptor() {
        return ImFontAtlas_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_destroy(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_destroy$handle() {
        return ImFontAtlas_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_destroy(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_destroy$address() {
        return ImFontAtlas_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlas_destroy(ImFontAtlas *self)
     * }
     */
    public static void ImFontAtlas_destroy(MemorySegment self) {
        var mh$ = ImFontAtlas_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_AddFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_AddFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFont(ImFontAtlas *self, const ImFontConfig *font_cfg)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_AddFont$descriptor() {
        return ImFontAtlas_AddFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFont(ImFontAtlas *self, const ImFontConfig *font_cfg)
     * }
     */
    public static MethodHandle ImFontAtlas_AddFont$handle() {
        return ImFontAtlas_AddFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFont(ImFontAtlas *self, const ImFontConfig *font_cfg)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFont$address() {
        return ImFontAtlas_AddFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFont(ImFontAtlas *self, const ImFontConfig *font_cfg)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFont(MemorySegment self, MemorySegment font_cfg) {
        var mh$ = ImFontAtlas_AddFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_AddFont", self, font_cfg);
            }
            return (MemorySegment)mh$.invokeExact(self, font_cfg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_AddFontDefault {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_AddFontDefault");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontDefault(ImFontAtlas *self, const ImFontConfig *font_cfg)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_AddFontDefault$descriptor() {
        return ImFontAtlas_AddFontDefault.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontDefault(ImFontAtlas *self, const ImFontConfig *font_cfg)
     * }
     */
    public static MethodHandle ImFontAtlas_AddFontDefault$handle() {
        return ImFontAtlas_AddFontDefault.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontDefault(ImFontAtlas *self, const ImFontConfig *font_cfg)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontDefault$address() {
        return ImFontAtlas_AddFontDefault.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontDefault(ImFontAtlas *self, const ImFontConfig *font_cfg)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontDefault(MemorySegment self, MemorySegment font_cfg) {
        var mh$ = ImFontAtlas_AddFontDefault.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_AddFontDefault", self, font_cfg);
            }
            return (MemorySegment)mh$.invokeExact(self, font_cfg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_AddFontFromFileTTF {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_AddFontFromFileTTF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromFileTTF(ImFontAtlas *self, const char *filename, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_AddFontFromFileTTF$descriptor() {
        return ImFontAtlas_AddFontFromFileTTF.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromFileTTF(ImFontAtlas *self, const char *filename, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MethodHandle ImFontAtlas_AddFontFromFileTTF$handle() {
        return ImFontAtlas_AddFontFromFileTTF.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromFileTTF(ImFontAtlas *self, const char *filename, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontFromFileTTF$address() {
        return ImFontAtlas_AddFontFromFileTTF.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromFileTTF(ImFontAtlas *self, const char *filename, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontFromFileTTF(MemorySegment self, MemorySegment filename, float size_pixels, MemorySegment font_cfg, MemorySegment glyph_ranges) {
        var mh$ = ImFontAtlas_AddFontFromFileTTF.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_AddFontFromFileTTF", self, filename, size_pixels, font_cfg, glyph_ranges);
            }
            return (MemorySegment)mh$.invokeExact(self, filename, size_pixels, font_cfg, glyph_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_AddFontFromMemoryTTF {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_AddFontFromMemoryTTF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas *self, void *font_data, int font_data_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_AddFontFromMemoryTTF$descriptor() {
        return ImFontAtlas_AddFontFromMemoryTTF.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas *self, void *font_data, int font_data_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MethodHandle ImFontAtlas_AddFontFromMemoryTTF$handle() {
        return ImFontAtlas_AddFontFromMemoryTTF.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas *self, void *font_data, int font_data_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontFromMemoryTTF$address() {
        return ImFontAtlas_AddFontFromMemoryTTF.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas *self, void *font_data, int font_data_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontFromMemoryTTF(MemorySegment self, MemorySegment font_data, int font_data_size, float size_pixels, MemorySegment font_cfg, MemorySegment glyph_ranges) {
        var mh$ = ImFontAtlas_AddFontFromMemoryTTF.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_AddFontFromMemoryTTF", self, font_data, font_data_size, size_pixels, font_cfg, glyph_ranges);
            }
            return (MemorySegment)mh$.invokeExact(self, font_data, font_data_size, size_pixels, font_cfg, glyph_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_AddFontFromMemoryCompressedTTF {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_AddFontFromMemoryCompressedTTF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas *self, const void *compressed_font_data, int compressed_font_data_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_AddFontFromMemoryCompressedTTF$descriptor() {
        return ImFontAtlas_AddFontFromMemoryCompressedTTF.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas *self, const void *compressed_font_data, int compressed_font_data_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MethodHandle ImFontAtlas_AddFontFromMemoryCompressedTTF$handle() {
        return ImFontAtlas_AddFontFromMemoryCompressedTTF.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas *self, const void *compressed_font_data, int compressed_font_data_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontFromMemoryCompressedTTF$address() {
        return ImFontAtlas_AddFontFromMemoryCompressedTTF.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas *self, const void *compressed_font_data, int compressed_font_data_size, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontFromMemoryCompressedTTF(MemorySegment self, MemorySegment compressed_font_data, int compressed_font_data_size, float size_pixels, MemorySegment font_cfg, MemorySegment glyph_ranges) {
        var mh$ = ImFontAtlas_AddFontFromMemoryCompressedTTF.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_AddFontFromMemoryCompressedTTF", self, compressed_font_data, compressed_font_data_size, size_pixels, font_cfg, glyph_ranges);
            }
            return (MemorySegment)mh$.invokeExact(self, compressed_font_data, compressed_font_data_size, size_pixels, font_cfg, glyph_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_AddFontFromMemoryCompressedBase85TTF {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas *self, const char *compressed_font_data_base85, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_AddFontFromMemoryCompressedBase85TTF$descriptor() {
        return ImFontAtlas_AddFontFromMemoryCompressedBase85TTF.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas *self, const char *compressed_font_data_base85, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MethodHandle ImFontAtlas_AddFontFromMemoryCompressedBase85TTF$handle() {
        return ImFontAtlas_AddFontFromMemoryCompressedBase85TTF.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas *self, const char *compressed_font_data_base85, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontFromMemoryCompressedBase85TTF$address() {
        return ImFontAtlas_AddFontFromMemoryCompressedBase85TTF.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFont *ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas *self, const char *compressed_font_data_base85, float size_pixels, const ImFontConfig *font_cfg, const ImWchar *glyph_ranges)
     * }
     */
    public static MemorySegment ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(MemorySegment self, MemorySegment compressed_font_data_base85, float size_pixels, MemorySegment font_cfg, MemorySegment glyph_ranges) {
        var mh$ = ImFontAtlas_AddFontFromMemoryCompressedBase85TTF.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_AddFontFromMemoryCompressedBase85TTF", self, compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges);
            }
            return (MemorySegment)mh$.invokeExact(self, compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_ClearInputData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_ClearInputData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearInputData(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_ClearInputData$descriptor() {
        return ImFontAtlas_ClearInputData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearInputData(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_ClearInputData$handle() {
        return ImFontAtlas_ClearInputData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearInputData(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_ClearInputData$address() {
        return ImFontAtlas_ClearInputData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearInputData(ImFontAtlas *self)
     * }
     */
    public static void ImFontAtlas_ClearInputData(MemorySegment self) {
        var mh$ = ImFontAtlas_ClearInputData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_ClearInputData", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_ClearTexData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_ClearTexData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearTexData(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_ClearTexData$descriptor() {
        return ImFontAtlas_ClearTexData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearTexData(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_ClearTexData$handle() {
        return ImFontAtlas_ClearTexData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearTexData(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_ClearTexData$address() {
        return ImFontAtlas_ClearTexData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearTexData(ImFontAtlas *self)
     * }
     */
    public static void ImFontAtlas_ClearTexData(MemorySegment self) {
        var mh$ = ImFontAtlas_ClearTexData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_ClearTexData", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_ClearFonts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_ClearFonts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearFonts(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_ClearFonts$descriptor() {
        return ImFontAtlas_ClearFonts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearFonts(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_ClearFonts$handle() {
        return ImFontAtlas_ClearFonts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearFonts(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_ClearFonts$address() {
        return ImFontAtlas_ClearFonts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlas_ClearFonts(ImFontAtlas *self)
     * }
     */
    public static void ImFontAtlas_ClearFonts(MemorySegment self) {
        var mh$ = ImFontAtlas_ClearFonts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_ClearFonts", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_Clear(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_Clear$descriptor() {
        return ImFontAtlas_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_Clear(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_Clear$handle() {
        return ImFontAtlas_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_Clear(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_Clear$address() {
        return ImFontAtlas_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlas_Clear(ImFontAtlas *self)
     * }
     */
    public static void ImFontAtlas_Clear(MemorySegment self) {
        var mh$ = ImFontAtlas_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_Build {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_Build");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImFontAtlas_Build(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_Build$descriptor() {
        return ImFontAtlas_Build.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImFontAtlas_Build(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_Build$handle() {
        return ImFontAtlas_Build.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImFontAtlas_Build(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_Build$address() {
        return ImFontAtlas_Build.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImFontAtlas_Build(ImFontAtlas *self)
     * }
     */
    public static boolean ImFontAtlas_Build(MemorySegment self) {
        var mh$ = ImFontAtlas_Build.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_Build", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetTexDataAsAlpha8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetTexDataAsAlpha8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetTexDataAsAlpha8$descriptor() {
        return ImFontAtlas_GetTexDataAsAlpha8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel)
     * }
     */
    public static MethodHandle ImFontAtlas_GetTexDataAsAlpha8$handle() {
        return ImFontAtlas_GetTexDataAsAlpha8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel)
     * }
     */
    public static MemorySegment ImFontAtlas_GetTexDataAsAlpha8$address() {
        return ImFontAtlas_GetTexDataAsAlpha8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel)
     * }
     */
    public static void ImFontAtlas_GetTexDataAsAlpha8(MemorySegment self, MemorySegment out_pixels, MemorySegment out_width, MemorySegment out_height, MemorySegment out_bytes_per_pixel) {
        var mh$ = ImFontAtlas_GetTexDataAsAlpha8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetTexDataAsAlpha8", self, out_pixels, out_width, out_height, out_bytes_per_pixel);
            }
            mh$.invokeExact(self, out_pixels, out_width, out_height, out_bytes_per_pixel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetTexDataAsRGBA32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetTexDataAsRGBA32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetTexDataAsRGBA32$descriptor() {
        return ImFontAtlas_GetTexDataAsRGBA32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel)
     * }
     */
    public static MethodHandle ImFontAtlas_GetTexDataAsRGBA32$handle() {
        return ImFontAtlas_GetTexDataAsRGBA32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel)
     * }
     */
    public static MemorySegment ImFontAtlas_GetTexDataAsRGBA32$address() {
        return ImFontAtlas_GetTexDataAsRGBA32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas *self, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel)
     * }
     */
    public static void ImFontAtlas_GetTexDataAsRGBA32(MemorySegment self, MemorySegment out_pixels, MemorySegment out_width, MemorySegment out_height, MemorySegment out_bytes_per_pixel) {
        var mh$ = ImFontAtlas_GetTexDataAsRGBA32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetTexDataAsRGBA32", self, out_pixels, out_width, out_height, out_bytes_per_pixel);
            }
            mh$.invokeExact(self, out_pixels, out_width, out_height, out_bytes_per_pixel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_IsBuilt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_IsBuilt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImFontAtlas_IsBuilt(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_IsBuilt$descriptor() {
        return ImFontAtlas_IsBuilt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImFontAtlas_IsBuilt(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_IsBuilt$handle() {
        return ImFontAtlas_IsBuilt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImFontAtlas_IsBuilt(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_IsBuilt$address() {
        return ImFontAtlas_IsBuilt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImFontAtlas_IsBuilt(ImFontAtlas *self)
     * }
     */
    public static boolean ImFontAtlas_IsBuilt(MemorySegment self) {
        var mh$ = ImFontAtlas_IsBuilt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_IsBuilt", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_SetTexID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_SetTexID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_SetTexID(ImFontAtlas *self, ImTextureID id)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_SetTexID$descriptor() {
        return ImFontAtlas_SetTexID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_SetTexID(ImFontAtlas *self, ImTextureID id)
     * }
     */
    public static MethodHandle ImFontAtlas_SetTexID$handle() {
        return ImFontAtlas_SetTexID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_SetTexID(ImFontAtlas *self, ImTextureID id)
     * }
     */
    public static MemorySegment ImFontAtlas_SetTexID$address() {
        return ImFontAtlas_SetTexID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlas_SetTexID(ImFontAtlas *self, ImTextureID id)
     * }
     */
    public static void ImFontAtlas_SetTexID(MemorySegment self, MemorySegment id) {
        var mh$ = ImFontAtlas_SetTexID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_SetTexID", self, id);
            }
            mh$.invokeExact(self, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetGlyphRangesDefault {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetGlyphRangesDefault");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetGlyphRangesDefault$descriptor() {
        return ImFontAtlas_GetGlyphRangesDefault.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_GetGlyphRangesDefault$handle() {
        return ImFontAtlas_GetGlyphRangesDefault.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesDefault$address() {
        return ImFontAtlas_GetGlyphRangesDefault.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesDefault(MemorySegment self) {
        var mh$ = ImFontAtlas_GetGlyphRangesDefault.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetGlyphRangesDefault", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetGlyphRangesGreek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetGlyphRangesGreek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesGreek(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetGlyphRangesGreek$descriptor() {
        return ImFontAtlas_GetGlyphRangesGreek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesGreek(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_GetGlyphRangesGreek$handle() {
        return ImFontAtlas_GetGlyphRangesGreek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesGreek(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesGreek$address() {
        return ImFontAtlas_GetGlyphRangesGreek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesGreek(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesGreek(MemorySegment self) {
        var mh$ = ImFontAtlas_GetGlyphRangesGreek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetGlyphRangesGreek", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetGlyphRangesKorean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetGlyphRangesKorean");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetGlyphRangesKorean$descriptor() {
        return ImFontAtlas_GetGlyphRangesKorean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_GetGlyphRangesKorean$handle() {
        return ImFontAtlas_GetGlyphRangesKorean.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesKorean$address() {
        return ImFontAtlas_GetGlyphRangesKorean.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesKorean(MemorySegment self) {
        var mh$ = ImFontAtlas_GetGlyphRangesKorean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetGlyphRangesKorean", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetGlyphRangesJapanese {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetGlyphRangesJapanese");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetGlyphRangesJapanese$descriptor() {
        return ImFontAtlas_GetGlyphRangesJapanese.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_GetGlyphRangesJapanese$handle() {
        return ImFontAtlas_GetGlyphRangesJapanese.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesJapanese$address() {
        return ImFontAtlas_GetGlyphRangesJapanese.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesJapanese(MemorySegment self) {
        var mh$ = ImFontAtlas_GetGlyphRangesJapanese.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetGlyphRangesJapanese", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetGlyphRangesChineseFull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetGlyphRangesChineseFull");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetGlyphRangesChineseFull$descriptor() {
        return ImFontAtlas_GetGlyphRangesChineseFull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_GetGlyphRangesChineseFull$handle() {
        return ImFontAtlas_GetGlyphRangesChineseFull.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesChineseFull$address() {
        return ImFontAtlas_GetGlyphRangesChineseFull.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesChineseFull(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesChineseFull(MemorySegment self) {
        var mh$ = ImFontAtlas_GetGlyphRangesChineseFull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetGlyphRangesChineseFull", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon$descriptor() {
        return ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon$handle() {
        return ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon$address() {
        return ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(MemorySegment self) {
        var mh$ = ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetGlyphRangesCyrillic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetGlyphRangesCyrillic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetGlyphRangesCyrillic$descriptor() {
        return ImFontAtlas_GetGlyphRangesCyrillic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_GetGlyphRangesCyrillic$handle() {
        return ImFontAtlas_GetGlyphRangesCyrillic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesCyrillic$address() {
        return ImFontAtlas_GetGlyphRangesCyrillic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesCyrillic(MemorySegment self) {
        var mh$ = ImFontAtlas_GetGlyphRangesCyrillic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetGlyphRangesCyrillic", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetGlyphRangesThai {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetGlyphRangesThai");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesThai(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetGlyphRangesThai$descriptor() {
        return ImFontAtlas_GetGlyphRangesThai.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesThai(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_GetGlyphRangesThai$handle() {
        return ImFontAtlas_GetGlyphRangesThai.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesThai(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesThai$address() {
        return ImFontAtlas_GetGlyphRangesThai.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesThai(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesThai(MemorySegment self) {
        var mh$ = ImFontAtlas_GetGlyphRangesThai.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetGlyphRangesThai", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetGlyphRangesVietnamese {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetGlyphRangesVietnamese");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas *self)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetGlyphRangesVietnamese$descriptor() {
        return ImFontAtlas_GetGlyphRangesVietnamese.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas *self)
     * }
     */
    public static MethodHandle ImFontAtlas_GetGlyphRangesVietnamese$handle() {
        return ImFontAtlas_GetGlyphRangesVietnamese.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesVietnamese$address() {
        return ImFontAtlas_GetGlyphRangesVietnamese.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *ImFontAtlas_GetGlyphRangesVietnamese(ImFontAtlas *self)
     * }
     */
    public static MemorySegment ImFontAtlas_GetGlyphRangesVietnamese(MemorySegment self) {
        var mh$ = ImFontAtlas_GetGlyphRangesVietnamese.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetGlyphRangesVietnamese", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_AddCustomRectRegular {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_AddCustomRectRegular");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImFontAtlas_AddCustomRectRegular(ImFontAtlas *self, int width, int height)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_AddCustomRectRegular$descriptor() {
        return ImFontAtlas_AddCustomRectRegular.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImFontAtlas_AddCustomRectRegular(ImFontAtlas *self, int width, int height)
     * }
     */
    public static MethodHandle ImFontAtlas_AddCustomRectRegular$handle() {
        return ImFontAtlas_AddCustomRectRegular.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImFontAtlas_AddCustomRectRegular(ImFontAtlas *self, int width, int height)
     * }
     */
    public static MemorySegment ImFontAtlas_AddCustomRectRegular$address() {
        return ImFontAtlas_AddCustomRectRegular.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImFontAtlas_AddCustomRectRegular(ImFontAtlas *self, int width, int height)
     * }
     */
    public static int ImFontAtlas_AddCustomRectRegular(MemorySegment self, int width, int height) {
        var mh$ = ImFontAtlas_AddCustomRectRegular.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_AddCustomRectRegular", self, width, height);
            }
            return (int)mh$.invokeExact(self, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_AddCustomRectFontGlyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_SHORT,
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_FLOAT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_AddCustomRectFontGlyph");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas *self, ImFont *font, ImWchar id, int width, int height, float advance_x, const ImVec2 offset)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_AddCustomRectFontGlyph$descriptor() {
        return ImFontAtlas_AddCustomRectFontGlyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas *self, ImFont *font, ImWchar id, int width, int height, float advance_x, const ImVec2 offset)
     * }
     */
    public static MethodHandle ImFontAtlas_AddCustomRectFontGlyph$handle() {
        return ImFontAtlas_AddCustomRectFontGlyph.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas *self, ImFont *font, ImWchar id, int width, int height, float advance_x, const ImVec2 offset)
     * }
     */
    public static MemorySegment ImFontAtlas_AddCustomRectFontGlyph$address() {
        return ImFontAtlas_AddCustomRectFontGlyph.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas *self, ImFont *font, ImWchar id, int width, int height, float advance_x, const ImVec2 offset)
     * }
     */
    public static int ImFontAtlas_AddCustomRectFontGlyph(MemorySegment self, MemorySegment font, short id, int width, int height, float advance_x, MemorySegment offset) {
        var mh$ = ImFontAtlas_AddCustomRectFontGlyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_AddCustomRectFontGlyph", self, font, id, width, height, advance_x, offset);
            }
            return (int)mh$.invokeExact(self, font, id, width, height, advance_x, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetCustomRectByIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetCustomRectByIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFontAtlasCustomRect *ImFontAtlas_GetCustomRectByIndex(ImFontAtlas *self, int index)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetCustomRectByIndex$descriptor() {
        return ImFontAtlas_GetCustomRectByIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFontAtlasCustomRect *ImFontAtlas_GetCustomRectByIndex(ImFontAtlas *self, int index)
     * }
     */
    public static MethodHandle ImFontAtlas_GetCustomRectByIndex$handle() {
        return ImFontAtlas_GetCustomRectByIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFontAtlasCustomRect *ImFontAtlas_GetCustomRectByIndex(ImFontAtlas *self, int index)
     * }
     */
    public static MemorySegment ImFontAtlas_GetCustomRectByIndex$address() {
        return ImFontAtlas_GetCustomRectByIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFontAtlasCustomRect *ImFontAtlas_GetCustomRectByIndex(ImFontAtlas *self, int index)
     * }
     */
    public static MemorySegment ImFontAtlas_GetCustomRectByIndex(MemorySegment self, int index) {
        var mh$ = ImFontAtlas_GetCustomRectByIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetCustomRectByIndex", self, index);
            }
            return (MemorySegment)mh$.invokeExact(self, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_CalcCustomRectUV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_CalcCustomRectUV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_CalcCustomRectUV(ImFontAtlas *self, const ImFontAtlasCustomRect *rect, ImVec2 *out_uv_min, ImVec2 *out_uv_max)
     * }
     */
    public static FunctionDescriptor ImFontAtlas_CalcCustomRectUV$descriptor() {
        return ImFontAtlas_CalcCustomRectUV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_CalcCustomRectUV(ImFontAtlas *self, const ImFontAtlasCustomRect *rect, ImVec2 *out_uv_min, ImVec2 *out_uv_max)
     * }
     */
    public static MethodHandle ImFontAtlas_CalcCustomRectUV$handle() {
        return ImFontAtlas_CalcCustomRectUV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFontAtlas_CalcCustomRectUV(ImFontAtlas *self, const ImFontAtlasCustomRect *rect, ImVec2 *out_uv_min, ImVec2 *out_uv_max)
     * }
     */
    public static MemorySegment ImFontAtlas_CalcCustomRectUV$address() {
        return ImFontAtlas_CalcCustomRectUV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFontAtlas_CalcCustomRectUV(ImFontAtlas *self, const ImFontAtlasCustomRect *rect, ImVec2 *out_uv_min, ImVec2 *out_uv_max)
     * }
     */
    public static void ImFontAtlas_CalcCustomRectUV(MemorySegment self, MemorySegment rect, MemorySegment out_uv_min, MemorySegment out_uv_max) {
        var mh$ = ImFontAtlas_CalcCustomRectUV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_CalcCustomRectUV", self, rect, out_uv_min, out_uv_max);
            }
            mh$.invokeExact(self, rect, out_uv_min, out_uv_max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFontAtlas_GetMouseCursorTexData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFontAtlas_GetMouseCursorTexData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas *self, ImGuiMouseCursor cursor, ImVec2 *out_offset, ImVec2 *out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])
     * }
     */
    public static FunctionDescriptor ImFontAtlas_GetMouseCursorTexData$descriptor() {
        return ImFontAtlas_GetMouseCursorTexData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas *self, ImGuiMouseCursor cursor, ImVec2 *out_offset, ImVec2 *out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])
     * }
     */
    public static MethodHandle ImFontAtlas_GetMouseCursorTexData$handle() {
        return ImFontAtlas_GetMouseCursorTexData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas *self, ImGuiMouseCursor cursor, ImVec2 *out_offset, ImVec2 *out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])
     * }
     */
    public static MemorySegment ImFontAtlas_GetMouseCursorTexData$address() {
        return ImFontAtlas_GetMouseCursorTexData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas *self, ImGuiMouseCursor cursor, ImVec2 *out_offset, ImVec2 *out_size, ImVec2 out_uv_border[2], ImVec2 out_uv_fill[2])
     * }
     */
    public static boolean ImFontAtlas_GetMouseCursorTexData(MemorySegment self, int cursor, MemorySegment out_offset, MemorySegment out_size, MemorySegment out_uv_border, MemorySegment out_uv_fill) {
        var mh$ = ImFontAtlas_GetMouseCursorTexData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFontAtlas_GetMouseCursorTexData", self, cursor, out_offset, out_size, out_uv_border, out_uv_fill);
            }
            return (boolean)mh$.invokeExact(self, cursor, out_offset, out_size, out_uv_border, out_uv_fill);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_ImFont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_ImFont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFont *ImFont_ImFont()
     * }
     */
    public static FunctionDescriptor ImFont_ImFont$descriptor() {
        return ImFont_ImFont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFont *ImFont_ImFont()
     * }
     */
    public static MethodHandle ImFont_ImFont$handle() {
        return ImFont_ImFont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFont *ImFont_ImFont()
     * }
     */
    public static MemorySegment ImFont_ImFont$address() {
        return ImFont_ImFont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFont *ImFont_ImFont()
     * }
     */
    public static MemorySegment ImFont_ImFont() {
        var mh$ = ImFont_ImFont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_ImFont");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_destroy(ImFont *self)
     * }
     */
    public static FunctionDescriptor ImFont_destroy$descriptor() {
        return ImFont_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_destroy(ImFont *self)
     * }
     */
    public static MethodHandle ImFont_destroy$handle() {
        return ImFont_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_destroy(ImFont *self)
     * }
     */
    public static MemorySegment ImFont_destroy$address() {
        return ImFont_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_destroy(ImFont *self)
     * }
     */
    public static void ImFont_destroy(MemorySegment self) {
        var mh$ = ImFont_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_FindGlyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_SHORT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_FindGlyph");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImFontGlyph *ImFont_FindGlyph(ImFont *self, ImWchar c)
     * }
     */
    public static FunctionDescriptor ImFont_FindGlyph$descriptor() {
        return ImFont_FindGlyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImFontGlyph *ImFont_FindGlyph(ImFont *self, ImWchar c)
     * }
     */
    public static MethodHandle ImFont_FindGlyph$handle() {
        return ImFont_FindGlyph.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImFontGlyph *ImFont_FindGlyph(ImFont *self, ImWchar c)
     * }
     */
    public static MemorySegment ImFont_FindGlyph$address() {
        return ImFont_FindGlyph.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImFontGlyph *ImFont_FindGlyph(ImFont *self, ImWchar c)
     * }
     */
    public static MemorySegment ImFont_FindGlyph(MemorySegment self, short c) {
        var mh$ = ImFont_FindGlyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_FindGlyph", self, c);
            }
            return (MemorySegment)mh$.invokeExact(self, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_FindGlyphNoFallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_SHORT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_FindGlyphNoFallback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImFontGlyph *ImFont_FindGlyphNoFallback(ImFont *self, ImWchar c)
     * }
     */
    public static FunctionDescriptor ImFont_FindGlyphNoFallback$descriptor() {
        return ImFont_FindGlyphNoFallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImFontGlyph *ImFont_FindGlyphNoFallback(ImFont *self, ImWchar c)
     * }
     */
    public static MethodHandle ImFont_FindGlyphNoFallback$handle() {
        return ImFont_FindGlyphNoFallback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImFontGlyph *ImFont_FindGlyphNoFallback(ImFont *self, ImWchar c)
     * }
     */
    public static MemorySegment ImFont_FindGlyphNoFallback$address() {
        return ImFont_FindGlyphNoFallback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImFontGlyph *ImFont_FindGlyphNoFallback(ImFont *self, ImWchar c)
     * }
     */
    public static MemorySegment ImFont_FindGlyphNoFallback(MemorySegment self, short c) {
        var mh$ = ImFont_FindGlyphNoFallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_FindGlyphNoFallback", self, c);
            }
            return (MemorySegment)mh$.invokeExact(self, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_GetCharAdvance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_SHORT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_GetCharAdvance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ImFont_GetCharAdvance(ImFont *self, ImWchar c)
     * }
     */
    public static FunctionDescriptor ImFont_GetCharAdvance$descriptor() {
        return ImFont_GetCharAdvance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ImFont_GetCharAdvance(ImFont *self, ImWchar c)
     * }
     */
    public static MethodHandle ImFont_GetCharAdvance$handle() {
        return ImFont_GetCharAdvance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ImFont_GetCharAdvance(ImFont *self, ImWchar c)
     * }
     */
    public static MemorySegment ImFont_GetCharAdvance$address() {
        return ImFont_GetCharAdvance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ImFont_GetCharAdvance(ImFont *self, ImWchar c)
     * }
     */
    public static float ImFont_GetCharAdvance(MemorySegment self, short c) {
        var mh$ = ImFont_GetCharAdvance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_GetCharAdvance", self, c);
            }
            return (float)mh$.invokeExact(self, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_IsLoaded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_IsLoaded");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImFont_IsLoaded(ImFont *self)
     * }
     */
    public static FunctionDescriptor ImFont_IsLoaded$descriptor() {
        return ImFont_IsLoaded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImFont_IsLoaded(ImFont *self)
     * }
     */
    public static MethodHandle ImFont_IsLoaded$handle() {
        return ImFont_IsLoaded.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImFont_IsLoaded(ImFont *self)
     * }
     */
    public static MemorySegment ImFont_IsLoaded$address() {
        return ImFont_IsLoaded.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImFont_IsLoaded(ImFont *self)
     * }
     */
    public static boolean ImFont_IsLoaded(MemorySegment self) {
        var mh$ = ImFont_IsLoaded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_IsLoaded", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_GetDebugName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_GetDebugName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ImFont_GetDebugName(ImFont *self)
     * }
     */
    public static FunctionDescriptor ImFont_GetDebugName$descriptor() {
        return ImFont_GetDebugName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ImFont_GetDebugName(ImFont *self)
     * }
     */
    public static MethodHandle ImFont_GetDebugName$handle() {
        return ImFont_GetDebugName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ImFont_GetDebugName(ImFont *self)
     * }
     */
    public static MemorySegment ImFont_GetDebugName$address() {
        return ImFont_GetDebugName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ImFont_GetDebugName(ImFont *self)
     * }
     */
    public static MemorySegment ImFont_GetDebugName(MemorySegment self) {
        var mh$ = ImFont_GetDebugName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_GetDebugName", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_CalcTextSizeA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_CalcTextSizeA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_CalcTextSizeA(ImVec2 *pOut, ImFont *self, float size, float max_width, float wrap_width, const char *text_begin, const char *text_end, const char **remaining)
     * }
     */
    public static FunctionDescriptor ImFont_CalcTextSizeA$descriptor() {
        return ImFont_CalcTextSizeA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_CalcTextSizeA(ImVec2 *pOut, ImFont *self, float size, float max_width, float wrap_width, const char *text_begin, const char *text_end, const char **remaining)
     * }
     */
    public static MethodHandle ImFont_CalcTextSizeA$handle() {
        return ImFont_CalcTextSizeA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_CalcTextSizeA(ImVec2 *pOut, ImFont *self, float size, float max_width, float wrap_width, const char *text_begin, const char *text_end, const char **remaining)
     * }
     */
    public static MemorySegment ImFont_CalcTextSizeA$address() {
        return ImFont_CalcTextSizeA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_CalcTextSizeA(ImVec2 *pOut, ImFont *self, float size, float max_width, float wrap_width, const char *text_begin, const char *text_end, const char **remaining)
     * }
     */
    public static void ImFont_CalcTextSizeA(MemorySegment pOut, MemorySegment self, float size, float max_width, float wrap_width, MemorySegment text_begin, MemorySegment text_end, MemorySegment remaining) {
        var mh$ = ImFont_CalcTextSizeA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_CalcTextSizeA", pOut, self, size, max_width, wrap_width, text_begin, text_end, remaining);
            }
            mh$.invokeExact(pOut, self, size, max_width, wrap_width, text_begin, text_end, remaining);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_CalcWordWrapPositionA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_CalcWordWrapPositionA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ImFont_CalcWordWrapPositionA(ImFont *self, float scale, const char *text, const char *text_end, float wrap_width)
     * }
     */
    public static FunctionDescriptor ImFont_CalcWordWrapPositionA$descriptor() {
        return ImFont_CalcWordWrapPositionA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ImFont_CalcWordWrapPositionA(ImFont *self, float scale, const char *text, const char *text_end, float wrap_width)
     * }
     */
    public static MethodHandle ImFont_CalcWordWrapPositionA$handle() {
        return ImFont_CalcWordWrapPositionA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ImFont_CalcWordWrapPositionA(ImFont *self, float scale, const char *text, const char *text_end, float wrap_width)
     * }
     */
    public static MemorySegment ImFont_CalcWordWrapPositionA$address() {
        return ImFont_CalcWordWrapPositionA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ImFont_CalcWordWrapPositionA(ImFont *self, float scale, const char *text, const char *text_end, float wrap_width)
     * }
     */
    public static MemorySegment ImFont_CalcWordWrapPositionA(MemorySegment self, float scale, MemorySegment text, MemorySegment text_end, float wrap_width) {
        var mh$ = ImFont_CalcWordWrapPositionA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_CalcWordWrapPositionA", self, scale, text, text_end, wrap_width);
            }
            return (MemorySegment)mh$.invokeExact(self, scale, text, text_end, wrap_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_RenderChar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            ImVec2.layout(),
            imgui.C_INT,
            imgui.C_SHORT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_RenderChar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_RenderChar(ImFont *self, ImDrawList *draw_list, float size, const ImVec2 pos, ImU32 col, ImWchar c)
     * }
     */
    public static FunctionDescriptor ImFont_RenderChar$descriptor() {
        return ImFont_RenderChar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_RenderChar(ImFont *self, ImDrawList *draw_list, float size, const ImVec2 pos, ImU32 col, ImWchar c)
     * }
     */
    public static MethodHandle ImFont_RenderChar$handle() {
        return ImFont_RenderChar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_RenderChar(ImFont *self, ImDrawList *draw_list, float size, const ImVec2 pos, ImU32 col, ImWchar c)
     * }
     */
    public static MemorySegment ImFont_RenderChar$address() {
        return ImFont_RenderChar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_RenderChar(ImFont *self, ImDrawList *draw_list, float size, const ImVec2 pos, ImU32 col, ImWchar c)
     * }
     */
    public static void ImFont_RenderChar(MemorySegment self, MemorySegment draw_list, float size, MemorySegment pos, int col, short c) {
        var mh$ = ImFont_RenderChar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_RenderChar", self, draw_list, size, pos, col, c);
            }
            mh$.invokeExact(self, draw_list, size, pos, col, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_RenderText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            ImVec2.layout(),
            imgui.C_INT,
            ImVec4.layout(),
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_RenderText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_RenderText(ImFont *self, ImDrawList *draw_list, float size, const ImVec2 pos, ImU32 col, const ImVec4 clip_rect, const char *text_begin, const char *text_end, float wrap_width, bool cpu_fine_clip)
     * }
     */
    public static FunctionDescriptor ImFont_RenderText$descriptor() {
        return ImFont_RenderText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_RenderText(ImFont *self, ImDrawList *draw_list, float size, const ImVec2 pos, ImU32 col, const ImVec4 clip_rect, const char *text_begin, const char *text_end, float wrap_width, bool cpu_fine_clip)
     * }
     */
    public static MethodHandle ImFont_RenderText$handle() {
        return ImFont_RenderText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_RenderText(ImFont *self, ImDrawList *draw_list, float size, const ImVec2 pos, ImU32 col, const ImVec4 clip_rect, const char *text_begin, const char *text_end, float wrap_width, bool cpu_fine_clip)
     * }
     */
    public static MemorySegment ImFont_RenderText$address() {
        return ImFont_RenderText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_RenderText(ImFont *self, ImDrawList *draw_list, float size, const ImVec2 pos, ImU32 col, const ImVec4 clip_rect, const char *text_begin, const char *text_end, float wrap_width, bool cpu_fine_clip)
     * }
     */
    public static void ImFont_RenderText(MemorySegment self, MemorySegment draw_list, float size, MemorySegment pos, int col, MemorySegment clip_rect, MemorySegment text_begin, MemorySegment text_end, float wrap_width, boolean cpu_fine_clip) {
        var mh$ = ImFont_RenderText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_RenderText", self, draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip);
            }
            mh$.invokeExact(self, draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_BuildLookupTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_BuildLookupTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_BuildLookupTable(ImFont *self)
     * }
     */
    public static FunctionDescriptor ImFont_BuildLookupTable$descriptor() {
        return ImFont_BuildLookupTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_BuildLookupTable(ImFont *self)
     * }
     */
    public static MethodHandle ImFont_BuildLookupTable$handle() {
        return ImFont_BuildLookupTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_BuildLookupTable(ImFont *self)
     * }
     */
    public static MemorySegment ImFont_BuildLookupTable$address() {
        return ImFont_BuildLookupTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_BuildLookupTable(ImFont *self)
     * }
     */
    public static void ImFont_BuildLookupTable(MemorySegment self) {
        var mh$ = ImFont_BuildLookupTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_BuildLookupTable", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_ClearOutputData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_ClearOutputData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_ClearOutputData(ImFont *self)
     * }
     */
    public static FunctionDescriptor ImFont_ClearOutputData$descriptor() {
        return ImFont_ClearOutputData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_ClearOutputData(ImFont *self)
     * }
     */
    public static MethodHandle ImFont_ClearOutputData$handle() {
        return ImFont_ClearOutputData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_ClearOutputData(ImFont *self)
     * }
     */
    public static MemorySegment ImFont_ClearOutputData$address() {
        return ImFont_ClearOutputData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_ClearOutputData(ImFont *self)
     * }
     */
    public static void ImFont_ClearOutputData(MemorySegment self) {
        var mh$ = ImFont_ClearOutputData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_ClearOutputData", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_GrowIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_GrowIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_GrowIndex(ImFont *self, int new_size)
     * }
     */
    public static FunctionDescriptor ImFont_GrowIndex$descriptor() {
        return ImFont_GrowIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_GrowIndex(ImFont *self, int new_size)
     * }
     */
    public static MethodHandle ImFont_GrowIndex$handle() {
        return ImFont_GrowIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_GrowIndex(ImFont *self, int new_size)
     * }
     */
    public static MemorySegment ImFont_GrowIndex$address() {
        return ImFont_GrowIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_GrowIndex(ImFont *self, int new_size)
     * }
     */
    public static void ImFont_GrowIndex(MemorySegment self, int new_size) {
        var mh$ = ImFont_GrowIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_GrowIndex", self, new_size);
            }
            mh$.invokeExact(self, new_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_AddGlyph {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_SHORT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_AddGlyph");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_AddGlyph(ImFont *self, const ImFontConfig *src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
     * }
     */
    public static FunctionDescriptor ImFont_AddGlyph$descriptor() {
        return ImFont_AddGlyph.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_AddGlyph(ImFont *self, const ImFontConfig *src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
     * }
     */
    public static MethodHandle ImFont_AddGlyph$handle() {
        return ImFont_AddGlyph.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_AddGlyph(ImFont *self, const ImFontConfig *src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
     * }
     */
    public static MemorySegment ImFont_AddGlyph$address() {
        return ImFont_AddGlyph.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_AddGlyph(ImFont *self, const ImFontConfig *src_cfg, ImWchar c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
     * }
     */
    public static void ImFont_AddGlyph(MemorySegment self, MemorySegment src_cfg, short c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x) {
        var mh$ = ImFont_AddGlyph.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_AddGlyph", self, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
            }
            mh$.invokeExact(self, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_AddRemapChar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_SHORT,
            imgui.C_SHORT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_AddRemapChar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_AddRemapChar(ImFont *self, ImWchar dst, ImWchar src, bool overwrite_dst)
     * }
     */
    public static FunctionDescriptor ImFont_AddRemapChar$descriptor() {
        return ImFont_AddRemapChar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_AddRemapChar(ImFont *self, ImWchar dst, ImWchar src, bool overwrite_dst)
     * }
     */
    public static MethodHandle ImFont_AddRemapChar$handle() {
        return ImFont_AddRemapChar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_AddRemapChar(ImFont *self, ImWchar dst, ImWchar src, bool overwrite_dst)
     * }
     */
    public static MemorySegment ImFont_AddRemapChar$address() {
        return ImFont_AddRemapChar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_AddRemapChar(ImFont *self, ImWchar dst, ImWchar src, bool overwrite_dst)
     * }
     */
    public static void ImFont_AddRemapChar(MemorySegment self, short dst, short src, boolean overwrite_dst) {
        var mh$ = ImFont_AddRemapChar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_AddRemapChar", self, dst, src, overwrite_dst);
            }
            mh$.invokeExact(self, dst, src, overwrite_dst);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_SetGlyphVisible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_SHORT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_SetGlyphVisible");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImFont_SetGlyphVisible(ImFont *self, ImWchar c, bool visible)
     * }
     */
    public static FunctionDescriptor ImFont_SetGlyphVisible$descriptor() {
        return ImFont_SetGlyphVisible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImFont_SetGlyphVisible(ImFont *self, ImWchar c, bool visible)
     * }
     */
    public static MethodHandle ImFont_SetGlyphVisible$handle() {
        return ImFont_SetGlyphVisible.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImFont_SetGlyphVisible(ImFont *self, ImWchar c, bool visible)
     * }
     */
    public static MemorySegment ImFont_SetGlyphVisible$address() {
        return ImFont_SetGlyphVisible.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImFont_SetGlyphVisible(ImFont *self, ImWchar c, bool visible)
     * }
     */
    public static void ImFont_SetGlyphVisible(MemorySegment self, short c, boolean visible) {
        var mh$ = ImFont_SetGlyphVisible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_SetGlyphVisible", self, c, visible);
            }
            mh$.invokeExact(self, c, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImFont_IsGlyphRangeUnused {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImFont_IsGlyphRangeUnused");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImFont_IsGlyphRangeUnused(ImFont *self, unsigned int c_begin, unsigned int c_last)
     * }
     */
    public static FunctionDescriptor ImFont_IsGlyphRangeUnused$descriptor() {
        return ImFont_IsGlyphRangeUnused.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImFont_IsGlyphRangeUnused(ImFont *self, unsigned int c_begin, unsigned int c_last)
     * }
     */
    public static MethodHandle ImFont_IsGlyphRangeUnused$handle() {
        return ImFont_IsGlyphRangeUnused.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImFont_IsGlyphRangeUnused(ImFont *self, unsigned int c_begin, unsigned int c_last)
     * }
     */
    public static MemorySegment ImFont_IsGlyphRangeUnused$address() {
        return ImFont_IsGlyphRangeUnused.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImFont_IsGlyphRangeUnused(ImFont *self, unsigned int c_begin, unsigned int c_last)
     * }
     */
    public static boolean ImFont_IsGlyphRangeUnused(MemorySegment self, int c_begin, int c_last) {
        var mh$ = ImFont_IsGlyphRangeUnused.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImFont_IsGlyphRangeUnused", self, c_begin, c_last);
            }
            return (boolean)mh$.invokeExact(self, c_begin, c_last);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewport_ImGuiViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewport_ImGuiViewport");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiViewport *ImGuiViewport_ImGuiViewport()
     * }
     */
    public static FunctionDescriptor ImGuiViewport_ImGuiViewport$descriptor() {
        return ImGuiViewport_ImGuiViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiViewport *ImGuiViewport_ImGuiViewport()
     * }
     */
    public static MethodHandle ImGuiViewport_ImGuiViewport$handle() {
        return ImGuiViewport_ImGuiViewport.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiViewport *ImGuiViewport_ImGuiViewport()
     * }
     */
    public static MemorySegment ImGuiViewport_ImGuiViewport$address() {
        return ImGuiViewport_ImGuiViewport.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiViewport *ImGuiViewport_ImGuiViewport()
     * }
     */
    public static MemorySegment ImGuiViewport_ImGuiViewport() {
        var mh$ = ImGuiViewport_ImGuiViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewport_ImGuiViewport");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewport_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewport_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewport_destroy(ImGuiViewport *self)
     * }
     */
    public static FunctionDescriptor ImGuiViewport_destroy$descriptor() {
        return ImGuiViewport_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewport_destroy(ImGuiViewport *self)
     * }
     */
    public static MethodHandle ImGuiViewport_destroy$handle() {
        return ImGuiViewport_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewport_destroy(ImGuiViewport *self)
     * }
     */
    public static MemorySegment ImGuiViewport_destroy$address() {
        return ImGuiViewport_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewport_destroy(ImGuiViewport *self)
     * }
     */
    public static void ImGuiViewport_destroy(MemorySegment self) {
        var mh$ = ImGuiViewport_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewport_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewport_GetCenter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewport_GetCenter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewport_GetCenter(ImVec2 *pOut, ImGuiViewport *self)
     * }
     */
    public static FunctionDescriptor ImGuiViewport_GetCenter$descriptor() {
        return ImGuiViewport_GetCenter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewport_GetCenter(ImVec2 *pOut, ImGuiViewport *self)
     * }
     */
    public static MethodHandle ImGuiViewport_GetCenter$handle() {
        return ImGuiViewport_GetCenter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewport_GetCenter(ImVec2 *pOut, ImGuiViewport *self)
     * }
     */
    public static MemorySegment ImGuiViewport_GetCenter$address() {
        return ImGuiViewport_GetCenter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewport_GetCenter(ImVec2 *pOut, ImGuiViewport *self)
     * }
     */
    public static void ImGuiViewport_GetCenter(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImGuiViewport_GetCenter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewport_GetCenter", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewport_GetWorkCenter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewport_GetWorkCenter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewport_GetWorkCenter(ImVec2 *pOut, ImGuiViewport *self)
     * }
     */
    public static FunctionDescriptor ImGuiViewport_GetWorkCenter$descriptor() {
        return ImGuiViewport_GetWorkCenter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewport_GetWorkCenter(ImVec2 *pOut, ImGuiViewport *self)
     * }
     */
    public static MethodHandle ImGuiViewport_GetWorkCenter$handle() {
        return ImGuiViewport_GetWorkCenter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewport_GetWorkCenter(ImVec2 *pOut, ImGuiViewport *self)
     * }
     */
    public static MemorySegment ImGuiViewport_GetWorkCenter$address() {
        return ImGuiViewport_GetWorkCenter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewport_GetWorkCenter(ImVec2 *pOut, ImGuiViewport *self)
     * }
     */
    public static void ImGuiViewport_GetWorkCenter(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImGuiViewport_GetWorkCenter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewport_GetWorkCenter", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPlatformIO_ImGuiPlatformIO {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPlatformIO_ImGuiPlatformIO");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiPlatformIO *ImGuiPlatformIO_ImGuiPlatformIO()
     * }
     */
    public static FunctionDescriptor ImGuiPlatformIO_ImGuiPlatformIO$descriptor() {
        return ImGuiPlatformIO_ImGuiPlatformIO.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiPlatformIO *ImGuiPlatformIO_ImGuiPlatformIO()
     * }
     */
    public static MethodHandle ImGuiPlatformIO_ImGuiPlatformIO$handle() {
        return ImGuiPlatformIO_ImGuiPlatformIO.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiPlatformIO *ImGuiPlatformIO_ImGuiPlatformIO()
     * }
     */
    public static MemorySegment ImGuiPlatformIO_ImGuiPlatformIO$address() {
        return ImGuiPlatformIO_ImGuiPlatformIO.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiPlatformIO *ImGuiPlatformIO_ImGuiPlatformIO()
     * }
     */
    public static MemorySegment ImGuiPlatformIO_ImGuiPlatformIO() {
        var mh$ = ImGuiPlatformIO_ImGuiPlatformIO.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPlatformIO_ImGuiPlatformIO");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPlatformIO_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPlatformIO_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_destroy(ImGuiPlatformIO *self)
     * }
     */
    public static FunctionDescriptor ImGuiPlatformIO_destroy$descriptor() {
        return ImGuiPlatformIO_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_destroy(ImGuiPlatformIO *self)
     * }
     */
    public static MethodHandle ImGuiPlatformIO_destroy$handle() {
        return ImGuiPlatformIO_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_destroy(ImGuiPlatformIO *self)
     * }
     */
    public static MemorySegment ImGuiPlatformIO_destroy$address() {
        return ImGuiPlatformIO_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiPlatformIO_destroy(ImGuiPlatformIO *self)
     * }
     */
    public static void ImGuiPlatformIO_destroy(MemorySegment self) {
        var mh$ = ImGuiPlatformIO_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPlatformIO_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPlatformMonitor_ImGuiPlatformMonitor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPlatformMonitor_ImGuiPlatformMonitor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiPlatformMonitor *ImGuiPlatformMonitor_ImGuiPlatformMonitor()
     * }
     */
    public static FunctionDescriptor ImGuiPlatformMonitor_ImGuiPlatformMonitor$descriptor() {
        return ImGuiPlatformMonitor_ImGuiPlatformMonitor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiPlatformMonitor *ImGuiPlatformMonitor_ImGuiPlatformMonitor()
     * }
     */
    public static MethodHandle ImGuiPlatformMonitor_ImGuiPlatformMonitor$handle() {
        return ImGuiPlatformMonitor_ImGuiPlatformMonitor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiPlatformMonitor *ImGuiPlatformMonitor_ImGuiPlatformMonitor()
     * }
     */
    public static MemorySegment ImGuiPlatformMonitor_ImGuiPlatformMonitor$address() {
        return ImGuiPlatformMonitor_ImGuiPlatformMonitor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiPlatformMonitor *ImGuiPlatformMonitor_ImGuiPlatformMonitor()
     * }
     */
    public static MemorySegment ImGuiPlatformMonitor_ImGuiPlatformMonitor() {
        var mh$ = ImGuiPlatformMonitor_ImGuiPlatformMonitor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPlatformMonitor_ImGuiPlatformMonitor");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPlatformMonitor_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPlatformMonitor_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformMonitor_destroy(ImGuiPlatformMonitor *self)
     * }
     */
    public static FunctionDescriptor ImGuiPlatformMonitor_destroy$descriptor() {
        return ImGuiPlatformMonitor_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformMonitor_destroy(ImGuiPlatformMonitor *self)
     * }
     */
    public static MethodHandle ImGuiPlatformMonitor_destroy$handle() {
        return ImGuiPlatformMonitor_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformMonitor_destroy(ImGuiPlatformMonitor *self)
     * }
     */
    public static MemorySegment ImGuiPlatformMonitor_destroy$address() {
        return ImGuiPlatformMonitor_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiPlatformMonitor_destroy(ImGuiPlatformMonitor *self)
     * }
     */
    public static void ImGuiPlatformMonitor_destroy(MemorySegment self) {
        var mh$ = ImGuiPlatformMonitor_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPlatformMonitor_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPlatformImeData_ImGuiPlatformImeData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPlatformImeData_ImGuiPlatformImeData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiPlatformImeData *ImGuiPlatformImeData_ImGuiPlatformImeData()
     * }
     */
    public static FunctionDescriptor ImGuiPlatformImeData_ImGuiPlatformImeData$descriptor() {
        return ImGuiPlatformImeData_ImGuiPlatformImeData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiPlatformImeData *ImGuiPlatformImeData_ImGuiPlatformImeData()
     * }
     */
    public static MethodHandle ImGuiPlatformImeData_ImGuiPlatformImeData$handle() {
        return ImGuiPlatformImeData_ImGuiPlatformImeData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiPlatformImeData *ImGuiPlatformImeData_ImGuiPlatformImeData()
     * }
     */
    public static MemorySegment ImGuiPlatformImeData_ImGuiPlatformImeData$address() {
        return ImGuiPlatformImeData_ImGuiPlatformImeData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiPlatformImeData *ImGuiPlatformImeData_ImGuiPlatformImeData()
     * }
     */
    public static MemorySegment ImGuiPlatformImeData_ImGuiPlatformImeData() {
        var mh$ = ImGuiPlatformImeData_ImGuiPlatformImeData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPlatformImeData_ImGuiPlatformImeData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPlatformImeData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPlatformImeData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformImeData_destroy(ImGuiPlatformImeData *self)
     * }
     */
    public static FunctionDescriptor ImGuiPlatformImeData_destroy$descriptor() {
        return ImGuiPlatformImeData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformImeData_destroy(ImGuiPlatformImeData *self)
     * }
     */
    public static MethodHandle ImGuiPlatformImeData_destroy$handle() {
        return ImGuiPlatformImeData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiPlatformImeData_destroy(ImGuiPlatformImeData *self)
     * }
     */
    public static MemorySegment ImGuiPlatformImeData_destroy$address() {
        return ImGuiPlatformImeData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiPlatformImeData_destroy(ImGuiPlatformImeData *self)
     * }
     */
    public static void ImGuiPlatformImeData_destroy(MemorySegment self) {
        var mh$ = ImGuiPlatformImeData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPlatformImeData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImHashData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_LONG,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImHashData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igImHashData(const void *data, size_t data_size, ImGuiID seed)
     * }
     */
    public static FunctionDescriptor igImHashData$descriptor() {
        return igImHashData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igImHashData(const void *data, size_t data_size, ImGuiID seed)
     * }
     */
    public static MethodHandle igImHashData$handle() {
        return igImHashData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igImHashData(const void *data, size_t data_size, ImGuiID seed)
     * }
     */
    public static MemorySegment igImHashData$address() {
        return igImHashData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igImHashData(const void *data, size_t data_size, ImGuiID seed)
     * }
     */
    public static int igImHashData(MemorySegment data, long data_size, int seed) {
        var mh$ = igImHashData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImHashData", data, data_size, seed);
            }
            return (int)mh$.invokeExact(data, data_size, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImHashStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_LONG,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImHashStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiID igImHashStr(const char *data, size_t data_size, ImGuiID seed)
     * }
     */
    public static FunctionDescriptor igImHashStr$descriptor() {
        return igImHashStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiID igImHashStr(const char *data, size_t data_size, ImGuiID seed)
     * }
     */
    public static MethodHandle igImHashStr$handle() {
        return igImHashStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiID igImHashStr(const char *data, size_t data_size, ImGuiID seed)
     * }
     */
    public static MemorySegment igImHashStr$address() {
        return igImHashStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiID igImHashStr(const char *data, size_t data_size, ImGuiID seed)
     * }
     */
    public static int igImHashStr(MemorySegment data, long data_size, int seed) {
        var mh$ = igImHashStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImHashStr", data, data_size, seed);
            }
            return (int)mh$.invokeExact(data, data_size, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImQsort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_LONG,
            imgui.C_LONG,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImQsort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImQsort(void *base, size_t count, size_t size_of_element, int (*compare_func)(const void *, const void *))
     * }
     */
    public static FunctionDescriptor igImQsort$descriptor() {
        return igImQsort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImQsort(void *base, size_t count, size_t size_of_element, int (*compare_func)(const void *, const void *))
     * }
     */
    public static MethodHandle igImQsort$handle() {
        return igImQsort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImQsort(void *base, size_t count, size_t size_of_element, int (*compare_func)(const void *, const void *))
     * }
     */
    public static MemorySegment igImQsort$address() {
        return igImQsort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImQsort(void *base, size_t count, size_t size_of_element, int (*compare_func)(const void *, const void *))
     * }
     */
    public static void igImQsort(MemorySegment base, long count, long size_of_element, MemorySegment compare_func) {
        var mh$ = igImQsort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImQsort", base, count, size_of_element, compare_func);
            }
            mh$.invokeExact(base, count, size_of_element, compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImAlphaBlendColors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImAlphaBlendColors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImU32 igImAlphaBlendColors(ImU32 col_a, ImU32 col_b)
     * }
     */
    public static FunctionDescriptor igImAlphaBlendColors$descriptor() {
        return igImAlphaBlendColors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImU32 igImAlphaBlendColors(ImU32 col_a, ImU32 col_b)
     * }
     */
    public static MethodHandle igImAlphaBlendColors$handle() {
        return igImAlphaBlendColors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImU32 igImAlphaBlendColors(ImU32 col_a, ImU32 col_b)
     * }
     */
    public static MemorySegment igImAlphaBlendColors$address() {
        return igImAlphaBlendColors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImU32 igImAlphaBlendColors(ImU32 col_a, ImU32 col_b)
     * }
     */
    public static int igImAlphaBlendColors(int col_a, int col_b) {
        var mh$ = igImAlphaBlendColors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImAlphaBlendColors", col_a, col_b);
            }
            return (int)mh$.invokeExact(col_a, col_b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImIsPowerOfTwo_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImIsPowerOfTwo_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImIsPowerOfTwo_Int(int v)
     * }
     */
    public static FunctionDescriptor igImIsPowerOfTwo_Int$descriptor() {
        return igImIsPowerOfTwo_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImIsPowerOfTwo_Int(int v)
     * }
     */
    public static MethodHandle igImIsPowerOfTwo_Int$handle() {
        return igImIsPowerOfTwo_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImIsPowerOfTwo_Int(int v)
     * }
     */
    public static MemorySegment igImIsPowerOfTwo_Int$address() {
        return igImIsPowerOfTwo_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImIsPowerOfTwo_Int(int v)
     * }
     */
    public static boolean igImIsPowerOfTwo_Int(int v) {
        var mh$ = igImIsPowerOfTwo_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImIsPowerOfTwo_Int", v);
            }
            return (boolean)mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImIsPowerOfTwo_U64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_LONG_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImIsPowerOfTwo_U64");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImIsPowerOfTwo_U64(ImU64 v)
     * }
     */
    public static FunctionDescriptor igImIsPowerOfTwo_U64$descriptor() {
        return igImIsPowerOfTwo_U64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImIsPowerOfTwo_U64(ImU64 v)
     * }
     */
    public static MethodHandle igImIsPowerOfTwo_U64$handle() {
        return igImIsPowerOfTwo_U64.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImIsPowerOfTwo_U64(ImU64 v)
     * }
     */
    public static MemorySegment igImIsPowerOfTwo_U64$address() {
        return igImIsPowerOfTwo_U64.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImIsPowerOfTwo_U64(ImU64 v)
     * }
     */
    public static boolean igImIsPowerOfTwo_U64(long v) {
        var mh$ = igImIsPowerOfTwo_U64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImIsPowerOfTwo_U64", v);
            }
            return (boolean)mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImUpperPowerOfTwo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImUpperPowerOfTwo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImUpperPowerOfTwo(int v)
     * }
     */
    public static FunctionDescriptor igImUpperPowerOfTwo$descriptor() {
        return igImUpperPowerOfTwo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImUpperPowerOfTwo(int v)
     * }
     */
    public static MethodHandle igImUpperPowerOfTwo$handle() {
        return igImUpperPowerOfTwo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImUpperPowerOfTwo(int v)
     * }
     */
    public static MemorySegment igImUpperPowerOfTwo$address() {
        return igImUpperPowerOfTwo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImUpperPowerOfTwo(int v)
     * }
     */
    public static int igImUpperPowerOfTwo(int v) {
        var mh$ = igImUpperPowerOfTwo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImUpperPowerOfTwo", v);
            }
            return (int)mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStricmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStricmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImStricmp(const char *str1, const char *str2)
     * }
     */
    public static FunctionDescriptor igImStricmp$descriptor() {
        return igImStricmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImStricmp(const char *str1, const char *str2)
     * }
     */
    public static MethodHandle igImStricmp$handle() {
        return igImStricmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImStricmp(const char *str1, const char *str2)
     * }
     */
    public static MemorySegment igImStricmp$address() {
        return igImStricmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImStricmp(const char *str1, const char *str2)
     * }
     */
    public static int igImStricmp(MemorySegment str1, MemorySegment str2) {
        var mh$ = igImStricmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStricmp", str1, str2);
            }
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStrnicmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStrnicmp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImStrnicmp(const char *str1, const char *str2, size_t count)
     * }
     */
    public static FunctionDescriptor igImStrnicmp$descriptor() {
        return igImStrnicmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImStrnicmp(const char *str1, const char *str2, size_t count)
     * }
     */
    public static MethodHandle igImStrnicmp$handle() {
        return igImStrnicmp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImStrnicmp(const char *str1, const char *str2, size_t count)
     * }
     */
    public static MemorySegment igImStrnicmp$address() {
        return igImStrnicmp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImStrnicmp(const char *str1, const char *str2, size_t count)
     * }
     */
    public static int igImStrnicmp(MemorySegment str1, MemorySegment str2, long count) {
        var mh$ = igImStrnicmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStrnicmp", str1, str2, count);
            }
            return (int)mh$.invokeExact(str1, str2, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStrncpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStrncpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImStrncpy(char *dst, const char *src, size_t count)
     * }
     */
    public static FunctionDescriptor igImStrncpy$descriptor() {
        return igImStrncpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImStrncpy(char *dst, const char *src, size_t count)
     * }
     */
    public static MethodHandle igImStrncpy$handle() {
        return igImStrncpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImStrncpy(char *dst, const char *src, size_t count)
     * }
     */
    public static MemorySegment igImStrncpy$address() {
        return igImStrncpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImStrncpy(char *dst, const char *src, size_t count)
     * }
     */
    public static void igImStrncpy(MemorySegment dst, MemorySegment src, long count) {
        var mh$ = igImStrncpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStrncpy", dst, src, count);
            }
            mh$.invokeExact(dst, src, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStrdup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStrdup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *igImStrdup(const char *str)
     * }
     */
    public static FunctionDescriptor igImStrdup$descriptor() {
        return igImStrdup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *igImStrdup(const char *str)
     * }
     */
    public static MethodHandle igImStrdup$handle() {
        return igImStrdup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *igImStrdup(const char *str)
     * }
     */
    public static MemorySegment igImStrdup$address() {
        return igImStrdup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *igImStrdup(const char *str)
     * }
     */
    public static MemorySegment igImStrdup(MemorySegment str) {
        var mh$ = igImStrdup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStrdup", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStrdupcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStrdupcpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *igImStrdupcpy(char *dst, size_t *p_dst_size, const char *str)
     * }
     */
    public static FunctionDescriptor igImStrdupcpy$descriptor() {
        return igImStrdupcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *igImStrdupcpy(char *dst, size_t *p_dst_size, const char *str)
     * }
     */
    public static MethodHandle igImStrdupcpy$handle() {
        return igImStrdupcpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *igImStrdupcpy(char *dst, size_t *p_dst_size, const char *str)
     * }
     */
    public static MemorySegment igImStrdupcpy$address() {
        return igImStrdupcpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *igImStrdupcpy(char *dst, size_t *p_dst_size, const char *str)
     * }
     */
    public static MemorySegment igImStrdupcpy(MemorySegment dst, MemorySegment p_dst_size, MemorySegment str) {
        var mh$ = igImStrdupcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStrdupcpy", dst, p_dst_size, str);
            }
            return (MemorySegment)mh$.invokeExact(dst, p_dst_size, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStrchrRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_CHAR
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStrchrRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImStrchrRange(const char *str_begin, const char *str_end, char c)
     * }
     */
    public static FunctionDescriptor igImStrchrRange$descriptor() {
        return igImStrchrRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImStrchrRange(const char *str_begin, const char *str_end, char c)
     * }
     */
    public static MethodHandle igImStrchrRange$handle() {
        return igImStrchrRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImStrchrRange(const char *str_begin, const char *str_end, char c)
     * }
     */
    public static MemorySegment igImStrchrRange$address() {
        return igImStrchrRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImStrchrRange(const char *str_begin, const char *str_end, char c)
     * }
     */
    public static MemorySegment igImStrchrRange(MemorySegment str_begin, MemorySegment str_end, byte c) {
        var mh$ = igImStrchrRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStrchrRange", str_begin, str_end, c);
            }
            return (MemorySegment)mh$.invokeExact(str_begin, str_end, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStreolRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStreolRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImStreolRange(const char *str, const char *str_end)
     * }
     */
    public static FunctionDescriptor igImStreolRange$descriptor() {
        return igImStreolRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImStreolRange(const char *str, const char *str_end)
     * }
     */
    public static MethodHandle igImStreolRange$handle() {
        return igImStreolRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImStreolRange(const char *str, const char *str_end)
     * }
     */
    public static MemorySegment igImStreolRange$address() {
        return igImStreolRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImStreolRange(const char *str, const char *str_end)
     * }
     */
    public static MemorySegment igImStreolRange(MemorySegment str, MemorySegment str_end) {
        var mh$ = igImStreolRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStreolRange", str, str_end);
            }
            return (MemorySegment)mh$.invokeExact(str, str_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStristr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStristr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImStristr(const char *haystack, const char *haystack_end, const char *needle, const char *needle_end)
     * }
     */
    public static FunctionDescriptor igImStristr$descriptor() {
        return igImStristr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImStristr(const char *haystack, const char *haystack_end, const char *needle, const char *needle_end)
     * }
     */
    public static MethodHandle igImStristr$handle() {
        return igImStristr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImStristr(const char *haystack, const char *haystack_end, const char *needle, const char *needle_end)
     * }
     */
    public static MemorySegment igImStristr$address() {
        return igImStristr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImStristr(const char *haystack, const char *haystack_end, const char *needle, const char *needle_end)
     * }
     */
    public static MemorySegment igImStristr(MemorySegment haystack, MemorySegment haystack_end, MemorySegment needle, MemorySegment needle_end) {
        var mh$ = igImStristr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStristr", haystack, haystack_end, needle, needle_end);
            }
            return (MemorySegment)mh$.invokeExact(haystack, haystack_end, needle, needle_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStrTrimBlanks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStrTrimBlanks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImStrTrimBlanks(char *str)
     * }
     */
    public static FunctionDescriptor igImStrTrimBlanks$descriptor() {
        return igImStrTrimBlanks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImStrTrimBlanks(char *str)
     * }
     */
    public static MethodHandle igImStrTrimBlanks$handle() {
        return igImStrTrimBlanks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImStrTrimBlanks(char *str)
     * }
     */
    public static MemorySegment igImStrTrimBlanks$address() {
        return igImStrTrimBlanks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImStrTrimBlanks(char *str)
     * }
     */
    public static void igImStrTrimBlanks(MemorySegment str) {
        var mh$ = igImStrTrimBlanks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStrTrimBlanks", str);
            }
            mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStrSkipBlank {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStrSkipBlank");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImStrSkipBlank(const char *str)
     * }
     */
    public static FunctionDescriptor igImStrSkipBlank$descriptor() {
        return igImStrSkipBlank.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImStrSkipBlank(const char *str)
     * }
     */
    public static MethodHandle igImStrSkipBlank$handle() {
        return igImStrSkipBlank.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImStrSkipBlank(const char *str)
     * }
     */
    public static MemorySegment igImStrSkipBlank$address() {
        return igImStrSkipBlank.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImStrSkipBlank(const char *str)
     * }
     */
    public static MemorySegment igImStrSkipBlank(MemorySegment str) {
        var mh$ = igImStrSkipBlank.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStrSkipBlank", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStrlenW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStrlenW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImStrlenW(const ImWchar *str)
     * }
     */
    public static FunctionDescriptor igImStrlenW$descriptor() {
        return igImStrlenW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImStrlenW(const ImWchar *str)
     * }
     */
    public static MethodHandle igImStrlenW$handle() {
        return igImStrlenW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImStrlenW(const ImWchar *str)
     * }
     */
    public static MemorySegment igImStrlenW$address() {
        return igImStrlenW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImStrlenW(const ImWchar *str)
     * }
     */
    public static int igImStrlenW(MemorySegment str) {
        var mh$ = igImStrlenW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStrlenW", str);
            }
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImStrbolW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImStrbolW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const ImWchar *igImStrbolW(const ImWchar *buf_mid_line, const ImWchar *buf_begin)
     * }
     */
    public static FunctionDescriptor igImStrbolW$descriptor() {
        return igImStrbolW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const ImWchar *igImStrbolW(const ImWchar *buf_mid_line, const ImWchar *buf_begin)
     * }
     */
    public static MethodHandle igImStrbolW$handle() {
        return igImStrbolW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const ImWchar *igImStrbolW(const ImWchar *buf_mid_line, const ImWchar *buf_begin)
     * }
     */
    public static MemorySegment igImStrbolW$address() {
        return igImStrbolW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const ImWchar *igImStrbolW(const ImWchar *buf_mid_line, const ImWchar *buf_begin)
     * }
     */
    public static MemorySegment igImStrbolW(MemorySegment buf_mid_line, MemorySegment buf_begin) {
        var mh$ = igImStrbolW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImStrbolW", buf_mid_line, buf_begin);
            }
            return (MemorySegment)mh$.invokeExact(buf_mid_line, buf_begin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImToUpper {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_CHAR,
            imgui.C_CHAR
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImToUpper");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char igImToUpper(char c)
     * }
     */
    public static FunctionDescriptor igImToUpper$descriptor() {
        return igImToUpper.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char igImToUpper(char c)
     * }
     */
    public static MethodHandle igImToUpper$handle() {
        return igImToUpper.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char igImToUpper(char c)
     * }
     */
    public static MemorySegment igImToUpper$address() {
        return igImToUpper.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char igImToUpper(char c)
     * }
     */
    public static byte igImToUpper(byte c) {
        var mh$ = igImToUpper.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImToUpper", c);
            }
            return (byte)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImCharIsBlankA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_CHAR
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImCharIsBlankA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImCharIsBlankA(char c)
     * }
     */
    public static FunctionDescriptor igImCharIsBlankA$descriptor() {
        return igImCharIsBlankA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImCharIsBlankA(char c)
     * }
     */
    public static MethodHandle igImCharIsBlankA$handle() {
        return igImCharIsBlankA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImCharIsBlankA(char c)
     * }
     */
    public static MemorySegment igImCharIsBlankA$address() {
        return igImCharIsBlankA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImCharIsBlankA(char c)
     * }
     */
    public static boolean igImCharIsBlankA(byte c) {
        var mh$ = igImCharIsBlankA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImCharIsBlankA", c);
            }
            return (boolean)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImCharIsBlankW {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImCharIsBlankW");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImCharIsBlankW(unsigned int c)
     * }
     */
    public static FunctionDescriptor igImCharIsBlankW$descriptor() {
        return igImCharIsBlankW.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImCharIsBlankW(unsigned int c)
     * }
     */
    public static MethodHandle igImCharIsBlankW$handle() {
        return igImCharIsBlankW.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImCharIsBlankW(unsigned int c)
     * }
     */
    public static MemorySegment igImCharIsBlankW$address() {
        return igImCharIsBlankW.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImCharIsBlankW(unsigned int c)
     * }
     */
    public static boolean igImCharIsBlankW(int c) {
        var mh$ = igImCharIsBlankW.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImCharIsBlankW", c);
            }
            return (boolean)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImCharIsXdigitA {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_CHAR
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImCharIsXdigitA");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImCharIsXdigitA(char c)
     * }
     */
    public static FunctionDescriptor igImCharIsXdigitA$descriptor() {
        return igImCharIsXdigitA.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImCharIsXdigitA(char c)
     * }
     */
    public static MethodHandle igImCharIsXdigitA$handle() {
        return igImCharIsXdigitA.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImCharIsXdigitA(char c)
     * }
     */
    public static MemorySegment igImCharIsXdigitA$address() {
        return igImCharIsXdigitA.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImCharIsXdigitA(char c)
     * }
     */
    public static boolean igImCharIsXdigitA(byte c) {
        var mh$ = igImCharIsXdigitA.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImCharIsXdigitA", c);
            }
            return (boolean)mh$.invokeExact(c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int igImFormatString(char *buf, size_t buf_size, const char *fmt, ...)
     * }
     */
    public static class igImFormatString {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                imgui.C_INT,
                imgui.C_POINTER,
                imgui.C_LONG,
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igImFormatString");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igImFormatString(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int igImFormatString(char *buf, size_t buf_size, const char *fmt, ...)
         * }
         */
        public static igImFormatString makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igImFormatString(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment buf, long buf_size, MemorySegment fmt, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igImFormatString", buf, buf_size, fmt, x3);
                }
                return (int)spreader.invokeExact(buf, buf_size, fmt, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igImFormatStringV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_LONG,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFormatStringV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImFormatStringV(char *buf, size_t buf_size, const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igImFormatStringV$descriptor() {
        return igImFormatStringV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImFormatStringV(char *buf, size_t buf_size, const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igImFormatStringV$handle() {
        return igImFormatStringV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImFormatStringV(char *buf, size_t buf_size, const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igImFormatStringV$address() {
        return igImFormatStringV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImFormatStringV(char *buf, size_t buf_size, const char *fmt, va_list args)
     * }
     */
    public static int igImFormatStringV(MemorySegment buf, long buf_size, MemorySegment fmt, MemorySegment args) {
        var mh$ = igImFormatStringV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFormatStringV", buf, buf_size, fmt, args);
            }
            return (int)mh$.invokeExact(buf, buf_size, fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void igImFormatStringToTempBuffer(const char **out_buf, const char **out_buf_end, const char *fmt, ...)
     * }
     */
    public static class igImFormatStringToTempBuffer {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                imgui.C_POINTER,
                imgui.C_POINTER,
                imgui.C_POINTER
            );
        private static final MemorySegment ADDR = imgui.findOrThrow("igImFormatStringToTempBuffer");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private igImFormatStringToTempBuffer(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void igImFormatStringToTempBuffer(const char **out_buf, const char **out_buf_end, const char *fmt, ...)
         * }
         */
        public static igImFormatStringToTempBuffer makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new igImFormatStringToTempBuffer(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment out_buf, MemorySegment out_buf_end, MemorySegment fmt, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("igImFormatStringToTempBuffer", out_buf, out_buf_end, fmt, x3);
                }
                spreader.invokeExact(out_buf, out_buf_end, fmt, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class igImFormatStringToTempBufferV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFormatStringToTempBufferV");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFormatStringToTempBufferV(const char **out_buf, const char **out_buf_end, const char *fmt, va_list args)
     * }
     */
    public static FunctionDescriptor igImFormatStringToTempBufferV$descriptor() {
        return igImFormatStringToTempBufferV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFormatStringToTempBufferV(const char **out_buf, const char **out_buf_end, const char *fmt, va_list args)
     * }
     */
    public static MethodHandle igImFormatStringToTempBufferV$handle() {
        return igImFormatStringToTempBufferV.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFormatStringToTempBufferV(const char **out_buf, const char **out_buf_end, const char *fmt, va_list args)
     * }
     */
    public static MemorySegment igImFormatStringToTempBufferV$address() {
        return igImFormatStringToTempBufferV.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFormatStringToTempBufferV(const char **out_buf, const char **out_buf_end, const char *fmt, va_list args)
     * }
     */
    public static void igImFormatStringToTempBufferV(MemorySegment out_buf, MemorySegment out_buf_end, MemorySegment fmt, MemorySegment args) {
        var mh$ = igImFormatStringToTempBufferV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFormatStringToTempBufferV", out_buf, out_buf_end, fmt, args);
            }
            mh$.invokeExact(out_buf, out_buf_end, fmt, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImParseFormatFindStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImParseFormatFindStart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatFindStart(const char *format)
     * }
     */
    public static FunctionDescriptor igImParseFormatFindStart$descriptor() {
        return igImParseFormatFindStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatFindStart(const char *format)
     * }
     */
    public static MethodHandle igImParseFormatFindStart$handle() {
        return igImParseFormatFindStart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatFindStart(const char *format)
     * }
     */
    public static MemorySegment igImParseFormatFindStart$address() {
        return igImParseFormatFindStart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImParseFormatFindStart(const char *format)
     * }
     */
    public static MemorySegment igImParseFormatFindStart(MemorySegment format) {
        var mh$ = igImParseFormatFindStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImParseFormatFindStart", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImParseFormatFindEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImParseFormatFindEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatFindEnd(const char *format)
     * }
     */
    public static FunctionDescriptor igImParseFormatFindEnd$descriptor() {
        return igImParseFormatFindEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatFindEnd(const char *format)
     * }
     */
    public static MethodHandle igImParseFormatFindEnd$handle() {
        return igImParseFormatFindEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatFindEnd(const char *format)
     * }
     */
    public static MemorySegment igImParseFormatFindEnd$address() {
        return igImParseFormatFindEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImParseFormatFindEnd(const char *format)
     * }
     */
    public static MemorySegment igImParseFormatFindEnd(MemorySegment format) {
        var mh$ = igImParseFormatFindEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImParseFormatFindEnd", format);
            }
            return (MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImParseFormatTrimDecorations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImParseFormatTrimDecorations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatTrimDecorations(const char *format, char *buf, size_t buf_size)
     * }
     */
    public static FunctionDescriptor igImParseFormatTrimDecorations$descriptor() {
        return igImParseFormatTrimDecorations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatTrimDecorations(const char *format, char *buf, size_t buf_size)
     * }
     */
    public static MethodHandle igImParseFormatTrimDecorations$handle() {
        return igImParseFormatTrimDecorations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatTrimDecorations(const char *format, char *buf, size_t buf_size)
     * }
     */
    public static MemorySegment igImParseFormatTrimDecorations$address() {
        return igImParseFormatTrimDecorations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImParseFormatTrimDecorations(const char *format, char *buf, size_t buf_size)
     * }
     */
    public static MemorySegment igImParseFormatTrimDecorations(MemorySegment format, MemorySegment buf, long buf_size) {
        var mh$ = igImParseFormatTrimDecorations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImParseFormatTrimDecorations", format, buf, buf_size);
            }
            return (MemorySegment)mh$.invokeExact(format, buf, buf_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImParseFormatSanitizeForPrinting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImParseFormatSanitizeForPrinting");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImParseFormatSanitizeForPrinting(const char *fmt_in, char *fmt_out, size_t fmt_out_size)
     * }
     */
    public static FunctionDescriptor igImParseFormatSanitizeForPrinting$descriptor() {
        return igImParseFormatSanitizeForPrinting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImParseFormatSanitizeForPrinting(const char *fmt_in, char *fmt_out, size_t fmt_out_size)
     * }
     */
    public static MethodHandle igImParseFormatSanitizeForPrinting$handle() {
        return igImParseFormatSanitizeForPrinting.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImParseFormatSanitizeForPrinting(const char *fmt_in, char *fmt_out, size_t fmt_out_size)
     * }
     */
    public static MemorySegment igImParseFormatSanitizeForPrinting$address() {
        return igImParseFormatSanitizeForPrinting.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImParseFormatSanitizeForPrinting(const char *fmt_in, char *fmt_out, size_t fmt_out_size)
     * }
     */
    public static void igImParseFormatSanitizeForPrinting(MemorySegment fmt_in, MemorySegment fmt_out, long fmt_out_size) {
        var mh$ = igImParseFormatSanitizeForPrinting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImParseFormatSanitizeForPrinting", fmt_in, fmt_out, fmt_out_size);
            }
            mh$.invokeExact(fmt_in, fmt_out, fmt_out_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImParseFormatSanitizeForScanning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_LONG
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImParseFormatSanitizeForScanning");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatSanitizeForScanning(const char *fmt_in, char *fmt_out, size_t fmt_out_size)
     * }
     */
    public static FunctionDescriptor igImParseFormatSanitizeForScanning$descriptor() {
        return igImParseFormatSanitizeForScanning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatSanitizeForScanning(const char *fmt_in, char *fmt_out, size_t fmt_out_size)
     * }
     */
    public static MethodHandle igImParseFormatSanitizeForScanning$handle() {
        return igImParseFormatSanitizeForScanning.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImParseFormatSanitizeForScanning(const char *fmt_in, char *fmt_out, size_t fmt_out_size)
     * }
     */
    public static MemorySegment igImParseFormatSanitizeForScanning$address() {
        return igImParseFormatSanitizeForScanning.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImParseFormatSanitizeForScanning(const char *fmt_in, char *fmt_out, size_t fmt_out_size)
     * }
     */
    public static MemorySegment igImParseFormatSanitizeForScanning(MemorySegment fmt_in, MemorySegment fmt_out, long fmt_out_size) {
        var mh$ = igImParseFormatSanitizeForScanning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImParseFormatSanitizeForScanning", fmt_in, fmt_out, fmt_out_size);
            }
            return (MemorySegment)mh$.invokeExact(fmt_in, fmt_out, fmt_out_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImParseFormatPrecision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImParseFormatPrecision");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImParseFormatPrecision(const char *format, int default_value)
     * }
     */
    public static FunctionDescriptor igImParseFormatPrecision$descriptor() {
        return igImParseFormatPrecision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImParseFormatPrecision(const char *format, int default_value)
     * }
     */
    public static MethodHandle igImParseFormatPrecision$handle() {
        return igImParseFormatPrecision.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImParseFormatPrecision(const char *format, int default_value)
     * }
     */
    public static MemorySegment igImParseFormatPrecision$address() {
        return igImParseFormatPrecision.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImParseFormatPrecision(const char *format, int default_value)
     * }
     */
    public static int igImParseFormatPrecision(MemorySegment format, int default_value) {
        var mh$ = igImParseFormatPrecision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImParseFormatPrecision", format, default_value);
            }
            return (int)mh$.invokeExact(format, default_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTextCharToUtf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTextCharToUtf8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImTextCharToUtf8(char out_buf[5], unsigned int c)
     * }
     */
    public static FunctionDescriptor igImTextCharToUtf8$descriptor() {
        return igImTextCharToUtf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImTextCharToUtf8(char out_buf[5], unsigned int c)
     * }
     */
    public static MethodHandle igImTextCharToUtf8$handle() {
        return igImTextCharToUtf8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImTextCharToUtf8(char out_buf[5], unsigned int c)
     * }
     */
    public static MemorySegment igImTextCharToUtf8$address() {
        return igImTextCharToUtf8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImTextCharToUtf8(char out_buf[5], unsigned int c)
     * }
     */
    public static MemorySegment igImTextCharToUtf8(MemorySegment out_buf, int c) {
        var mh$ = igImTextCharToUtf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTextCharToUtf8", out_buf, c);
            }
            return (MemorySegment)mh$.invokeExact(out_buf, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTextStrToUtf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTextStrToUtf8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImTextStrToUtf8(char *out_buf, int out_buf_size, const ImWchar *in_text, const ImWchar *in_text_end)
     * }
     */
    public static FunctionDescriptor igImTextStrToUtf8$descriptor() {
        return igImTextStrToUtf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImTextStrToUtf8(char *out_buf, int out_buf_size, const ImWchar *in_text, const ImWchar *in_text_end)
     * }
     */
    public static MethodHandle igImTextStrToUtf8$handle() {
        return igImTextStrToUtf8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImTextStrToUtf8(char *out_buf, int out_buf_size, const ImWchar *in_text, const ImWchar *in_text_end)
     * }
     */
    public static MemorySegment igImTextStrToUtf8$address() {
        return igImTextStrToUtf8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImTextStrToUtf8(char *out_buf, int out_buf_size, const ImWchar *in_text, const ImWchar *in_text_end)
     * }
     */
    public static int igImTextStrToUtf8(MemorySegment out_buf, int out_buf_size, MemorySegment in_text, MemorySegment in_text_end) {
        var mh$ = igImTextStrToUtf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTextStrToUtf8", out_buf, out_buf_size, in_text, in_text_end);
            }
            return (int)mh$.invokeExact(out_buf, out_buf_size, in_text, in_text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTextCharFromUtf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTextCharFromUtf8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImTextCharFromUtf8(unsigned int *out_char, const char *in_text, const char *in_text_end)
     * }
     */
    public static FunctionDescriptor igImTextCharFromUtf8$descriptor() {
        return igImTextCharFromUtf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImTextCharFromUtf8(unsigned int *out_char, const char *in_text, const char *in_text_end)
     * }
     */
    public static MethodHandle igImTextCharFromUtf8$handle() {
        return igImTextCharFromUtf8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImTextCharFromUtf8(unsigned int *out_char, const char *in_text, const char *in_text_end)
     * }
     */
    public static MemorySegment igImTextCharFromUtf8$address() {
        return igImTextCharFromUtf8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImTextCharFromUtf8(unsigned int *out_char, const char *in_text, const char *in_text_end)
     * }
     */
    public static int igImTextCharFromUtf8(MemorySegment out_char, MemorySegment in_text, MemorySegment in_text_end) {
        var mh$ = igImTextCharFromUtf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTextCharFromUtf8", out_char, in_text, in_text_end);
            }
            return (int)mh$.invokeExact(out_char, in_text, in_text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTextStrFromUtf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTextStrFromUtf8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImTextStrFromUtf8(ImWchar *out_buf, int out_buf_size, const char *in_text, const char *in_text_end, const char **in_remaining)
     * }
     */
    public static FunctionDescriptor igImTextStrFromUtf8$descriptor() {
        return igImTextStrFromUtf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImTextStrFromUtf8(ImWchar *out_buf, int out_buf_size, const char *in_text, const char *in_text_end, const char **in_remaining)
     * }
     */
    public static MethodHandle igImTextStrFromUtf8$handle() {
        return igImTextStrFromUtf8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImTextStrFromUtf8(ImWchar *out_buf, int out_buf_size, const char *in_text, const char *in_text_end, const char **in_remaining)
     * }
     */
    public static MemorySegment igImTextStrFromUtf8$address() {
        return igImTextStrFromUtf8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImTextStrFromUtf8(ImWchar *out_buf, int out_buf_size, const char *in_text, const char *in_text_end, const char **in_remaining)
     * }
     */
    public static int igImTextStrFromUtf8(MemorySegment out_buf, int out_buf_size, MemorySegment in_text, MemorySegment in_text_end, MemorySegment in_remaining) {
        var mh$ = igImTextStrFromUtf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTextStrFromUtf8", out_buf, out_buf_size, in_text, in_text_end, in_remaining);
            }
            return (int)mh$.invokeExact(out_buf, out_buf_size, in_text, in_text_end, in_remaining);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTextCountCharsFromUtf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTextCountCharsFromUtf8");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImTextCountCharsFromUtf8(const char *in_text, const char *in_text_end)
     * }
     */
    public static FunctionDescriptor igImTextCountCharsFromUtf8$descriptor() {
        return igImTextCountCharsFromUtf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImTextCountCharsFromUtf8(const char *in_text, const char *in_text_end)
     * }
     */
    public static MethodHandle igImTextCountCharsFromUtf8$handle() {
        return igImTextCountCharsFromUtf8.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImTextCountCharsFromUtf8(const char *in_text, const char *in_text_end)
     * }
     */
    public static MemorySegment igImTextCountCharsFromUtf8$address() {
        return igImTextCountCharsFromUtf8.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImTextCountCharsFromUtf8(const char *in_text, const char *in_text_end)
     * }
     */
    public static int igImTextCountCharsFromUtf8(MemorySegment in_text, MemorySegment in_text_end) {
        var mh$ = igImTextCountCharsFromUtf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTextCountCharsFromUtf8", in_text, in_text_end);
            }
            return (int)mh$.invokeExact(in_text, in_text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTextCountUtf8BytesFromChar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTextCountUtf8BytesFromChar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImTextCountUtf8BytesFromChar(const char *in_text, const char *in_text_end)
     * }
     */
    public static FunctionDescriptor igImTextCountUtf8BytesFromChar$descriptor() {
        return igImTextCountUtf8BytesFromChar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImTextCountUtf8BytesFromChar(const char *in_text, const char *in_text_end)
     * }
     */
    public static MethodHandle igImTextCountUtf8BytesFromChar$handle() {
        return igImTextCountUtf8BytesFromChar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImTextCountUtf8BytesFromChar(const char *in_text, const char *in_text_end)
     * }
     */
    public static MemorySegment igImTextCountUtf8BytesFromChar$address() {
        return igImTextCountUtf8BytesFromChar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImTextCountUtf8BytesFromChar(const char *in_text, const char *in_text_end)
     * }
     */
    public static int igImTextCountUtf8BytesFromChar(MemorySegment in_text, MemorySegment in_text_end) {
        var mh$ = igImTextCountUtf8BytesFromChar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTextCountUtf8BytesFromChar", in_text, in_text_end);
            }
            return (int)mh$.invokeExact(in_text, in_text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTextCountUtf8BytesFromStr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTextCountUtf8BytesFromStr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImTextCountUtf8BytesFromStr(const ImWchar *in_text, const ImWchar *in_text_end)
     * }
     */
    public static FunctionDescriptor igImTextCountUtf8BytesFromStr$descriptor() {
        return igImTextCountUtf8BytesFromStr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImTextCountUtf8BytesFromStr(const ImWchar *in_text, const ImWchar *in_text_end)
     * }
     */
    public static MethodHandle igImTextCountUtf8BytesFromStr$handle() {
        return igImTextCountUtf8BytesFromStr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImTextCountUtf8BytesFromStr(const ImWchar *in_text, const ImWchar *in_text_end)
     * }
     */
    public static MemorySegment igImTextCountUtf8BytesFromStr$address() {
        return igImTextCountUtf8BytesFromStr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImTextCountUtf8BytesFromStr(const ImWchar *in_text, const ImWchar *in_text_end)
     * }
     */
    public static int igImTextCountUtf8BytesFromStr(MemorySegment in_text, MemorySegment in_text_end) {
        var mh$ = igImTextCountUtf8BytesFromStr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTextCountUtf8BytesFromStr", in_text, in_text_end);
            }
            return (int)mh$.invokeExact(in_text, in_text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTextFindPreviousUtf8Codepoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTextFindPreviousUtf8Codepoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *igImTextFindPreviousUtf8Codepoint(const char *in_text_start, const char *in_text_curr)
     * }
     */
    public static FunctionDescriptor igImTextFindPreviousUtf8Codepoint$descriptor() {
        return igImTextFindPreviousUtf8Codepoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *igImTextFindPreviousUtf8Codepoint(const char *in_text_start, const char *in_text_curr)
     * }
     */
    public static MethodHandle igImTextFindPreviousUtf8Codepoint$handle() {
        return igImTextFindPreviousUtf8Codepoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *igImTextFindPreviousUtf8Codepoint(const char *in_text_start, const char *in_text_curr)
     * }
     */
    public static MemorySegment igImTextFindPreviousUtf8Codepoint$address() {
        return igImTextFindPreviousUtf8Codepoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *igImTextFindPreviousUtf8Codepoint(const char *in_text_start, const char *in_text_curr)
     * }
     */
    public static MemorySegment igImTextFindPreviousUtf8Codepoint(MemorySegment in_text_start, MemorySegment in_text_curr) {
        var mh$ = igImTextFindPreviousUtf8Codepoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTextFindPreviousUtf8Codepoint", in_text_start, in_text_curr);
            }
            return (MemorySegment)mh$.invokeExact(in_text_start, in_text_curr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTextCountLines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTextCountLines");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImTextCountLines(const char *in_text, const char *in_text_end)
     * }
     */
    public static FunctionDescriptor igImTextCountLines$descriptor() {
        return igImTextCountLines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImTextCountLines(const char *in_text, const char *in_text_end)
     * }
     */
    public static MethodHandle igImTextCountLines$handle() {
        return igImTextCountLines.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImTextCountLines(const char *in_text, const char *in_text_end)
     * }
     */
    public static MemorySegment igImTextCountLines$address() {
        return igImTextCountLines.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImTextCountLines(const char *in_text, const char *in_text_end)
     * }
     */
    public static int igImTextCountLines(MemorySegment in_text, MemorySegment in_text_end) {
        var mh$ = igImTextCountLines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTextCountLines", in_text, in_text_end);
            }
            return (int)mh$.invokeExact(in_text, in_text_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFileOpen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFileOpen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImFileHandle igImFileOpen(const char *filename, const char *mode)
     * }
     */
    public static FunctionDescriptor igImFileOpen$descriptor() {
        return igImFileOpen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImFileHandle igImFileOpen(const char *filename, const char *mode)
     * }
     */
    public static MethodHandle igImFileOpen$handle() {
        return igImFileOpen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImFileHandle igImFileOpen(const char *filename, const char *mode)
     * }
     */
    public static MemorySegment igImFileOpen$address() {
        return igImFileOpen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImFileHandle igImFileOpen(const char *filename, const char *mode)
     * }
     */
    public static MemorySegment igImFileOpen(MemorySegment filename, MemorySegment mode) {
        var mh$ = igImFileOpen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFileOpen", filename, mode);
            }
            return (MemorySegment)mh$.invokeExact(filename, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFileClose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFileClose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImFileClose(ImFileHandle file)
     * }
     */
    public static FunctionDescriptor igImFileClose$descriptor() {
        return igImFileClose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImFileClose(ImFileHandle file)
     * }
     */
    public static MethodHandle igImFileClose$handle() {
        return igImFileClose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImFileClose(ImFileHandle file)
     * }
     */
    public static MemorySegment igImFileClose$address() {
        return igImFileClose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImFileClose(ImFileHandle file)
     * }
     */
    public static boolean igImFileClose(MemorySegment file) {
        var mh$ = igImFileClose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFileClose", file);
            }
            return (boolean)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFileGetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_LONG_LONG,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFileGetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImU64 igImFileGetSize(ImFileHandle file)
     * }
     */
    public static FunctionDescriptor igImFileGetSize$descriptor() {
        return igImFileGetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImU64 igImFileGetSize(ImFileHandle file)
     * }
     */
    public static MethodHandle igImFileGetSize$handle() {
        return igImFileGetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImU64 igImFileGetSize(ImFileHandle file)
     * }
     */
    public static MemorySegment igImFileGetSize$address() {
        return igImFileGetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImU64 igImFileGetSize(ImFileHandle file)
     * }
     */
    public static long igImFileGetSize(MemorySegment file) {
        var mh$ = igImFileGetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFileGetSize", file);
            }
            return (long)mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFileRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_LONG_LONG,
            imgui.C_POINTER,
            imgui.C_LONG_LONG,
            imgui.C_LONG_LONG,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFileRead");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImU64 igImFileRead(void *data, ImU64 size, ImU64 count, ImFileHandle file)
     * }
     */
    public static FunctionDescriptor igImFileRead$descriptor() {
        return igImFileRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImU64 igImFileRead(void *data, ImU64 size, ImU64 count, ImFileHandle file)
     * }
     */
    public static MethodHandle igImFileRead$handle() {
        return igImFileRead.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImU64 igImFileRead(void *data, ImU64 size, ImU64 count, ImFileHandle file)
     * }
     */
    public static MemorySegment igImFileRead$address() {
        return igImFileRead.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImU64 igImFileRead(void *data, ImU64 size, ImU64 count, ImFileHandle file)
     * }
     */
    public static long igImFileRead(MemorySegment data, long size, long count, MemorySegment file) {
        var mh$ = igImFileRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFileRead", data, size, count, file);
            }
            return (long)mh$.invokeExact(data, size, count, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFileWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_LONG_LONG,
            imgui.C_POINTER,
            imgui.C_LONG_LONG,
            imgui.C_LONG_LONG,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFileWrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImU64 igImFileWrite(const void *data, ImU64 size, ImU64 count, ImFileHandle file)
     * }
     */
    public static FunctionDescriptor igImFileWrite$descriptor() {
        return igImFileWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImU64 igImFileWrite(const void *data, ImU64 size, ImU64 count, ImFileHandle file)
     * }
     */
    public static MethodHandle igImFileWrite$handle() {
        return igImFileWrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImU64 igImFileWrite(const void *data, ImU64 size, ImU64 count, ImFileHandle file)
     * }
     */
    public static MemorySegment igImFileWrite$address() {
        return igImFileWrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImU64 igImFileWrite(const void *data, ImU64 size, ImU64 count, ImFileHandle file)
     * }
     */
    public static long igImFileWrite(MemorySegment data, long size, long count, MemorySegment file) {
        var mh$ = igImFileWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFileWrite", data, size, count, file);
            }
            return (long)mh$.invokeExact(data, size, count, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFileLoadToMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFileLoadToMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *igImFileLoadToMemory(const char *filename, const char *mode, size_t *out_file_size, int padding_bytes)
     * }
     */
    public static FunctionDescriptor igImFileLoadToMemory$descriptor() {
        return igImFileLoadToMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *igImFileLoadToMemory(const char *filename, const char *mode, size_t *out_file_size, int padding_bytes)
     * }
     */
    public static MethodHandle igImFileLoadToMemory$handle() {
        return igImFileLoadToMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *igImFileLoadToMemory(const char *filename, const char *mode, size_t *out_file_size, int padding_bytes)
     * }
     */
    public static MemorySegment igImFileLoadToMemory$address() {
        return igImFileLoadToMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *igImFileLoadToMemory(const char *filename, const char *mode, size_t *out_file_size, int padding_bytes)
     * }
     */
    public static MemorySegment igImFileLoadToMemory(MemorySegment filename, MemorySegment mode, MemorySegment out_file_size, int padding_bytes) {
        var mh$ = igImFileLoadToMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFileLoadToMemory", filename, mode, out_file_size, padding_bytes);
            }
            return (MemorySegment)mh$.invokeExact(filename, mode, out_file_size, padding_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImPow_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImPow_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImPow_Float(float x, float y)
     * }
     */
    public static FunctionDescriptor igImPow_Float$descriptor() {
        return igImPow_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImPow_Float(float x, float y)
     * }
     */
    public static MethodHandle igImPow_Float$handle() {
        return igImPow_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImPow_Float(float x, float y)
     * }
     */
    public static MemorySegment igImPow_Float$address() {
        return igImPow_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImPow_Float(float x, float y)
     * }
     */
    public static float igImPow_Float(float x, float y) {
        var mh$ = igImPow_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImPow_Float", x, y);
            }
            return (float)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImPow_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_DOUBLE,
            imgui.C_DOUBLE,
            imgui.C_DOUBLE
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImPow_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double igImPow_double(double x, double y)
     * }
     */
    public static FunctionDescriptor igImPow_double$descriptor() {
        return igImPow_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double igImPow_double(double x, double y)
     * }
     */
    public static MethodHandle igImPow_double$handle() {
        return igImPow_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double igImPow_double(double x, double y)
     * }
     */
    public static MemorySegment igImPow_double$address() {
        return igImPow_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double igImPow_double(double x, double y)
     * }
     */
    public static double igImPow_double(double x, double y) {
        var mh$ = igImPow_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImPow_double", x, y);
            }
            return (double)mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLog_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLog_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImLog_Float(float x)
     * }
     */
    public static FunctionDescriptor igImLog_Float$descriptor() {
        return igImLog_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImLog_Float(float x)
     * }
     */
    public static MethodHandle igImLog_Float$handle() {
        return igImLog_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImLog_Float(float x)
     * }
     */
    public static MemorySegment igImLog_Float$address() {
        return igImLog_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImLog_Float(float x)
     * }
     */
    public static float igImLog_Float(float x) {
        var mh$ = igImLog_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLog_Float", x);
            }
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLog_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_DOUBLE,
            imgui.C_DOUBLE
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLog_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double igImLog_double(double x)
     * }
     */
    public static FunctionDescriptor igImLog_double$descriptor() {
        return igImLog_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double igImLog_double(double x)
     * }
     */
    public static MethodHandle igImLog_double$handle() {
        return igImLog_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double igImLog_double(double x)
     * }
     */
    public static MemorySegment igImLog_double$address() {
        return igImLog_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double igImLog_double(double x)
     * }
     */
    public static double igImLog_double(double x) {
        var mh$ = igImLog_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLog_double", x);
            }
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImAbs_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImAbs_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImAbs_Int(int x)
     * }
     */
    public static FunctionDescriptor igImAbs_Int$descriptor() {
        return igImAbs_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImAbs_Int(int x)
     * }
     */
    public static MethodHandle igImAbs_Int$handle() {
        return igImAbs_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImAbs_Int(int x)
     * }
     */
    public static MemorySegment igImAbs_Int$address() {
        return igImAbs_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImAbs_Int(int x)
     * }
     */
    public static int igImAbs_Int(int x) {
        var mh$ = igImAbs_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImAbs_Int", x);
            }
            return (int)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImAbs_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImAbs_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImAbs_Float(float x)
     * }
     */
    public static FunctionDescriptor igImAbs_Float$descriptor() {
        return igImAbs_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImAbs_Float(float x)
     * }
     */
    public static MethodHandle igImAbs_Float$handle() {
        return igImAbs_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImAbs_Float(float x)
     * }
     */
    public static MemorySegment igImAbs_Float$address() {
        return igImAbs_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImAbs_Float(float x)
     * }
     */
    public static float igImAbs_Float(float x) {
        var mh$ = igImAbs_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImAbs_Float", x);
            }
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImAbs_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_DOUBLE,
            imgui.C_DOUBLE
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImAbs_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double igImAbs_double(double x)
     * }
     */
    public static FunctionDescriptor igImAbs_double$descriptor() {
        return igImAbs_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double igImAbs_double(double x)
     * }
     */
    public static MethodHandle igImAbs_double$handle() {
        return igImAbs_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double igImAbs_double(double x)
     * }
     */
    public static MemorySegment igImAbs_double$address() {
        return igImAbs_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double igImAbs_double(double x)
     * }
     */
    public static double igImAbs_double(double x) {
        var mh$ = igImAbs_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImAbs_double", x);
            }
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImSign_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImSign_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImSign_Float(float x)
     * }
     */
    public static FunctionDescriptor igImSign_Float$descriptor() {
        return igImSign_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImSign_Float(float x)
     * }
     */
    public static MethodHandle igImSign_Float$handle() {
        return igImSign_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImSign_Float(float x)
     * }
     */
    public static MemorySegment igImSign_Float$address() {
        return igImSign_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImSign_Float(float x)
     * }
     */
    public static float igImSign_Float(float x) {
        var mh$ = igImSign_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImSign_Float", x);
            }
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImSign_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_DOUBLE,
            imgui.C_DOUBLE
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImSign_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double igImSign_double(double x)
     * }
     */
    public static FunctionDescriptor igImSign_double$descriptor() {
        return igImSign_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double igImSign_double(double x)
     * }
     */
    public static MethodHandle igImSign_double$handle() {
        return igImSign_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double igImSign_double(double x)
     * }
     */
    public static MemorySegment igImSign_double$address() {
        return igImSign_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double igImSign_double(double x)
     * }
     */
    public static double igImSign_double(double x) {
        var mh$ = igImSign_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImSign_double", x);
            }
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImRsqrt_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImRsqrt_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImRsqrt_Float(float x)
     * }
     */
    public static FunctionDescriptor igImRsqrt_Float$descriptor() {
        return igImRsqrt_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImRsqrt_Float(float x)
     * }
     */
    public static MethodHandle igImRsqrt_Float$handle() {
        return igImRsqrt_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImRsqrt_Float(float x)
     * }
     */
    public static MemorySegment igImRsqrt_Float$address() {
        return igImRsqrt_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImRsqrt_Float(float x)
     * }
     */
    public static float igImRsqrt_Float(float x) {
        var mh$ = igImRsqrt_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImRsqrt_Float", x);
            }
            return (float)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImRsqrt_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_DOUBLE,
            imgui.C_DOUBLE
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImRsqrt_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double igImRsqrt_double(double x)
     * }
     */
    public static FunctionDescriptor igImRsqrt_double$descriptor() {
        return igImRsqrt_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double igImRsqrt_double(double x)
     * }
     */
    public static MethodHandle igImRsqrt_double$handle() {
        return igImRsqrt_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double igImRsqrt_double(double x)
     * }
     */
    public static MemorySegment igImRsqrt_double$address() {
        return igImRsqrt_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double igImRsqrt_double(double x)
     * }
     */
    public static double igImRsqrt_double(double x) {
        var mh$ = igImRsqrt_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImRsqrt_double", x);
            }
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImMin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImMin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImMin(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static FunctionDescriptor igImMin$descriptor() {
        return igImMin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImMin(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static MethodHandle igImMin$handle() {
        return igImMin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImMin(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static MemorySegment igImMin$address() {
        return igImMin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImMin(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static void igImMin(MemorySegment pOut, MemorySegment lhs, MemorySegment rhs) {
        var mh$ = igImMin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImMin", pOut, lhs, rhs);
            }
            mh$.invokeExact(pOut, lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImMax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImMax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImMax(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static FunctionDescriptor igImMax$descriptor() {
        return igImMax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImMax(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static MethodHandle igImMax$handle() {
        return igImMax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImMax(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static MemorySegment igImMax$address() {
        return igImMax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImMax(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static void igImMax(MemorySegment pOut, MemorySegment lhs, MemorySegment rhs) {
        var mh$ = igImMax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImMax", pOut, lhs, rhs);
            }
            mh$.invokeExact(pOut, lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImClamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImClamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImClamp(ImVec2 *pOut, const ImVec2 v, const ImVec2 mn, const ImVec2 mx)
     * }
     */
    public static FunctionDescriptor igImClamp$descriptor() {
        return igImClamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImClamp(ImVec2 *pOut, const ImVec2 v, const ImVec2 mn, const ImVec2 mx)
     * }
     */
    public static MethodHandle igImClamp$handle() {
        return igImClamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImClamp(ImVec2 *pOut, const ImVec2 v, const ImVec2 mn, const ImVec2 mx)
     * }
     */
    public static MemorySegment igImClamp$address() {
        return igImClamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImClamp(ImVec2 *pOut, const ImVec2 v, const ImVec2 mn, const ImVec2 mx)
     * }
     */
    public static void igImClamp(MemorySegment pOut, MemorySegment v, MemorySegment mn, MemorySegment mx) {
        var mh$ = igImClamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImClamp", pOut, v, mn, mx);
            }
            mh$.invokeExact(pOut, v, mn, mx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLerp_Vec2Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLerp_Vec2Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImLerp_Vec2Float(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, float t)
     * }
     */
    public static FunctionDescriptor igImLerp_Vec2Float$descriptor() {
        return igImLerp_Vec2Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImLerp_Vec2Float(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, float t)
     * }
     */
    public static MethodHandle igImLerp_Vec2Float$handle() {
        return igImLerp_Vec2Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImLerp_Vec2Float(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, float t)
     * }
     */
    public static MemorySegment igImLerp_Vec2Float$address() {
        return igImLerp_Vec2Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImLerp_Vec2Float(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, float t)
     * }
     */
    public static void igImLerp_Vec2Float(MemorySegment pOut, MemorySegment a, MemorySegment b, float t) {
        var mh$ = igImLerp_Vec2Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLerp_Vec2Float", pOut, a, b, t);
            }
            mh$.invokeExact(pOut, a, b, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLerp_Vec2Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLerp_Vec2Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImLerp_Vec2Vec2(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 t)
     * }
     */
    public static FunctionDescriptor igImLerp_Vec2Vec2$descriptor() {
        return igImLerp_Vec2Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImLerp_Vec2Vec2(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 t)
     * }
     */
    public static MethodHandle igImLerp_Vec2Vec2$handle() {
        return igImLerp_Vec2Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImLerp_Vec2Vec2(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 t)
     * }
     */
    public static MemorySegment igImLerp_Vec2Vec2$address() {
        return igImLerp_Vec2Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImLerp_Vec2Vec2(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 t)
     * }
     */
    public static void igImLerp_Vec2Vec2(MemorySegment pOut, MemorySegment a, MemorySegment b, MemorySegment t) {
        var mh$ = igImLerp_Vec2Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLerp_Vec2Vec2", pOut, a, b, t);
            }
            mh$.invokeExact(pOut, a, b, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLerp_Vec4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec4.layout(),
            ImVec4.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLerp_Vec4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImLerp_Vec4(ImVec4 *pOut, const ImVec4 a, const ImVec4 b, float t)
     * }
     */
    public static FunctionDescriptor igImLerp_Vec4$descriptor() {
        return igImLerp_Vec4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImLerp_Vec4(ImVec4 *pOut, const ImVec4 a, const ImVec4 b, float t)
     * }
     */
    public static MethodHandle igImLerp_Vec4$handle() {
        return igImLerp_Vec4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImLerp_Vec4(ImVec4 *pOut, const ImVec4 a, const ImVec4 b, float t)
     * }
     */
    public static MemorySegment igImLerp_Vec4$address() {
        return igImLerp_Vec4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImLerp_Vec4(ImVec4 *pOut, const ImVec4 a, const ImVec4 b, float t)
     * }
     */
    public static void igImLerp_Vec4(MemorySegment pOut, MemorySegment a, MemorySegment b, float t) {
        var mh$ = igImLerp_Vec4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLerp_Vec4", pOut, a, b, t);
            }
            mh$.invokeExact(pOut, a, b, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImSaturate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImSaturate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImSaturate(float f)
     * }
     */
    public static FunctionDescriptor igImSaturate$descriptor() {
        return igImSaturate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImSaturate(float f)
     * }
     */
    public static MethodHandle igImSaturate$handle() {
        return igImSaturate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImSaturate(float f)
     * }
     */
    public static MemorySegment igImSaturate$address() {
        return igImSaturate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImSaturate(float f)
     * }
     */
    public static float igImSaturate(float f) {
        var mh$ = igImSaturate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImSaturate", f);
            }
            return (float)mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLengthSqr_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLengthSqr_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImLengthSqr_Vec2(const ImVec2 lhs)
     * }
     */
    public static FunctionDescriptor igImLengthSqr_Vec2$descriptor() {
        return igImLengthSqr_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImLengthSqr_Vec2(const ImVec2 lhs)
     * }
     */
    public static MethodHandle igImLengthSqr_Vec2$handle() {
        return igImLengthSqr_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImLengthSqr_Vec2(const ImVec2 lhs)
     * }
     */
    public static MemorySegment igImLengthSqr_Vec2$address() {
        return igImLengthSqr_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImLengthSqr_Vec2(const ImVec2 lhs)
     * }
     */
    public static float igImLengthSqr_Vec2(MemorySegment lhs) {
        var mh$ = igImLengthSqr_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLengthSqr_Vec2", lhs);
            }
            return (float)mh$.invokeExact(lhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLengthSqr_Vec4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            ImVec4.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLengthSqr_Vec4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImLengthSqr_Vec4(const ImVec4 lhs)
     * }
     */
    public static FunctionDescriptor igImLengthSqr_Vec4$descriptor() {
        return igImLengthSqr_Vec4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImLengthSqr_Vec4(const ImVec4 lhs)
     * }
     */
    public static MethodHandle igImLengthSqr_Vec4$handle() {
        return igImLengthSqr_Vec4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImLengthSqr_Vec4(const ImVec4 lhs)
     * }
     */
    public static MemorySegment igImLengthSqr_Vec4$address() {
        return igImLengthSqr_Vec4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImLengthSqr_Vec4(const ImVec4 lhs)
     * }
     */
    public static float igImLengthSqr_Vec4(MemorySegment lhs) {
        var mh$ = igImLengthSqr_Vec4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLengthSqr_Vec4", lhs);
            }
            return (float)mh$.invokeExact(lhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImInvLength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImInvLength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImInvLength(const ImVec2 lhs, float fail_value)
     * }
     */
    public static FunctionDescriptor igImInvLength$descriptor() {
        return igImInvLength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImInvLength(const ImVec2 lhs, float fail_value)
     * }
     */
    public static MethodHandle igImInvLength$handle() {
        return igImInvLength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImInvLength(const ImVec2 lhs, float fail_value)
     * }
     */
    public static MemorySegment igImInvLength$address() {
        return igImInvLength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImInvLength(const ImVec2 lhs, float fail_value)
     * }
     */
    public static float igImInvLength(MemorySegment lhs, float fail_value) {
        var mh$ = igImInvLength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImInvLength", lhs, fail_value);
            }
            return (float)mh$.invokeExact(lhs, fail_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTrunc_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTrunc_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImTrunc_Float(float f)
     * }
     */
    public static FunctionDescriptor igImTrunc_Float$descriptor() {
        return igImTrunc_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImTrunc_Float(float f)
     * }
     */
    public static MethodHandle igImTrunc_Float$handle() {
        return igImTrunc_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImTrunc_Float(float f)
     * }
     */
    public static MemorySegment igImTrunc_Float$address() {
        return igImTrunc_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImTrunc_Float(float f)
     * }
     */
    public static float igImTrunc_Float(float f) {
        var mh$ = igImTrunc_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTrunc_Float", f);
            }
            return (float)mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTrunc_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTrunc_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImTrunc_Vec2(ImVec2 *pOut, const ImVec2 v)
     * }
     */
    public static FunctionDescriptor igImTrunc_Vec2$descriptor() {
        return igImTrunc_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImTrunc_Vec2(ImVec2 *pOut, const ImVec2 v)
     * }
     */
    public static MethodHandle igImTrunc_Vec2$handle() {
        return igImTrunc_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImTrunc_Vec2(ImVec2 *pOut, const ImVec2 v)
     * }
     */
    public static MemorySegment igImTrunc_Vec2$address() {
        return igImTrunc_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImTrunc_Vec2(ImVec2 *pOut, const ImVec2 v)
     * }
     */
    public static void igImTrunc_Vec2(MemorySegment pOut, MemorySegment v) {
        var mh$ = igImTrunc_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTrunc_Vec2", pOut, v);
            }
            mh$.invokeExact(pOut, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFloor_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFloor_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImFloor_Float(float f)
     * }
     */
    public static FunctionDescriptor igImFloor_Float$descriptor() {
        return igImFloor_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImFloor_Float(float f)
     * }
     */
    public static MethodHandle igImFloor_Float$handle() {
        return igImFloor_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImFloor_Float(float f)
     * }
     */
    public static MemorySegment igImFloor_Float$address() {
        return igImFloor_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImFloor_Float(float f)
     * }
     */
    public static float igImFloor_Float(float f) {
        var mh$ = igImFloor_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFloor_Float", f);
            }
            return (float)mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImFloor_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImFloor_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImFloor_Vec2(ImVec2 *pOut, const ImVec2 v)
     * }
     */
    public static FunctionDescriptor igImFloor_Vec2$descriptor() {
        return igImFloor_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImFloor_Vec2(ImVec2 *pOut, const ImVec2 v)
     * }
     */
    public static MethodHandle igImFloor_Vec2$handle() {
        return igImFloor_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImFloor_Vec2(ImVec2 *pOut, const ImVec2 v)
     * }
     */
    public static MemorySegment igImFloor_Vec2$address() {
        return igImFloor_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImFloor_Vec2(ImVec2 *pOut, const ImVec2 v)
     * }
     */
    public static void igImFloor_Vec2(MemorySegment pOut, MemorySegment v) {
        var mh$ = igImFloor_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImFloor_Vec2", pOut, v);
            }
            mh$.invokeExact(pOut, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImModPositive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImModPositive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int igImModPositive(int a, int b)
     * }
     */
    public static FunctionDescriptor igImModPositive$descriptor() {
        return igImModPositive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int igImModPositive(int a, int b)
     * }
     */
    public static MethodHandle igImModPositive$handle() {
        return igImModPositive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int igImModPositive(int a, int b)
     * }
     */
    public static MemorySegment igImModPositive$address() {
        return igImModPositive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int igImModPositive(int a, int b)
     * }
     */
    public static int igImModPositive(int a, int b) {
        var mh$ = igImModPositive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImModPositive", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImDot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImDot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImDot(const ImVec2 a, const ImVec2 b)
     * }
     */
    public static FunctionDescriptor igImDot$descriptor() {
        return igImDot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImDot(const ImVec2 a, const ImVec2 b)
     * }
     */
    public static MethodHandle igImDot$handle() {
        return igImDot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImDot(const ImVec2 a, const ImVec2 b)
     * }
     */
    public static MemorySegment igImDot$address() {
        return igImDot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImDot(const ImVec2 a, const ImVec2 b)
     * }
     */
    public static float igImDot(MemorySegment a, MemorySegment b) {
        var mh$ = igImDot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImDot", a, b);
            }
            return (float)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImRotate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImRotate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImRotate(ImVec2 *pOut, const ImVec2 v, float cos_a, float sin_a)
     * }
     */
    public static FunctionDescriptor igImRotate$descriptor() {
        return igImRotate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImRotate(ImVec2 *pOut, const ImVec2 v, float cos_a, float sin_a)
     * }
     */
    public static MethodHandle igImRotate$handle() {
        return igImRotate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImRotate(ImVec2 *pOut, const ImVec2 v, float cos_a, float sin_a)
     * }
     */
    public static MemorySegment igImRotate$address() {
        return igImRotate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImRotate(ImVec2 *pOut, const ImVec2 v, float cos_a, float sin_a)
     * }
     */
    public static void igImRotate(MemorySegment pOut, MemorySegment v, float cos_a, float sin_a) {
        var mh$ = igImRotate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImRotate", pOut, v, cos_a, sin_a);
            }
            mh$.invokeExact(pOut, v, cos_a, sin_a);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLinearSweep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLinearSweep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImLinearSweep(float current, float target, float speed)
     * }
     */
    public static FunctionDescriptor igImLinearSweep$descriptor() {
        return igImLinearSweep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImLinearSweep(float current, float target, float speed)
     * }
     */
    public static MethodHandle igImLinearSweep$handle() {
        return igImLinearSweep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImLinearSweep(float current, float target, float speed)
     * }
     */
    public static MemorySegment igImLinearSweep$address() {
        return igImLinearSweep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImLinearSweep(float current, float target, float speed)
     * }
     */
    public static float igImLinearSweep(float current, float target, float speed) {
        var mh$ = igImLinearSweep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLinearSweep", current, target, speed);
            }
            return (float)mh$.invokeExact(current, target, speed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLinearRemapClamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLinearRemapClamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImLinearRemapClamp(float s0, float s1, float d0, float d1, float x)
     * }
     */
    public static FunctionDescriptor igImLinearRemapClamp$descriptor() {
        return igImLinearRemapClamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImLinearRemapClamp(float s0, float s1, float d0, float d1, float x)
     * }
     */
    public static MethodHandle igImLinearRemapClamp$handle() {
        return igImLinearRemapClamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImLinearRemapClamp(float s0, float s1, float d0, float d1, float x)
     * }
     */
    public static MemorySegment igImLinearRemapClamp$address() {
        return igImLinearRemapClamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImLinearRemapClamp(float s0, float s1, float d0, float d1, float x)
     * }
     */
    public static float igImLinearRemapClamp(float s0, float s1, float d0, float d1, float x) {
        var mh$ = igImLinearRemapClamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLinearRemapClamp", s0, s1, d0, d1, x);
            }
            return (float)mh$.invokeExact(s0, s1, d0, d1, x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImMul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImMul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImMul(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static FunctionDescriptor igImMul$descriptor() {
        return igImMul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImMul(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static MethodHandle igImMul$handle() {
        return igImMul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImMul(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static MemorySegment igImMul$address() {
        return igImMul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImMul(ImVec2 *pOut, const ImVec2 lhs, const ImVec2 rhs)
     * }
     */
    public static void igImMul(MemorySegment pOut, MemorySegment lhs, MemorySegment rhs) {
        var mh$ = igImMul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImMul", pOut, lhs, rhs);
            }
            mh$.invokeExact(pOut, lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImIsFloatAboveGuaranteedIntegerPrecision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImIsFloatAboveGuaranteedIntegerPrecision");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImIsFloatAboveGuaranteedIntegerPrecision(float f)
     * }
     */
    public static FunctionDescriptor igImIsFloatAboveGuaranteedIntegerPrecision$descriptor() {
        return igImIsFloatAboveGuaranteedIntegerPrecision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImIsFloatAboveGuaranteedIntegerPrecision(float f)
     * }
     */
    public static MethodHandle igImIsFloatAboveGuaranteedIntegerPrecision$handle() {
        return igImIsFloatAboveGuaranteedIntegerPrecision.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImIsFloatAboveGuaranteedIntegerPrecision(float f)
     * }
     */
    public static MemorySegment igImIsFloatAboveGuaranteedIntegerPrecision$address() {
        return igImIsFloatAboveGuaranteedIntegerPrecision.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImIsFloatAboveGuaranteedIntegerPrecision(float f)
     * }
     */
    public static boolean igImIsFloatAboveGuaranteedIntegerPrecision(float f) {
        var mh$ = igImIsFloatAboveGuaranteedIntegerPrecision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImIsFloatAboveGuaranteedIntegerPrecision", f);
            }
            return (boolean)mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImExponentialMovingAverage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImExponentialMovingAverage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImExponentialMovingAverage(float avg, float sample, int n)
     * }
     */
    public static FunctionDescriptor igImExponentialMovingAverage$descriptor() {
        return igImExponentialMovingAverage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImExponentialMovingAverage(float avg, float sample, int n)
     * }
     */
    public static MethodHandle igImExponentialMovingAverage$handle() {
        return igImExponentialMovingAverage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImExponentialMovingAverage(float avg, float sample, int n)
     * }
     */
    public static MemorySegment igImExponentialMovingAverage$address() {
        return igImExponentialMovingAverage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImExponentialMovingAverage(float avg, float sample, int n)
     * }
     */
    public static float igImExponentialMovingAverage(float avg, float sample, int n) {
        var mh$ = igImExponentialMovingAverage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImExponentialMovingAverage", avg, sample, n);
            }
            return (float)mh$.invokeExact(avg, sample, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBezierCubicCalc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBezierCubicCalc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImBezierCubicCalc(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, float t)
     * }
     */
    public static FunctionDescriptor igImBezierCubicCalc$descriptor() {
        return igImBezierCubicCalc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImBezierCubicCalc(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, float t)
     * }
     */
    public static MethodHandle igImBezierCubicCalc$handle() {
        return igImBezierCubicCalc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImBezierCubicCalc(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, float t)
     * }
     */
    public static MemorySegment igImBezierCubicCalc$address() {
        return igImBezierCubicCalc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImBezierCubicCalc(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, float t)
     * }
     */
    public static void igImBezierCubicCalc(MemorySegment pOut, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, float t) {
        var mh$ = igImBezierCubicCalc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBezierCubicCalc", pOut, p1, p2, p3, p4, t);
            }
            mh$.invokeExact(pOut, p1, p2, p3, p4, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBezierCubicClosestPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBezierCubicClosestPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImBezierCubicClosestPoint(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 p, int num_segments)
     * }
     */
    public static FunctionDescriptor igImBezierCubicClosestPoint$descriptor() {
        return igImBezierCubicClosestPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImBezierCubicClosestPoint(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 p, int num_segments)
     * }
     */
    public static MethodHandle igImBezierCubicClosestPoint$handle() {
        return igImBezierCubicClosestPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImBezierCubicClosestPoint(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 p, int num_segments)
     * }
     */
    public static MemorySegment igImBezierCubicClosestPoint$address() {
        return igImBezierCubicClosestPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImBezierCubicClosestPoint(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 p, int num_segments)
     * }
     */
    public static void igImBezierCubicClosestPoint(MemorySegment pOut, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, MemorySegment p, int num_segments) {
        var mh$ = igImBezierCubicClosestPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBezierCubicClosestPoint", pOut, p1, p2, p3, p4, p, num_segments);
            }
            mh$.invokeExact(pOut, p1, p2, p3, p4, p, num_segments);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBezierCubicClosestPointCasteljau {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBezierCubicClosestPointCasteljau");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImBezierCubicClosestPointCasteljau(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 p, float tess_tol)
     * }
     */
    public static FunctionDescriptor igImBezierCubicClosestPointCasteljau$descriptor() {
        return igImBezierCubicClosestPointCasteljau.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImBezierCubicClosestPointCasteljau(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 p, float tess_tol)
     * }
     */
    public static MethodHandle igImBezierCubicClosestPointCasteljau$handle() {
        return igImBezierCubicClosestPointCasteljau.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImBezierCubicClosestPointCasteljau(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 p, float tess_tol)
     * }
     */
    public static MemorySegment igImBezierCubicClosestPointCasteljau$address() {
        return igImBezierCubicClosestPointCasteljau.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImBezierCubicClosestPointCasteljau(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, const ImVec2 p4, const ImVec2 p, float tess_tol)
     * }
     */
    public static void igImBezierCubicClosestPointCasteljau(MemorySegment pOut, MemorySegment p1, MemorySegment p2, MemorySegment p3, MemorySegment p4, MemorySegment p, float tess_tol) {
        var mh$ = igImBezierCubicClosestPointCasteljau.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBezierCubicClosestPointCasteljau", pOut, p1, p2, p3, p4, p, tess_tol);
            }
            mh$.invokeExact(pOut, p1, p2, p3, p4, p, tess_tol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBezierQuadraticCalc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBezierQuadraticCalc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImBezierQuadraticCalc(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, float t)
     * }
     */
    public static FunctionDescriptor igImBezierQuadraticCalc$descriptor() {
        return igImBezierQuadraticCalc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImBezierQuadraticCalc(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, float t)
     * }
     */
    public static MethodHandle igImBezierQuadraticCalc$handle() {
        return igImBezierQuadraticCalc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImBezierQuadraticCalc(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, float t)
     * }
     */
    public static MemorySegment igImBezierQuadraticCalc$address() {
        return igImBezierQuadraticCalc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImBezierQuadraticCalc(ImVec2 *pOut, const ImVec2 p1, const ImVec2 p2, const ImVec2 p3, float t)
     * }
     */
    public static void igImBezierQuadraticCalc(MemorySegment pOut, MemorySegment p1, MemorySegment p2, MemorySegment p3, float t) {
        var mh$ = igImBezierQuadraticCalc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBezierQuadraticCalc", pOut, p1, p2, p3, t);
            }
            mh$.invokeExact(pOut, p1, p2, p3, t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLineClosestPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLineClosestPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImLineClosestPoint(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 p)
     * }
     */
    public static FunctionDescriptor igImLineClosestPoint$descriptor() {
        return igImLineClosestPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImLineClosestPoint(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 p)
     * }
     */
    public static MethodHandle igImLineClosestPoint$handle() {
        return igImLineClosestPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImLineClosestPoint(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 p)
     * }
     */
    public static MemorySegment igImLineClosestPoint$address() {
        return igImLineClosestPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImLineClosestPoint(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 p)
     * }
     */
    public static void igImLineClosestPoint(MemorySegment pOut, MemorySegment a, MemorySegment b, MemorySegment p) {
        var mh$ = igImLineClosestPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLineClosestPoint", pOut, a, b, p);
            }
            mh$.invokeExact(pOut, a, b, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTriangleContainsPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTriangleContainsPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImTriangleContainsPoint(const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p)
     * }
     */
    public static FunctionDescriptor igImTriangleContainsPoint$descriptor() {
        return igImTriangleContainsPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImTriangleContainsPoint(const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p)
     * }
     */
    public static MethodHandle igImTriangleContainsPoint$handle() {
        return igImTriangleContainsPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImTriangleContainsPoint(const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p)
     * }
     */
    public static MemorySegment igImTriangleContainsPoint$address() {
        return igImTriangleContainsPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImTriangleContainsPoint(const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p)
     * }
     */
    public static boolean igImTriangleContainsPoint(MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment p) {
        var mh$ = igImTriangleContainsPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTriangleContainsPoint", a, b, c, p);
            }
            return (boolean)mh$.invokeExact(a, b, c, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTriangleClosestPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTriangleClosestPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImTriangleClosestPoint(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p)
     * }
     */
    public static FunctionDescriptor igImTriangleClosestPoint$descriptor() {
        return igImTriangleClosestPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImTriangleClosestPoint(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p)
     * }
     */
    public static MethodHandle igImTriangleClosestPoint$handle() {
        return igImTriangleClosestPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImTriangleClosestPoint(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p)
     * }
     */
    public static MemorySegment igImTriangleClosestPoint$address() {
        return igImTriangleClosestPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImTriangleClosestPoint(ImVec2 *pOut, const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p)
     * }
     */
    public static void igImTriangleClosestPoint(MemorySegment pOut, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment p) {
        var mh$ = igImTriangleClosestPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTriangleClosestPoint", pOut, a, b, c, p);
            }
            mh$.invokeExact(pOut, a, b, c, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTriangleBarycentricCoords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout(),
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTriangleBarycentricCoords");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImTriangleBarycentricCoords(const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p, float *out_u, float *out_v, float *out_w)
     * }
     */
    public static FunctionDescriptor igImTriangleBarycentricCoords$descriptor() {
        return igImTriangleBarycentricCoords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImTriangleBarycentricCoords(const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p, float *out_u, float *out_v, float *out_w)
     * }
     */
    public static MethodHandle igImTriangleBarycentricCoords$handle() {
        return igImTriangleBarycentricCoords.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImTriangleBarycentricCoords(const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p, float *out_u, float *out_v, float *out_w)
     * }
     */
    public static MemorySegment igImTriangleBarycentricCoords$address() {
        return igImTriangleBarycentricCoords.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImTriangleBarycentricCoords(const ImVec2 a, const ImVec2 b, const ImVec2 c, const ImVec2 p, float *out_u, float *out_v, float *out_w)
     * }
     */
    public static void igImTriangleBarycentricCoords(MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment p, MemorySegment out_u, MemorySegment out_v, MemorySegment out_w) {
        var mh$ = igImTriangleBarycentricCoords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTriangleBarycentricCoords", a, b, c, p, out_u, out_v, out_w);
            }
            mh$.invokeExact(a, b, c, p, out_u, out_v, out_w);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTriangleArea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTriangleArea");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float igImTriangleArea(const ImVec2 a, const ImVec2 b, const ImVec2 c)
     * }
     */
    public static FunctionDescriptor igImTriangleArea$descriptor() {
        return igImTriangleArea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float igImTriangleArea(const ImVec2 a, const ImVec2 b, const ImVec2 c)
     * }
     */
    public static MethodHandle igImTriangleArea$handle() {
        return igImTriangleArea.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float igImTriangleArea(const ImVec2 a, const ImVec2 b, const ImVec2 c)
     * }
     */
    public static MemorySegment igImTriangleArea$address() {
        return igImTriangleArea.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float igImTriangleArea(const ImVec2 a, const ImVec2 b, const ImVec2 c)
     * }
     */
    public static float igImTriangleArea(MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = igImTriangleArea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTriangleArea", a, b, c);
            }
            return (float)mh$.invokeExact(a, b, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImTriangleIsClockwise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            ImVec2.layout(),
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImTriangleIsClockwise");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImTriangleIsClockwise(const ImVec2 a, const ImVec2 b, const ImVec2 c)
     * }
     */
    public static FunctionDescriptor igImTriangleIsClockwise$descriptor() {
        return igImTriangleIsClockwise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImTriangleIsClockwise(const ImVec2 a, const ImVec2 b, const ImVec2 c)
     * }
     */
    public static MethodHandle igImTriangleIsClockwise$handle() {
        return igImTriangleIsClockwise.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImTriangleIsClockwise(const ImVec2 a, const ImVec2 b, const ImVec2 c)
     * }
     */
    public static MemorySegment igImTriangleIsClockwise$address() {
        return igImTriangleIsClockwise.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImTriangleIsClockwise(const ImVec2 a, const ImVec2 b, const ImVec2 c)
     * }
     */
    public static boolean igImTriangleIsClockwise(MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = igImTriangleIsClockwise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImTriangleIsClockwise", a, b, c);
            }
            return (boolean)mh$.invokeExact(a, b, c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec1_ImVec1_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec1_ImVec1_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVec1 *ImVec1_ImVec1_Nil()
     * }
     */
    public static FunctionDescriptor ImVec1_ImVec1_Nil$descriptor() {
        return ImVec1_ImVec1_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVec1 *ImVec1_ImVec1_Nil()
     * }
     */
    public static MethodHandle ImVec1_ImVec1_Nil$handle() {
        return ImVec1_ImVec1_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVec1 *ImVec1_ImVec1_Nil()
     * }
     */
    public static MemorySegment ImVec1_ImVec1_Nil$address() {
        return ImVec1_ImVec1_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVec1 *ImVec1_ImVec1_Nil()
     * }
     */
    public static MemorySegment ImVec1_ImVec1_Nil() {
        var mh$ = ImVec1_ImVec1_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec1_ImVec1_Nil");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec1_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec1_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImVec1_destroy(ImVec1 *self)
     * }
     */
    public static FunctionDescriptor ImVec1_destroy$descriptor() {
        return ImVec1_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImVec1_destroy(ImVec1 *self)
     * }
     */
    public static MethodHandle ImVec1_destroy$handle() {
        return ImVec1_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImVec1_destroy(ImVec1 *self)
     * }
     */
    public static MemorySegment ImVec1_destroy$address() {
        return ImVec1_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImVec1_destroy(ImVec1 *self)
     * }
     */
    public static void ImVec1_destroy(MemorySegment self) {
        var mh$ = ImVec1_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec1_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec1_ImVec1_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec1_ImVec1_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVec1 *ImVec1_ImVec1_Float(float _x)
     * }
     */
    public static FunctionDescriptor ImVec1_ImVec1_Float$descriptor() {
        return ImVec1_ImVec1_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVec1 *ImVec1_ImVec1_Float(float _x)
     * }
     */
    public static MethodHandle ImVec1_ImVec1_Float$handle() {
        return ImVec1_ImVec1_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVec1 *ImVec1_ImVec1_Float(float _x)
     * }
     */
    public static MemorySegment ImVec1_ImVec1_Float$address() {
        return ImVec1_ImVec1_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVec1 *ImVec1_ImVec1_Float(float _x)
     * }
     */
    public static MemorySegment ImVec1_ImVec1_Float(float _x) {
        var mh$ = ImVec1_ImVec1_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec1_ImVec1_Float", _x);
            }
            return (MemorySegment)mh$.invokeExact(_x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec2ih_ImVec2ih_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec2ih_ImVec2ih_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_Nil()
     * }
     */
    public static FunctionDescriptor ImVec2ih_ImVec2ih_Nil$descriptor() {
        return ImVec2ih_ImVec2ih_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_Nil()
     * }
     */
    public static MethodHandle ImVec2ih_ImVec2ih_Nil$handle() {
        return ImVec2ih_ImVec2ih_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_Nil()
     * }
     */
    public static MemorySegment ImVec2ih_ImVec2ih_Nil$address() {
        return ImVec2ih_ImVec2ih_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_Nil()
     * }
     */
    public static MemorySegment ImVec2ih_ImVec2ih_Nil() {
        var mh$ = ImVec2ih_ImVec2ih_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec2ih_ImVec2ih_Nil");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec2ih_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec2ih_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImVec2ih_destroy(ImVec2ih *self)
     * }
     */
    public static FunctionDescriptor ImVec2ih_destroy$descriptor() {
        return ImVec2ih_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImVec2ih_destroy(ImVec2ih *self)
     * }
     */
    public static MethodHandle ImVec2ih_destroy$handle() {
        return ImVec2ih_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImVec2ih_destroy(ImVec2ih *self)
     * }
     */
    public static MemorySegment ImVec2ih_destroy$address() {
        return ImVec2ih_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImVec2ih_destroy(ImVec2ih *self)
     * }
     */
    public static void ImVec2ih_destroy(MemorySegment self) {
        var mh$ = ImVec2ih_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec2ih_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec2ih_ImVec2ih_short {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_SHORT,
            imgui.C_SHORT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec2ih_ImVec2ih_short");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_short(short _x, short _y)
     * }
     */
    public static FunctionDescriptor ImVec2ih_ImVec2ih_short$descriptor() {
        return ImVec2ih_ImVec2ih_short.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_short(short _x, short _y)
     * }
     */
    public static MethodHandle ImVec2ih_ImVec2ih_short$handle() {
        return ImVec2ih_ImVec2ih_short.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_short(short _x, short _y)
     * }
     */
    public static MemorySegment ImVec2ih_ImVec2ih_short$address() {
        return ImVec2ih_ImVec2ih_short.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_short(short _x, short _y)
     * }
     */
    public static MemorySegment ImVec2ih_ImVec2ih_short(short _x, short _y) {
        var mh$ = ImVec2ih_ImVec2ih_short.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec2ih_ImVec2ih_short", _x, _y);
            }
            return (MemorySegment)mh$.invokeExact(_x, _y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImVec2ih_ImVec2ih_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImVec2ih_ImVec2ih_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_Vec2(const ImVec2 rhs)
     * }
     */
    public static FunctionDescriptor ImVec2ih_ImVec2ih_Vec2$descriptor() {
        return ImVec2ih_ImVec2ih_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_Vec2(const ImVec2 rhs)
     * }
     */
    public static MethodHandle ImVec2ih_ImVec2ih_Vec2$handle() {
        return ImVec2ih_ImVec2ih_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_Vec2(const ImVec2 rhs)
     * }
     */
    public static MemorySegment ImVec2ih_ImVec2ih_Vec2$address() {
        return ImVec2ih_ImVec2ih_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImVec2ih *ImVec2ih_ImVec2ih_Vec2(const ImVec2 rhs)
     * }
     */
    public static MemorySegment ImVec2ih_ImVec2ih_Vec2(MemorySegment rhs) {
        var mh$ = ImVec2ih_ImVec2ih_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImVec2ih_ImVec2ih_Vec2", rhs);
            }
            return (MemorySegment)mh$.invokeExact(rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_ImRect_Nil {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_ImRect_Nil");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Nil()
     * }
     */
    public static FunctionDescriptor ImRect_ImRect_Nil$descriptor() {
        return ImRect_ImRect_Nil.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Nil()
     * }
     */
    public static MethodHandle ImRect_ImRect_Nil$handle() {
        return ImRect_ImRect_Nil.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Nil()
     * }
     */
    public static MemorySegment ImRect_ImRect_Nil$address() {
        return ImRect_ImRect_Nil.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Nil()
     * }
     */
    public static MemorySegment ImRect_ImRect_Nil() {
        var mh$ = ImRect_ImRect_Nil.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_ImRect_Nil");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_destroy(ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_destroy$descriptor() {
        return ImRect_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_destroy(ImRect *self)
     * }
     */
    public static MethodHandle ImRect_destroy$handle() {
        return ImRect_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_destroy(ImRect *self)
     * }
     */
    public static MemorySegment ImRect_destroy$address() {
        return ImRect_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_destroy(ImRect *self)
     * }
     */
    public static void ImRect_destroy(MemorySegment self) {
        var mh$ = ImRect_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_ImRect_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_ImRect_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Vec2(const ImVec2 min, const ImVec2 max)
     * }
     */
    public static FunctionDescriptor ImRect_ImRect_Vec2$descriptor() {
        return ImRect_ImRect_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Vec2(const ImVec2 min, const ImVec2 max)
     * }
     */
    public static MethodHandle ImRect_ImRect_Vec2$handle() {
        return ImRect_ImRect_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Vec2(const ImVec2 min, const ImVec2 max)
     * }
     */
    public static MemorySegment ImRect_ImRect_Vec2$address() {
        return ImRect_ImRect_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Vec2(const ImVec2 min, const ImVec2 max)
     * }
     */
    public static MemorySegment ImRect_ImRect_Vec2(MemorySegment min, MemorySegment max) {
        var mh$ = ImRect_ImRect_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_ImRect_Vec2", min, max);
            }
            return (MemorySegment)mh$.invokeExact(min, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_ImRect_Vec4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            ImVec4.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_ImRect_Vec4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Vec4(const ImVec4 v)
     * }
     */
    public static FunctionDescriptor ImRect_ImRect_Vec4$descriptor() {
        return ImRect_ImRect_Vec4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Vec4(const ImVec4 v)
     * }
     */
    public static MethodHandle ImRect_ImRect_Vec4$handle() {
        return ImRect_ImRect_Vec4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Vec4(const ImVec4 v)
     * }
     */
    public static MemorySegment ImRect_ImRect_Vec4$address() {
        return ImRect_ImRect_Vec4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Vec4(const ImVec4 v)
     * }
     */
    public static MemorySegment ImRect_ImRect_Vec4(MemorySegment v) {
        var mh$ = ImRect_ImRect_Vec4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_ImRect_Vec4", v);
            }
            return (MemorySegment)mh$.invokeExact(v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_ImRect_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_ImRect_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Float(float x1, float y1, float x2, float y2)
     * }
     */
    public static FunctionDescriptor ImRect_ImRect_Float$descriptor() {
        return ImRect_ImRect_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Float(float x1, float y1, float x2, float y2)
     * }
     */
    public static MethodHandle ImRect_ImRect_Float$handle() {
        return ImRect_ImRect_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Float(float x1, float y1, float x2, float y2)
     * }
     */
    public static MemorySegment ImRect_ImRect_Float$address() {
        return ImRect_ImRect_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImRect *ImRect_ImRect_Float(float x1, float y1, float x2, float y2)
     * }
     */
    public static MemorySegment ImRect_ImRect_Float(float x1, float y1, float x2, float y2) {
        var mh$ = ImRect_ImRect_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_ImRect_Float", x1, y1, x2, y2);
            }
            return (MemorySegment)mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_GetCenter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_GetCenter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_GetCenter(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_GetCenter$descriptor() {
        return ImRect_GetCenter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_GetCenter(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MethodHandle ImRect_GetCenter$handle() {
        return ImRect_GetCenter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_GetCenter(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MemorySegment ImRect_GetCenter$address() {
        return ImRect_GetCenter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_GetCenter(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static void ImRect_GetCenter(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImRect_GetCenter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_GetCenter", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_GetSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_GetSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_GetSize(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_GetSize$descriptor() {
        return ImRect_GetSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_GetSize(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MethodHandle ImRect_GetSize$handle() {
        return ImRect_GetSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_GetSize(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MemorySegment ImRect_GetSize$address() {
        return ImRect_GetSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_GetSize(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static void ImRect_GetSize(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImRect_GetSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_GetSize", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_GetWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_GetWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ImRect_GetWidth(ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_GetWidth$descriptor() {
        return ImRect_GetWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ImRect_GetWidth(ImRect *self)
     * }
     */
    public static MethodHandle ImRect_GetWidth$handle() {
        return ImRect_GetWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ImRect_GetWidth(ImRect *self)
     * }
     */
    public static MemorySegment ImRect_GetWidth$address() {
        return ImRect_GetWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ImRect_GetWidth(ImRect *self)
     * }
     */
    public static float ImRect_GetWidth(MemorySegment self) {
        var mh$ = ImRect_GetWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_GetWidth", self);
            }
            return (float)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_GetHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_GetHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ImRect_GetHeight(ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_GetHeight$descriptor() {
        return ImRect_GetHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ImRect_GetHeight(ImRect *self)
     * }
     */
    public static MethodHandle ImRect_GetHeight$handle() {
        return ImRect_GetHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ImRect_GetHeight(ImRect *self)
     * }
     */
    public static MemorySegment ImRect_GetHeight$address() {
        return ImRect_GetHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ImRect_GetHeight(ImRect *self)
     * }
     */
    public static float ImRect_GetHeight(MemorySegment self) {
        var mh$ = ImRect_GetHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_GetHeight", self);
            }
            return (float)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_GetArea {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_GetArea");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ImRect_GetArea(ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_GetArea$descriptor() {
        return ImRect_GetArea.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ImRect_GetArea(ImRect *self)
     * }
     */
    public static MethodHandle ImRect_GetArea$handle() {
        return ImRect_GetArea.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ImRect_GetArea(ImRect *self)
     * }
     */
    public static MemorySegment ImRect_GetArea$address() {
        return ImRect_GetArea.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ImRect_GetArea(ImRect *self)
     * }
     */
    public static float ImRect_GetArea(MemorySegment self) {
        var mh$ = ImRect_GetArea.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_GetArea", self);
            }
            return (float)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_GetTL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_GetTL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_GetTL(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_GetTL$descriptor() {
        return ImRect_GetTL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_GetTL(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MethodHandle ImRect_GetTL$handle() {
        return ImRect_GetTL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_GetTL(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MemorySegment ImRect_GetTL$address() {
        return ImRect_GetTL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_GetTL(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static void ImRect_GetTL(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImRect_GetTL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_GetTL", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_GetTR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_GetTR");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_GetTR(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_GetTR$descriptor() {
        return ImRect_GetTR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_GetTR(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MethodHandle ImRect_GetTR$handle() {
        return ImRect_GetTR.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_GetTR(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MemorySegment ImRect_GetTR$address() {
        return ImRect_GetTR.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_GetTR(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static void ImRect_GetTR(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImRect_GetTR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_GetTR", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_GetBL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_GetBL");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_GetBL(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_GetBL$descriptor() {
        return ImRect_GetBL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_GetBL(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MethodHandle ImRect_GetBL$handle() {
        return ImRect_GetBL.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_GetBL(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MemorySegment ImRect_GetBL$address() {
        return ImRect_GetBL.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_GetBL(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static void ImRect_GetBL(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImRect_GetBL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_GetBL", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_GetBR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_GetBR");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_GetBR(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_GetBR$descriptor() {
        return ImRect_GetBR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_GetBR(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MethodHandle ImRect_GetBR$handle() {
        return ImRect_GetBR.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_GetBR(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static MemorySegment ImRect_GetBR$address() {
        return ImRect_GetBR.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_GetBR(ImVec2 *pOut, ImRect *self)
     * }
     */
    public static void ImRect_GetBR(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImRect_GetBR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_GetBR", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_Contains_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_Contains_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImRect_Contains_Vec2(ImRect *self, const ImVec2 p)
     * }
     */
    public static FunctionDescriptor ImRect_Contains_Vec2$descriptor() {
        return ImRect_Contains_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImRect_Contains_Vec2(ImRect *self, const ImVec2 p)
     * }
     */
    public static MethodHandle ImRect_Contains_Vec2$handle() {
        return ImRect_Contains_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImRect_Contains_Vec2(ImRect *self, const ImVec2 p)
     * }
     */
    public static MemorySegment ImRect_Contains_Vec2$address() {
        return ImRect_Contains_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImRect_Contains_Vec2(ImRect *self, const ImVec2 p)
     * }
     */
    public static boolean ImRect_Contains_Vec2(MemorySegment self, MemorySegment p) {
        var mh$ = ImRect_Contains_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_Contains_Vec2", self, p);
            }
            return (boolean)mh$.invokeExact(self, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_Contains_Rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_Contains_Rect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImRect_Contains_Rect(ImRect *self, const ImRect r)
     * }
     */
    public static FunctionDescriptor ImRect_Contains_Rect$descriptor() {
        return ImRect_Contains_Rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImRect_Contains_Rect(ImRect *self, const ImRect r)
     * }
     */
    public static MethodHandle ImRect_Contains_Rect$handle() {
        return ImRect_Contains_Rect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImRect_Contains_Rect(ImRect *self, const ImRect r)
     * }
     */
    public static MemorySegment ImRect_Contains_Rect$address() {
        return ImRect_Contains_Rect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImRect_Contains_Rect(ImRect *self, const ImRect r)
     * }
     */
    public static boolean ImRect_Contains_Rect(MemorySegment self, MemorySegment r) {
        var mh$ = ImRect_Contains_Rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_Contains_Rect", self, r);
            }
            return (boolean)mh$.invokeExact(self, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_ContainsWithPad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_ContainsWithPad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImRect_ContainsWithPad(ImRect *self, const ImVec2 p, const ImVec2 pad)
     * }
     */
    public static FunctionDescriptor ImRect_ContainsWithPad$descriptor() {
        return ImRect_ContainsWithPad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImRect_ContainsWithPad(ImRect *self, const ImVec2 p, const ImVec2 pad)
     * }
     */
    public static MethodHandle ImRect_ContainsWithPad$handle() {
        return ImRect_ContainsWithPad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImRect_ContainsWithPad(ImRect *self, const ImVec2 p, const ImVec2 pad)
     * }
     */
    public static MemorySegment ImRect_ContainsWithPad$address() {
        return ImRect_ContainsWithPad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImRect_ContainsWithPad(ImRect *self, const ImVec2 p, const ImVec2 pad)
     * }
     */
    public static boolean ImRect_ContainsWithPad(MemorySegment self, MemorySegment p, MemorySegment pad) {
        var mh$ = ImRect_ContainsWithPad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_ContainsWithPad", self, p, pad);
            }
            return (boolean)mh$.invokeExact(self, p, pad);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_Overlaps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_Overlaps");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImRect_Overlaps(ImRect *self, const ImRect r)
     * }
     */
    public static FunctionDescriptor ImRect_Overlaps$descriptor() {
        return ImRect_Overlaps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImRect_Overlaps(ImRect *self, const ImRect r)
     * }
     */
    public static MethodHandle ImRect_Overlaps$handle() {
        return ImRect_Overlaps.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImRect_Overlaps(ImRect *self, const ImRect r)
     * }
     */
    public static MemorySegment ImRect_Overlaps$address() {
        return ImRect_Overlaps.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImRect_Overlaps(ImRect *self, const ImRect r)
     * }
     */
    public static boolean ImRect_Overlaps(MemorySegment self, MemorySegment r) {
        var mh$ = ImRect_Overlaps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_Overlaps", self, r);
            }
            return (boolean)mh$.invokeExact(self, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_Add_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_Add_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_Add_Vec2(ImRect *self, const ImVec2 p)
     * }
     */
    public static FunctionDescriptor ImRect_Add_Vec2$descriptor() {
        return ImRect_Add_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_Add_Vec2(ImRect *self, const ImVec2 p)
     * }
     */
    public static MethodHandle ImRect_Add_Vec2$handle() {
        return ImRect_Add_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_Add_Vec2(ImRect *self, const ImVec2 p)
     * }
     */
    public static MemorySegment ImRect_Add_Vec2$address() {
        return ImRect_Add_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_Add_Vec2(ImRect *self, const ImVec2 p)
     * }
     */
    public static void ImRect_Add_Vec2(MemorySegment self, MemorySegment p) {
        var mh$ = ImRect_Add_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_Add_Vec2", self, p);
            }
            mh$.invokeExact(self, p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_Add_Rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_Add_Rect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_Add_Rect(ImRect *self, const ImRect r)
     * }
     */
    public static FunctionDescriptor ImRect_Add_Rect$descriptor() {
        return ImRect_Add_Rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_Add_Rect(ImRect *self, const ImRect r)
     * }
     */
    public static MethodHandle ImRect_Add_Rect$handle() {
        return ImRect_Add_Rect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_Add_Rect(ImRect *self, const ImRect r)
     * }
     */
    public static MemorySegment ImRect_Add_Rect$address() {
        return ImRect_Add_Rect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_Add_Rect(ImRect *self, const ImRect r)
     * }
     */
    public static void ImRect_Add_Rect(MemorySegment self, MemorySegment r) {
        var mh$ = ImRect_Add_Rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_Add_Rect", self, r);
            }
            mh$.invokeExact(self, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_Expand_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_Expand_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_Expand_Float(ImRect *self, const float amount)
     * }
     */
    public static FunctionDescriptor ImRect_Expand_Float$descriptor() {
        return ImRect_Expand_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_Expand_Float(ImRect *self, const float amount)
     * }
     */
    public static MethodHandle ImRect_Expand_Float$handle() {
        return ImRect_Expand_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_Expand_Float(ImRect *self, const float amount)
     * }
     */
    public static MemorySegment ImRect_Expand_Float$address() {
        return ImRect_Expand_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_Expand_Float(ImRect *self, const float amount)
     * }
     */
    public static void ImRect_Expand_Float(MemorySegment self, float amount) {
        var mh$ = ImRect_Expand_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_Expand_Float", self, amount);
            }
            mh$.invokeExact(self, amount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_Expand_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_Expand_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_Expand_Vec2(ImRect *self, const ImVec2 amount)
     * }
     */
    public static FunctionDescriptor ImRect_Expand_Vec2$descriptor() {
        return ImRect_Expand_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_Expand_Vec2(ImRect *self, const ImVec2 amount)
     * }
     */
    public static MethodHandle ImRect_Expand_Vec2$handle() {
        return ImRect_Expand_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_Expand_Vec2(ImRect *self, const ImVec2 amount)
     * }
     */
    public static MemorySegment ImRect_Expand_Vec2$address() {
        return ImRect_Expand_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_Expand_Vec2(ImRect *self, const ImVec2 amount)
     * }
     */
    public static void ImRect_Expand_Vec2(MemorySegment self, MemorySegment amount) {
        var mh$ = ImRect_Expand_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_Expand_Vec2", self, amount);
            }
            mh$.invokeExact(self, amount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_Translate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_Translate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_Translate(ImRect *self, const ImVec2 d)
     * }
     */
    public static FunctionDescriptor ImRect_Translate$descriptor() {
        return ImRect_Translate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_Translate(ImRect *self, const ImVec2 d)
     * }
     */
    public static MethodHandle ImRect_Translate$handle() {
        return ImRect_Translate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_Translate(ImRect *self, const ImVec2 d)
     * }
     */
    public static MemorySegment ImRect_Translate$address() {
        return ImRect_Translate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_Translate(ImRect *self, const ImVec2 d)
     * }
     */
    public static void ImRect_Translate(MemorySegment self, MemorySegment d) {
        var mh$ = ImRect_Translate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_Translate", self, d);
            }
            mh$.invokeExact(self, d);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_TranslateX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_TranslateX");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_TranslateX(ImRect *self, float dx)
     * }
     */
    public static FunctionDescriptor ImRect_TranslateX$descriptor() {
        return ImRect_TranslateX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_TranslateX(ImRect *self, float dx)
     * }
     */
    public static MethodHandle ImRect_TranslateX$handle() {
        return ImRect_TranslateX.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_TranslateX(ImRect *self, float dx)
     * }
     */
    public static MemorySegment ImRect_TranslateX$address() {
        return ImRect_TranslateX.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_TranslateX(ImRect *self, float dx)
     * }
     */
    public static void ImRect_TranslateX(MemorySegment self, float dx) {
        var mh$ = ImRect_TranslateX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_TranslateX", self, dx);
            }
            mh$.invokeExact(self, dx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_TranslateY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_TranslateY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_TranslateY(ImRect *self, float dy)
     * }
     */
    public static FunctionDescriptor ImRect_TranslateY$descriptor() {
        return ImRect_TranslateY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_TranslateY(ImRect *self, float dy)
     * }
     */
    public static MethodHandle ImRect_TranslateY$handle() {
        return ImRect_TranslateY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_TranslateY(ImRect *self, float dy)
     * }
     */
    public static MemorySegment ImRect_TranslateY$address() {
        return ImRect_TranslateY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_TranslateY(ImRect *self, float dy)
     * }
     */
    public static void ImRect_TranslateY(MemorySegment self, float dy) {
        var mh$ = ImRect_TranslateY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_TranslateY", self, dy);
            }
            mh$.invokeExact(self, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_ClipWith {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_ClipWith");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_ClipWith(ImRect *self, const ImRect r)
     * }
     */
    public static FunctionDescriptor ImRect_ClipWith$descriptor() {
        return ImRect_ClipWith.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_ClipWith(ImRect *self, const ImRect r)
     * }
     */
    public static MethodHandle ImRect_ClipWith$handle() {
        return ImRect_ClipWith.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_ClipWith(ImRect *self, const ImRect r)
     * }
     */
    public static MemorySegment ImRect_ClipWith$address() {
        return ImRect_ClipWith.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_ClipWith(ImRect *self, const ImRect r)
     * }
     */
    public static void ImRect_ClipWith(MemorySegment self, MemorySegment r) {
        var mh$ = ImRect_ClipWith.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_ClipWith", self, r);
            }
            mh$.invokeExact(self, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_ClipWithFull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            ImRect.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_ClipWithFull");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_ClipWithFull(ImRect *self, const ImRect r)
     * }
     */
    public static FunctionDescriptor ImRect_ClipWithFull$descriptor() {
        return ImRect_ClipWithFull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_ClipWithFull(ImRect *self, const ImRect r)
     * }
     */
    public static MethodHandle ImRect_ClipWithFull$handle() {
        return ImRect_ClipWithFull.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_ClipWithFull(ImRect *self, const ImRect r)
     * }
     */
    public static MemorySegment ImRect_ClipWithFull$address() {
        return ImRect_ClipWithFull.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_ClipWithFull(ImRect *self, const ImRect r)
     * }
     */
    public static void ImRect_ClipWithFull(MemorySegment self, MemorySegment r) {
        var mh$ = ImRect_ClipWithFull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_ClipWithFull", self, r);
            }
            mh$.invokeExact(self, r);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_Floor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_Floor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_Floor(ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_Floor$descriptor() {
        return ImRect_Floor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_Floor(ImRect *self)
     * }
     */
    public static MethodHandle ImRect_Floor$handle() {
        return ImRect_Floor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_Floor(ImRect *self)
     * }
     */
    public static MemorySegment ImRect_Floor$address() {
        return ImRect_Floor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_Floor(ImRect *self)
     * }
     */
    public static void ImRect_Floor(MemorySegment self) {
        var mh$ = ImRect_Floor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_Floor", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_IsInverted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_IsInverted");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImRect_IsInverted(ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_IsInverted$descriptor() {
        return ImRect_IsInverted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImRect_IsInverted(ImRect *self)
     * }
     */
    public static MethodHandle ImRect_IsInverted$handle() {
        return ImRect_IsInverted.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImRect_IsInverted(ImRect *self)
     * }
     */
    public static MemorySegment ImRect_IsInverted$address() {
        return ImRect_IsInverted.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImRect_IsInverted(ImRect *self)
     * }
     */
    public static boolean ImRect_IsInverted(MemorySegment self) {
        var mh$ = ImRect_IsInverted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_IsInverted", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImRect_ToVec4 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImRect_ToVec4");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImRect_ToVec4(ImVec4 *pOut, ImRect *self)
     * }
     */
    public static FunctionDescriptor ImRect_ToVec4$descriptor() {
        return ImRect_ToVec4.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImRect_ToVec4(ImVec4 *pOut, ImRect *self)
     * }
     */
    public static MethodHandle ImRect_ToVec4$handle() {
        return ImRect_ToVec4.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImRect_ToVec4(ImVec4 *pOut, ImRect *self)
     * }
     */
    public static MemorySegment ImRect_ToVec4$address() {
        return ImRect_ToVec4.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImRect_ToVec4(ImVec4 *pOut, ImRect *self)
     * }
     */
    public static void ImRect_ToVec4(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImRect_ToVec4.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImRect_ToVec4", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBitArrayGetStorageSizeInBytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_LONG,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBitArrayGetStorageSizeInBytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t igImBitArrayGetStorageSizeInBytes(int bitcount)
     * }
     */
    public static FunctionDescriptor igImBitArrayGetStorageSizeInBytes$descriptor() {
        return igImBitArrayGetStorageSizeInBytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t igImBitArrayGetStorageSizeInBytes(int bitcount)
     * }
     */
    public static MethodHandle igImBitArrayGetStorageSizeInBytes$handle() {
        return igImBitArrayGetStorageSizeInBytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t igImBitArrayGetStorageSizeInBytes(int bitcount)
     * }
     */
    public static MemorySegment igImBitArrayGetStorageSizeInBytes$address() {
        return igImBitArrayGetStorageSizeInBytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t igImBitArrayGetStorageSizeInBytes(int bitcount)
     * }
     */
    public static long igImBitArrayGetStorageSizeInBytes(int bitcount) {
        var mh$ = igImBitArrayGetStorageSizeInBytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBitArrayGetStorageSizeInBytes", bitcount);
            }
            return (long)mh$.invokeExact(bitcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBitArrayClearAllBits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBitArrayClearAllBits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImBitArrayClearAllBits(ImU32 *arr, int bitcount)
     * }
     */
    public static FunctionDescriptor igImBitArrayClearAllBits$descriptor() {
        return igImBitArrayClearAllBits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImBitArrayClearAllBits(ImU32 *arr, int bitcount)
     * }
     */
    public static MethodHandle igImBitArrayClearAllBits$handle() {
        return igImBitArrayClearAllBits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImBitArrayClearAllBits(ImU32 *arr, int bitcount)
     * }
     */
    public static MemorySegment igImBitArrayClearAllBits$address() {
        return igImBitArrayClearAllBits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImBitArrayClearAllBits(ImU32 *arr, int bitcount)
     * }
     */
    public static void igImBitArrayClearAllBits(MemorySegment arr, int bitcount) {
        var mh$ = igImBitArrayClearAllBits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBitArrayClearAllBits", arr, bitcount);
            }
            mh$.invokeExact(arr, bitcount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBitArrayTestBit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBitArrayTestBit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool igImBitArrayTestBit(const ImU32 *arr, int n)
     * }
     */
    public static FunctionDescriptor igImBitArrayTestBit$descriptor() {
        return igImBitArrayTestBit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool igImBitArrayTestBit(const ImU32 *arr, int n)
     * }
     */
    public static MethodHandle igImBitArrayTestBit$handle() {
        return igImBitArrayTestBit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool igImBitArrayTestBit(const ImU32 *arr, int n)
     * }
     */
    public static MemorySegment igImBitArrayTestBit$address() {
        return igImBitArrayTestBit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool igImBitArrayTestBit(const ImU32 *arr, int n)
     * }
     */
    public static boolean igImBitArrayTestBit(MemorySegment arr, int n) {
        var mh$ = igImBitArrayTestBit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBitArrayTestBit", arr, n);
            }
            return (boolean)mh$.invokeExact(arr, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBitArrayClearBit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBitArrayClearBit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImBitArrayClearBit(ImU32 *arr, int n)
     * }
     */
    public static FunctionDescriptor igImBitArrayClearBit$descriptor() {
        return igImBitArrayClearBit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImBitArrayClearBit(ImU32 *arr, int n)
     * }
     */
    public static MethodHandle igImBitArrayClearBit$handle() {
        return igImBitArrayClearBit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImBitArrayClearBit(ImU32 *arr, int n)
     * }
     */
    public static MemorySegment igImBitArrayClearBit$address() {
        return igImBitArrayClearBit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImBitArrayClearBit(ImU32 *arr, int n)
     * }
     */
    public static void igImBitArrayClearBit(MemorySegment arr, int n) {
        var mh$ = igImBitArrayClearBit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBitArrayClearBit", arr, n);
            }
            mh$.invokeExact(arr, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBitArraySetBit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBitArraySetBit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImBitArraySetBit(ImU32 *arr, int n)
     * }
     */
    public static FunctionDescriptor igImBitArraySetBit$descriptor() {
        return igImBitArraySetBit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImBitArraySetBit(ImU32 *arr, int n)
     * }
     */
    public static MethodHandle igImBitArraySetBit$handle() {
        return igImBitArraySetBit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImBitArraySetBit(ImU32 *arr, int n)
     * }
     */
    public static MemorySegment igImBitArraySetBit$address() {
        return igImBitArraySetBit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImBitArraySetBit(ImU32 *arr, int n)
     * }
     */
    public static void igImBitArraySetBit(MemorySegment arr, int n) {
        var mh$ = igImBitArraySetBit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBitArraySetBit", arr, n);
            }
            mh$.invokeExact(arr, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImBitArraySetBitRange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImBitArraySetBitRange");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void igImBitArraySetBitRange(ImU32 *arr, int n, int n2)
     * }
     */
    public static FunctionDescriptor igImBitArraySetBitRange$descriptor() {
        return igImBitArraySetBitRange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void igImBitArraySetBitRange(ImU32 *arr, int n, int n2)
     * }
     */
    public static MethodHandle igImBitArraySetBitRange$handle() {
        return igImBitArraySetBitRange.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void igImBitArraySetBitRange(ImU32 *arr, int n, int n2)
     * }
     */
    public static MemorySegment igImBitArraySetBitRange$address() {
        return igImBitArraySetBitRange.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void igImBitArraySetBitRange(ImU32 *arr, int n, int n2)
     * }
     */
    public static void igImBitArraySetBitRange(MemorySegment arr, int n, int n2) {
        var mh$ = igImBitArraySetBitRange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImBitArraySetBitRange", arr, n, n2);
            }
            mh$.invokeExact(arr, n, n2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImBitVector_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImBitVector_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImBitVector_Create(ImBitVector *self, int sz)
     * }
     */
    public static FunctionDescriptor ImBitVector_Create$descriptor() {
        return ImBitVector_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImBitVector_Create(ImBitVector *self, int sz)
     * }
     */
    public static MethodHandle ImBitVector_Create$handle() {
        return ImBitVector_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImBitVector_Create(ImBitVector *self, int sz)
     * }
     */
    public static MemorySegment ImBitVector_Create$address() {
        return ImBitVector_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImBitVector_Create(ImBitVector *self, int sz)
     * }
     */
    public static void ImBitVector_Create(MemorySegment self, int sz) {
        var mh$ = ImBitVector_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImBitVector_Create", self, sz);
            }
            mh$.invokeExact(self, sz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImBitVector_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImBitVector_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImBitVector_Clear(ImBitVector *self)
     * }
     */
    public static FunctionDescriptor ImBitVector_Clear$descriptor() {
        return ImBitVector_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImBitVector_Clear(ImBitVector *self)
     * }
     */
    public static MethodHandle ImBitVector_Clear$handle() {
        return ImBitVector_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImBitVector_Clear(ImBitVector *self)
     * }
     */
    public static MemorySegment ImBitVector_Clear$address() {
        return ImBitVector_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImBitVector_Clear(ImBitVector *self)
     * }
     */
    public static void ImBitVector_Clear(MemorySegment self) {
        var mh$ = ImBitVector_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImBitVector_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImBitVector_TestBit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImBitVector_TestBit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImBitVector_TestBit(ImBitVector *self, int n)
     * }
     */
    public static FunctionDescriptor ImBitVector_TestBit$descriptor() {
        return ImBitVector_TestBit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImBitVector_TestBit(ImBitVector *self, int n)
     * }
     */
    public static MethodHandle ImBitVector_TestBit$handle() {
        return ImBitVector_TestBit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImBitVector_TestBit(ImBitVector *self, int n)
     * }
     */
    public static MemorySegment ImBitVector_TestBit$address() {
        return ImBitVector_TestBit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImBitVector_TestBit(ImBitVector *self, int n)
     * }
     */
    public static boolean ImBitVector_TestBit(MemorySegment self, int n) {
        var mh$ = ImBitVector_TestBit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImBitVector_TestBit", self, n);
            }
            return (boolean)mh$.invokeExact(self, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImBitVector_SetBit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImBitVector_SetBit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImBitVector_SetBit(ImBitVector *self, int n)
     * }
     */
    public static FunctionDescriptor ImBitVector_SetBit$descriptor() {
        return ImBitVector_SetBit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImBitVector_SetBit(ImBitVector *self, int n)
     * }
     */
    public static MethodHandle ImBitVector_SetBit$handle() {
        return ImBitVector_SetBit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImBitVector_SetBit(ImBitVector *self, int n)
     * }
     */
    public static MemorySegment ImBitVector_SetBit$address() {
        return ImBitVector_SetBit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImBitVector_SetBit(ImBitVector *self, int n)
     * }
     */
    public static void ImBitVector_SetBit(MemorySegment self, int n) {
        var mh$ = ImBitVector_SetBit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImBitVector_SetBit", self, n);
            }
            mh$.invokeExact(self, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImBitVector_ClearBit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImBitVector_ClearBit");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImBitVector_ClearBit(ImBitVector *self, int n)
     * }
     */
    public static FunctionDescriptor ImBitVector_ClearBit$descriptor() {
        return ImBitVector_ClearBit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImBitVector_ClearBit(ImBitVector *self, int n)
     * }
     */
    public static MethodHandle ImBitVector_ClearBit$handle() {
        return ImBitVector_ClearBit.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImBitVector_ClearBit(ImBitVector *self, int n)
     * }
     */
    public static MemorySegment ImBitVector_ClearBit$address() {
        return ImBitVector_ClearBit.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImBitVector_ClearBit(ImBitVector *self, int n)
     * }
     */
    public static void ImBitVector_ClearBit(MemorySegment self, int n) {
        var mh$ = ImBitVector_ClearBit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImBitVector_ClearBit", self, n);
            }
            mh$.invokeExact(self, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextIndex_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextIndex_clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextIndex_clear(ImGuiTextIndex *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextIndex_clear$descriptor() {
        return ImGuiTextIndex_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextIndex_clear(ImGuiTextIndex *self)
     * }
     */
    public static MethodHandle ImGuiTextIndex_clear$handle() {
        return ImGuiTextIndex_clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextIndex_clear(ImGuiTextIndex *self)
     * }
     */
    public static MemorySegment ImGuiTextIndex_clear$address() {
        return ImGuiTextIndex_clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextIndex_clear(ImGuiTextIndex *self)
     * }
     */
    public static void ImGuiTextIndex_clear(MemorySegment self) {
        var mh$ = ImGuiTextIndex_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextIndex_clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextIndex_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextIndex_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImGuiTextIndex_size(ImGuiTextIndex *self)
     * }
     */
    public static FunctionDescriptor ImGuiTextIndex_size$descriptor() {
        return ImGuiTextIndex_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImGuiTextIndex_size(ImGuiTextIndex *self)
     * }
     */
    public static MethodHandle ImGuiTextIndex_size$handle() {
        return ImGuiTextIndex_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImGuiTextIndex_size(ImGuiTextIndex *self)
     * }
     */
    public static MemorySegment ImGuiTextIndex_size$address() {
        return ImGuiTextIndex_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImGuiTextIndex_size(ImGuiTextIndex *self)
     * }
     */
    public static int ImGuiTextIndex_size(MemorySegment self) {
        var mh$ = ImGuiTextIndex_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextIndex_size", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextIndex_get_line_begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextIndex_get_line_begin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextIndex_get_line_begin(ImGuiTextIndex *self, const char *base, int n)
     * }
     */
    public static FunctionDescriptor ImGuiTextIndex_get_line_begin$descriptor() {
        return ImGuiTextIndex_get_line_begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextIndex_get_line_begin(ImGuiTextIndex *self, const char *base, int n)
     * }
     */
    public static MethodHandle ImGuiTextIndex_get_line_begin$handle() {
        return ImGuiTextIndex_get_line_begin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextIndex_get_line_begin(ImGuiTextIndex *self, const char *base, int n)
     * }
     */
    public static MemorySegment ImGuiTextIndex_get_line_begin$address() {
        return ImGuiTextIndex_get_line_begin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ImGuiTextIndex_get_line_begin(ImGuiTextIndex *self, const char *base, int n)
     * }
     */
    public static MemorySegment ImGuiTextIndex_get_line_begin(MemorySegment self, MemorySegment base, int n) {
        var mh$ = ImGuiTextIndex_get_line_begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextIndex_get_line_begin", self, base, n);
            }
            return (MemorySegment)mh$.invokeExact(self, base, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextIndex_get_line_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextIndex_get_line_end");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextIndex_get_line_end(ImGuiTextIndex *self, const char *base, int n)
     * }
     */
    public static FunctionDescriptor ImGuiTextIndex_get_line_end$descriptor() {
        return ImGuiTextIndex_get_line_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextIndex_get_line_end(ImGuiTextIndex *self, const char *base, int n)
     * }
     */
    public static MethodHandle ImGuiTextIndex_get_line_end$handle() {
        return ImGuiTextIndex_get_line_end.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ImGuiTextIndex_get_line_end(ImGuiTextIndex *self, const char *base, int n)
     * }
     */
    public static MemorySegment ImGuiTextIndex_get_line_end$address() {
        return ImGuiTextIndex_get_line_end.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ImGuiTextIndex_get_line_end(ImGuiTextIndex *self, const char *base, int n)
     * }
     */
    public static MemorySegment ImGuiTextIndex_get_line_end(MemorySegment self, MemorySegment base, int n) {
        var mh$ = ImGuiTextIndex_get_line_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextIndex_get_line_end", self, base, n);
            }
            return (MemorySegment)mh$.invokeExact(self, base, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTextIndex_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTextIndex_append");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTextIndex_append(ImGuiTextIndex *self, const char *base, int old_size, int new_size)
     * }
     */
    public static FunctionDescriptor ImGuiTextIndex_append$descriptor() {
        return ImGuiTextIndex_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTextIndex_append(ImGuiTextIndex *self, const char *base, int old_size, int new_size)
     * }
     */
    public static MethodHandle ImGuiTextIndex_append$handle() {
        return ImGuiTextIndex_append.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTextIndex_append(ImGuiTextIndex *self, const char *base, int old_size, int new_size)
     * }
     */
    public static MemorySegment ImGuiTextIndex_append$address() {
        return ImGuiTextIndex_append.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTextIndex_append(ImGuiTextIndex *self, const char *base, int old_size, int new_size)
     * }
     */
    public static void ImGuiTextIndex_append(MemorySegment self, MemorySegment base, int old_size, int new_size) {
        var mh$ = ImGuiTextIndex_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTextIndex_append", self, base, old_size, new_size);
            }
            mh$.invokeExact(self, base, old_size, new_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class igImLowerBound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("igImLowerBound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *igImLowerBound(ImGuiStoragePair *in_begin, ImGuiStoragePair *in_end, ImGuiID key)
     * }
     */
    public static FunctionDescriptor igImLowerBound$descriptor() {
        return igImLowerBound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *igImLowerBound(ImGuiStoragePair *in_begin, ImGuiStoragePair *in_end, ImGuiID key)
     * }
     */
    public static MethodHandle igImLowerBound$handle() {
        return igImLowerBound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStoragePair *igImLowerBound(ImGuiStoragePair *in_begin, ImGuiStoragePair *in_end, ImGuiID key)
     * }
     */
    public static MemorySegment igImLowerBound$address() {
        return igImLowerBound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStoragePair *igImLowerBound(ImGuiStoragePair *in_begin, ImGuiStoragePair *in_end, ImGuiID key)
     * }
     */
    public static MemorySegment igImLowerBound(MemorySegment in_begin, MemorySegment in_end, int key) {
        var mh$ = igImLowerBound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("igImLowerBound", in_begin, in_end, key);
            }
            return (MemorySegment)mh$.invokeExact(in_begin, in_end, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSharedData_ImDrawListSharedData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSharedData_ImDrawListSharedData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawListSharedData *ImDrawListSharedData_ImDrawListSharedData()
     * }
     */
    public static FunctionDescriptor ImDrawListSharedData_ImDrawListSharedData$descriptor() {
        return ImDrawListSharedData_ImDrawListSharedData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawListSharedData *ImDrawListSharedData_ImDrawListSharedData()
     * }
     */
    public static MethodHandle ImDrawListSharedData_ImDrawListSharedData$handle() {
        return ImDrawListSharedData_ImDrawListSharedData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawListSharedData *ImDrawListSharedData_ImDrawListSharedData()
     * }
     */
    public static MemorySegment ImDrawListSharedData_ImDrawListSharedData$address() {
        return ImDrawListSharedData_ImDrawListSharedData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawListSharedData *ImDrawListSharedData_ImDrawListSharedData()
     * }
     */
    public static MemorySegment ImDrawListSharedData_ImDrawListSharedData() {
        var mh$ = ImDrawListSharedData_ImDrawListSharedData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSharedData_ImDrawListSharedData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSharedData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSharedData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawListSharedData_destroy(ImDrawListSharedData *self)
     * }
     */
    public static FunctionDescriptor ImDrawListSharedData_destroy$descriptor() {
        return ImDrawListSharedData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawListSharedData_destroy(ImDrawListSharedData *self)
     * }
     */
    public static MethodHandle ImDrawListSharedData_destroy$handle() {
        return ImDrawListSharedData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawListSharedData_destroy(ImDrawListSharedData *self)
     * }
     */
    public static MemorySegment ImDrawListSharedData_destroy$address() {
        return ImDrawListSharedData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawListSharedData_destroy(ImDrawListSharedData *self)
     * }
     */
    public static void ImDrawListSharedData_destroy(MemorySegment self) {
        var mh$ = ImDrawListSharedData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSharedData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawListSharedData_SetCircleTessellationMaxError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawListSharedData_SetCircleTessellationMaxError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawListSharedData_SetCircleTessellationMaxError(ImDrawListSharedData *self, float max_error)
     * }
     */
    public static FunctionDescriptor ImDrawListSharedData_SetCircleTessellationMaxError$descriptor() {
        return ImDrawListSharedData_SetCircleTessellationMaxError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawListSharedData_SetCircleTessellationMaxError(ImDrawListSharedData *self, float max_error)
     * }
     */
    public static MethodHandle ImDrawListSharedData_SetCircleTessellationMaxError$handle() {
        return ImDrawListSharedData_SetCircleTessellationMaxError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawListSharedData_SetCircleTessellationMaxError(ImDrawListSharedData *self, float max_error)
     * }
     */
    public static MemorySegment ImDrawListSharedData_SetCircleTessellationMaxError$address() {
        return ImDrawListSharedData_SetCircleTessellationMaxError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawListSharedData_SetCircleTessellationMaxError(ImDrawListSharedData *self, float max_error)
     * }
     */
    public static void ImDrawListSharedData_SetCircleTessellationMaxError(MemorySegment self, float max_error) {
        var mh$ = ImDrawListSharedData_SetCircleTessellationMaxError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawListSharedData_SetCircleTessellationMaxError", self, max_error);
            }
            mh$.invokeExact(self, max_error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawDataBuilder_ImDrawDataBuilder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawDataBuilder_ImDrawDataBuilder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImDrawDataBuilder *ImDrawDataBuilder_ImDrawDataBuilder()
     * }
     */
    public static FunctionDescriptor ImDrawDataBuilder_ImDrawDataBuilder$descriptor() {
        return ImDrawDataBuilder_ImDrawDataBuilder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImDrawDataBuilder *ImDrawDataBuilder_ImDrawDataBuilder()
     * }
     */
    public static MethodHandle ImDrawDataBuilder_ImDrawDataBuilder$handle() {
        return ImDrawDataBuilder_ImDrawDataBuilder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImDrawDataBuilder *ImDrawDataBuilder_ImDrawDataBuilder()
     * }
     */
    public static MemorySegment ImDrawDataBuilder_ImDrawDataBuilder$address() {
        return ImDrawDataBuilder_ImDrawDataBuilder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImDrawDataBuilder *ImDrawDataBuilder_ImDrawDataBuilder()
     * }
     */
    public static MemorySegment ImDrawDataBuilder_ImDrawDataBuilder() {
        var mh$ = ImDrawDataBuilder_ImDrawDataBuilder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawDataBuilder_ImDrawDataBuilder");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImDrawDataBuilder_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImDrawDataBuilder_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImDrawDataBuilder_destroy(ImDrawDataBuilder *self)
     * }
     */
    public static FunctionDescriptor ImDrawDataBuilder_destroy$descriptor() {
        return ImDrawDataBuilder_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImDrawDataBuilder_destroy(ImDrawDataBuilder *self)
     * }
     */
    public static MethodHandle ImDrawDataBuilder_destroy$handle() {
        return ImDrawDataBuilder_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImDrawDataBuilder_destroy(ImDrawDataBuilder *self)
     * }
     */
    public static MemorySegment ImDrawDataBuilder_destroy$address() {
        return ImDrawDataBuilder_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImDrawDataBuilder_destroy(ImDrawDataBuilder *self)
     * }
     */
    public static void ImDrawDataBuilder_destroy(MemorySegment self) {
        var mh$ = ImDrawDataBuilder_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImDrawDataBuilder_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDataVarInfo_GetVarPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDataVarInfo_GetVarPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *ImGuiDataVarInfo_GetVarPtr(ImGuiDataVarInfo *self, void *parent)
     * }
     */
    public static FunctionDescriptor ImGuiDataVarInfo_GetVarPtr$descriptor() {
        return ImGuiDataVarInfo_GetVarPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *ImGuiDataVarInfo_GetVarPtr(ImGuiDataVarInfo *self, void *parent)
     * }
     */
    public static MethodHandle ImGuiDataVarInfo_GetVarPtr$handle() {
        return ImGuiDataVarInfo_GetVarPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *ImGuiDataVarInfo_GetVarPtr(ImGuiDataVarInfo *self, void *parent)
     * }
     */
    public static MemorySegment ImGuiDataVarInfo_GetVarPtr$address() {
        return ImGuiDataVarInfo_GetVarPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *ImGuiDataVarInfo_GetVarPtr(ImGuiDataVarInfo *self, void *parent)
     * }
     */
    public static MemorySegment ImGuiDataVarInfo_GetVarPtr(MemorySegment self, MemorySegment parent) {
        var mh$ = ImGuiDataVarInfo_GetVarPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDataVarInfo_GetVarPtr", self, parent);
            }
            return (MemorySegment)mh$.invokeExact(self, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStyleMod_ImGuiStyleMod_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStyleMod_ImGuiStyleMod_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Int(ImGuiStyleVar idx, int v)
     * }
     */
    public static FunctionDescriptor ImGuiStyleMod_ImGuiStyleMod_Int$descriptor() {
        return ImGuiStyleMod_ImGuiStyleMod_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Int(ImGuiStyleVar idx, int v)
     * }
     */
    public static MethodHandle ImGuiStyleMod_ImGuiStyleMod_Int$handle() {
        return ImGuiStyleMod_ImGuiStyleMod_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Int(ImGuiStyleVar idx, int v)
     * }
     */
    public static MemorySegment ImGuiStyleMod_ImGuiStyleMod_Int$address() {
        return ImGuiStyleMod_ImGuiStyleMod_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Int(ImGuiStyleVar idx, int v)
     * }
     */
    public static MemorySegment ImGuiStyleMod_ImGuiStyleMod_Int(int idx, int v) {
        var mh$ = ImGuiStyleMod_ImGuiStyleMod_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStyleMod_ImGuiStyleMod_Int", idx, v);
            }
            return (MemorySegment)mh$.invokeExact(idx, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStyleMod_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStyleMod_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStyleMod_destroy(ImGuiStyleMod *self)
     * }
     */
    public static FunctionDescriptor ImGuiStyleMod_destroy$descriptor() {
        return ImGuiStyleMod_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStyleMod_destroy(ImGuiStyleMod *self)
     * }
     */
    public static MethodHandle ImGuiStyleMod_destroy$handle() {
        return ImGuiStyleMod_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStyleMod_destroy(ImGuiStyleMod *self)
     * }
     */
    public static MemorySegment ImGuiStyleMod_destroy$address() {
        return ImGuiStyleMod_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStyleMod_destroy(ImGuiStyleMod *self)
     * }
     */
    public static void ImGuiStyleMod_destroy(MemorySegment self) {
        var mh$ = ImGuiStyleMod_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStyleMod_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStyleMod_ImGuiStyleMod_Float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStyleMod_ImGuiStyleMod_Float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Float(ImGuiStyleVar idx, float v)
     * }
     */
    public static FunctionDescriptor ImGuiStyleMod_ImGuiStyleMod_Float$descriptor() {
        return ImGuiStyleMod_ImGuiStyleMod_Float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Float(ImGuiStyleVar idx, float v)
     * }
     */
    public static MethodHandle ImGuiStyleMod_ImGuiStyleMod_Float$handle() {
        return ImGuiStyleMod_ImGuiStyleMod_Float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Float(ImGuiStyleVar idx, float v)
     * }
     */
    public static MemorySegment ImGuiStyleMod_ImGuiStyleMod_Float$address() {
        return ImGuiStyleMod_ImGuiStyleMod_Float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Float(ImGuiStyleVar idx, float v)
     * }
     */
    public static MemorySegment ImGuiStyleMod_ImGuiStyleMod_Float(int idx, float v) {
        var mh$ = ImGuiStyleMod_ImGuiStyleMod_Float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStyleMod_ImGuiStyleMod_Float", idx, v);
            }
            return (MemorySegment)mh$.invokeExact(idx, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStyleMod_ImGuiStyleMod_Vec2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStyleMod_ImGuiStyleMod_Vec2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Vec2(ImGuiStyleVar idx, ImVec2 v)
     * }
     */
    public static FunctionDescriptor ImGuiStyleMod_ImGuiStyleMod_Vec2$descriptor() {
        return ImGuiStyleMod_ImGuiStyleMod_Vec2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Vec2(ImGuiStyleVar idx, ImVec2 v)
     * }
     */
    public static MethodHandle ImGuiStyleMod_ImGuiStyleMod_Vec2$handle() {
        return ImGuiStyleMod_ImGuiStyleMod_Vec2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Vec2(ImGuiStyleVar idx, ImVec2 v)
     * }
     */
    public static MemorySegment ImGuiStyleMod_ImGuiStyleMod_Vec2$address() {
        return ImGuiStyleMod_ImGuiStyleMod_Vec2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStyleMod *ImGuiStyleMod_ImGuiStyleMod_Vec2(ImGuiStyleVar idx, ImVec2 v)
     * }
     */
    public static MemorySegment ImGuiStyleMod_ImGuiStyleMod_Vec2(int idx, MemorySegment v) {
        var mh$ = ImGuiStyleMod_ImGuiStyleMod_Vec2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStyleMod_ImGuiStyleMod_Vec2", idx, v);
            }
            return (MemorySegment)mh$.invokeExact(idx, v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiComboPreviewData_ImGuiComboPreviewData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiComboPreviewData_ImGuiComboPreviewData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiComboPreviewData *ImGuiComboPreviewData_ImGuiComboPreviewData()
     * }
     */
    public static FunctionDescriptor ImGuiComboPreviewData_ImGuiComboPreviewData$descriptor() {
        return ImGuiComboPreviewData_ImGuiComboPreviewData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiComboPreviewData *ImGuiComboPreviewData_ImGuiComboPreviewData()
     * }
     */
    public static MethodHandle ImGuiComboPreviewData_ImGuiComboPreviewData$handle() {
        return ImGuiComboPreviewData_ImGuiComboPreviewData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiComboPreviewData *ImGuiComboPreviewData_ImGuiComboPreviewData()
     * }
     */
    public static MemorySegment ImGuiComboPreviewData_ImGuiComboPreviewData$address() {
        return ImGuiComboPreviewData_ImGuiComboPreviewData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiComboPreviewData *ImGuiComboPreviewData_ImGuiComboPreviewData()
     * }
     */
    public static MemorySegment ImGuiComboPreviewData_ImGuiComboPreviewData() {
        var mh$ = ImGuiComboPreviewData_ImGuiComboPreviewData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiComboPreviewData_ImGuiComboPreviewData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiComboPreviewData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiComboPreviewData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiComboPreviewData_destroy(ImGuiComboPreviewData *self)
     * }
     */
    public static FunctionDescriptor ImGuiComboPreviewData_destroy$descriptor() {
        return ImGuiComboPreviewData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiComboPreviewData_destroy(ImGuiComboPreviewData *self)
     * }
     */
    public static MethodHandle ImGuiComboPreviewData_destroy$handle() {
        return ImGuiComboPreviewData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiComboPreviewData_destroy(ImGuiComboPreviewData *self)
     * }
     */
    public static MemorySegment ImGuiComboPreviewData_destroy$address() {
        return ImGuiComboPreviewData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiComboPreviewData_destroy(ImGuiComboPreviewData *self)
     * }
     */
    public static void ImGuiComboPreviewData_destroy(MemorySegment self) {
        var mh$ = ImGuiComboPreviewData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiComboPreviewData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMenuColumns_ImGuiMenuColumns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMenuColumns_ImGuiMenuColumns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiMenuColumns *ImGuiMenuColumns_ImGuiMenuColumns()
     * }
     */
    public static FunctionDescriptor ImGuiMenuColumns_ImGuiMenuColumns$descriptor() {
        return ImGuiMenuColumns_ImGuiMenuColumns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiMenuColumns *ImGuiMenuColumns_ImGuiMenuColumns()
     * }
     */
    public static MethodHandle ImGuiMenuColumns_ImGuiMenuColumns$handle() {
        return ImGuiMenuColumns_ImGuiMenuColumns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiMenuColumns *ImGuiMenuColumns_ImGuiMenuColumns()
     * }
     */
    public static MemorySegment ImGuiMenuColumns_ImGuiMenuColumns$address() {
        return ImGuiMenuColumns_ImGuiMenuColumns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiMenuColumns *ImGuiMenuColumns_ImGuiMenuColumns()
     * }
     */
    public static MemorySegment ImGuiMenuColumns_ImGuiMenuColumns() {
        var mh$ = ImGuiMenuColumns_ImGuiMenuColumns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMenuColumns_ImGuiMenuColumns");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMenuColumns_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMenuColumns_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_destroy(ImGuiMenuColumns *self)
     * }
     */
    public static FunctionDescriptor ImGuiMenuColumns_destroy$descriptor() {
        return ImGuiMenuColumns_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_destroy(ImGuiMenuColumns *self)
     * }
     */
    public static MethodHandle ImGuiMenuColumns_destroy$handle() {
        return ImGuiMenuColumns_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_destroy(ImGuiMenuColumns *self)
     * }
     */
    public static MemorySegment ImGuiMenuColumns_destroy$address() {
        return ImGuiMenuColumns_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_destroy(ImGuiMenuColumns *self)
     * }
     */
    public static void ImGuiMenuColumns_destroy(MemorySegment self) {
        var mh$ = ImGuiMenuColumns_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMenuColumns_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMenuColumns_Update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMenuColumns_Update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_Update(ImGuiMenuColumns *self, float spacing, bool window_reappearing)
     * }
     */
    public static FunctionDescriptor ImGuiMenuColumns_Update$descriptor() {
        return ImGuiMenuColumns_Update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_Update(ImGuiMenuColumns *self, float spacing, bool window_reappearing)
     * }
     */
    public static MethodHandle ImGuiMenuColumns_Update$handle() {
        return ImGuiMenuColumns_Update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_Update(ImGuiMenuColumns *self, float spacing, bool window_reappearing)
     * }
     */
    public static MemorySegment ImGuiMenuColumns_Update$address() {
        return ImGuiMenuColumns_Update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_Update(ImGuiMenuColumns *self, float spacing, bool window_reappearing)
     * }
     */
    public static void ImGuiMenuColumns_Update(MemorySegment self, float spacing, boolean window_reappearing) {
        var mh$ = ImGuiMenuColumns_Update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMenuColumns_Update", self, spacing, window_reappearing);
            }
            mh$.invokeExact(self, spacing, window_reappearing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMenuColumns_DeclColumns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_FLOAT,
            imgui.C_POINTER,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_FLOAT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMenuColumns_DeclColumns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns *self, float w_icon, float w_label, float w_shortcut, float w_mark)
     * }
     */
    public static FunctionDescriptor ImGuiMenuColumns_DeclColumns$descriptor() {
        return ImGuiMenuColumns_DeclColumns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns *self, float w_icon, float w_label, float w_shortcut, float w_mark)
     * }
     */
    public static MethodHandle ImGuiMenuColumns_DeclColumns$handle() {
        return ImGuiMenuColumns_DeclColumns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns *self, float w_icon, float w_label, float w_shortcut, float w_mark)
     * }
     */
    public static MemorySegment ImGuiMenuColumns_DeclColumns$address() {
        return ImGuiMenuColumns_DeclColumns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ImGuiMenuColumns_DeclColumns(ImGuiMenuColumns *self, float w_icon, float w_label, float w_shortcut, float w_mark)
     * }
     */
    public static float ImGuiMenuColumns_DeclColumns(MemorySegment self, float w_icon, float w_label, float w_shortcut, float w_mark) {
        var mh$ = ImGuiMenuColumns_DeclColumns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMenuColumns_DeclColumns", self, w_icon, w_label, w_shortcut, w_mark);
            }
            return (float)mh$.invokeExact(self, w_icon, w_label, w_shortcut, w_mark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMenuColumns_CalcNextTotalWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_BOOL
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMenuColumns_CalcNextTotalWidth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_CalcNextTotalWidth(ImGuiMenuColumns *self, bool update_offsets)
     * }
     */
    public static FunctionDescriptor ImGuiMenuColumns_CalcNextTotalWidth$descriptor() {
        return ImGuiMenuColumns_CalcNextTotalWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_CalcNextTotalWidth(ImGuiMenuColumns *self, bool update_offsets)
     * }
     */
    public static MethodHandle ImGuiMenuColumns_CalcNextTotalWidth$handle() {
        return ImGuiMenuColumns_CalcNextTotalWidth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_CalcNextTotalWidth(ImGuiMenuColumns *self, bool update_offsets)
     * }
     */
    public static MemorySegment ImGuiMenuColumns_CalcNextTotalWidth$address() {
        return ImGuiMenuColumns_CalcNextTotalWidth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiMenuColumns_CalcNextTotalWidth(ImGuiMenuColumns *self, bool update_offsets)
     * }
     */
    public static void ImGuiMenuColumns_CalcNextTotalWidth(MemorySegment self, boolean update_offsets) {
        var mh$ = ImGuiMenuColumns_CalcNextTotalWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMenuColumns_CalcNextTotalWidth", self, update_offsets);
            }
            mh$.invokeExact(self, update_offsets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiInputTextDeactivatedState *ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState()
     * }
     */
    public static FunctionDescriptor ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState$descriptor() {
        return ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiInputTextDeactivatedState *ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState()
     * }
     */
    public static MethodHandle ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState$handle() {
        return ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiInputTextDeactivatedState *ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState()
     * }
     */
    public static MemorySegment ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState$address() {
        return ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiInputTextDeactivatedState *ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState()
     * }
     */
    public static MemorySegment ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState() {
        var mh$ = ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextDeactivatedState_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextDeactivatedState_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextDeactivatedState_destroy(ImGuiInputTextDeactivatedState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextDeactivatedState_destroy$descriptor() {
        return ImGuiInputTextDeactivatedState_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextDeactivatedState_destroy(ImGuiInputTextDeactivatedState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextDeactivatedState_destroy$handle() {
        return ImGuiInputTextDeactivatedState_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextDeactivatedState_destroy(ImGuiInputTextDeactivatedState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextDeactivatedState_destroy$address() {
        return ImGuiInputTextDeactivatedState_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextDeactivatedState_destroy(ImGuiInputTextDeactivatedState *self)
     * }
     */
    public static void ImGuiInputTextDeactivatedState_destroy(MemorySegment self) {
        var mh$ = ImGuiInputTextDeactivatedState_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextDeactivatedState_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextDeactivatedState_ClearFreeMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextDeactivatedState_ClearFreeMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextDeactivatedState_ClearFreeMemory(ImGuiInputTextDeactivatedState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextDeactivatedState_ClearFreeMemory$descriptor() {
        return ImGuiInputTextDeactivatedState_ClearFreeMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextDeactivatedState_ClearFreeMemory(ImGuiInputTextDeactivatedState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextDeactivatedState_ClearFreeMemory$handle() {
        return ImGuiInputTextDeactivatedState_ClearFreeMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextDeactivatedState_ClearFreeMemory(ImGuiInputTextDeactivatedState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextDeactivatedState_ClearFreeMemory$address() {
        return ImGuiInputTextDeactivatedState_ClearFreeMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextDeactivatedState_ClearFreeMemory(ImGuiInputTextDeactivatedState *self)
     * }
     */
    public static void ImGuiInputTextDeactivatedState_ClearFreeMemory(MemorySegment self) {
        var mh$ = ImGuiInputTextDeactivatedState_ClearFreeMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextDeactivatedState_ClearFreeMemory", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_ImGuiInputTextState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_ImGuiInputTextState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiInputTextState *ImGuiInputTextState_ImGuiInputTextState()
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_ImGuiInputTextState$descriptor() {
        return ImGuiInputTextState_ImGuiInputTextState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiInputTextState *ImGuiInputTextState_ImGuiInputTextState()
     * }
     */
    public static MethodHandle ImGuiInputTextState_ImGuiInputTextState$handle() {
        return ImGuiInputTextState_ImGuiInputTextState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiInputTextState *ImGuiInputTextState_ImGuiInputTextState()
     * }
     */
    public static MemorySegment ImGuiInputTextState_ImGuiInputTextState$address() {
        return ImGuiInputTextState_ImGuiInputTextState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiInputTextState *ImGuiInputTextState_ImGuiInputTextState()
     * }
     */
    public static MemorySegment ImGuiInputTextState_ImGuiInputTextState() {
        var mh$ = ImGuiInputTextState_ImGuiInputTextState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_ImGuiInputTextState");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_destroy(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_destroy$descriptor() {
        return ImGuiInputTextState_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_destroy(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_destroy$handle() {
        return ImGuiInputTextState_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_destroy(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_destroy$address() {
        return ImGuiInputTextState_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_destroy(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_destroy(MemorySegment self) {
        var mh$ = ImGuiInputTextState_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_ClearText {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_ClearText");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearText(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_ClearText$descriptor() {
        return ImGuiInputTextState_ClearText.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearText(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_ClearText$handle() {
        return ImGuiInputTextState_ClearText.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearText(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_ClearText$address() {
        return ImGuiInputTextState_ClearText.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearText(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_ClearText(MemorySegment self) {
        var mh$ = ImGuiInputTextState_ClearText.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_ClearText", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_ClearFreeMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_ClearFreeMemory");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearFreeMemory(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_ClearFreeMemory$descriptor() {
        return ImGuiInputTextState_ClearFreeMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearFreeMemory(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_ClearFreeMemory$handle() {
        return ImGuiInputTextState_ClearFreeMemory.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearFreeMemory(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_ClearFreeMemory$address() {
        return ImGuiInputTextState_ClearFreeMemory.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearFreeMemory(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_ClearFreeMemory(MemorySegment self) {
        var mh$ = ImGuiInputTextState_ClearFreeMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_ClearFreeMemory", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_GetUndoAvailCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_GetUndoAvailCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetUndoAvailCount(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_GetUndoAvailCount$descriptor() {
        return ImGuiInputTextState_GetUndoAvailCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetUndoAvailCount(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_GetUndoAvailCount$handle() {
        return ImGuiInputTextState_GetUndoAvailCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetUndoAvailCount(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_GetUndoAvailCount$address() {
        return ImGuiInputTextState_GetUndoAvailCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetUndoAvailCount(ImGuiInputTextState *self)
     * }
     */
    public static int ImGuiInputTextState_GetUndoAvailCount(MemorySegment self) {
        var mh$ = ImGuiInputTextState_GetUndoAvailCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_GetUndoAvailCount", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_GetRedoAvailCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_GetRedoAvailCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetRedoAvailCount(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_GetRedoAvailCount$descriptor() {
        return ImGuiInputTextState_GetRedoAvailCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetRedoAvailCount(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_GetRedoAvailCount$handle() {
        return ImGuiInputTextState_GetRedoAvailCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetRedoAvailCount(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_GetRedoAvailCount$address() {
        return ImGuiInputTextState_GetRedoAvailCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetRedoAvailCount(ImGuiInputTextState *self)
     * }
     */
    public static int ImGuiInputTextState_GetRedoAvailCount(MemorySegment self) {
        var mh$ = ImGuiInputTextState_GetRedoAvailCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_GetRedoAvailCount", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_OnKeyPressed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_OnKeyPressed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_OnKeyPressed(ImGuiInputTextState *self, int key)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_OnKeyPressed$descriptor() {
        return ImGuiInputTextState_OnKeyPressed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_OnKeyPressed(ImGuiInputTextState *self, int key)
     * }
     */
    public static MethodHandle ImGuiInputTextState_OnKeyPressed$handle() {
        return ImGuiInputTextState_OnKeyPressed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_OnKeyPressed(ImGuiInputTextState *self, int key)
     * }
     */
    public static MemorySegment ImGuiInputTextState_OnKeyPressed$address() {
        return ImGuiInputTextState_OnKeyPressed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_OnKeyPressed(ImGuiInputTextState *self, int key)
     * }
     */
    public static void ImGuiInputTextState_OnKeyPressed(MemorySegment self, int key) {
        var mh$ = ImGuiInputTextState_OnKeyPressed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_OnKeyPressed", self, key);
            }
            mh$.invokeExact(self, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_CursorAnimReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_CursorAnimReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_CursorAnimReset(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_CursorAnimReset$descriptor() {
        return ImGuiInputTextState_CursorAnimReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_CursorAnimReset(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_CursorAnimReset$handle() {
        return ImGuiInputTextState_CursorAnimReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_CursorAnimReset(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_CursorAnimReset$address() {
        return ImGuiInputTextState_CursorAnimReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_CursorAnimReset(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_CursorAnimReset(MemorySegment self) {
        var mh$ = ImGuiInputTextState_CursorAnimReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_CursorAnimReset", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_CursorClamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_CursorClamp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_CursorClamp(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_CursorClamp$descriptor() {
        return ImGuiInputTextState_CursorClamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_CursorClamp(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_CursorClamp$handle() {
        return ImGuiInputTextState_CursorClamp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_CursorClamp(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_CursorClamp$address() {
        return ImGuiInputTextState_CursorClamp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_CursorClamp(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_CursorClamp(MemorySegment self) {
        var mh$ = ImGuiInputTextState_CursorClamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_CursorClamp", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_HasSelection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_HasSelection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiInputTextState_HasSelection(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_HasSelection$descriptor() {
        return ImGuiInputTextState_HasSelection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiInputTextState_HasSelection(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_HasSelection$handle() {
        return ImGuiInputTextState_HasSelection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiInputTextState_HasSelection(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_HasSelection$address() {
        return ImGuiInputTextState_HasSelection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiInputTextState_HasSelection(ImGuiInputTextState *self)
     * }
     */
    public static boolean ImGuiInputTextState_HasSelection(MemorySegment self) {
        var mh$ = ImGuiInputTextState_HasSelection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_HasSelection", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_ClearSelection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_ClearSelection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearSelection(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_ClearSelection$descriptor() {
        return ImGuiInputTextState_ClearSelection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearSelection(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_ClearSelection$handle() {
        return ImGuiInputTextState_ClearSelection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearSelection(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_ClearSelection$address() {
        return ImGuiInputTextState_ClearSelection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ClearSelection(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_ClearSelection(MemorySegment self) {
        var mh$ = ImGuiInputTextState_ClearSelection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_ClearSelection", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_GetCursorPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_GetCursorPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetCursorPos(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_GetCursorPos$descriptor() {
        return ImGuiInputTextState_GetCursorPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetCursorPos(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_GetCursorPos$handle() {
        return ImGuiInputTextState_GetCursorPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetCursorPos(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_GetCursorPos$address() {
        return ImGuiInputTextState_GetCursorPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetCursorPos(ImGuiInputTextState *self)
     * }
     */
    public static int ImGuiInputTextState_GetCursorPos(MemorySegment self) {
        var mh$ = ImGuiInputTextState_GetCursorPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_GetCursorPos", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_GetSelectionStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_GetSelectionStart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetSelectionStart(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_GetSelectionStart$descriptor() {
        return ImGuiInputTextState_GetSelectionStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetSelectionStart(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_GetSelectionStart$handle() {
        return ImGuiInputTextState_GetSelectionStart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetSelectionStart(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_GetSelectionStart$address() {
        return ImGuiInputTextState_GetSelectionStart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetSelectionStart(ImGuiInputTextState *self)
     * }
     */
    public static int ImGuiInputTextState_GetSelectionStart(MemorySegment self) {
        var mh$ = ImGuiInputTextState_GetSelectionStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_GetSelectionStart", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_GetSelectionEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_INT,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_GetSelectionEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetSelectionEnd(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_GetSelectionEnd$descriptor() {
        return ImGuiInputTextState_GetSelectionEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetSelectionEnd(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_GetSelectionEnd$handle() {
        return ImGuiInputTextState_GetSelectionEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetSelectionEnd(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_GetSelectionEnd$address() {
        return ImGuiInputTextState_GetSelectionEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ImGuiInputTextState_GetSelectionEnd(ImGuiInputTextState *self)
     * }
     */
    public static int ImGuiInputTextState_GetSelectionEnd(MemorySegment self) {
        var mh$ = ImGuiInputTextState_GetSelectionEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_GetSelectionEnd", self);
            }
            return (int)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_SelectAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_SelectAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_SelectAll(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_SelectAll$descriptor() {
        return ImGuiInputTextState_SelectAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_SelectAll(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_SelectAll$handle() {
        return ImGuiInputTextState_SelectAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_SelectAll(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_SelectAll$address() {
        return ImGuiInputTextState_SelectAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_SelectAll(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_SelectAll(MemorySegment self) {
        var mh$ = ImGuiInputTextState_SelectAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_SelectAll", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_ReloadUserBufAndSelectAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_ReloadUserBufAndSelectAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndSelectAll(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_ReloadUserBufAndSelectAll$descriptor() {
        return ImGuiInputTextState_ReloadUserBufAndSelectAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndSelectAll(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_ReloadUserBufAndSelectAll$handle() {
        return ImGuiInputTextState_ReloadUserBufAndSelectAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndSelectAll(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_ReloadUserBufAndSelectAll$address() {
        return ImGuiInputTextState_ReloadUserBufAndSelectAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndSelectAll(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_ReloadUserBufAndSelectAll(MemorySegment self) {
        var mh$ = ImGuiInputTextState_ReloadUserBufAndSelectAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_ReloadUserBufAndSelectAll", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_ReloadUserBufAndKeepSelection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_ReloadUserBufAndKeepSelection");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndKeepSelection(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_ReloadUserBufAndKeepSelection$descriptor() {
        return ImGuiInputTextState_ReloadUserBufAndKeepSelection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndKeepSelection(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_ReloadUserBufAndKeepSelection$handle() {
        return ImGuiInputTextState_ReloadUserBufAndKeepSelection.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndKeepSelection(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_ReloadUserBufAndKeepSelection$address() {
        return ImGuiInputTextState_ReloadUserBufAndKeepSelection.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndKeepSelection(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_ReloadUserBufAndKeepSelection(MemorySegment self) {
        var mh$ = ImGuiInputTextState_ReloadUserBufAndKeepSelection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_ReloadUserBufAndKeepSelection", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputTextState_ReloadUserBufAndMoveToEnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputTextState_ReloadUserBufAndMoveToEnd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndMoveToEnd(ImGuiInputTextState *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputTextState_ReloadUserBufAndMoveToEnd$descriptor() {
        return ImGuiInputTextState_ReloadUserBufAndMoveToEnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndMoveToEnd(ImGuiInputTextState *self)
     * }
     */
    public static MethodHandle ImGuiInputTextState_ReloadUserBufAndMoveToEnd$handle() {
        return ImGuiInputTextState_ReloadUserBufAndMoveToEnd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndMoveToEnd(ImGuiInputTextState *self)
     * }
     */
    public static MemorySegment ImGuiInputTextState_ReloadUserBufAndMoveToEnd$address() {
        return ImGuiInputTextState_ReloadUserBufAndMoveToEnd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputTextState_ReloadUserBufAndMoveToEnd(ImGuiInputTextState *self)
     * }
     */
    public static void ImGuiInputTextState_ReloadUserBufAndMoveToEnd(MemorySegment self) {
        var mh$ = ImGuiInputTextState_ReloadUserBufAndMoveToEnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputTextState_ReloadUserBufAndMoveToEnd", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiNextWindowData_ImGuiNextWindowData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiNextWindowData_ImGuiNextWindowData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiNextWindowData *ImGuiNextWindowData_ImGuiNextWindowData()
     * }
     */
    public static FunctionDescriptor ImGuiNextWindowData_ImGuiNextWindowData$descriptor() {
        return ImGuiNextWindowData_ImGuiNextWindowData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiNextWindowData *ImGuiNextWindowData_ImGuiNextWindowData()
     * }
     */
    public static MethodHandle ImGuiNextWindowData_ImGuiNextWindowData$handle() {
        return ImGuiNextWindowData_ImGuiNextWindowData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiNextWindowData *ImGuiNextWindowData_ImGuiNextWindowData()
     * }
     */
    public static MemorySegment ImGuiNextWindowData_ImGuiNextWindowData$address() {
        return ImGuiNextWindowData_ImGuiNextWindowData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiNextWindowData *ImGuiNextWindowData_ImGuiNextWindowData()
     * }
     */
    public static MemorySegment ImGuiNextWindowData_ImGuiNextWindowData() {
        var mh$ = ImGuiNextWindowData_ImGuiNextWindowData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiNextWindowData_ImGuiNextWindowData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiNextWindowData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiNextWindowData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiNextWindowData_destroy(ImGuiNextWindowData *self)
     * }
     */
    public static FunctionDescriptor ImGuiNextWindowData_destroy$descriptor() {
        return ImGuiNextWindowData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiNextWindowData_destroy(ImGuiNextWindowData *self)
     * }
     */
    public static MethodHandle ImGuiNextWindowData_destroy$handle() {
        return ImGuiNextWindowData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiNextWindowData_destroy(ImGuiNextWindowData *self)
     * }
     */
    public static MemorySegment ImGuiNextWindowData_destroy$address() {
        return ImGuiNextWindowData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiNextWindowData_destroy(ImGuiNextWindowData *self)
     * }
     */
    public static void ImGuiNextWindowData_destroy(MemorySegment self) {
        var mh$ = ImGuiNextWindowData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiNextWindowData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiNextWindowData_ClearFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiNextWindowData_ClearFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData *self)
     * }
     */
    public static FunctionDescriptor ImGuiNextWindowData_ClearFlags$descriptor() {
        return ImGuiNextWindowData_ClearFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData *self)
     * }
     */
    public static MethodHandle ImGuiNextWindowData_ClearFlags$handle() {
        return ImGuiNextWindowData_ClearFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData *self)
     * }
     */
    public static MemorySegment ImGuiNextWindowData_ClearFlags$address() {
        return ImGuiNextWindowData_ClearFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiNextWindowData_ClearFlags(ImGuiNextWindowData *self)
     * }
     */
    public static void ImGuiNextWindowData_ClearFlags(MemorySegment self) {
        var mh$ = ImGuiNextWindowData_ClearFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiNextWindowData_ClearFlags", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiNextItemData_ImGuiNextItemData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiNextItemData_ImGuiNextItemData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiNextItemData *ImGuiNextItemData_ImGuiNextItemData()
     * }
     */
    public static FunctionDescriptor ImGuiNextItemData_ImGuiNextItemData$descriptor() {
        return ImGuiNextItemData_ImGuiNextItemData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiNextItemData *ImGuiNextItemData_ImGuiNextItemData()
     * }
     */
    public static MethodHandle ImGuiNextItemData_ImGuiNextItemData$handle() {
        return ImGuiNextItemData_ImGuiNextItemData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiNextItemData *ImGuiNextItemData_ImGuiNextItemData()
     * }
     */
    public static MemorySegment ImGuiNextItemData_ImGuiNextItemData$address() {
        return ImGuiNextItemData_ImGuiNextItemData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiNextItemData *ImGuiNextItemData_ImGuiNextItemData()
     * }
     */
    public static MemorySegment ImGuiNextItemData_ImGuiNextItemData() {
        var mh$ = ImGuiNextItemData_ImGuiNextItemData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiNextItemData_ImGuiNextItemData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiNextItemData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiNextItemData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiNextItemData_destroy(ImGuiNextItemData *self)
     * }
     */
    public static FunctionDescriptor ImGuiNextItemData_destroy$descriptor() {
        return ImGuiNextItemData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiNextItemData_destroy(ImGuiNextItemData *self)
     * }
     */
    public static MethodHandle ImGuiNextItemData_destroy$handle() {
        return ImGuiNextItemData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiNextItemData_destroy(ImGuiNextItemData *self)
     * }
     */
    public static MemorySegment ImGuiNextItemData_destroy$address() {
        return ImGuiNextItemData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiNextItemData_destroy(ImGuiNextItemData *self)
     * }
     */
    public static void ImGuiNextItemData_destroy(MemorySegment self) {
        var mh$ = ImGuiNextItemData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiNextItemData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiNextItemData_ClearFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiNextItemData_ClearFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiNextItemData_ClearFlags(ImGuiNextItemData *self)
     * }
     */
    public static FunctionDescriptor ImGuiNextItemData_ClearFlags$descriptor() {
        return ImGuiNextItemData_ClearFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiNextItemData_ClearFlags(ImGuiNextItemData *self)
     * }
     */
    public static MethodHandle ImGuiNextItemData_ClearFlags$handle() {
        return ImGuiNextItemData_ClearFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiNextItemData_ClearFlags(ImGuiNextItemData *self)
     * }
     */
    public static MemorySegment ImGuiNextItemData_ClearFlags$address() {
        return ImGuiNextItemData_ClearFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiNextItemData_ClearFlags(ImGuiNextItemData *self)
     * }
     */
    public static void ImGuiNextItemData_ClearFlags(MemorySegment self) {
        var mh$ = ImGuiNextItemData_ClearFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiNextItemData_ClearFlags", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiLastItemData_ImGuiLastItemData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiLastItemData_ImGuiLastItemData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiLastItemData *ImGuiLastItemData_ImGuiLastItemData()
     * }
     */
    public static FunctionDescriptor ImGuiLastItemData_ImGuiLastItemData$descriptor() {
        return ImGuiLastItemData_ImGuiLastItemData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiLastItemData *ImGuiLastItemData_ImGuiLastItemData()
     * }
     */
    public static MethodHandle ImGuiLastItemData_ImGuiLastItemData$handle() {
        return ImGuiLastItemData_ImGuiLastItemData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiLastItemData *ImGuiLastItemData_ImGuiLastItemData()
     * }
     */
    public static MemorySegment ImGuiLastItemData_ImGuiLastItemData$address() {
        return ImGuiLastItemData_ImGuiLastItemData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiLastItemData *ImGuiLastItemData_ImGuiLastItemData()
     * }
     */
    public static MemorySegment ImGuiLastItemData_ImGuiLastItemData() {
        var mh$ = ImGuiLastItemData_ImGuiLastItemData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiLastItemData_ImGuiLastItemData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiLastItemData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiLastItemData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiLastItemData_destroy(ImGuiLastItemData *self)
     * }
     */
    public static FunctionDescriptor ImGuiLastItemData_destroy$descriptor() {
        return ImGuiLastItemData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiLastItemData_destroy(ImGuiLastItemData *self)
     * }
     */
    public static MethodHandle ImGuiLastItemData_destroy$handle() {
        return ImGuiLastItemData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiLastItemData_destroy(ImGuiLastItemData *self)
     * }
     */
    public static MemorySegment ImGuiLastItemData_destroy$address() {
        return ImGuiLastItemData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiLastItemData_destroy(ImGuiLastItemData *self)
     * }
     */
    public static void ImGuiLastItemData_destroy(MemorySegment self) {
        var mh$ = ImGuiLastItemData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiLastItemData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStackSizes_ImGuiStackSizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStackSizes_ImGuiStackSizes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStackSizes *ImGuiStackSizes_ImGuiStackSizes()
     * }
     */
    public static FunctionDescriptor ImGuiStackSizes_ImGuiStackSizes$descriptor() {
        return ImGuiStackSizes_ImGuiStackSizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStackSizes *ImGuiStackSizes_ImGuiStackSizes()
     * }
     */
    public static MethodHandle ImGuiStackSizes_ImGuiStackSizes$handle() {
        return ImGuiStackSizes_ImGuiStackSizes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStackSizes *ImGuiStackSizes_ImGuiStackSizes()
     * }
     */
    public static MemorySegment ImGuiStackSizes_ImGuiStackSizes$address() {
        return ImGuiStackSizes_ImGuiStackSizes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStackSizes *ImGuiStackSizes_ImGuiStackSizes()
     * }
     */
    public static MemorySegment ImGuiStackSizes_ImGuiStackSizes() {
        var mh$ = ImGuiStackSizes_ImGuiStackSizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStackSizes_ImGuiStackSizes");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStackSizes_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStackSizes_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_destroy(ImGuiStackSizes *self)
     * }
     */
    public static FunctionDescriptor ImGuiStackSizes_destroy$descriptor() {
        return ImGuiStackSizes_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_destroy(ImGuiStackSizes *self)
     * }
     */
    public static MethodHandle ImGuiStackSizes_destroy$handle() {
        return ImGuiStackSizes_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_destroy(ImGuiStackSizes *self)
     * }
     */
    public static MemorySegment ImGuiStackSizes_destroy$address() {
        return ImGuiStackSizes_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_destroy(ImGuiStackSizes *self)
     * }
     */
    public static void ImGuiStackSizes_destroy(MemorySegment self) {
        var mh$ = ImGuiStackSizes_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStackSizes_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStackSizes_SetToContextState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStackSizes_SetToContextState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_SetToContextState(ImGuiStackSizes *self, ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor ImGuiStackSizes_SetToContextState$descriptor() {
        return ImGuiStackSizes_SetToContextState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_SetToContextState(ImGuiStackSizes *self, ImGuiContext *ctx)
     * }
     */
    public static MethodHandle ImGuiStackSizes_SetToContextState$handle() {
        return ImGuiStackSizes_SetToContextState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_SetToContextState(ImGuiStackSizes *self, ImGuiContext *ctx)
     * }
     */
    public static MemorySegment ImGuiStackSizes_SetToContextState$address() {
        return ImGuiStackSizes_SetToContextState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_SetToContextState(ImGuiStackSizes *self, ImGuiContext *ctx)
     * }
     */
    public static void ImGuiStackSizes_SetToContextState(MemorySegment self, MemorySegment ctx) {
        var mh$ = ImGuiStackSizes_SetToContextState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStackSizes_SetToContextState", self, ctx);
            }
            mh$.invokeExact(self, ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStackSizes_CompareWithContextState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStackSizes_CompareWithContextState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_CompareWithContextState(ImGuiStackSizes *self, ImGuiContext *ctx)
     * }
     */
    public static FunctionDescriptor ImGuiStackSizes_CompareWithContextState$descriptor() {
        return ImGuiStackSizes_CompareWithContextState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_CompareWithContextState(ImGuiStackSizes *self, ImGuiContext *ctx)
     * }
     */
    public static MethodHandle ImGuiStackSizes_CompareWithContextState$handle() {
        return ImGuiStackSizes_CompareWithContextState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_CompareWithContextState(ImGuiStackSizes *self, ImGuiContext *ctx)
     * }
     */
    public static MemorySegment ImGuiStackSizes_CompareWithContextState$address() {
        return ImGuiStackSizes_CompareWithContextState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStackSizes_CompareWithContextState(ImGuiStackSizes *self, ImGuiContext *ctx)
     * }
     */
    public static void ImGuiStackSizes_CompareWithContextState(MemorySegment self, MemorySegment ctx) {
        var mh$ = ImGuiStackSizes_CompareWithContextState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStackSizes_CompareWithContextState", self, ctx);
            }
            mh$.invokeExact(self, ctx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiPtrOrIndex *ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(void *ptr)
     * }
     */
    public static FunctionDescriptor ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr$descriptor() {
        return ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiPtrOrIndex *ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(void *ptr)
     * }
     */
    public static MethodHandle ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr$handle() {
        return ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiPtrOrIndex *ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(void *ptr)
     * }
     */
    public static MemorySegment ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr$address() {
        return ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiPtrOrIndex *ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(void *ptr)
     * }
     */
    public static MemorySegment ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(MemorySegment ptr) {
        var mh$ = ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr", ptr);
            }
            return (MemorySegment)mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPtrOrIndex_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPtrOrIndex_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex *self)
     * }
     */
    public static FunctionDescriptor ImGuiPtrOrIndex_destroy$descriptor() {
        return ImGuiPtrOrIndex_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex *self)
     * }
     */
    public static MethodHandle ImGuiPtrOrIndex_destroy$handle() {
        return ImGuiPtrOrIndex_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex *self)
     * }
     */
    public static MemorySegment ImGuiPtrOrIndex_destroy$address() {
        return ImGuiPtrOrIndex_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiPtrOrIndex_destroy(ImGuiPtrOrIndex *self)
     * }
     */
    public static void ImGuiPtrOrIndex_destroy(MemorySegment self) {
        var mh$ = ImGuiPtrOrIndex_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPtrOrIndex_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiPtrOrIndex *ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(int index)
     * }
     */
    public static FunctionDescriptor ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int$descriptor() {
        return ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiPtrOrIndex *ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(int index)
     * }
     */
    public static MethodHandle ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int$handle() {
        return ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiPtrOrIndex *ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(int index)
     * }
     */
    public static MemorySegment ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int$address() {
        return ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiPtrOrIndex *ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(int index)
     * }
     */
    public static MemorySegment ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(int index) {
        var mh$ = ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int", index);
            }
            return (MemorySegment)mh$.invokeExact(index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPopupData_ImGuiPopupData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPopupData_ImGuiPopupData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiPopupData *ImGuiPopupData_ImGuiPopupData()
     * }
     */
    public static FunctionDescriptor ImGuiPopupData_ImGuiPopupData$descriptor() {
        return ImGuiPopupData_ImGuiPopupData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiPopupData *ImGuiPopupData_ImGuiPopupData()
     * }
     */
    public static MethodHandle ImGuiPopupData_ImGuiPopupData$handle() {
        return ImGuiPopupData_ImGuiPopupData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiPopupData *ImGuiPopupData_ImGuiPopupData()
     * }
     */
    public static MemorySegment ImGuiPopupData_ImGuiPopupData$address() {
        return ImGuiPopupData_ImGuiPopupData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiPopupData *ImGuiPopupData_ImGuiPopupData()
     * }
     */
    public static MemorySegment ImGuiPopupData_ImGuiPopupData() {
        var mh$ = ImGuiPopupData_ImGuiPopupData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPopupData_ImGuiPopupData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiPopupData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiPopupData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiPopupData_destroy(ImGuiPopupData *self)
     * }
     */
    public static FunctionDescriptor ImGuiPopupData_destroy$descriptor() {
        return ImGuiPopupData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiPopupData_destroy(ImGuiPopupData *self)
     * }
     */
    public static MethodHandle ImGuiPopupData_destroy$handle() {
        return ImGuiPopupData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiPopupData_destroy(ImGuiPopupData *self)
     * }
     */
    public static MemorySegment ImGuiPopupData_destroy$address() {
        return ImGuiPopupData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiPopupData_destroy(ImGuiPopupData *self)
     * }
     */
    public static void ImGuiPopupData_destroy(MemorySegment self) {
        var mh$ = ImGuiPopupData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiPopupData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputEvent_ImGuiInputEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputEvent_ImGuiInputEvent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiInputEvent *ImGuiInputEvent_ImGuiInputEvent()
     * }
     */
    public static FunctionDescriptor ImGuiInputEvent_ImGuiInputEvent$descriptor() {
        return ImGuiInputEvent_ImGuiInputEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiInputEvent *ImGuiInputEvent_ImGuiInputEvent()
     * }
     */
    public static MethodHandle ImGuiInputEvent_ImGuiInputEvent$handle() {
        return ImGuiInputEvent_ImGuiInputEvent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiInputEvent *ImGuiInputEvent_ImGuiInputEvent()
     * }
     */
    public static MemorySegment ImGuiInputEvent_ImGuiInputEvent$address() {
        return ImGuiInputEvent_ImGuiInputEvent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiInputEvent *ImGuiInputEvent_ImGuiInputEvent()
     * }
     */
    public static MemorySegment ImGuiInputEvent_ImGuiInputEvent() {
        var mh$ = ImGuiInputEvent_ImGuiInputEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputEvent_ImGuiInputEvent");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiInputEvent_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiInputEvent_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiInputEvent_destroy(ImGuiInputEvent *self)
     * }
     */
    public static FunctionDescriptor ImGuiInputEvent_destroy$descriptor() {
        return ImGuiInputEvent_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiInputEvent_destroy(ImGuiInputEvent *self)
     * }
     */
    public static MethodHandle ImGuiInputEvent_destroy$handle() {
        return ImGuiInputEvent_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiInputEvent_destroy(ImGuiInputEvent *self)
     * }
     */
    public static MemorySegment ImGuiInputEvent_destroy$address() {
        return ImGuiInputEvent_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiInputEvent_destroy(ImGuiInputEvent *self)
     * }
     */
    public static void ImGuiInputEvent_destroy(MemorySegment self) {
        var mh$ = ImGuiInputEvent_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiInputEvent_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiKeyRoutingData_ImGuiKeyRoutingData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiKeyRoutingData_ImGuiKeyRoutingData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingData *ImGuiKeyRoutingData_ImGuiKeyRoutingData()
     * }
     */
    public static FunctionDescriptor ImGuiKeyRoutingData_ImGuiKeyRoutingData$descriptor() {
        return ImGuiKeyRoutingData_ImGuiKeyRoutingData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingData *ImGuiKeyRoutingData_ImGuiKeyRoutingData()
     * }
     */
    public static MethodHandle ImGuiKeyRoutingData_ImGuiKeyRoutingData$handle() {
        return ImGuiKeyRoutingData_ImGuiKeyRoutingData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingData *ImGuiKeyRoutingData_ImGuiKeyRoutingData()
     * }
     */
    public static MemorySegment ImGuiKeyRoutingData_ImGuiKeyRoutingData$address() {
        return ImGuiKeyRoutingData_ImGuiKeyRoutingData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingData *ImGuiKeyRoutingData_ImGuiKeyRoutingData()
     * }
     */
    public static MemorySegment ImGuiKeyRoutingData_ImGuiKeyRoutingData() {
        var mh$ = ImGuiKeyRoutingData_ImGuiKeyRoutingData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiKeyRoutingData_ImGuiKeyRoutingData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiKeyRoutingData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiKeyRoutingData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingData_destroy(ImGuiKeyRoutingData *self)
     * }
     */
    public static FunctionDescriptor ImGuiKeyRoutingData_destroy$descriptor() {
        return ImGuiKeyRoutingData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingData_destroy(ImGuiKeyRoutingData *self)
     * }
     */
    public static MethodHandle ImGuiKeyRoutingData_destroy$handle() {
        return ImGuiKeyRoutingData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingData_destroy(ImGuiKeyRoutingData *self)
     * }
     */
    public static MemorySegment ImGuiKeyRoutingData_destroy$address() {
        return ImGuiKeyRoutingData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingData_destroy(ImGuiKeyRoutingData *self)
     * }
     */
    public static void ImGuiKeyRoutingData_destroy(MemorySegment self) {
        var mh$ = ImGuiKeyRoutingData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiKeyRoutingData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiKeyRoutingTable_ImGuiKeyRoutingTable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiKeyRoutingTable_ImGuiKeyRoutingTable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingTable *ImGuiKeyRoutingTable_ImGuiKeyRoutingTable()
     * }
     */
    public static FunctionDescriptor ImGuiKeyRoutingTable_ImGuiKeyRoutingTable$descriptor() {
        return ImGuiKeyRoutingTable_ImGuiKeyRoutingTable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingTable *ImGuiKeyRoutingTable_ImGuiKeyRoutingTable()
     * }
     */
    public static MethodHandle ImGuiKeyRoutingTable_ImGuiKeyRoutingTable$handle() {
        return ImGuiKeyRoutingTable_ImGuiKeyRoutingTable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingTable *ImGuiKeyRoutingTable_ImGuiKeyRoutingTable()
     * }
     */
    public static MemorySegment ImGuiKeyRoutingTable_ImGuiKeyRoutingTable$address() {
        return ImGuiKeyRoutingTable_ImGuiKeyRoutingTable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKeyRoutingTable *ImGuiKeyRoutingTable_ImGuiKeyRoutingTable()
     * }
     */
    public static MemorySegment ImGuiKeyRoutingTable_ImGuiKeyRoutingTable() {
        var mh$ = ImGuiKeyRoutingTable_ImGuiKeyRoutingTable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiKeyRoutingTable_ImGuiKeyRoutingTable");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiKeyRoutingTable_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiKeyRoutingTable_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingTable_destroy(ImGuiKeyRoutingTable *self)
     * }
     */
    public static FunctionDescriptor ImGuiKeyRoutingTable_destroy$descriptor() {
        return ImGuiKeyRoutingTable_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingTable_destroy(ImGuiKeyRoutingTable *self)
     * }
     */
    public static MethodHandle ImGuiKeyRoutingTable_destroy$handle() {
        return ImGuiKeyRoutingTable_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingTable_destroy(ImGuiKeyRoutingTable *self)
     * }
     */
    public static MemorySegment ImGuiKeyRoutingTable_destroy$address() {
        return ImGuiKeyRoutingTable_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingTable_destroy(ImGuiKeyRoutingTable *self)
     * }
     */
    public static void ImGuiKeyRoutingTable_destroy(MemorySegment self) {
        var mh$ = ImGuiKeyRoutingTable_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiKeyRoutingTable_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiKeyRoutingTable_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiKeyRoutingTable_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingTable_Clear(ImGuiKeyRoutingTable *self)
     * }
     */
    public static FunctionDescriptor ImGuiKeyRoutingTable_Clear$descriptor() {
        return ImGuiKeyRoutingTable_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingTable_Clear(ImGuiKeyRoutingTable *self)
     * }
     */
    public static MethodHandle ImGuiKeyRoutingTable_Clear$handle() {
        return ImGuiKeyRoutingTable_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingTable_Clear(ImGuiKeyRoutingTable *self)
     * }
     */
    public static MemorySegment ImGuiKeyRoutingTable_Clear$address() {
        return ImGuiKeyRoutingTable_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiKeyRoutingTable_Clear(ImGuiKeyRoutingTable *self)
     * }
     */
    public static void ImGuiKeyRoutingTable_Clear(MemorySegment self) {
        var mh$ = ImGuiKeyRoutingTable_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiKeyRoutingTable_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiKeyOwnerData_ImGuiKeyOwnerData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiKeyOwnerData_ImGuiKeyOwnerData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiKeyOwnerData *ImGuiKeyOwnerData_ImGuiKeyOwnerData()
     * }
     */
    public static FunctionDescriptor ImGuiKeyOwnerData_ImGuiKeyOwnerData$descriptor() {
        return ImGuiKeyOwnerData_ImGuiKeyOwnerData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiKeyOwnerData *ImGuiKeyOwnerData_ImGuiKeyOwnerData()
     * }
     */
    public static MethodHandle ImGuiKeyOwnerData_ImGuiKeyOwnerData$handle() {
        return ImGuiKeyOwnerData_ImGuiKeyOwnerData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiKeyOwnerData *ImGuiKeyOwnerData_ImGuiKeyOwnerData()
     * }
     */
    public static MemorySegment ImGuiKeyOwnerData_ImGuiKeyOwnerData$address() {
        return ImGuiKeyOwnerData_ImGuiKeyOwnerData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiKeyOwnerData *ImGuiKeyOwnerData_ImGuiKeyOwnerData()
     * }
     */
    public static MemorySegment ImGuiKeyOwnerData_ImGuiKeyOwnerData() {
        var mh$ = ImGuiKeyOwnerData_ImGuiKeyOwnerData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiKeyOwnerData_ImGuiKeyOwnerData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiKeyOwnerData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiKeyOwnerData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiKeyOwnerData_destroy(ImGuiKeyOwnerData *self)
     * }
     */
    public static FunctionDescriptor ImGuiKeyOwnerData_destroy$descriptor() {
        return ImGuiKeyOwnerData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiKeyOwnerData_destroy(ImGuiKeyOwnerData *self)
     * }
     */
    public static MethodHandle ImGuiKeyOwnerData_destroy$handle() {
        return ImGuiKeyOwnerData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiKeyOwnerData_destroy(ImGuiKeyOwnerData *self)
     * }
     */
    public static MemorySegment ImGuiKeyOwnerData_destroy$address() {
        return ImGuiKeyOwnerData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiKeyOwnerData_destroy(ImGuiKeyOwnerData *self)
     * }
     */
    public static void ImGuiKeyOwnerData_destroy(MemorySegment self) {
        var mh$ = ImGuiKeyOwnerData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiKeyOwnerData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipperRange_FromIndices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ImGuiListClipperRange.layout(),
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipperRange_FromIndices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiListClipperRange ImGuiListClipperRange_FromIndices(int min, int max)
     * }
     */
    public static FunctionDescriptor ImGuiListClipperRange_FromIndices$descriptor() {
        return ImGuiListClipperRange_FromIndices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiListClipperRange ImGuiListClipperRange_FromIndices(int min, int max)
     * }
     */
    public static MethodHandle ImGuiListClipperRange_FromIndices$handle() {
        return ImGuiListClipperRange_FromIndices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiListClipperRange ImGuiListClipperRange_FromIndices(int min, int max)
     * }
     */
    public static MemorySegment ImGuiListClipperRange_FromIndices$address() {
        return ImGuiListClipperRange_FromIndices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiListClipperRange ImGuiListClipperRange_FromIndices(int min, int max)
     * }
     */
    public static MemorySegment ImGuiListClipperRange_FromIndices(SegmentAllocator allocator, int min, int max) {
        var mh$ = ImGuiListClipperRange_FromIndices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipperRange_FromIndices", allocator, min, max);
            }
            return (MemorySegment)mh$.invokeExact(allocator, min, max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipperRange_FromPositions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ImGuiListClipperRange.layout(),
            imgui.C_FLOAT,
            imgui.C_FLOAT,
            imgui.C_INT,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipperRange_FromPositions");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiListClipperRange ImGuiListClipperRange_FromPositions(float y1, float y2, int off_min, int off_max)
     * }
     */
    public static FunctionDescriptor ImGuiListClipperRange_FromPositions$descriptor() {
        return ImGuiListClipperRange_FromPositions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiListClipperRange ImGuiListClipperRange_FromPositions(float y1, float y2, int off_min, int off_max)
     * }
     */
    public static MethodHandle ImGuiListClipperRange_FromPositions$handle() {
        return ImGuiListClipperRange_FromPositions.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiListClipperRange ImGuiListClipperRange_FromPositions(float y1, float y2, int off_min, int off_max)
     * }
     */
    public static MemorySegment ImGuiListClipperRange_FromPositions$address() {
        return ImGuiListClipperRange_FromPositions.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiListClipperRange ImGuiListClipperRange_FromPositions(float y1, float y2, int off_min, int off_max)
     * }
     */
    public static MemorySegment ImGuiListClipperRange_FromPositions(SegmentAllocator allocator, float y1, float y2, int off_min, int off_max) {
        var mh$ = ImGuiListClipperRange_FromPositions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipperRange_FromPositions", allocator, y1, y2, off_min, off_max);
            }
            return (MemorySegment)mh$.invokeExact(allocator, y1, y2, off_min, off_max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipperData_ImGuiListClipperData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipperData_ImGuiListClipperData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiListClipperData *ImGuiListClipperData_ImGuiListClipperData()
     * }
     */
    public static FunctionDescriptor ImGuiListClipperData_ImGuiListClipperData$descriptor() {
        return ImGuiListClipperData_ImGuiListClipperData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiListClipperData *ImGuiListClipperData_ImGuiListClipperData()
     * }
     */
    public static MethodHandle ImGuiListClipperData_ImGuiListClipperData$handle() {
        return ImGuiListClipperData_ImGuiListClipperData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiListClipperData *ImGuiListClipperData_ImGuiListClipperData()
     * }
     */
    public static MemorySegment ImGuiListClipperData_ImGuiListClipperData$address() {
        return ImGuiListClipperData_ImGuiListClipperData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiListClipperData *ImGuiListClipperData_ImGuiListClipperData()
     * }
     */
    public static MemorySegment ImGuiListClipperData_ImGuiListClipperData() {
        var mh$ = ImGuiListClipperData_ImGuiListClipperData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipperData_ImGuiListClipperData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipperData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipperData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiListClipperData_destroy(ImGuiListClipperData *self)
     * }
     */
    public static FunctionDescriptor ImGuiListClipperData_destroy$descriptor() {
        return ImGuiListClipperData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiListClipperData_destroy(ImGuiListClipperData *self)
     * }
     */
    public static MethodHandle ImGuiListClipperData_destroy$handle() {
        return ImGuiListClipperData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiListClipperData_destroy(ImGuiListClipperData *self)
     * }
     */
    public static MemorySegment ImGuiListClipperData_destroy$address() {
        return ImGuiListClipperData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiListClipperData_destroy(ImGuiListClipperData *self)
     * }
     */
    public static void ImGuiListClipperData_destroy(MemorySegment self) {
        var mh$ = ImGuiListClipperData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipperData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiListClipperData_Reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiListClipperData_Reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiListClipperData_Reset(ImGuiListClipperData *self, ImGuiListClipper *clipper)
     * }
     */
    public static FunctionDescriptor ImGuiListClipperData_Reset$descriptor() {
        return ImGuiListClipperData_Reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiListClipperData_Reset(ImGuiListClipperData *self, ImGuiListClipper *clipper)
     * }
     */
    public static MethodHandle ImGuiListClipperData_Reset$handle() {
        return ImGuiListClipperData_Reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiListClipperData_Reset(ImGuiListClipperData *self, ImGuiListClipper *clipper)
     * }
     */
    public static MemorySegment ImGuiListClipperData_Reset$address() {
        return ImGuiListClipperData_Reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiListClipperData_Reset(ImGuiListClipperData *self, ImGuiListClipper *clipper)
     * }
     */
    public static void ImGuiListClipperData_Reset(MemorySegment self, MemorySegment clipper) {
        var mh$ = ImGuiListClipperData_Reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiListClipperData_Reset", self, clipper);
            }
            mh$.invokeExact(self, clipper);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiNavItemData_ImGuiNavItemData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiNavItemData_ImGuiNavItemData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiNavItemData *ImGuiNavItemData_ImGuiNavItemData()
     * }
     */
    public static FunctionDescriptor ImGuiNavItemData_ImGuiNavItemData$descriptor() {
        return ImGuiNavItemData_ImGuiNavItemData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiNavItemData *ImGuiNavItemData_ImGuiNavItemData()
     * }
     */
    public static MethodHandle ImGuiNavItemData_ImGuiNavItemData$handle() {
        return ImGuiNavItemData_ImGuiNavItemData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiNavItemData *ImGuiNavItemData_ImGuiNavItemData()
     * }
     */
    public static MemorySegment ImGuiNavItemData_ImGuiNavItemData$address() {
        return ImGuiNavItemData_ImGuiNavItemData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiNavItemData *ImGuiNavItemData_ImGuiNavItemData()
     * }
     */
    public static MemorySegment ImGuiNavItemData_ImGuiNavItemData() {
        var mh$ = ImGuiNavItemData_ImGuiNavItemData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiNavItemData_ImGuiNavItemData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiNavItemData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiNavItemData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiNavItemData_destroy(ImGuiNavItemData *self)
     * }
     */
    public static FunctionDescriptor ImGuiNavItemData_destroy$descriptor() {
        return ImGuiNavItemData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiNavItemData_destroy(ImGuiNavItemData *self)
     * }
     */
    public static MethodHandle ImGuiNavItemData_destroy$handle() {
        return ImGuiNavItemData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiNavItemData_destroy(ImGuiNavItemData *self)
     * }
     */
    public static MemorySegment ImGuiNavItemData_destroy$address() {
        return ImGuiNavItemData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiNavItemData_destroy(ImGuiNavItemData *self)
     * }
     */
    public static void ImGuiNavItemData_destroy(MemorySegment self) {
        var mh$ = ImGuiNavItemData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiNavItemData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiNavItemData_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiNavItemData_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiNavItemData_Clear(ImGuiNavItemData *self)
     * }
     */
    public static FunctionDescriptor ImGuiNavItemData_Clear$descriptor() {
        return ImGuiNavItemData_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiNavItemData_Clear(ImGuiNavItemData *self)
     * }
     */
    public static MethodHandle ImGuiNavItemData_Clear$handle() {
        return ImGuiNavItemData_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiNavItemData_Clear(ImGuiNavItemData *self)
     * }
     */
    public static MemorySegment ImGuiNavItemData_Clear$address() {
        return ImGuiNavItemData_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiNavItemData_Clear(ImGuiNavItemData *self)
     * }
     */
    public static void ImGuiNavItemData_Clear(MemorySegment self) {
        var mh$ = ImGuiNavItemData_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiNavItemData_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTypingSelectState_ImGuiTypingSelectState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTypingSelectState_ImGuiTypingSelectState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiTypingSelectState *ImGuiTypingSelectState_ImGuiTypingSelectState()
     * }
     */
    public static FunctionDescriptor ImGuiTypingSelectState_ImGuiTypingSelectState$descriptor() {
        return ImGuiTypingSelectState_ImGuiTypingSelectState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiTypingSelectState *ImGuiTypingSelectState_ImGuiTypingSelectState()
     * }
     */
    public static MethodHandle ImGuiTypingSelectState_ImGuiTypingSelectState$handle() {
        return ImGuiTypingSelectState_ImGuiTypingSelectState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiTypingSelectState *ImGuiTypingSelectState_ImGuiTypingSelectState()
     * }
     */
    public static MemorySegment ImGuiTypingSelectState_ImGuiTypingSelectState$address() {
        return ImGuiTypingSelectState_ImGuiTypingSelectState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiTypingSelectState *ImGuiTypingSelectState_ImGuiTypingSelectState()
     * }
     */
    public static MemorySegment ImGuiTypingSelectState_ImGuiTypingSelectState() {
        var mh$ = ImGuiTypingSelectState_ImGuiTypingSelectState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTypingSelectState_ImGuiTypingSelectState");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTypingSelectState_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTypingSelectState_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTypingSelectState_destroy(ImGuiTypingSelectState *self)
     * }
     */
    public static FunctionDescriptor ImGuiTypingSelectState_destroy$descriptor() {
        return ImGuiTypingSelectState_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTypingSelectState_destroy(ImGuiTypingSelectState *self)
     * }
     */
    public static MethodHandle ImGuiTypingSelectState_destroy$handle() {
        return ImGuiTypingSelectState_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTypingSelectState_destroy(ImGuiTypingSelectState *self)
     * }
     */
    public static MemorySegment ImGuiTypingSelectState_destroy$address() {
        return ImGuiTypingSelectState_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTypingSelectState_destroy(ImGuiTypingSelectState *self)
     * }
     */
    public static void ImGuiTypingSelectState_destroy(MemorySegment self) {
        var mh$ = ImGuiTypingSelectState_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTypingSelectState_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiTypingSelectState_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiTypingSelectState_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiTypingSelectState_Clear(ImGuiTypingSelectState *self)
     * }
     */
    public static FunctionDescriptor ImGuiTypingSelectState_Clear$descriptor() {
        return ImGuiTypingSelectState_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiTypingSelectState_Clear(ImGuiTypingSelectState *self)
     * }
     */
    public static MethodHandle ImGuiTypingSelectState_Clear$handle() {
        return ImGuiTypingSelectState_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiTypingSelectState_Clear(ImGuiTypingSelectState *self)
     * }
     */
    public static MemorySegment ImGuiTypingSelectState_Clear$address() {
        return ImGuiTypingSelectState_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiTypingSelectState_Clear(ImGuiTypingSelectState *self)
     * }
     */
    public static void ImGuiTypingSelectState_Clear(MemorySegment self) {
        var mh$ = ImGuiTypingSelectState_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiTypingSelectState_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiOldColumnData_ImGuiOldColumnData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiOldColumnData_ImGuiOldColumnData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiOldColumnData *ImGuiOldColumnData_ImGuiOldColumnData()
     * }
     */
    public static FunctionDescriptor ImGuiOldColumnData_ImGuiOldColumnData$descriptor() {
        return ImGuiOldColumnData_ImGuiOldColumnData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiOldColumnData *ImGuiOldColumnData_ImGuiOldColumnData()
     * }
     */
    public static MethodHandle ImGuiOldColumnData_ImGuiOldColumnData$handle() {
        return ImGuiOldColumnData_ImGuiOldColumnData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiOldColumnData *ImGuiOldColumnData_ImGuiOldColumnData()
     * }
     */
    public static MemorySegment ImGuiOldColumnData_ImGuiOldColumnData$address() {
        return ImGuiOldColumnData_ImGuiOldColumnData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiOldColumnData *ImGuiOldColumnData_ImGuiOldColumnData()
     * }
     */
    public static MemorySegment ImGuiOldColumnData_ImGuiOldColumnData() {
        var mh$ = ImGuiOldColumnData_ImGuiOldColumnData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiOldColumnData_ImGuiOldColumnData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiOldColumnData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiOldColumnData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiOldColumnData_destroy(ImGuiOldColumnData *self)
     * }
     */
    public static FunctionDescriptor ImGuiOldColumnData_destroy$descriptor() {
        return ImGuiOldColumnData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiOldColumnData_destroy(ImGuiOldColumnData *self)
     * }
     */
    public static MethodHandle ImGuiOldColumnData_destroy$handle() {
        return ImGuiOldColumnData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiOldColumnData_destroy(ImGuiOldColumnData *self)
     * }
     */
    public static MemorySegment ImGuiOldColumnData_destroy$address() {
        return ImGuiOldColumnData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiOldColumnData_destroy(ImGuiOldColumnData *self)
     * }
     */
    public static void ImGuiOldColumnData_destroy(MemorySegment self) {
        var mh$ = ImGuiOldColumnData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiOldColumnData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiOldColumns_ImGuiOldColumns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiOldColumns_ImGuiOldColumns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiOldColumns *ImGuiOldColumns_ImGuiOldColumns()
     * }
     */
    public static FunctionDescriptor ImGuiOldColumns_ImGuiOldColumns$descriptor() {
        return ImGuiOldColumns_ImGuiOldColumns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiOldColumns *ImGuiOldColumns_ImGuiOldColumns()
     * }
     */
    public static MethodHandle ImGuiOldColumns_ImGuiOldColumns$handle() {
        return ImGuiOldColumns_ImGuiOldColumns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiOldColumns *ImGuiOldColumns_ImGuiOldColumns()
     * }
     */
    public static MemorySegment ImGuiOldColumns_ImGuiOldColumns$address() {
        return ImGuiOldColumns_ImGuiOldColumns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiOldColumns *ImGuiOldColumns_ImGuiOldColumns()
     * }
     */
    public static MemorySegment ImGuiOldColumns_ImGuiOldColumns() {
        var mh$ = ImGuiOldColumns_ImGuiOldColumns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiOldColumns_ImGuiOldColumns");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiOldColumns_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiOldColumns_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiOldColumns_destroy(ImGuiOldColumns *self)
     * }
     */
    public static FunctionDescriptor ImGuiOldColumns_destroy$descriptor() {
        return ImGuiOldColumns_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiOldColumns_destroy(ImGuiOldColumns *self)
     * }
     */
    public static MethodHandle ImGuiOldColumns_destroy$handle() {
        return ImGuiOldColumns_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiOldColumns_destroy(ImGuiOldColumns *self)
     * }
     */
    public static MemorySegment ImGuiOldColumns_destroy$address() {
        return ImGuiOldColumns_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiOldColumns_destroy(ImGuiOldColumns *self)
     * }
     */
    public static void ImGuiOldColumns_destroy(MemorySegment self) {
        var mh$ = ImGuiOldColumns_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiOldColumns_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiBoxSelectState_ImGuiBoxSelectState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiBoxSelectState_ImGuiBoxSelectState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiBoxSelectState *ImGuiBoxSelectState_ImGuiBoxSelectState()
     * }
     */
    public static FunctionDescriptor ImGuiBoxSelectState_ImGuiBoxSelectState$descriptor() {
        return ImGuiBoxSelectState_ImGuiBoxSelectState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiBoxSelectState *ImGuiBoxSelectState_ImGuiBoxSelectState()
     * }
     */
    public static MethodHandle ImGuiBoxSelectState_ImGuiBoxSelectState$handle() {
        return ImGuiBoxSelectState_ImGuiBoxSelectState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiBoxSelectState *ImGuiBoxSelectState_ImGuiBoxSelectState()
     * }
     */
    public static MemorySegment ImGuiBoxSelectState_ImGuiBoxSelectState$address() {
        return ImGuiBoxSelectState_ImGuiBoxSelectState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiBoxSelectState *ImGuiBoxSelectState_ImGuiBoxSelectState()
     * }
     */
    public static MemorySegment ImGuiBoxSelectState_ImGuiBoxSelectState() {
        var mh$ = ImGuiBoxSelectState_ImGuiBoxSelectState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiBoxSelectState_ImGuiBoxSelectState");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiBoxSelectState_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiBoxSelectState_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiBoxSelectState_destroy(ImGuiBoxSelectState *self)
     * }
     */
    public static FunctionDescriptor ImGuiBoxSelectState_destroy$descriptor() {
        return ImGuiBoxSelectState_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiBoxSelectState_destroy(ImGuiBoxSelectState *self)
     * }
     */
    public static MethodHandle ImGuiBoxSelectState_destroy$handle() {
        return ImGuiBoxSelectState_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiBoxSelectState_destroy(ImGuiBoxSelectState *self)
     * }
     */
    public static MemorySegment ImGuiBoxSelectState_destroy$address() {
        return ImGuiBoxSelectState_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiBoxSelectState_destroy(ImGuiBoxSelectState *self)
     * }
     */
    public static void ImGuiBoxSelectState_destroy(MemorySegment self) {
        var mh$ = ImGuiBoxSelectState_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiBoxSelectState_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMultiSelectTempData_ImGuiMultiSelectTempData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMultiSelectTempData_ImGuiMultiSelectTempData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectTempData *ImGuiMultiSelectTempData_ImGuiMultiSelectTempData()
     * }
     */
    public static FunctionDescriptor ImGuiMultiSelectTempData_ImGuiMultiSelectTempData$descriptor() {
        return ImGuiMultiSelectTempData_ImGuiMultiSelectTempData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectTempData *ImGuiMultiSelectTempData_ImGuiMultiSelectTempData()
     * }
     */
    public static MethodHandle ImGuiMultiSelectTempData_ImGuiMultiSelectTempData$handle() {
        return ImGuiMultiSelectTempData_ImGuiMultiSelectTempData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectTempData *ImGuiMultiSelectTempData_ImGuiMultiSelectTempData()
     * }
     */
    public static MemorySegment ImGuiMultiSelectTempData_ImGuiMultiSelectTempData$address() {
        return ImGuiMultiSelectTempData_ImGuiMultiSelectTempData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiMultiSelectTempData *ImGuiMultiSelectTempData_ImGuiMultiSelectTempData()
     * }
     */
    public static MemorySegment ImGuiMultiSelectTempData_ImGuiMultiSelectTempData() {
        var mh$ = ImGuiMultiSelectTempData_ImGuiMultiSelectTempData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMultiSelectTempData_ImGuiMultiSelectTempData");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMultiSelectTempData_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMultiSelectTempData_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_destroy(ImGuiMultiSelectTempData *self)
     * }
     */
    public static FunctionDescriptor ImGuiMultiSelectTempData_destroy$descriptor() {
        return ImGuiMultiSelectTempData_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_destroy(ImGuiMultiSelectTempData *self)
     * }
     */
    public static MethodHandle ImGuiMultiSelectTempData_destroy$handle() {
        return ImGuiMultiSelectTempData_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_destroy(ImGuiMultiSelectTempData *self)
     * }
     */
    public static MemorySegment ImGuiMultiSelectTempData_destroy$address() {
        return ImGuiMultiSelectTempData_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_destroy(ImGuiMultiSelectTempData *self)
     * }
     */
    public static void ImGuiMultiSelectTempData_destroy(MemorySegment self) {
        var mh$ = ImGuiMultiSelectTempData_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMultiSelectTempData_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMultiSelectTempData_Clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMultiSelectTempData_Clear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_Clear(ImGuiMultiSelectTempData *self)
     * }
     */
    public static FunctionDescriptor ImGuiMultiSelectTempData_Clear$descriptor() {
        return ImGuiMultiSelectTempData_Clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_Clear(ImGuiMultiSelectTempData *self)
     * }
     */
    public static MethodHandle ImGuiMultiSelectTempData_Clear$handle() {
        return ImGuiMultiSelectTempData_Clear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_Clear(ImGuiMultiSelectTempData *self)
     * }
     */
    public static MemorySegment ImGuiMultiSelectTempData_Clear$address() {
        return ImGuiMultiSelectTempData_Clear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_Clear(ImGuiMultiSelectTempData *self)
     * }
     */
    public static void ImGuiMultiSelectTempData_Clear(MemorySegment self) {
        var mh$ = ImGuiMultiSelectTempData_Clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMultiSelectTempData_Clear", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMultiSelectTempData_ClearIO {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMultiSelectTempData_ClearIO");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_ClearIO(ImGuiMultiSelectTempData *self)
     * }
     */
    public static FunctionDescriptor ImGuiMultiSelectTempData_ClearIO$descriptor() {
        return ImGuiMultiSelectTempData_ClearIO.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_ClearIO(ImGuiMultiSelectTempData *self)
     * }
     */
    public static MethodHandle ImGuiMultiSelectTempData_ClearIO$handle() {
        return ImGuiMultiSelectTempData_ClearIO.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_ClearIO(ImGuiMultiSelectTempData *self)
     * }
     */
    public static MemorySegment ImGuiMultiSelectTempData_ClearIO$address() {
        return ImGuiMultiSelectTempData_ClearIO.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectTempData_ClearIO(ImGuiMultiSelectTempData *self)
     * }
     */
    public static void ImGuiMultiSelectTempData_ClearIO(MemorySegment self) {
        var mh$ = ImGuiMultiSelectTempData_ClearIO.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMultiSelectTempData_ClearIO", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMultiSelectState_ImGuiMultiSelectState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMultiSelectState_ImGuiMultiSelectState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectState *ImGuiMultiSelectState_ImGuiMultiSelectState()
     * }
     */
    public static FunctionDescriptor ImGuiMultiSelectState_ImGuiMultiSelectState$descriptor() {
        return ImGuiMultiSelectState_ImGuiMultiSelectState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectState *ImGuiMultiSelectState_ImGuiMultiSelectState()
     * }
     */
    public static MethodHandle ImGuiMultiSelectState_ImGuiMultiSelectState$handle() {
        return ImGuiMultiSelectState_ImGuiMultiSelectState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiMultiSelectState *ImGuiMultiSelectState_ImGuiMultiSelectState()
     * }
     */
    public static MemorySegment ImGuiMultiSelectState_ImGuiMultiSelectState$address() {
        return ImGuiMultiSelectState_ImGuiMultiSelectState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiMultiSelectState *ImGuiMultiSelectState_ImGuiMultiSelectState()
     * }
     */
    public static MemorySegment ImGuiMultiSelectState_ImGuiMultiSelectState() {
        var mh$ = ImGuiMultiSelectState_ImGuiMultiSelectState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMultiSelectState_ImGuiMultiSelectState");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiMultiSelectState_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiMultiSelectState_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectState_destroy(ImGuiMultiSelectState *self)
     * }
     */
    public static FunctionDescriptor ImGuiMultiSelectState_destroy$descriptor() {
        return ImGuiMultiSelectState_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectState_destroy(ImGuiMultiSelectState *self)
     * }
     */
    public static MethodHandle ImGuiMultiSelectState_destroy$handle() {
        return ImGuiMultiSelectState_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectState_destroy(ImGuiMultiSelectState *self)
     * }
     */
    public static MemorySegment ImGuiMultiSelectState_destroy$address() {
        return ImGuiMultiSelectState_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiMultiSelectState_destroy(ImGuiMultiSelectState *self)
     * }
     */
    public static void ImGuiMultiSelectState_destroy(MemorySegment self) {
        var mh$ = ImGuiMultiSelectState_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiMultiSelectState_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_ImGuiDockNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_ImGuiDockNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *ImGuiDockNode_ImGuiDockNode(ImGuiID id)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_ImGuiDockNode$descriptor() {
        return ImGuiDockNode_ImGuiDockNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *ImGuiDockNode_ImGuiDockNode(ImGuiID id)
     * }
     */
    public static MethodHandle ImGuiDockNode_ImGuiDockNode$handle() {
        return ImGuiDockNode_ImGuiDockNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiDockNode *ImGuiDockNode_ImGuiDockNode(ImGuiID id)
     * }
     */
    public static MemorySegment ImGuiDockNode_ImGuiDockNode$address() {
        return ImGuiDockNode_ImGuiDockNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiDockNode *ImGuiDockNode_ImGuiDockNode(ImGuiID id)
     * }
     */
    public static MemorySegment ImGuiDockNode_ImGuiDockNode(int id) {
        var mh$ = ImGuiDockNode_ImGuiDockNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_ImGuiDockNode", id);
            }
            return (MemorySegment)mh$.invokeExact(id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_destroy(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_destroy$descriptor() {
        return ImGuiDockNode_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_destroy(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_destroy$handle() {
        return ImGuiDockNode_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_destroy(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_destroy$address() {
        return ImGuiDockNode_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiDockNode_destroy(ImGuiDockNode *self)
     * }
     */
    public static void ImGuiDockNode_destroy(MemorySegment self) {
        var mh$ = ImGuiDockNode_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_IsRootNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_IsRootNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsRootNode(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_IsRootNode$descriptor() {
        return ImGuiDockNode_IsRootNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsRootNode(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_IsRootNode$handle() {
        return ImGuiDockNode_IsRootNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsRootNode(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_IsRootNode$address() {
        return ImGuiDockNode_IsRootNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsRootNode(ImGuiDockNode *self)
     * }
     */
    public static boolean ImGuiDockNode_IsRootNode(MemorySegment self) {
        var mh$ = ImGuiDockNode_IsRootNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_IsRootNode", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_IsDockSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_IsDockSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsDockSpace(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_IsDockSpace$descriptor() {
        return ImGuiDockNode_IsDockSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsDockSpace(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_IsDockSpace$handle() {
        return ImGuiDockNode_IsDockSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsDockSpace(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_IsDockSpace$address() {
        return ImGuiDockNode_IsDockSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsDockSpace(ImGuiDockNode *self)
     * }
     */
    public static boolean ImGuiDockNode_IsDockSpace(MemorySegment self) {
        var mh$ = ImGuiDockNode_IsDockSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_IsDockSpace", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_IsFloatingNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_IsFloatingNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsFloatingNode(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_IsFloatingNode$descriptor() {
        return ImGuiDockNode_IsFloatingNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsFloatingNode(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_IsFloatingNode$handle() {
        return ImGuiDockNode_IsFloatingNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsFloatingNode(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_IsFloatingNode$address() {
        return ImGuiDockNode_IsFloatingNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsFloatingNode(ImGuiDockNode *self)
     * }
     */
    public static boolean ImGuiDockNode_IsFloatingNode(MemorySegment self) {
        var mh$ = ImGuiDockNode_IsFloatingNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_IsFloatingNode", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_IsCentralNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_IsCentralNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsCentralNode(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_IsCentralNode$descriptor() {
        return ImGuiDockNode_IsCentralNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsCentralNode(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_IsCentralNode$handle() {
        return ImGuiDockNode_IsCentralNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsCentralNode(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_IsCentralNode$address() {
        return ImGuiDockNode_IsCentralNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsCentralNode(ImGuiDockNode *self)
     * }
     */
    public static boolean ImGuiDockNode_IsCentralNode(MemorySegment self) {
        var mh$ = ImGuiDockNode_IsCentralNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_IsCentralNode", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_IsHiddenTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_IsHiddenTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsHiddenTabBar(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_IsHiddenTabBar$descriptor() {
        return ImGuiDockNode_IsHiddenTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsHiddenTabBar(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_IsHiddenTabBar$handle() {
        return ImGuiDockNode_IsHiddenTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsHiddenTabBar(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_IsHiddenTabBar$address() {
        return ImGuiDockNode_IsHiddenTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsHiddenTabBar(ImGuiDockNode *self)
     * }
     */
    public static boolean ImGuiDockNode_IsHiddenTabBar(MemorySegment self) {
        var mh$ = ImGuiDockNode_IsHiddenTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_IsHiddenTabBar", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_IsNoTabBar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_IsNoTabBar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsNoTabBar(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_IsNoTabBar$descriptor() {
        return ImGuiDockNode_IsNoTabBar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsNoTabBar(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_IsNoTabBar$handle() {
        return ImGuiDockNode_IsNoTabBar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsNoTabBar(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_IsNoTabBar$address() {
        return ImGuiDockNode_IsNoTabBar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsNoTabBar(ImGuiDockNode *self)
     * }
     */
    public static boolean ImGuiDockNode_IsNoTabBar(MemorySegment self) {
        var mh$ = ImGuiDockNode_IsNoTabBar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_IsNoTabBar", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_IsSplitNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_IsSplitNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsSplitNode(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_IsSplitNode$descriptor() {
        return ImGuiDockNode_IsSplitNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsSplitNode(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_IsSplitNode$handle() {
        return ImGuiDockNode_IsSplitNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsSplitNode(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_IsSplitNode$address() {
        return ImGuiDockNode_IsSplitNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsSplitNode(ImGuiDockNode *self)
     * }
     */
    public static boolean ImGuiDockNode_IsSplitNode(MemorySegment self) {
        var mh$ = ImGuiDockNode_IsSplitNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_IsSplitNode", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_IsLeafNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_IsLeafNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsLeafNode(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_IsLeafNode$descriptor() {
        return ImGuiDockNode_IsLeafNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsLeafNode(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_IsLeafNode$handle() {
        return ImGuiDockNode_IsLeafNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsLeafNode(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_IsLeafNode$address() {
        return ImGuiDockNode_IsLeafNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsLeafNode(ImGuiDockNode *self)
     * }
     */
    public static boolean ImGuiDockNode_IsLeafNode(MemorySegment self) {
        var mh$ = ImGuiDockNode_IsLeafNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_IsLeafNode", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_IsEmpty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_BOOL,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_IsEmpty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsEmpty(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_IsEmpty$descriptor() {
        return ImGuiDockNode_IsEmpty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsEmpty(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_IsEmpty$handle() {
        return ImGuiDockNode_IsEmpty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsEmpty(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_IsEmpty$address() {
        return ImGuiDockNode_IsEmpty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ImGuiDockNode_IsEmpty(ImGuiDockNode *self)
     * }
     */
    public static boolean ImGuiDockNode_IsEmpty(MemorySegment self) {
        var mh$ = ImGuiDockNode_IsEmpty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_IsEmpty", self);
            }
            return (boolean)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_Rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_Rect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_Rect(ImRect *pOut, ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_Rect$descriptor() {
        return ImGuiDockNode_Rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_Rect(ImRect *pOut, ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_Rect$handle() {
        return ImGuiDockNode_Rect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_Rect(ImRect *pOut, ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_Rect$address() {
        return ImGuiDockNode_Rect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiDockNode_Rect(ImRect *pOut, ImGuiDockNode *self)
     * }
     */
    public static void ImGuiDockNode_Rect(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImGuiDockNode_Rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_Rect", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_SetLocalFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_INT
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_SetLocalFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_SetLocalFlags(ImGuiDockNode *self, ImGuiDockNodeFlags flags)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_SetLocalFlags$descriptor() {
        return ImGuiDockNode_SetLocalFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_SetLocalFlags(ImGuiDockNode *self, ImGuiDockNodeFlags flags)
     * }
     */
    public static MethodHandle ImGuiDockNode_SetLocalFlags$handle() {
        return ImGuiDockNode_SetLocalFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_SetLocalFlags(ImGuiDockNode *self, ImGuiDockNodeFlags flags)
     * }
     */
    public static MemorySegment ImGuiDockNode_SetLocalFlags$address() {
        return ImGuiDockNode_SetLocalFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiDockNode_SetLocalFlags(ImGuiDockNode *self, ImGuiDockNodeFlags flags)
     * }
     */
    public static void ImGuiDockNode_SetLocalFlags(MemorySegment self, int flags) {
        var mh$ = ImGuiDockNode_SetLocalFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_SetLocalFlags", self, flags);
            }
            mh$.invokeExact(self, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockNode_UpdateMergedFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockNode_UpdateMergedFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_UpdateMergedFlags(ImGuiDockNode *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockNode_UpdateMergedFlags$descriptor() {
        return ImGuiDockNode_UpdateMergedFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_UpdateMergedFlags(ImGuiDockNode *self)
     * }
     */
    public static MethodHandle ImGuiDockNode_UpdateMergedFlags$handle() {
        return ImGuiDockNode_UpdateMergedFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiDockNode_UpdateMergedFlags(ImGuiDockNode *self)
     * }
     */
    public static MemorySegment ImGuiDockNode_UpdateMergedFlags$address() {
        return ImGuiDockNode_UpdateMergedFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiDockNode_UpdateMergedFlags(ImGuiDockNode *self)
     * }
     */
    public static void ImGuiDockNode_UpdateMergedFlags(MemorySegment self) {
        var mh$ = ImGuiDockNode_UpdateMergedFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockNode_UpdateMergedFlags", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockContext_ImGuiDockContext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockContext_ImGuiDockContext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiDockContext *ImGuiDockContext_ImGuiDockContext()
     * }
     */
    public static FunctionDescriptor ImGuiDockContext_ImGuiDockContext$descriptor() {
        return ImGuiDockContext_ImGuiDockContext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiDockContext *ImGuiDockContext_ImGuiDockContext()
     * }
     */
    public static MethodHandle ImGuiDockContext_ImGuiDockContext$handle() {
        return ImGuiDockContext_ImGuiDockContext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiDockContext *ImGuiDockContext_ImGuiDockContext()
     * }
     */
    public static MemorySegment ImGuiDockContext_ImGuiDockContext$address() {
        return ImGuiDockContext_ImGuiDockContext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiDockContext *ImGuiDockContext_ImGuiDockContext()
     * }
     */
    public static MemorySegment ImGuiDockContext_ImGuiDockContext() {
        var mh$ = ImGuiDockContext_ImGuiDockContext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockContext_ImGuiDockContext");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDockContext_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDockContext_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiDockContext_destroy(ImGuiDockContext *self)
     * }
     */
    public static FunctionDescriptor ImGuiDockContext_destroy$descriptor() {
        return ImGuiDockContext_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiDockContext_destroy(ImGuiDockContext *self)
     * }
     */
    public static MethodHandle ImGuiDockContext_destroy$handle() {
        return ImGuiDockContext_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiDockContext_destroy(ImGuiDockContext *self)
     * }
     */
    public static MemorySegment ImGuiDockContext_destroy$address() {
        return ImGuiDockContext_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiDockContext_destroy(ImGuiDockContext *self)
     * }
     */
    public static void ImGuiDockContext_destroy(MemorySegment self) {
        var mh$ = ImGuiDockContext_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDockContext_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewportP_ImGuiViewportP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewportP_ImGuiViewportP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiViewportP *ImGuiViewportP_ImGuiViewportP()
     * }
     */
    public static FunctionDescriptor ImGuiViewportP_ImGuiViewportP$descriptor() {
        return ImGuiViewportP_ImGuiViewportP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiViewportP *ImGuiViewportP_ImGuiViewportP()
     * }
     */
    public static MethodHandle ImGuiViewportP_ImGuiViewportP$handle() {
        return ImGuiViewportP_ImGuiViewportP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiViewportP *ImGuiViewportP_ImGuiViewportP()
     * }
     */
    public static MemorySegment ImGuiViewportP_ImGuiViewportP$address() {
        return ImGuiViewportP_ImGuiViewportP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiViewportP *ImGuiViewportP_ImGuiViewportP()
     * }
     */
    public static MemorySegment ImGuiViewportP_ImGuiViewportP() {
        var mh$ = ImGuiViewportP_ImGuiViewportP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewportP_ImGuiViewportP");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewportP_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewportP_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_destroy(ImGuiViewportP *self)
     * }
     */
    public static FunctionDescriptor ImGuiViewportP_destroy$descriptor() {
        return ImGuiViewportP_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_destroy(ImGuiViewportP *self)
     * }
     */
    public static MethodHandle ImGuiViewportP_destroy$handle() {
        return ImGuiViewportP_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_destroy(ImGuiViewportP *self)
     * }
     */
    public static MemorySegment ImGuiViewportP_destroy$address() {
        return ImGuiViewportP_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewportP_destroy(ImGuiViewportP *self)
     * }
     */
    public static void ImGuiViewportP_destroy(MemorySegment self) {
        var mh$ = ImGuiViewportP_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewportP_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewportP_ClearRequestFlags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewportP_ClearRequestFlags");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_ClearRequestFlags(ImGuiViewportP *self)
     * }
     */
    public static FunctionDescriptor ImGuiViewportP_ClearRequestFlags$descriptor() {
        return ImGuiViewportP_ClearRequestFlags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_ClearRequestFlags(ImGuiViewportP *self)
     * }
     */
    public static MethodHandle ImGuiViewportP_ClearRequestFlags$handle() {
        return ImGuiViewportP_ClearRequestFlags.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_ClearRequestFlags(ImGuiViewportP *self)
     * }
     */
    public static MemorySegment ImGuiViewportP_ClearRequestFlags$address() {
        return ImGuiViewportP_ClearRequestFlags.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewportP_ClearRequestFlags(ImGuiViewportP *self)
     * }
     */
    public static void ImGuiViewportP_ClearRequestFlags(MemorySegment self) {
        var mh$ = ImGuiViewportP_ClearRequestFlags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewportP_ClearRequestFlags", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewportP_CalcWorkRectPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewportP_CalcWorkRectPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_CalcWorkRectPos(ImVec2 *pOut, ImGuiViewportP *self, const ImVec2 off_min)
     * }
     */
    public static FunctionDescriptor ImGuiViewportP_CalcWorkRectPos$descriptor() {
        return ImGuiViewportP_CalcWorkRectPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_CalcWorkRectPos(ImVec2 *pOut, ImGuiViewportP *self, const ImVec2 off_min)
     * }
     */
    public static MethodHandle ImGuiViewportP_CalcWorkRectPos$handle() {
        return ImGuiViewportP_CalcWorkRectPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_CalcWorkRectPos(ImVec2 *pOut, ImGuiViewportP *self, const ImVec2 off_min)
     * }
     */
    public static MemorySegment ImGuiViewportP_CalcWorkRectPos$address() {
        return ImGuiViewportP_CalcWorkRectPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewportP_CalcWorkRectPos(ImVec2 *pOut, ImGuiViewportP *self, const ImVec2 off_min)
     * }
     */
    public static void ImGuiViewportP_CalcWorkRectPos(MemorySegment pOut, MemorySegment self, MemorySegment off_min) {
        var mh$ = ImGuiViewportP_CalcWorkRectPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewportP_CalcWorkRectPos", pOut, self, off_min);
            }
            mh$.invokeExact(pOut, self, off_min);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewportP_CalcWorkRectSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            ImVec2.layout(),
            ImVec2.layout()
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewportP_CalcWorkRectSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_CalcWorkRectSize(ImVec2 *pOut, ImGuiViewportP *self, const ImVec2 off_min, const ImVec2 off_max)
     * }
     */
    public static FunctionDescriptor ImGuiViewportP_CalcWorkRectSize$descriptor() {
        return ImGuiViewportP_CalcWorkRectSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_CalcWorkRectSize(ImVec2 *pOut, ImGuiViewportP *self, const ImVec2 off_min, const ImVec2 off_max)
     * }
     */
    public static MethodHandle ImGuiViewportP_CalcWorkRectSize$handle() {
        return ImGuiViewportP_CalcWorkRectSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_CalcWorkRectSize(ImVec2 *pOut, ImGuiViewportP *self, const ImVec2 off_min, const ImVec2 off_max)
     * }
     */
    public static MemorySegment ImGuiViewportP_CalcWorkRectSize$address() {
        return ImGuiViewportP_CalcWorkRectSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewportP_CalcWorkRectSize(ImVec2 *pOut, ImGuiViewportP *self, const ImVec2 off_min, const ImVec2 off_max)
     * }
     */
    public static void ImGuiViewportP_CalcWorkRectSize(MemorySegment pOut, MemorySegment self, MemorySegment off_min, MemorySegment off_max) {
        var mh$ = ImGuiViewportP_CalcWorkRectSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewportP_CalcWorkRectSize", pOut, self, off_min, off_max);
            }
            mh$.invokeExact(pOut, self, off_min, off_max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewportP_UpdateWorkRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewportP_UpdateWorkRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_UpdateWorkRect(ImGuiViewportP *self)
     * }
     */
    public static FunctionDescriptor ImGuiViewportP_UpdateWorkRect$descriptor() {
        return ImGuiViewportP_UpdateWorkRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_UpdateWorkRect(ImGuiViewportP *self)
     * }
     */
    public static MethodHandle ImGuiViewportP_UpdateWorkRect$handle() {
        return ImGuiViewportP_UpdateWorkRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_UpdateWorkRect(ImGuiViewportP *self)
     * }
     */
    public static MemorySegment ImGuiViewportP_UpdateWorkRect$address() {
        return ImGuiViewportP_UpdateWorkRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewportP_UpdateWorkRect(ImGuiViewportP *self)
     * }
     */
    public static void ImGuiViewportP_UpdateWorkRect(MemorySegment self) {
        var mh$ = ImGuiViewportP_UpdateWorkRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewportP_UpdateWorkRect", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewportP_GetMainRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewportP_GetMainRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetMainRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static FunctionDescriptor ImGuiViewportP_GetMainRect$descriptor() {
        return ImGuiViewportP_GetMainRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetMainRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static MethodHandle ImGuiViewportP_GetMainRect$handle() {
        return ImGuiViewportP_GetMainRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetMainRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static MemorySegment ImGuiViewportP_GetMainRect$address() {
        return ImGuiViewportP_GetMainRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetMainRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static void ImGuiViewportP_GetMainRect(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImGuiViewportP_GetMainRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewportP_GetMainRect", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewportP_GetWorkRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewportP_GetWorkRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetWorkRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static FunctionDescriptor ImGuiViewportP_GetWorkRect$descriptor() {
        return ImGuiViewportP_GetWorkRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetWorkRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static MethodHandle ImGuiViewportP_GetWorkRect$handle() {
        return ImGuiViewportP_GetWorkRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetWorkRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static MemorySegment ImGuiViewportP_GetWorkRect$address() {
        return ImGuiViewportP_GetWorkRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetWorkRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static void ImGuiViewportP_GetWorkRect(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImGuiViewportP_GetWorkRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewportP_GetWorkRect", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiViewportP_GetBuildWorkRect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiViewportP_GetBuildWorkRect");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetBuildWorkRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static FunctionDescriptor ImGuiViewportP_GetBuildWorkRect$descriptor() {
        return ImGuiViewportP_GetBuildWorkRect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetBuildWorkRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static MethodHandle ImGuiViewportP_GetBuildWorkRect$handle() {
        return ImGuiViewportP_GetBuildWorkRect.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetBuildWorkRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static MemorySegment ImGuiViewportP_GetBuildWorkRect$address() {
        return ImGuiViewportP_GetBuildWorkRect.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiViewportP_GetBuildWorkRect(ImRect *pOut, ImGuiViewportP *self)
     * }
     */
    public static void ImGuiViewportP_GetBuildWorkRect(MemorySegment pOut, MemorySegment self) {
        var mh$ = ImGuiViewportP_GetBuildWorkRect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiViewportP_GetBuildWorkRect", pOut, self);
            }
            mh$.invokeExact(pOut, self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindowSettings_ImGuiWindowSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindowSettings_ImGuiWindowSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *ImGuiWindowSettings_ImGuiWindowSettings()
     * }
     */
    public static FunctionDescriptor ImGuiWindowSettings_ImGuiWindowSettings$descriptor() {
        return ImGuiWindowSettings_ImGuiWindowSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *ImGuiWindowSettings_ImGuiWindowSettings()
     * }
     */
    public static MethodHandle ImGuiWindowSettings_ImGuiWindowSettings$handle() {
        return ImGuiWindowSettings_ImGuiWindowSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *ImGuiWindowSettings_ImGuiWindowSettings()
     * }
     */
    public static MemorySegment ImGuiWindowSettings_ImGuiWindowSettings$address() {
        return ImGuiWindowSettings_ImGuiWindowSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiWindowSettings *ImGuiWindowSettings_ImGuiWindowSettings()
     * }
     */
    public static MemorySegment ImGuiWindowSettings_ImGuiWindowSettings() {
        var mh$ = ImGuiWindowSettings_ImGuiWindowSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindowSettings_ImGuiWindowSettings");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindowSettings_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindowSettings_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiWindowSettings_destroy(ImGuiWindowSettings *self)
     * }
     */
    public static FunctionDescriptor ImGuiWindowSettings_destroy$descriptor() {
        return ImGuiWindowSettings_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiWindowSettings_destroy(ImGuiWindowSettings *self)
     * }
     */
    public static MethodHandle ImGuiWindowSettings_destroy$handle() {
        return ImGuiWindowSettings_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiWindowSettings_destroy(ImGuiWindowSettings *self)
     * }
     */
    public static MemorySegment ImGuiWindowSettings_destroy$address() {
        return ImGuiWindowSettings_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiWindowSettings_destroy(ImGuiWindowSettings *self)
     * }
     */
    public static void ImGuiWindowSettings_destroy(MemorySegment self) {
        var mh$ = ImGuiWindowSettings_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindowSettings_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiWindowSettings_GetName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiWindowSettings_GetName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *ImGuiWindowSettings_GetName(ImGuiWindowSettings *self)
     * }
     */
    public static FunctionDescriptor ImGuiWindowSettings_GetName$descriptor() {
        return ImGuiWindowSettings_GetName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *ImGuiWindowSettings_GetName(ImGuiWindowSettings *self)
     * }
     */
    public static MethodHandle ImGuiWindowSettings_GetName$handle() {
        return ImGuiWindowSettings_GetName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern char *ImGuiWindowSettings_GetName(ImGuiWindowSettings *self)
     * }
     */
    public static MemorySegment ImGuiWindowSettings_GetName$address() {
        return ImGuiWindowSettings_GetName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern char *ImGuiWindowSettings_GetName(ImGuiWindowSettings *self)
     * }
     */
    public static MemorySegment ImGuiWindowSettings_GetName(MemorySegment self) {
        var mh$ = ImGuiWindowSettings_GetName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiWindowSettings_GetName", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSettingsHandler_ImGuiSettingsHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSettingsHandler_ImGuiSettingsHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiSettingsHandler *ImGuiSettingsHandler_ImGuiSettingsHandler()
     * }
     */
    public static FunctionDescriptor ImGuiSettingsHandler_ImGuiSettingsHandler$descriptor() {
        return ImGuiSettingsHandler_ImGuiSettingsHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiSettingsHandler *ImGuiSettingsHandler_ImGuiSettingsHandler()
     * }
     */
    public static MethodHandle ImGuiSettingsHandler_ImGuiSettingsHandler$handle() {
        return ImGuiSettingsHandler_ImGuiSettingsHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiSettingsHandler *ImGuiSettingsHandler_ImGuiSettingsHandler()
     * }
     */
    public static MemorySegment ImGuiSettingsHandler_ImGuiSettingsHandler$address() {
        return ImGuiSettingsHandler_ImGuiSettingsHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiSettingsHandler *ImGuiSettingsHandler_ImGuiSettingsHandler()
     * }
     */
    public static MemorySegment ImGuiSettingsHandler_ImGuiSettingsHandler() {
        var mh$ = ImGuiSettingsHandler_ImGuiSettingsHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSettingsHandler_ImGuiSettingsHandler");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiSettingsHandler_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiSettingsHandler_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler *self)
     * }
     */
    public static FunctionDescriptor ImGuiSettingsHandler_destroy$descriptor() {
        return ImGuiSettingsHandler_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler *self)
     * }
     */
    public static MethodHandle ImGuiSettingsHandler_destroy$handle() {
        return ImGuiSettingsHandler_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler *self)
     * }
     */
    public static MemorySegment ImGuiSettingsHandler_destroy$address() {
        return ImGuiSettingsHandler_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiSettingsHandler_destroy(ImGuiSettingsHandler *self)
     * }
     */
    public static void ImGuiSettingsHandler_destroy(MemorySegment self) {
        var mh$ = ImGuiSettingsHandler_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiSettingsHandler_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDebugAllocInfo_ImGuiDebugAllocInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDebugAllocInfo_ImGuiDebugAllocInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiDebugAllocInfo *ImGuiDebugAllocInfo_ImGuiDebugAllocInfo()
     * }
     */
    public static FunctionDescriptor ImGuiDebugAllocInfo_ImGuiDebugAllocInfo$descriptor() {
        return ImGuiDebugAllocInfo_ImGuiDebugAllocInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiDebugAllocInfo *ImGuiDebugAllocInfo_ImGuiDebugAllocInfo()
     * }
     */
    public static MethodHandle ImGuiDebugAllocInfo_ImGuiDebugAllocInfo$handle() {
        return ImGuiDebugAllocInfo_ImGuiDebugAllocInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiDebugAllocInfo *ImGuiDebugAllocInfo_ImGuiDebugAllocInfo()
     * }
     */
    public static MemorySegment ImGuiDebugAllocInfo_ImGuiDebugAllocInfo$address() {
        return ImGuiDebugAllocInfo_ImGuiDebugAllocInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiDebugAllocInfo *ImGuiDebugAllocInfo_ImGuiDebugAllocInfo()
     * }
     */
    public static MemorySegment ImGuiDebugAllocInfo_ImGuiDebugAllocInfo() {
        var mh$ = ImGuiDebugAllocInfo_ImGuiDebugAllocInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDebugAllocInfo_ImGuiDebugAllocInfo");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiDebugAllocInfo_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiDebugAllocInfo_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiDebugAllocInfo_destroy(ImGuiDebugAllocInfo *self)
     * }
     */
    public static FunctionDescriptor ImGuiDebugAllocInfo_destroy$descriptor() {
        return ImGuiDebugAllocInfo_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiDebugAllocInfo_destroy(ImGuiDebugAllocInfo *self)
     * }
     */
    public static MethodHandle ImGuiDebugAllocInfo_destroy$handle() {
        return ImGuiDebugAllocInfo_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiDebugAllocInfo_destroy(ImGuiDebugAllocInfo *self)
     * }
     */
    public static MemorySegment ImGuiDebugAllocInfo_destroy$address() {
        return ImGuiDebugAllocInfo_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiDebugAllocInfo_destroy(ImGuiDebugAllocInfo *self)
     * }
     */
    public static void ImGuiDebugAllocInfo_destroy(MemorySegment self) {
        var mh$ = ImGuiDebugAllocInfo_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiDebugAllocInfo_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStackLevelInfo_ImGuiStackLevelInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStackLevelInfo_ImGuiStackLevelInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiStackLevelInfo *ImGuiStackLevelInfo_ImGuiStackLevelInfo()
     * }
     */
    public static FunctionDescriptor ImGuiStackLevelInfo_ImGuiStackLevelInfo$descriptor() {
        return ImGuiStackLevelInfo_ImGuiStackLevelInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiStackLevelInfo *ImGuiStackLevelInfo_ImGuiStackLevelInfo()
     * }
     */
    public static MethodHandle ImGuiStackLevelInfo_ImGuiStackLevelInfo$handle() {
        return ImGuiStackLevelInfo_ImGuiStackLevelInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiStackLevelInfo *ImGuiStackLevelInfo_ImGuiStackLevelInfo()
     * }
     */
    public static MemorySegment ImGuiStackLevelInfo_ImGuiStackLevelInfo$address() {
        return ImGuiStackLevelInfo_ImGuiStackLevelInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiStackLevelInfo *ImGuiStackLevelInfo_ImGuiStackLevelInfo()
     * }
     */
    public static MemorySegment ImGuiStackLevelInfo_ImGuiStackLevelInfo() {
        var mh$ = ImGuiStackLevelInfo_ImGuiStackLevelInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStackLevelInfo_ImGuiStackLevelInfo");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiStackLevelInfo_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiStackLevelInfo_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiStackLevelInfo_destroy(ImGuiStackLevelInfo *self)
     * }
     */
    public static FunctionDescriptor ImGuiStackLevelInfo_destroy$descriptor() {
        return ImGuiStackLevelInfo_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiStackLevelInfo_destroy(ImGuiStackLevelInfo *self)
     * }
     */
    public static MethodHandle ImGuiStackLevelInfo_destroy$handle() {
        return ImGuiStackLevelInfo_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiStackLevelInfo_destroy(ImGuiStackLevelInfo *self)
     * }
     */
    public static MemorySegment ImGuiStackLevelInfo_destroy$address() {
        return ImGuiStackLevelInfo_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiStackLevelInfo_destroy(ImGuiStackLevelInfo *self)
     * }
     */
    public static void ImGuiStackLevelInfo_destroy(MemorySegment self) {
        var mh$ = ImGuiStackLevelInfo_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiStackLevelInfo_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIDStackTool_ImGuiIDStackTool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIDStackTool_ImGuiIDStackTool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiIDStackTool *ImGuiIDStackTool_ImGuiIDStackTool()
     * }
     */
    public static FunctionDescriptor ImGuiIDStackTool_ImGuiIDStackTool$descriptor() {
        return ImGuiIDStackTool_ImGuiIDStackTool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiIDStackTool *ImGuiIDStackTool_ImGuiIDStackTool()
     * }
     */
    public static MethodHandle ImGuiIDStackTool_ImGuiIDStackTool$handle() {
        return ImGuiIDStackTool_ImGuiIDStackTool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiIDStackTool *ImGuiIDStackTool_ImGuiIDStackTool()
     * }
     */
    public static MemorySegment ImGuiIDStackTool_ImGuiIDStackTool$address() {
        return ImGuiIDStackTool_ImGuiIDStackTool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiIDStackTool *ImGuiIDStackTool_ImGuiIDStackTool()
     * }
     */
    public static MemorySegment ImGuiIDStackTool_ImGuiIDStackTool() {
        var mh$ = ImGuiIDStackTool_ImGuiIDStackTool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIDStackTool_ImGuiIDStackTool");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiIDStackTool_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER
        );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiIDStackTool_destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ImGuiIDStackTool_destroy(ImGuiIDStackTool *self)
     * }
     */
    public static FunctionDescriptor ImGuiIDStackTool_destroy$descriptor() {
        return ImGuiIDStackTool_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ImGuiIDStackTool_destroy(ImGuiIDStackTool *self)
     * }
     */
    public static MethodHandle ImGuiIDStackTool_destroy$handle() {
        return ImGuiIDStackTool_destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ImGuiIDStackTool_destroy(ImGuiIDStackTool *self)
     * }
     */
    public static MemorySegment ImGuiIDStackTool_destroy$address() {
        return ImGuiIDStackTool_destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ImGuiIDStackTool_destroy(ImGuiIDStackTool *self)
     * }
     */
    public static void ImGuiIDStackTool_destroy(MemorySegment self) {
        var mh$ = ImGuiIDStackTool_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiIDStackTool_destroy", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ImGuiContextHook_ImGuiContextHook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            imgui.C_POINTER    );

        public static final MemorySegment ADDR = imgui.findOrThrow("ImGuiContextHook_ImGuiContextHook");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ImGuiContextHook *ImGuiContextHook_ImGuiContextHook()
     * }
     */
    public static FunctionDescriptor ImGuiContextHook_ImGuiContextHook$descriptor() {
        return ImGuiContextHook_ImGuiContextHook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ImGuiContextHook *ImGuiContextHook_ImGuiContextHook()
     * }
     */
    public static MethodHandle ImGuiContextHook_ImGuiContextHook$handle() {
        return ImGuiContextHook_ImGuiContextHook.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ImGuiContextHook *ImGuiContextHook_ImGuiContextHook()
     * }
     */
    public static MemorySegment ImGuiContextHook_ImGuiContextHook$address() {
        return ImGuiContextHook_ImGuiContextHook.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ImGuiContextHook *ImGuiContextHook_ImGuiContextHook()
     * }
     */
    public static MemorySegment ImGuiContextHook_ImGuiContextHook() {
        var mh$ = ImGuiContextHook_ImGuiContextHook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ImGuiContextHook_ImGuiContextHook");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

