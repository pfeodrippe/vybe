// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiTypingSelectState {
 *     ImGuiTypingSelectRequest Request;
 *     char SearchBuffer[64];
 *     ImGuiID FocusScope;
 *     int LastRequestFrame;
 *     float LastRequestTime;
 *     bool SingleCharModeLock;
 * }
 * }
 */
public class ImGuiTypingSelectState {

    ImGuiTypingSelectState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImGuiTypingSelectRequest.layout().withName("Request"),
        MemoryLayout.sequenceLayout(64, imgui.C_CHAR).withName("SearchBuffer"),
        imgui.C_INT.withName("FocusScope"),
        imgui.C_INT.withName("LastRequestFrame"),
        imgui.C_FLOAT.withName("LastRequestTime"),
        imgui.C_BOOL.withName("SingleCharModeLock"),
        MemoryLayout.paddingLayout(3)
    ).withName("ImGuiTypingSelectState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout Request$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Request"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTypingSelectRequest Request
     * }
     */
    public static final GroupLayout Request$layout() {
        return Request$LAYOUT;
    }

    private static final long Request$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTypingSelectRequest Request
     * }
     */
    public static final long Request$offset() {
        return Request$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTypingSelectRequest Request
     * }
     */
    public static MemorySegment Request(MemorySegment struct) {
        return struct.asSlice(Request$OFFSET, Request$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTypingSelectRequest Request
     * }
     */
    public static void Request(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Request$OFFSET, Request$LAYOUT.byteSize());
    }

    private static final SequenceLayout SearchBuffer$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SearchBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char SearchBuffer[64]
     * }
     */
    public static final SequenceLayout SearchBuffer$layout() {
        return SearchBuffer$LAYOUT;
    }

    private static final long SearchBuffer$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char SearchBuffer[64]
     * }
     */
    public static final long SearchBuffer$offset() {
        return SearchBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char SearchBuffer[64]
     * }
     */
    public static MemorySegment SearchBuffer(MemorySegment struct) {
        return struct.asSlice(SearchBuffer$OFFSET, SearchBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char SearchBuffer[64]
     * }
     */
    public static void SearchBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SearchBuffer$OFFSET, SearchBuffer$LAYOUT.byteSize());
    }

    private static long[] SearchBuffer$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char SearchBuffer[64]
     * }
     */
    public static long[] SearchBuffer$dimensions() {
        return SearchBuffer$DIMS;
    }
    private static final VarHandle SearchBuffer$ELEM_HANDLE = SearchBuffer$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char SearchBuffer[64]
     * }
     */
    public static byte SearchBuffer(MemorySegment struct, long index0) {
        return (byte)SearchBuffer$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char SearchBuffer[64]
     * }
     */
    public static void SearchBuffer(MemorySegment struct, long index0, byte fieldValue) {
        SearchBuffer$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt FocusScope$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FocusScope"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID FocusScope
     * }
     */
    public static final OfInt FocusScope$layout() {
        return FocusScope$LAYOUT;
    }

    private static final long FocusScope$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID FocusScope
     * }
     */
    public static final long FocusScope$offset() {
        return FocusScope$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID FocusScope
     * }
     */
    public static int FocusScope(MemorySegment struct) {
        return struct.get(FocusScope$LAYOUT, FocusScope$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID FocusScope
     * }
     */
    public static void FocusScope(MemorySegment struct, int fieldValue) {
        struct.set(FocusScope$LAYOUT, FocusScope$OFFSET, fieldValue);
    }

    private static final OfInt LastRequestFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastRequestFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastRequestFrame
     * }
     */
    public static final OfInt LastRequestFrame$layout() {
        return LastRequestFrame$LAYOUT;
    }

    private static final long LastRequestFrame$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastRequestFrame
     * }
     */
    public static final long LastRequestFrame$offset() {
        return LastRequestFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastRequestFrame
     * }
     */
    public static int LastRequestFrame(MemorySegment struct) {
        return struct.get(LastRequestFrame$LAYOUT, LastRequestFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastRequestFrame
     * }
     */
    public static void LastRequestFrame(MemorySegment struct, int fieldValue) {
        struct.set(LastRequestFrame$LAYOUT, LastRequestFrame$OFFSET, fieldValue);
    }

    private static final OfFloat LastRequestTime$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("LastRequestTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float LastRequestTime
     * }
     */
    public static final OfFloat LastRequestTime$layout() {
        return LastRequestTime$LAYOUT;
    }

    private static final long LastRequestTime$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float LastRequestTime
     * }
     */
    public static final long LastRequestTime$offset() {
        return LastRequestTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float LastRequestTime
     * }
     */
    public static float LastRequestTime(MemorySegment struct) {
        return struct.get(LastRequestTime$LAYOUT, LastRequestTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float LastRequestTime
     * }
     */
    public static void LastRequestTime(MemorySegment struct, float fieldValue) {
        struct.set(LastRequestTime$LAYOUT, LastRequestTime$OFFSET, fieldValue);
    }

    private static final OfBoolean SingleCharModeLock$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("SingleCharModeLock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool SingleCharModeLock
     * }
     */
    public static final OfBoolean SingleCharModeLock$layout() {
        return SingleCharModeLock$LAYOUT;
    }

    private static final long SingleCharModeLock$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool SingleCharModeLock
     * }
     */
    public static final long SingleCharModeLock$offset() {
        return SingleCharModeLock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool SingleCharModeLock
     * }
     */
    public static boolean SingleCharModeLock(MemorySegment struct) {
        return struct.get(SingleCharModeLock$LAYOUT, SingleCharModeLock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool SingleCharModeLock
     * }
     */
    public static void SingleCharModeLock(MemorySegment struct, boolean fieldValue) {
        struct.set(SingleCharModeLock$LAYOUT, SingleCharModeLock$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

