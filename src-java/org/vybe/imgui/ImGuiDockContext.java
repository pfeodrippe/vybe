// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiDockContext {
 *     ImGuiStorage Nodes;
 *     ImVector_ImGuiDockRequest Requests;
 *     ImVector_ImGuiDockNodeSettings NodesSettings;
 *     bool WantFullRebuild;
 * }
 * }
 */
public class ImGuiDockContext {

    ImGuiDockContext() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImGuiStorage.layout().withName("Nodes"),
        ImVector_ImGuiDockRequest.layout().withName("Requests"),
        ImVector_ImGuiDockNodeSettings.layout().withName("NodesSettings"),
        imgui.C_BOOL.withName("WantFullRebuild"),
        MemoryLayout.paddingLayout(7)
    ).withName("ImGuiDockContext");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout Nodes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Nodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiStorage Nodes
     * }
     */
    public static final GroupLayout Nodes$layout() {
        return Nodes$LAYOUT;
    }

    private static final long Nodes$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiStorage Nodes
     * }
     */
    public static final long Nodes$offset() {
        return Nodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiStorage Nodes
     * }
     */
    public static MemorySegment Nodes(MemorySegment struct) {
        return struct.asSlice(Nodes$OFFSET, Nodes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiStorage Nodes
     * }
     */
    public static void Nodes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Nodes$OFFSET, Nodes$LAYOUT.byteSize());
    }

    private static final GroupLayout Requests$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Requests"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiDockRequest Requests
     * }
     */
    public static final GroupLayout Requests$layout() {
        return Requests$LAYOUT;
    }

    private static final long Requests$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiDockRequest Requests
     * }
     */
    public static final long Requests$offset() {
        return Requests$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiDockRequest Requests
     * }
     */
    public static MemorySegment Requests(MemorySegment struct) {
        return struct.asSlice(Requests$OFFSET, Requests$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiDockRequest Requests
     * }
     */
    public static void Requests(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Requests$OFFSET, Requests$LAYOUT.byteSize());
    }

    private static final GroupLayout NodesSettings$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NodesSettings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiDockNodeSettings NodesSettings
     * }
     */
    public static final GroupLayout NodesSettings$layout() {
        return NodesSettings$LAYOUT;
    }

    private static final long NodesSettings$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiDockNodeSettings NodesSettings
     * }
     */
    public static final long NodesSettings$offset() {
        return NodesSettings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiDockNodeSettings NodesSettings
     * }
     */
    public static MemorySegment NodesSettings(MemorySegment struct) {
        return struct.asSlice(NodesSettings$OFFSET, NodesSettings$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiDockNodeSettings NodesSettings
     * }
     */
    public static void NodesSettings(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NodesSettings$OFFSET, NodesSettings$LAYOUT.byteSize());
    }

    private static final OfBoolean WantFullRebuild$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantFullRebuild"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantFullRebuild
     * }
     */
    public static final OfBoolean WantFullRebuild$layout() {
        return WantFullRebuild$LAYOUT;
    }

    private static final long WantFullRebuild$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantFullRebuild
     * }
     */
    public static final long WantFullRebuild$offset() {
        return WantFullRebuild$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantFullRebuild
     * }
     */
    public static boolean WantFullRebuild(MemorySegment struct) {
        return struct.get(WantFullRebuild$LAYOUT, WantFullRebuild$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantFullRebuild
     * }
     */
    public static void WantFullRebuild(MemorySegment struct, boolean fieldValue) {
        struct.set(WantFullRebuild$LAYOUT, WantFullRebuild$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

