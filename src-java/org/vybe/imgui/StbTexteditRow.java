// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StbTexteditRow {
 *     float x0;
 *     float x1;
 *     float baseline_y_delta;
 *     float ymin;
 *     float ymax;
 *     int num_chars;
 * }
 * }
 */
public class StbTexteditRow {

    StbTexteditRow() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_FLOAT.withName("x0"),
        imgui.C_FLOAT.withName("x1"),
        imgui.C_FLOAT.withName("baseline_y_delta"),
        imgui.C_FLOAT.withName("ymin"),
        imgui.C_FLOAT.withName("ymax"),
        imgui.C_INT.withName("num_chars")
    ).withName("StbTexteditRow");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat x0$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("x0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float x0
     * }
     */
    public static final OfFloat x0$layout() {
        return x0$LAYOUT;
    }

    private static final long x0$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float x0
     * }
     */
    public static final long x0$offset() {
        return x0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float x0
     * }
     */
    public static float x0(MemorySegment struct) {
        return struct.get(x0$LAYOUT, x0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float x0
     * }
     */
    public static void x0(MemorySegment struct, float fieldValue) {
        struct.set(x0$LAYOUT, x0$OFFSET, fieldValue);
    }

    private static final OfFloat x1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("x1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float x1
     * }
     */
    public static final OfFloat x1$layout() {
        return x1$LAYOUT;
    }

    private static final long x1$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float x1
     * }
     */
    public static final long x1$offset() {
        return x1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float x1
     * }
     */
    public static float x1(MemorySegment struct) {
        return struct.get(x1$LAYOUT, x1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float x1
     * }
     */
    public static void x1(MemorySegment struct, float fieldValue) {
        struct.set(x1$LAYOUT, x1$OFFSET, fieldValue);
    }

    private static final OfFloat baseline_y_delta$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("baseline_y_delta"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float baseline_y_delta
     * }
     */
    public static final OfFloat baseline_y_delta$layout() {
        return baseline_y_delta$LAYOUT;
    }

    private static final long baseline_y_delta$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float baseline_y_delta
     * }
     */
    public static final long baseline_y_delta$offset() {
        return baseline_y_delta$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float baseline_y_delta
     * }
     */
    public static float baseline_y_delta(MemorySegment struct) {
        return struct.get(baseline_y_delta$LAYOUT, baseline_y_delta$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float baseline_y_delta
     * }
     */
    public static void baseline_y_delta(MemorySegment struct, float fieldValue) {
        struct.set(baseline_y_delta$LAYOUT, baseline_y_delta$OFFSET, fieldValue);
    }

    private static final OfFloat ymin$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ymin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ymin
     * }
     */
    public static final OfFloat ymin$layout() {
        return ymin$LAYOUT;
    }

    private static final long ymin$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ymin
     * }
     */
    public static final long ymin$offset() {
        return ymin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ymin
     * }
     */
    public static float ymin(MemorySegment struct) {
        return struct.get(ymin$LAYOUT, ymin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ymin
     * }
     */
    public static void ymin(MemorySegment struct, float fieldValue) {
        struct.set(ymin$LAYOUT, ymin$OFFSET, fieldValue);
    }

    private static final OfFloat ymax$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ymax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ymax
     * }
     */
    public static final OfFloat ymax$layout() {
        return ymax$LAYOUT;
    }

    private static final long ymax$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ymax
     * }
     */
    public static final long ymax$offset() {
        return ymax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ymax
     * }
     */
    public static float ymax(MemorySegment struct) {
        return struct.get(ymax$LAYOUT, ymax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ymax
     * }
     */
    public static void ymax(MemorySegment struct, float fieldValue) {
        struct.set(ymax$LAYOUT, ymax$OFFSET, fieldValue);
    }

    private static final OfInt num_chars$LAYOUT = (OfInt)$LAYOUT.select(groupElement("num_chars"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int num_chars
     * }
     */
    public static final OfInt num_chars$layout() {
        return num_chars$LAYOUT;
    }

    private static final long num_chars$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int num_chars
     * }
     */
    public static final long num_chars$offset() {
        return num_chars$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int num_chars
     * }
     */
    public static int num_chars(MemorySegment struct) {
        return struct.get(num_chars$LAYOUT, num_chars$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int num_chars
     * }
     */
    public static void num_chars(MemorySegment struct, int fieldValue) {
        struct.set(num_chars$LAYOUT, num_chars$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

