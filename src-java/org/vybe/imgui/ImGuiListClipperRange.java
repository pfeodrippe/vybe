// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiListClipperRange {
 *     int Min;
 *     int Max;
 *     bool PosToIndexConvert;
 *     ImS8 PosToIndexOffsetMin;
 *     ImS8 PosToIndexOffsetMax;
 * }
 * }
 */
public class ImGuiListClipperRange {

    ImGuiListClipperRange() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("Min"),
        imgui.C_INT.withName("Max"),
        imgui.C_BOOL.withName("PosToIndexConvert"),
        imgui.C_CHAR.withName("PosToIndexOffsetMin"),
        imgui.C_CHAR.withName("PosToIndexOffsetMax"),
        MemoryLayout.paddingLayout(1)
    ).withName("ImGuiListClipperRange");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Min$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Min"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Min
     * }
     */
    public static final OfInt Min$layout() {
        return Min$LAYOUT;
    }

    private static final long Min$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Min
     * }
     */
    public static final long Min$offset() {
        return Min$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Min
     * }
     */
    public static int Min(MemorySegment struct) {
        return struct.get(Min$LAYOUT, Min$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Min
     * }
     */
    public static void Min(MemorySegment struct, int fieldValue) {
        struct.set(Min$LAYOUT, Min$OFFSET, fieldValue);
    }

    private static final OfInt Max$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Max"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Max
     * }
     */
    public static final OfInt Max$layout() {
        return Max$LAYOUT;
    }

    private static final long Max$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Max
     * }
     */
    public static final long Max$offset() {
        return Max$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Max
     * }
     */
    public static int Max(MemorySegment struct) {
        return struct.get(Max$LAYOUT, Max$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Max
     * }
     */
    public static void Max(MemorySegment struct, int fieldValue) {
        struct.set(Max$LAYOUT, Max$OFFSET, fieldValue);
    }

    private static final OfBoolean PosToIndexConvert$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("PosToIndexConvert"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool PosToIndexConvert
     * }
     */
    public static final OfBoolean PosToIndexConvert$layout() {
        return PosToIndexConvert$LAYOUT;
    }

    private static final long PosToIndexConvert$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool PosToIndexConvert
     * }
     */
    public static final long PosToIndexConvert$offset() {
        return PosToIndexConvert$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool PosToIndexConvert
     * }
     */
    public static boolean PosToIndexConvert(MemorySegment struct) {
        return struct.get(PosToIndexConvert$LAYOUT, PosToIndexConvert$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool PosToIndexConvert
     * }
     */
    public static void PosToIndexConvert(MemorySegment struct, boolean fieldValue) {
        struct.set(PosToIndexConvert$LAYOUT, PosToIndexConvert$OFFSET, fieldValue);
    }

    private static final OfByte PosToIndexOffsetMin$LAYOUT = (OfByte)$LAYOUT.select(groupElement("PosToIndexOffsetMin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 PosToIndexOffsetMin
     * }
     */
    public static final OfByte PosToIndexOffsetMin$layout() {
        return PosToIndexOffsetMin$LAYOUT;
    }

    private static final long PosToIndexOffsetMin$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 PosToIndexOffsetMin
     * }
     */
    public static final long PosToIndexOffsetMin$offset() {
        return PosToIndexOffsetMin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 PosToIndexOffsetMin
     * }
     */
    public static byte PosToIndexOffsetMin(MemorySegment struct) {
        return struct.get(PosToIndexOffsetMin$LAYOUT, PosToIndexOffsetMin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 PosToIndexOffsetMin
     * }
     */
    public static void PosToIndexOffsetMin(MemorySegment struct, byte fieldValue) {
        struct.set(PosToIndexOffsetMin$LAYOUT, PosToIndexOffsetMin$OFFSET, fieldValue);
    }

    private static final OfByte PosToIndexOffsetMax$LAYOUT = (OfByte)$LAYOUT.select(groupElement("PosToIndexOffsetMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 PosToIndexOffsetMax
     * }
     */
    public static final OfByte PosToIndexOffsetMax$layout() {
        return PosToIndexOffsetMax$LAYOUT;
    }

    private static final long PosToIndexOffsetMax$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 PosToIndexOffsetMax
     * }
     */
    public static final long PosToIndexOffsetMax$offset() {
        return PosToIndexOffsetMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 PosToIndexOffsetMax
     * }
     */
    public static byte PosToIndexOffsetMax(MemorySegment struct) {
        return struct.get(PosToIndexOffsetMax$LAYOUT, PosToIndexOffsetMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 PosToIndexOffsetMax
     * }
     */
    public static void PosToIndexOffsetMax(MemorySegment struct, byte fieldValue) {
        struct.set(PosToIndexOffsetMax$LAYOUT, PosToIndexOffsetMax$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

