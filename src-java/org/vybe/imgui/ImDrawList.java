// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImDrawList {
 *     ImVector_ImDrawCmd CmdBuffer;
 *     ImVector_ImDrawIdx IdxBuffer;
 *     ImVector_ImDrawVert VtxBuffer;
 *     ImDrawListFlags Flags;
 *     unsigned int _VtxCurrentIdx;
 *     ImDrawListSharedData *_Data;
 *     ImDrawVert *_VtxWritePtr;
 *     ImDrawIdx *_IdxWritePtr;
 *     ImVector_ImVec2 _Path;
 *     ImDrawCmdHeader _CmdHeader;
 *     ImDrawListSplitter _Splitter;
 *     ImVector_ImVec4 _ClipRectStack;
 *     ImVector_ImTextureID _TextureIdStack;
 *     float _FringeScale;
 *     const char *_OwnerName;
 * }
 * }
 */
public class ImDrawList {

    ImDrawList() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImVector_ImDrawCmd.layout().withName("CmdBuffer"),
        ImVector_ImDrawIdx.layout().withName("IdxBuffer"),
        ImVector_ImDrawVert.layout().withName("VtxBuffer"),
        imgui.C_INT.withName("Flags"),
        imgui.C_INT.withName("_VtxCurrentIdx"),
        imgui.C_POINTER.withName("_Data"),
        imgui.C_POINTER.withName("_VtxWritePtr"),
        imgui.C_POINTER.withName("_IdxWritePtr"),
        ImVector_ImVec2.layout().withName("_Path"),
        ImDrawCmdHeader.layout().withName("_CmdHeader"),
        ImDrawListSplitter.layout().withName("_Splitter"),
        ImVector_ImVec4.layout().withName("_ClipRectStack"),
        ImVector_ImTextureID.layout().withName("_TextureIdStack"),
        imgui.C_FLOAT.withName("_FringeScale"),
        MemoryLayout.paddingLayout(4),
        imgui.C_POINTER.withName("_OwnerName")
    ).withName("ImDrawList");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout CmdBuffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CmdBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImDrawCmd CmdBuffer
     * }
     */
    public static final GroupLayout CmdBuffer$layout() {
        return CmdBuffer$LAYOUT;
    }

    private static final long CmdBuffer$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImDrawCmd CmdBuffer
     * }
     */
    public static final long CmdBuffer$offset() {
        return CmdBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImDrawCmd CmdBuffer
     * }
     */
    public static MemorySegment CmdBuffer(MemorySegment struct) {
        return struct.asSlice(CmdBuffer$OFFSET, CmdBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImDrawCmd CmdBuffer
     * }
     */
    public static void CmdBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CmdBuffer$OFFSET, CmdBuffer$LAYOUT.byteSize());
    }

    private static final GroupLayout IdxBuffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IdxBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImDrawIdx IdxBuffer
     * }
     */
    public static final GroupLayout IdxBuffer$layout() {
        return IdxBuffer$LAYOUT;
    }

    private static final long IdxBuffer$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImDrawIdx IdxBuffer
     * }
     */
    public static final long IdxBuffer$offset() {
        return IdxBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImDrawIdx IdxBuffer
     * }
     */
    public static MemorySegment IdxBuffer(MemorySegment struct) {
        return struct.asSlice(IdxBuffer$OFFSET, IdxBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImDrawIdx IdxBuffer
     * }
     */
    public static void IdxBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, IdxBuffer$OFFSET, IdxBuffer$LAYOUT.byteSize());
    }

    private static final GroupLayout VtxBuffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("VtxBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImDrawVert VtxBuffer
     * }
     */
    public static final GroupLayout VtxBuffer$layout() {
        return VtxBuffer$LAYOUT;
    }

    private static final long VtxBuffer$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImDrawVert VtxBuffer
     * }
     */
    public static final long VtxBuffer$offset() {
        return VtxBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImDrawVert VtxBuffer
     * }
     */
    public static MemorySegment VtxBuffer(MemorySegment struct) {
        return struct.asSlice(VtxBuffer$OFFSET, VtxBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImDrawVert VtxBuffer
     * }
     */
    public static void VtxBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, VtxBuffer$OFFSET, VtxBuffer$LAYOUT.byteSize());
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawListFlags Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawListFlags Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawListFlags Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawListFlags Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfInt _VtxCurrentIdx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_VtxCurrentIdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int _VtxCurrentIdx
     * }
     */
    public static final OfInt _VtxCurrentIdx$layout() {
        return _VtxCurrentIdx$LAYOUT;
    }

    private static final long _VtxCurrentIdx$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int _VtxCurrentIdx
     * }
     */
    public static final long _VtxCurrentIdx$offset() {
        return _VtxCurrentIdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int _VtxCurrentIdx
     * }
     */
    public static int _VtxCurrentIdx(MemorySegment struct) {
        return struct.get(_VtxCurrentIdx$LAYOUT, _VtxCurrentIdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int _VtxCurrentIdx
     * }
     */
    public static void _VtxCurrentIdx(MemorySegment struct, int fieldValue) {
        struct.set(_VtxCurrentIdx$LAYOUT, _VtxCurrentIdx$OFFSET, fieldValue);
    }

    private static final AddressLayout _Data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_Data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawListSharedData *_Data
     * }
     */
    public static final AddressLayout _Data$layout() {
        return _Data$LAYOUT;
    }

    private static final long _Data$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawListSharedData *_Data
     * }
     */
    public static final long _Data$offset() {
        return _Data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawListSharedData *_Data
     * }
     */
    public static MemorySegment _Data(MemorySegment struct) {
        return struct.get(_Data$LAYOUT, _Data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawListSharedData *_Data
     * }
     */
    public static void _Data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_Data$LAYOUT, _Data$OFFSET, fieldValue);
    }

    private static final AddressLayout _VtxWritePtr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_VtxWritePtr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawVert *_VtxWritePtr
     * }
     */
    public static final AddressLayout _VtxWritePtr$layout() {
        return _VtxWritePtr$LAYOUT;
    }

    private static final long _VtxWritePtr$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawVert *_VtxWritePtr
     * }
     */
    public static final long _VtxWritePtr$offset() {
        return _VtxWritePtr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawVert *_VtxWritePtr
     * }
     */
    public static MemorySegment _VtxWritePtr(MemorySegment struct) {
        return struct.get(_VtxWritePtr$LAYOUT, _VtxWritePtr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawVert *_VtxWritePtr
     * }
     */
    public static void _VtxWritePtr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_VtxWritePtr$LAYOUT, _VtxWritePtr$OFFSET, fieldValue);
    }

    private static final AddressLayout _IdxWritePtr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_IdxWritePtr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawIdx *_IdxWritePtr
     * }
     */
    public static final AddressLayout _IdxWritePtr$layout() {
        return _IdxWritePtr$LAYOUT;
    }

    private static final long _IdxWritePtr$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawIdx *_IdxWritePtr
     * }
     */
    public static final long _IdxWritePtr$offset() {
        return _IdxWritePtr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawIdx *_IdxWritePtr
     * }
     */
    public static MemorySegment _IdxWritePtr(MemorySegment struct) {
        return struct.get(_IdxWritePtr$LAYOUT, _IdxWritePtr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawIdx *_IdxWritePtr
     * }
     */
    public static void _IdxWritePtr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_IdxWritePtr$LAYOUT, _IdxWritePtr$OFFSET, fieldValue);
    }

    private static final GroupLayout _Path$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_Path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImVec2 _Path
     * }
     */
    public static final GroupLayout _Path$layout() {
        return _Path$LAYOUT;
    }

    private static final long _Path$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImVec2 _Path
     * }
     */
    public static final long _Path$offset() {
        return _Path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImVec2 _Path
     * }
     */
    public static MemorySegment _Path(MemorySegment struct) {
        return struct.asSlice(_Path$OFFSET, _Path$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImVec2 _Path
     * }
     */
    public static void _Path(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _Path$OFFSET, _Path$LAYOUT.byteSize());
    }

    private static final GroupLayout _CmdHeader$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_CmdHeader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawCmdHeader _CmdHeader
     * }
     */
    public static final GroupLayout _CmdHeader$layout() {
        return _CmdHeader$LAYOUT;
    }

    private static final long _CmdHeader$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawCmdHeader _CmdHeader
     * }
     */
    public static final long _CmdHeader$offset() {
        return _CmdHeader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawCmdHeader _CmdHeader
     * }
     */
    public static MemorySegment _CmdHeader(MemorySegment struct) {
        return struct.asSlice(_CmdHeader$OFFSET, _CmdHeader$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawCmdHeader _CmdHeader
     * }
     */
    public static void _CmdHeader(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _CmdHeader$OFFSET, _CmdHeader$LAYOUT.byteSize());
    }

    private static final GroupLayout _Splitter$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_Splitter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawListSplitter _Splitter
     * }
     */
    public static final GroupLayout _Splitter$layout() {
        return _Splitter$LAYOUT;
    }

    private static final long _Splitter$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawListSplitter _Splitter
     * }
     */
    public static final long _Splitter$offset() {
        return _Splitter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawListSplitter _Splitter
     * }
     */
    public static MemorySegment _Splitter(MemorySegment struct) {
        return struct.asSlice(_Splitter$OFFSET, _Splitter$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawListSplitter _Splitter
     * }
     */
    public static void _Splitter(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _Splitter$OFFSET, _Splitter$LAYOUT.byteSize());
    }

    private static final GroupLayout _ClipRectStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_ClipRectStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImVec4 _ClipRectStack
     * }
     */
    public static final GroupLayout _ClipRectStack$layout() {
        return _ClipRectStack$LAYOUT;
    }

    private static final long _ClipRectStack$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImVec4 _ClipRectStack
     * }
     */
    public static final long _ClipRectStack$offset() {
        return _ClipRectStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImVec4 _ClipRectStack
     * }
     */
    public static MemorySegment _ClipRectStack(MemorySegment struct) {
        return struct.asSlice(_ClipRectStack$OFFSET, _ClipRectStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImVec4 _ClipRectStack
     * }
     */
    public static void _ClipRectStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _ClipRectStack$OFFSET, _ClipRectStack$LAYOUT.byteSize());
    }

    private static final GroupLayout _TextureIdStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_TextureIdStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImTextureID _TextureIdStack
     * }
     */
    public static final GroupLayout _TextureIdStack$layout() {
        return _TextureIdStack$LAYOUT;
    }

    private static final long _TextureIdStack$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImTextureID _TextureIdStack
     * }
     */
    public static final long _TextureIdStack$offset() {
        return _TextureIdStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImTextureID _TextureIdStack
     * }
     */
    public static MemorySegment _TextureIdStack(MemorySegment struct) {
        return struct.asSlice(_TextureIdStack$OFFSET, _TextureIdStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImTextureID _TextureIdStack
     * }
     */
    public static void _TextureIdStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _TextureIdStack$OFFSET, _TextureIdStack$LAYOUT.byteSize());
    }

    private static final OfFloat _FringeScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("_FringeScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float _FringeScale
     * }
     */
    public static final OfFloat _FringeScale$layout() {
        return _FringeScale$LAYOUT;
    }

    private static final long _FringeScale$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float _FringeScale
     * }
     */
    public static final long _FringeScale$offset() {
        return _FringeScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float _FringeScale
     * }
     */
    public static float _FringeScale(MemorySegment struct) {
        return struct.get(_FringeScale$LAYOUT, _FringeScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float _FringeScale
     * }
     */
    public static void _FringeScale(MemorySegment struct, float fieldValue) {
        struct.set(_FringeScale$LAYOUT, _FringeScale$OFFSET, fieldValue);
    }

    private static final AddressLayout _OwnerName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_OwnerName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *_OwnerName
     * }
     */
    public static final AddressLayout _OwnerName$layout() {
        return _OwnerName$LAYOUT;
    }

    private static final long _OwnerName$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *_OwnerName
     * }
     */
    public static final long _OwnerName$offset() {
        return _OwnerName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *_OwnerName
     * }
     */
    public static MemorySegment _OwnerName(MemorySegment struct) {
        return struct.get(_OwnerName$LAYOUT, _OwnerName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *_OwnerName
     * }
     */
    public static void _OwnerName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_OwnerName$LAYOUT, _OwnerName$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

