// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiContext {
 *     bool Initialized;
 *     bool FontAtlasOwnedByContext;
 *     ImGuiIO IO;
 *     ImGuiPlatformIO PlatformIO;
 *     ImGuiStyle Style;
 *     ImGuiConfigFlags ConfigFlagsCurrFrame;
 *     ImGuiConfigFlags ConfigFlagsLastFrame;
 *     ImFont *Font;
 *     float FontSize;
 *     float FontBaseSize;
 *     float FontScale;
 *     float CurrentDpiScale;
 *     ImDrawListSharedData DrawListSharedData;
 *     double Time;
 *     int FrameCount;
 *     int FrameCountEnded;
 *     int FrameCountPlatformEnded;
 *     int FrameCountRendered;
 *     bool WithinFrameScope;
 *     bool WithinFrameScopeWithImplicitWindow;
 *     bool WithinEndChild;
 *     bool GcCompactAll;
 *     bool TestEngineHookItems;
 *     void *TestEngine;
 *     char ContextName[16];
 *     ImVector_ImGuiInputEvent InputEventsQueue;
 *     ImVector_ImGuiInputEvent InputEventsTrail;
 *     ImGuiMouseSource InputEventsNextMouseSource;
 *     ImU32 InputEventsNextEventId;
 *     ImVector_ImGuiWindowPtr Windows;
 *     ImVector_ImGuiWindowPtr WindowsFocusOrder;
 *     ImVector_ImGuiWindowPtr WindowsTempSortBuffer;
 *     ImVector_ImGuiWindowStackData CurrentWindowStack;
 *     ImGuiStorage WindowsById;
 *     int WindowsActiveCount;
 *     ImVec2 WindowsHoverPadding;
 *     ImGuiID DebugBreakInWindow;
 *     ImGuiWindow *CurrentWindow;
 *     ImGuiWindow *HoveredWindow;
 *     ImGuiWindow *HoveredWindowUnderMovingWindow;
 *     ImGuiWindow *HoveredWindowBeforeClear;
 *     ImGuiWindow *MovingWindow;
 *     ImGuiWindow *WheelingWindow;
 *     ImVec2 WheelingWindowRefMousePos;
 *     int WheelingWindowStartFrame;
 *     int WheelingWindowScrolledFrame;
 *     float WheelingWindowReleaseTimer;
 *     ImVec2 WheelingWindowWheelRemainder;
 *     ImVec2 WheelingAxisAvg;
 *     ImGuiID DebugHookIdInfo;
 *     ImGuiID HoveredId;
 *     ImGuiID HoveredIdPreviousFrame;
 *     float HoveredIdTimer;
 *     float HoveredIdNotActiveTimer;
 *     bool HoveredIdAllowOverlap;
 *     bool HoveredIdIsDisabled;
 *     bool ItemUnclipByLog;
 *     ImGuiID ActiveId;
 *     ImGuiID ActiveIdIsAlive;
 *     float ActiveIdTimer;
 *     bool ActiveIdIsJustActivated;
 *     bool ActiveIdAllowOverlap;
 *     bool ActiveIdNoClearOnFocusLoss;
 *     bool ActiveIdHasBeenPressedBefore;
 *     bool ActiveIdHasBeenEditedBefore;
 *     bool ActiveIdHasBeenEditedThisFrame;
 *     bool ActiveIdFromShortcut;
 *     int ActiveIdMouseButton : 8;
 *     ImVec2 ActiveIdClickOffset;
 *     ImGuiWindow *ActiveIdWindow;
 *     ImGuiInputSource ActiveIdSource;
 *     ImGuiID ActiveIdPreviousFrame;
 *     bool ActiveIdPreviousFrameIsAlive;
 *     bool ActiveIdPreviousFrameHasBeenEditedBefore;
 *     ImGuiWindow *ActiveIdPreviousFrameWindow;
 *     ImGuiID LastActiveId;
 *     float LastActiveIdTimer;
 *     double LastKeyModsChangeTime;
 *     double LastKeyModsChangeFromNoneTime;
 *     double LastKeyboardKeyPressTime;
 *     ImBitArrayForNamedKeys KeysMayBeCharInput;
 *     ImGuiKeyOwnerData KeysOwnerData[154];
 *     ImGuiKeyRoutingTable KeysRoutingTable;
 *     ImU32 ActiveIdUsingNavDirMask;
 *     bool ActiveIdUsingAllKeyboardKeys;
 *     ImGuiKeyChord DebugBreakInShortcutRouting;
 *     ImGuiID CurrentFocusScopeId;
 *     ImGuiItemFlags CurrentItemFlags;
 *     ImGuiID DebugLocateId;
 *     ImGuiNextItemData NextItemData;
 *     ImGuiLastItemData LastItemData;
 *     ImGuiNextWindowData NextWindowData;
 *     bool DebugShowGroupRects;
 *     ImGuiCol DebugFlashStyleColorIdx;
 *     ImVector_ImGuiColorMod ColorStack;
 *     ImVector_ImGuiStyleMod StyleVarStack;
 *     ImVector_ImFontPtr FontStack;
 *     ImVector_ImGuiFocusScopeData FocusScopeStack;
 *     ImVector_ImGuiItemFlags ItemFlagsStack;
 *     ImVector_ImGuiGroupData GroupStack;
 *     ImVector_ImGuiPopupData OpenPopupStack;
 *     ImVector_ImGuiPopupData BeginPopupStack;
 *     ImVector_ImGuiTreeNodeStackData TreeNodeStack;
 *     ImVector_ImGuiViewportPPtr Viewports;
 *     ImGuiViewportP *CurrentViewport;
 *     ImGuiViewportP *MouseViewport;
 *     ImGuiViewportP *MouseLastHoveredViewport;
 *     ImGuiID PlatformLastFocusedViewportId;
 *     ImGuiPlatformMonitor FallbackMonitor;
 *     ImRect PlatformMonitorsFullWorkRect;
 *     int ViewportCreatedCount;
 *     int PlatformWindowsCreatedCount;
 *     int ViewportFocusedStampCount;
 *     ImGuiWindow *NavWindow;
 *     ImGuiID NavId;
 *     ImGuiID NavFocusScopeId;
 *     ImGuiNavLayer NavLayer;
 *     ImGuiID NavActivateId;
 *     ImGuiID NavActivateDownId;
 *     ImGuiID NavActivatePressedId;
 *     ImGuiActivateFlags NavActivateFlags;
 *     ImVector_ImGuiFocusScopeData NavFocusRoute;
 *     ImGuiID NavHighlightActivatedId;
 *     float NavHighlightActivatedTimer;
 *     ImGuiID NavNextActivateId;
 *     ImGuiActivateFlags NavNextActivateFlags;
 *     ImGuiInputSource NavInputSource;
 *     ImGuiSelectionUserData NavLastValidSelectionUserData;
 *     bool NavIdIsAlive;
 *     bool NavMousePosDirty;
 *     bool NavDisableHighlight;
 *     bool NavDisableMouseHover;
 *     bool NavAnyRequest;
 *     bool NavInitRequest;
 *     bool NavInitRequestFromMove;
 *     ImGuiNavItemData NavInitResult;
 *     bool NavMoveSubmitted;
 *     bool NavMoveScoringItems;
 *     bool NavMoveForwardToNextFrame;
 *     ImGuiNavMoveFlags NavMoveFlags;
 *     ImGuiScrollFlags NavMoveScrollFlags;
 *     ImGuiKeyChord NavMoveKeyMods;
 *     ImGuiDir NavMoveDir;
 *     ImGuiDir NavMoveDirForDebug;
 *     ImGuiDir NavMoveClipDir;
 *     ImRect NavScoringRect;
 *     ImRect NavScoringNoClipRect;
 *     int NavScoringDebugCount;
 *     int NavTabbingDir;
 *     int NavTabbingCounter;
 *     ImGuiNavItemData NavMoveResultLocal;
 *     ImGuiNavItemData NavMoveResultLocalVisible;
 *     ImGuiNavItemData NavMoveResultOther;
 *     ImGuiNavItemData NavTabbingResultFirst;
 *     ImGuiID NavJustMovedFromFocusScopeId;
 *     ImGuiID NavJustMovedToId;
 *     ImGuiID NavJustMovedToFocusScopeId;
 *     ImGuiKeyChord NavJustMovedToKeyMods;
 *     bool NavJustMovedToIsTabbing;
 *     bool NavJustMovedToHasSelectionData;
 *     ImGuiKeyChord ConfigNavWindowingKeyNext;
 *     ImGuiKeyChord ConfigNavWindowingKeyPrev;
 *     ImGuiWindow *NavWindowingTarget;
 *     ImGuiWindow *NavWindowingTargetAnim;
 *     ImGuiWindow *NavWindowingListWindow;
 *     float NavWindowingTimer;
 *     float NavWindowingHighlightAlpha;
 *     bool NavWindowingToggleLayer;
 *     ImGuiKey NavWindowingToggleKey;
 *     ImVec2 NavWindowingAccumDeltaPos;
 *     ImVec2 NavWindowingAccumDeltaSize;
 *     float DimBgRatio;
 *     bool DragDropActive;
 *     bool DragDropWithinSource;
 *     bool DragDropWithinTarget;
 *     ImGuiDragDropFlags DragDropSourceFlags;
 *     int DragDropSourceFrameCount;
 *     int DragDropMouseButton;
 *     ImGuiPayload DragDropPayload;
 *     ImRect DragDropTargetRect;
 *     ImRect DragDropTargetClipRect;
 *     ImGuiID DragDropTargetId;
 *     ImGuiDragDropFlags DragDropAcceptFlags;
 *     float DragDropAcceptIdCurrRectSurface;
 *     ImGuiID DragDropAcceptIdCurr;
 *     ImGuiID DragDropAcceptIdPrev;
 *     int DragDropAcceptFrameCount;
 *     ImGuiID DragDropHoldJustPressedId;
 *     ImVector_unsigned_char DragDropPayloadBufHeap;
 *     unsigned char DragDropPayloadBufLocal[16];
 *     int ClipperTempDataStacked;
 *     ImVector_ImGuiListClipperData ClipperTempData;
 *     ImGuiTable *CurrentTable;
 *     ImGuiID DebugBreakInTable;
 *     int TablesTempDataStacked;
 *     ImVector_ImGuiTableTempData TablesTempData;
 *     ImPool_ImGuiTable Tables;
 *     ImVector_float TablesLastTimeActive;
 *     ImVector_ImDrawChannel DrawChannelsTempMergeBuffer;
 *     ImGuiTabBar *CurrentTabBar;
 *     ImPool_ImGuiTabBar TabBars;
 *     ImVector_ImGuiPtrOrIndex CurrentTabBarStack;
 *     ImVector_ImGuiShrinkWidthItem ShrinkWidthBuffer;
 *     ImGuiBoxSelectState BoxSelectState;
 *     ImGuiMultiSelectTempData *CurrentMultiSelect;
 *     int MultiSelectTempDataStacked;
 *     ImVector_ImGuiMultiSelectTempData MultiSelectTempData;
 *     ImPool_ImGuiMultiSelectState MultiSelectStorage;
 *     ImGuiID HoverItemDelayId;
 *     ImGuiID HoverItemDelayIdPreviousFrame;
 *     float HoverItemDelayTimer;
 *     float HoverItemDelayClearTimer;
 *     ImGuiID HoverItemUnlockedStationaryId;
 *     ImGuiID HoverWindowUnlockedStationaryId;
 *     ImGuiMouseCursor MouseCursor;
 *     float MouseStationaryTimer;
 *     ImVec2 MouseLastValidPos;
 *     ImGuiInputTextState InputTextState;
 *     ImGuiInputTextDeactivatedState InputTextDeactivatedState;
 *     ImFont InputTextPasswordFont;
 *     ImGuiID TempInputId;
 *     ImGuiDataTypeStorage DataTypeZeroValue;
 *     int BeginMenuDepth;
 *     int BeginComboDepth;
 *     ImGuiColorEditFlags ColorEditOptions;
 *     ImGuiID ColorEditCurrentID;
 *     ImGuiID ColorEditSavedID;
 *     float ColorEditSavedHue;
 *     float ColorEditSavedSat;
 *     ImU32 ColorEditSavedColor;
 *     ImVec4 ColorPickerRef;
 *     ImGuiComboPreviewData ComboPreviewData;
 *     ImRect WindowResizeBorderExpectedRect;
 *     bool WindowResizeRelativeMode;
 *     short ScrollbarSeekMode;
 *     float ScrollbarClickDeltaToGrabCenter;
 *     float SliderGrabClickOffset;
 *     float SliderCurrentAccum;
 *     bool SliderCurrentAccumDirty;
 *     bool DragCurrentAccumDirty;
 *     float DragCurrentAccum;
 *     float DragSpeedDefaultRatio;
 *     float DisabledAlphaBackup;
 *     short DisabledStackSize;
 *     short LockMarkEdited;
 *     short TooltipOverrideCount;
 *     ImVector_char ClipboardHandlerData;
 *     ImVector_ImGuiID MenusIdSubmittedThisFrame;
 *     ImGuiTypingSelectState TypingSelectState;
 *     ImGuiPlatformImeData PlatformImeData;
 *     ImGuiPlatformImeData PlatformImeDataPrev;
 *     ImGuiID PlatformImeViewport;
 *     ImGuiDockContext DockContext;
 *     void (*DockNodeWindowMenuHandler)(ImGuiContext *, ImGuiDockNode *, ImGuiTabBar *);
 *     bool SettingsLoaded;
 *     float SettingsDirtyTimer;
 *     ImGuiTextBuffer SettingsIniData;
 *     ImVector_ImGuiSettingsHandler SettingsHandlers;
 *     ImChunkStream_ImGuiWindowSettings SettingsWindows;
 *     ImChunkStream_ImGuiTableSettings SettingsTables;
 *     ImVector_ImGuiContextHook Hooks;
 *     ImGuiID HookIdNext;
 *     const char *LocalizationTable[12];
 *     bool LogEnabled;
 *     ImGuiLogType LogType;
 *     ImFileHandle LogFile;
 *     ImGuiTextBuffer LogBuffer;
 *     const char *LogNextPrefix;
 *     const char *LogNextSuffix;
 *     float LogLinePosY;
 *     bool LogLineFirstItem;
 *     int LogDepthRef;
 *     int LogDepthToExpand;
 *     int LogDepthToExpandDefault;
 *     ImGuiDebugLogFlags DebugLogFlags;
 *     ImGuiTextBuffer DebugLogBuf;
 *     ImGuiTextIndex DebugLogIndex;
 *     ImGuiDebugLogFlags DebugLogAutoDisableFlags;
 *     ImU8 DebugLogAutoDisableFrames;
 *     ImU8 DebugLocateFrames;
 *     bool DebugBreakInLocateId;
 *     ImGuiKeyChord DebugBreakKeyChord;
 *     ImS8 DebugBeginReturnValueCullDepth;
 *     bool DebugItemPickerActive;
 *     ImU8 DebugItemPickerMouseButton;
 *     ImGuiID DebugItemPickerBreakId;
 *     float DebugFlashStyleColorTime;
 *     ImVec4 DebugFlashStyleColorBackup;
 *     ImGuiMetricsConfig DebugMetricsConfig;
 *     ImGuiIDStackTool DebugIDStackTool;
 *     ImGuiDebugAllocInfo DebugAllocInfo;
 *     ImGuiDockNode *DebugHoveredDockNode;
 *     float FramerateSecPerFrame[60];
 *     int FramerateSecPerFrameIdx;
 *     int FramerateSecPerFrameCount;
 *     float FramerateSecPerFrameAccum;
 *     int WantCaptureMouseNextFrame;
 *     int WantCaptureKeyboardNextFrame;
 *     int WantTextInputNextFrame;
 *     ImVector_char TempBuffer;
 *     char TempKeychordName[64];
 * }
 * }
 */
public class ImGuiContext {

    ImGuiContext() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_BOOL.withName("Initialized"),
        imgui.C_BOOL.withName("FontAtlasOwnedByContext"),
        MemoryLayout.paddingLayout(6),
        ImGuiIO.layout().withName("IO"),
        ImGuiPlatformIO.layout().withName("PlatformIO"),
        ImGuiStyle.layout().withName("Style"),
        imgui.C_INT.withName("ConfigFlagsCurrFrame"),
        imgui.C_INT.withName("ConfigFlagsLastFrame"),
        imgui.C_POINTER.withName("Font"),
        imgui.C_FLOAT.withName("FontSize"),
        imgui.C_FLOAT.withName("FontBaseSize"),
        imgui.C_FLOAT.withName("FontScale"),
        imgui.C_FLOAT.withName("CurrentDpiScale"),
        ImDrawListSharedData.layout().withName("DrawListSharedData"),
        imgui.C_DOUBLE.withName("Time"),
        imgui.C_INT.withName("FrameCount"),
        imgui.C_INT.withName("FrameCountEnded"),
        imgui.C_INT.withName("FrameCountPlatformEnded"),
        imgui.C_INT.withName("FrameCountRendered"),
        imgui.C_BOOL.withName("WithinFrameScope"),
        imgui.C_BOOL.withName("WithinFrameScopeWithImplicitWindow"),
        imgui.C_BOOL.withName("WithinEndChild"),
        imgui.C_BOOL.withName("GcCompactAll"),
        imgui.C_BOOL.withName("TestEngineHookItems"),
        MemoryLayout.paddingLayout(3),
        imgui.C_POINTER.withName("TestEngine"),
        MemoryLayout.sequenceLayout(16, imgui.C_CHAR).withName("ContextName"),
        ImVector_ImGuiInputEvent.layout().withName("InputEventsQueue"),
        ImVector_ImGuiInputEvent.layout().withName("InputEventsTrail"),
        imgui.C_INT.withName("InputEventsNextMouseSource"),
        imgui.C_INT.withName("InputEventsNextEventId"),
        ImVector_ImGuiWindowPtr.layout().withName("Windows"),
        ImVector_ImGuiWindowPtr.layout().withName("WindowsFocusOrder"),
        ImVector_ImGuiWindowPtr.layout().withName("WindowsTempSortBuffer"),
        ImVector_ImGuiWindowStackData.layout().withName("CurrentWindowStack"),
        ImGuiStorage.layout().withName("WindowsById"),
        imgui.C_INT.withName("WindowsActiveCount"),
        ImVec2.layout().withName("WindowsHoverPadding"),
        imgui.C_INT.withName("DebugBreakInWindow"),
        imgui.C_POINTER.withName("CurrentWindow"),
        imgui.C_POINTER.withName("HoveredWindow"),
        imgui.C_POINTER.withName("HoveredWindowUnderMovingWindow"),
        imgui.C_POINTER.withName("HoveredWindowBeforeClear"),
        imgui.C_POINTER.withName("MovingWindow"),
        imgui.C_POINTER.withName("WheelingWindow"),
        ImVec2.layout().withName("WheelingWindowRefMousePos"),
        imgui.C_INT.withName("WheelingWindowStartFrame"),
        imgui.C_INT.withName("WheelingWindowScrolledFrame"),
        imgui.C_FLOAT.withName("WheelingWindowReleaseTimer"),
        ImVec2.layout().withName("WheelingWindowWheelRemainder"),
        ImVec2.layout().withName("WheelingAxisAvg"),
        imgui.C_INT.withName("DebugHookIdInfo"),
        imgui.C_INT.withName("HoveredId"),
        imgui.C_INT.withName("HoveredIdPreviousFrame"),
        imgui.C_FLOAT.withName("HoveredIdTimer"),
        imgui.C_FLOAT.withName("HoveredIdNotActiveTimer"),
        imgui.C_BOOL.withName("HoveredIdAllowOverlap"),
        imgui.C_BOOL.withName("HoveredIdIsDisabled"),
        imgui.C_BOOL.withName("ItemUnclipByLog"),
        MemoryLayout.paddingLayout(1),
        imgui.C_INT.withName("ActiveId"),
        imgui.C_INT.withName("ActiveIdIsAlive"),
        imgui.C_FLOAT.withName("ActiveIdTimer"),
        imgui.C_BOOL.withName("ActiveIdIsJustActivated"),
        imgui.C_BOOL.withName("ActiveIdAllowOverlap"),
        imgui.C_BOOL.withName("ActiveIdNoClearOnFocusLoss"),
        imgui.C_BOOL.withName("ActiveIdHasBeenPressedBefore"),
        imgui.C_BOOL.withName("ActiveIdHasBeenEditedBefore"),
        imgui.C_BOOL.withName("ActiveIdHasBeenEditedThisFrame"),
        imgui.C_BOOL.withName("ActiveIdFromShortcut"),
        MemoryLayout.paddingLayout(1),
        ImVec2.layout().withName("ActiveIdClickOffset"),
        imgui.C_POINTER.withName("ActiveIdWindow"),
        imgui.C_INT.withName("ActiveIdSource"),
        imgui.C_INT.withName("ActiveIdPreviousFrame"),
        imgui.C_BOOL.withName("ActiveIdPreviousFrameIsAlive"),
        imgui.C_BOOL.withName("ActiveIdPreviousFrameHasBeenEditedBefore"),
        MemoryLayout.paddingLayout(6),
        imgui.C_POINTER.withName("ActiveIdPreviousFrameWindow"),
        imgui.C_INT.withName("LastActiveId"),
        imgui.C_FLOAT.withName("LastActiveIdTimer"),
        imgui.C_DOUBLE.withName("LastKeyModsChangeTime"),
        imgui.C_DOUBLE.withName("LastKeyModsChangeFromNoneTime"),
        imgui.C_DOUBLE.withName("LastKeyboardKeyPressTime"),
        ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN.layout().withName("KeysMayBeCharInput"),
        MemoryLayout.sequenceLayout(154, ImGuiKeyOwnerData.layout()).withName("KeysOwnerData"),
        MemoryLayout.paddingLayout(4),
        ImGuiKeyRoutingTable.layout().withName("KeysRoutingTable"),
        imgui.C_INT.withName("ActiveIdUsingNavDirMask"),
        imgui.C_BOOL.withName("ActiveIdUsingAllKeyboardKeys"),
        MemoryLayout.paddingLayout(3),
        imgui.C_INT.withName("DebugBreakInShortcutRouting"),
        imgui.C_INT.withName("CurrentFocusScopeId"),
        imgui.C_INT.withName("CurrentItemFlags"),
        imgui.C_INT.withName("DebugLocateId"),
        ImGuiNextItemData.layout().withName("NextItemData"),
        ImGuiLastItemData.layout().withName("LastItemData"),
        ImGuiNextWindowData.layout().withName("NextWindowData"),
        imgui.C_BOOL.withName("DebugShowGroupRects"),
        MemoryLayout.paddingLayout(3),
        imgui.C_INT.withName("DebugFlashStyleColorIdx"),
        ImVector_ImGuiColorMod.layout().withName("ColorStack"),
        ImVector_ImGuiStyleMod.layout().withName("StyleVarStack"),
        ImVector_ImFontPtr.layout().withName("FontStack"),
        ImVector_ImGuiFocusScopeData.layout().withName("FocusScopeStack"),
        ImVector_ImGuiItemFlags.layout().withName("ItemFlagsStack"),
        ImVector_ImGuiGroupData.layout().withName("GroupStack"),
        ImVector_ImGuiPopupData.layout().withName("OpenPopupStack"),
        ImVector_ImGuiPopupData.layout().withName("BeginPopupStack"),
        ImVector_ImGuiTreeNodeStackData.layout().withName("TreeNodeStack"),
        ImVector_ImGuiViewportPPtr.layout().withName("Viewports"),
        imgui.C_POINTER.withName("CurrentViewport"),
        imgui.C_POINTER.withName("MouseViewport"),
        imgui.C_POINTER.withName("MouseLastHoveredViewport"),
        imgui.C_INT.withName("PlatformLastFocusedViewportId"),
        MemoryLayout.paddingLayout(4),
        ImGuiPlatformMonitor.layout().withName("FallbackMonitor"),
        ImRect.layout().withName("PlatformMonitorsFullWorkRect"),
        imgui.C_INT.withName("ViewportCreatedCount"),
        imgui.C_INT.withName("PlatformWindowsCreatedCount"),
        imgui.C_INT.withName("ViewportFocusedStampCount"),
        MemoryLayout.paddingLayout(4),
        imgui.C_POINTER.withName("NavWindow"),
        imgui.C_INT.withName("NavId"),
        imgui.C_INT.withName("NavFocusScopeId"),
        imgui.C_INT.withName("NavLayer"),
        imgui.C_INT.withName("NavActivateId"),
        imgui.C_INT.withName("NavActivateDownId"),
        imgui.C_INT.withName("NavActivatePressedId"),
        imgui.C_INT.withName("NavActivateFlags"),
        MemoryLayout.paddingLayout(4),
        ImVector_ImGuiFocusScopeData.layout().withName("NavFocusRoute"),
        imgui.C_INT.withName("NavHighlightActivatedId"),
        imgui.C_FLOAT.withName("NavHighlightActivatedTimer"),
        imgui.C_INT.withName("NavNextActivateId"),
        imgui.C_INT.withName("NavNextActivateFlags"),
        imgui.C_INT.withName("NavInputSource"),
        MemoryLayout.paddingLayout(4),
        imgui.C_LONG_LONG.withName("NavLastValidSelectionUserData"),
        imgui.C_BOOL.withName("NavIdIsAlive"),
        imgui.C_BOOL.withName("NavMousePosDirty"),
        imgui.C_BOOL.withName("NavDisableHighlight"),
        imgui.C_BOOL.withName("NavDisableMouseHover"),
        imgui.C_BOOL.withName("NavAnyRequest"),
        imgui.C_BOOL.withName("NavInitRequest"),
        imgui.C_BOOL.withName("NavInitRequestFromMove"),
        MemoryLayout.paddingLayout(1),
        ImGuiNavItemData.layout().withName("NavInitResult"),
        imgui.C_BOOL.withName("NavMoveSubmitted"),
        imgui.C_BOOL.withName("NavMoveScoringItems"),
        imgui.C_BOOL.withName("NavMoveForwardToNextFrame"),
        MemoryLayout.paddingLayout(1),
        imgui.C_INT.withName("NavMoveFlags"),
        imgui.C_INT.withName("NavMoveScrollFlags"),
        imgui.C_INT.withName("NavMoveKeyMods"),
        imgui.C_INT.withName("NavMoveDir"),
        imgui.C_INT.withName("NavMoveDirForDebug"),
        imgui.C_INT.withName("NavMoveClipDir"),
        ImRect.layout().withName("NavScoringRect"),
        ImRect.layout().withName("NavScoringNoClipRect"),
        imgui.C_INT.withName("NavScoringDebugCount"),
        imgui.C_INT.withName("NavTabbingDir"),
        imgui.C_INT.withName("NavTabbingCounter"),
        ImGuiNavItemData.layout().withName("NavMoveResultLocal"),
        ImGuiNavItemData.layout().withName("NavMoveResultLocalVisible"),
        ImGuiNavItemData.layout().withName("NavMoveResultOther"),
        ImGuiNavItemData.layout().withName("NavTabbingResultFirst"),
        imgui.C_INT.withName("NavJustMovedFromFocusScopeId"),
        imgui.C_INT.withName("NavJustMovedToId"),
        imgui.C_INT.withName("NavJustMovedToFocusScopeId"),
        imgui.C_INT.withName("NavJustMovedToKeyMods"),
        imgui.C_BOOL.withName("NavJustMovedToIsTabbing"),
        imgui.C_BOOL.withName("NavJustMovedToHasSelectionData"),
        MemoryLayout.paddingLayout(2),
        imgui.C_INT.withName("ConfigNavWindowingKeyNext"),
        imgui.C_INT.withName("ConfigNavWindowingKeyPrev"),
        MemoryLayout.paddingLayout(4),
        imgui.C_POINTER.withName("NavWindowingTarget"),
        imgui.C_POINTER.withName("NavWindowingTargetAnim"),
        imgui.C_POINTER.withName("NavWindowingListWindow"),
        imgui.C_FLOAT.withName("NavWindowingTimer"),
        imgui.C_FLOAT.withName("NavWindowingHighlightAlpha"),
        imgui.C_BOOL.withName("NavWindowingToggleLayer"),
        MemoryLayout.paddingLayout(3),
        imgui.C_INT.withName("NavWindowingToggleKey"),
        ImVec2.layout().withName("NavWindowingAccumDeltaPos"),
        ImVec2.layout().withName("NavWindowingAccumDeltaSize"),
        imgui.C_FLOAT.withName("DimBgRatio"),
        imgui.C_BOOL.withName("DragDropActive"),
        imgui.C_BOOL.withName("DragDropWithinSource"),
        imgui.C_BOOL.withName("DragDropWithinTarget"),
        MemoryLayout.paddingLayout(1),
        imgui.C_INT.withName("DragDropSourceFlags"),
        imgui.C_INT.withName("DragDropSourceFrameCount"),
        imgui.C_INT.withName("DragDropMouseButton"),
        MemoryLayout.paddingLayout(4),
        ImGuiPayload.layout().withName("DragDropPayload"),
        ImRect.layout().withName("DragDropTargetRect"),
        ImRect.layout().withName("DragDropTargetClipRect"),
        imgui.C_INT.withName("DragDropTargetId"),
        imgui.C_INT.withName("DragDropAcceptFlags"),
        imgui.C_FLOAT.withName("DragDropAcceptIdCurrRectSurface"),
        imgui.C_INT.withName("DragDropAcceptIdCurr"),
        imgui.C_INT.withName("DragDropAcceptIdPrev"),
        imgui.C_INT.withName("DragDropAcceptFrameCount"),
        imgui.C_INT.withName("DragDropHoldJustPressedId"),
        MemoryLayout.paddingLayout(4),
        ImVector_unsigned_char.layout().withName("DragDropPayloadBufHeap"),
        MemoryLayout.sequenceLayout(16, imgui.C_CHAR).withName("DragDropPayloadBufLocal"),
        imgui.C_INT.withName("ClipperTempDataStacked"),
        MemoryLayout.paddingLayout(4),
        ImVector_ImGuiListClipperData.layout().withName("ClipperTempData"),
        imgui.C_POINTER.withName("CurrentTable"),
        imgui.C_INT.withName("DebugBreakInTable"),
        imgui.C_INT.withName("TablesTempDataStacked"),
        ImVector_ImGuiTableTempData.layout().withName("TablesTempData"),
        ImPool_ImGuiTable.layout().withName("Tables"),
        ImVector_float.layout().withName("TablesLastTimeActive"),
        ImVector_ImDrawChannel.layout().withName("DrawChannelsTempMergeBuffer"),
        imgui.C_POINTER.withName("CurrentTabBar"),
        ImPool_ImGuiTabBar.layout().withName("TabBars"),
        ImVector_ImGuiPtrOrIndex.layout().withName("CurrentTabBarStack"),
        ImVector_ImGuiShrinkWidthItem.layout().withName("ShrinkWidthBuffer"),
        ImGuiBoxSelectState.layout().withName("BoxSelectState"),
        imgui.C_POINTER.withName("CurrentMultiSelect"),
        imgui.C_INT.withName("MultiSelectTempDataStacked"),
        MemoryLayout.paddingLayout(4),
        ImVector_ImGuiMultiSelectTempData.layout().withName("MultiSelectTempData"),
        ImPool_ImGuiMultiSelectState.layout().withName("MultiSelectStorage"),
        imgui.C_INT.withName("HoverItemDelayId"),
        imgui.C_INT.withName("HoverItemDelayIdPreviousFrame"),
        imgui.C_FLOAT.withName("HoverItemDelayTimer"),
        imgui.C_FLOAT.withName("HoverItemDelayClearTimer"),
        imgui.C_INT.withName("HoverItemUnlockedStationaryId"),
        imgui.C_INT.withName("HoverWindowUnlockedStationaryId"),
        imgui.C_INT.withName("MouseCursor"),
        imgui.C_FLOAT.withName("MouseStationaryTimer"),
        ImVec2.layout().withName("MouseLastValidPos"),
        ImGuiInputTextState.layout().withName("InputTextState"),
        ImGuiInputTextDeactivatedState.layout().withName("InputTextDeactivatedState"),
        ImFont.layout().withName("InputTextPasswordFont"),
        imgui.C_INT.withName("TempInputId"),
        ImGuiDataTypeStorage.layout().withName("DataTypeZeroValue"),
        imgui.C_INT.withName("BeginMenuDepth"),
        imgui.C_INT.withName("BeginComboDepth"),
        imgui.C_INT.withName("ColorEditOptions"),
        imgui.C_INT.withName("ColorEditCurrentID"),
        imgui.C_INT.withName("ColorEditSavedID"),
        imgui.C_FLOAT.withName("ColorEditSavedHue"),
        imgui.C_FLOAT.withName("ColorEditSavedSat"),
        imgui.C_INT.withName("ColorEditSavedColor"),
        ImVec4.layout().withName("ColorPickerRef"),
        ImGuiComboPreviewData.layout().withName("ComboPreviewData"),
        ImRect.layout().withName("WindowResizeBorderExpectedRect"),
        imgui.C_BOOL.withName("WindowResizeRelativeMode"),
        MemoryLayout.paddingLayout(1),
        imgui.C_SHORT.withName("ScrollbarSeekMode"),
        imgui.C_FLOAT.withName("ScrollbarClickDeltaToGrabCenter"),
        imgui.C_FLOAT.withName("SliderGrabClickOffset"),
        imgui.C_FLOAT.withName("SliderCurrentAccum"),
        imgui.C_BOOL.withName("SliderCurrentAccumDirty"),
        imgui.C_BOOL.withName("DragCurrentAccumDirty"),
        MemoryLayout.paddingLayout(2),
        imgui.C_FLOAT.withName("DragCurrentAccum"),
        imgui.C_FLOAT.withName("DragSpeedDefaultRatio"),
        imgui.C_FLOAT.withName("DisabledAlphaBackup"),
        imgui.C_SHORT.withName("DisabledStackSize"),
        imgui.C_SHORT.withName("LockMarkEdited"),
        imgui.C_SHORT.withName("TooltipOverrideCount"),
        MemoryLayout.paddingLayout(6),
        ImVector_char.layout().withName("ClipboardHandlerData"),
        ImVector_ImGuiID.layout().withName("MenusIdSubmittedThisFrame"),
        ImGuiTypingSelectState.layout().withName("TypingSelectState"),
        ImGuiPlatformImeData.layout().withName("PlatformImeData"),
        ImGuiPlatformImeData.layout().withName("PlatformImeDataPrev"),
        imgui.C_INT.withName("PlatformImeViewport"),
        MemoryLayout.paddingLayout(4),
        ImGuiDockContext.layout().withName("DockContext"),
        imgui.C_POINTER.withName("DockNodeWindowMenuHandler"),
        imgui.C_BOOL.withName("SettingsLoaded"),
        MemoryLayout.paddingLayout(3),
        imgui.C_FLOAT.withName("SettingsDirtyTimer"),
        ImGuiTextBuffer.layout().withName("SettingsIniData"),
        ImVector_ImGuiSettingsHandler.layout().withName("SettingsHandlers"),
        ImChunkStream_ImGuiWindowSettings.layout().withName("SettingsWindows"),
        ImChunkStream_ImGuiTableSettings.layout().withName("SettingsTables"),
        ImVector_ImGuiContextHook.layout().withName("Hooks"),
        imgui.C_INT.withName("HookIdNext"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(12, imgui.C_POINTER).withName("LocalizationTable"),
        imgui.C_BOOL.withName("LogEnabled"),
        MemoryLayout.paddingLayout(3),
        imgui.C_INT.withName("LogType"),
        imgui.C_POINTER.withName("LogFile"),
        ImGuiTextBuffer.layout().withName("LogBuffer"),
        imgui.C_POINTER.withName("LogNextPrefix"),
        imgui.C_POINTER.withName("LogNextSuffix"),
        imgui.C_FLOAT.withName("LogLinePosY"),
        imgui.C_BOOL.withName("LogLineFirstItem"),
        MemoryLayout.paddingLayout(3),
        imgui.C_INT.withName("LogDepthRef"),
        imgui.C_INT.withName("LogDepthToExpand"),
        imgui.C_INT.withName("LogDepthToExpandDefault"),
        imgui.C_INT.withName("DebugLogFlags"),
        ImGuiTextBuffer.layout().withName("DebugLogBuf"),
        ImGuiTextIndex.layout().withName("DebugLogIndex"),
        imgui.C_INT.withName("DebugLogAutoDisableFlags"),
        imgui.C_CHAR.withName("DebugLogAutoDisableFrames"),
        imgui.C_CHAR.withName("DebugLocateFrames"),
        imgui.C_BOOL.withName("DebugBreakInLocateId"),
        MemoryLayout.paddingLayout(1),
        imgui.C_INT.withName("DebugBreakKeyChord"),
        imgui.C_CHAR.withName("DebugBeginReturnValueCullDepth"),
        imgui.C_BOOL.withName("DebugItemPickerActive"),
        imgui.C_CHAR.withName("DebugItemPickerMouseButton"),
        MemoryLayout.paddingLayout(1),
        imgui.C_INT.withName("DebugItemPickerBreakId"),
        imgui.C_FLOAT.withName("DebugFlashStyleColorTime"),
        ImVec4.layout().withName("DebugFlashStyleColorBackup"),
        ImGuiMetricsConfig.layout().withName("DebugMetricsConfig"),
        MemoryLayout.paddingLayout(4),
        ImGuiIDStackTool.layout().withName("DebugIDStackTool"),
        ImGuiDebugAllocInfo.layout().withName("DebugAllocInfo"),
        MemoryLayout.paddingLayout(4),
        imgui.C_POINTER.withName("DebugHoveredDockNode"),
        MemoryLayout.sequenceLayout(60, imgui.C_FLOAT).withName("FramerateSecPerFrame"),
        imgui.C_INT.withName("FramerateSecPerFrameIdx"),
        imgui.C_INT.withName("FramerateSecPerFrameCount"),
        imgui.C_FLOAT.withName("FramerateSecPerFrameAccum"),
        imgui.C_INT.withName("WantCaptureMouseNextFrame"),
        imgui.C_INT.withName("WantCaptureKeyboardNextFrame"),
        imgui.C_INT.withName("WantTextInputNextFrame"),
        ImVector_char.layout().withName("TempBuffer"),
        MemoryLayout.sequenceLayout(64, imgui.C_CHAR).withName("TempKeychordName")
    ).withName("ImGuiContext");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean Initialized$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("Initialized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool Initialized
     * }
     */
    public static final OfBoolean Initialized$layout() {
        return Initialized$LAYOUT;
    }

    private static final long Initialized$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool Initialized
     * }
     */
    public static final long Initialized$offset() {
        return Initialized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool Initialized
     * }
     */
    public static boolean Initialized(MemorySegment struct) {
        return struct.get(Initialized$LAYOUT, Initialized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool Initialized
     * }
     */
    public static void Initialized(MemorySegment struct, boolean fieldValue) {
        struct.set(Initialized$LAYOUT, Initialized$OFFSET, fieldValue);
    }

    private static final OfBoolean FontAtlasOwnedByContext$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("FontAtlasOwnedByContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool FontAtlasOwnedByContext
     * }
     */
    public static final OfBoolean FontAtlasOwnedByContext$layout() {
        return FontAtlasOwnedByContext$LAYOUT;
    }

    private static final long FontAtlasOwnedByContext$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool FontAtlasOwnedByContext
     * }
     */
    public static final long FontAtlasOwnedByContext$offset() {
        return FontAtlasOwnedByContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool FontAtlasOwnedByContext
     * }
     */
    public static boolean FontAtlasOwnedByContext(MemorySegment struct) {
        return struct.get(FontAtlasOwnedByContext$LAYOUT, FontAtlasOwnedByContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool FontAtlasOwnedByContext
     * }
     */
    public static void FontAtlasOwnedByContext(MemorySegment struct, boolean fieldValue) {
        struct.set(FontAtlasOwnedByContext$LAYOUT, FontAtlasOwnedByContext$OFFSET, fieldValue);
    }

    private static final GroupLayout IO$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IO"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiIO IO
     * }
     */
    public static final GroupLayout IO$layout() {
        return IO$LAYOUT;
    }

    private static final long IO$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiIO IO
     * }
     */
    public static final long IO$offset() {
        return IO$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiIO IO
     * }
     */
    public static MemorySegment IO(MemorySegment struct) {
        return struct.asSlice(IO$OFFSET, IO$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiIO IO
     * }
     */
    public static void IO(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, IO$OFFSET, IO$LAYOUT.byteSize());
    }

    private static final GroupLayout PlatformIO$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PlatformIO"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiPlatformIO PlatformIO
     * }
     */
    public static final GroupLayout PlatformIO$layout() {
        return PlatformIO$LAYOUT;
    }

    private static final long PlatformIO$OFFSET = 3056;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiPlatformIO PlatformIO
     * }
     */
    public static final long PlatformIO$offset() {
        return PlatformIO$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiPlatformIO PlatformIO
     * }
     */
    public static MemorySegment PlatformIO(MemorySegment struct) {
        return struct.asSlice(PlatformIO$OFFSET, PlatformIO$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiPlatformIO PlatformIO
     * }
     */
    public static void PlatformIO(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PlatformIO$OFFSET, PlatformIO$LAYOUT.byteSize());
    }

    private static final GroupLayout Style$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Style"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiStyle Style
     * }
     */
    public static final GroupLayout Style$layout() {
        return Style$LAYOUT;
    }

    private static final long Style$OFFSET = 3272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiStyle Style
     * }
     */
    public static final long Style$offset() {
        return Style$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiStyle Style
     * }
     */
    public static MemorySegment Style(MemorySegment struct) {
        return struct.asSlice(Style$OFFSET, Style$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiStyle Style
     * }
     */
    public static void Style(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Style$OFFSET, Style$LAYOUT.byteSize());
    }

    private static final OfInt ConfigFlagsCurrFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ConfigFlagsCurrFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlagsCurrFrame
     * }
     */
    public static final OfInt ConfigFlagsCurrFrame$layout() {
        return ConfigFlagsCurrFrame$LAYOUT;
    }

    private static final long ConfigFlagsCurrFrame$OFFSET = 4464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlagsCurrFrame
     * }
     */
    public static final long ConfigFlagsCurrFrame$offset() {
        return ConfigFlagsCurrFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlagsCurrFrame
     * }
     */
    public static int ConfigFlagsCurrFrame(MemorySegment struct) {
        return struct.get(ConfigFlagsCurrFrame$LAYOUT, ConfigFlagsCurrFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlagsCurrFrame
     * }
     */
    public static void ConfigFlagsCurrFrame(MemorySegment struct, int fieldValue) {
        struct.set(ConfigFlagsCurrFrame$LAYOUT, ConfigFlagsCurrFrame$OFFSET, fieldValue);
    }

    private static final OfInt ConfigFlagsLastFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ConfigFlagsLastFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlagsLastFrame
     * }
     */
    public static final OfInt ConfigFlagsLastFrame$layout() {
        return ConfigFlagsLastFrame$LAYOUT;
    }

    private static final long ConfigFlagsLastFrame$OFFSET = 4468;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlagsLastFrame
     * }
     */
    public static final long ConfigFlagsLastFrame$offset() {
        return ConfigFlagsLastFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlagsLastFrame
     * }
     */
    public static int ConfigFlagsLastFrame(MemorySegment struct) {
        return struct.get(ConfigFlagsLastFrame$LAYOUT, ConfigFlagsLastFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiConfigFlags ConfigFlagsLastFrame
     * }
     */
    public static void ConfigFlagsLastFrame(MemorySegment struct, int fieldValue) {
        struct.set(ConfigFlagsLastFrame$LAYOUT, ConfigFlagsLastFrame$OFFSET, fieldValue);
    }

    private static final AddressLayout Font$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Font"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImFont *Font
     * }
     */
    public static final AddressLayout Font$layout() {
        return Font$LAYOUT;
    }

    private static final long Font$OFFSET = 4472;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImFont *Font
     * }
     */
    public static final long Font$offset() {
        return Font$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImFont *Font
     * }
     */
    public static MemorySegment Font(MemorySegment struct) {
        return struct.get(Font$LAYOUT, Font$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImFont *Font
     * }
     */
    public static void Font(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Font$LAYOUT, Font$OFFSET, fieldValue);
    }

    private static final OfFloat FontSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FontSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FontSize
     * }
     */
    public static final OfFloat FontSize$layout() {
        return FontSize$LAYOUT;
    }

    private static final long FontSize$OFFSET = 4480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FontSize
     * }
     */
    public static final long FontSize$offset() {
        return FontSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FontSize
     * }
     */
    public static float FontSize(MemorySegment struct) {
        return struct.get(FontSize$LAYOUT, FontSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FontSize
     * }
     */
    public static void FontSize(MemorySegment struct, float fieldValue) {
        struct.set(FontSize$LAYOUT, FontSize$OFFSET, fieldValue);
    }

    private static final OfFloat FontBaseSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FontBaseSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FontBaseSize
     * }
     */
    public static final OfFloat FontBaseSize$layout() {
        return FontBaseSize$LAYOUT;
    }

    private static final long FontBaseSize$OFFSET = 4484;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FontBaseSize
     * }
     */
    public static final long FontBaseSize$offset() {
        return FontBaseSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FontBaseSize
     * }
     */
    public static float FontBaseSize(MemorySegment struct) {
        return struct.get(FontBaseSize$LAYOUT, FontBaseSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FontBaseSize
     * }
     */
    public static void FontBaseSize(MemorySegment struct, float fieldValue) {
        struct.set(FontBaseSize$LAYOUT, FontBaseSize$OFFSET, fieldValue);
    }

    private static final OfFloat FontScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FontScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FontScale
     * }
     */
    public static final OfFloat FontScale$layout() {
        return FontScale$LAYOUT;
    }

    private static final long FontScale$OFFSET = 4488;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FontScale
     * }
     */
    public static final long FontScale$offset() {
        return FontScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FontScale
     * }
     */
    public static float FontScale(MemorySegment struct) {
        return struct.get(FontScale$LAYOUT, FontScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FontScale
     * }
     */
    public static void FontScale(MemorySegment struct, float fieldValue) {
        struct.set(FontScale$LAYOUT, FontScale$OFFSET, fieldValue);
    }

    private static final OfFloat CurrentDpiScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("CurrentDpiScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float CurrentDpiScale
     * }
     */
    public static final OfFloat CurrentDpiScale$layout() {
        return CurrentDpiScale$LAYOUT;
    }

    private static final long CurrentDpiScale$OFFSET = 4492;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float CurrentDpiScale
     * }
     */
    public static final long CurrentDpiScale$offset() {
        return CurrentDpiScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float CurrentDpiScale
     * }
     */
    public static float CurrentDpiScale(MemorySegment struct) {
        return struct.get(CurrentDpiScale$LAYOUT, CurrentDpiScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float CurrentDpiScale
     * }
     */
    public static void CurrentDpiScale(MemorySegment struct, float fieldValue) {
        struct.set(CurrentDpiScale$LAYOUT, CurrentDpiScale$OFFSET, fieldValue);
    }

    private static final GroupLayout DrawListSharedData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DrawListSharedData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawListSharedData DrawListSharedData
     * }
     */
    public static final GroupLayout DrawListSharedData$layout() {
        return DrawListSharedData$LAYOUT;
    }

    private static final long DrawListSharedData$OFFSET = 4496;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawListSharedData DrawListSharedData
     * }
     */
    public static final long DrawListSharedData$offset() {
        return DrawListSharedData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawListSharedData DrawListSharedData
     * }
     */
    public static MemorySegment DrawListSharedData(MemorySegment struct) {
        return struct.asSlice(DrawListSharedData$OFFSET, DrawListSharedData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawListSharedData DrawListSharedData
     * }
     */
    public static void DrawListSharedData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DrawListSharedData$OFFSET, DrawListSharedData$LAYOUT.byteSize());
    }

    private static final OfDouble Time$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("Time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double Time
     * }
     */
    public static final OfDouble Time$layout() {
        return Time$LAYOUT;
    }

    private static final long Time$OFFSET = 5032;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double Time
     * }
     */
    public static final long Time$offset() {
        return Time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double Time
     * }
     */
    public static double Time(MemorySegment struct) {
        return struct.get(Time$LAYOUT, Time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double Time
     * }
     */
    public static void Time(MemorySegment struct, double fieldValue) {
        struct.set(Time$LAYOUT, Time$OFFSET, fieldValue);
    }

    private static final OfInt FrameCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FrameCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int FrameCount
     * }
     */
    public static final OfInt FrameCount$layout() {
        return FrameCount$LAYOUT;
    }

    private static final long FrameCount$OFFSET = 5040;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int FrameCount
     * }
     */
    public static final long FrameCount$offset() {
        return FrameCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int FrameCount
     * }
     */
    public static int FrameCount(MemorySegment struct) {
        return struct.get(FrameCount$LAYOUT, FrameCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int FrameCount
     * }
     */
    public static void FrameCount(MemorySegment struct, int fieldValue) {
        struct.set(FrameCount$LAYOUT, FrameCount$OFFSET, fieldValue);
    }

    private static final OfInt FrameCountEnded$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FrameCountEnded"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int FrameCountEnded
     * }
     */
    public static final OfInt FrameCountEnded$layout() {
        return FrameCountEnded$LAYOUT;
    }

    private static final long FrameCountEnded$OFFSET = 5044;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int FrameCountEnded
     * }
     */
    public static final long FrameCountEnded$offset() {
        return FrameCountEnded$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int FrameCountEnded
     * }
     */
    public static int FrameCountEnded(MemorySegment struct) {
        return struct.get(FrameCountEnded$LAYOUT, FrameCountEnded$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int FrameCountEnded
     * }
     */
    public static void FrameCountEnded(MemorySegment struct, int fieldValue) {
        struct.set(FrameCountEnded$LAYOUT, FrameCountEnded$OFFSET, fieldValue);
    }

    private static final OfInt FrameCountPlatformEnded$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FrameCountPlatformEnded"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int FrameCountPlatformEnded
     * }
     */
    public static final OfInt FrameCountPlatformEnded$layout() {
        return FrameCountPlatformEnded$LAYOUT;
    }

    private static final long FrameCountPlatformEnded$OFFSET = 5048;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int FrameCountPlatformEnded
     * }
     */
    public static final long FrameCountPlatformEnded$offset() {
        return FrameCountPlatformEnded$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int FrameCountPlatformEnded
     * }
     */
    public static int FrameCountPlatformEnded(MemorySegment struct) {
        return struct.get(FrameCountPlatformEnded$LAYOUT, FrameCountPlatformEnded$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int FrameCountPlatformEnded
     * }
     */
    public static void FrameCountPlatformEnded(MemorySegment struct, int fieldValue) {
        struct.set(FrameCountPlatformEnded$LAYOUT, FrameCountPlatformEnded$OFFSET, fieldValue);
    }

    private static final OfInt FrameCountRendered$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FrameCountRendered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int FrameCountRendered
     * }
     */
    public static final OfInt FrameCountRendered$layout() {
        return FrameCountRendered$LAYOUT;
    }

    private static final long FrameCountRendered$OFFSET = 5052;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int FrameCountRendered
     * }
     */
    public static final long FrameCountRendered$offset() {
        return FrameCountRendered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int FrameCountRendered
     * }
     */
    public static int FrameCountRendered(MemorySegment struct) {
        return struct.get(FrameCountRendered$LAYOUT, FrameCountRendered$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int FrameCountRendered
     * }
     */
    public static void FrameCountRendered(MemorySegment struct, int fieldValue) {
        struct.set(FrameCountRendered$LAYOUT, FrameCountRendered$OFFSET, fieldValue);
    }

    private static final OfBoolean WithinFrameScope$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WithinFrameScope"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WithinFrameScope
     * }
     */
    public static final OfBoolean WithinFrameScope$layout() {
        return WithinFrameScope$LAYOUT;
    }

    private static final long WithinFrameScope$OFFSET = 5056;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WithinFrameScope
     * }
     */
    public static final long WithinFrameScope$offset() {
        return WithinFrameScope$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WithinFrameScope
     * }
     */
    public static boolean WithinFrameScope(MemorySegment struct) {
        return struct.get(WithinFrameScope$LAYOUT, WithinFrameScope$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WithinFrameScope
     * }
     */
    public static void WithinFrameScope(MemorySegment struct, boolean fieldValue) {
        struct.set(WithinFrameScope$LAYOUT, WithinFrameScope$OFFSET, fieldValue);
    }

    private static final OfBoolean WithinFrameScopeWithImplicitWindow$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WithinFrameScopeWithImplicitWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WithinFrameScopeWithImplicitWindow
     * }
     */
    public static final OfBoolean WithinFrameScopeWithImplicitWindow$layout() {
        return WithinFrameScopeWithImplicitWindow$LAYOUT;
    }

    private static final long WithinFrameScopeWithImplicitWindow$OFFSET = 5057;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WithinFrameScopeWithImplicitWindow
     * }
     */
    public static final long WithinFrameScopeWithImplicitWindow$offset() {
        return WithinFrameScopeWithImplicitWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WithinFrameScopeWithImplicitWindow
     * }
     */
    public static boolean WithinFrameScopeWithImplicitWindow(MemorySegment struct) {
        return struct.get(WithinFrameScopeWithImplicitWindow$LAYOUT, WithinFrameScopeWithImplicitWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WithinFrameScopeWithImplicitWindow
     * }
     */
    public static void WithinFrameScopeWithImplicitWindow(MemorySegment struct, boolean fieldValue) {
        struct.set(WithinFrameScopeWithImplicitWindow$LAYOUT, WithinFrameScopeWithImplicitWindow$OFFSET, fieldValue);
    }

    private static final OfBoolean WithinEndChild$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WithinEndChild"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WithinEndChild
     * }
     */
    public static final OfBoolean WithinEndChild$layout() {
        return WithinEndChild$LAYOUT;
    }

    private static final long WithinEndChild$OFFSET = 5058;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WithinEndChild
     * }
     */
    public static final long WithinEndChild$offset() {
        return WithinEndChild$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WithinEndChild
     * }
     */
    public static boolean WithinEndChild(MemorySegment struct) {
        return struct.get(WithinEndChild$LAYOUT, WithinEndChild$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WithinEndChild
     * }
     */
    public static void WithinEndChild(MemorySegment struct, boolean fieldValue) {
        struct.set(WithinEndChild$LAYOUT, WithinEndChild$OFFSET, fieldValue);
    }

    private static final OfBoolean GcCompactAll$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("GcCompactAll"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool GcCompactAll
     * }
     */
    public static final OfBoolean GcCompactAll$layout() {
        return GcCompactAll$LAYOUT;
    }

    private static final long GcCompactAll$OFFSET = 5059;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool GcCompactAll
     * }
     */
    public static final long GcCompactAll$offset() {
        return GcCompactAll$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool GcCompactAll
     * }
     */
    public static boolean GcCompactAll(MemorySegment struct) {
        return struct.get(GcCompactAll$LAYOUT, GcCompactAll$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool GcCompactAll
     * }
     */
    public static void GcCompactAll(MemorySegment struct, boolean fieldValue) {
        struct.set(GcCompactAll$LAYOUT, GcCompactAll$OFFSET, fieldValue);
    }

    private static final OfBoolean TestEngineHookItems$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("TestEngineHookItems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool TestEngineHookItems
     * }
     */
    public static final OfBoolean TestEngineHookItems$layout() {
        return TestEngineHookItems$LAYOUT;
    }

    private static final long TestEngineHookItems$OFFSET = 5060;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool TestEngineHookItems
     * }
     */
    public static final long TestEngineHookItems$offset() {
        return TestEngineHookItems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool TestEngineHookItems
     * }
     */
    public static boolean TestEngineHookItems(MemorySegment struct) {
        return struct.get(TestEngineHookItems$LAYOUT, TestEngineHookItems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool TestEngineHookItems
     * }
     */
    public static void TestEngineHookItems(MemorySegment struct, boolean fieldValue) {
        struct.set(TestEngineHookItems$LAYOUT, TestEngineHookItems$OFFSET, fieldValue);
    }

    private static final AddressLayout TestEngine$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TestEngine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *TestEngine
     * }
     */
    public static final AddressLayout TestEngine$layout() {
        return TestEngine$LAYOUT;
    }

    private static final long TestEngine$OFFSET = 5064;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *TestEngine
     * }
     */
    public static final long TestEngine$offset() {
        return TestEngine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *TestEngine
     * }
     */
    public static MemorySegment TestEngine(MemorySegment struct) {
        return struct.get(TestEngine$LAYOUT, TestEngine$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *TestEngine
     * }
     */
    public static void TestEngine(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TestEngine$LAYOUT, TestEngine$OFFSET, fieldValue);
    }

    private static final SequenceLayout ContextName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ContextName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char ContextName[16]
     * }
     */
    public static final SequenceLayout ContextName$layout() {
        return ContextName$LAYOUT;
    }

    private static final long ContextName$OFFSET = 5072;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char ContextName[16]
     * }
     */
    public static final long ContextName$offset() {
        return ContextName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char ContextName[16]
     * }
     */
    public static MemorySegment ContextName(MemorySegment struct) {
        return struct.asSlice(ContextName$OFFSET, ContextName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char ContextName[16]
     * }
     */
    public static void ContextName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ContextName$OFFSET, ContextName$LAYOUT.byteSize());
    }

    private static long[] ContextName$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char ContextName[16]
     * }
     */
    public static long[] ContextName$dimensions() {
        return ContextName$DIMS;
    }
    private static final VarHandle ContextName$ELEM_HANDLE = ContextName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char ContextName[16]
     * }
     */
    public static byte ContextName(MemorySegment struct, long index0) {
        return (byte)ContextName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char ContextName[16]
     * }
     */
    public static void ContextName(MemorySegment struct, long index0, byte fieldValue) {
        ContextName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout InputEventsQueue$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InputEventsQueue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiInputEvent InputEventsQueue
     * }
     */
    public static final GroupLayout InputEventsQueue$layout() {
        return InputEventsQueue$LAYOUT;
    }

    private static final long InputEventsQueue$OFFSET = 5088;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiInputEvent InputEventsQueue
     * }
     */
    public static final long InputEventsQueue$offset() {
        return InputEventsQueue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiInputEvent InputEventsQueue
     * }
     */
    public static MemorySegment InputEventsQueue(MemorySegment struct) {
        return struct.asSlice(InputEventsQueue$OFFSET, InputEventsQueue$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiInputEvent InputEventsQueue
     * }
     */
    public static void InputEventsQueue(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InputEventsQueue$OFFSET, InputEventsQueue$LAYOUT.byteSize());
    }

    private static final GroupLayout InputEventsTrail$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InputEventsTrail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiInputEvent InputEventsTrail
     * }
     */
    public static final GroupLayout InputEventsTrail$layout() {
        return InputEventsTrail$LAYOUT;
    }

    private static final long InputEventsTrail$OFFSET = 5104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiInputEvent InputEventsTrail
     * }
     */
    public static final long InputEventsTrail$offset() {
        return InputEventsTrail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiInputEvent InputEventsTrail
     * }
     */
    public static MemorySegment InputEventsTrail(MemorySegment struct) {
        return struct.asSlice(InputEventsTrail$OFFSET, InputEventsTrail$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiInputEvent InputEventsTrail
     * }
     */
    public static void InputEventsTrail(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InputEventsTrail$OFFSET, InputEventsTrail$LAYOUT.byteSize());
    }

    private static final OfInt InputEventsNextMouseSource$LAYOUT = (OfInt)$LAYOUT.select(groupElement("InputEventsNextMouseSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMouseSource InputEventsNextMouseSource
     * }
     */
    public static final OfInt InputEventsNextMouseSource$layout() {
        return InputEventsNextMouseSource$LAYOUT;
    }

    private static final long InputEventsNextMouseSource$OFFSET = 5120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMouseSource InputEventsNextMouseSource
     * }
     */
    public static final long InputEventsNextMouseSource$offset() {
        return InputEventsNextMouseSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMouseSource InputEventsNextMouseSource
     * }
     */
    public static int InputEventsNextMouseSource(MemorySegment struct) {
        return struct.get(InputEventsNextMouseSource$LAYOUT, InputEventsNextMouseSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMouseSource InputEventsNextMouseSource
     * }
     */
    public static void InputEventsNextMouseSource(MemorySegment struct, int fieldValue) {
        struct.set(InputEventsNextMouseSource$LAYOUT, InputEventsNextMouseSource$OFFSET, fieldValue);
    }

    private static final OfInt InputEventsNextEventId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("InputEventsNextEventId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 InputEventsNextEventId
     * }
     */
    public static final OfInt InputEventsNextEventId$layout() {
        return InputEventsNextEventId$LAYOUT;
    }

    private static final long InputEventsNextEventId$OFFSET = 5124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 InputEventsNextEventId
     * }
     */
    public static final long InputEventsNextEventId$offset() {
        return InputEventsNextEventId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 InputEventsNextEventId
     * }
     */
    public static int InputEventsNextEventId(MemorySegment struct) {
        return struct.get(InputEventsNextEventId$LAYOUT, InputEventsNextEventId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 InputEventsNextEventId
     * }
     */
    public static void InputEventsNextEventId(MemorySegment struct, int fieldValue) {
        struct.set(InputEventsNextEventId$LAYOUT, InputEventsNextEventId$OFFSET, fieldValue);
    }

    private static final GroupLayout Windows$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Windows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr Windows
     * }
     */
    public static final GroupLayout Windows$layout() {
        return Windows$LAYOUT;
    }

    private static final long Windows$OFFSET = 5128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr Windows
     * }
     */
    public static final long Windows$offset() {
        return Windows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr Windows
     * }
     */
    public static MemorySegment Windows(MemorySegment struct) {
        return struct.asSlice(Windows$OFFSET, Windows$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr Windows
     * }
     */
    public static void Windows(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Windows$OFFSET, Windows$LAYOUT.byteSize());
    }

    private static final GroupLayout WindowsFocusOrder$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowsFocusOrder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr WindowsFocusOrder
     * }
     */
    public static final GroupLayout WindowsFocusOrder$layout() {
        return WindowsFocusOrder$LAYOUT;
    }

    private static final long WindowsFocusOrder$OFFSET = 5144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr WindowsFocusOrder
     * }
     */
    public static final long WindowsFocusOrder$offset() {
        return WindowsFocusOrder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr WindowsFocusOrder
     * }
     */
    public static MemorySegment WindowsFocusOrder(MemorySegment struct) {
        return struct.asSlice(WindowsFocusOrder$OFFSET, WindowsFocusOrder$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr WindowsFocusOrder
     * }
     */
    public static void WindowsFocusOrder(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowsFocusOrder$OFFSET, WindowsFocusOrder$LAYOUT.byteSize());
    }

    private static final GroupLayout WindowsTempSortBuffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowsTempSortBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr WindowsTempSortBuffer
     * }
     */
    public static final GroupLayout WindowsTempSortBuffer$layout() {
        return WindowsTempSortBuffer$LAYOUT;
    }

    private static final long WindowsTempSortBuffer$OFFSET = 5160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr WindowsTempSortBuffer
     * }
     */
    public static final long WindowsTempSortBuffer$offset() {
        return WindowsTempSortBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr WindowsTempSortBuffer
     * }
     */
    public static MemorySegment WindowsTempSortBuffer(MemorySegment struct) {
        return struct.asSlice(WindowsTempSortBuffer$OFFSET, WindowsTempSortBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr WindowsTempSortBuffer
     * }
     */
    public static void WindowsTempSortBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowsTempSortBuffer$OFFSET, WindowsTempSortBuffer$LAYOUT.byteSize());
    }

    private static final GroupLayout CurrentWindowStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CurrentWindowStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowStackData CurrentWindowStack
     * }
     */
    public static final GroupLayout CurrentWindowStack$layout() {
        return CurrentWindowStack$LAYOUT;
    }

    private static final long CurrentWindowStack$OFFSET = 5176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowStackData CurrentWindowStack
     * }
     */
    public static final long CurrentWindowStack$offset() {
        return CurrentWindowStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowStackData CurrentWindowStack
     * }
     */
    public static MemorySegment CurrentWindowStack(MemorySegment struct) {
        return struct.asSlice(CurrentWindowStack$OFFSET, CurrentWindowStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowStackData CurrentWindowStack
     * }
     */
    public static void CurrentWindowStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CurrentWindowStack$OFFSET, CurrentWindowStack$LAYOUT.byteSize());
    }

    private static final GroupLayout WindowsById$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowsById"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiStorage WindowsById
     * }
     */
    public static final GroupLayout WindowsById$layout() {
        return WindowsById$LAYOUT;
    }

    private static final long WindowsById$OFFSET = 5192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiStorage WindowsById
     * }
     */
    public static final long WindowsById$offset() {
        return WindowsById$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiStorage WindowsById
     * }
     */
    public static MemorySegment WindowsById(MemorySegment struct) {
        return struct.asSlice(WindowsById$OFFSET, WindowsById$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiStorage WindowsById
     * }
     */
    public static void WindowsById(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowsById$OFFSET, WindowsById$LAYOUT.byteSize());
    }

    private static final OfInt WindowsActiveCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WindowsActiveCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int WindowsActiveCount
     * }
     */
    public static final OfInt WindowsActiveCount$layout() {
        return WindowsActiveCount$LAYOUT;
    }

    private static final long WindowsActiveCount$OFFSET = 5208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int WindowsActiveCount
     * }
     */
    public static final long WindowsActiveCount$offset() {
        return WindowsActiveCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int WindowsActiveCount
     * }
     */
    public static int WindowsActiveCount(MemorySegment struct) {
        return struct.get(WindowsActiveCount$LAYOUT, WindowsActiveCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int WindowsActiveCount
     * }
     */
    public static void WindowsActiveCount(MemorySegment struct, int fieldValue) {
        struct.set(WindowsActiveCount$LAYOUT, WindowsActiveCount$OFFSET, fieldValue);
    }

    private static final GroupLayout WindowsHoverPadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowsHoverPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WindowsHoverPadding
     * }
     */
    public static final GroupLayout WindowsHoverPadding$layout() {
        return WindowsHoverPadding$LAYOUT;
    }

    private static final long WindowsHoverPadding$OFFSET = 5212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WindowsHoverPadding
     * }
     */
    public static final long WindowsHoverPadding$offset() {
        return WindowsHoverPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WindowsHoverPadding
     * }
     */
    public static MemorySegment WindowsHoverPadding(MemorySegment struct) {
        return struct.asSlice(WindowsHoverPadding$OFFSET, WindowsHoverPadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WindowsHoverPadding
     * }
     */
    public static void WindowsHoverPadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowsHoverPadding$OFFSET, WindowsHoverPadding$LAYOUT.byteSize());
    }

    private static final OfInt DebugBreakInWindow$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugBreakInWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DebugBreakInWindow
     * }
     */
    public static final OfInt DebugBreakInWindow$layout() {
        return DebugBreakInWindow$LAYOUT;
    }

    private static final long DebugBreakInWindow$OFFSET = 5220;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DebugBreakInWindow
     * }
     */
    public static final long DebugBreakInWindow$offset() {
        return DebugBreakInWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DebugBreakInWindow
     * }
     */
    public static int DebugBreakInWindow(MemorySegment struct) {
        return struct.get(DebugBreakInWindow$LAYOUT, DebugBreakInWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DebugBreakInWindow
     * }
     */
    public static void DebugBreakInWindow(MemorySegment struct, int fieldValue) {
        struct.set(DebugBreakInWindow$LAYOUT, DebugBreakInWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout CurrentWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CurrentWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *CurrentWindow
     * }
     */
    public static final AddressLayout CurrentWindow$layout() {
        return CurrentWindow$LAYOUT;
    }

    private static final long CurrentWindow$OFFSET = 5224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *CurrentWindow
     * }
     */
    public static final long CurrentWindow$offset() {
        return CurrentWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *CurrentWindow
     * }
     */
    public static MemorySegment CurrentWindow(MemorySegment struct) {
        return struct.get(CurrentWindow$LAYOUT, CurrentWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *CurrentWindow
     * }
     */
    public static void CurrentWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CurrentWindow$LAYOUT, CurrentWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout HoveredWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("HoveredWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindow
     * }
     */
    public static final AddressLayout HoveredWindow$layout() {
        return HoveredWindow$LAYOUT;
    }

    private static final long HoveredWindow$OFFSET = 5232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindow
     * }
     */
    public static final long HoveredWindow$offset() {
        return HoveredWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindow
     * }
     */
    public static MemorySegment HoveredWindow(MemorySegment struct) {
        return struct.get(HoveredWindow$LAYOUT, HoveredWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindow
     * }
     */
    public static void HoveredWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(HoveredWindow$LAYOUT, HoveredWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout HoveredWindowUnderMovingWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("HoveredWindowUnderMovingWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindowUnderMovingWindow
     * }
     */
    public static final AddressLayout HoveredWindowUnderMovingWindow$layout() {
        return HoveredWindowUnderMovingWindow$LAYOUT;
    }

    private static final long HoveredWindowUnderMovingWindow$OFFSET = 5240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindowUnderMovingWindow
     * }
     */
    public static final long HoveredWindowUnderMovingWindow$offset() {
        return HoveredWindowUnderMovingWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindowUnderMovingWindow
     * }
     */
    public static MemorySegment HoveredWindowUnderMovingWindow(MemorySegment struct) {
        return struct.get(HoveredWindowUnderMovingWindow$LAYOUT, HoveredWindowUnderMovingWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindowUnderMovingWindow
     * }
     */
    public static void HoveredWindowUnderMovingWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(HoveredWindowUnderMovingWindow$LAYOUT, HoveredWindowUnderMovingWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout HoveredWindowBeforeClear$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("HoveredWindowBeforeClear"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindowBeforeClear
     * }
     */
    public static final AddressLayout HoveredWindowBeforeClear$layout() {
        return HoveredWindowBeforeClear$LAYOUT;
    }

    private static final long HoveredWindowBeforeClear$OFFSET = 5248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindowBeforeClear
     * }
     */
    public static final long HoveredWindowBeforeClear$offset() {
        return HoveredWindowBeforeClear$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindowBeforeClear
     * }
     */
    public static MemorySegment HoveredWindowBeforeClear(MemorySegment struct) {
        return struct.get(HoveredWindowBeforeClear$LAYOUT, HoveredWindowBeforeClear$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *HoveredWindowBeforeClear
     * }
     */
    public static void HoveredWindowBeforeClear(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(HoveredWindowBeforeClear$LAYOUT, HoveredWindowBeforeClear$OFFSET, fieldValue);
    }

    private static final AddressLayout MovingWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("MovingWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *MovingWindow
     * }
     */
    public static final AddressLayout MovingWindow$layout() {
        return MovingWindow$LAYOUT;
    }

    private static final long MovingWindow$OFFSET = 5256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *MovingWindow
     * }
     */
    public static final long MovingWindow$offset() {
        return MovingWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *MovingWindow
     * }
     */
    public static MemorySegment MovingWindow(MemorySegment struct) {
        return struct.get(MovingWindow$LAYOUT, MovingWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *MovingWindow
     * }
     */
    public static void MovingWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(MovingWindow$LAYOUT, MovingWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout WheelingWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("WheelingWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *WheelingWindow
     * }
     */
    public static final AddressLayout WheelingWindow$layout() {
        return WheelingWindow$LAYOUT;
    }

    private static final long WheelingWindow$OFFSET = 5264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *WheelingWindow
     * }
     */
    public static final long WheelingWindow$offset() {
        return WheelingWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *WheelingWindow
     * }
     */
    public static MemorySegment WheelingWindow(MemorySegment struct) {
        return struct.get(WheelingWindow$LAYOUT, WheelingWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *WheelingWindow
     * }
     */
    public static void WheelingWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(WheelingWindow$LAYOUT, WheelingWindow$OFFSET, fieldValue);
    }

    private static final GroupLayout WheelingWindowRefMousePos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WheelingWindowRefMousePos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WheelingWindowRefMousePos
     * }
     */
    public static final GroupLayout WheelingWindowRefMousePos$layout() {
        return WheelingWindowRefMousePos$LAYOUT;
    }

    private static final long WheelingWindowRefMousePos$OFFSET = 5272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WheelingWindowRefMousePos
     * }
     */
    public static final long WheelingWindowRefMousePos$offset() {
        return WheelingWindowRefMousePos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WheelingWindowRefMousePos
     * }
     */
    public static MemorySegment WheelingWindowRefMousePos(MemorySegment struct) {
        return struct.asSlice(WheelingWindowRefMousePos$OFFSET, WheelingWindowRefMousePos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WheelingWindowRefMousePos
     * }
     */
    public static void WheelingWindowRefMousePos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WheelingWindowRefMousePos$OFFSET, WheelingWindowRefMousePos$LAYOUT.byteSize());
    }

    private static final OfInt WheelingWindowStartFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WheelingWindowStartFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int WheelingWindowStartFrame
     * }
     */
    public static final OfInt WheelingWindowStartFrame$layout() {
        return WheelingWindowStartFrame$LAYOUT;
    }

    private static final long WheelingWindowStartFrame$OFFSET = 5280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int WheelingWindowStartFrame
     * }
     */
    public static final long WheelingWindowStartFrame$offset() {
        return WheelingWindowStartFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int WheelingWindowStartFrame
     * }
     */
    public static int WheelingWindowStartFrame(MemorySegment struct) {
        return struct.get(WheelingWindowStartFrame$LAYOUT, WheelingWindowStartFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int WheelingWindowStartFrame
     * }
     */
    public static void WheelingWindowStartFrame(MemorySegment struct, int fieldValue) {
        struct.set(WheelingWindowStartFrame$LAYOUT, WheelingWindowStartFrame$OFFSET, fieldValue);
    }

    private static final OfInt WheelingWindowScrolledFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WheelingWindowScrolledFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int WheelingWindowScrolledFrame
     * }
     */
    public static final OfInt WheelingWindowScrolledFrame$layout() {
        return WheelingWindowScrolledFrame$LAYOUT;
    }

    private static final long WheelingWindowScrolledFrame$OFFSET = 5284;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int WheelingWindowScrolledFrame
     * }
     */
    public static final long WheelingWindowScrolledFrame$offset() {
        return WheelingWindowScrolledFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int WheelingWindowScrolledFrame
     * }
     */
    public static int WheelingWindowScrolledFrame(MemorySegment struct) {
        return struct.get(WheelingWindowScrolledFrame$LAYOUT, WheelingWindowScrolledFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int WheelingWindowScrolledFrame
     * }
     */
    public static void WheelingWindowScrolledFrame(MemorySegment struct, int fieldValue) {
        struct.set(WheelingWindowScrolledFrame$LAYOUT, WheelingWindowScrolledFrame$OFFSET, fieldValue);
    }

    private static final OfFloat WheelingWindowReleaseTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WheelingWindowReleaseTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WheelingWindowReleaseTimer
     * }
     */
    public static final OfFloat WheelingWindowReleaseTimer$layout() {
        return WheelingWindowReleaseTimer$LAYOUT;
    }

    private static final long WheelingWindowReleaseTimer$OFFSET = 5288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WheelingWindowReleaseTimer
     * }
     */
    public static final long WheelingWindowReleaseTimer$offset() {
        return WheelingWindowReleaseTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WheelingWindowReleaseTimer
     * }
     */
    public static float WheelingWindowReleaseTimer(MemorySegment struct) {
        return struct.get(WheelingWindowReleaseTimer$LAYOUT, WheelingWindowReleaseTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WheelingWindowReleaseTimer
     * }
     */
    public static void WheelingWindowReleaseTimer(MemorySegment struct, float fieldValue) {
        struct.set(WheelingWindowReleaseTimer$LAYOUT, WheelingWindowReleaseTimer$OFFSET, fieldValue);
    }

    private static final GroupLayout WheelingWindowWheelRemainder$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WheelingWindowWheelRemainder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WheelingWindowWheelRemainder
     * }
     */
    public static final GroupLayout WheelingWindowWheelRemainder$layout() {
        return WheelingWindowWheelRemainder$LAYOUT;
    }

    private static final long WheelingWindowWheelRemainder$OFFSET = 5292;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WheelingWindowWheelRemainder
     * }
     */
    public static final long WheelingWindowWheelRemainder$offset() {
        return WheelingWindowWheelRemainder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WheelingWindowWheelRemainder
     * }
     */
    public static MemorySegment WheelingWindowWheelRemainder(MemorySegment struct) {
        return struct.asSlice(WheelingWindowWheelRemainder$OFFSET, WheelingWindowWheelRemainder$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WheelingWindowWheelRemainder
     * }
     */
    public static void WheelingWindowWheelRemainder(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WheelingWindowWheelRemainder$OFFSET, WheelingWindowWheelRemainder$LAYOUT.byteSize());
    }

    private static final GroupLayout WheelingAxisAvg$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WheelingAxisAvg"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WheelingAxisAvg
     * }
     */
    public static final GroupLayout WheelingAxisAvg$layout() {
        return WheelingAxisAvg$LAYOUT;
    }

    private static final long WheelingAxisAvg$OFFSET = 5300;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WheelingAxisAvg
     * }
     */
    public static final long WheelingAxisAvg$offset() {
        return WheelingAxisAvg$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WheelingAxisAvg
     * }
     */
    public static MemorySegment WheelingAxisAvg(MemorySegment struct) {
        return struct.asSlice(WheelingAxisAvg$OFFSET, WheelingAxisAvg$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WheelingAxisAvg
     * }
     */
    public static void WheelingAxisAvg(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WheelingAxisAvg$OFFSET, WheelingAxisAvg$LAYOUT.byteSize());
    }

    private static final OfInt DebugHookIdInfo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugHookIdInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DebugHookIdInfo
     * }
     */
    public static final OfInt DebugHookIdInfo$layout() {
        return DebugHookIdInfo$LAYOUT;
    }

    private static final long DebugHookIdInfo$OFFSET = 5308;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DebugHookIdInfo
     * }
     */
    public static final long DebugHookIdInfo$offset() {
        return DebugHookIdInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DebugHookIdInfo
     * }
     */
    public static int DebugHookIdInfo(MemorySegment struct) {
        return struct.get(DebugHookIdInfo$LAYOUT, DebugHookIdInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DebugHookIdInfo
     * }
     */
    public static void DebugHookIdInfo(MemorySegment struct, int fieldValue) {
        struct.set(DebugHookIdInfo$LAYOUT, DebugHookIdInfo$OFFSET, fieldValue);
    }

    private static final OfInt HoveredId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HoveredId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID HoveredId
     * }
     */
    public static final OfInt HoveredId$layout() {
        return HoveredId$LAYOUT;
    }

    private static final long HoveredId$OFFSET = 5312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID HoveredId
     * }
     */
    public static final long HoveredId$offset() {
        return HoveredId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID HoveredId
     * }
     */
    public static int HoveredId(MemorySegment struct) {
        return struct.get(HoveredId$LAYOUT, HoveredId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID HoveredId
     * }
     */
    public static void HoveredId(MemorySegment struct, int fieldValue) {
        struct.set(HoveredId$LAYOUT, HoveredId$OFFSET, fieldValue);
    }

    private static final OfInt HoveredIdPreviousFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HoveredIdPreviousFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID HoveredIdPreviousFrame
     * }
     */
    public static final OfInt HoveredIdPreviousFrame$layout() {
        return HoveredIdPreviousFrame$LAYOUT;
    }

    private static final long HoveredIdPreviousFrame$OFFSET = 5316;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID HoveredIdPreviousFrame
     * }
     */
    public static final long HoveredIdPreviousFrame$offset() {
        return HoveredIdPreviousFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID HoveredIdPreviousFrame
     * }
     */
    public static int HoveredIdPreviousFrame(MemorySegment struct) {
        return struct.get(HoveredIdPreviousFrame$LAYOUT, HoveredIdPreviousFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID HoveredIdPreviousFrame
     * }
     */
    public static void HoveredIdPreviousFrame(MemorySegment struct, int fieldValue) {
        struct.set(HoveredIdPreviousFrame$LAYOUT, HoveredIdPreviousFrame$OFFSET, fieldValue);
    }

    private static final OfFloat HoveredIdTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("HoveredIdTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float HoveredIdTimer
     * }
     */
    public static final OfFloat HoveredIdTimer$layout() {
        return HoveredIdTimer$LAYOUT;
    }

    private static final long HoveredIdTimer$OFFSET = 5320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float HoveredIdTimer
     * }
     */
    public static final long HoveredIdTimer$offset() {
        return HoveredIdTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float HoveredIdTimer
     * }
     */
    public static float HoveredIdTimer(MemorySegment struct) {
        return struct.get(HoveredIdTimer$LAYOUT, HoveredIdTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float HoveredIdTimer
     * }
     */
    public static void HoveredIdTimer(MemorySegment struct, float fieldValue) {
        struct.set(HoveredIdTimer$LAYOUT, HoveredIdTimer$OFFSET, fieldValue);
    }

    private static final OfFloat HoveredIdNotActiveTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("HoveredIdNotActiveTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float HoveredIdNotActiveTimer
     * }
     */
    public static final OfFloat HoveredIdNotActiveTimer$layout() {
        return HoveredIdNotActiveTimer$LAYOUT;
    }

    private static final long HoveredIdNotActiveTimer$OFFSET = 5324;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float HoveredIdNotActiveTimer
     * }
     */
    public static final long HoveredIdNotActiveTimer$offset() {
        return HoveredIdNotActiveTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float HoveredIdNotActiveTimer
     * }
     */
    public static float HoveredIdNotActiveTimer(MemorySegment struct) {
        return struct.get(HoveredIdNotActiveTimer$LAYOUT, HoveredIdNotActiveTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float HoveredIdNotActiveTimer
     * }
     */
    public static void HoveredIdNotActiveTimer(MemorySegment struct, float fieldValue) {
        struct.set(HoveredIdNotActiveTimer$LAYOUT, HoveredIdNotActiveTimer$OFFSET, fieldValue);
    }

    private static final OfBoolean HoveredIdAllowOverlap$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("HoveredIdAllowOverlap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool HoveredIdAllowOverlap
     * }
     */
    public static final OfBoolean HoveredIdAllowOverlap$layout() {
        return HoveredIdAllowOverlap$LAYOUT;
    }

    private static final long HoveredIdAllowOverlap$OFFSET = 5328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool HoveredIdAllowOverlap
     * }
     */
    public static final long HoveredIdAllowOverlap$offset() {
        return HoveredIdAllowOverlap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool HoveredIdAllowOverlap
     * }
     */
    public static boolean HoveredIdAllowOverlap(MemorySegment struct) {
        return struct.get(HoveredIdAllowOverlap$LAYOUT, HoveredIdAllowOverlap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool HoveredIdAllowOverlap
     * }
     */
    public static void HoveredIdAllowOverlap(MemorySegment struct, boolean fieldValue) {
        struct.set(HoveredIdAllowOverlap$LAYOUT, HoveredIdAllowOverlap$OFFSET, fieldValue);
    }

    private static final OfBoolean HoveredIdIsDisabled$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("HoveredIdIsDisabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool HoveredIdIsDisabled
     * }
     */
    public static final OfBoolean HoveredIdIsDisabled$layout() {
        return HoveredIdIsDisabled$LAYOUT;
    }

    private static final long HoveredIdIsDisabled$OFFSET = 5329;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool HoveredIdIsDisabled
     * }
     */
    public static final long HoveredIdIsDisabled$offset() {
        return HoveredIdIsDisabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool HoveredIdIsDisabled
     * }
     */
    public static boolean HoveredIdIsDisabled(MemorySegment struct) {
        return struct.get(HoveredIdIsDisabled$LAYOUT, HoveredIdIsDisabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool HoveredIdIsDisabled
     * }
     */
    public static void HoveredIdIsDisabled(MemorySegment struct, boolean fieldValue) {
        struct.set(HoveredIdIsDisabled$LAYOUT, HoveredIdIsDisabled$OFFSET, fieldValue);
    }

    private static final OfBoolean ItemUnclipByLog$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ItemUnclipByLog"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ItemUnclipByLog
     * }
     */
    public static final OfBoolean ItemUnclipByLog$layout() {
        return ItemUnclipByLog$LAYOUT;
    }

    private static final long ItemUnclipByLog$OFFSET = 5330;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ItemUnclipByLog
     * }
     */
    public static final long ItemUnclipByLog$offset() {
        return ItemUnclipByLog$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ItemUnclipByLog
     * }
     */
    public static boolean ItemUnclipByLog(MemorySegment struct) {
        return struct.get(ItemUnclipByLog$LAYOUT, ItemUnclipByLog$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ItemUnclipByLog
     * }
     */
    public static void ItemUnclipByLog(MemorySegment struct, boolean fieldValue) {
        struct.set(ItemUnclipByLog$LAYOUT, ItemUnclipByLog$OFFSET, fieldValue);
    }

    private static final OfInt ActiveId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ActiveId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ActiveId
     * }
     */
    public static final OfInt ActiveId$layout() {
        return ActiveId$LAYOUT;
    }

    private static final long ActiveId$OFFSET = 5332;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ActiveId
     * }
     */
    public static final long ActiveId$offset() {
        return ActiveId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ActiveId
     * }
     */
    public static int ActiveId(MemorySegment struct) {
        return struct.get(ActiveId$LAYOUT, ActiveId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ActiveId
     * }
     */
    public static void ActiveId(MemorySegment struct, int fieldValue) {
        struct.set(ActiveId$LAYOUT, ActiveId$OFFSET, fieldValue);
    }

    private static final OfInt ActiveIdIsAlive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ActiveIdIsAlive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ActiveIdIsAlive
     * }
     */
    public static final OfInt ActiveIdIsAlive$layout() {
        return ActiveIdIsAlive$LAYOUT;
    }

    private static final long ActiveIdIsAlive$OFFSET = 5336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ActiveIdIsAlive
     * }
     */
    public static final long ActiveIdIsAlive$offset() {
        return ActiveIdIsAlive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ActiveIdIsAlive
     * }
     */
    public static int ActiveIdIsAlive(MemorySegment struct) {
        return struct.get(ActiveIdIsAlive$LAYOUT, ActiveIdIsAlive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ActiveIdIsAlive
     * }
     */
    public static void ActiveIdIsAlive(MemorySegment struct, int fieldValue) {
        struct.set(ActiveIdIsAlive$LAYOUT, ActiveIdIsAlive$OFFSET, fieldValue);
    }

    private static final OfFloat ActiveIdTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ActiveIdTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ActiveIdTimer
     * }
     */
    public static final OfFloat ActiveIdTimer$layout() {
        return ActiveIdTimer$LAYOUT;
    }

    private static final long ActiveIdTimer$OFFSET = 5340;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ActiveIdTimer
     * }
     */
    public static final long ActiveIdTimer$offset() {
        return ActiveIdTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ActiveIdTimer
     * }
     */
    public static float ActiveIdTimer(MemorySegment struct) {
        return struct.get(ActiveIdTimer$LAYOUT, ActiveIdTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ActiveIdTimer
     * }
     */
    public static void ActiveIdTimer(MemorySegment struct, float fieldValue) {
        struct.set(ActiveIdTimer$LAYOUT, ActiveIdTimer$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdIsJustActivated$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdIsJustActivated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdIsJustActivated
     * }
     */
    public static final OfBoolean ActiveIdIsJustActivated$layout() {
        return ActiveIdIsJustActivated$LAYOUT;
    }

    private static final long ActiveIdIsJustActivated$OFFSET = 5344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdIsJustActivated
     * }
     */
    public static final long ActiveIdIsJustActivated$offset() {
        return ActiveIdIsJustActivated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdIsJustActivated
     * }
     */
    public static boolean ActiveIdIsJustActivated(MemorySegment struct) {
        return struct.get(ActiveIdIsJustActivated$LAYOUT, ActiveIdIsJustActivated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdIsJustActivated
     * }
     */
    public static void ActiveIdIsJustActivated(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdIsJustActivated$LAYOUT, ActiveIdIsJustActivated$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdAllowOverlap$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdAllowOverlap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdAllowOverlap
     * }
     */
    public static final OfBoolean ActiveIdAllowOverlap$layout() {
        return ActiveIdAllowOverlap$LAYOUT;
    }

    private static final long ActiveIdAllowOverlap$OFFSET = 5345;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdAllowOverlap
     * }
     */
    public static final long ActiveIdAllowOverlap$offset() {
        return ActiveIdAllowOverlap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdAllowOverlap
     * }
     */
    public static boolean ActiveIdAllowOverlap(MemorySegment struct) {
        return struct.get(ActiveIdAllowOverlap$LAYOUT, ActiveIdAllowOverlap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdAllowOverlap
     * }
     */
    public static void ActiveIdAllowOverlap(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdAllowOverlap$LAYOUT, ActiveIdAllowOverlap$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdNoClearOnFocusLoss$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdNoClearOnFocusLoss"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdNoClearOnFocusLoss
     * }
     */
    public static final OfBoolean ActiveIdNoClearOnFocusLoss$layout() {
        return ActiveIdNoClearOnFocusLoss$LAYOUT;
    }

    private static final long ActiveIdNoClearOnFocusLoss$OFFSET = 5346;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdNoClearOnFocusLoss
     * }
     */
    public static final long ActiveIdNoClearOnFocusLoss$offset() {
        return ActiveIdNoClearOnFocusLoss$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdNoClearOnFocusLoss
     * }
     */
    public static boolean ActiveIdNoClearOnFocusLoss(MemorySegment struct) {
        return struct.get(ActiveIdNoClearOnFocusLoss$LAYOUT, ActiveIdNoClearOnFocusLoss$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdNoClearOnFocusLoss
     * }
     */
    public static void ActiveIdNoClearOnFocusLoss(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdNoClearOnFocusLoss$LAYOUT, ActiveIdNoClearOnFocusLoss$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdHasBeenPressedBefore$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdHasBeenPressedBefore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenPressedBefore
     * }
     */
    public static final OfBoolean ActiveIdHasBeenPressedBefore$layout() {
        return ActiveIdHasBeenPressedBefore$LAYOUT;
    }

    private static final long ActiveIdHasBeenPressedBefore$OFFSET = 5347;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenPressedBefore
     * }
     */
    public static final long ActiveIdHasBeenPressedBefore$offset() {
        return ActiveIdHasBeenPressedBefore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenPressedBefore
     * }
     */
    public static boolean ActiveIdHasBeenPressedBefore(MemorySegment struct) {
        return struct.get(ActiveIdHasBeenPressedBefore$LAYOUT, ActiveIdHasBeenPressedBefore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenPressedBefore
     * }
     */
    public static void ActiveIdHasBeenPressedBefore(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdHasBeenPressedBefore$LAYOUT, ActiveIdHasBeenPressedBefore$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdHasBeenEditedBefore$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdHasBeenEditedBefore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenEditedBefore
     * }
     */
    public static final OfBoolean ActiveIdHasBeenEditedBefore$layout() {
        return ActiveIdHasBeenEditedBefore$LAYOUT;
    }

    private static final long ActiveIdHasBeenEditedBefore$OFFSET = 5348;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenEditedBefore
     * }
     */
    public static final long ActiveIdHasBeenEditedBefore$offset() {
        return ActiveIdHasBeenEditedBefore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenEditedBefore
     * }
     */
    public static boolean ActiveIdHasBeenEditedBefore(MemorySegment struct) {
        return struct.get(ActiveIdHasBeenEditedBefore$LAYOUT, ActiveIdHasBeenEditedBefore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenEditedBefore
     * }
     */
    public static void ActiveIdHasBeenEditedBefore(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdHasBeenEditedBefore$LAYOUT, ActiveIdHasBeenEditedBefore$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdHasBeenEditedThisFrame$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdHasBeenEditedThisFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenEditedThisFrame
     * }
     */
    public static final OfBoolean ActiveIdHasBeenEditedThisFrame$layout() {
        return ActiveIdHasBeenEditedThisFrame$LAYOUT;
    }

    private static final long ActiveIdHasBeenEditedThisFrame$OFFSET = 5349;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenEditedThisFrame
     * }
     */
    public static final long ActiveIdHasBeenEditedThisFrame$offset() {
        return ActiveIdHasBeenEditedThisFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenEditedThisFrame
     * }
     */
    public static boolean ActiveIdHasBeenEditedThisFrame(MemorySegment struct) {
        return struct.get(ActiveIdHasBeenEditedThisFrame$LAYOUT, ActiveIdHasBeenEditedThisFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdHasBeenEditedThisFrame
     * }
     */
    public static void ActiveIdHasBeenEditedThisFrame(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdHasBeenEditedThisFrame$LAYOUT, ActiveIdHasBeenEditedThisFrame$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdFromShortcut$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdFromShortcut"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdFromShortcut
     * }
     */
    public static final OfBoolean ActiveIdFromShortcut$layout() {
        return ActiveIdFromShortcut$LAYOUT;
    }

    private static final long ActiveIdFromShortcut$OFFSET = 5350;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdFromShortcut
     * }
     */
    public static final long ActiveIdFromShortcut$offset() {
        return ActiveIdFromShortcut$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdFromShortcut
     * }
     */
    public static boolean ActiveIdFromShortcut(MemorySegment struct) {
        return struct.get(ActiveIdFromShortcut$LAYOUT, ActiveIdFromShortcut$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdFromShortcut
     * }
     */
    public static void ActiveIdFromShortcut(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdFromShortcut$LAYOUT, ActiveIdFromShortcut$OFFSET, fieldValue);
    }

    private static final GroupLayout ActiveIdClickOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ActiveIdClickOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ActiveIdClickOffset
     * }
     */
    public static final GroupLayout ActiveIdClickOffset$layout() {
        return ActiveIdClickOffset$LAYOUT;
    }

    private static final long ActiveIdClickOffset$OFFSET = 5352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ActiveIdClickOffset
     * }
     */
    public static final long ActiveIdClickOffset$offset() {
        return ActiveIdClickOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ActiveIdClickOffset
     * }
     */
    public static MemorySegment ActiveIdClickOffset(MemorySegment struct) {
        return struct.asSlice(ActiveIdClickOffset$OFFSET, ActiveIdClickOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ActiveIdClickOffset
     * }
     */
    public static void ActiveIdClickOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ActiveIdClickOffset$OFFSET, ActiveIdClickOffset$LAYOUT.byteSize());
    }

    private static final AddressLayout ActiveIdWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ActiveIdWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *ActiveIdWindow
     * }
     */
    public static final AddressLayout ActiveIdWindow$layout() {
        return ActiveIdWindow$LAYOUT;
    }

    private static final long ActiveIdWindow$OFFSET = 5360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *ActiveIdWindow
     * }
     */
    public static final long ActiveIdWindow$offset() {
        return ActiveIdWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ActiveIdWindow
     * }
     */
    public static MemorySegment ActiveIdWindow(MemorySegment struct) {
        return struct.get(ActiveIdWindow$LAYOUT, ActiveIdWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ActiveIdWindow
     * }
     */
    public static void ActiveIdWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ActiveIdWindow$LAYOUT, ActiveIdWindow$OFFSET, fieldValue);
    }

    private static final OfInt ActiveIdSource$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ActiveIdSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputSource ActiveIdSource
     * }
     */
    public static final OfInt ActiveIdSource$layout() {
        return ActiveIdSource$LAYOUT;
    }

    private static final long ActiveIdSource$OFFSET = 5368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputSource ActiveIdSource
     * }
     */
    public static final long ActiveIdSource$offset() {
        return ActiveIdSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputSource ActiveIdSource
     * }
     */
    public static int ActiveIdSource(MemorySegment struct) {
        return struct.get(ActiveIdSource$LAYOUT, ActiveIdSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputSource ActiveIdSource
     * }
     */
    public static void ActiveIdSource(MemorySegment struct, int fieldValue) {
        struct.set(ActiveIdSource$LAYOUT, ActiveIdSource$OFFSET, fieldValue);
    }

    private static final OfInt ActiveIdPreviousFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ActiveIdPreviousFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ActiveIdPreviousFrame
     * }
     */
    public static final OfInt ActiveIdPreviousFrame$layout() {
        return ActiveIdPreviousFrame$LAYOUT;
    }

    private static final long ActiveIdPreviousFrame$OFFSET = 5372;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ActiveIdPreviousFrame
     * }
     */
    public static final long ActiveIdPreviousFrame$offset() {
        return ActiveIdPreviousFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ActiveIdPreviousFrame
     * }
     */
    public static int ActiveIdPreviousFrame(MemorySegment struct) {
        return struct.get(ActiveIdPreviousFrame$LAYOUT, ActiveIdPreviousFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ActiveIdPreviousFrame
     * }
     */
    public static void ActiveIdPreviousFrame(MemorySegment struct, int fieldValue) {
        struct.set(ActiveIdPreviousFrame$LAYOUT, ActiveIdPreviousFrame$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdPreviousFrameIsAlive$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdPreviousFrameIsAlive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdPreviousFrameIsAlive
     * }
     */
    public static final OfBoolean ActiveIdPreviousFrameIsAlive$layout() {
        return ActiveIdPreviousFrameIsAlive$LAYOUT;
    }

    private static final long ActiveIdPreviousFrameIsAlive$OFFSET = 5376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdPreviousFrameIsAlive
     * }
     */
    public static final long ActiveIdPreviousFrameIsAlive$offset() {
        return ActiveIdPreviousFrameIsAlive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdPreviousFrameIsAlive
     * }
     */
    public static boolean ActiveIdPreviousFrameIsAlive(MemorySegment struct) {
        return struct.get(ActiveIdPreviousFrameIsAlive$LAYOUT, ActiveIdPreviousFrameIsAlive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdPreviousFrameIsAlive
     * }
     */
    public static void ActiveIdPreviousFrameIsAlive(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdPreviousFrameIsAlive$LAYOUT, ActiveIdPreviousFrameIsAlive$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdPreviousFrameHasBeenEditedBefore$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdPreviousFrameHasBeenEditedBefore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdPreviousFrameHasBeenEditedBefore
     * }
     */
    public static final OfBoolean ActiveIdPreviousFrameHasBeenEditedBefore$layout() {
        return ActiveIdPreviousFrameHasBeenEditedBefore$LAYOUT;
    }

    private static final long ActiveIdPreviousFrameHasBeenEditedBefore$OFFSET = 5377;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdPreviousFrameHasBeenEditedBefore
     * }
     */
    public static final long ActiveIdPreviousFrameHasBeenEditedBefore$offset() {
        return ActiveIdPreviousFrameHasBeenEditedBefore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdPreviousFrameHasBeenEditedBefore
     * }
     */
    public static boolean ActiveIdPreviousFrameHasBeenEditedBefore(MemorySegment struct) {
        return struct.get(ActiveIdPreviousFrameHasBeenEditedBefore$LAYOUT, ActiveIdPreviousFrameHasBeenEditedBefore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdPreviousFrameHasBeenEditedBefore
     * }
     */
    public static void ActiveIdPreviousFrameHasBeenEditedBefore(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdPreviousFrameHasBeenEditedBefore$LAYOUT, ActiveIdPreviousFrameHasBeenEditedBefore$OFFSET, fieldValue);
    }

    private static final AddressLayout ActiveIdPreviousFrameWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ActiveIdPreviousFrameWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *ActiveIdPreviousFrameWindow
     * }
     */
    public static final AddressLayout ActiveIdPreviousFrameWindow$layout() {
        return ActiveIdPreviousFrameWindow$LAYOUT;
    }

    private static final long ActiveIdPreviousFrameWindow$OFFSET = 5384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *ActiveIdPreviousFrameWindow
     * }
     */
    public static final long ActiveIdPreviousFrameWindow$offset() {
        return ActiveIdPreviousFrameWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ActiveIdPreviousFrameWindow
     * }
     */
    public static MemorySegment ActiveIdPreviousFrameWindow(MemorySegment struct) {
        return struct.get(ActiveIdPreviousFrameWindow$LAYOUT, ActiveIdPreviousFrameWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ActiveIdPreviousFrameWindow
     * }
     */
    public static void ActiveIdPreviousFrameWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ActiveIdPreviousFrameWindow$LAYOUT, ActiveIdPreviousFrameWindow$OFFSET, fieldValue);
    }

    private static final OfInt LastActiveId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastActiveId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID LastActiveId
     * }
     */
    public static final OfInt LastActiveId$layout() {
        return LastActiveId$LAYOUT;
    }

    private static final long LastActiveId$OFFSET = 5392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID LastActiveId
     * }
     */
    public static final long LastActiveId$offset() {
        return LastActiveId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID LastActiveId
     * }
     */
    public static int LastActiveId(MemorySegment struct) {
        return struct.get(LastActiveId$LAYOUT, LastActiveId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID LastActiveId
     * }
     */
    public static void LastActiveId(MemorySegment struct, int fieldValue) {
        struct.set(LastActiveId$LAYOUT, LastActiveId$OFFSET, fieldValue);
    }

    private static final OfFloat LastActiveIdTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("LastActiveIdTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float LastActiveIdTimer
     * }
     */
    public static final OfFloat LastActiveIdTimer$layout() {
        return LastActiveIdTimer$LAYOUT;
    }

    private static final long LastActiveIdTimer$OFFSET = 5396;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float LastActiveIdTimer
     * }
     */
    public static final long LastActiveIdTimer$offset() {
        return LastActiveIdTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float LastActiveIdTimer
     * }
     */
    public static float LastActiveIdTimer(MemorySegment struct) {
        return struct.get(LastActiveIdTimer$LAYOUT, LastActiveIdTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float LastActiveIdTimer
     * }
     */
    public static void LastActiveIdTimer(MemorySegment struct, float fieldValue) {
        struct.set(LastActiveIdTimer$LAYOUT, LastActiveIdTimer$OFFSET, fieldValue);
    }

    private static final OfDouble LastKeyModsChangeTime$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("LastKeyModsChangeTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double LastKeyModsChangeTime
     * }
     */
    public static final OfDouble LastKeyModsChangeTime$layout() {
        return LastKeyModsChangeTime$LAYOUT;
    }

    private static final long LastKeyModsChangeTime$OFFSET = 5400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double LastKeyModsChangeTime
     * }
     */
    public static final long LastKeyModsChangeTime$offset() {
        return LastKeyModsChangeTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double LastKeyModsChangeTime
     * }
     */
    public static double LastKeyModsChangeTime(MemorySegment struct) {
        return struct.get(LastKeyModsChangeTime$LAYOUT, LastKeyModsChangeTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double LastKeyModsChangeTime
     * }
     */
    public static void LastKeyModsChangeTime(MemorySegment struct, double fieldValue) {
        struct.set(LastKeyModsChangeTime$LAYOUT, LastKeyModsChangeTime$OFFSET, fieldValue);
    }

    private static final OfDouble LastKeyModsChangeFromNoneTime$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("LastKeyModsChangeFromNoneTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double LastKeyModsChangeFromNoneTime
     * }
     */
    public static final OfDouble LastKeyModsChangeFromNoneTime$layout() {
        return LastKeyModsChangeFromNoneTime$LAYOUT;
    }

    private static final long LastKeyModsChangeFromNoneTime$OFFSET = 5408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double LastKeyModsChangeFromNoneTime
     * }
     */
    public static final long LastKeyModsChangeFromNoneTime$offset() {
        return LastKeyModsChangeFromNoneTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double LastKeyModsChangeFromNoneTime
     * }
     */
    public static double LastKeyModsChangeFromNoneTime(MemorySegment struct) {
        return struct.get(LastKeyModsChangeFromNoneTime$LAYOUT, LastKeyModsChangeFromNoneTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double LastKeyModsChangeFromNoneTime
     * }
     */
    public static void LastKeyModsChangeFromNoneTime(MemorySegment struct, double fieldValue) {
        struct.set(LastKeyModsChangeFromNoneTime$LAYOUT, LastKeyModsChangeFromNoneTime$OFFSET, fieldValue);
    }

    private static final OfDouble LastKeyboardKeyPressTime$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("LastKeyboardKeyPressTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double LastKeyboardKeyPressTime
     * }
     */
    public static final OfDouble LastKeyboardKeyPressTime$layout() {
        return LastKeyboardKeyPressTime$LAYOUT;
    }

    private static final long LastKeyboardKeyPressTime$OFFSET = 5416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double LastKeyboardKeyPressTime
     * }
     */
    public static final long LastKeyboardKeyPressTime$offset() {
        return LastKeyboardKeyPressTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double LastKeyboardKeyPressTime
     * }
     */
    public static double LastKeyboardKeyPressTime(MemorySegment struct) {
        return struct.get(LastKeyboardKeyPressTime$LAYOUT, LastKeyboardKeyPressTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double LastKeyboardKeyPressTime
     * }
     */
    public static void LastKeyboardKeyPressTime(MemorySegment struct, double fieldValue) {
        struct.set(LastKeyboardKeyPressTime$LAYOUT, LastKeyboardKeyPressTime$OFFSET, fieldValue);
    }

    private static final GroupLayout KeysMayBeCharInput$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("KeysMayBeCharInput"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImBitArrayForNamedKeys KeysMayBeCharInput
     * }
     */
    public static final GroupLayout KeysMayBeCharInput$layout() {
        return KeysMayBeCharInput$LAYOUT;
    }

    private static final long KeysMayBeCharInput$OFFSET = 5424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImBitArrayForNamedKeys KeysMayBeCharInput
     * }
     */
    public static final long KeysMayBeCharInput$offset() {
        return KeysMayBeCharInput$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImBitArrayForNamedKeys KeysMayBeCharInput
     * }
     */
    public static MemorySegment KeysMayBeCharInput(MemorySegment struct) {
        return struct.asSlice(KeysMayBeCharInput$OFFSET, KeysMayBeCharInput$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImBitArrayForNamedKeys KeysMayBeCharInput
     * }
     */
    public static void KeysMayBeCharInput(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, KeysMayBeCharInput$OFFSET, KeysMayBeCharInput$LAYOUT.byteSize());
    }

    private static final SequenceLayout KeysOwnerData$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("KeysOwnerData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyOwnerData KeysOwnerData[154]
     * }
     */
    public static final SequenceLayout KeysOwnerData$layout() {
        return KeysOwnerData$LAYOUT;
    }

    private static final long KeysOwnerData$OFFSET = 5444;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyOwnerData KeysOwnerData[154]
     * }
     */
    public static final long KeysOwnerData$offset() {
        return KeysOwnerData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyOwnerData KeysOwnerData[154]
     * }
     */
    public static MemorySegment KeysOwnerData(MemorySegment struct) {
        return struct.asSlice(KeysOwnerData$OFFSET, KeysOwnerData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyOwnerData KeysOwnerData[154]
     * }
     */
    public static void KeysOwnerData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, KeysOwnerData$OFFSET, KeysOwnerData$LAYOUT.byteSize());
    }

    private static long[] KeysOwnerData$DIMS = { 154 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImGuiKeyOwnerData KeysOwnerData[154]
     * }
     */
    public static long[] KeysOwnerData$dimensions() {
        return KeysOwnerData$DIMS;
    }
    private static final MethodHandle KeysOwnerData$ELEM_HANDLE = KeysOwnerData$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImGuiKeyOwnerData KeysOwnerData[154]
     * }
     */
    public static MemorySegment KeysOwnerData(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)KeysOwnerData$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImGuiKeyOwnerData KeysOwnerData[154]
     * }
     */
    public static void KeysOwnerData(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, KeysOwnerData(struct, index0), 0L, ImGuiKeyOwnerData.layout().byteSize());
    }

    private static final GroupLayout KeysRoutingTable$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("KeysRoutingTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingTable KeysRoutingTable
     * }
     */
    public static final GroupLayout KeysRoutingTable$layout() {
        return KeysRoutingTable$LAYOUT;
    }

    private static final long KeysRoutingTable$OFFSET = 7296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingTable KeysRoutingTable
     * }
     */
    public static final long KeysRoutingTable$offset() {
        return KeysRoutingTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingTable KeysRoutingTable
     * }
     */
    public static MemorySegment KeysRoutingTable(MemorySegment struct) {
        return struct.asSlice(KeysRoutingTable$OFFSET, KeysRoutingTable$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingTable KeysRoutingTable
     * }
     */
    public static void KeysRoutingTable(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, KeysRoutingTable$OFFSET, KeysRoutingTable$LAYOUT.byteSize());
    }

    private static final OfInt ActiveIdUsingNavDirMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ActiveIdUsingNavDirMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 ActiveIdUsingNavDirMask
     * }
     */
    public static final OfInt ActiveIdUsingNavDirMask$layout() {
        return ActiveIdUsingNavDirMask$LAYOUT;
    }

    private static final long ActiveIdUsingNavDirMask$OFFSET = 7640;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 ActiveIdUsingNavDirMask
     * }
     */
    public static final long ActiveIdUsingNavDirMask$offset() {
        return ActiveIdUsingNavDirMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 ActiveIdUsingNavDirMask
     * }
     */
    public static int ActiveIdUsingNavDirMask(MemorySegment struct) {
        return struct.get(ActiveIdUsingNavDirMask$LAYOUT, ActiveIdUsingNavDirMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 ActiveIdUsingNavDirMask
     * }
     */
    public static void ActiveIdUsingNavDirMask(MemorySegment struct, int fieldValue) {
        struct.set(ActiveIdUsingNavDirMask$LAYOUT, ActiveIdUsingNavDirMask$OFFSET, fieldValue);
    }

    private static final OfBoolean ActiveIdUsingAllKeyboardKeys$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ActiveIdUsingAllKeyboardKeys"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ActiveIdUsingAllKeyboardKeys
     * }
     */
    public static final OfBoolean ActiveIdUsingAllKeyboardKeys$layout() {
        return ActiveIdUsingAllKeyboardKeys$LAYOUT;
    }

    private static final long ActiveIdUsingAllKeyboardKeys$OFFSET = 7644;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ActiveIdUsingAllKeyboardKeys
     * }
     */
    public static final long ActiveIdUsingAllKeyboardKeys$offset() {
        return ActiveIdUsingAllKeyboardKeys$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ActiveIdUsingAllKeyboardKeys
     * }
     */
    public static boolean ActiveIdUsingAllKeyboardKeys(MemorySegment struct) {
        return struct.get(ActiveIdUsingAllKeyboardKeys$LAYOUT, ActiveIdUsingAllKeyboardKeys$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ActiveIdUsingAllKeyboardKeys
     * }
     */
    public static void ActiveIdUsingAllKeyboardKeys(MemorySegment struct, boolean fieldValue) {
        struct.set(ActiveIdUsingAllKeyboardKeys$LAYOUT, ActiveIdUsingAllKeyboardKeys$OFFSET, fieldValue);
    }

    private static final OfInt DebugBreakInShortcutRouting$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugBreakInShortcutRouting"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyChord DebugBreakInShortcutRouting
     * }
     */
    public static final OfInt DebugBreakInShortcutRouting$layout() {
        return DebugBreakInShortcutRouting$LAYOUT;
    }

    private static final long DebugBreakInShortcutRouting$OFFSET = 7648;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyChord DebugBreakInShortcutRouting
     * }
     */
    public static final long DebugBreakInShortcutRouting$offset() {
        return DebugBreakInShortcutRouting$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord DebugBreakInShortcutRouting
     * }
     */
    public static int DebugBreakInShortcutRouting(MemorySegment struct) {
        return struct.get(DebugBreakInShortcutRouting$LAYOUT, DebugBreakInShortcutRouting$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord DebugBreakInShortcutRouting
     * }
     */
    public static void DebugBreakInShortcutRouting(MemorySegment struct, int fieldValue) {
        struct.set(DebugBreakInShortcutRouting$LAYOUT, DebugBreakInShortcutRouting$OFFSET, fieldValue);
    }

    private static final OfInt CurrentFocusScopeId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CurrentFocusScopeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID CurrentFocusScopeId
     * }
     */
    public static final OfInt CurrentFocusScopeId$layout() {
        return CurrentFocusScopeId$LAYOUT;
    }

    private static final long CurrentFocusScopeId$OFFSET = 7652;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID CurrentFocusScopeId
     * }
     */
    public static final long CurrentFocusScopeId$offset() {
        return CurrentFocusScopeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID CurrentFocusScopeId
     * }
     */
    public static int CurrentFocusScopeId(MemorySegment struct) {
        return struct.get(CurrentFocusScopeId$LAYOUT, CurrentFocusScopeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID CurrentFocusScopeId
     * }
     */
    public static void CurrentFocusScopeId(MemorySegment struct, int fieldValue) {
        struct.set(CurrentFocusScopeId$LAYOUT, CurrentFocusScopeId$OFFSET, fieldValue);
    }

    private static final OfInt CurrentItemFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CurrentItemFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiItemFlags CurrentItemFlags
     * }
     */
    public static final OfInt CurrentItemFlags$layout() {
        return CurrentItemFlags$LAYOUT;
    }

    private static final long CurrentItemFlags$OFFSET = 7656;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiItemFlags CurrentItemFlags
     * }
     */
    public static final long CurrentItemFlags$offset() {
        return CurrentItemFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiItemFlags CurrentItemFlags
     * }
     */
    public static int CurrentItemFlags(MemorySegment struct) {
        return struct.get(CurrentItemFlags$LAYOUT, CurrentItemFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiItemFlags CurrentItemFlags
     * }
     */
    public static void CurrentItemFlags(MemorySegment struct, int fieldValue) {
        struct.set(CurrentItemFlags$LAYOUT, CurrentItemFlags$OFFSET, fieldValue);
    }

    private static final OfInt DebugLocateId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugLocateId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DebugLocateId
     * }
     */
    public static final OfInt DebugLocateId$layout() {
        return DebugLocateId$LAYOUT;
    }

    private static final long DebugLocateId$OFFSET = 7660;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DebugLocateId
     * }
     */
    public static final long DebugLocateId$offset() {
        return DebugLocateId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DebugLocateId
     * }
     */
    public static int DebugLocateId(MemorySegment struct) {
        return struct.get(DebugLocateId$LAYOUT, DebugLocateId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DebugLocateId
     * }
     */
    public static void DebugLocateId(MemorySegment struct, int fieldValue) {
        struct.set(DebugLocateId$LAYOUT, DebugLocateId$OFFSET, fieldValue);
    }

    private static final GroupLayout NextItemData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NextItemData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNextItemData NextItemData
     * }
     */
    public static final GroupLayout NextItemData$layout() {
        return NextItemData$LAYOUT;
    }

    private static final long NextItemData$OFFSET = 7664;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNextItemData NextItemData
     * }
     */
    public static final long NextItemData$offset() {
        return NextItemData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNextItemData NextItemData
     * }
     */
    public static MemorySegment NextItemData(MemorySegment struct) {
        return struct.asSlice(NextItemData$OFFSET, NextItemData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNextItemData NextItemData
     * }
     */
    public static void NextItemData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NextItemData$OFFSET, NextItemData$LAYOUT.byteSize());
    }

    private static final GroupLayout LastItemData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("LastItemData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiLastItemData LastItemData
     * }
     */
    public static final GroupLayout LastItemData$layout() {
        return LastItemData$LAYOUT;
    }

    private static final long LastItemData$OFFSET = 7720;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiLastItemData LastItemData
     * }
     */
    public static final long LastItemData$offset() {
        return LastItemData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiLastItemData LastItemData
     * }
     */
    public static MemorySegment LastItemData(MemorySegment struct) {
        return struct.asSlice(LastItemData$OFFSET, LastItemData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiLastItemData LastItemData
     * }
     */
    public static void LastItemData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LastItemData$OFFSET, LastItemData$LAYOUT.byteSize());
    }

    private static final GroupLayout NextWindowData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NextWindowData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNextWindowData NextWindowData
     * }
     */
    public static final GroupLayout NextWindowData$layout() {
        return NextWindowData$LAYOUT;
    }

    private static final long NextWindowData$OFFSET = 7800;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNextWindowData NextWindowData
     * }
     */
    public static final long NextWindowData$offset() {
        return NextWindowData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNextWindowData NextWindowData
     * }
     */
    public static MemorySegment NextWindowData(MemorySegment struct) {
        return struct.asSlice(NextWindowData$OFFSET, NextWindowData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNextWindowData NextWindowData
     * }
     */
    public static void NextWindowData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NextWindowData$OFFSET, NextWindowData$LAYOUT.byteSize());
    }

    private static final OfBoolean DebugShowGroupRects$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("DebugShowGroupRects"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool DebugShowGroupRects
     * }
     */
    public static final OfBoolean DebugShowGroupRects$layout() {
        return DebugShowGroupRects$LAYOUT;
    }

    private static final long DebugShowGroupRects$OFFSET = 7960;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool DebugShowGroupRects
     * }
     */
    public static final long DebugShowGroupRects$offset() {
        return DebugShowGroupRects$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool DebugShowGroupRects
     * }
     */
    public static boolean DebugShowGroupRects(MemorySegment struct) {
        return struct.get(DebugShowGroupRects$LAYOUT, DebugShowGroupRects$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool DebugShowGroupRects
     * }
     */
    public static void DebugShowGroupRects(MemorySegment struct, boolean fieldValue) {
        struct.set(DebugShowGroupRects$LAYOUT, DebugShowGroupRects$OFFSET, fieldValue);
    }

    private static final OfInt DebugFlashStyleColorIdx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugFlashStyleColorIdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiCol DebugFlashStyleColorIdx
     * }
     */
    public static final OfInt DebugFlashStyleColorIdx$layout() {
        return DebugFlashStyleColorIdx$LAYOUT;
    }

    private static final long DebugFlashStyleColorIdx$OFFSET = 7964;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiCol DebugFlashStyleColorIdx
     * }
     */
    public static final long DebugFlashStyleColorIdx$offset() {
        return DebugFlashStyleColorIdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiCol DebugFlashStyleColorIdx
     * }
     */
    public static int DebugFlashStyleColorIdx(MemorySegment struct) {
        return struct.get(DebugFlashStyleColorIdx$LAYOUT, DebugFlashStyleColorIdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiCol DebugFlashStyleColorIdx
     * }
     */
    public static void DebugFlashStyleColorIdx(MemorySegment struct, int fieldValue) {
        struct.set(DebugFlashStyleColorIdx$LAYOUT, DebugFlashStyleColorIdx$OFFSET, fieldValue);
    }

    private static final GroupLayout ColorStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ColorStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiColorMod ColorStack
     * }
     */
    public static final GroupLayout ColorStack$layout() {
        return ColorStack$LAYOUT;
    }

    private static final long ColorStack$OFFSET = 7968;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiColorMod ColorStack
     * }
     */
    public static final long ColorStack$offset() {
        return ColorStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiColorMod ColorStack
     * }
     */
    public static MemorySegment ColorStack(MemorySegment struct) {
        return struct.asSlice(ColorStack$OFFSET, ColorStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiColorMod ColorStack
     * }
     */
    public static void ColorStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ColorStack$OFFSET, ColorStack$LAYOUT.byteSize());
    }

    private static final GroupLayout StyleVarStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("StyleVarStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiStyleMod StyleVarStack
     * }
     */
    public static final GroupLayout StyleVarStack$layout() {
        return StyleVarStack$LAYOUT;
    }

    private static final long StyleVarStack$OFFSET = 7984;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiStyleMod StyleVarStack
     * }
     */
    public static final long StyleVarStack$offset() {
        return StyleVarStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiStyleMod StyleVarStack
     * }
     */
    public static MemorySegment StyleVarStack(MemorySegment struct) {
        return struct.asSlice(StyleVarStack$OFFSET, StyleVarStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiStyleMod StyleVarStack
     * }
     */
    public static void StyleVarStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, StyleVarStack$OFFSET, StyleVarStack$LAYOUT.byteSize());
    }

    private static final GroupLayout FontStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("FontStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImFontPtr FontStack
     * }
     */
    public static final GroupLayout FontStack$layout() {
        return FontStack$LAYOUT;
    }

    private static final long FontStack$OFFSET = 8000;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImFontPtr FontStack
     * }
     */
    public static final long FontStack$offset() {
        return FontStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImFontPtr FontStack
     * }
     */
    public static MemorySegment FontStack(MemorySegment struct) {
        return struct.asSlice(FontStack$OFFSET, FontStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImFontPtr FontStack
     * }
     */
    public static void FontStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FontStack$OFFSET, FontStack$LAYOUT.byteSize());
    }

    private static final GroupLayout FocusScopeStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("FocusScopeStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiFocusScopeData FocusScopeStack
     * }
     */
    public static final GroupLayout FocusScopeStack$layout() {
        return FocusScopeStack$LAYOUT;
    }

    private static final long FocusScopeStack$OFFSET = 8016;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiFocusScopeData FocusScopeStack
     * }
     */
    public static final long FocusScopeStack$offset() {
        return FocusScopeStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiFocusScopeData FocusScopeStack
     * }
     */
    public static MemorySegment FocusScopeStack(MemorySegment struct) {
        return struct.asSlice(FocusScopeStack$OFFSET, FocusScopeStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiFocusScopeData FocusScopeStack
     * }
     */
    public static void FocusScopeStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FocusScopeStack$OFFSET, FocusScopeStack$LAYOUT.byteSize());
    }

    private static final GroupLayout ItemFlagsStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ItemFlagsStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiItemFlags ItemFlagsStack
     * }
     */
    public static final GroupLayout ItemFlagsStack$layout() {
        return ItemFlagsStack$LAYOUT;
    }

    private static final long ItemFlagsStack$OFFSET = 8032;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiItemFlags ItemFlagsStack
     * }
     */
    public static final long ItemFlagsStack$offset() {
        return ItemFlagsStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiItemFlags ItemFlagsStack
     * }
     */
    public static MemorySegment ItemFlagsStack(MemorySegment struct) {
        return struct.asSlice(ItemFlagsStack$OFFSET, ItemFlagsStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiItemFlags ItemFlagsStack
     * }
     */
    public static void ItemFlagsStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ItemFlagsStack$OFFSET, ItemFlagsStack$LAYOUT.byteSize());
    }

    private static final GroupLayout GroupStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("GroupStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiGroupData GroupStack
     * }
     */
    public static final GroupLayout GroupStack$layout() {
        return GroupStack$LAYOUT;
    }

    private static final long GroupStack$OFFSET = 8048;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiGroupData GroupStack
     * }
     */
    public static final long GroupStack$offset() {
        return GroupStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiGroupData GroupStack
     * }
     */
    public static MemorySegment GroupStack(MemorySegment struct) {
        return struct.asSlice(GroupStack$OFFSET, GroupStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiGroupData GroupStack
     * }
     */
    public static void GroupStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, GroupStack$OFFSET, GroupStack$LAYOUT.byteSize());
    }

    private static final GroupLayout OpenPopupStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("OpenPopupStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPopupData OpenPopupStack
     * }
     */
    public static final GroupLayout OpenPopupStack$layout() {
        return OpenPopupStack$LAYOUT;
    }

    private static final long OpenPopupStack$OFFSET = 8064;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPopupData OpenPopupStack
     * }
     */
    public static final long OpenPopupStack$offset() {
        return OpenPopupStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPopupData OpenPopupStack
     * }
     */
    public static MemorySegment OpenPopupStack(MemorySegment struct) {
        return struct.asSlice(OpenPopupStack$OFFSET, OpenPopupStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPopupData OpenPopupStack
     * }
     */
    public static void OpenPopupStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OpenPopupStack$OFFSET, OpenPopupStack$LAYOUT.byteSize());
    }

    private static final GroupLayout BeginPopupStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BeginPopupStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPopupData BeginPopupStack
     * }
     */
    public static final GroupLayout BeginPopupStack$layout() {
        return BeginPopupStack$LAYOUT;
    }

    private static final long BeginPopupStack$OFFSET = 8080;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPopupData BeginPopupStack
     * }
     */
    public static final long BeginPopupStack$offset() {
        return BeginPopupStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPopupData BeginPopupStack
     * }
     */
    public static MemorySegment BeginPopupStack(MemorySegment struct) {
        return struct.asSlice(BeginPopupStack$OFFSET, BeginPopupStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPopupData BeginPopupStack
     * }
     */
    public static void BeginPopupStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BeginPopupStack$OFFSET, BeginPopupStack$LAYOUT.byteSize());
    }

    private static final GroupLayout TreeNodeStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TreeNodeStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTreeNodeStackData TreeNodeStack
     * }
     */
    public static final GroupLayout TreeNodeStack$layout() {
        return TreeNodeStack$LAYOUT;
    }

    private static final long TreeNodeStack$OFFSET = 8096;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTreeNodeStackData TreeNodeStack
     * }
     */
    public static final long TreeNodeStack$offset() {
        return TreeNodeStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTreeNodeStackData TreeNodeStack
     * }
     */
    public static MemorySegment TreeNodeStack(MemorySegment struct) {
        return struct.asSlice(TreeNodeStack$OFFSET, TreeNodeStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTreeNodeStackData TreeNodeStack
     * }
     */
    public static void TreeNodeStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TreeNodeStack$OFFSET, TreeNodeStack$LAYOUT.byteSize());
    }

    private static final GroupLayout Viewports$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Viewports"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiViewportPPtr Viewports
     * }
     */
    public static final GroupLayout Viewports$layout() {
        return Viewports$LAYOUT;
    }

    private static final long Viewports$OFFSET = 8112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiViewportPPtr Viewports
     * }
     */
    public static final long Viewports$offset() {
        return Viewports$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiViewportPPtr Viewports
     * }
     */
    public static MemorySegment Viewports(MemorySegment struct) {
        return struct.asSlice(Viewports$OFFSET, Viewports$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiViewportPPtr Viewports
     * }
     */
    public static void Viewports(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Viewports$OFFSET, Viewports$LAYOUT.byteSize());
    }

    private static final AddressLayout CurrentViewport$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CurrentViewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiViewportP *CurrentViewport
     * }
     */
    public static final AddressLayout CurrentViewport$layout() {
        return CurrentViewport$LAYOUT;
    }

    private static final long CurrentViewport$OFFSET = 8128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiViewportP *CurrentViewport
     * }
     */
    public static final long CurrentViewport$offset() {
        return CurrentViewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiViewportP *CurrentViewport
     * }
     */
    public static MemorySegment CurrentViewport(MemorySegment struct) {
        return struct.get(CurrentViewport$LAYOUT, CurrentViewport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiViewportP *CurrentViewport
     * }
     */
    public static void CurrentViewport(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CurrentViewport$LAYOUT, CurrentViewport$OFFSET, fieldValue);
    }

    private static final AddressLayout MouseViewport$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("MouseViewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiViewportP *MouseViewport
     * }
     */
    public static final AddressLayout MouseViewport$layout() {
        return MouseViewport$LAYOUT;
    }

    private static final long MouseViewport$OFFSET = 8136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiViewportP *MouseViewport
     * }
     */
    public static final long MouseViewport$offset() {
        return MouseViewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiViewportP *MouseViewport
     * }
     */
    public static MemorySegment MouseViewport(MemorySegment struct) {
        return struct.get(MouseViewport$LAYOUT, MouseViewport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiViewportP *MouseViewport
     * }
     */
    public static void MouseViewport(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(MouseViewport$LAYOUT, MouseViewport$OFFSET, fieldValue);
    }

    private static final AddressLayout MouseLastHoveredViewport$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("MouseLastHoveredViewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiViewportP *MouseLastHoveredViewport
     * }
     */
    public static final AddressLayout MouseLastHoveredViewport$layout() {
        return MouseLastHoveredViewport$LAYOUT;
    }

    private static final long MouseLastHoveredViewport$OFFSET = 8144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiViewportP *MouseLastHoveredViewport
     * }
     */
    public static final long MouseLastHoveredViewport$offset() {
        return MouseLastHoveredViewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiViewportP *MouseLastHoveredViewport
     * }
     */
    public static MemorySegment MouseLastHoveredViewport(MemorySegment struct) {
        return struct.get(MouseLastHoveredViewport$LAYOUT, MouseLastHoveredViewport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiViewportP *MouseLastHoveredViewport
     * }
     */
    public static void MouseLastHoveredViewport(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(MouseLastHoveredViewport$LAYOUT, MouseLastHoveredViewport$OFFSET, fieldValue);
    }

    private static final OfInt PlatformLastFocusedViewportId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PlatformLastFocusedViewportId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID PlatformLastFocusedViewportId
     * }
     */
    public static final OfInt PlatformLastFocusedViewportId$layout() {
        return PlatformLastFocusedViewportId$LAYOUT;
    }

    private static final long PlatformLastFocusedViewportId$OFFSET = 8152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID PlatformLastFocusedViewportId
     * }
     */
    public static final long PlatformLastFocusedViewportId$offset() {
        return PlatformLastFocusedViewportId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID PlatformLastFocusedViewportId
     * }
     */
    public static int PlatformLastFocusedViewportId(MemorySegment struct) {
        return struct.get(PlatformLastFocusedViewportId$LAYOUT, PlatformLastFocusedViewportId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID PlatformLastFocusedViewportId
     * }
     */
    public static void PlatformLastFocusedViewportId(MemorySegment struct, int fieldValue) {
        struct.set(PlatformLastFocusedViewportId$LAYOUT, PlatformLastFocusedViewportId$OFFSET, fieldValue);
    }

    private static final GroupLayout FallbackMonitor$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("FallbackMonitor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiPlatformMonitor FallbackMonitor
     * }
     */
    public static final GroupLayout FallbackMonitor$layout() {
        return FallbackMonitor$LAYOUT;
    }

    private static final long FallbackMonitor$OFFSET = 8160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiPlatformMonitor FallbackMonitor
     * }
     */
    public static final long FallbackMonitor$offset() {
        return FallbackMonitor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiPlatformMonitor FallbackMonitor
     * }
     */
    public static MemorySegment FallbackMonitor(MemorySegment struct) {
        return struct.asSlice(FallbackMonitor$OFFSET, FallbackMonitor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiPlatformMonitor FallbackMonitor
     * }
     */
    public static void FallbackMonitor(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FallbackMonitor$OFFSET, FallbackMonitor$LAYOUT.byteSize());
    }

    private static final GroupLayout PlatformMonitorsFullWorkRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PlatformMonitorsFullWorkRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect PlatformMonitorsFullWorkRect
     * }
     */
    public static final GroupLayout PlatformMonitorsFullWorkRect$layout() {
        return PlatformMonitorsFullWorkRect$LAYOUT;
    }

    private static final long PlatformMonitorsFullWorkRect$OFFSET = 8208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect PlatformMonitorsFullWorkRect
     * }
     */
    public static final long PlatformMonitorsFullWorkRect$offset() {
        return PlatformMonitorsFullWorkRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect PlatformMonitorsFullWorkRect
     * }
     */
    public static MemorySegment PlatformMonitorsFullWorkRect(MemorySegment struct) {
        return struct.asSlice(PlatformMonitorsFullWorkRect$OFFSET, PlatformMonitorsFullWorkRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect PlatformMonitorsFullWorkRect
     * }
     */
    public static void PlatformMonitorsFullWorkRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PlatformMonitorsFullWorkRect$OFFSET, PlatformMonitorsFullWorkRect$LAYOUT.byteSize());
    }

    private static final OfInt ViewportCreatedCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ViewportCreatedCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ViewportCreatedCount
     * }
     */
    public static final OfInt ViewportCreatedCount$layout() {
        return ViewportCreatedCount$LAYOUT;
    }

    private static final long ViewportCreatedCount$OFFSET = 8224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ViewportCreatedCount
     * }
     */
    public static final long ViewportCreatedCount$offset() {
        return ViewportCreatedCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ViewportCreatedCount
     * }
     */
    public static int ViewportCreatedCount(MemorySegment struct) {
        return struct.get(ViewportCreatedCount$LAYOUT, ViewportCreatedCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ViewportCreatedCount
     * }
     */
    public static void ViewportCreatedCount(MemorySegment struct, int fieldValue) {
        struct.set(ViewportCreatedCount$LAYOUT, ViewportCreatedCount$OFFSET, fieldValue);
    }

    private static final OfInt PlatformWindowsCreatedCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PlatformWindowsCreatedCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int PlatformWindowsCreatedCount
     * }
     */
    public static final OfInt PlatformWindowsCreatedCount$layout() {
        return PlatformWindowsCreatedCount$LAYOUT;
    }

    private static final long PlatformWindowsCreatedCount$OFFSET = 8228;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int PlatformWindowsCreatedCount
     * }
     */
    public static final long PlatformWindowsCreatedCount$offset() {
        return PlatformWindowsCreatedCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int PlatformWindowsCreatedCount
     * }
     */
    public static int PlatformWindowsCreatedCount(MemorySegment struct) {
        return struct.get(PlatformWindowsCreatedCount$LAYOUT, PlatformWindowsCreatedCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int PlatformWindowsCreatedCount
     * }
     */
    public static void PlatformWindowsCreatedCount(MemorySegment struct, int fieldValue) {
        struct.set(PlatformWindowsCreatedCount$LAYOUT, PlatformWindowsCreatedCount$OFFSET, fieldValue);
    }

    private static final OfInt ViewportFocusedStampCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ViewportFocusedStampCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ViewportFocusedStampCount
     * }
     */
    public static final OfInt ViewportFocusedStampCount$layout() {
        return ViewportFocusedStampCount$LAYOUT;
    }

    private static final long ViewportFocusedStampCount$OFFSET = 8232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ViewportFocusedStampCount
     * }
     */
    public static final long ViewportFocusedStampCount$offset() {
        return ViewportFocusedStampCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ViewportFocusedStampCount
     * }
     */
    public static int ViewportFocusedStampCount(MemorySegment struct) {
        return struct.get(ViewportFocusedStampCount$LAYOUT, ViewportFocusedStampCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ViewportFocusedStampCount
     * }
     */
    public static void ViewportFocusedStampCount(MemorySegment struct, int fieldValue) {
        struct.set(ViewportFocusedStampCount$LAYOUT, ViewportFocusedStampCount$OFFSET, fieldValue);
    }

    private static final AddressLayout NavWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("NavWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindow
     * }
     */
    public static final AddressLayout NavWindow$layout() {
        return NavWindow$LAYOUT;
    }

    private static final long NavWindow$OFFSET = 8240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindow
     * }
     */
    public static final long NavWindow$offset() {
        return NavWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindow
     * }
     */
    public static MemorySegment NavWindow(MemorySegment struct) {
        return struct.get(NavWindow$LAYOUT, NavWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindow
     * }
     */
    public static void NavWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(NavWindow$LAYOUT, NavWindow$OFFSET, fieldValue);
    }

    private static final OfInt NavId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavId
     * }
     */
    public static final OfInt NavId$layout() {
        return NavId$LAYOUT;
    }

    private static final long NavId$OFFSET = 8248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavId
     * }
     */
    public static final long NavId$offset() {
        return NavId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavId
     * }
     */
    public static int NavId(MemorySegment struct) {
        return struct.get(NavId$LAYOUT, NavId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavId
     * }
     */
    public static void NavId(MemorySegment struct, int fieldValue) {
        struct.set(NavId$LAYOUT, NavId$OFFSET, fieldValue);
    }

    private static final OfInt NavFocusScopeId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavFocusScopeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavFocusScopeId
     * }
     */
    public static final OfInt NavFocusScopeId$layout() {
        return NavFocusScopeId$LAYOUT;
    }

    private static final long NavFocusScopeId$OFFSET = 8252;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavFocusScopeId
     * }
     */
    public static final long NavFocusScopeId$offset() {
        return NavFocusScopeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavFocusScopeId
     * }
     */
    public static int NavFocusScopeId(MemorySegment struct) {
        return struct.get(NavFocusScopeId$LAYOUT, NavFocusScopeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavFocusScopeId
     * }
     */
    public static void NavFocusScopeId(MemorySegment struct, int fieldValue) {
        struct.set(NavFocusScopeId$LAYOUT, NavFocusScopeId$OFFSET, fieldValue);
    }

    private static final OfInt NavLayer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavLayer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNavLayer NavLayer
     * }
     */
    public static final OfInt NavLayer$layout() {
        return NavLayer$LAYOUT;
    }

    private static final long NavLayer$OFFSET = 8256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNavLayer NavLayer
     * }
     */
    public static final long NavLayer$offset() {
        return NavLayer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNavLayer NavLayer
     * }
     */
    public static int NavLayer(MemorySegment struct) {
        return struct.get(NavLayer$LAYOUT, NavLayer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNavLayer NavLayer
     * }
     */
    public static void NavLayer(MemorySegment struct, int fieldValue) {
        struct.set(NavLayer$LAYOUT, NavLayer$OFFSET, fieldValue);
    }

    private static final OfInt NavActivateId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavActivateId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavActivateId
     * }
     */
    public static final OfInt NavActivateId$layout() {
        return NavActivateId$LAYOUT;
    }

    private static final long NavActivateId$OFFSET = 8260;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavActivateId
     * }
     */
    public static final long NavActivateId$offset() {
        return NavActivateId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavActivateId
     * }
     */
    public static int NavActivateId(MemorySegment struct) {
        return struct.get(NavActivateId$LAYOUT, NavActivateId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavActivateId
     * }
     */
    public static void NavActivateId(MemorySegment struct, int fieldValue) {
        struct.set(NavActivateId$LAYOUT, NavActivateId$OFFSET, fieldValue);
    }

    private static final OfInt NavActivateDownId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavActivateDownId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavActivateDownId
     * }
     */
    public static final OfInt NavActivateDownId$layout() {
        return NavActivateDownId$LAYOUT;
    }

    private static final long NavActivateDownId$OFFSET = 8264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavActivateDownId
     * }
     */
    public static final long NavActivateDownId$offset() {
        return NavActivateDownId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavActivateDownId
     * }
     */
    public static int NavActivateDownId(MemorySegment struct) {
        return struct.get(NavActivateDownId$LAYOUT, NavActivateDownId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavActivateDownId
     * }
     */
    public static void NavActivateDownId(MemorySegment struct, int fieldValue) {
        struct.set(NavActivateDownId$LAYOUT, NavActivateDownId$OFFSET, fieldValue);
    }

    private static final OfInt NavActivatePressedId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavActivatePressedId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavActivatePressedId
     * }
     */
    public static final OfInt NavActivatePressedId$layout() {
        return NavActivatePressedId$LAYOUT;
    }

    private static final long NavActivatePressedId$OFFSET = 8268;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavActivatePressedId
     * }
     */
    public static final long NavActivatePressedId$offset() {
        return NavActivatePressedId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavActivatePressedId
     * }
     */
    public static int NavActivatePressedId(MemorySegment struct) {
        return struct.get(NavActivatePressedId$LAYOUT, NavActivatePressedId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavActivatePressedId
     * }
     */
    public static void NavActivatePressedId(MemorySegment struct, int fieldValue) {
        struct.set(NavActivatePressedId$LAYOUT, NavActivatePressedId$OFFSET, fieldValue);
    }

    private static final OfInt NavActivateFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavActivateFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiActivateFlags NavActivateFlags
     * }
     */
    public static final OfInt NavActivateFlags$layout() {
        return NavActivateFlags$LAYOUT;
    }

    private static final long NavActivateFlags$OFFSET = 8272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiActivateFlags NavActivateFlags
     * }
     */
    public static final long NavActivateFlags$offset() {
        return NavActivateFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiActivateFlags NavActivateFlags
     * }
     */
    public static int NavActivateFlags(MemorySegment struct) {
        return struct.get(NavActivateFlags$LAYOUT, NavActivateFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiActivateFlags NavActivateFlags
     * }
     */
    public static void NavActivateFlags(MemorySegment struct, int fieldValue) {
        struct.set(NavActivateFlags$LAYOUT, NavActivateFlags$OFFSET, fieldValue);
    }

    private static final GroupLayout NavFocusRoute$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavFocusRoute"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiFocusScopeData NavFocusRoute
     * }
     */
    public static final GroupLayout NavFocusRoute$layout() {
        return NavFocusRoute$LAYOUT;
    }

    private static final long NavFocusRoute$OFFSET = 8280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiFocusScopeData NavFocusRoute
     * }
     */
    public static final long NavFocusRoute$offset() {
        return NavFocusRoute$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiFocusScopeData NavFocusRoute
     * }
     */
    public static MemorySegment NavFocusRoute(MemorySegment struct) {
        return struct.asSlice(NavFocusRoute$OFFSET, NavFocusRoute$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiFocusScopeData NavFocusRoute
     * }
     */
    public static void NavFocusRoute(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavFocusRoute$OFFSET, NavFocusRoute$LAYOUT.byteSize());
    }

    private static final OfInt NavHighlightActivatedId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavHighlightActivatedId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavHighlightActivatedId
     * }
     */
    public static final OfInt NavHighlightActivatedId$layout() {
        return NavHighlightActivatedId$LAYOUT;
    }

    private static final long NavHighlightActivatedId$OFFSET = 8296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavHighlightActivatedId
     * }
     */
    public static final long NavHighlightActivatedId$offset() {
        return NavHighlightActivatedId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavHighlightActivatedId
     * }
     */
    public static int NavHighlightActivatedId(MemorySegment struct) {
        return struct.get(NavHighlightActivatedId$LAYOUT, NavHighlightActivatedId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavHighlightActivatedId
     * }
     */
    public static void NavHighlightActivatedId(MemorySegment struct, int fieldValue) {
        struct.set(NavHighlightActivatedId$LAYOUT, NavHighlightActivatedId$OFFSET, fieldValue);
    }

    private static final OfFloat NavHighlightActivatedTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("NavHighlightActivatedTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float NavHighlightActivatedTimer
     * }
     */
    public static final OfFloat NavHighlightActivatedTimer$layout() {
        return NavHighlightActivatedTimer$LAYOUT;
    }

    private static final long NavHighlightActivatedTimer$OFFSET = 8300;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float NavHighlightActivatedTimer
     * }
     */
    public static final long NavHighlightActivatedTimer$offset() {
        return NavHighlightActivatedTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float NavHighlightActivatedTimer
     * }
     */
    public static float NavHighlightActivatedTimer(MemorySegment struct) {
        return struct.get(NavHighlightActivatedTimer$LAYOUT, NavHighlightActivatedTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float NavHighlightActivatedTimer
     * }
     */
    public static void NavHighlightActivatedTimer(MemorySegment struct, float fieldValue) {
        struct.set(NavHighlightActivatedTimer$LAYOUT, NavHighlightActivatedTimer$OFFSET, fieldValue);
    }

    private static final OfInt NavNextActivateId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavNextActivateId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavNextActivateId
     * }
     */
    public static final OfInt NavNextActivateId$layout() {
        return NavNextActivateId$LAYOUT;
    }

    private static final long NavNextActivateId$OFFSET = 8304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavNextActivateId
     * }
     */
    public static final long NavNextActivateId$offset() {
        return NavNextActivateId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavNextActivateId
     * }
     */
    public static int NavNextActivateId(MemorySegment struct) {
        return struct.get(NavNextActivateId$LAYOUT, NavNextActivateId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavNextActivateId
     * }
     */
    public static void NavNextActivateId(MemorySegment struct, int fieldValue) {
        struct.set(NavNextActivateId$LAYOUT, NavNextActivateId$OFFSET, fieldValue);
    }

    private static final OfInt NavNextActivateFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavNextActivateFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiActivateFlags NavNextActivateFlags
     * }
     */
    public static final OfInt NavNextActivateFlags$layout() {
        return NavNextActivateFlags$LAYOUT;
    }

    private static final long NavNextActivateFlags$OFFSET = 8308;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiActivateFlags NavNextActivateFlags
     * }
     */
    public static final long NavNextActivateFlags$offset() {
        return NavNextActivateFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiActivateFlags NavNextActivateFlags
     * }
     */
    public static int NavNextActivateFlags(MemorySegment struct) {
        return struct.get(NavNextActivateFlags$LAYOUT, NavNextActivateFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiActivateFlags NavNextActivateFlags
     * }
     */
    public static void NavNextActivateFlags(MemorySegment struct, int fieldValue) {
        struct.set(NavNextActivateFlags$LAYOUT, NavNextActivateFlags$OFFSET, fieldValue);
    }

    private static final OfInt NavInputSource$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavInputSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputSource NavInputSource
     * }
     */
    public static final OfInt NavInputSource$layout() {
        return NavInputSource$LAYOUT;
    }

    private static final long NavInputSource$OFFSET = 8312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputSource NavInputSource
     * }
     */
    public static final long NavInputSource$offset() {
        return NavInputSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputSource NavInputSource
     * }
     */
    public static int NavInputSource(MemorySegment struct) {
        return struct.get(NavInputSource$LAYOUT, NavInputSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputSource NavInputSource
     * }
     */
    public static void NavInputSource(MemorySegment struct, int fieldValue) {
        struct.set(NavInputSource$LAYOUT, NavInputSource$OFFSET, fieldValue);
    }

    private static final OfLong NavLastValidSelectionUserData$LAYOUT = (OfLong)$LAYOUT.select(groupElement("NavLastValidSelectionUserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavLastValidSelectionUserData
     * }
     */
    public static final OfLong NavLastValidSelectionUserData$layout() {
        return NavLastValidSelectionUserData$LAYOUT;
    }

    private static final long NavLastValidSelectionUserData$OFFSET = 8320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavLastValidSelectionUserData
     * }
     */
    public static final long NavLastValidSelectionUserData$offset() {
        return NavLastValidSelectionUserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavLastValidSelectionUserData
     * }
     */
    public static long NavLastValidSelectionUserData(MemorySegment struct) {
        return struct.get(NavLastValidSelectionUserData$LAYOUT, NavLastValidSelectionUserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavLastValidSelectionUserData
     * }
     */
    public static void NavLastValidSelectionUserData(MemorySegment struct, long fieldValue) {
        struct.set(NavLastValidSelectionUserData$LAYOUT, NavLastValidSelectionUserData$OFFSET, fieldValue);
    }

    private static final OfBoolean NavIdIsAlive$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavIdIsAlive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavIdIsAlive
     * }
     */
    public static final OfBoolean NavIdIsAlive$layout() {
        return NavIdIsAlive$LAYOUT;
    }

    private static final long NavIdIsAlive$OFFSET = 8328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavIdIsAlive
     * }
     */
    public static final long NavIdIsAlive$offset() {
        return NavIdIsAlive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavIdIsAlive
     * }
     */
    public static boolean NavIdIsAlive(MemorySegment struct) {
        return struct.get(NavIdIsAlive$LAYOUT, NavIdIsAlive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavIdIsAlive
     * }
     */
    public static void NavIdIsAlive(MemorySegment struct, boolean fieldValue) {
        struct.set(NavIdIsAlive$LAYOUT, NavIdIsAlive$OFFSET, fieldValue);
    }

    private static final OfBoolean NavMousePosDirty$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavMousePosDirty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavMousePosDirty
     * }
     */
    public static final OfBoolean NavMousePosDirty$layout() {
        return NavMousePosDirty$LAYOUT;
    }

    private static final long NavMousePosDirty$OFFSET = 8329;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavMousePosDirty
     * }
     */
    public static final long NavMousePosDirty$offset() {
        return NavMousePosDirty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavMousePosDirty
     * }
     */
    public static boolean NavMousePosDirty(MemorySegment struct) {
        return struct.get(NavMousePosDirty$LAYOUT, NavMousePosDirty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavMousePosDirty
     * }
     */
    public static void NavMousePosDirty(MemorySegment struct, boolean fieldValue) {
        struct.set(NavMousePosDirty$LAYOUT, NavMousePosDirty$OFFSET, fieldValue);
    }

    private static final OfBoolean NavDisableHighlight$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavDisableHighlight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavDisableHighlight
     * }
     */
    public static final OfBoolean NavDisableHighlight$layout() {
        return NavDisableHighlight$LAYOUT;
    }

    private static final long NavDisableHighlight$OFFSET = 8330;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavDisableHighlight
     * }
     */
    public static final long NavDisableHighlight$offset() {
        return NavDisableHighlight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavDisableHighlight
     * }
     */
    public static boolean NavDisableHighlight(MemorySegment struct) {
        return struct.get(NavDisableHighlight$LAYOUT, NavDisableHighlight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavDisableHighlight
     * }
     */
    public static void NavDisableHighlight(MemorySegment struct, boolean fieldValue) {
        struct.set(NavDisableHighlight$LAYOUT, NavDisableHighlight$OFFSET, fieldValue);
    }

    private static final OfBoolean NavDisableMouseHover$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavDisableMouseHover"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavDisableMouseHover
     * }
     */
    public static final OfBoolean NavDisableMouseHover$layout() {
        return NavDisableMouseHover$LAYOUT;
    }

    private static final long NavDisableMouseHover$OFFSET = 8331;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavDisableMouseHover
     * }
     */
    public static final long NavDisableMouseHover$offset() {
        return NavDisableMouseHover$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavDisableMouseHover
     * }
     */
    public static boolean NavDisableMouseHover(MemorySegment struct) {
        return struct.get(NavDisableMouseHover$LAYOUT, NavDisableMouseHover$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavDisableMouseHover
     * }
     */
    public static void NavDisableMouseHover(MemorySegment struct, boolean fieldValue) {
        struct.set(NavDisableMouseHover$LAYOUT, NavDisableMouseHover$OFFSET, fieldValue);
    }

    private static final OfBoolean NavAnyRequest$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavAnyRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavAnyRequest
     * }
     */
    public static final OfBoolean NavAnyRequest$layout() {
        return NavAnyRequest$LAYOUT;
    }

    private static final long NavAnyRequest$OFFSET = 8332;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavAnyRequest
     * }
     */
    public static final long NavAnyRequest$offset() {
        return NavAnyRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavAnyRequest
     * }
     */
    public static boolean NavAnyRequest(MemorySegment struct) {
        return struct.get(NavAnyRequest$LAYOUT, NavAnyRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavAnyRequest
     * }
     */
    public static void NavAnyRequest(MemorySegment struct, boolean fieldValue) {
        struct.set(NavAnyRequest$LAYOUT, NavAnyRequest$OFFSET, fieldValue);
    }

    private static final OfBoolean NavInitRequest$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavInitRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavInitRequest
     * }
     */
    public static final OfBoolean NavInitRequest$layout() {
        return NavInitRequest$LAYOUT;
    }

    private static final long NavInitRequest$OFFSET = 8333;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavInitRequest
     * }
     */
    public static final long NavInitRequest$offset() {
        return NavInitRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavInitRequest
     * }
     */
    public static boolean NavInitRequest(MemorySegment struct) {
        return struct.get(NavInitRequest$LAYOUT, NavInitRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavInitRequest
     * }
     */
    public static void NavInitRequest(MemorySegment struct, boolean fieldValue) {
        struct.set(NavInitRequest$LAYOUT, NavInitRequest$OFFSET, fieldValue);
    }

    private static final OfBoolean NavInitRequestFromMove$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavInitRequestFromMove"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavInitRequestFromMove
     * }
     */
    public static final OfBoolean NavInitRequestFromMove$layout() {
        return NavInitRequestFromMove$LAYOUT;
    }

    private static final long NavInitRequestFromMove$OFFSET = 8334;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavInitRequestFromMove
     * }
     */
    public static final long NavInitRequestFromMove$offset() {
        return NavInitRequestFromMove$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavInitRequestFromMove
     * }
     */
    public static boolean NavInitRequestFromMove(MemorySegment struct) {
        return struct.get(NavInitRequestFromMove$LAYOUT, NavInitRequestFromMove$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavInitRequestFromMove
     * }
     */
    public static void NavInitRequestFromMove(MemorySegment struct, boolean fieldValue) {
        struct.set(NavInitRequestFromMove$LAYOUT, NavInitRequestFromMove$OFFSET, fieldValue);
    }

    private static final GroupLayout NavInitResult$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavInitResult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavInitResult
     * }
     */
    public static final GroupLayout NavInitResult$layout() {
        return NavInitResult$LAYOUT;
    }

    private static final long NavInitResult$OFFSET = 8336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavInitResult
     * }
     */
    public static final long NavInitResult$offset() {
        return NavInitResult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavInitResult
     * }
     */
    public static MemorySegment NavInitResult(MemorySegment struct) {
        return struct.asSlice(NavInitResult$OFFSET, NavInitResult$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavInitResult
     * }
     */
    public static void NavInitResult(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavInitResult$OFFSET, NavInitResult$LAYOUT.byteSize());
    }

    private static final OfBoolean NavMoveSubmitted$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavMoveSubmitted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavMoveSubmitted
     * }
     */
    public static final OfBoolean NavMoveSubmitted$layout() {
        return NavMoveSubmitted$LAYOUT;
    }

    private static final long NavMoveSubmitted$OFFSET = 8392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavMoveSubmitted
     * }
     */
    public static final long NavMoveSubmitted$offset() {
        return NavMoveSubmitted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavMoveSubmitted
     * }
     */
    public static boolean NavMoveSubmitted(MemorySegment struct) {
        return struct.get(NavMoveSubmitted$LAYOUT, NavMoveSubmitted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavMoveSubmitted
     * }
     */
    public static void NavMoveSubmitted(MemorySegment struct, boolean fieldValue) {
        struct.set(NavMoveSubmitted$LAYOUT, NavMoveSubmitted$OFFSET, fieldValue);
    }

    private static final OfBoolean NavMoveScoringItems$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavMoveScoringItems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavMoveScoringItems
     * }
     */
    public static final OfBoolean NavMoveScoringItems$layout() {
        return NavMoveScoringItems$LAYOUT;
    }

    private static final long NavMoveScoringItems$OFFSET = 8393;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavMoveScoringItems
     * }
     */
    public static final long NavMoveScoringItems$offset() {
        return NavMoveScoringItems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavMoveScoringItems
     * }
     */
    public static boolean NavMoveScoringItems(MemorySegment struct) {
        return struct.get(NavMoveScoringItems$LAYOUT, NavMoveScoringItems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavMoveScoringItems
     * }
     */
    public static void NavMoveScoringItems(MemorySegment struct, boolean fieldValue) {
        struct.set(NavMoveScoringItems$LAYOUT, NavMoveScoringItems$OFFSET, fieldValue);
    }

    private static final OfBoolean NavMoveForwardToNextFrame$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavMoveForwardToNextFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavMoveForwardToNextFrame
     * }
     */
    public static final OfBoolean NavMoveForwardToNextFrame$layout() {
        return NavMoveForwardToNextFrame$LAYOUT;
    }

    private static final long NavMoveForwardToNextFrame$OFFSET = 8394;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavMoveForwardToNextFrame
     * }
     */
    public static final long NavMoveForwardToNextFrame$offset() {
        return NavMoveForwardToNextFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavMoveForwardToNextFrame
     * }
     */
    public static boolean NavMoveForwardToNextFrame(MemorySegment struct) {
        return struct.get(NavMoveForwardToNextFrame$LAYOUT, NavMoveForwardToNextFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavMoveForwardToNextFrame
     * }
     */
    public static void NavMoveForwardToNextFrame(MemorySegment struct, boolean fieldValue) {
        struct.set(NavMoveForwardToNextFrame$LAYOUT, NavMoveForwardToNextFrame$OFFSET, fieldValue);
    }

    private static final OfInt NavMoveFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavMoveFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNavMoveFlags NavMoveFlags
     * }
     */
    public static final OfInt NavMoveFlags$layout() {
        return NavMoveFlags$LAYOUT;
    }

    private static final long NavMoveFlags$OFFSET = 8396;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNavMoveFlags NavMoveFlags
     * }
     */
    public static final long NavMoveFlags$offset() {
        return NavMoveFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNavMoveFlags NavMoveFlags
     * }
     */
    public static int NavMoveFlags(MemorySegment struct) {
        return struct.get(NavMoveFlags$LAYOUT, NavMoveFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNavMoveFlags NavMoveFlags
     * }
     */
    public static void NavMoveFlags(MemorySegment struct, int fieldValue) {
        struct.set(NavMoveFlags$LAYOUT, NavMoveFlags$OFFSET, fieldValue);
    }

    private static final OfInt NavMoveScrollFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavMoveScrollFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiScrollFlags NavMoveScrollFlags
     * }
     */
    public static final OfInt NavMoveScrollFlags$layout() {
        return NavMoveScrollFlags$LAYOUT;
    }

    private static final long NavMoveScrollFlags$OFFSET = 8400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiScrollFlags NavMoveScrollFlags
     * }
     */
    public static final long NavMoveScrollFlags$offset() {
        return NavMoveScrollFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiScrollFlags NavMoveScrollFlags
     * }
     */
    public static int NavMoveScrollFlags(MemorySegment struct) {
        return struct.get(NavMoveScrollFlags$LAYOUT, NavMoveScrollFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiScrollFlags NavMoveScrollFlags
     * }
     */
    public static void NavMoveScrollFlags(MemorySegment struct, int fieldValue) {
        struct.set(NavMoveScrollFlags$LAYOUT, NavMoveScrollFlags$OFFSET, fieldValue);
    }

    private static final OfInt NavMoveKeyMods$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavMoveKeyMods"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyChord NavMoveKeyMods
     * }
     */
    public static final OfInt NavMoveKeyMods$layout() {
        return NavMoveKeyMods$LAYOUT;
    }

    private static final long NavMoveKeyMods$OFFSET = 8404;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyChord NavMoveKeyMods
     * }
     */
    public static final long NavMoveKeyMods$offset() {
        return NavMoveKeyMods$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord NavMoveKeyMods
     * }
     */
    public static int NavMoveKeyMods(MemorySegment struct) {
        return struct.get(NavMoveKeyMods$LAYOUT, NavMoveKeyMods$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord NavMoveKeyMods
     * }
     */
    public static void NavMoveKeyMods(MemorySegment struct, int fieldValue) {
        struct.set(NavMoveKeyMods$LAYOUT, NavMoveKeyMods$OFFSET, fieldValue);
    }

    private static final OfInt NavMoveDir$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavMoveDir"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveDir
     * }
     */
    public static final OfInt NavMoveDir$layout() {
        return NavMoveDir$LAYOUT;
    }

    private static final long NavMoveDir$OFFSET = 8408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveDir
     * }
     */
    public static final long NavMoveDir$offset() {
        return NavMoveDir$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveDir
     * }
     */
    public static int NavMoveDir(MemorySegment struct) {
        return struct.get(NavMoveDir$LAYOUT, NavMoveDir$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveDir
     * }
     */
    public static void NavMoveDir(MemorySegment struct, int fieldValue) {
        struct.set(NavMoveDir$LAYOUT, NavMoveDir$OFFSET, fieldValue);
    }

    private static final OfInt NavMoveDirForDebug$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavMoveDirForDebug"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveDirForDebug
     * }
     */
    public static final OfInt NavMoveDirForDebug$layout() {
        return NavMoveDirForDebug$LAYOUT;
    }

    private static final long NavMoveDirForDebug$OFFSET = 8412;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveDirForDebug
     * }
     */
    public static final long NavMoveDirForDebug$offset() {
        return NavMoveDirForDebug$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveDirForDebug
     * }
     */
    public static int NavMoveDirForDebug(MemorySegment struct) {
        return struct.get(NavMoveDirForDebug$LAYOUT, NavMoveDirForDebug$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveDirForDebug
     * }
     */
    public static void NavMoveDirForDebug(MemorySegment struct, int fieldValue) {
        struct.set(NavMoveDirForDebug$LAYOUT, NavMoveDirForDebug$OFFSET, fieldValue);
    }

    private static final OfInt NavMoveClipDir$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavMoveClipDir"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveClipDir
     * }
     */
    public static final OfInt NavMoveClipDir$layout() {
        return NavMoveClipDir$LAYOUT;
    }

    private static final long NavMoveClipDir$OFFSET = 8416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveClipDir
     * }
     */
    public static final long NavMoveClipDir$offset() {
        return NavMoveClipDir$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveClipDir
     * }
     */
    public static int NavMoveClipDir(MemorySegment struct) {
        return struct.get(NavMoveClipDir$LAYOUT, NavMoveClipDir$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDir NavMoveClipDir
     * }
     */
    public static void NavMoveClipDir(MemorySegment struct, int fieldValue) {
        struct.set(NavMoveClipDir$LAYOUT, NavMoveClipDir$OFFSET, fieldValue);
    }

    private static final GroupLayout NavScoringRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavScoringRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect NavScoringRect
     * }
     */
    public static final GroupLayout NavScoringRect$layout() {
        return NavScoringRect$LAYOUT;
    }

    private static final long NavScoringRect$OFFSET = 8420;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect NavScoringRect
     * }
     */
    public static final long NavScoringRect$offset() {
        return NavScoringRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect NavScoringRect
     * }
     */
    public static MemorySegment NavScoringRect(MemorySegment struct) {
        return struct.asSlice(NavScoringRect$OFFSET, NavScoringRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect NavScoringRect
     * }
     */
    public static void NavScoringRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavScoringRect$OFFSET, NavScoringRect$LAYOUT.byteSize());
    }

    private static final GroupLayout NavScoringNoClipRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavScoringNoClipRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect NavScoringNoClipRect
     * }
     */
    public static final GroupLayout NavScoringNoClipRect$layout() {
        return NavScoringNoClipRect$LAYOUT;
    }

    private static final long NavScoringNoClipRect$OFFSET = 8436;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect NavScoringNoClipRect
     * }
     */
    public static final long NavScoringNoClipRect$offset() {
        return NavScoringNoClipRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect NavScoringNoClipRect
     * }
     */
    public static MemorySegment NavScoringNoClipRect(MemorySegment struct) {
        return struct.asSlice(NavScoringNoClipRect$OFFSET, NavScoringNoClipRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect NavScoringNoClipRect
     * }
     */
    public static void NavScoringNoClipRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavScoringNoClipRect$OFFSET, NavScoringNoClipRect$LAYOUT.byteSize());
    }

    private static final OfInt NavScoringDebugCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavScoringDebugCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int NavScoringDebugCount
     * }
     */
    public static final OfInt NavScoringDebugCount$layout() {
        return NavScoringDebugCount$LAYOUT;
    }

    private static final long NavScoringDebugCount$OFFSET = 8452;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int NavScoringDebugCount
     * }
     */
    public static final long NavScoringDebugCount$offset() {
        return NavScoringDebugCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int NavScoringDebugCount
     * }
     */
    public static int NavScoringDebugCount(MemorySegment struct) {
        return struct.get(NavScoringDebugCount$LAYOUT, NavScoringDebugCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int NavScoringDebugCount
     * }
     */
    public static void NavScoringDebugCount(MemorySegment struct, int fieldValue) {
        struct.set(NavScoringDebugCount$LAYOUT, NavScoringDebugCount$OFFSET, fieldValue);
    }

    private static final OfInt NavTabbingDir$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavTabbingDir"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int NavTabbingDir
     * }
     */
    public static final OfInt NavTabbingDir$layout() {
        return NavTabbingDir$LAYOUT;
    }

    private static final long NavTabbingDir$OFFSET = 8456;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int NavTabbingDir
     * }
     */
    public static final long NavTabbingDir$offset() {
        return NavTabbingDir$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int NavTabbingDir
     * }
     */
    public static int NavTabbingDir(MemorySegment struct) {
        return struct.get(NavTabbingDir$LAYOUT, NavTabbingDir$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int NavTabbingDir
     * }
     */
    public static void NavTabbingDir(MemorySegment struct, int fieldValue) {
        struct.set(NavTabbingDir$LAYOUT, NavTabbingDir$OFFSET, fieldValue);
    }

    private static final OfInt NavTabbingCounter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavTabbingCounter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int NavTabbingCounter
     * }
     */
    public static final OfInt NavTabbingCounter$layout() {
        return NavTabbingCounter$LAYOUT;
    }

    private static final long NavTabbingCounter$OFFSET = 8460;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int NavTabbingCounter
     * }
     */
    public static final long NavTabbingCounter$offset() {
        return NavTabbingCounter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int NavTabbingCounter
     * }
     */
    public static int NavTabbingCounter(MemorySegment struct) {
        return struct.get(NavTabbingCounter$LAYOUT, NavTabbingCounter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int NavTabbingCounter
     * }
     */
    public static void NavTabbingCounter(MemorySegment struct, int fieldValue) {
        struct.set(NavTabbingCounter$LAYOUT, NavTabbingCounter$OFFSET, fieldValue);
    }

    private static final GroupLayout NavMoveResultLocal$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavMoveResultLocal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultLocal
     * }
     */
    public static final GroupLayout NavMoveResultLocal$layout() {
        return NavMoveResultLocal$LAYOUT;
    }

    private static final long NavMoveResultLocal$OFFSET = 8464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultLocal
     * }
     */
    public static final long NavMoveResultLocal$offset() {
        return NavMoveResultLocal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultLocal
     * }
     */
    public static MemorySegment NavMoveResultLocal(MemorySegment struct) {
        return struct.asSlice(NavMoveResultLocal$OFFSET, NavMoveResultLocal$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultLocal
     * }
     */
    public static void NavMoveResultLocal(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavMoveResultLocal$OFFSET, NavMoveResultLocal$LAYOUT.byteSize());
    }

    private static final GroupLayout NavMoveResultLocalVisible$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavMoveResultLocalVisible"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultLocalVisible
     * }
     */
    public static final GroupLayout NavMoveResultLocalVisible$layout() {
        return NavMoveResultLocalVisible$LAYOUT;
    }

    private static final long NavMoveResultLocalVisible$OFFSET = 8520;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultLocalVisible
     * }
     */
    public static final long NavMoveResultLocalVisible$offset() {
        return NavMoveResultLocalVisible$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultLocalVisible
     * }
     */
    public static MemorySegment NavMoveResultLocalVisible(MemorySegment struct) {
        return struct.asSlice(NavMoveResultLocalVisible$OFFSET, NavMoveResultLocalVisible$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultLocalVisible
     * }
     */
    public static void NavMoveResultLocalVisible(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavMoveResultLocalVisible$OFFSET, NavMoveResultLocalVisible$LAYOUT.byteSize());
    }

    private static final GroupLayout NavMoveResultOther$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavMoveResultOther"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultOther
     * }
     */
    public static final GroupLayout NavMoveResultOther$layout() {
        return NavMoveResultOther$LAYOUT;
    }

    private static final long NavMoveResultOther$OFFSET = 8576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultOther
     * }
     */
    public static final long NavMoveResultOther$offset() {
        return NavMoveResultOther$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultOther
     * }
     */
    public static MemorySegment NavMoveResultOther(MemorySegment struct) {
        return struct.asSlice(NavMoveResultOther$OFFSET, NavMoveResultOther$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavMoveResultOther
     * }
     */
    public static void NavMoveResultOther(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavMoveResultOther$OFFSET, NavMoveResultOther$LAYOUT.byteSize());
    }

    private static final GroupLayout NavTabbingResultFirst$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavTabbingResultFirst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavTabbingResultFirst
     * }
     */
    public static final GroupLayout NavTabbingResultFirst$layout() {
        return NavTabbingResultFirst$LAYOUT;
    }

    private static final long NavTabbingResultFirst$OFFSET = 8632;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavTabbingResultFirst
     * }
     */
    public static final long NavTabbingResultFirst$offset() {
        return NavTabbingResultFirst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavTabbingResultFirst
     * }
     */
    public static MemorySegment NavTabbingResultFirst(MemorySegment struct) {
        return struct.asSlice(NavTabbingResultFirst$OFFSET, NavTabbingResultFirst$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiNavItemData NavTabbingResultFirst
     * }
     */
    public static void NavTabbingResultFirst(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavTabbingResultFirst$OFFSET, NavTabbingResultFirst$LAYOUT.byteSize());
    }

    private static final OfInt NavJustMovedFromFocusScopeId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavJustMovedFromFocusScopeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedFromFocusScopeId
     * }
     */
    public static final OfInt NavJustMovedFromFocusScopeId$layout() {
        return NavJustMovedFromFocusScopeId$LAYOUT;
    }

    private static final long NavJustMovedFromFocusScopeId$OFFSET = 8688;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedFromFocusScopeId
     * }
     */
    public static final long NavJustMovedFromFocusScopeId$offset() {
        return NavJustMovedFromFocusScopeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedFromFocusScopeId
     * }
     */
    public static int NavJustMovedFromFocusScopeId(MemorySegment struct) {
        return struct.get(NavJustMovedFromFocusScopeId$LAYOUT, NavJustMovedFromFocusScopeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedFromFocusScopeId
     * }
     */
    public static void NavJustMovedFromFocusScopeId(MemorySegment struct, int fieldValue) {
        struct.set(NavJustMovedFromFocusScopeId$LAYOUT, NavJustMovedFromFocusScopeId$OFFSET, fieldValue);
    }

    private static final OfInt NavJustMovedToId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavJustMovedToId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedToId
     * }
     */
    public static final OfInt NavJustMovedToId$layout() {
        return NavJustMovedToId$LAYOUT;
    }

    private static final long NavJustMovedToId$OFFSET = 8692;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedToId
     * }
     */
    public static final long NavJustMovedToId$offset() {
        return NavJustMovedToId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedToId
     * }
     */
    public static int NavJustMovedToId(MemorySegment struct) {
        return struct.get(NavJustMovedToId$LAYOUT, NavJustMovedToId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedToId
     * }
     */
    public static void NavJustMovedToId(MemorySegment struct, int fieldValue) {
        struct.set(NavJustMovedToId$LAYOUT, NavJustMovedToId$OFFSET, fieldValue);
    }

    private static final OfInt NavJustMovedToFocusScopeId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavJustMovedToFocusScopeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedToFocusScopeId
     * }
     */
    public static final OfInt NavJustMovedToFocusScopeId$layout() {
        return NavJustMovedToFocusScopeId$LAYOUT;
    }

    private static final long NavJustMovedToFocusScopeId$OFFSET = 8696;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedToFocusScopeId
     * }
     */
    public static final long NavJustMovedToFocusScopeId$offset() {
        return NavJustMovedToFocusScopeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedToFocusScopeId
     * }
     */
    public static int NavJustMovedToFocusScopeId(MemorySegment struct) {
        return struct.get(NavJustMovedToFocusScopeId$LAYOUT, NavJustMovedToFocusScopeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavJustMovedToFocusScopeId
     * }
     */
    public static void NavJustMovedToFocusScopeId(MemorySegment struct, int fieldValue) {
        struct.set(NavJustMovedToFocusScopeId$LAYOUT, NavJustMovedToFocusScopeId$OFFSET, fieldValue);
    }

    private static final OfInt NavJustMovedToKeyMods$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavJustMovedToKeyMods"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyChord NavJustMovedToKeyMods
     * }
     */
    public static final OfInt NavJustMovedToKeyMods$layout() {
        return NavJustMovedToKeyMods$LAYOUT;
    }

    private static final long NavJustMovedToKeyMods$OFFSET = 8700;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyChord NavJustMovedToKeyMods
     * }
     */
    public static final long NavJustMovedToKeyMods$offset() {
        return NavJustMovedToKeyMods$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord NavJustMovedToKeyMods
     * }
     */
    public static int NavJustMovedToKeyMods(MemorySegment struct) {
        return struct.get(NavJustMovedToKeyMods$LAYOUT, NavJustMovedToKeyMods$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord NavJustMovedToKeyMods
     * }
     */
    public static void NavJustMovedToKeyMods(MemorySegment struct, int fieldValue) {
        struct.set(NavJustMovedToKeyMods$LAYOUT, NavJustMovedToKeyMods$OFFSET, fieldValue);
    }

    private static final OfBoolean NavJustMovedToIsTabbing$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavJustMovedToIsTabbing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavJustMovedToIsTabbing
     * }
     */
    public static final OfBoolean NavJustMovedToIsTabbing$layout() {
        return NavJustMovedToIsTabbing$LAYOUT;
    }

    private static final long NavJustMovedToIsTabbing$OFFSET = 8704;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavJustMovedToIsTabbing
     * }
     */
    public static final long NavJustMovedToIsTabbing$offset() {
        return NavJustMovedToIsTabbing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavJustMovedToIsTabbing
     * }
     */
    public static boolean NavJustMovedToIsTabbing(MemorySegment struct) {
        return struct.get(NavJustMovedToIsTabbing$LAYOUT, NavJustMovedToIsTabbing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavJustMovedToIsTabbing
     * }
     */
    public static void NavJustMovedToIsTabbing(MemorySegment struct, boolean fieldValue) {
        struct.set(NavJustMovedToIsTabbing$LAYOUT, NavJustMovedToIsTabbing$OFFSET, fieldValue);
    }

    private static final OfBoolean NavJustMovedToHasSelectionData$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavJustMovedToHasSelectionData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavJustMovedToHasSelectionData
     * }
     */
    public static final OfBoolean NavJustMovedToHasSelectionData$layout() {
        return NavJustMovedToHasSelectionData$LAYOUT;
    }

    private static final long NavJustMovedToHasSelectionData$OFFSET = 8705;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavJustMovedToHasSelectionData
     * }
     */
    public static final long NavJustMovedToHasSelectionData$offset() {
        return NavJustMovedToHasSelectionData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavJustMovedToHasSelectionData
     * }
     */
    public static boolean NavJustMovedToHasSelectionData(MemorySegment struct) {
        return struct.get(NavJustMovedToHasSelectionData$LAYOUT, NavJustMovedToHasSelectionData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavJustMovedToHasSelectionData
     * }
     */
    public static void NavJustMovedToHasSelectionData(MemorySegment struct, boolean fieldValue) {
        struct.set(NavJustMovedToHasSelectionData$LAYOUT, NavJustMovedToHasSelectionData$OFFSET, fieldValue);
    }

    private static final OfInt ConfigNavWindowingKeyNext$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ConfigNavWindowingKeyNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyChord ConfigNavWindowingKeyNext
     * }
     */
    public static final OfInt ConfigNavWindowingKeyNext$layout() {
        return ConfigNavWindowingKeyNext$LAYOUT;
    }

    private static final long ConfigNavWindowingKeyNext$OFFSET = 8708;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyChord ConfigNavWindowingKeyNext
     * }
     */
    public static final long ConfigNavWindowingKeyNext$offset() {
        return ConfigNavWindowingKeyNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord ConfigNavWindowingKeyNext
     * }
     */
    public static int ConfigNavWindowingKeyNext(MemorySegment struct) {
        return struct.get(ConfigNavWindowingKeyNext$LAYOUT, ConfigNavWindowingKeyNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord ConfigNavWindowingKeyNext
     * }
     */
    public static void ConfigNavWindowingKeyNext(MemorySegment struct, int fieldValue) {
        struct.set(ConfigNavWindowingKeyNext$LAYOUT, ConfigNavWindowingKeyNext$OFFSET, fieldValue);
    }

    private static final OfInt ConfigNavWindowingKeyPrev$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ConfigNavWindowingKeyPrev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyChord ConfigNavWindowingKeyPrev
     * }
     */
    public static final OfInt ConfigNavWindowingKeyPrev$layout() {
        return ConfigNavWindowingKeyPrev$LAYOUT;
    }

    private static final long ConfigNavWindowingKeyPrev$OFFSET = 8712;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyChord ConfigNavWindowingKeyPrev
     * }
     */
    public static final long ConfigNavWindowingKeyPrev$offset() {
        return ConfigNavWindowingKeyPrev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord ConfigNavWindowingKeyPrev
     * }
     */
    public static int ConfigNavWindowingKeyPrev(MemorySegment struct) {
        return struct.get(ConfigNavWindowingKeyPrev$LAYOUT, ConfigNavWindowingKeyPrev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord ConfigNavWindowingKeyPrev
     * }
     */
    public static void ConfigNavWindowingKeyPrev(MemorySegment struct, int fieldValue) {
        struct.set(ConfigNavWindowingKeyPrev$LAYOUT, ConfigNavWindowingKeyPrev$OFFSET, fieldValue);
    }

    private static final AddressLayout NavWindowingTarget$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("NavWindowingTarget"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingTarget
     * }
     */
    public static final AddressLayout NavWindowingTarget$layout() {
        return NavWindowingTarget$LAYOUT;
    }

    private static final long NavWindowingTarget$OFFSET = 8720;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingTarget
     * }
     */
    public static final long NavWindowingTarget$offset() {
        return NavWindowingTarget$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingTarget
     * }
     */
    public static MemorySegment NavWindowingTarget(MemorySegment struct) {
        return struct.get(NavWindowingTarget$LAYOUT, NavWindowingTarget$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingTarget
     * }
     */
    public static void NavWindowingTarget(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(NavWindowingTarget$LAYOUT, NavWindowingTarget$OFFSET, fieldValue);
    }

    private static final AddressLayout NavWindowingTargetAnim$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("NavWindowingTargetAnim"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingTargetAnim
     * }
     */
    public static final AddressLayout NavWindowingTargetAnim$layout() {
        return NavWindowingTargetAnim$LAYOUT;
    }

    private static final long NavWindowingTargetAnim$OFFSET = 8728;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingTargetAnim
     * }
     */
    public static final long NavWindowingTargetAnim$offset() {
        return NavWindowingTargetAnim$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingTargetAnim
     * }
     */
    public static MemorySegment NavWindowingTargetAnim(MemorySegment struct) {
        return struct.get(NavWindowingTargetAnim$LAYOUT, NavWindowingTargetAnim$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingTargetAnim
     * }
     */
    public static void NavWindowingTargetAnim(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(NavWindowingTargetAnim$LAYOUT, NavWindowingTargetAnim$OFFSET, fieldValue);
    }

    private static final AddressLayout NavWindowingListWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("NavWindowingListWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingListWindow
     * }
     */
    public static final AddressLayout NavWindowingListWindow$layout() {
        return NavWindowingListWindow$LAYOUT;
    }

    private static final long NavWindowingListWindow$OFFSET = 8736;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingListWindow
     * }
     */
    public static final long NavWindowingListWindow$offset() {
        return NavWindowingListWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingListWindow
     * }
     */
    public static MemorySegment NavWindowingListWindow(MemorySegment struct) {
        return struct.get(NavWindowingListWindow$LAYOUT, NavWindowingListWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavWindowingListWindow
     * }
     */
    public static void NavWindowingListWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(NavWindowingListWindow$LAYOUT, NavWindowingListWindow$OFFSET, fieldValue);
    }

    private static final OfFloat NavWindowingTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("NavWindowingTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float NavWindowingTimer
     * }
     */
    public static final OfFloat NavWindowingTimer$layout() {
        return NavWindowingTimer$LAYOUT;
    }

    private static final long NavWindowingTimer$OFFSET = 8744;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float NavWindowingTimer
     * }
     */
    public static final long NavWindowingTimer$offset() {
        return NavWindowingTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float NavWindowingTimer
     * }
     */
    public static float NavWindowingTimer(MemorySegment struct) {
        return struct.get(NavWindowingTimer$LAYOUT, NavWindowingTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float NavWindowingTimer
     * }
     */
    public static void NavWindowingTimer(MemorySegment struct, float fieldValue) {
        struct.set(NavWindowingTimer$LAYOUT, NavWindowingTimer$OFFSET, fieldValue);
    }

    private static final OfFloat NavWindowingHighlightAlpha$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("NavWindowingHighlightAlpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float NavWindowingHighlightAlpha
     * }
     */
    public static final OfFloat NavWindowingHighlightAlpha$layout() {
        return NavWindowingHighlightAlpha$LAYOUT;
    }

    private static final long NavWindowingHighlightAlpha$OFFSET = 8748;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float NavWindowingHighlightAlpha
     * }
     */
    public static final long NavWindowingHighlightAlpha$offset() {
        return NavWindowingHighlightAlpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float NavWindowingHighlightAlpha
     * }
     */
    public static float NavWindowingHighlightAlpha(MemorySegment struct) {
        return struct.get(NavWindowingHighlightAlpha$LAYOUT, NavWindowingHighlightAlpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float NavWindowingHighlightAlpha
     * }
     */
    public static void NavWindowingHighlightAlpha(MemorySegment struct, float fieldValue) {
        struct.set(NavWindowingHighlightAlpha$LAYOUT, NavWindowingHighlightAlpha$OFFSET, fieldValue);
    }

    private static final OfBoolean NavWindowingToggleLayer$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("NavWindowingToggleLayer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool NavWindowingToggleLayer
     * }
     */
    public static final OfBoolean NavWindowingToggleLayer$layout() {
        return NavWindowingToggleLayer$LAYOUT;
    }

    private static final long NavWindowingToggleLayer$OFFSET = 8752;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool NavWindowingToggleLayer
     * }
     */
    public static final long NavWindowingToggleLayer$offset() {
        return NavWindowingToggleLayer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool NavWindowingToggleLayer
     * }
     */
    public static boolean NavWindowingToggleLayer(MemorySegment struct) {
        return struct.get(NavWindowingToggleLayer$LAYOUT, NavWindowingToggleLayer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool NavWindowingToggleLayer
     * }
     */
    public static void NavWindowingToggleLayer(MemorySegment struct, boolean fieldValue) {
        struct.set(NavWindowingToggleLayer$LAYOUT, NavWindowingToggleLayer$OFFSET, fieldValue);
    }

    private static final OfInt NavWindowingToggleKey$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavWindowingToggleKey"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKey NavWindowingToggleKey
     * }
     */
    public static final OfInt NavWindowingToggleKey$layout() {
        return NavWindowingToggleKey$LAYOUT;
    }

    private static final long NavWindowingToggleKey$OFFSET = 8756;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKey NavWindowingToggleKey
     * }
     */
    public static final long NavWindowingToggleKey$offset() {
        return NavWindowingToggleKey$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKey NavWindowingToggleKey
     * }
     */
    public static int NavWindowingToggleKey(MemorySegment struct) {
        return struct.get(NavWindowingToggleKey$LAYOUT, NavWindowingToggleKey$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKey NavWindowingToggleKey
     * }
     */
    public static void NavWindowingToggleKey(MemorySegment struct, int fieldValue) {
        struct.set(NavWindowingToggleKey$LAYOUT, NavWindowingToggleKey$OFFSET, fieldValue);
    }

    private static final GroupLayout NavWindowingAccumDeltaPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavWindowingAccumDeltaPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 NavWindowingAccumDeltaPos
     * }
     */
    public static final GroupLayout NavWindowingAccumDeltaPos$layout() {
        return NavWindowingAccumDeltaPos$LAYOUT;
    }

    private static final long NavWindowingAccumDeltaPos$OFFSET = 8760;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 NavWindowingAccumDeltaPos
     * }
     */
    public static final long NavWindowingAccumDeltaPos$offset() {
        return NavWindowingAccumDeltaPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 NavWindowingAccumDeltaPos
     * }
     */
    public static MemorySegment NavWindowingAccumDeltaPos(MemorySegment struct) {
        return struct.asSlice(NavWindowingAccumDeltaPos$OFFSET, NavWindowingAccumDeltaPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 NavWindowingAccumDeltaPos
     * }
     */
    public static void NavWindowingAccumDeltaPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavWindowingAccumDeltaPos$OFFSET, NavWindowingAccumDeltaPos$LAYOUT.byteSize());
    }

    private static final GroupLayout NavWindowingAccumDeltaSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("NavWindowingAccumDeltaSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 NavWindowingAccumDeltaSize
     * }
     */
    public static final GroupLayout NavWindowingAccumDeltaSize$layout() {
        return NavWindowingAccumDeltaSize$LAYOUT;
    }

    private static final long NavWindowingAccumDeltaSize$OFFSET = 8768;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 NavWindowingAccumDeltaSize
     * }
     */
    public static final long NavWindowingAccumDeltaSize$offset() {
        return NavWindowingAccumDeltaSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 NavWindowingAccumDeltaSize
     * }
     */
    public static MemorySegment NavWindowingAccumDeltaSize(MemorySegment struct) {
        return struct.asSlice(NavWindowingAccumDeltaSize$OFFSET, NavWindowingAccumDeltaSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 NavWindowingAccumDeltaSize
     * }
     */
    public static void NavWindowingAccumDeltaSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavWindowingAccumDeltaSize$OFFSET, NavWindowingAccumDeltaSize$LAYOUT.byteSize());
    }

    private static final OfFloat DimBgRatio$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DimBgRatio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DimBgRatio
     * }
     */
    public static final OfFloat DimBgRatio$layout() {
        return DimBgRatio$LAYOUT;
    }

    private static final long DimBgRatio$OFFSET = 8776;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DimBgRatio
     * }
     */
    public static final long DimBgRatio$offset() {
        return DimBgRatio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DimBgRatio
     * }
     */
    public static float DimBgRatio(MemorySegment struct) {
        return struct.get(DimBgRatio$LAYOUT, DimBgRatio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DimBgRatio
     * }
     */
    public static void DimBgRatio(MemorySegment struct, float fieldValue) {
        struct.set(DimBgRatio$LAYOUT, DimBgRatio$OFFSET, fieldValue);
    }

    private static final OfBoolean DragDropActive$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("DragDropActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool DragDropActive
     * }
     */
    public static final OfBoolean DragDropActive$layout() {
        return DragDropActive$LAYOUT;
    }

    private static final long DragDropActive$OFFSET = 8780;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool DragDropActive
     * }
     */
    public static final long DragDropActive$offset() {
        return DragDropActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool DragDropActive
     * }
     */
    public static boolean DragDropActive(MemorySegment struct) {
        return struct.get(DragDropActive$LAYOUT, DragDropActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool DragDropActive
     * }
     */
    public static void DragDropActive(MemorySegment struct, boolean fieldValue) {
        struct.set(DragDropActive$LAYOUT, DragDropActive$OFFSET, fieldValue);
    }

    private static final OfBoolean DragDropWithinSource$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("DragDropWithinSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool DragDropWithinSource
     * }
     */
    public static final OfBoolean DragDropWithinSource$layout() {
        return DragDropWithinSource$LAYOUT;
    }

    private static final long DragDropWithinSource$OFFSET = 8781;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool DragDropWithinSource
     * }
     */
    public static final long DragDropWithinSource$offset() {
        return DragDropWithinSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool DragDropWithinSource
     * }
     */
    public static boolean DragDropWithinSource(MemorySegment struct) {
        return struct.get(DragDropWithinSource$LAYOUT, DragDropWithinSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool DragDropWithinSource
     * }
     */
    public static void DragDropWithinSource(MemorySegment struct, boolean fieldValue) {
        struct.set(DragDropWithinSource$LAYOUT, DragDropWithinSource$OFFSET, fieldValue);
    }

    private static final OfBoolean DragDropWithinTarget$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("DragDropWithinTarget"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool DragDropWithinTarget
     * }
     */
    public static final OfBoolean DragDropWithinTarget$layout() {
        return DragDropWithinTarget$LAYOUT;
    }

    private static final long DragDropWithinTarget$OFFSET = 8782;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool DragDropWithinTarget
     * }
     */
    public static final long DragDropWithinTarget$offset() {
        return DragDropWithinTarget$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool DragDropWithinTarget
     * }
     */
    public static boolean DragDropWithinTarget(MemorySegment struct) {
        return struct.get(DragDropWithinTarget$LAYOUT, DragDropWithinTarget$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool DragDropWithinTarget
     * }
     */
    public static void DragDropWithinTarget(MemorySegment struct, boolean fieldValue) {
        struct.set(DragDropWithinTarget$LAYOUT, DragDropWithinTarget$OFFSET, fieldValue);
    }

    private static final OfInt DragDropSourceFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DragDropSourceFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDragDropFlags DragDropSourceFlags
     * }
     */
    public static final OfInt DragDropSourceFlags$layout() {
        return DragDropSourceFlags$LAYOUT;
    }

    private static final long DragDropSourceFlags$OFFSET = 8784;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDragDropFlags DragDropSourceFlags
     * }
     */
    public static final long DragDropSourceFlags$offset() {
        return DragDropSourceFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDragDropFlags DragDropSourceFlags
     * }
     */
    public static int DragDropSourceFlags(MemorySegment struct) {
        return struct.get(DragDropSourceFlags$LAYOUT, DragDropSourceFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDragDropFlags DragDropSourceFlags
     * }
     */
    public static void DragDropSourceFlags(MemorySegment struct, int fieldValue) {
        struct.set(DragDropSourceFlags$LAYOUT, DragDropSourceFlags$OFFSET, fieldValue);
    }

    private static final OfInt DragDropSourceFrameCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DragDropSourceFrameCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int DragDropSourceFrameCount
     * }
     */
    public static final OfInt DragDropSourceFrameCount$layout() {
        return DragDropSourceFrameCount$LAYOUT;
    }

    private static final long DragDropSourceFrameCount$OFFSET = 8788;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int DragDropSourceFrameCount
     * }
     */
    public static final long DragDropSourceFrameCount$offset() {
        return DragDropSourceFrameCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int DragDropSourceFrameCount
     * }
     */
    public static int DragDropSourceFrameCount(MemorySegment struct) {
        return struct.get(DragDropSourceFrameCount$LAYOUT, DragDropSourceFrameCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int DragDropSourceFrameCount
     * }
     */
    public static void DragDropSourceFrameCount(MemorySegment struct, int fieldValue) {
        struct.set(DragDropSourceFrameCount$LAYOUT, DragDropSourceFrameCount$OFFSET, fieldValue);
    }

    private static final OfInt DragDropMouseButton$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DragDropMouseButton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int DragDropMouseButton
     * }
     */
    public static final OfInt DragDropMouseButton$layout() {
        return DragDropMouseButton$LAYOUT;
    }

    private static final long DragDropMouseButton$OFFSET = 8792;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int DragDropMouseButton
     * }
     */
    public static final long DragDropMouseButton$offset() {
        return DragDropMouseButton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int DragDropMouseButton
     * }
     */
    public static int DragDropMouseButton(MemorySegment struct) {
        return struct.get(DragDropMouseButton$LAYOUT, DragDropMouseButton$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int DragDropMouseButton
     * }
     */
    public static void DragDropMouseButton(MemorySegment struct, int fieldValue) {
        struct.set(DragDropMouseButton$LAYOUT, DragDropMouseButton$OFFSET, fieldValue);
    }

    private static final GroupLayout DragDropPayload$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DragDropPayload"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiPayload DragDropPayload
     * }
     */
    public static final GroupLayout DragDropPayload$layout() {
        return DragDropPayload$LAYOUT;
    }

    private static final long DragDropPayload$OFFSET = 8800;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiPayload DragDropPayload
     * }
     */
    public static final long DragDropPayload$offset() {
        return DragDropPayload$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiPayload DragDropPayload
     * }
     */
    public static MemorySegment DragDropPayload(MemorySegment struct) {
        return struct.asSlice(DragDropPayload$OFFSET, DragDropPayload$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiPayload DragDropPayload
     * }
     */
    public static void DragDropPayload(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DragDropPayload$OFFSET, DragDropPayload$LAYOUT.byteSize());
    }

    private static final GroupLayout DragDropTargetRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DragDropTargetRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect DragDropTargetRect
     * }
     */
    public static final GroupLayout DragDropTargetRect$layout() {
        return DragDropTargetRect$LAYOUT;
    }

    private static final long DragDropTargetRect$OFFSET = 8864;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect DragDropTargetRect
     * }
     */
    public static final long DragDropTargetRect$offset() {
        return DragDropTargetRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect DragDropTargetRect
     * }
     */
    public static MemorySegment DragDropTargetRect(MemorySegment struct) {
        return struct.asSlice(DragDropTargetRect$OFFSET, DragDropTargetRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect DragDropTargetRect
     * }
     */
    public static void DragDropTargetRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DragDropTargetRect$OFFSET, DragDropTargetRect$LAYOUT.byteSize());
    }

    private static final GroupLayout DragDropTargetClipRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DragDropTargetClipRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect DragDropTargetClipRect
     * }
     */
    public static final GroupLayout DragDropTargetClipRect$layout() {
        return DragDropTargetClipRect$LAYOUT;
    }

    private static final long DragDropTargetClipRect$OFFSET = 8880;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect DragDropTargetClipRect
     * }
     */
    public static final long DragDropTargetClipRect$offset() {
        return DragDropTargetClipRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect DragDropTargetClipRect
     * }
     */
    public static MemorySegment DragDropTargetClipRect(MemorySegment struct) {
        return struct.asSlice(DragDropTargetClipRect$OFFSET, DragDropTargetClipRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect DragDropTargetClipRect
     * }
     */
    public static void DragDropTargetClipRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DragDropTargetClipRect$OFFSET, DragDropTargetClipRect$LAYOUT.byteSize());
    }

    private static final OfInt DragDropTargetId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DragDropTargetId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DragDropTargetId
     * }
     */
    public static final OfInt DragDropTargetId$layout() {
        return DragDropTargetId$LAYOUT;
    }

    private static final long DragDropTargetId$OFFSET = 8896;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DragDropTargetId
     * }
     */
    public static final long DragDropTargetId$offset() {
        return DragDropTargetId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DragDropTargetId
     * }
     */
    public static int DragDropTargetId(MemorySegment struct) {
        return struct.get(DragDropTargetId$LAYOUT, DragDropTargetId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DragDropTargetId
     * }
     */
    public static void DragDropTargetId(MemorySegment struct, int fieldValue) {
        struct.set(DragDropTargetId$LAYOUT, DragDropTargetId$OFFSET, fieldValue);
    }

    private static final OfInt DragDropAcceptFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DragDropAcceptFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDragDropFlags DragDropAcceptFlags
     * }
     */
    public static final OfInt DragDropAcceptFlags$layout() {
        return DragDropAcceptFlags$LAYOUT;
    }

    private static final long DragDropAcceptFlags$OFFSET = 8900;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDragDropFlags DragDropAcceptFlags
     * }
     */
    public static final long DragDropAcceptFlags$offset() {
        return DragDropAcceptFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDragDropFlags DragDropAcceptFlags
     * }
     */
    public static int DragDropAcceptFlags(MemorySegment struct) {
        return struct.get(DragDropAcceptFlags$LAYOUT, DragDropAcceptFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDragDropFlags DragDropAcceptFlags
     * }
     */
    public static void DragDropAcceptFlags(MemorySegment struct, int fieldValue) {
        struct.set(DragDropAcceptFlags$LAYOUT, DragDropAcceptFlags$OFFSET, fieldValue);
    }

    private static final OfFloat DragDropAcceptIdCurrRectSurface$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DragDropAcceptIdCurrRectSurface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DragDropAcceptIdCurrRectSurface
     * }
     */
    public static final OfFloat DragDropAcceptIdCurrRectSurface$layout() {
        return DragDropAcceptIdCurrRectSurface$LAYOUT;
    }

    private static final long DragDropAcceptIdCurrRectSurface$OFFSET = 8904;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DragDropAcceptIdCurrRectSurface
     * }
     */
    public static final long DragDropAcceptIdCurrRectSurface$offset() {
        return DragDropAcceptIdCurrRectSurface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DragDropAcceptIdCurrRectSurface
     * }
     */
    public static float DragDropAcceptIdCurrRectSurface(MemorySegment struct) {
        return struct.get(DragDropAcceptIdCurrRectSurface$LAYOUT, DragDropAcceptIdCurrRectSurface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DragDropAcceptIdCurrRectSurface
     * }
     */
    public static void DragDropAcceptIdCurrRectSurface(MemorySegment struct, float fieldValue) {
        struct.set(DragDropAcceptIdCurrRectSurface$LAYOUT, DragDropAcceptIdCurrRectSurface$OFFSET, fieldValue);
    }

    private static final OfInt DragDropAcceptIdCurr$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DragDropAcceptIdCurr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DragDropAcceptIdCurr
     * }
     */
    public static final OfInt DragDropAcceptIdCurr$layout() {
        return DragDropAcceptIdCurr$LAYOUT;
    }

    private static final long DragDropAcceptIdCurr$OFFSET = 8908;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DragDropAcceptIdCurr
     * }
     */
    public static final long DragDropAcceptIdCurr$offset() {
        return DragDropAcceptIdCurr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DragDropAcceptIdCurr
     * }
     */
    public static int DragDropAcceptIdCurr(MemorySegment struct) {
        return struct.get(DragDropAcceptIdCurr$LAYOUT, DragDropAcceptIdCurr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DragDropAcceptIdCurr
     * }
     */
    public static void DragDropAcceptIdCurr(MemorySegment struct, int fieldValue) {
        struct.set(DragDropAcceptIdCurr$LAYOUT, DragDropAcceptIdCurr$OFFSET, fieldValue);
    }

    private static final OfInt DragDropAcceptIdPrev$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DragDropAcceptIdPrev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DragDropAcceptIdPrev
     * }
     */
    public static final OfInt DragDropAcceptIdPrev$layout() {
        return DragDropAcceptIdPrev$LAYOUT;
    }

    private static final long DragDropAcceptIdPrev$OFFSET = 8912;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DragDropAcceptIdPrev
     * }
     */
    public static final long DragDropAcceptIdPrev$offset() {
        return DragDropAcceptIdPrev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DragDropAcceptIdPrev
     * }
     */
    public static int DragDropAcceptIdPrev(MemorySegment struct) {
        return struct.get(DragDropAcceptIdPrev$LAYOUT, DragDropAcceptIdPrev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DragDropAcceptIdPrev
     * }
     */
    public static void DragDropAcceptIdPrev(MemorySegment struct, int fieldValue) {
        struct.set(DragDropAcceptIdPrev$LAYOUT, DragDropAcceptIdPrev$OFFSET, fieldValue);
    }

    private static final OfInt DragDropAcceptFrameCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DragDropAcceptFrameCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int DragDropAcceptFrameCount
     * }
     */
    public static final OfInt DragDropAcceptFrameCount$layout() {
        return DragDropAcceptFrameCount$LAYOUT;
    }

    private static final long DragDropAcceptFrameCount$OFFSET = 8916;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int DragDropAcceptFrameCount
     * }
     */
    public static final long DragDropAcceptFrameCount$offset() {
        return DragDropAcceptFrameCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int DragDropAcceptFrameCount
     * }
     */
    public static int DragDropAcceptFrameCount(MemorySegment struct) {
        return struct.get(DragDropAcceptFrameCount$LAYOUT, DragDropAcceptFrameCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int DragDropAcceptFrameCount
     * }
     */
    public static void DragDropAcceptFrameCount(MemorySegment struct, int fieldValue) {
        struct.set(DragDropAcceptFrameCount$LAYOUT, DragDropAcceptFrameCount$OFFSET, fieldValue);
    }

    private static final OfInt DragDropHoldJustPressedId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DragDropHoldJustPressedId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DragDropHoldJustPressedId
     * }
     */
    public static final OfInt DragDropHoldJustPressedId$layout() {
        return DragDropHoldJustPressedId$LAYOUT;
    }

    private static final long DragDropHoldJustPressedId$OFFSET = 8920;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DragDropHoldJustPressedId
     * }
     */
    public static final long DragDropHoldJustPressedId$offset() {
        return DragDropHoldJustPressedId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DragDropHoldJustPressedId
     * }
     */
    public static int DragDropHoldJustPressedId(MemorySegment struct) {
        return struct.get(DragDropHoldJustPressedId$LAYOUT, DragDropHoldJustPressedId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DragDropHoldJustPressedId
     * }
     */
    public static void DragDropHoldJustPressedId(MemorySegment struct, int fieldValue) {
        struct.set(DragDropHoldJustPressedId$LAYOUT, DragDropHoldJustPressedId$OFFSET, fieldValue);
    }

    private static final GroupLayout DragDropPayloadBufHeap$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DragDropPayloadBufHeap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_unsigned_char DragDropPayloadBufHeap
     * }
     */
    public static final GroupLayout DragDropPayloadBufHeap$layout() {
        return DragDropPayloadBufHeap$LAYOUT;
    }

    private static final long DragDropPayloadBufHeap$OFFSET = 8928;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_unsigned_char DragDropPayloadBufHeap
     * }
     */
    public static final long DragDropPayloadBufHeap$offset() {
        return DragDropPayloadBufHeap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_unsigned_char DragDropPayloadBufHeap
     * }
     */
    public static MemorySegment DragDropPayloadBufHeap(MemorySegment struct) {
        return struct.asSlice(DragDropPayloadBufHeap$OFFSET, DragDropPayloadBufHeap$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_unsigned_char DragDropPayloadBufHeap
     * }
     */
    public static void DragDropPayloadBufHeap(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DragDropPayloadBufHeap$OFFSET, DragDropPayloadBufHeap$LAYOUT.byteSize());
    }

    private static final SequenceLayout DragDropPayloadBufLocal$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("DragDropPayloadBufLocal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char DragDropPayloadBufLocal[16]
     * }
     */
    public static final SequenceLayout DragDropPayloadBufLocal$layout() {
        return DragDropPayloadBufLocal$LAYOUT;
    }

    private static final long DragDropPayloadBufLocal$OFFSET = 8944;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char DragDropPayloadBufLocal[16]
     * }
     */
    public static final long DragDropPayloadBufLocal$offset() {
        return DragDropPayloadBufLocal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char DragDropPayloadBufLocal[16]
     * }
     */
    public static MemorySegment DragDropPayloadBufLocal(MemorySegment struct) {
        return struct.asSlice(DragDropPayloadBufLocal$OFFSET, DragDropPayloadBufLocal$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char DragDropPayloadBufLocal[16]
     * }
     */
    public static void DragDropPayloadBufLocal(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DragDropPayloadBufLocal$OFFSET, DragDropPayloadBufLocal$LAYOUT.byteSize());
    }

    private static long[] DragDropPayloadBufLocal$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * unsigned char DragDropPayloadBufLocal[16]
     * }
     */
    public static long[] DragDropPayloadBufLocal$dimensions() {
        return DragDropPayloadBufLocal$DIMS;
    }
    private static final VarHandle DragDropPayloadBufLocal$ELEM_HANDLE = DragDropPayloadBufLocal$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * unsigned char DragDropPayloadBufLocal[16]
     * }
     */
    public static byte DragDropPayloadBufLocal(MemorySegment struct, long index0) {
        return (byte)DragDropPayloadBufLocal$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * unsigned char DragDropPayloadBufLocal[16]
     * }
     */
    public static void DragDropPayloadBufLocal(MemorySegment struct, long index0, byte fieldValue) {
        DragDropPayloadBufLocal$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt ClipperTempDataStacked$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ClipperTempDataStacked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ClipperTempDataStacked
     * }
     */
    public static final OfInt ClipperTempDataStacked$layout() {
        return ClipperTempDataStacked$LAYOUT;
    }

    private static final long ClipperTempDataStacked$OFFSET = 8960;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ClipperTempDataStacked
     * }
     */
    public static final long ClipperTempDataStacked$offset() {
        return ClipperTempDataStacked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ClipperTempDataStacked
     * }
     */
    public static int ClipperTempDataStacked(MemorySegment struct) {
        return struct.get(ClipperTempDataStacked$LAYOUT, ClipperTempDataStacked$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ClipperTempDataStacked
     * }
     */
    public static void ClipperTempDataStacked(MemorySegment struct, int fieldValue) {
        struct.set(ClipperTempDataStacked$LAYOUT, ClipperTempDataStacked$OFFSET, fieldValue);
    }

    private static final GroupLayout ClipperTempData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ClipperTempData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiListClipperData ClipperTempData
     * }
     */
    public static final GroupLayout ClipperTempData$layout() {
        return ClipperTempData$LAYOUT;
    }

    private static final long ClipperTempData$OFFSET = 8968;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiListClipperData ClipperTempData
     * }
     */
    public static final long ClipperTempData$offset() {
        return ClipperTempData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiListClipperData ClipperTempData
     * }
     */
    public static MemorySegment ClipperTempData(MemorySegment struct) {
        return struct.asSlice(ClipperTempData$OFFSET, ClipperTempData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiListClipperData ClipperTempData
     * }
     */
    public static void ClipperTempData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ClipperTempData$OFFSET, ClipperTempData$LAYOUT.byteSize());
    }

    private static final AddressLayout CurrentTable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CurrentTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTable *CurrentTable
     * }
     */
    public static final AddressLayout CurrentTable$layout() {
        return CurrentTable$LAYOUT;
    }

    private static final long CurrentTable$OFFSET = 8984;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTable *CurrentTable
     * }
     */
    public static final long CurrentTable$offset() {
        return CurrentTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTable *CurrentTable
     * }
     */
    public static MemorySegment CurrentTable(MemorySegment struct) {
        return struct.get(CurrentTable$LAYOUT, CurrentTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTable *CurrentTable
     * }
     */
    public static void CurrentTable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CurrentTable$LAYOUT, CurrentTable$OFFSET, fieldValue);
    }

    private static final OfInt DebugBreakInTable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugBreakInTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DebugBreakInTable
     * }
     */
    public static final OfInt DebugBreakInTable$layout() {
        return DebugBreakInTable$LAYOUT;
    }

    private static final long DebugBreakInTable$OFFSET = 8992;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DebugBreakInTable
     * }
     */
    public static final long DebugBreakInTable$offset() {
        return DebugBreakInTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DebugBreakInTable
     * }
     */
    public static int DebugBreakInTable(MemorySegment struct) {
        return struct.get(DebugBreakInTable$LAYOUT, DebugBreakInTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DebugBreakInTable
     * }
     */
    public static void DebugBreakInTable(MemorySegment struct, int fieldValue) {
        struct.set(DebugBreakInTable$LAYOUT, DebugBreakInTable$OFFSET, fieldValue);
    }

    private static final OfInt TablesTempDataStacked$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TablesTempDataStacked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int TablesTempDataStacked
     * }
     */
    public static final OfInt TablesTempDataStacked$layout() {
        return TablesTempDataStacked$LAYOUT;
    }

    private static final long TablesTempDataStacked$OFFSET = 8996;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int TablesTempDataStacked
     * }
     */
    public static final long TablesTempDataStacked$offset() {
        return TablesTempDataStacked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int TablesTempDataStacked
     * }
     */
    public static int TablesTempDataStacked(MemorySegment struct) {
        return struct.get(TablesTempDataStacked$LAYOUT, TablesTempDataStacked$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int TablesTempDataStacked
     * }
     */
    public static void TablesTempDataStacked(MemorySegment struct, int fieldValue) {
        struct.set(TablesTempDataStacked$LAYOUT, TablesTempDataStacked$OFFSET, fieldValue);
    }

    private static final GroupLayout TablesTempData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TablesTempData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableTempData TablesTempData
     * }
     */
    public static final GroupLayout TablesTempData$layout() {
        return TablesTempData$LAYOUT;
    }

    private static final long TablesTempData$OFFSET = 9000;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableTempData TablesTempData
     * }
     */
    public static final long TablesTempData$offset() {
        return TablesTempData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableTempData TablesTempData
     * }
     */
    public static MemorySegment TablesTempData(MemorySegment struct) {
        return struct.asSlice(TablesTempData$OFFSET, TablesTempData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableTempData TablesTempData
     * }
     */
    public static void TablesTempData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TablesTempData$OFFSET, TablesTempData$LAYOUT.byteSize());
    }

    private static final GroupLayout Tables$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Tables"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImPool_ImGuiTable Tables
     * }
     */
    public static final GroupLayout Tables$layout() {
        return Tables$LAYOUT;
    }

    private static final long Tables$OFFSET = 9016;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImPool_ImGuiTable Tables
     * }
     */
    public static final long Tables$offset() {
        return Tables$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImPool_ImGuiTable Tables
     * }
     */
    public static MemorySegment Tables(MemorySegment struct) {
        return struct.asSlice(Tables$OFFSET, Tables$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImPool_ImGuiTable Tables
     * }
     */
    public static void Tables(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Tables$OFFSET, Tables$LAYOUT.byteSize());
    }

    private static final GroupLayout TablesLastTimeActive$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TablesLastTimeActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_float TablesLastTimeActive
     * }
     */
    public static final GroupLayout TablesLastTimeActive$layout() {
        return TablesLastTimeActive$LAYOUT;
    }

    private static final long TablesLastTimeActive$OFFSET = 9056;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_float TablesLastTimeActive
     * }
     */
    public static final long TablesLastTimeActive$offset() {
        return TablesLastTimeActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_float TablesLastTimeActive
     * }
     */
    public static MemorySegment TablesLastTimeActive(MemorySegment struct) {
        return struct.asSlice(TablesLastTimeActive$OFFSET, TablesLastTimeActive$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_float TablesLastTimeActive
     * }
     */
    public static void TablesLastTimeActive(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TablesLastTimeActive$OFFSET, TablesLastTimeActive$LAYOUT.byteSize());
    }

    private static final GroupLayout DrawChannelsTempMergeBuffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DrawChannelsTempMergeBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImDrawChannel DrawChannelsTempMergeBuffer
     * }
     */
    public static final GroupLayout DrawChannelsTempMergeBuffer$layout() {
        return DrawChannelsTempMergeBuffer$LAYOUT;
    }

    private static final long DrawChannelsTempMergeBuffer$OFFSET = 9072;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImDrawChannel DrawChannelsTempMergeBuffer
     * }
     */
    public static final long DrawChannelsTempMergeBuffer$offset() {
        return DrawChannelsTempMergeBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImDrawChannel DrawChannelsTempMergeBuffer
     * }
     */
    public static MemorySegment DrawChannelsTempMergeBuffer(MemorySegment struct) {
        return struct.asSlice(DrawChannelsTempMergeBuffer$OFFSET, DrawChannelsTempMergeBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImDrawChannel DrawChannelsTempMergeBuffer
     * }
     */
    public static void DrawChannelsTempMergeBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DrawChannelsTempMergeBuffer$OFFSET, DrawChannelsTempMergeBuffer$LAYOUT.byteSize());
    }

    private static final AddressLayout CurrentTabBar$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CurrentTabBar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTabBar *CurrentTabBar
     * }
     */
    public static final AddressLayout CurrentTabBar$layout() {
        return CurrentTabBar$LAYOUT;
    }

    private static final long CurrentTabBar$OFFSET = 9088;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTabBar *CurrentTabBar
     * }
     */
    public static final long CurrentTabBar$offset() {
        return CurrentTabBar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTabBar *CurrentTabBar
     * }
     */
    public static MemorySegment CurrentTabBar(MemorySegment struct) {
        return struct.get(CurrentTabBar$LAYOUT, CurrentTabBar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTabBar *CurrentTabBar
     * }
     */
    public static void CurrentTabBar(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CurrentTabBar$LAYOUT, CurrentTabBar$OFFSET, fieldValue);
    }

    private static final GroupLayout TabBars$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TabBars"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImPool_ImGuiTabBar TabBars
     * }
     */
    public static final GroupLayout TabBars$layout() {
        return TabBars$LAYOUT;
    }

    private static final long TabBars$OFFSET = 9096;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImPool_ImGuiTabBar TabBars
     * }
     */
    public static final long TabBars$offset() {
        return TabBars$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImPool_ImGuiTabBar TabBars
     * }
     */
    public static MemorySegment TabBars(MemorySegment struct) {
        return struct.asSlice(TabBars$OFFSET, TabBars$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImPool_ImGuiTabBar TabBars
     * }
     */
    public static void TabBars(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TabBars$OFFSET, TabBars$LAYOUT.byteSize());
    }

    private static final GroupLayout CurrentTabBarStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CurrentTabBarStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPtrOrIndex CurrentTabBarStack
     * }
     */
    public static final GroupLayout CurrentTabBarStack$layout() {
        return CurrentTabBarStack$LAYOUT;
    }

    private static final long CurrentTabBarStack$OFFSET = 9136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPtrOrIndex CurrentTabBarStack
     * }
     */
    public static final long CurrentTabBarStack$offset() {
        return CurrentTabBarStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPtrOrIndex CurrentTabBarStack
     * }
     */
    public static MemorySegment CurrentTabBarStack(MemorySegment struct) {
        return struct.asSlice(CurrentTabBarStack$OFFSET, CurrentTabBarStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiPtrOrIndex CurrentTabBarStack
     * }
     */
    public static void CurrentTabBarStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CurrentTabBarStack$OFFSET, CurrentTabBarStack$LAYOUT.byteSize());
    }

    private static final GroupLayout ShrinkWidthBuffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ShrinkWidthBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiShrinkWidthItem ShrinkWidthBuffer
     * }
     */
    public static final GroupLayout ShrinkWidthBuffer$layout() {
        return ShrinkWidthBuffer$LAYOUT;
    }

    private static final long ShrinkWidthBuffer$OFFSET = 9152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiShrinkWidthItem ShrinkWidthBuffer
     * }
     */
    public static final long ShrinkWidthBuffer$offset() {
        return ShrinkWidthBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiShrinkWidthItem ShrinkWidthBuffer
     * }
     */
    public static MemorySegment ShrinkWidthBuffer(MemorySegment struct) {
        return struct.asSlice(ShrinkWidthBuffer$OFFSET, ShrinkWidthBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiShrinkWidthItem ShrinkWidthBuffer
     * }
     */
    public static void ShrinkWidthBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ShrinkWidthBuffer$OFFSET, ShrinkWidthBuffer$LAYOUT.byteSize());
    }

    private static final GroupLayout BoxSelectState$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BoxSelectState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiBoxSelectState BoxSelectState
     * }
     */
    public static final GroupLayout BoxSelectState$layout() {
        return BoxSelectState$LAYOUT;
    }

    private static final long BoxSelectState$OFFSET = 9168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiBoxSelectState BoxSelectState
     * }
     */
    public static final long BoxSelectState$offset() {
        return BoxSelectState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiBoxSelectState BoxSelectState
     * }
     */
    public static MemorySegment BoxSelectState(MemorySegment struct) {
        return struct.asSlice(BoxSelectState$OFFSET, BoxSelectState$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiBoxSelectState BoxSelectState
     * }
     */
    public static void BoxSelectState(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BoxSelectState$OFFSET, BoxSelectState$LAYOUT.byteSize());
    }

    private static final AddressLayout CurrentMultiSelect$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CurrentMultiSelect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectTempData *CurrentMultiSelect
     * }
     */
    public static final AddressLayout CurrentMultiSelect$layout() {
        return CurrentMultiSelect$LAYOUT;
    }

    private static final long CurrentMultiSelect$OFFSET = 9272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectTempData *CurrentMultiSelect
     * }
     */
    public static final long CurrentMultiSelect$offset() {
        return CurrentMultiSelect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectTempData *CurrentMultiSelect
     * }
     */
    public static MemorySegment CurrentMultiSelect(MemorySegment struct) {
        return struct.get(CurrentMultiSelect$LAYOUT, CurrentMultiSelect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMultiSelectTempData *CurrentMultiSelect
     * }
     */
    public static void CurrentMultiSelect(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CurrentMultiSelect$LAYOUT, CurrentMultiSelect$OFFSET, fieldValue);
    }

    private static final OfInt MultiSelectTempDataStacked$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MultiSelectTempDataStacked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int MultiSelectTempDataStacked
     * }
     */
    public static final OfInt MultiSelectTempDataStacked$layout() {
        return MultiSelectTempDataStacked$LAYOUT;
    }

    private static final long MultiSelectTempDataStacked$OFFSET = 9280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int MultiSelectTempDataStacked
     * }
     */
    public static final long MultiSelectTempDataStacked$offset() {
        return MultiSelectTempDataStacked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int MultiSelectTempDataStacked
     * }
     */
    public static int MultiSelectTempDataStacked(MemorySegment struct) {
        return struct.get(MultiSelectTempDataStacked$LAYOUT, MultiSelectTempDataStacked$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int MultiSelectTempDataStacked
     * }
     */
    public static void MultiSelectTempDataStacked(MemorySegment struct, int fieldValue) {
        struct.set(MultiSelectTempDataStacked$LAYOUT, MultiSelectTempDataStacked$OFFSET, fieldValue);
    }

    private static final GroupLayout MultiSelectTempData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MultiSelectTempData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiMultiSelectTempData MultiSelectTempData
     * }
     */
    public static final GroupLayout MultiSelectTempData$layout() {
        return MultiSelectTempData$LAYOUT;
    }

    private static final long MultiSelectTempData$OFFSET = 9288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiMultiSelectTempData MultiSelectTempData
     * }
     */
    public static final long MultiSelectTempData$offset() {
        return MultiSelectTempData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiMultiSelectTempData MultiSelectTempData
     * }
     */
    public static MemorySegment MultiSelectTempData(MemorySegment struct) {
        return struct.asSlice(MultiSelectTempData$OFFSET, MultiSelectTempData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiMultiSelectTempData MultiSelectTempData
     * }
     */
    public static void MultiSelectTempData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MultiSelectTempData$OFFSET, MultiSelectTempData$LAYOUT.byteSize());
    }

    private static final GroupLayout MultiSelectStorage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MultiSelectStorage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImPool_ImGuiMultiSelectState MultiSelectStorage
     * }
     */
    public static final GroupLayout MultiSelectStorage$layout() {
        return MultiSelectStorage$LAYOUT;
    }

    private static final long MultiSelectStorage$OFFSET = 9304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImPool_ImGuiMultiSelectState MultiSelectStorage
     * }
     */
    public static final long MultiSelectStorage$offset() {
        return MultiSelectStorage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImPool_ImGuiMultiSelectState MultiSelectStorage
     * }
     */
    public static MemorySegment MultiSelectStorage(MemorySegment struct) {
        return struct.asSlice(MultiSelectStorage$OFFSET, MultiSelectStorage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImPool_ImGuiMultiSelectState MultiSelectStorage
     * }
     */
    public static void MultiSelectStorage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MultiSelectStorage$OFFSET, MultiSelectStorage$LAYOUT.byteSize());
    }

    private static final OfInt HoverItemDelayId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HoverItemDelayId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemDelayId
     * }
     */
    public static final OfInt HoverItemDelayId$layout() {
        return HoverItemDelayId$LAYOUT;
    }

    private static final long HoverItemDelayId$OFFSET = 9344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemDelayId
     * }
     */
    public static final long HoverItemDelayId$offset() {
        return HoverItemDelayId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemDelayId
     * }
     */
    public static int HoverItemDelayId(MemorySegment struct) {
        return struct.get(HoverItemDelayId$LAYOUT, HoverItemDelayId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemDelayId
     * }
     */
    public static void HoverItemDelayId(MemorySegment struct, int fieldValue) {
        struct.set(HoverItemDelayId$LAYOUT, HoverItemDelayId$OFFSET, fieldValue);
    }

    private static final OfInt HoverItemDelayIdPreviousFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HoverItemDelayIdPreviousFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemDelayIdPreviousFrame
     * }
     */
    public static final OfInt HoverItemDelayIdPreviousFrame$layout() {
        return HoverItemDelayIdPreviousFrame$LAYOUT;
    }

    private static final long HoverItemDelayIdPreviousFrame$OFFSET = 9348;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemDelayIdPreviousFrame
     * }
     */
    public static final long HoverItemDelayIdPreviousFrame$offset() {
        return HoverItemDelayIdPreviousFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemDelayIdPreviousFrame
     * }
     */
    public static int HoverItemDelayIdPreviousFrame(MemorySegment struct) {
        return struct.get(HoverItemDelayIdPreviousFrame$LAYOUT, HoverItemDelayIdPreviousFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemDelayIdPreviousFrame
     * }
     */
    public static void HoverItemDelayIdPreviousFrame(MemorySegment struct, int fieldValue) {
        struct.set(HoverItemDelayIdPreviousFrame$LAYOUT, HoverItemDelayIdPreviousFrame$OFFSET, fieldValue);
    }

    private static final OfFloat HoverItemDelayTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("HoverItemDelayTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float HoverItemDelayTimer
     * }
     */
    public static final OfFloat HoverItemDelayTimer$layout() {
        return HoverItemDelayTimer$LAYOUT;
    }

    private static final long HoverItemDelayTimer$OFFSET = 9352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float HoverItemDelayTimer
     * }
     */
    public static final long HoverItemDelayTimer$offset() {
        return HoverItemDelayTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float HoverItemDelayTimer
     * }
     */
    public static float HoverItemDelayTimer(MemorySegment struct) {
        return struct.get(HoverItemDelayTimer$LAYOUT, HoverItemDelayTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float HoverItemDelayTimer
     * }
     */
    public static void HoverItemDelayTimer(MemorySegment struct, float fieldValue) {
        struct.set(HoverItemDelayTimer$LAYOUT, HoverItemDelayTimer$OFFSET, fieldValue);
    }

    private static final OfFloat HoverItemDelayClearTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("HoverItemDelayClearTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float HoverItemDelayClearTimer
     * }
     */
    public static final OfFloat HoverItemDelayClearTimer$layout() {
        return HoverItemDelayClearTimer$LAYOUT;
    }

    private static final long HoverItemDelayClearTimer$OFFSET = 9356;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float HoverItemDelayClearTimer
     * }
     */
    public static final long HoverItemDelayClearTimer$offset() {
        return HoverItemDelayClearTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float HoverItemDelayClearTimer
     * }
     */
    public static float HoverItemDelayClearTimer(MemorySegment struct) {
        return struct.get(HoverItemDelayClearTimer$LAYOUT, HoverItemDelayClearTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float HoverItemDelayClearTimer
     * }
     */
    public static void HoverItemDelayClearTimer(MemorySegment struct, float fieldValue) {
        struct.set(HoverItemDelayClearTimer$LAYOUT, HoverItemDelayClearTimer$OFFSET, fieldValue);
    }

    private static final OfInt HoverItemUnlockedStationaryId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HoverItemUnlockedStationaryId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemUnlockedStationaryId
     * }
     */
    public static final OfInt HoverItemUnlockedStationaryId$layout() {
        return HoverItemUnlockedStationaryId$LAYOUT;
    }

    private static final long HoverItemUnlockedStationaryId$OFFSET = 9360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemUnlockedStationaryId
     * }
     */
    public static final long HoverItemUnlockedStationaryId$offset() {
        return HoverItemUnlockedStationaryId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemUnlockedStationaryId
     * }
     */
    public static int HoverItemUnlockedStationaryId(MemorySegment struct) {
        return struct.get(HoverItemUnlockedStationaryId$LAYOUT, HoverItemUnlockedStationaryId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID HoverItemUnlockedStationaryId
     * }
     */
    public static void HoverItemUnlockedStationaryId(MemorySegment struct, int fieldValue) {
        struct.set(HoverItemUnlockedStationaryId$LAYOUT, HoverItemUnlockedStationaryId$OFFSET, fieldValue);
    }

    private static final OfInt HoverWindowUnlockedStationaryId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HoverWindowUnlockedStationaryId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID HoverWindowUnlockedStationaryId
     * }
     */
    public static final OfInt HoverWindowUnlockedStationaryId$layout() {
        return HoverWindowUnlockedStationaryId$LAYOUT;
    }

    private static final long HoverWindowUnlockedStationaryId$OFFSET = 9364;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID HoverWindowUnlockedStationaryId
     * }
     */
    public static final long HoverWindowUnlockedStationaryId$offset() {
        return HoverWindowUnlockedStationaryId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID HoverWindowUnlockedStationaryId
     * }
     */
    public static int HoverWindowUnlockedStationaryId(MemorySegment struct) {
        return struct.get(HoverWindowUnlockedStationaryId$LAYOUT, HoverWindowUnlockedStationaryId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID HoverWindowUnlockedStationaryId
     * }
     */
    public static void HoverWindowUnlockedStationaryId(MemorySegment struct, int fieldValue) {
        struct.set(HoverWindowUnlockedStationaryId$LAYOUT, HoverWindowUnlockedStationaryId$OFFSET, fieldValue);
    }

    private static final OfInt MouseCursor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MouseCursor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMouseCursor MouseCursor
     * }
     */
    public static final OfInt MouseCursor$layout() {
        return MouseCursor$LAYOUT;
    }

    private static final long MouseCursor$OFFSET = 9368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMouseCursor MouseCursor
     * }
     */
    public static final long MouseCursor$offset() {
        return MouseCursor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMouseCursor MouseCursor
     * }
     */
    public static int MouseCursor(MemorySegment struct) {
        return struct.get(MouseCursor$LAYOUT, MouseCursor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMouseCursor MouseCursor
     * }
     */
    public static void MouseCursor(MemorySegment struct, int fieldValue) {
        struct.set(MouseCursor$LAYOUT, MouseCursor$OFFSET, fieldValue);
    }

    private static final OfFloat MouseStationaryTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MouseStationaryTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseStationaryTimer
     * }
     */
    public static final OfFloat MouseStationaryTimer$layout() {
        return MouseStationaryTimer$LAYOUT;
    }

    private static final long MouseStationaryTimer$OFFSET = 9372;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseStationaryTimer
     * }
     */
    public static final long MouseStationaryTimer$offset() {
        return MouseStationaryTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseStationaryTimer
     * }
     */
    public static float MouseStationaryTimer(MemorySegment struct) {
        return struct.get(MouseStationaryTimer$LAYOUT, MouseStationaryTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseStationaryTimer
     * }
     */
    public static void MouseStationaryTimer(MemorySegment struct, float fieldValue) {
        struct.set(MouseStationaryTimer$LAYOUT, MouseStationaryTimer$OFFSET, fieldValue);
    }

    private static final GroupLayout MouseLastValidPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MouseLastValidPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 MouseLastValidPos
     * }
     */
    public static final GroupLayout MouseLastValidPos$layout() {
        return MouseLastValidPos$LAYOUT;
    }

    private static final long MouseLastValidPos$OFFSET = 9376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 MouseLastValidPos
     * }
     */
    public static final long MouseLastValidPos$offset() {
        return MouseLastValidPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 MouseLastValidPos
     * }
     */
    public static MemorySegment MouseLastValidPos(MemorySegment struct) {
        return struct.asSlice(MouseLastValidPos$OFFSET, MouseLastValidPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 MouseLastValidPos
     * }
     */
    public static void MouseLastValidPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseLastValidPos$OFFSET, MouseLastValidPos$LAYOUT.byteSize());
    }

    private static final GroupLayout InputTextState$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InputTextState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputTextState InputTextState
     * }
     */
    public static final GroupLayout InputTextState$layout() {
        return InputTextState$LAYOUT;
    }

    private static final long InputTextState$OFFSET = 9384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputTextState InputTextState
     * }
     */
    public static final long InputTextState$offset() {
        return InputTextState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputTextState InputTextState
     * }
     */
    public static MemorySegment InputTextState(MemorySegment struct) {
        return struct.asSlice(InputTextState$OFFSET, InputTextState$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputTextState InputTextState
     * }
     */
    public static void InputTextState(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InputTextState$OFFSET, InputTextState$LAYOUT.byteSize());
    }

    private static final GroupLayout InputTextDeactivatedState$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InputTextDeactivatedState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputTextDeactivatedState InputTextDeactivatedState
     * }
     */
    public static final GroupLayout InputTextDeactivatedState$layout() {
        return InputTextDeactivatedState$LAYOUT;
    }

    private static final long InputTextDeactivatedState$OFFSET = 13120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputTextDeactivatedState InputTextDeactivatedState
     * }
     */
    public static final long InputTextDeactivatedState$offset() {
        return InputTextDeactivatedState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputTextDeactivatedState InputTextDeactivatedState
     * }
     */
    public static MemorySegment InputTextDeactivatedState(MemorySegment struct) {
        return struct.asSlice(InputTextDeactivatedState$OFFSET, InputTextDeactivatedState$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputTextDeactivatedState InputTextDeactivatedState
     * }
     */
    public static void InputTextDeactivatedState(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InputTextDeactivatedState$OFFSET, InputTextDeactivatedState$LAYOUT.byteSize());
    }

    private static final GroupLayout InputTextPasswordFont$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InputTextPasswordFont"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImFont InputTextPasswordFont
     * }
     */
    public static final GroupLayout InputTextPasswordFont$layout() {
        return InputTextPasswordFont$LAYOUT;
    }

    private static final long InputTextPasswordFont$OFFSET = 13144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImFont InputTextPasswordFont
     * }
     */
    public static final long InputTextPasswordFont$offset() {
        return InputTextPasswordFont$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImFont InputTextPasswordFont
     * }
     */
    public static MemorySegment InputTextPasswordFont(MemorySegment struct) {
        return struct.asSlice(InputTextPasswordFont$OFFSET, InputTextPasswordFont$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImFont InputTextPasswordFont
     * }
     */
    public static void InputTextPasswordFont(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InputTextPasswordFont$OFFSET, InputTextPasswordFont$LAYOUT.byteSize());
    }

    private static final OfInt TempInputId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TempInputId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID TempInputId
     * }
     */
    public static final OfInt TempInputId$layout() {
        return TempInputId$LAYOUT;
    }

    private static final long TempInputId$OFFSET = 13264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID TempInputId
     * }
     */
    public static final long TempInputId$offset() {
        return TempInputId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID TempInputId
     * }
     */
    public static int TempInputId(MemorySegment struct) {
        return struct.get(TempInputId$LAYOUT, TempInputId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID TempInputId
     * }
     */
    public static void TempInputId(MemorySegment struct, int fieldValue) {
        struct.set(TempInputId$LAYOUT, TempInputId$OFFSET, fieldValue);
    }

    private static final GroupLayout DataTypeZeroValue$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DataTypeZeroValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDataTypeStorage DataTypeZeroValue
     * }
     */
    public static final GroupLayout DataTypeZeroValue$layout() {
        return DataTypeZeroValue$LAYOUT;
    }

    private static final long DataTypeZeroValue$OFFSET = 13268;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDataTypeStorage DataTypeZeroValue
     * }
     */
    public static final long DataTypeZeroValue$offset() {
        return DataTypeZeroValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDataTypeStorage DataTypeZeroValue
     * }
     */
    public static MemorySegment DataTypeZeroValue(MemorySegment struct) {
        return struct.asSlice(DataTypeZeroValue$OFFSET, DataTypeZeroValue$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDataTypeStorage DataTypeZeroValue
     * }
     */
    public static void DataTypeZeroValue(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DataTypeZeroValue$OFFSET, DataTypeZeroValue$LAYOUT.byteSize());
    }

    private static final OfInt BeginMenuDepth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BeginMenuDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int BeginMenuDepth
     * }
     */
    public static final OfInt BeginMenuDepth$layout() {
        return BeginMenuDepth$LAYOUT;
    }

    private static final long BeginMenuDepth$OFFSET = 13276;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int BeginMenuDepth
     * }
     */
    public static final long BeginMenuDepth$offset() {
        return BeginMenuDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int BeginMenuDepth
     * }
     */
    public static int BeginMenuDepth(MemorySegment struct) {
        return struct.get(BeginMenuDepth$LAYOUT, BeginMenuDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int BeginMenuDepth
     * }
     */
    public static void BeginMenuDepth(MemorySegment struct, int fieldValue) {
        struct.set(BeginMenuDepth$LAYOUT, BeginMenuDepth$OFFSET, fieldValue);
    }

    private static final OfInt BeginComboDepth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BeginComboDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int BeginComboDepth
     * }
     */
    public static final OfInt BeginComboDepth$layout() {
        return BeginComboDepth$LAYOUT;
    }

    private static final long BeginComboDepth$OFFSET = 13280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int BeginComboDepth
     * }
     */
    public static final long BeginComboDepth$offset() {
        return BeginComboDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int BeginComboDepth
     * }
     */
    public static int BeginComboDepth(MemorySegment struct) {
        return struct.get(BeginComboDepth$LAYOUT, BeginComboDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int BeginComboDepth
     * }
     */
    public static void BeginComboDepth(MemorySegment struct, int fieldValue) {
        struct.set(BeginComboDepth$LAYOUT, BeginComboDepth$OFFSET, fieldValue);
    }

    private static final OfInt ColorEditOptions$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ColorEditOptions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiColorEditFlags ColorEditOptions
     * }
     */
    public static final OfInt ColorEditOptions$layout() {
        return ColorEditOptions$LAYOUT;
    }

    private static final long ColorEditOptions$OFFSET = 13284;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiColorEditFlags ColorEditOptions
     * }
     */
    public static final long ColorEditOptions$offset() {
        return ColorEditOptions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiColorEditFlags ColorEditOptions
     * }
     */
    public static int ColorEditOptions(MemorySegment struct) {
        return struct.get(ColorEditOptions$LAYOUT, ColorEditOptions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiColorEditFlags ColorEditOptions
     * }
     */
    public static void ColorEditOptions(MemorySegment struct, int fieldValue) {
        struct.set(ColorEditOptions$LAYOUT, ColorEditOptions$OFFSET, fieldValue);
    }

    private static final OfInt ColorEditCurrentID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ColorEditCurrentID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ColorEditCurrentID
     * }
     */
    public static final OfInt ColorEditCurrentID$layout() {
        return ColorEditCurrentID$LAYOUT;
    }

    private static final long ColorEditCurrentID$OFFSET = 13288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ColorEditCurrentID
     * }
     */
    public static final long ColorEditCurrentID$offset() {
        return ColorEditCurrentID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ColorEditCurrentID
     * }
     */
    public static int ColorEditCurrentID(MemorySegment struct) {
        return struct.get(ColorEditCurrentID$LAYOUT, ColorEditCurrentID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ColorEditCurrentID
     * }
     */
    public static void ColorEditCurrentID(MemorySegment struct, int fieldValue) {
        struct.set(ColorEditCurrentID$LAYOUT, ColorEditCurrentID$OFFSET, fieldValue);
    }

    private static final OfInt ColorEditSavedID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ColorEditSavedID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ColorEditSavedID
     * }
     */
    public static final OfInt ColorEditSavedID$layout() {
        return ColorEditSavedID$LAYOUT;
    }

    private static final long ColorEditSavedID$OFFSET = 13292;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ColorEditSavedID
     * }
     */
    public static final long ColorEditSavedID$offset() {
        return ColorEditSavedID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ColorEditSavedID
     * }
     */
    public static int ColorEditSavedID(MemorySegment struct) {
        return struct.get(ColorEditSavedID$LAYOUT, ColorEditSavedID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ColorEditSavedID
     * }
     */
    public static void ColorEditSavedID(MemorySegment struct, int fieldValue) {
        struct.set(ColorEditSavedID$LAYOUT, ColorEditSavedID$OFFSET, fieldValue);
    }

    private static final OfFloat ColorEditSavedHue$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ColorEditSavedHue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ColorEditSavedHue
     * }
     */
    public static final OfFloat ColorEditSavedHue$layout() {
        return ColorEditSavedHue$LAYOUT;
    }

    private static final long ColorEditSavedHue$OFFSET = 13296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ColorEditSavedHue
     * }
     */
    public static final long ColorEditSavedHue$offset() {
        return ColorEditSavedHue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ColorEditSavedHue
     * }
     */
    public static float ColorEditSavedHue(MemorySegment struct) {
        return struct.get(ColorEditSavedHue$LAYOUT, ColorEditSavedHue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ColorEditSavedHue
     * }
     */
    public static void ColorEditSavedHue(MemorySegment struct, float fieldValue) {
        struct.set(ColorEditSavedHue$LAYOUT, ColorEditSavedHue$OFFSET, fieldValue);
    }

    private static final OfFloat ColorEditSavedSat$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ColorEditSavedSat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ColorEditSavedSat
     * }
     */
    public static final OfFloat ColorEditSavedSat$layout() {
        return ColorEditSavedSat$LAYOUT;
    }

    private static final long ColorEditSavedSat$OFFSET = 13300;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ColorEditSavedSat
     * }
     */
    public static final long ColorEditSavedSat$offset() {
        return ColorEditSavedSat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ColorEditSavedSat
     * }
     */
    public static float ColorEditSavedSat(MemorySegment struct) {
        return struct.get(ColorEditSavedSat$LAYOUT, ColorEditSavedSat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ColorEditSavedSat
     * }
     */
    public static void ColorEditSavedSat(MemorySegment struct, float fieldValue) {
        struct.set(ColorEditSavedSat$LAYOUT, ColorEditSavedSat$OFFSET, fieldValue);
    }

    private static final OfInt ColorEditSavedColor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ColorEditSavedColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 ColorEditSavedColor
     * }
     */
    public static final OfInt ColorEditSavedColor$layout() {
        return ColorEditSavedColor$LAYOUT;
    }

    private static final long ColorEditSavedColor$OFFSET = 13304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 ColorEditSavedColor
     * }
     */
    public static final long ColorEditSavedColor$offset() {
        return ColorEditSavedColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 ColorEditSavedColor
     * }
     */
    public static int ColorEditSavedColor(MemorySegment struct) {
        return struct.get(ColorEditSavedColor$LAYOUT, ColorEditSavedColor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 ColorEditSavedColor
     * }
     */
    public static void ColorEditSavedColor(MemorySegment struct, int fieldValue) {
        struct.set(ColorEditSavedColor$LAYOUT, ColorEditSavedColor$OFFSET, fieldValue);
    }

    private static final GroupLayout ColorPickerRef$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ColorPickerRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec4 ColorPickerRef
     * }
     */
    public static final GroupLayout ColorPickerRef$layout() {
        return ColorPickerRef$LAYOUT;
    }

    private static final long ColorPickerRef$OFFSET = 13308;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec4 ColorPickerRef
     * }
     */
    public static final long ColorPickerRef$offset() {
        return ColorPickerRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec4 ColorPickerRef
     * }
     */
    public static MemorySegment ColorPickerRef(MemorySegment struct) {
        return struct.asSlice(ColorPickerRef$OFFSET, ColorPickerRef$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec4 ColorPickerRef
     * }
     */
    public static void ColorPickerRef(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ColorPickerRef$OFFSET, ColorPickerRef$LAYOUT.byteSize());
    }

    private static final GroupLayout ComboPreviewData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ComboPreviewData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiComboPreviewData ComboPreviewData
     * }
     */
    public static final GroupLayout ComboPreviewData$layout() {
        return ComboPreviewData$LAYOUT;
    }

    private static final long ComboPreviewData$OFFSET = 13324;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiComboPreviewData ComboPreviewData
     * }
     */
    public static final long ComboPreviewData$offset() {
        return ComboPreviewData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiComboPreviewData ComboPreviewData
     * }
     */
    public static MemorySegment ComboPreviewData(MemorySegment struct) {
        return struct.asSlice(ComboPreviewData$OFFSET, ComboPreviewData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiComboPreviewData ComboPreviewData
     * }
     */
    public static void ComboPreviewData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ComboPreviewData$OFFSET, ComboPreviewData$LAYOUT.byteSize());
    }

    private static final GroupLayout WindowResizeBorderExpectedRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowResizeBorderExpectedRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect WindowResizeBorderExpectedRect
     * }
     */
    public static final GroupLayout WindowResizeBorderExpectedRect$layout() {
        return WindowResizeBorderExpectedRect$LAYOUT;
    }

    private static final long WindowResizeBorderExpectedRect$OFFSET = 13372;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect WindowResizeBorderExpectedRect
     * }
     */
    public static final long WindowResizeBorderExpectedRect$offset() {
        return WindowResizeBorderExpectedRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect WindowResizeBorderExpectedRect
     * }
     */
    public static MemorySegment WindowResizeBorderExpectedRect(MemorySegment struct) {
        return struct.asSlice(WindowResizeBorderExpectedRect$OFFSET, WindowResizeBorderExpectedRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect WindowResizeBorderExpectedRect
     * }
     */
    public static void WindowResizeBorderExpectedRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowResizeBorderExpectedRect$OFFSET, WindowResizeBorderExpectedRect$LAYOUT.byteSize());
    }

    private static final OfBoolean WindowResizeRelativeMode$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WindowResizeRelativeMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WindowResizeRelativeMode
     * }
     */
    public static final OfBoolean WindowResizeRelativeMode$layout() {
        return WindowResizeRelativeMode$LAYOUT;
    }

    private static final long WindowResizeRelativeMode$OFFSET = 13388;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WindowResizeRelativeMode
     * }
     */
    public static final long WindowResizeRelativeMode$offset() {
        return WindowResizeRelativeMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WindowResizeRelativeMode
     * }
     */
    public static boolean WindowResizeRelativeMode(MemorySegment struct) {
        return struct.get(WindowResizeRelativeMode$LAYOUT, WindowResizeRelativeMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WindowResizeRelativeMode
     * }
     */
    public static void WindowResizeRelativeMode(MemorySegment struct, boolean fieldValue) {
        struct.set(WindowResizeRelativeMode$LAYOUT, WindowResizeRelativeMode$OFFSET, fieldValue);
    }

    private static final OfShort ScrollbarSeekMode$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ScrollbarSeekMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short ScrollbarSeekMode
     * }
     */
    public static final OfShort ScrollbarSeekMode$layout() {
        return ScrollbarSeekMode$LAYOUT;
    }

    private static final long ScrollbarSeekMode$OFFSET = 13390;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short ScrollbarSeekMode
     * }
     */
    public static final long ScrollbarSeekMode$offset() {
        return ScrollbarSeekMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short ScrollbarSeekMode
     * }
     */
    public static short ScrollbarSeekMode(MemorySegment struct) {
        return struct.get(ScrollbarSeekMode$LAYOUT, ScrollbarSeekMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short ScrollbarSeekMode
     * }
     */
    public static void ScrollbarSeekMode(MemorySegment struct, short fieldValue) {
        struct.set(ScrollbarSeekMode$LAYOUT, ScrollbarSeekMode$OFFSET, fieldValue);
    }

    private static final OfFloat ScrollbarClickDeltaToGrabCenter$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ScrollbarClickDeltaToGrabCenter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ScrollbarClickDeltaToGrabCenter
     * }
     */
    public static final OfFloat ScrollbarClickDeltaToGrabCenter$layout() {
        return ScrollbarClickDeltaToGrabCenter$LAYOUT;
    }

    private static final long ScrollbarClickDeltaToGrabCenter$OFFSET = 13392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ScrollbarClickDeltaToGrabCenter
     * }
     */
    public static final long ScrollbarClickDeltaToGrabCenter$offset() {
        return ScrollbarClickDeltaToGrabCenter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ScrollbarClickDeltaToGrabCenter
     * }
     */
    public static float ScrollbarClickDeltaToGrabCenter(MemorySegment struct) {
        return struct.get(ScrollbarClickDeltaToGrabCenter$LAYOUT, ScrollbarClickDeltaToGrabCenter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ScrollbarClickDeltaToGrabCenter
     * }
     */
    public static void ScrollbarClickDeltaToGrabCenter(MemorySegment struct, float fieldValue) {
        struct.set(ScrollbarClickDeltaToGrabCenter$LAYOUT, ScrollbarClickDeltaToGrabCenter$OFFSET, fieldValue);
    }

    private static final OfFloat SliderGrabClickOffset$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("SliderGrabClickOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float SliderGrabClickOffset
     * }
     */
    public static final OfFloat SliderGrabClickOffset$layout() {
        return SliderGrabClickOffset$LAYOUT;
    }

    private static final long SliderGrabClickOffset$OFFSET = 13396;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float SliderGrabClickOffset
     * }
     */
    public static final long SliderGrabClickOffset$offset() {
        return SliderGrabClickOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float SliderGrabClickOffset
     * }
     */
    public static float SliderGrabClickOffset(MemorySegment struct) {
        return struct.get(SliderGrabClickOffset$LAYOUT, SliderGrabClickOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float SliderGrabClickOffset
     * }
     */
    public static void SliderGrabClickOffset(MemorySegment struct, float fieldValue) {
        struct.set(SliderGrabClickOffset$LAYOUT, SliderGrabClickOffset$OFFSET, fieldValue);
    }

    private static final OfFloat SliderCurrentAccum$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("SliderCurrentAccum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float SliderCurrentAccum
     * }
     */
    public static final OfFloat SliderCurrentAccum$layout() {
        return SliderCurrentAccum$LAYOUT;
    }

    private static final long SliderCurrentAccum$OFFSET = 13400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float SliderCurrentAccum
     * }
     */
    public static final long SliderCurrentAccum$offset() {
        return SliderCurrentAccum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float SliderCurrentAccum
     * }
     */
    public static float SliderCurrentAccum(MemorySegment struct) {
        return struct.get(SliderCurrentAccum$LAYOUT, SliderCurrentAccum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float SliderCurrentAccum
     * }
     */
    public static void SliderCurrentAccum(MemorySegment struct, float fieldValue) {
        struct.set(SliderCurrentAccum$LAYOUT, SliderCurrentAccum$OFFSET, fieldValue);
    }

    private static final OfBoolean SliderCurrentAccumDirty$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("SliderCurrentAccumDirty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool SliderCurrentAccumDirty
     * }
     */
    public static final OfBoolean SliderCurrentAccumDirty$layout() {
        return SliderCurrentAccumDirty$LAYOUT;
    }

    private static final long SliderCurrentAccumDirty$OFFSET = 13404;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool SliderCurrentAccumDirty
     * }
     */
    public static final long SliderCurrentAccumDirty$offset() {
        return SliderCurrentAccumDirty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool SliderCurrentAccumDirty
     * }
     */
    public static boolean SliderCurrentAccumDirty(MemorySegment struct) {
        return struct.get(SliderCurrentAccumDirty$LAYOUT, SliderCurrentAccumDirty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool SliderCurrentAccumDirty
     * }
     */
    public static void SliderCurrentAccumDirty(MemorySegment struct, boolean fieldValue) {
        struct.set(SliderCurrentAccumDirty$LAYOUT, SliderCurrentAccumDirty$OFFSET, fieldValue);
    }

    private static final OfBoolean DragCurrentAccumDirty$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("DragCurrentAccumDirty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool DragCurrentAccumDirty
     * }
     */
    public static final OfBoolean DragCurrentAccumDirty$layout() {
        return DragCurrentAccumDirty$LAYOUT;
    }

    private static final long DragCurrentAccumDirty$OFFSET = 13405;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool DragCurrentAccumDirty
     * }
     */
    public static final long DragCurrentAccumDirty$offset() {
        return DragCurrentAccumDirty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool DragCurrentAccumDirty
     * }
     */
    public static boolean DragCurrentAccumDirty(MemorySegment struct) {
        return struct.get(DragCurrentAccumDirty$LAYOUT, DragCurrentAccumDirty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool DragCurrentAccumDirty
     * }
     */
    public static void DragCurrentAccumDirty(MemorySegment struct, boolean fieldValue) {
        struct.set(DragCurrentAccumDirty$LAYOUT, DragCurrentAccumDirty$OFFSET, fieldValue);
    }

    private static final OfFloat DragCurrentAccum$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DragCurrentAccum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DragCurrentAccum
     * }
     */
    public static final OfFloat DragCurrentAccum$layout() {
        return DragCurrentAccum$LAYOUT;
    }

    private static final long DragCurrentAccum$OFFSET = 13408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DragCurrentAccum
     * }
     */
    public static final long DragCurrentAccum$offset() {
        return DragCurrentAccum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DragCurrentAccum
     * }
     */
    public static float DragCurrentAccum(MemorySegment struct) {
        return struct.get(DragCurrentAccum$LAYOUT, DragCurrentAccum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DragCurrentAccum
     * }
     */
    public static void DragCurrentAccum(MemorySegment struct, float fieldValue) {
        struct.set(DragCurrentAccum$LAYOUT, DragCurrentAccum$OFFSET, fieldValue);
    }

    private static final OfFloat DragSpeedDefaultRatio$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DragSpeedDefaultRatio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DragSpeedDefaultRatio
     * }
     */
    public static final OfFloat DragSpeedDefaultRatio$layout() {
        return DragSpeedDefaultRatio$LAYOUT;
    }

    private static final long DragSpeedDefaultRatio$OFFSET = 13412;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DragSpeedDefaultRatio
     * }
     */
    public static final long DragSpeedDefaultRatio$offset() {
        return DragSpeedDefaultRatio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DragSpeedDefaultRatio
     * }
     */
    public static float DragSpeedDefaultRatio(MemorySegment struct) {
        return struct.get(DragSpeedDefaultRatio$LAYOUT, DragSpeedDefaultRatio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DragSpeedDefaultRatio
     * }
     */
    public static void DragSpeedDefaultRatio(MemorySegment struct, float fieldValue) {
        struct.set(DragSpeedDefaultRatio$LAYOUT, DragSpeedDefaultRatio$OFFSET, fieldValue);
    }

    private static final OfFloat DisabledAlphaBackup$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DisabledAlphaBackup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DisabledAlphaBackup
     * }
     */
    public static final OfFloat DisabledAlphaBackup$layout() {
        return DisabledAlphaBackup$LAYOUT;
    }

    private static final long DisabledAlphaBackup$OFFSET = 13416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DisabledAlphaBackup
     * }
     */
    public static final long DisabledAlphaBackup$offset() {
        return DisabledAlphaBackup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DisabledAlphaBackup
     * }
     */
    public static float DisabledAlphaBackup(MemorySegment struct) {
        return struct.get(DisabledAlphaBackup$LAYOUT, DisabledAlphaBackup$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DisabledAlphaBackup
     * }
     */
    public static void DisabledAlphaBackup(MemorySegment struct, float fieldValue) {
        struct.set(DisabledAlphaBackup$LAYOUT, DisabledAlphaBackup$OFFSET, fieldValue);
    }

    private static final OfShort DisabledStackSize$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DisabledStackSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short DisabledStackSize
     * }
     */
    public static final OfShort DisabledStackSize$layout() {
        return DisabledStackSize$LAYOUT;
    }

    private static final long DisabledStackSize$OFFSET = 13420;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short DisabledStackSize
     * }
     */
    public static final long DisabledStackSize$offset() {
        return DisabledStackSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short DisabledStackSize
     * }
     */
    public static short DisabledStackSize(MemorySegment struct) {
        return struct.get(DisabledStackSize$LAYOUT, DisabledStackSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short DisabledStackSize
     * }
     */
    public static void DisabledStackSize(MemorySegment struct, short fieldValue) {
        struct.set(DisabledStackSize$LAYOUT, DisabledStackSize$OFFSET, fieldValue);
    }

    private static final OfShort LockMarkEdited$LAYOUT = (OfShort)$LAYOUT.select(groupElement("LockMarkEdited"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short LockMarkEdited
     * }
     */
    public static final OfShort LockMarkEdited$layout() {
        return LockMarkEdited$LAYOUT;
    }

    private static final long LockMarkEdited$OFFSET = 13422;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short LockMarkEdited
     * }
     */
    public static final long LockMarkEdited$offset() {
        return LockMarkEdited$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short LockMarkEdited
     * }
     */
    public static short LockMarkEdited(MemorySegment struct) {
        return struct.get(LockMarkEdited$LAYOUT, LockMarkEdited$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short LockMarkEdited
     * }
     */
    public static void LockMarkEdited(MemorySegment struct, short fieldValue) {
        struct.set(LockMarkEdited$LAYOUT, LockMarkEdited$OFFSET, fieldValue);
    }

    private static final OfShort TooltipOverrideCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("TooltipOverrideCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short TooltipOverrideCount
     * }
     */
    public static final OfShort TooltipOverrideCount$layout() {
        return TooltipOverrideCount$LAYOUT;
    }

    private static final long TooltipOverrideCount$OFFSET = 13424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short TooltipOverrideCount
     * }
     */
    public static final long TooltipOverrideCount$offset() {
        return TooltipOverrideCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short TooltipOverrideCount
     * }
     */
    public static short TooltipOverrideCount(MemorySegment struct) {
        return struct.get(TooltipOverrideCount$LAYOUT, TooltipOverrideCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short TooltipOverrideCount
     * }
     */
    public static void TooltipOverrideCount(MemorySegment struct, short fieldValue) {
        struct.set(TooltipOverrideCount$LAYOUT, TooltipOverrideCount$OFFSET, fieldValue);
    }

    private static final GroupLayout ClipboardHandlerData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ClipboardHandlerData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_char ClipboardHandlerData
     * }
     */
    public static final GroupLayout ClipboardHandlerData$layout() {
        return ClipboardHandlerData$LAYOUT;
    }

    private static final long ClipboardHandlerData$OFFSET = 13432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_char ClipboardHandlerData
     * }
     */
    public static final long ClipboardHandlerData$offset() {
        return ClipboardHandlerData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_char ClipboardHandlerData
     * }
     */
    public static MemorySegment ClipboardHandlerData(MemorySegment struct) {
        return struct.asSlice(ClipboardHandlerData$OFFSET, ClipboardHandlerData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_char ClipboardHandlerData
     * }
     */
    public static void ClipboardHandlerData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ClipboardHandlerData$OFFSET, ClipboardHandlerData$LAYOUT.byteSize());
    }

    private static final GroupLayout MenusIdSubmittedThisFrame$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("MenusIdSubmittedThisFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiID MenusIdSubmittedThisFrame
     * }
     */
    public static final GroupLayout MenusIdSubmittedThisFrame$layout() {
        return MenusIdSubmittedThisFrame$LAYOUT;
    }

    private static final long MenusIdSubmittedThisFrame$OFFSET = 13448;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiID MenusIdSubmittedThisFrame
     * }
     */
    public static final long MenusIdSubmittedThisFrame$offset() {
        return MenusIdSubmittedThisFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiID MenusIdSubmittedThisFrame
     * }
     */
    public static MemorySegment MenusIdSubmittedThisFrame(MemorySegment struct) {
        return struct.asSlice(MenusIdSubmittedThisFrame$OFFSET, MenusIdSubmittedThisFrame$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiID MenusIdSubmittedThisFrame
     * }
     */
    public static void MenusIdSubmittedThisFrame(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MenusIdSubmittedThisFrame$OFFSET, MenusIdSubmittedThisFrame$LAYOUT.byteSize());
    }

    private static final GroupLayout TypingSelectState$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TypingSelectState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTypingSelectState TypingSelectState
     * }
     */
    public static final GroupLayout TypingSelectState$layout() {
        return TypingSelectState$LAYOUT;
    }

    private static final long TypingSelectState$OFFSET = 13464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTypingSelectState TypingSelectState
     * }
     */
    public static final long TypingSelectState$offset() {
        return TypingSelectState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTypingSelectState TypingSelectState
     * }
     */
    public static MemorySegment TypingSelectState(MemorySegment struct) {
        return struct.asSlice(TypingSelectState$OFFSET, TypingSelectState$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTypingSelectState TypingSelectState
     * }
     */
    public static void TypingSelectState(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TypingSelectState$OFFSET, TypingSelectState$LAYOUT.byteSize());
    }

    private static final GroupLayout PlatformImeData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PlatformImeData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiPlatformImeData PlatformImeData
     * }
     */
    public static final GroupLayout PlatformImeData$layout() {
        return PlatformImeData$LAYOUT;
    }

    private static final long PlatformImeData$OFFSET = 13568;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiPlatformImeData PlatformImeData
     * }
     */
    public static final long PlatformImeData$offset() {
        return PlatformImeData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiPlatformImeData PlatformImeData
     * }
     */
    public static MemorySegment PlatformImeData(MemorySegment struct) {
        return struct.asSlice(PlatformImeData$OFFSET, PlatformImeData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiPlatformImeData PlatformImeData
     * }
     */
    public static void PlatformImeData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PlatformImeData$OFFSET, PlatformImeData$LAYOUT.byteSize());
    }

    private static final GroupLayout PlatformImeDataPrev$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("PlatformImeDataPrev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiPlatformImeData PlatformImeDataPrev
     * }
     */
    public static final GroupLayout PlatformImeDataPrev$layout() {
        return PlatformImeDataPrev$LAYOUT;
    }

    private static final long PlatformImeDataPrev$OFFSET = 13584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiPlatformImeData PlatformImeDataPrev
     * }
     */
    public static final long PlatformImeDataPrev$offset() {
        return PlatformImeDataPrev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiPlatformImeData PlatformImeDataPrev
     * }
     */
    public static MemorySegment PlatformImeDataPrev(MemorySegment struct) {
        return struct.asSlice(PlatformImeDataPrev$OFFSET, PlatformImeDataPrev$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiPlatformImeData PlatformImeDataPrev
     * }
     */
    public static void PlatformImeDataPrev(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PlatformImeDataPrev$OFFSET, PlatformImeDataPrev$LAYOUT.byteSize());
    }

    private static final OfInt PlatformImeViewport$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PlatformImeViewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID PlatformImeViewport
     * }
     */
    public static final OfInt PlatformImeViewport$layout() {
        return PlatformImeViewport$LAYOUT;
    }

    private static final long PlatformImeViewport$OFFSET = 13600;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID PlatformImeViewport
     * }
     */
    public static final long PlatformImeViewport$offset() {
        return PlatformImeViewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID PlatformImeViewport
     * }
     */
    public static int PlatformImeViewport(MemorySegment struct) {
        return struct.get(PlatformImeViewport$LAYOUT, PlatformImeViewport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID PlatformImeViewport
     * }
     */
    public static void PlatformImeViewport(MemorySegment struct, int fieldValue) {
        struct.set(PlatformImeViewport$LAYOUT, PlatformImeViewport$OFFSET, fieldValue);
    }

    private static final GroupLayout DockContext$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DockContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockContext DockContext
     * }
     */
    public static final GroupLayout DockContext$layout() {
        return DockContext$LAYOUT;
    }

    private static final long DockContext$OFFSET = 13608;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockContext DockContext
     * }
     */
    public static final long DockContext$offset() {
        return DockContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockContext DockContext
     * }
     */
    public static MemorySegment DockContext(MemorySegment struct) {
        return struct.asSlice(DockContext$OFFSET, DockContext$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockContext DockContext
     * }
     */
    public static void DockContext(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DockContext$OFFSET, DockContext$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*DockNodeWindowMenuHandler)(ImGuiContext *, ImGuiDockNode *, ImGuiTabBar *)
     * }
     */
    public static class DockNodeWindowMenuHandler {

        DockNodeWindowMenuHandler() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            imgui.C_POINTER,
            imgui.C_POINTER,
            imgui.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = imgui.upcallHandle(DockNodeWindowMenuHandler.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(DockNodeWindowMenuHandler.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout DockNodeWindowMenuHandler$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DockNodeWindowMenuHandler"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*DockNodeWindowMenuHandler)(ImGuiContext *, ImGuiDockNode *, ImGuiTabBar *)
     * }
     */
    public static final AddressLayout DockNodeWindowMenuHandler$layout() {
        return DockNodeWindowMenuHandler$LAYOUT;
    }

    private static final long DockNodeWindowMenuHandler$OFFSET = 13664;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*DockNodeWindowMenuHandler)(ImGuiContext *, ImGuiDockNode *, ImGuiTabBar *)
     * }
     */
    public static final long DockNodeWindowMenuHandler$offset() {
        return DockNodeWindowMenuHandler$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*DockNodeWindowMenuHandler)(ImGuiContext *, ImGuiDockNode *, ImGuiTabBar *)
     * }
     */
    public static MemorySegment DockNodeWindowMenuHandler(MemorySegment struct) {
        return struct.get(DockNodeWindowMenuHandler$LAYOUT, DockNodeWindowMenuHandler$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*DockNodeWindowMenuHandler)(ImGuiContext *, ImGuiDockNode *, ImGuiTabBar *)
     * }
     */
    public static void DockNodeWindowMenuHandler(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DockNodeWindowMenuHandler$LAYOUT, DockNodeWindowMenuHandler$OFFSET, fieldValue);
    }

    private static final OfBoolean SettingsLoaded$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("SettingsLoaded"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool SettingsLoaded
     * }
     */
    public static final OfBoolean SettingsLoaded$layout() {
        return SettingsLoaded$LAYOUT;
    }

    private static final long SettingsLoaded$OFFSET = 13672;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool SettingsLoaded
     * }
     */
    public static final long SettingsLoaded$offset() {
        return SettingsLoaded$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool SettingsLoaded
     * }
     */
    public static boolean SettingsLoaded(MemorySegment struct) {
        return struct.get(SettingsLoaded$LAYOUT, SettingsLoaded$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool SettingsLoaded
     * }
     */
    public static void SettingsLoaded(MemorySegment struct, boolean fieldValue) {
        struct.set(SettingsLoaded$LAYOUT, SettingsLoaded$OFFSET, fieldValue);
    }

    private static final OfFloat SettingsDirtyTimer$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("SettingsDirtyTimer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float SettingsDirtyTimer
     * }
     */
    public static final OfFloat SettingsDirtyTimer$layout() {
        return SettingsDirtyTimer$LAYOUT;
    }

    private static final long SettingsDirtyTimer$OFFSET = 13676;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float SettingsDirtyTimer
     * }
     */
    public static final long SettingsDirtyTimer$offset() {
        return SettingsDirtyTimer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float SettingsDirtyTimer
     * }
     */
    public static float SettingsDirtyTimer(MemorySegment struct) {
        return struct.get(SettingsDirtyTimer$LAYOUT, SettingsDirtyTimer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float SettingsDirtyTimer
     * }
     */
    public static void SettingsDirtyTimer(MemorySegment struct, float fieldValue) {
        struct.set(SettingsDirtyTimer$LAYOUT, SettingsDirtyTimer$OFFSET, fieldValue);
    }

    private static final GroupLayout SettingsIniData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SettingsIniData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer SettingsIniData
     * }
     */
    public static final GroupLayout SettingsIniData$layout() {
        return SettingsIniData$LAYOUT;
    }

    private static final long SettingsIniData$OFFSET = 13680;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer SettingsIniData
     * }
     */
    public static final long SettingsIniData$offset() {
        return SettingsIniData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer SettingsIniData
     * }
     */
    public static MemorySegment SettingsIniData(MemorySegment struct) {
        return struct.asSlice(SettingsIniData$OFFSET, SettingsIniData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer SettingsIniData
     * }
     */
    public static void SettingsIniData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SettingsIniData$OFFSET, SettingsIniData$LAYOUT.byteSize());
    }

    private static final GroupLayout SettingsHandlers$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SettingsHandlers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiSettingsHandler SettingsHandlers
     * }
     */
    public static final GroupLayout SettingsHandlers$layout() {
        return SettingsHandlers$LAYOUT;
    }

    private static final long SettingsHandlers$OFFSET = 13696;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiSettingsHandler SettingsHandlers
     * }
     */
    public static final long SettingsHandlers$offset() {
        return SettingsHandlers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiSettingsHandler SettingsHandlers
     * }
     */
    public static MemorySegment SettingsHandlers(MemorySegment struct) {
        return struct.asSlice(SettingsHandlers$OFFSET, SettingsHandlers$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiSettingsHandler SettingsHandlers
     * }
     */
    public static void SettingsHandlers(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SettingsHandlers$OFFSET, SettingsHandlers$LAYOUT.byteSize());
    }

    private static final GroupLayout SettingsWindows$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SettingsWindows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImChunkStream_ImGuiWindowSettings SettingsWindows
     * }
     */
    public static final GroupLayout SettingsWindows$layout() {
        return SettingsWindows$LAYOUT;
    }

    private static final long SettingsWindows$OFFSET = 13712;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImChunkStream_ImGuiWindowSettings SettingsWindows
     * }
     */
    public static final long SettingsWindows$offset() {
        return SettingsWindows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImChunkStream_ImGuiWindowSettings SettingsWindows
     * }
     */
    public static MemorySegment SettingsWindows(MemorySegment struct) {
        return struct.asSlice(SettingsWindows$OFFSET, SettingsWindows$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImChunkStream_ImGuiWindowSettings SettingsWindows
     * }
     */
    public static void SettingsWindows(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SettingsWindows$OFFSET, SettingsWindows$LAYOUT.byteSize());
    }

    private static final GroupLayout SettingsTables$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SettingsTables"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImChunkStream_ImGuiTableSettings SettingsTables
     * }
     */
    public static final GroupLayout SettingsTables$layout() {
        return SettingsTables$LAYOUT;
    }

    private static final long SettingsTables$OFFSET = 13728;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImChunkStream_ImGuiTableSettings SettingsTables
     * }
     */
    public static final long SettingsTables$offset() {
        return SettingsTables$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImChunkStream_ImGuiTableSettings SettingsTables
     * }
     */
    public static MemorySegment SettingsTables(MemorySegment struct) {
        return struct.asSlice(SettingsTables$OFFSET, SettingsTables$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImChunkStream_ImGuiTableSettings SettingsTables
     * }
     */
    public static void SettingsTables(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SettingsTables$OFFSET, SettingsTables$LAYOUT.byteSize());
    }

    private static final GroupLayout Hooks$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Hooks"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiContextHook Hooks
     * }
     */
    public static final GroupLayout Hooks$layout() {
        return Hooks$LAYOUT;
    }

    private static final long Hooks$OFFSET = 13744;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiContextHook Hooks
     * }
     */
    public static final long Hooks$offset() {
        return Hooks$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiContextHook Hooks
     * }
     */
    public static MemorySegment Hooks(MemorySegment struct) {
        return struct.asSlice(Hooks$OFFSET, Hooks$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiContextHook Hooks
     * }
     */
    public static void Hooks(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Hooks$OFFSET, Hooks$LAYOUT.byteSize());
    }

    private static final OfInt HookIdNext$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HookIdNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID HookIdNext
     * }
     */
    public static final OfInt HookIdNext$layout() {
        return HookIdNext$LAYOUT;
    }

    private static final long HookIdNext$OFFSET = 13760;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID HookIdNext
     * }
     */
    public static final long HookIdNext$offset() {
        return HookIdNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID HookIdNext
     * }
     */
    public static int HookIdNext(MemorySegment struct) {
        return struct.get(HookIdNext$LAYOUT, HookIdNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID HookIdNext
     * }
     */
    public static void HookIdNext(MemorySegment struct, int fieldValue) {
        struct.set(HookIdNext$LAYOUT, HookIdNext$OFFSET, fieldValue);
    }

    private static final SequenceLayout LocalizationTable$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("LocalizationTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *LocalizationTable[12]
     * }
     */
    public static final SequenceLayout LocalizationTable$layout() {
        return LocalizationTable$LAYOUT;
    }

    private static final long LocalizationTable$OFFSET = 13768;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *LocalizationTable[12]
     * }
     */
    public static final long LocalizationTable$offset() {
        return LocalizationTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *LocalizationTable[12]
     * }
     */
    public static MemorySegment LocalizationTable(MemorySegment struct) {
        return struct.asSlice(LocalizationTable$OFFSET, LocalizationTable$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *LocalizationTable[12]
     * }
     */
    public static void LocalizationTable(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LocalizationTable$OFFSET, LocalizationTable$LAYOUT.byteSize());
    }

    private static long[] LocalizationTable$DIMS = { 12 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * const char *LocalizationTable[12]
     * }
     */
    public static long[] LocalizationTable$dimensions() {
        return LocalizationTable$DIMS;
    }
    private static final VarHandle LocalizationTable$ELEM_HANDLE = LocalizationTable$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * const char *LocalizationTable[12]
     * }
     */
    public static MemorySegment LocalizationTable(MemorySegment struct, long index0) {
        return (MemorySegment)LocalizationTable$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * const char *LocalizationTable[12]
     * }
     */
    public static void LocalizationTable(MemorySegment struct, long index0, MemorySegment fieldValue) {
        LocalizationTable$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfBoolean LogEnabled$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("LogEnabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool LogEnabled
     * }
     */
    public static final OfBoolean LogEnabled$layout() {
        return LogEnabled$LAYOUT;
    }

    private static final long LogEnabled$OFFSET = 13864;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool LogEnabled
     * }
     */
    public static final long LogEnabled$offset() {
        return LogEnabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool LogEnabled
     * }
     */
    public static boolean LogEnabled(MemorySegment struct) {
        return struct.get(LogEnabled$LAYOUT, LogEnabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool LogEnabled
     * }
     */
    public static void LogEnabled(MemorySegment struct, boolean fieldValue) {
        struct.set(LogEnabled$LAYOUT, LogEnabled$OFFSET, fieldValue);
    }

    private static final OfInt LogType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiLogType LogType
     * }
     */
    public static final OfInt LogType$layout() {
        return LogType$LAYOUT;
    }

    private static final long LogType$OFFSET = 13868;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiLogType LogType
     * }
     */
    public static final long LogType$offset() {
        return LogType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiLogType LogType
     * }
     */
    public static int LogType(MemorySegment struct) {
        return struct.get(LogType$LAYOUT, LogType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiLogType LogType
     * }
     */
    public static void LogType(MemorySegment struct, int fieldValue) {
        struct.set(LogType$LAYOUT, LogType$OFFSET, fieldValue);
    }

    private static final AddressLayout LogFile$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("LogFile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImFileHandle LogFile
     * }
     */
    public static final AddressLayout LogFile$layout() {
        return LogFile$LAYOUT;
    }

    private static final long LogFile$OFFSET = 13872;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImFileHandle LogFile
     * }
     */
    public static final long LogFile$offset() {
        return LogFile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImFileHandle LogFile
     * }
     */
    public static MemorySegment LogFile(MemorySegment struct) {
        return struct.get(LogFile$LAYOUT, LogFile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImFileHandle LogFile
     * }
     */
    public static void LogFile(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(LogFile$LAYOUT, LogFile$OFFSET, fieldValue);
    }

    private static final GroupLayout LogBuffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("LogBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer LogBuffer
     * }
     */
    public static final GroupLayout LogBuffer$layout() {
        return LogBuffer$LAYOUT;
    }

    private static final long LogBuffer$OFFSET = 13880;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer LogBuffer
     * }
     */
    public static final long LogBuffer$offset() {
        return LogBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer LogBuffer
     * }
     */
    public static MemorySegment LogBuffer(MemorySegment struct) {
        return struct.asSlice(LogBuffer$OFFSET, LogBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer LogBuffer
     * }
     */
    public static void LogBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LogBuffer$OFFSET, LogBuffer$LAYOUT.byteSize());
    }

    private static final AddressLayout LogNextPrefix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("LogNextPrefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *LogNextPrefix
     * }
     */
    public static final AddressLayout LogNextPrefix$layout() {
        return LogNextPrefix$LAYOUT;
    }

    private static final long LogNextPrefix$OFFSET = 13896;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *LogNextPrefix
     * }
     */
    public static final long LogNextPrefix$offset() {
        return LogNextPrefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *LogNextPrefix
     * }
     */
    public static MemorySegment LogNextPrefix(MemorySegment struct) {
        return struct.get(LogNextPrefix$LAYOUT, LogNextPrefix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *LogNextPrefix
     * }
     */
    public static void LogNextPrefix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(LogNextPrefix$LAYOUT, LogNextPrefix$OFFSET, fieldValue);
    }

    private static final AddressLayout LogNextSuffix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("LogNextSuffix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *LogNextSuffix
     * }
     */
    public static final AddressLayout LogNextSuffix$layout() {
        return LogNextSuffix$LAYOUT;
    }

    private static final long LogNextSuffix$OFFSET = 13904;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *LogNextSuffix
     * }
     */
    public static final long LogNextSuffix$offset() {
        return LogNextSuffix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *LogNextSuffix
     * }
     */
    public static MemorySegment LogNextSuffix(MemorySegment struct) {
        return struct.get(LogNextSuffix$LAYOUT, LogNextSuffix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *LogNextSuffix
     * }
     */
    public static void LogNextSuffix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(LogNextSuffix$LAYOUT, LogNextSuffix$OFFSET, fieldValue);
    }

    private static final OfFloat LogLinePosY$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("LogLinePosY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float LogLinePosY
     * }
     */
    public static final OfFloat LogLinePosY$layout() {
        return LogLinePosY$LAYOUT;
    }

    private static final long LogLinePosY$OFFSET = 13912;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float LogLinePosY
     * }
     */
    public static final long LogLinePosY$offset() {
        return LogLinePosY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float LogLinePosY
     * }
     */
    public static float LogLinePosY(MemorySegment struct) {
        return struct.get(LogLinePosY$LAYOUT, LogLinePosY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float LogLinePosY
     * }
     */
    public static void LogLinePosY(MemorySegment struct, float fieldValue) {
        struct.set(LogLinePosY$LAYOUT, LogLinePosY$OFFSET, fieldValue);
    }

    private static final OfBoolean LogLineFirstItem$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("LogLineFirstItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool LogLineFirstItem
     * }
     */
    public static final OfBoolean LogLineFirstItem$layout() {
        return LogLineFirstItem$LAYOUT;
    }

    private static final long LogLineFirstItem$OFFSET = 13916;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool LogLineFirstItem
     * }
     */
    public static final long LogLineFirstItem$offset() {
        return LogLineFirstItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool LogLineFirstItem
     * }
     */
    public static boolean LogLineFirstItem(MemorySegment struct) {
        return struct.get(LogLineFirstItem$LAYOUT, LogLineFirstItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool LogLineFirstItem
     * }
     */
    public static void LogLineFirstItem(MemorySegment struct, boolean fieldValue) {
        struct.set(LogLineFirstItem$LAYOUT, LogLineFirstItem$OFFSET, fieldValue);
    }

    private static final OfInt LogDepthRef$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogDepthRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LogDepthRef
     * }
     */
    public static final OfInt LogDepthRef$layout() {
        return LogDepthRef$LAYOUT;
    }

    private static final long LogDepthRef$OFFSET = 13920;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LogDepthRef
     * }
     */
    public static final long LogDepthRef$offset() {
        return LogDepthRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LogDepthRef
     * }
     */
    public static int LogDepthRef(MemorySegment struct) {
        return struct.get(LogDepthRef$LAYOUT, LogDepthRef$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LogDepthRef
     * }
     */
    public static void LogDepthRef(MemorySegment struct, int fieldValue) {
        struct.set(LogDepthRef$LAYOUT, LogDepthRef$OFFSET, fieldValue);
    }

    private static final OfInt LogDepthToExpand$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogDepthToExpand"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LogDepthToExpand
     * }
     */
    public static final OfInt LogDepthToExpand$layout() {
        return LogDepthToExpand$LAYOUT;
    }

    private static final long LogDepthToExpand$OFFSET = 13924;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LogDepthToExpand
     * }
     */
    public static final long LogDepthToExpand$offset() {
        return LogDepthToExpand$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LogDepthToExpand
     * }
     */
    public static int LogDepthToExpand(MemorySegment struct) {
        return struct.get(LogDepthToExpand$LAYOUT, LogDepthToExpand$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LogDepthToExpand
     * }
     */
    public static void LogDepthToExpand(MemorySegment struct, int fieldValue) {
        struct.set(LogDepthToExpand$LAYOUT, LogDepthToExpand$OFFSET, fieldValue);
    }

    private static final OfInt LogDepthToExpandDefault$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LogDepthToExpandDefault"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LogDepthToExpandDefault
     * }
     */
    public static final OfInt LogDepthToExpandDefault$layout() {
        return LogDepthToExpandDefault$LAYOUT;
    }

    private static final long LogDepthToExpandDefault$OFFSET = 13928;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LogDepthToExpandDefault
     * }
     */
    public static final long LogDepthToExpandDefault$offset() {
        return LogDepthToExpandDefault$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LogDepthToExpandDefault
     * }
     */
    public static int LogDepthToExpandDefault(MemorySegment struct) {
        return struct.get(LogDepthToExpandDefault$LAYOUT, LogDepthToExpandDefault$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LogDepthToExpandDefault
     * }
     */
    public static void LogDepthToExpandDefault(MemorySegment struct, int fieldValue) {
        struct.set(LogDepthToExpandDefault$LAYOUT, LogDepthToExpandDefault$OFFSET, fieldValue);
    }

    private static final OfInt DebugLogFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugLogFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDebugLogFlags DebugLogFlags
     * }
     */
    public static final OfInt DebugLogFlags$layout() {
        return DebugLogFlags$LAYOUT;
    }

    private static final long DebugLogFlags$OFFSET = 13932;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDebugLogFlags DebugLogFlags
     * }
     */
    public static final long DebugLogFlags$offset() {
        return DebugLogFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDebugLogFlags DebugLogFlags
     * }
     */
    public static int DebugLogFlags(MemorySegment struct) {
        return struct.get(DebugLogFlags$LAYOUT, DebugLogFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDebugLogFlags DebugLogFlags
     * }
     */
    public static void DebugLogFlags(MemorySegment struct, int fieldValue) {
        struct.set(DebugLogFlags$LAYOUT, DebugLogFlags$OFFSET, fieldValue);
    }

    private static final GroupLayout DebugLogBuf$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DebugLogBuf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer DebugLogBuf
     * }
     */
    public static final GroupLayout DebugLogBuf$layout() {
        return DebugLogBuf$LAYOUT;
    }

    private static final long DebugLogBuf$OFFSET = 13936;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer DebugLogBuf
     * }
     */
    public static final long DebugLogBuf$offset() {
        return DebugLogBuf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer DebugLogBuf
     * }
     */
    public static MemorySegment DebugLogBuf(MemorySegment struct) {
        return struct.asSlice(DebugLogBuf$OFFSET, DebugLogBuf$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer DebugLogBuf
     * }
     */
    public static void DebugLogBuf(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DebugLogBuf$OFFSET, DebugLogBuf$LAYOUT.byteSize());
    }

    private static final GroupLayout DebugLogIndex$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DebugLogIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTextIndex DebugLogIndex
     * }
     */
    public static final GroupLayout DebugLogIndex$layout() {
        return DebugLogIndex$LAYOUT;
    }

    private static final long DebugLogIndex$OFFSET = 13952;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTextIndex DebugLogIndex
     * }
     */
    public static final long DebugLogIndex$offset() {
        return DebugLogIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTextIndex DebugLogIndex
     * }
     */
    public static MemorySegment DebugLogIndex(MemorySegment struct) {
        return struct.asSlice(DebugLogIndex$OFFSET, DebugLogIndex$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTextIndex DebugLogIndex
     * }
     */
    public static void DebugLogIndex(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DebugLogIndex$OFFSET, DebugLogIndex$LAYOUT.byteSize());
    }

    private static final OfInt DebugLogAutoDisableFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugLogAutoDisableFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDebugLogFlags DebugLogAutoDisableFlags
     * }
     */
    public static final OfInt DebugLogAutoDisableFlags$layout() {
        return DebugLogAutoDisableFlags$LAYOUT;
    }

    private static final long DebugLogAutoDisableFlags$OFFSET = 13976;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDebugLogFlags DebugLogAutoDisableFlags
     * }
     */
    public static final long DebugLogAutoDisableFlags$offset() {
        return DebugLogAutoDisableFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDebugLogFlags DebugLogAutoDisableFlags
     * }
     */
    public static int DebugLogAutoDisableFlags(MemorySegment struct) {
        return struct.get(DebugLogAutoDisableFlags$LAYOUT, DebugLogAutoDisableFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDebugLogFlags DebugLogAutoDisableFlags
     * }
     */
    public static void DebugLogAutoDisableFlags(MemorySegment struct, int fieldValue) {
        struct.set(DebugLogAutoDisableFlags$LAYOUT, DebugLogAutoDisableFlags$OFFSET, fieldValue);
    }

    private static final OfByte DebugLogAutoDisableFrames$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DebugLogAutoDisableFrames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU8 DebugLogAutoDisableFrames
     * }
     */
    public static final OfByte DebugLogAutoDisableFrames$layout() {
        return DebugLogAutoDisableFrames$LAYOUT;
    }

    private static final long DebugLogAutoDisableFrames$OFFSET = 13980;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU8 DebugLogAutoDisableFrames
     * }
     */
    public static final long DebugLogAutoDisableFrames$offset() {
        return DebugLogAutoDisableFrames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU8 DebugLogAutoDisableFrames
     * }
     */
    public static byte DebugLogAutoDisableFrames(MemorySegment struct) {
        return struct.get(DebugLogAutoDisableFrames$LAYOUT, DebugLogAutoDisableFrames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU8 DebugLogAutoDisableFrames
     * }
     */
    public static void DebugLogAutoDisableFrames(MemorySegment struct, byte fieldValue) {
        struct.set(DebugLogAutoDisableFrames$LAYOUT, DebugLogAutoDisableFrames$OFFSET, fieldValue);
    }

    private static final OfByte DebugLocateFrames$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DebugLocateFrames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU8 DebugLocateFrames
     * }
     */
    public static final OfByte DebugLocateFrames$layout() {
        return DebugLocateFrames$LAYOUT;
    }

    private static final long DebugLocateFrames$OFFSET = 13981;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU8 DebugLocateFrames
     * }
     */
    public static final long DebugLocateFrames$offset() {
        return DebugLocateFrames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU8 DebugLocateFrames
     * }
     */
    public static byte DebugLocateFrames(MemorySegment struct) {
        return struct.get(DebugLocateFrames$LAYOUT, DebugLocateFrames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU8 DebugLocateFrames
     * }
     */
    public static void DebugLocateFrames(MemorySegment struct, byte fieldValue) {
        struct.set(DebugLocateFrames$LAYOUT, DebugLocateFrames$OFFSET, fieldValue);
    }

    private static final OfBoolean DebugBreakInLocateId$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("DebugBreakInLocateId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool DebugBreakInLocateId
     * }
     */
    public static final OfBoolean DebugBreakInLocateId$layout() {
        return DebugBreakInLocateId$LAYOUT;
    }

    private static final long DebugBreakInLocateId$OFFSET = 13982;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool DebugBreakInLocateId
     * }
     */
    public static final long DebugBreakInLocateId$offset() {
        return DebugBreakInLocateId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool DebugBreakInLocateId
     * }
     */
    public static boolean DebugBreakInLocateId(MemorySegment struct) {
        return struct.get(DebugBreakInLocateId$LAYOUT, DebugBreakInLocateId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool DebugBreakInLocateId
     * }
     */
    public static void DebugBreakInLocateId(MemorySegment struct, boolean fieldValue) {
        struct.set(DebugBreakInLocateId$LAYOUT, DebugBreakInLocateId$OFFSET, fieldValue);
    }

    private static final OfInt DebugBreakKeyChord$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugBreakKeyChord"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyChord DebugBreakKeyChord
     * }
     */
    public static final OfInt DebugBreakKeyChord$layout() {
        return DebugBreakKeyChord$LAYOUT;
    }

    private static final long DebugBreakKeyChord$OFFSET = 13984;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyChord DebugBreakKeyChord
     * }
     */
    public static final long DebugBreakKeyChord$offset() {
        return DebugBreakKeyChord$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord DebugBreakKeyChord
     * }
     */
    public static int DebugBreakKeyChord(MemorySegment struct) {
        return struct.get(DebugBreakKeyChord$LAYOUT, DebugBreakKeyChord$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyChord DebugBreakKeyChord
     * }
     */
    public static void DebugBreakKeyChord(MemorySegment struct, int fieldValue) {
        struct.set(DebugBreakKeyChord$LAYOUT, DebugBreakKeyChord$OFFSET, fieldValue);
    }

    private static final OfByte DebugBeginReturnValueCullDepth$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DebugBeginReturnValueCullDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 DebugBeginReturnValueCullDepth
     * }
     */
    public static final OfByte DebugBeginReturnValueCullDepth$layout() {
        return DebugBeginReturnValueCullDepth$LAYOUT;
    }

    private static final long DebugBeginReturnValueCullDepth$OFFSET = 13988;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 DebugBeginReturnValueCullDepth
     * }
     */
    public static final long DebugBeginReturnValueCullDepth$offset() {
        return DebugBeginReturnValueCullDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 DebugBeginReturnValueCullDepth
     * }
     */
    public static byte DebugBeginReturnValueCullDepth(MemorySegment struct) {
        return struct.get(DebugBeginReturnValueCullDepth$LAYOUT, DebugBeginReturnValueCullDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 DebugBeginReturnValueCullDepth
     * }
     */
    public static void DebugBeginReturnValueCullDepth(MemorySegment struct, byte fieldValue) {
        struct.set(DebugBeginReturnValueCullDepth$LAYOUT, DebugBeginReturnValueCullDepth$OFFSET, fieldValue);
    }

    private static final OfBoolean DebugItemPickerActive$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("DebugItemPickerActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool DebugItemPickerActive
     * }
     */
    public static final OfBoolean DebugItemPickerActive$layout() {
        return DebugItemPickerActive$LAYOUT;
    }

    private static final long DebugItemPickerActive$OFFSET = 13989;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool DebugItemPickerActive
     * }
     */
    public static final long DebugItemPickerActive$offset() {
        return DebugItemPickerActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool DebugItemPickerActive
     * }
     */
    public static boolean DebugItemPickerActive(MemorySegment struct) {
        return struct.get(DebugItemPickerActive$LAYOUT, DebugItemPickerActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool DebugItemPickerActive
     * }
     */
    public static void DebugItemPickerActive(MemorySegment struct, boolean fieldValue) {
        struct.set(DebugItemPickerActive$LAYOUT, DebugItemPickerActive$OFFSET, fieldValue);
    }

    private static final OfByte DebugItemPickerMouseButton$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DebugItemPickerMouseButton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU8 DebugItemPickerMouseButton
     * }
     */
    public static final OfByte DebugItemPickerMouseButton$layout() {
        return DebugItemPickerMouseButton$LAYOUT;
    }

    private static final long DebugItemPickerMouseButton$OFFSET = 13990;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU8 DebugItemPickerMouseButton
     * }
     */
    public static final long DebugItemPickerMouseButton$offset() {
        return DebugItemPickerMouseButton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU8 DebugItemPickerMouseButton
     * }
     */
    public static byte DebugItemPickerMouseButton(MemorySegment struct) {
        return struct.get(DebugItemPickerMouseButton$LAYOUT, DebugItemPickerMouseButton$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU8 DebugItemPickerMouseButton
     * }
     */
    public static void DebugItemPickerMouseButton(MemorySegment struct, byte fieldValue) {
        struct.set(DebugItemPickerMouseButton$LAYOUT, DebugItemPickerMouseButton$OFFSET, fieldValue);
    }

    private static final OfInt DebugItemPickerBreakId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DebugItemPickerBreakId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DebugItemPickerBreakId
     * }
     */
    public static final OfInt DebugItemPickerBreakId$layout() {
        return DebugItemPickerBreakId$LAYOUT;
    }

    private static final long DebugItemPickerBreakId$OFFSET = 13992;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DebugItemPickerBreakId
     * }
     */
    public static final long DebugItemPickerBreakId$offset() {
        return DebugItemPickerBreakId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DebugItemPickerBreakId
     * }
     */
    public static int DebugItemPickerBreakId(MemorySegment struct) {
        return struct.get(DebugItemPickerBreakId$LAYOUT, DebugItemPickerBreakId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DebugItemPickerBreakId
     * }
     */
    public static void DebugItemPickerBreakId(MemorySegment struct, int fieldValue) {
        struct.set(DebugItemPickerBreakId$LAYOUT, DebugItemPickerBreakId$OFFSET, fieldValue);
    }

    private static final OfFloat DebugFlashStyleColorTime$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DebugFlashStyleColorTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DebugFlashStyleColorTime
     * }
     */
    public static final OfFloat DebugFlashStyleColorTime$layout() {
        return DebugFlashStyleColorTime$LAYOUT;
    }

    private static final long DebugFlashStyleColorTime$OFFSET = 13996;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DebugFlashStyleColorTime
     * }
     */
    public static final long DebugFlashStyleColorTime$offset() {
        return DebugFlashStyleColorTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DebugFlashStyleColorTime
     * }
     */
    public static float DebugFlashStyleColorTime(MemorySegment struct) {
        return struct.get(DebugFlashStyleColorTime$LAYOUT, DebugFlashStyleColorTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DebugFlashStyleColorTime
     * }
     */
    public static void DebugFlashStyleColorTime(MemorySegment struct, float fieldValue) {
        struct.set(DebugFlashStyleColorTime$LAYOUT, DebugFlashStyleColorTime$OFFSET, fieldValue);
    }

    private static final GroupLayout DebugFlashStyleColorBackup$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DebugFlashStyleColorBackup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec4 DebugFlashStyleColorBackup
     * }
     */
    public static final GroupLayout DebugFlashStyleColorBackup$layout() {
        return DebugFlashStyleColorBackup$LAYOUT;
    }

    private static final long DebugFlashStyleColorBackup$OFFSET = 14000;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec4 DebugFlashStyleColorBackup
     * }
     */
    public static final long DebugFlashStyleColorBackup$offset() {
        return DebugFlashStyleColorBackup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec4 DebugFlashStyleColorBackup
     * }
     */
    public static MemorySegment DebugFlashStyleColorBackup(MemorySegment struct) {
        return struct.asSlice(DebugFlashStyleColorBackup$OFFSET, DebugFlashStyleColorBackup$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec4 DebugFlashStyleColorBackup
     * }
     */
    public static void DebugFlashStyleColorBackup(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DebugFlashStyleColorBackup$OFFSET, DebugFlashStyleColorBackup$LAYOUT.byteSize());
    }

    private static final GroupLayout DebugMetricsConfig$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DebugMetricsConfig"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMetricsConfig DebugMetricsConfig
     * }
     */
    public static final GroupLayout DebugMetricsConfig$layout() {
        return DebugMetricsConfig$LAYOUT;
    }

    private static final long DebugMetricsConfig$OFFSET = 14016;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMetricsConfig DebugMetricsConfig
     * }
     */
    public static final long DebugMetricsConfig$offset() {
        return DebugMetricsConfig$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMetricsConfig DebugMetricsConfig
     * }
     */
    public static MemorySegment DebugMetricsConfig(MemorySegment struct) {
        return struct.asSlice(DebugMetricsConfig$OFFSET, DebugMetricsConfig$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMetricsConfig DebugMetricsConfig
     * }
     */
    public static void DebugMetricsConfig(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DebugMetricsConfig$OFFSET, DebugMetricsConfig$LAYOUT.byteSize());
    }

    private static final GroupLayout DebugIDStackTool$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DebugIDStackTool"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiIDStackTool DebugIDStackTool
     * }
     */
    public static final GroupLayout DebugIDStackTool$layout() {
        return DebugIDStackTool$LAYOUT;
    }

    private static final long DebugIDStackTool$OFFSET = 14048;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiIDStackTool DebugIDStackTool
     * }
     */
    public static final long DebugIDStackTool$offset() {
        return DebugIDStackTool$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiIDStackTool DebugIDStackTool
     * }
     */
    public static MemorySegment DebugIDStackTool(MemorySegment struct) {
        return struct.asSlice(DebugIDStackTool$OFFSET, DebugIDStackTool$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiIDStackTool DebugIDStackTool
     * }
     */
    public static void DebugIDStackTool(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DebugIDStackTool$OFFSET, DebugIDStackTool$LAYOUT.byteSize());
    }

    private static final GroupLayout DebugAllocInfo$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DebugAllocInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocInfo DebugAllocInfo
     * }
     */
    public static final GroupLayout DebugAllocInfo$layout() {
        return DebugAllocInfo$LAYOUT;
    }

    private static final long DebugAllocInfo$OFFSET = 14088;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocInfo DebugAllocInfo
     * }
     */
    public static final long DebugAllocInfo$offset() {
        return DebugAllocInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocInfo DebugAllocInfo
     * }
     */
    public static MemorySegment DebugAllocInfo(MemorySegment struct) {
        return struct.asSlice(DebugAllocInfo$OFFSET, DebugAllocInfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocInfo DebugAllocInfo
     * }
     */
    public static void DebugAllocInfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DebugAllocInfo$OFFSET, DebugAllocInfo$LAYOUT.byteSize());
    }

    private static final AddressLayout DebugHoveredDockNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DebugHoveredDockNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DebugHoveredDockNode
     * }
     */
    public static final AddressLayout DebugHoveredDockNode$layout() {
        return DebugHoveredDockNode$LAYOUT;
    }

    private static final long DebugHoveredDockNode$OFFSET = 14152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DebugHoveredDockNode
     * }
     */
    public static final long DebugHoveredDockNode$offset() {
        return DebugHoveredDockNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DebugHoveredDockNode
     * }
     */
    public static MemorySegment DebugHoveredDockNode(MemorySegment struct) {
        return struct.get(DebugHoveredDockNode$LAYOUT, DebugHoveredDockNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DebugHoveredDockNode
     * }
     */
    public static void DebugHoveredDockNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DebugHoveredDockNode$LAYOUT, DebugHoveredDockNode$OFFSET, fieldValue);
    }

    private static final SequenceLayout FramerateSecPerFrame$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("FramerateSecPerFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrame[60]
     * }
     */
    public static final SequenceLayout FramerateSecPerFrame$layout() {
        return FramerateSecPerFrame$LAYOUT;
    }

    private static final long FramerateSecPerFrame$OFFSET = 14160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrame[60]
     * }
     */
    public static final long FramerateSecPerFrame$offset() {
        return FramerateSecPerFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrame[60]
     * }
     */
    public static MemorySegment FramerateSecPerFrame(MemorySegment struct) {
        return struct.asSlice(FramerateSecPerFrame$OFFSET, FramerateSecPerFrame$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrame[60]
     * }
     */
    public static void FramerateSecPerFrame(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FramerateSecPerFrame$OFFSET, FramerateSecPerFrame$LAYOUT.byteSize());
    }

    private static long[] FramerateSecPerFrame$DIMS = { 60 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float FramerateSecPerFrame[60]
     * }
     */
    public static long[] FramerateSecPerFrame$dimensions() {
        return FramerateSecPerFrame$DIMS;
    }
    private static final VarHandle FramerateSecPerFrame$ELEM_HANDLE = FramerateSecPerFrame$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrame[60]
     * }
     */
    public static float FramerateSecPerFrame(MemorySegment struct, long index0) {
        return (float)FramerateSecPerFrame$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrame[60]
     * }
     */
    public static void FramerateSecPerFrame(MemorySegment struct, long index0, float fieldValue) {
        FramerateSecPerFrame$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt FramerateSecPerFrameIdx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FramerateSecPerFrameIdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int FramerateSecPerFrameIdx
     * }
     */
    public static final OfInt FramerateSecPerFrameIdx$layout() {
        return FramerateSecPerFrameIdx$LAYOUT;
    }

    private static final long FramerateSecPerFrameIdx$OFFSET = 14400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int FramerateSecPerFrameIdx
     * }
     */
    public static final long FramerateSecPerFrameIdx$offset() {
        return FramerateSecPerFrameIdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int FramerateSecPerFrameIdx
     * }
     */
    public static int FramerateSecPerFrameIdx(MemorySegment struct) {
        return struct.get(FramerateSecPerFrameIdx$LAYOUT, FramerateSecPerFrameIdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int FramerateSecPerFrameIdx
     * }
     */
    public static void FramerateSecPerFrameIdx(MemorySegment struct, int fieldValue) {
        struct.set(FramerateSecPerFrameIdx$LAYOUT, FramerateSecPerFrameIdx$OFFSET, fieldValue);
    }

    private static final OfInt FramerateSecPerFrameCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FramerateSecPerFrameCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int FramerateSecPerFrameCount
     * }
     */
    public static final OfInt FramerateSecPerFrameCount$layout() {
        return FramerateSecPerFrameCount$LAYOUT;
    }

    private static final long FramerateSecPerFrameCount$OFFSET = 14404;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int FramerateSecPerFrameCount
     * }
     */
    public static final long FramerateSecPerFrameCount$offset() {
        return FramerateSecPerFrameCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int FramerateSecPerFrameCount
     * }
     */
    public static int FramerateSecPerFrameCount(MemorySegment struct) {
        return struct.get(FramerateSecPerFrameCount$LAYOUT, FramerateSecPerFrameCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int FramerateSecPerFrameCount
     * }
     */
    public static void FramerateSecPerFrameCount(MemorySegment struct, int fieldValue) {
        struct.set(FramerateSecPerFrameCount$LAYOUT, FramerateSecPerFrameCount$OFFSET, fieldValue);
    }

    private static final OfFloat FramerateSecPerFrameAccum$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FramerateSecPerFrameAccum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrameAccum
     * }
     */
    public static final OfFloat FramerateSecPerFrameAccum$layout() {
        return FramerateSecPerFrameAccum$LAYOUT;
    }

    private static final long FramerateSecPerFrameAccum$OFFSET = 14408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrameAccum
     * }
     */
    public static final long FramerateSecPerFrameAccum$offset() {
        return FramerateSecPerFrameAccum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrameAccum
     * }
     */
    public static float FramerateSecPerFrameAccum(MemorySegment struct) {
        return struct.get(FramerateSecPerFrameAccum$LAYOUT, FramerateSecPerFrameAccum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FramerateSecPerFrameAccum
     * }
     */
    public static void FramerateSecPerFrameAccum(MemorySegment struct, float fieldValue) {
        struct.set(FramerateSecPerFrameAccum$LAYOUT, FramerateSecPerFrameAccum$OFFSET, fieldValue);
    }

    private static final OfInt WantCaptureMouseNextFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WantCaptureMouseNextFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int WantCaptureMouseNextFrame
     * }
     */
    public static final OfInt WantCaptureMouseNextFrame$layout() {
        return WantCaptureMouseNextFrame$LAYOUT;
    }

    private static final long WantCaptureMouseNextFrame$OFFSET = 14412;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int WantCaptureMouseNextFrame
     * }
     */
    public static final long WantCaptureMouseNextFrame$offset() {
        return WantCaptureMouseNextFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int WantCaptureMouseNextFrame
     * }
     */
    public static int WantCaptureMouseNextFrame(MemorySegment struct) {
        return struct.get(WantCaptureMouseNextFrame$LAYOUT, WantCaptureMouseNextFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int WantCaptureMouseNextFrame
     * }
     */
    public static void WantCaptureMouseNextFrame(MemorySegment struct, int fieldValue) {
        struct.set(WantCaptureMouseNextFrame$LAYOUT, WantCaptureMouseNextFrame$OFFSET, fieldValue);
    }

    private static final OfInt WantCaptureKeyboardNextFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WantCaptureKeyboardNextFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int WantCaptureKeyboardNextFrame
     * }
     */
    public static final OfInt WantCaptureKeyboardNextFrame$layout() {
        return WantCaptureKeyboardNextFrame$LAYOUT;
    }

    private static final long WantCaptureKeyboardNextFrame$OFFSET = 14416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int WantCaptureKeyboardNextFrame
     * }
     */
    public static final long WantCaptureKeyboardNextFrame$offset() {
        return WantCaptureKeyboardNextFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int WantCaptureKeyboardNextFrame
     * }
     */
    public static int WantCaptureKeyboardNextFrame(MemorySegment struct) {
        return struct.get(WantCaptureKeyboardNextFrame$LAYOUT, WantCaptureKeyboardNextFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int WantCaptureKeyboardNextFrame
     * }
     */
    public static void WantCaptureKeyboardNextFrame(MemorySegment struct, int fieldValue) {
        struct.set(WantCaptureKeyboardNextFrame$LAYOUT, WantCaptureKeyboardNextFrame$OFFSET, fieldValue);
    }

    private static final OfInt WantTextInputNextFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WantTextInputNextFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int WantTextInputNextFrame
     * }
     */
    public static final OfInt WantTextInputNextFrame$layout() {
        return WantTextInputNextFrame$LAYOUT;
    }

    private static final long WantTextInputNextFrame$OFFSET = 14420;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int WantTextInputNextFrame
     * }
     */
    public static final long WantTextInputNextFrame$offset() {
        return WantTextInputNextFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int WantTextInputNextFrame
     * }
     */
    public static int WantTextInputNextFrame(MemorySegment struct) {
        return struct.get(WantTextInputNextFrame$LAYOUT, WantTextInputNextFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int WantTextInputNextFrame
     * }
     */
    public static void WantTextInputNextFrame(MemorySegment struct, int fieldValue) {
        struct.set(WantTextInputNextFrame$LAYOUT, WantTextInputNextFrame$OFFSET, fieldValue);
    }

    private static final GroupLayout TempBuffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TempBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_char TempBuffer
     * }
     */
    public static final GroupLayout TempBuffer$layout() {
        return TempBuffer$LAYOUT;
    }

    private static final long TempBuffer$OFFSET = 14424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_char TempBuffer
     * }
     */
    public static final long TempBuffer$offset() {
        return TempBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_char TempBuffer
     * }
     */
    public static MemorySegment TempBuffer(MemorySegment struct) {
        return struct.asSlice(TempBuffer$OFFSET, TempBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_char TempBuffer
     * }
     */
    public static void TempBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TempBuffer$OFFSET, TempBuffer$LAYOUT.byteSize());
    }

    private static final SequenceLayout TempKeychordName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("TempKeychordName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char TempKeychordName[64]
     * }
     */
    public static final SequenceLayout TempKeychordName$layout() {
        return TempKeychordName$LAYOUT;
    }

    private static final long TempKeychordName$OFFSET = 14440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char TempKeychordName[64]
     * }
     */
    public static final long TempKeychordName$offset() {
        return TempKeychordName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char TempKeychordName[64]
     * }
     */
    public static MemorySegment TempKeychordName(MemorySegment struct) {
        return struct.asSlice(TempKeychordName$OFFSET, TempKeychordName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char TempKeychordName[64]
     * }
     */
    public static void TempKeychordName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TempKeychordName$OFFSET, TempKeychordName$LAYOUT.byteSize());
    }

    private static long[] TempKeychordName$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char TempKeychordName[64]
     * }
     */
    public static long[] TempKeychordName$dimensions() {
        return TempKeychordName$DIMS;
    }
    private static final VarHandle TempKeychordName$ELEM_HANDLE = TempKeychordName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char TempKeychordName[64]
     * }
     */
    public static byte TempKeychordName(MemorySegment struct, long index0) {
        return (byte)TempKeychordName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char TempKeychordName[64]
     * }
     */
    public static void TempKeychordName(MemorySegment struct, long index0, byte fieldValue) {
        TempKeychordName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

