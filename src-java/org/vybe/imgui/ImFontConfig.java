// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImFontConfig {
 *     void *FontData;
 *     int FontDataSize;
 *     bool FontDataOwnedByAtlas;
 *     int FontNo;
 *     float SizePixels;
 *     int OversampleH;
 *     int OversampleV;
 *     bool PixelSnapH;
 *     ImVec2 GlyphExtraSpacing;
 *     ImVec2 GlyphOffset;
 *     const ImWchar *GlyphRanges;
 *     float GlyphMinAdvanceX;
 *     float GlyphMaxAdvanceX;
 *     bool MergeMode;
 *     unsigned int FontBuilderFlags;
 *     float RasterizerMultiply;
 *     float RasterizerDensity;
 *     ImWchar EllipsisChar;
 *     char Name[40];
 *     ImFont *DstFont;
 * }
 * }
 */
public class ImFontConfig {

    ImFontConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_POINTER.withName("FontData"),
        imgui.C_INT.withName("FontDataSize"),
        imgui.C_BOOL.withName("FontDataOwnedByAtlas"),
        MemoryLayout.paddingLayout(3),
        imgui.C_INT.withName("FontNo"),
        imgui.C_FLOAT.withName("SizePixels"),
        imgui.C_INT.withName("OversampleH"),
        imgui.C_INT.withName("OversampleV"),
        imgui.C_BOOL.withName("PixelSnapH"),
        MemoryLayout.paddingLayout(3),
        ImVec2.layout().withName("GlyphExtraSpacing"),
        ImVec2.layout().withName("GlyphOffset"),
        MemoryLayout.paddingLayout(4),
        imgui.C_POINTER.withName("GlyphRanges"),
        imgui.C_FLOAT.withName("GlyphMinAdvanceX"),
        imgui.C_FLOAT.withName("GlyphMaxAdvanceX"),
        imgui.C_BOOL.withName("MergeMode"),
        MemoryLayout.paddingLayout(3),
        imgui.C_INT.withName("FontBuilderFlags"),
        imgui.C_FLOAT.withName("RasterizerMultiply"),
        imgui.C_FLOAT.withName("RasterizerDensity"),
        imgui.C_SHORT.withName("EllipsisChar"),
        MemoryLayout.sequenceLayout(40, imgui.C_CHAR).withName("Name"),
        MemoryLayout.paddingLayout(6),
        imgui.C_POINTER.withName("DstFont")
    ).withName("ImFontConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout FontData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("FontData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *FontData
     * }
     */
    public static final AddressLayout FontData$layout() {
        return FontData$LAYOUT;
    }

    private static final long FontData$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *FontData
     * }
     */
    public static final long FontData$offset() {
        return FontData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *FontData
     * }
     */
    public static MemorySegment FontData(MemorySegment struct) {
        return struct.get(FontData$LAYOUT, FontData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *FontData
     * }
     */
    public static void FontData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(FontData$LAYOUT, FontData$OFFSET, fieldValue);
    }

    private static final OfInt FontDataSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FontDataSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int FontDataSize
     * }
     */
    public static final OfInt FontDataSize$layout() {
        return FontDataSize$LAYOUT;
    }

    private static final long FontDataSize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int FontDataSize
     * }
     */
    public static final long FontDataSize$offset() {
        return FontDataSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int FontDataSize
     * }
     */
    public static int FontDataSize(MemorySegment struct) {
        return struct.get(FontDataSize$LAYOUT, FontDataSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int FontDataSize
     * }
     */
    public static void FontDataSize(MemorySegment struct, int fieldValue) {
        struct.set(FontDataSize$LAYOUT, FontDataSize$OFFSET, fieldValue);
    }

    private static final OfBoolean FontDataOwnedByAtlas$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("FontDataOwnedByAtlas"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool FontDataOwnedByAtlas
     * }
     */
    public static final OfBoolean FontDataOwnedByAtlas$layout() {
        return FontDataOwnedByAtlas$LAYOUT;
    }

    private static final long FontDataOwnedByAtlas$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool FontDataOwnedByAtlas
     * }
     */
    public static final long FontDataOwnedByAtlas$offset() {
        return FontDataOwnedByAtlas$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool FontDataOwnedByAtlas
     * }
     */
    public static boolean FontDataOwnedByAtlas(MemorySegment struct) {
        return struct.get(FontDataOwnedByAtlas$LAYOUT, FontDataOwnedByAtlas$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool FontDataOwnedByAtlas
     * }
     */
    public static void FontDataOwnedByAtlas(MemorySegment struct, boolean fieldValue) {
        struct.set(FontDataOwnedByAtlas$LAYOUT, FontDataOwnedByAtlas$OFFSET, fieldValue);
    }

    private static final OfInt FontNo$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FontNo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int FontNo
     * }
     */
    public static final OfInt FontNo$layout() {
        return FontNo$LAYOUT;
    }

    private static final long FontNo$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int FontNo
     * }
     */
    public static final long FontNo$offset() {
        return FontNo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int FontNo
     * }
     */
    public static int FontNo(MemorySegment struct) {
        return struct.get(FontNo$LAYOUT, FontNo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int FontNo
     * }
     */
    public static void FontNo(MemorySegment struct, int fieldValue) {
        struct.set(FontNo$LAYOUT, FontNo$OFFSET, fieldValue);
    }

    private static final OfFloat SizePixels$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("SizePixels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float SizePixels
     * }
     */
    public static final OfFloat SizePixels$layout() {
        return SizePixels$LAYOUT;
    }

    private static final long SizePixels$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float SizePixels
     * }
     */
    public static final long SizePixels$offset() {
        return SizePixels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float SizePixels
     * }
     */
    public static float SizePixels(MemorySegment struct) {
        return struct.get(SizePixels$LAYOUT, SizePixels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float SizePixels
     * }
     */
    public static void SizePixels(MemorySegment struct, float fieldValue) {
        struct.set(SizePixels$LAYOUT, SizePixels$OFFSET, fieldValue);
    }

    private static final OfInt OversampleH$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OversampleH"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int OversampleH
     * }
     */
    public static final OfInt OversampleH$layout() {
        return OversampleH$LAYOUT;
    }

    private static final long OversampleH$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int OversampleH
     * }
     */
    public static final long OversampleH$offset() {
        return OversampleH$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int OversampleH
     * }
     */
    public static int OversampleH(MemorySegment struct) {
        return struct.get(OversampleH$LAYOUT, OversampleH$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int OversampleH
     * }
     */
    public static void OversampleH(MemorySegment struct, int fieldValue) {
        struct.set(OversampleH$LAYOUT, OversampleH$OFFSET, fieldValue);
    }

    private static final OfInt OversampleV$LAYOUT = (OfInt)$LAYOUT.select(groupElement("OversampleV"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int OversampleV
     * }
     */
    public static final OfInt OversampleV$layout() {
        return OversampleV$LAYOUT;
    }

    private static final long OversampleV$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int OversampleV
     * }
     */
    public static final long OversampleV$offset() {
        return OversampleV$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int OversampleV
     * }
     */
    public static int OversampleV(MemorySegment struct) {
        return struct.get(OversampleV$LAYOUT, OversampleV$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int OversampleV
     * }
     */
    public static void OversampleV(MemorySegment struct, int fieldValue) {
        struct.set(OversampleV$LAYOUT, OversampleV$OFFSET, fieldValue);
    }

    private static final OfBoolean PixelSnapH$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("PixelSnapH"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool PixelSnapH
     * }
     */
    public static final OfBoolean PixelSnapH$layout() {
        return PixelSnapH$LAYOUT;
    }

    private static final long PixelSnapH$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool PixelSnapH
     * }
     */
    public static final long PixelSnapH$offset() {
        return PixelSnapH$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool PixelSnapH
     * }
     */
    public static boolean PixelSnapH(MemorySegment struct) {
        return struct.get(PixelSnapH$LAYOUT, PixelSnapH$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool PixelSnapH
     * }
     */
    public static void PixelSnapH(MemorySegment struct, boolean fieldValue) {
        struct.set(PixelSnapH$LAYOUT, PixelSnapH$OFFSET, fieldValue);
    }

    private static final GroupLayout GlyphExtraSpacing$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("GlyphExtraSpacing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 GlyphExtraSpacing
     * }
     */
    public static final GroupLayout GlyphExtraSpacing$layout() {
        return GlyphExtraSpacing$LAYOUT;
    }

    private static final long GlyphExtraSpacing$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 GlyphExtraSpacing
     * }
     */
    public static final long GlyphExtraSpacing$offset() {
        return GlyphExtraSpacing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 GlyphExtraSpacing
     * }
     */
    public static MemorySegment GlyphExtraSpacing(MemorySegment struct) {
        return struct.asSlice(GlyphExtraSpacing$OFFSET, GlyphExtraSpacing$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 GlyphExtraSpacing
     * }
     */
    public static void GlyphExtraSpacing(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, GlyphExtraSpacing$OFFSET, GlyphExtraSpacing$LAYOUT.byteSize());
    }

    private static final GroupLayout GlyphOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("GlyphOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 GlyphOffset
     * }
     */
    public static final GroupLayout GlyphOffset$layout() {
        return GlyphOffset$LAYOUT;
    }

    private static final long GlyphOffset$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 GlyphOffset
     * }
     */
    public static final long GlyphOffset$offset() {
        return GlyphOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 GlyphOffset
     * }
     */
    public static MemorySegment GlyphOffset(MemorySegment struct) {
        return struct.asSlice(GlyphOffset$OFFSET, GlyphOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 GlyphOffset
     * }
     */
    public static void GlyphOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, GlyphOffset$OFFSET, GlyphOffset$LAYOUT.byteSize());
    }

    private static final AddressLayout GlyphRanges$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("GlyphRanges"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ImWchar *GlyphRanges
     * }
     */
    public static final AddressLayout GlyphRanges$layout() {
        return GlyphRanges$LAYOUT;
    }

    private static final long GlyphRanges$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ImWchar *GlyphRanges
     * }
     */
    public static final long GlyphRanges$offset() {
        return GlyphRanges$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ImWchar *GlyphRanges
     * }
     */
    public static MemorySegment GlyphRanges(MemorySegment struct) {
        return struct.get(GlyphRanges$LAYOUT, GlyphRanges$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ImWchar *GlyphRanges
     * }
     */
    public static void GlyphRanges(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(GlyphRanges$LAYOUT, GlyphRanges$OFFSET, fieldValue);
    }

    private static final OfFloat GlyphMinAdvanceX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("GlyphMinAdvanceX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float GlyphMinAdvanceX
     * }
     */
    public static final OfFloat GlyphMinAdvanceX$layout() {
        return GlyphMinAdvanceX$LAYOUT;
    }

    private static final long GlyphMinAdvanceX$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float GlyphMinAdvanceX
     * }
     */
    public static final long GlyphMinAdvanceX$offset() {
        return GlyphMinAdvanceX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float GlyphMinAdvanceX
     * }
     */
    public static float GlyphMinAdvanceX(MemorySegment struct) {
        return struct.get(GlyphMinAdvanceX$LAYOUT, GlyphMinAdvanceX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float GlyphMinAdvanceX
     * }
     */
    public static void GlyphMinAdvanceX(MemorySegment struct, float fieldValue) {
        struct.set(GlyphMinAdvanceX$LAYOUT, GlyphMinAdvanceX$OFFSET, fieldValue);
    }

    private static final OfFloat GlyphMaxAdvanceX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("GlyphMaxAdvanceX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float GlyphMaxAdvanceX
     * }
     */
    public static final OfFloat GlyphMaxAdvanceX$layout() {
        return GlyphMaxAdvanceX$LAYOUT;
    }

    private static final long GlyphMaxAdvanceX$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float GlyphMaxAdvanceX
     * }
     */
    public static final long GlyphMaxAdvanceX$offset() {
        return GlyphMaxAdvanceX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float GlyphMaxAdvanceX
     * }
     */
    public static float GlyphMaxAdvanceX(MemorySegment struct) {
        return struct.get(GlyphMaxAdvanceX$LAYOUT, GlyphMaxAdvanceX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float GlyphMaxAdvanceX
     * }
     */
    public static void GlyphMaxAdvanceX(MemorySegment struct, float fieldValue) {
        struct.set(GlyphMaxAdvanceX$LAYOUT, GlyphMaxAdvanceX$OFFSET, fieldValue);
    }

    private static final OfBoolean MergeMode$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("MergeMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MergeMode
     * }
     */
    public static final OfBoolean MergeMode$layout() {
        return MergeMode$LAYOUT;
    }

    private static final long MergeMode$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MergeMode
     * }
     */
    public static final long MergeMode$offset() {
        return MergeMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MergeMode
     * }
     */
    public static boolean MergeMode(MemorySegment struct) {
        return struct.get(MergeMode$LAYOUT, MergeMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MergeMode
     * }
     */
    public static void MergeMode(MemorySegment struct, boolean fieldValue) {
        struct.set(MergeMode$LAYOUT, MergeMode$OFFSET, fieldValue);
    }

    private static final OfInt FontBuilderFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FontBuilderFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int FontBuilderFlags
     * }
     */
    public static final OfInt FontBuilderFlags$layout() {
        return FontBuilderFlags$LAYOUT;
    }

    private static final long FontBuilderFlags$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int FontBuilderFlags
     * }
     */
    public static final long FontBuilderFlags$offset() {
        return FontBuilderFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int FontBuilderFlags
     * }
     */
    public static int FontBuilderFlags(MemorySegment struct) {
        return struct.get(FontBuilderFlags$LAYOUT, FontBuilderFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int FontBuilderFlags
     * }
     */
    public static void FontBuilderFlags(MemorySegment struct, int fieldValue) {
        struct.set(FontBuilderFlags$LAYOUT, FontBuilderFlags$OFFSET, fieldValue);
    }

    private static final OfFloat RasterizerMultiply$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("RasterizerMultiply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float RasterizerMultiply
     * }
     */
    public static final OfFloat RasterizerMultiply$layout() {
        return RasterizerMultiply$LAYOUT;
    }

    private static final long RasterizerMultiply$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float RasterizerMultiply
     * }
     */
    public static final long RasterizerMultiply$offset() {
        return RasterizerMultiply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float RasterizerMultiply
     * }
     */
    public static float RasterizerMultiply(MemorySegment struct) {
        return struct.get(RasterizerMultiply$LAYOUT, RasterizerMultiply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float RasterizerMultiply
     * }
     */
    public static void RasterizerMultiply(MemorySegment struct, float fieldValue) {
        struct.set(RasterizerMultiply$LAYOUT, RasterizerMultiply$OFFSET, fieldValue);
    }

    private static final OfFloat RasterizerDensity$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("RasterizerDensity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float RasterizerDensity
     * }
     */
    public static final OfFloat RasterizerDensity$layout() {
        return RasterizerDensity$LAYOUT;
    }

    private static final long RasterizerDensity$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float RasterizerDensity
     * }
     */
    public static final long RasterizerDensity$offset() {
        return RasterizerDensity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float RasterizerDensity
     * }
     */
    public static float RasterizerDensity(MemorySegment struct) {
        return struct.get(RasterizerDensity$LAYOUT, RasterizerDensity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float RasterizerDensity
     * }
     */
    public static void RasterizerDensity(MemorySegment struct, float fieldValue) {
        struct.set(RasterizerDensity$LAYOUT, RasterizerDensity$OFFSET, fieldValue);
    }

    private static final OfShort EllipsisChar$LAYOUT = (OfShort)$LAYOUT.select(groupElement("EllipsisChar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImWchar EllipsisChar
     * }
     */
    public static final OfShort EllipsisChar$layout() {
        return EllipsisChar$LAYOUT;
    }

    private static final long EllipsisChar$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImWchar EllipsisChar
     * }
     */
    public static final long EllipsisChar$offset() {
        return EllipsisChar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImWchar EllipsisChar
     * }
     */
    public static short EllipsisChar(MemorySegment struct) {
        return struct.get(EllipsisChar$LAYOUT, EllipsisChar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImWchar EllipsisChar
     * }
     */
    public static void EllipsisChar(MemorySegment struct, short fieldValue) {
        struct.set(EllipsisChar$LAYOUT, EllipsisChar$OFFSET, fieldValue);
    }

    private static final SequenceLayout Name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char Name[40]
     * }
     */
    public static final SequenceLayout Name$layout() {
        return Name$LAYOUT;
    }

    private static final long Name$OFFSET = 90;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char Name[40]
     * }
     */
    public static final long Name$offset() {
        return Name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char Name[40]
     * }
     */
    public static MemorySegment Name(MemorySegment struct) {
        return struct.asSlice(Name$OFFSET, Name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char Name[40]
     * }
     */
    public static void Name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Name$OFFSET, Name$LAYOUT.byteSize());
    }

    private static long[] Name$DIMS = { 40 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char Name[40]
     * }
     */
    public static long[] Name$dimensions() {
        return Name$DIMS;
    }
    private static final VarHandle Name$ELEM_HANDLE = Name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char Name[40]
     * }
     */
    public static byte Name(MemorySegment struct, long index0) {
        return (byte)Name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char Name[40]
     * }
     */
    public static void Name(MemorySegment struct, long index0, byte fieldValue) {
        Name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout DstFont$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DstFont"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImFont *DstFont
     * }
     */
    public static final AddressLayout DstFont$layout() {
        return DstFont$LAYOUT;
    }

    private static final long DstFont$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImFont *DstFont
     * }
     */
    public static final long DstFont$offset() {
        return DstFont$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImFont *DstFont
     * }
     */
    public static MemorySegment DstFont(MemorySegment struct) {
        return struct.get(DstFont$LAYOUT, DstFont$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImFont *DstFont
     * }
     */
    public static void DstFont(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DstFont$LAYOUT, DstFont$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

