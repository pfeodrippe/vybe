// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiDebugAllocInfo {
 *     int TotalAllocCount;
 *     int TotalFreeCount;
 *     ImS16 LastEntriesIdx;
 *     ImGuiDebugAllocEntry LastEntriesBuf[6];
 * }
 * }
 */
public class ImGuiDebugAllocInfo {

    ImGuiDebugAllocInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("TotalAllocCount"),
        imgui.C_INT.withName("TotalFreeCount"),
        imgui.C_SHORT.withName("LastEntriesIdx"),
        MemoryLayout.paddingLayout(2),
        MemoryLayout.sequenceLayout(6, ImGuiDebugAllocEntry.layout()).withName("LastEntriesBuf")
    ).withName("ImGuiDebugAllocInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt TotalAllocCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TotalAllocCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int TotalAllocCount
     * }
     */
    public static final OfInt TotalAllocCount$layout() {
        return TotalAllocCount$LAYOUT;
    }

    private static final long TotalAllocCount$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int TotalAllocCount
     * }
     */
    public static final long TotalAllocCount$offset() {
        return TotalAllocCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int TotalAllocCount
     * }
     */
    public static int TotalAllocCount(MemorySegment struct) {
        return struct.get(TotalAllocCount$LAYOUT, TotalAllocCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int TotalAllocCount
     * }
     */
    public static void TotalAllocCount(MemorySegment struct, int fieldValue) {
        struct.set(TotalAllocCount$LAYOUT, TotalAllocCount$OFFSET, fieldValue);
    }

    private static final OfInt TotalFreeCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TotalFreeCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int TotalFreeCount
     * }
     */
    public static final OfInt TotalFreeCount$layout() {
        return TotalFreeCount$LAYOUT;
    }

    private static final long TotalFreeCount$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int TotalFreeCount
     * }
     */
    public static final long TotalFreeCount$offset() {
        return TotalFreeCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int TotalFreeCount
     * }
     */
    public static int TotalFreeCount(MemorySegment struct) {
        return struct.get(TotalFreeCount$LAYOUT, TotalFreeCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int TotalFreeCount
     * }
     */
    public static void TotalFreeCount(MemorySegment struct, int fieldValue) {
        struct.set(TotalFreeCount$LAYOUT, TotalFreeCount$OFFSET, fieldValue);
    }

    private static final OfShort LastEntriesIdx$LAYOUT = (OfShort)$LAYOUT.select(groupElement("LastEntriesIdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS16 LastEntriesIdx
     * }
     */
    public static final OfShort LastEntriesIdx$layout() {
        return LastEntriesIdx$LAYOUT;
    }

    private static final long LastEntriesIdx$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS16 LastEntriesIdx
     * }
     */
    public static final long LastEntriesIdx$offset() {
        return LastEntriesIdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS16 LastEntriesIdx
     * }
     */
    public static short LastEntriesIdx(MemorySegment struct) {
        return struct.get(LastEntriesIdx$LAYOUT, LastEntriesIdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS16 LastEntriesIdx
     * }
     */
    public static void LastEntriesIdx(MemorySegment struct, short fieldValue) {
        struct.set(LastEntriesIdx$LAYOUT, LastEntriesIdx$OFFSET, fieldValue);
    }

    private static final SequenceLayout LastEntriesBuf$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("LastEntriesBuf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocEntry LastEntriesBuf[6]
     * }
     */
    public static final SequenceLayout LastEntriesBuf$layout() {
        return LastEntriesBuf$LAYOUT;
    }

    private static final long LastEntriesBuf$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocEntry LastEntriesBuf[6]
     * }
     */
    public static final long LastEntriesBuf$offset() {
        return LastEntriesBuf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocEntry LastEntriesBuf[6]
     * }
     */
    public static MemorySegment LastEntriesBuf(MemorySegment struct) {
        return struct.asSlice(LastEntriesBuf$OFFSET, LastEntriesBuf$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocEntry LastEntriesBuf[6]
     * }
     */
    public static void LastEntriesBuf(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LastEntriesBuf$OFFSET, LastEntriesBuf$LAYOUT.byteSize());
    }

    private static long[] LastEntriesBuf$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImGuiDebugAllocEntry LastEntriesBuf[6]
     * }
     */
    public static long[] LastEntriesBuf$dimensions() {
        return LastEntriesBuf$DIMS;
    }
    private static final MethodHandle LastEntriesBuf$ELEM_HANDLE = LastEntriesBuf$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocEntry LastEntriesBuf[6]
     * }
     */
    public static MemorySegment LastEntriesBuf(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)LastEntriesBuf$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImGuiDebugAllocEntry LastEntriesBuf[6]
     * }
     */
    public static void LastEntriesBuf(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, LastEntriesBuf(struct, index0), 0L, ImGuiDebugAllocEntry.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

