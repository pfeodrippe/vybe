// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct STB_TexteditState {
 *     int cursor;
 *     int select_start;
 *     int select_end;
 *     unsigned char insert_mode;
 *     int row_count_per_page;
 *     unsigned char cursor_at_end_of_line;
 *     unsigned char initialized;
 *     unsigned char has_preferred_x;
 *     unsigned char single_line;
 *     unsigned char padding1;
 *     unsigned char padding2;
 *     unsigned char padding3;
 *     float preferred_x;
 *     StbUndoState undostate;
 * }
 * }
 */
public class STB_TexteditState {

    STB_TexteditState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("cursor"),
        imgui.C_INT.withName("select_start"),
        imgui.C_INT.withName("select_end"),
        imgui.C_CHAR.withName("insert_mode"),
        MemoryLayout.paddingLayout(3),
        imgui.C_INT.withName("row_count_per_page"),
        imgui.C_CHAR.withName("cursor_at_end_of_line"),
        imgui.C_CHAR.withName("initialized"),
        imgui.C_CHAR.withName("has_preferred_x"),
        imgui.C_CHAR.withName("single_line"),
        imgui.C_CHAR.withName("padding1"),
        imgui.C_CHAR.withName("padding2"),
        imgui.C_CHAR.withName("padding3"),
        MemoryLayout.paddingLayout(1),
        imgui.C_FLOAT.withName("preferred_x"),
        StbUndoState.layout().withName("undostate")
    ).withName("STB_TexteditState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt cursor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cursor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int cursor
     * }
     */
    public static final OfInt cursor$layout() {
        return cursor$LAYOUT;
    }

    private static final long cursor$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int cursor
     * }
     */
    public static final long cursor$offset() {
        return cursor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int cursor
     * }
     */
    public static int cursor(MemorySegment struct) {
        return struct.get(cursor$LAYOUT, cursor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int cursor
     * }
     */
    public static void cursor(MemorySegment struct, int fieldValue) {
        struct.set(cursor$LAYOUT, cursor$OFFSET, fieldValue);
    }

    private static final OfInt select_start$LAYOUT = (OfInt)$LAYOUT.select(groupElement("select_start"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int select_start
     * }
     */
    public static final OfInt select_start$layout() {
        return select_start$LAYOUT;
    }

    private static final long select_start$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int select_start
     * }
     */
    public static final long select_start$offset() {
        return select_start$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int select_start
     * }
     */
    public static int select_start(MemorySegment struct) {
        return struct.get(select_start$LAYOUT, select_start$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int select_start
     * }
     */
    public static void select_start(MemorySegment struct, int fieldValue) {
        struct.set(select_start$LAYOUT, select_start$OFFSET, fieldValue);
    }

    private static final OfInt select_end$LAYOUT = (OfInt)$LAYOUT.select(groupElement("select_end"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int select_end
     * }
     */
    public static final OfInt select_end$layout() {
        return select_end$LAYOUT;
    }

    private static final long select_end$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int select_end
     * }
     */
    public static final long select_end$offset() {
        return select_end$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int select_end
     * }
     */
    public static int select_end(MemorySegment struct) {
        return struct.get(select_end$LAYOUT, select_end$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int select_end
     * }
     */
    public static void select_end(MemorySegment struct, int fieldValue) {
        struct.set(select_end$LAYOUT, select_end$OFFSET, fieldValue);
    }

    private static final OfByte insert_mode$LAYOUT = (OfByte)$LAYOUT.select(groupElement("insert_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char insert_mode
     * }
     */
    public static final OfByte insert_mode$layout() {
        return insert_mode$LAYOUT;
    }

    private static final long insert_mode$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char insert_mode
     * }
     */
    public static final long insert_mode$offset() {
        return insert_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char insert_mode
     * }
     */
    public static byte insert_mode(MemorySegment struct) {
        return struct.get(insert_mode$LAYOUT, insert_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char insert_mode
     * }
     */
    public static void insert_mode(MemorySegment struct, byte fieldValue) {
        struct.set(insert_mode$LAYOUT, insert_mode$OFFSET, fieldValue);
    }

    private static final OfInt row_count_per_page$LAYOUT = (OfInt)$LAYOUT.select(groupElement("row_count_per_page"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int row_count_per_page
     * }
     */
    public static final OfInt row_count_per_page$layout() {
        return row_count_per_page$LAYOUT;
    }

    private static final long row_count_per_page$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int row_count_per_page
     * }
     */
    public static final long row_count_per_page$offset() {
        return row_count_per_page$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int row_count_per_page
     * }
     */
    public static int row_count_per_page(MemorySegment struct) {
        return struct.get(row_count_per_page$LAYOUT, row_count_per_page$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int row_count_per_page
     * }
     */
    public static void row_count_per_page(MemorySegment struct, int fieldValue) {
        struct.set(row_count_per_page$LAYOUT, row_count_per_page$OFFSET, fieldValue);
    }

    private static final OfByte cursor_at_end_of_line$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cursor_at_end_of_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char cursor_at_end_of_line
     * }
     */
    public static final OfByte cursor_at_end_of_line$layout() {
        return cursor_at_end_of_line$LAYOUT;
    }

    private static final long cursor_at_end_of_line$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char cursor_at_end_of_line
     * }
     */
    public static final long cursor_at_end_of_line$offset() {
        return cursor_at_end_of_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char cursor_at_end_of_line
     * }
     */
    public static byte cursor_at_end_of_line(MemorySegment struct) {
        return struct.get(cursor_at_end_of_line$LAYOUT, cursor_at_end_of_line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char cursor_at_end_of_line
     * }
     */
    public static void cursor_at_end_of_line(MemorySegment struct, byte fieldValue) {
        struct.set(cursor_at_end_of_line$LAYOUT, cursor_at_end_of_line$OFFSET, fieldValue);
    }

    private static final OfByte initialized$LAYOUT = (OfByte)$LAYOUT.select(groupElement("initialized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char initialized
     * }
     */
    public static final OfByte initialized$layout() {
        return initialized$LAYOUT;
    }

    private static final long initialized$OFFSET = 21;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char initialized
     * }
     */
    public static final long initialized$offset() {
        return initialized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char initialized
     * }
     */
    public static byte initialized(MemorySegment struct) {
        return struct.get(initialized$LAYOUT, initialized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char initialized
     * }
     */
    public static void initialized(MemorySegment struct, byte fieldValue) {
        struct.set(initialized$LAYOUT, initialized$OFFSET, fieldValue);
    }

    private static final OfByte has_preferred_x$LAYOUT = (OfByte)$LAYOUT.select(groupElement("has_preferred_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char has_preferred_x
     * }
     */
    public static final OfByte has_preferred_x$layout() {
        return has_preferred_x$LAYOUT;
    }

    private static final long has_preferred_x$OFFSET = 22;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char has_preferred_x
     * }
     */
    public static final long has_preferred_x$offset() {
        return has_preferred_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char has_preferred_x
     * }
     */
    public static byte has_preferred_x(MemorySegment struct) {
        return struct.get(has_preferred_x$LAYOUT, has_preferred_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char has_preferred_x
     * }
     */
    public static void has_preferred_x(MemorySegment struct, byte fieldValue) {
        struct.set(has_preferred_x$LAYOUT, has_preferred_x$OFFSET, fieldValue);
    }

    private static final OfByte single_line$LAYOUT = (OfByte)$LAYOUT.select(groupElement("single_line"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char single_line
     * }
     */
    public static final OfByte single_line$layout() {
        return single_line$LAYOUT;
    }

    private static final long single_line$OFFSET = 23;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char single_line
     * }
     */
    public static final long single_line$offset() {
        return single_line$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char single_line
     * }
     */
    public static byte single_line(MemorySegment struct) {
        return struct.get(single_line$LAYOUT, single_line$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char single_line
     * }
     */
    public static void single_line(MemorySegment struct, byte fieldValue) {
        struct.set(single_line$LAYOUT, single_line$OFFSET, fieldValue);
    }

    private static final OfByte padding1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("padding1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char padding1
     * }
     */
    public static final OfByte padding1$layout() {
        return padding1$LAYOUT;
    }

    private static final long padding1$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char padding1
     * }
     */
    public static final long padding1$offset() {
        return padding1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char padding1
     * }
     */
    public static byte padding1(MemorySegment struct) {
        return struct.get(padding1$LAYOUT, padding1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char padding1
     * }
     */
    public static void padding1(MemorySegment struct, byte fieldValue) {
        struct.set(padding1$LAYOUT, padding1$OFFSET, fieldValue);
    }

    private static final OfByte padding2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("padding2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char padding2
     * }
     */
    public static final OfByte padding2$layout() {
        return padding2$LAYOUT;
    }

    private static final long padding2$OFFSET = 25;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char padding2
     * }
     */
    public static final long padding2$offset() {
        return padding2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char padding2
     * }
     */
    public static byte padding2(MemorySegment struct) {
        return struct.get(padding2$LAYOUT, padding2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char padding2
     * }
     */
    public static void padding2(MemorySegment struct, byte fieldValue) {
        struct.set(padding2$LAYOUT, padding2$OFFSET, fieldValue);
    }

    private static final OfByte padding3$LAYOUT = (OfByte)$LAYOUT.select(groupElement("padding3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char padding3
     * }
     */
    public static final OfByte padding3$layout() {
        return padding3$LAYOUT;
    }

    private static final long padding3$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char padding3
     * }
     */
    public static final long padding3$offset() {
        return padding3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char padding3
     * }
     */
    public static byte padding3(MemorySegment struct) {
        return struct.get(padding3$LAYOUT, padding3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char padding3
     * }
     */
    public static void padding3(MemorySegment struct, byte fieldValue) {
        struct.set(padding3$LAYOUT, padding3$OFFSET, fieldValue);
    }

    private static final OfFloat preferred_x$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("preferred_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float preferred_x
     * }
     */
    public static final OfFloat preferred_x$layout() {
        return preferred_x$LAYOUT;
    }

    private static final long preferred_x$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float preferred_x
     * }
     */
    public static final long preferred_x$offset() {
        return preferred_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float preferred_x
     * }
     */
    public static float preferred_x(MemorySegment struct) {
        return struct.get(preferred_x$LAYOUT, preferred_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float preferred_x
     * }
     */
    public static void preferred_x(MemorySegment struct, float fieldValue) {
        struct.set(preferred_x$LAYOUT, preferred_x$OFFSET, fieldValue);
    }

    private static final GroupLayout undostate$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("undostate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StbUndoState undostate
     * }
     */
    public static final GroupLayout undostate$layout() {
        return undostate$LAYOUT;
    }

    private static final long undostate$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StbUndoState undostate
     * }
     */
    public static final long undostate$offset() {
        return undostate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StbUndoState undostate
     * }
     */
    public static MemorySegment undostate(MemorySegment struct) {
        return struct.asSlice(undostate$OFFSET, undostate$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StbUndoState undostate
     * }
     */
    public static void undostate(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, undostate$OFFSET, undostate$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

