// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiKeyRoutingTable {
 *     ImGuiKeyRoutingIndex Index[154];
 *     ImVector_ImGuiKeyRoutingData Entries;
 *     ImVector_ImGuiKeyRoutingData EntriesNext;
 * }
 * }
 */
public class ImGuiKeyRoutingTable {

    ImGuiKeyRoutingTable() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(154, imgui.C_SHORT).withName("Index"),
        MemoryLayout.paddingLayout(4),
        ImVector_ImGuiKeyRoutingData.layout().withName("Entries"),
        ImVector_ImGuiKeyRoutingData.layout().withName("EntriesNext")
    ).withName("ImGuiKeyRoutingTable");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout Index$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingIndex Index[154]
     * }
     */
    public static final SequenceLayout Index$layout() {
        return Index$LAYOUT;
    }

    private static final long Index$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingIndex Index[154]
     * }
     */
    public static final long Index$offset() {
        return Index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingIndex Index[154]
     * }
     */
    public static MemorySegment Index(MemorySegment struct) {
        return struct.asSlice(Index$OFFSET, Index$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingIndex Index[154]
     * }
     */
    public static void Index(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Index$OFFSET, Index$LAYOUT.byteSize());
    }

    private static long[] Index$DIMS = { 154 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingIndex Index[154]
     * }
     */
    public static long[] Index$dimensions() {
        return Index$DIMS;
    }
    private static final VarHandle Index$ELEM_HANDLE = Index$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingIndex Index[154]
     * }
     */
    public static short Index(MemorySegment struct, long index0) {
        return (short)Index$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImGuiKeyRoutingIndex Index[154]
     * }
     */
    public static void Index(MemorySegment struct, long index0, short fieldValue) {
        Index$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout Entries$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Entries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiKeyRoutingData Entries
     * }
     */
    public static final GroupLayout Entries$layout() {
        return Entries$LAYOUT;
    }

    private static final long Entries$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiKeyRoutingData Entries
     * }
     */
    public static final long Entries$offset() {
        return Entries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiKeyRoutingData Entries
     * }
     */
    public static MemorySegment Entries(MemorySegment struct) {
        return struct.asSlice(Entries$OFFSET, Entries$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiKeyRoutingData Entries
     * }
     */
    public static void Entries(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Entries$OFFSET, Entries$LAYOUT.byteSize());
    }

    private static final GroupLayout EntriesNext$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("EntriesNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiKeyRoutingData EntriesNext
     * }
     */
    public static final GroupLayout EntriesNext$layout() {
        return EntriesNext$LAYOUT;
    }

    private static final long EntriesNext$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiKeyRoutingData EntriesNext
     * }
     */
    public static final long EntriesNext$offset() {
        return EntriesNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiKeyRoutingData EntriesNext
     * }
     */
    public static MemorySegment EntriesNext(MemorySegment struct) {
        return struct.asSlice(EntriesNext$OFFSET, EntriesNext$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiKeyRoutingData EntriesNext
     * }
     */
    public static void EntriesNext(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, EntriesNext$OFFSET, EntriesNext$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

