// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiContextHook {
 *     ImGuiID HookId;
 *     ImGuiContextHookType Type;
 *     ImGuiID Owner;
 *     ImGuiContextHookCallback Callback;
 *     void *UserData;
 * }
 * }
 */
public class ImGuiContextHook {

    ImGuiContextHook() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("HookId"),
        imgui.C_INT.withName("Type"),
        imgui.C_INT.withName("Owner"),
        MemoryLayout.paddingLayout(4),
        imgui.C_POINTER.withName("Callback"),
        imgui.C_POINTER.withName("UserData")
    ).withName("ImGuiContextHook");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt HookId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HookId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID HookId
     * }
     */
    public static final OfInt HookId$layout() {
        return HookId$LAYOUT;
    }

    private static final long HookId$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID HookId
     * }
     */
    public static final long HookId$offset() {
        return HookId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID HookId
     * }
     */
    public static int HookId(MemorySegment struct) {
        return struct.get(HookId$LAYOUT, HookId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID HookId
     * }
     */
    public static void HookId(MemorySegment struct, int fieldValue) {
        struct.set(HookId$LAYOUT, HookId$OFFSET, fieldValue);
    }

    private static final OfInt Type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiContextHookType Type
     * }
     */
    public static final OfInt Type$layout() {
        return Type$LAYOUT;
    }

    private static final long Type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiContextHookType Type
     * }
     */
    public static final long Type$offset() {
        return Type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiContextHookType Type
     * }
     */
    public static int Type(MemorySegment struct) {
        return struct.get(Type$LAYOUT, Type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiContextHookType Type
     * }
     */
    public static void Type(MemorySegment struct, int fieldValue) {
        struct.set(Type$LAYOUT, Type$OFFSET, fieldValue);
    }

    private static final OfInt Owner$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Owner"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID Owner
     * }
     */
    public static final OfInt Owner$layout() {
        return Owner$LAYOUT;
    }

    private static final long Owner$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID Owner
     * }
     */
    public static final long Owner$offset() {
        return Owner$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID Owner
     * }
     */
    public static int Owner(MemorySegment struct) {
        return struct.get(Owner$LAYOUT, Owner$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID Owner
     * }
     */
    public static void Owner(MemorySegment struct, int fieldValue) {
        struct.set(Owner$LAYOUT, Owner$OFFSET, fieldValue);
    }

    private static final AddressLayout Callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiContextHookCallback Callback
     * }
     */
    public static final AddressLayout Callback$layout() {
        return Callback$LAYOUT;
    }

    private static final long Callback$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiContextHookCallback Callback
     * }
     */
    public static final long Callback$offset() {
        return Callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiContextHookCallback Callback
     * }
     */
    public static MemorySegment Callback(MemorySegment struct) {
        return struct.get(Callback$LAYOUT, Callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiContextHookCallback Callback
     * }
     */
    public static void Callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Callback$LAYOUT, Callback$OFFSET, fieldValue);
    }

    private static final AddressLayout UserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static final AddressLayout UserData$layout() {
        return UserData$LAYOUT;
    }

    private static final long UserData$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static final long UserData$offset() {
        return UserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static MemorySegment UserData(MemorySegment struct) {
        return struct.get(UserData$LAYOUT, UserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static void UserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(UserData$LAYOUT, UserData$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

