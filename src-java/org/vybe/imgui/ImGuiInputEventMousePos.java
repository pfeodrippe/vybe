// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiInputEventMousePos {
 *     float PosX;
 *     float PosY;
 *     ImGuiMouseSource MouseSource;
 * }
 * }
 */
public class ImGuiInputEventMousePos {

    ImGuiInputEventMousePos() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_FLOAT.withName("PosX"),
        imgui.C_FLOAT.withName("PosY"),
        imgui.C_INT.withName("MouseSource")
    ).withName("ImGuiInputEventMousePos");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat PosX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("PosX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float PosX
     * }
     */
    public static final OfFloat PosX$layout() {
        return PosX$LAYOUT;
    }

    private static final long PosX$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float PosX
     * }
     */
    public static final long PosX$offset() {
        return PosX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float PosX
     * }
     */
    public static float PosX(MemorySegment struct) {
        return struct.get(PosX$LAYOUT, PosX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float PosX
     * }
     */
    public static void PosX(MemorySegment struct, float fieldValue) {
        struct.set(PosX$LAYOUT, PosX$OFFSET, fieldValue);
    }

    private static final OfFloat PosY$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("PosY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float PosY
     * }
     */
    public static final OfFloat PosY$layout() {
        return PosY$LAYOUT;
    }

    private static final long PosY$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float PosY
     * }
     */
    public static final long PosY$offset() {
        return PosY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float PosY
     * }
     */
    public static float PosY(MemorySegment struct) {
        return struct.get(PosY$LAYOUT, PosY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float PosY
     * }
     */
    public static void PosY(MemorySegment struct, float fieldValue) {
        struct.set(PosY$LAYOUT, PosY$OFFSET, fieldValue);
    }

    private static final OfInt MouseSource$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MouseSource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiMouseSource MouseSource
     * }
     */
    public static final OfInt MouseSource$layout() {
        return MouseSource$LAYOUT;
    }

    private static final long MouseSource$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiMouseSource MouseSource
     * }
     */
    public static final long MouseSource$offset() {
        return MouseSource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiMouseSource MouseSource
     * }
     */
    public static int MouseSource(MemorySegment struct) {
        return struct.get(MouseSource$LAYOUT, MouseSource$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiMouseSource MouseSource
     * }
     */
    public static void MouseSource(MemorySegment struct, int fieldValue) {
        struct.set(MouseSource$LAYOUT, MouseSource$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

