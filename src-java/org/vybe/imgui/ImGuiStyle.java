// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiStyle {
 *     float Alpha;
 *     float DisabledAlpha;
 *     ImVec2 WindowPadding;
 *     float WindowRounding;
 *     float WindowBorderSize;
 *     ImVec2 WindowMinSize;
 *     ImVec2 WindowTitleAlign;
 *     ImGuiDir WindowMenuButtonPosition;
 *     float ChildRounding;
 *     float ChildBorderSize;
 *     float PopupRounding;
 *     float PopupBorderSize;
 *     ImVec2 FramePadding;
 *     float FrameRounding;
 *     float FrameBorderSize;
 *     ImVec2 ItemSpacing;
 *     ImVec2 ItemInnerSpacing;
 *     ImVec2 CellPadding;
 *     ImVec2 TouchExtraPadding;
 *     float IndentSpacing;
 *     float ColumnsMinSpacing;
 *     float ScrollbarSize;
 *     float ScrollbarRounding;
 *     float GrabMinSize;
 *     float GrabRounding;
 *     float LogSliderDeadzone;
 *     float TabRounding;
 *     float TabBorderSize;
 *     float TabMinWidthForCloseButton;
 *     float TabBarBorderSize;
 *     float TabBarOverlineSize;
 *     float TableAngledHeadersAngle;
 *     ImVec2 TableAngledHeadersTextAlign;
 *     ImGuiDir ColorButtonPosition;
 *     ImVec2 ButtonTextAlign;
 *     ImVec2 SelectableTextAlign;
 *     float SeparatorTextBorderSize;
 *     ImVec2 SeparatorTextAlign;
 *     ImVec2 SeparatorTextPadding;
 *     ImVec2 DisplayWindowPadding;
 *     ImVec2 DisplaySafeAreaPadding;
 *     float DockingSeparatorSize;
 *     float MouseCursorScale;
 *     bool AntiAliasedLines;
 *     bool AntiAliasedLinesUseTex;
 *     bool AntiAliasedFill;
 *     float CurveTessellationTol;
 *     float CircleTessellationMaxError;
 *     ImVec4 Colors[58];
 *     float HoverStationaryDelay;
 *     float HoverDelayShort;
 *     float HoverDelayNormal;
 *     ImGuiHoveredFlags HoverFlagsForTooltipMouse;
 *     ImGuiHoveredFlags HoverFlagsForTooltipNav;
 * }
 * }
 */
public class ImGuiStyle {

    ImGuiStyle() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_FLOAT.withName("Alpha"),
        imgui.C_FLOAT.withName("DisabledAlpha"),
        ImVec2.layout().withName("WindowPadding"),
        imgui.C_FLOAT.withName("WindowRounding"),
        imgui.C_FLOAT.withName("WindowBorderSize"),
        ImVec2.layout().withName("WindowMinSize"),
        ImVec2.layout().withName("WindowTitleAlign"),
        imgui.C_INT.withName("WindowMenuButtonPosition"),
        imgui.C_FLOAT.withName("ChildRounding"),
        imgui.C_FLOAT.withName("ChildBorderSize"),
        imgui.C_FLOAT.withName("PopupRounding"),
        imgui.C_FLOAT.withName("PopupBorderSize"),
        ImVec2.layout().withName("FramePadding"),
        imgui.C_FLOAT.withName("FrameRounding"),
        imgui.C_FLOAT.withName("FrameBorderSize"),
        ImVec2.layout().withName("ItemSpacing"),
        ImVec2.layout().withName("ItemInnerSpacing"),
        ImVec2.layout().withName("CellPadding"),
        ImVec2.layout().withName("TouchExtraPadding"),
        imgui.C_FLOAT.withName("IndentSpacing"),
        imgui.C_FLOAT.withName("ColumnsMinSpacing"),
        imgui.C_FLOAT.withName("ScrollbarSize"),
        imgui.C_FLOAT.withName("ScrollbarRounding"),
        imgui.C_FLOAT.withName("GrabMinSize"),
        imgui.C_FLOAT.withName("GrabRounding"),
        imgui.C_FLOAT.withName("LogSliderDeadzone"),
        imgui.C_FLOAT.withName("TabRounding"),
        imgui.C_FLOAT.withName("TabBorderSize"),
        imgui.C_FLOAT.withName("TabMinWidthForCloseButton"),
        imgui.C_FLOAT.withName("TabBarBorderSize"),
        imgui.C_FLOAT.withName("TabBarOverlineSize"),
        imgui.C_FLOAT.withName("TableAngledHeadersAngle"),
        ImVec2.layout().withName("TableAngledHeadersTextAlign"),
        imgui.C_INT.withName("ColorButtonPosition"),
        ImVec2.layout().withName("ButtonTextAlign"),
        ImVec2.layout().withName("SelectableTextAlign"),
        imgui.C_FLOAT.withName("SeparatorTextBorderSize"),
        ImVec2.layout().withName("SeparatorTextAlign"),
        ImVec2.layout().withName("SeparatorTextPadding"),
        ImVec2.layout().withName("DisplayWindowPadding"),
        ImVec2.layout().withName("DisplaySafeAreaPadding"),
        imgui.C_FLOAT.withName("DockingSeparatorSize"),
        imgui.C_FLOAT.withName("MouseCursorScale"),
        imgui.C_BOOL.withName("AntiAliasedLines"),
        imgui.C_BOOL.withName("AntiAliasedLinesUseTex"),
        imgui.C_BOOL.withName("AntiAliasedFill"),
        MemoryLayout.paddingLayout(1),
        imgui.C_FLOAT.withName("CurveTessellationTol"),
        imgui.C_FLOAT.withName("CircleTessellationMaxError"),
        MemoryLayout.sequenceLayout(58, ImVec4.layout()).withName("Colors"),
        imgui.C_FLOAT.withName("HoverStationaryDelay"),
        imgui.C_FLOAT.withName("HoverDelayShort"),
        imgui.C_FLOAT.withName("HoverDelayNormal"),
        imgui.C_INT.withName("HoverFlagsForTooltipMouse"),
        imgui.C_INT.withName("HoverFlagsForTooltipNav")
    ).withName("ImGuiStyle");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat Alpha$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("Alpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float Alpha
     * }
     */
    public static final OfFloat Alpha$layout() {
        return Alpha$LAYOUT;
    }

    private static final long Alpha$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float Alpha
     * }
     */
    public static final long Alpha$offset() {
        return Alpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float Alpha
     * }
     */
    public static float Alpha(MemorySegment struct) {
        return struct.get(Alpha$LAYOUT, Alpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float Alpha
     * }
     */
    public static void Alpha(MemorySegment struct, float fieldValue) {
        struct.set(Alpha$LAYOUT, Alpha$OFFSET, fieldValue);
    }

    private static final OfFloat DisabledAlpha$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DisabledAlpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DisabledAlpha
     * }
     */
    public static final OfFloat DisabledAlpha$layout() {
        return DisabledAlpha$LAYOUT;
    }

    private static final long DisabledAlpha$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DisabledAlpha
     * }
     */
    public static final long DisabledAlpha$offset() {
        return DisabledAlpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DisabledAlpha
     * }
     */
    public static float DisabledAlpha(MemorySegment struct) {
        return struct.get(DisabledAlpha$LAYOUT, DisabledAlpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DisabledAlpha
     * }
     */
    public static void DisabledAlpha(MemorySegment struct, float fieldValue) {
        struct.set(DisabledAlpha$LAYOUT, DisabledAlpha$OFFSET, fieldValue);
    }

    private static final GroupLayout WindowPadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WindowPadding
     * }
     */
    public static final GroupLayout WindowPadding$layout() {
        return WindowPadding$LAYOUT;
    }

    private static final long WindowPadding$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WindowPadding
     * }
     */
    public static final long WindowPadding$offset() {
        return WindowPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WindowPadding
     * }
     */
    public static MemorySegment WindowPadding(MemorySegment struct) {
        return struct.asSlice(WindowPadding$OFFSET, WindowPadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WindowPadding
     * }
     */
    public static void WindowPadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowPadding$OFFSET, WindowPadding$LAYOUT.byteSize());
    }

    private static final OfFloat WindowRounding$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WindowRounding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WindowRounding
     * }
     */
    public static final OfFloat WindowRounding$layout() {
        return WindowRounding$LAYOUT;
    }

    private static final long WindowRounding$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WindowRounding
     * }
     */
    public static final long WindowRounding$offset() {
        return WindowRounding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WindowRounding
     * }
     */
    public static float WindowRounding(MemorySegment struct) {
        return struct.get(WindowRounding$LAYOUT, WindowRounding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WindowRounding
     * }
     */
    public static void WindowRounding(MemorySegment struct, float fieldValue) {
        struct.set(WindowRounding$LAYOUT, WindowRounding$OFFSET, fieldValue);
    }

    private static final OfFloat WindowBorderSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WindowBorderSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WindowBorderSize
     * }
     */
    public static final OfFloat WindowBorderSize$layout() {
        return WindowBorderSize$LAYOUT;
    }

    private static final long WindowBorderSize$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WindowBorderSize
     * }
     */
    public static final long WindowBorderSize$offset() {
        return WindowBorderSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WindowBorderSize
     * }
     */
    public static float WindowBorderSize(MemorySegment struct) {
        return struct.get(WindowBorderSize$LAYOUT, WindowBorderSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WindowBorderSize
     * }
     */
    public static void WindowBorderSize(MemorySegment struct, float fieldValue) {
        struct.set(WindowBorderSize$LAYOUT, WindowBorderSize$OFFSET, fieldValue);
    }

    private static final GroupLayout WindowMinSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowMinSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WindowMinSize
     * }
     */
    public static final GroupLayout WindowMinSize$layout() {
        return WindowMinSize$LAYOUT;
    }

    private static final long WindowMinSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WindowMinSize
     * }
     */
    public static final long WindowMinSize$offset() {
        return WindowMinSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WindowMinSize
     * }
     */
    public static MemorySegment WindowMinSize(MemorySegment struct) {
        return struct.asSlice(WindowMinSize$OFFSET, WindowMinSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WindowMinSize
     * }
     */
    public static void WindowMinSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowMinSize$OFFSET, WindowMinSize$LAYOUT.byteSize());
    }

    private static final GroupLayout WindowTitleAlign$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowTitleAlign"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WindowTitleAlign
     * }
     */
    public static final GroupLayout WindowTitleAlign$layout() {
        return WindowTitleAlign$LAYOUT;
    }

    private static final long WindowTitleAlign$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WindowTitleAlign
     * }
     */
    public static final long WindowTitleAlign$offset() {
        return WindowTitleAlign$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WindowTitleAlign
     * }
     */
    public static MemorySegment WindowTitleAlign(MemorySegment struct) {
        return struct.asSlice(WindowTitleAlign$OFFSET, WindowTitleAlign$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WindowTitleAlign
     * }
     */
    public static void WindowTitleAlign(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowTitleAlign$OFFSET, WindowTitleAlign$LAYOUT.byteSize());
    }

    private static final OfInt WindowMenuButtonPosition$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WindowMenuButtonPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDir WindowMenuButtonPosition
     * }
     */
    public static final OfInt WindowMenuButtonPosition$layout() {
        return WindowMenuButtonPosition$LAYOUT;
    }

    private static final long WindowMenuButtonPosition$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDir WindowMenuButtonPosition
     * }
     */
    public static final long WindowMenuButtonPosition$offset() {
        return WindowMenuButtonPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDir WindowMenuButtonPosition
     * }
     */
    public static int WindowMenuButtonPosition(MemorySegment struct) {
        return struct.get(WindowMenuButtonPosition$LAYOUT, WindowMenuButtonPosition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDir WindowMenuButtonPosition
     * }
     */
    public static void WindowMenuButtonPosition(MemorySegment struct, int fieldValue) {
        struct.set(WindowMenuButtonPosition$LAYOUT, WindowMenuButtonPosition$OFFSET, fieldValue);
    }

    private static final OfFloat ChildRounding$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ChildRounding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ChildRounding
     * }
     */
    public static final OfFloat ChildRounding$layout() {
        return ChildRounding$LAYOUT;
    }

    private static final long ChildRounding$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ChildRounding
     * }
     */
    public static final long ChildRounding$offset() {
        return ChildRounding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ChildRounding
     * }
     */
    public static float ChildRounding(MemorySegment struct) {
        return struct.get(ChildRounding$LAYOUT, ChildRounding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ChildRounding
     * }
     */
    public static void ChildRounding(MemorySegment struct, float fieldValue) {
        struct.set(ChildRounding$LAYOUT, ChildRounding$OFFSET, fieldValue);
    }

    private static final OfFloat ChildBorderSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ChildBorderSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ChildBorderSize
     * }
     */
    public static final OfFloat ChildBorderSize$layout() {
        return ChildBorderSize$LAYOUT;
    }

    private static final long ChildBorderSize$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ChildBorderSize
     * }
     */
    public static final long ChildBorderSize$offset() {
        return ChildBorderSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ChildBorderSize
     * }
     */
    public static float ChildBorderSize(MemorySegment struct) {
        return struct.get(ChildBorderSize$LAYOUT, ChildBorderSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ChildBorderSize
     * }
     */
    public static void ChildBorderSize(MemorySegment struct, float fieldValue) {
        struct.set(ChildBorderSize$LAYOUT, ChildBorderSize$OFFSET, fieldValue);
    }

    private static final OfFloat PopupRounding$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("PopupRounding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float PopupRounding
     * }
     */
    public static final OfFloat PopupRounding$layout() {
        return PopupRounding$LAYOUT;
    }

    private static final long PopupRounding$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float PopupRounding
     * }
     */
    public static final long PopupRounding$offset() {
        return PopupRounding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float PopupRounding
     * }
     */
    public static float PopupRounding(MemorySegment struct) {
        return struct.get(PopupRounding$LAYOUT, PopupRounding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float PopupRounding
     * }
     */
    public static void PopupRounding(MemorySegment struct, float fieldValue) {
        struct.set(PopupRounding$LAYOUT, PopupRounding$OFFSET, fieldValue);
    }

    private static final OfFloat PopupBorderSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("PopupBorderSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float PopupBorderSize
     * }
     */
    public static final OfFloat PopupBorderSize$layout() {
        return PopupBorderSize$LAYOUT;
    }

    private static final long PopupBorderSize$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float PopupBorderSize
     * }
     */
    public static final long PopupBorderSize$offset() {
        return PopupBorderSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float PopupBorderSize
     * }
     */
    public static float PopupBorderSize(MemorySegment struct) {
        return struct.get(PopupBorderSize$LAYOUT, PopupBorderSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float PopupBorderSize
     * }
     */
    public static void PopupBorderSize(MemorySegment struct, float fieldValue) {
        struct.set(PopupBorderSize$LAYOUT, PopupBorderSize$OFFSET, fieldValue);
    }

    private static final GroupLayout FramePadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("FramePadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 FramePadding
     * }
     */
    public static final GroupLayout FramePadding$layout() {
        return FramePadding$LAYOUT;
    }

    private static final long FramePadding$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 FramePadding
     * }
     */
    public static final long FramePadding$offset() {
        return FramePadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 FramePadding
     * }
     */
    public static MemorySegment FramePadding(MemorySegment struct) {
        return struct.asSlice(FramePadding$OFFSET, FramePadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 FramePadding
     * }
     */
    public static void FramePadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FramePadding$OFFSET, FramePadding$LAYOUT.byteSize());
    }

    private static final OfFloat FrameRounding$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FrameRounding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FrameRounding
     * }
     */
    public static final OfFloat FrameRounding$layout() {
        return FrameRounding$LAYOUT;
    }

    private static final long FrameRounding$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FrameRounding
     * }
     */
    public static final long FrameRounding$offset() {
        return FrameRounding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FrameRounding
     * }
     */
    public static float FrameRounding(MemorySegment struct) {
        return struct.get(FrameRounding$LAYOUT, FrameRounding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FrameRounding
     * }
     */
    public static void FrameRounding(MemorySegment struct, float fieldValue) {
        struct.set(FrameRounding$LAYOUT, FrameRounding$OFFSET, fieldValue);
    }

    private static final OfFloat FrameBorderSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FrameBorderSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FrameBorderSize
     * }
     */
    public static final OfFloat FrameBorderSize$layout() {
        return FrameBorderSize$LAYOUT;
    }

    private static final long FrameBorderSize$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FrameBorderSize
     * }
     */
    public static final long FrameBorderSize$offset() {
        return FrameBorderSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FrameBorderSize
     * }
     */
    public static float FrameBorderSize(MemorySegment struct) {
        return struct.get(FrameBorderSize$LAYOUT, FrameBorderSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FrameBorderSize
     * }
     */
    public static void FrameBorderSize(MemorySegment struct, float fieldValue) {
        struct.set(FrameBorderSize$LAYOUT, FrameBorderSize$OFFSET, fieldValue);
    }

    private static final GroupLayout ItemSpacing$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ItemSpacing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ItemSpacing
     * }
     */
    public static final GroupLayout ItemSpacing$layout() {
        return ItemSpacing$LAYOUT;
    }

    private static final long ItemSpacing$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ItemSpacing
     * }
     */
    public static final long ItemSpacing$offset() {
        return ItemSpacing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ItemSpacing
     * }
     */
    public static MemorySegment ItemSpacing(MemorySegment struct) {
        return struct.asSlice(ItemSpacing$OFFSET, ItemSpacing$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ItemSpacing
     * }
     */
    public static void ItemSpacing(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ItemSpacing$OFFSET, ItemSpacing$LAYOUT.byteSize());
    }

    private static final GroupLayout ItemInnerSpacing$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ItemInnerSpacing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ItemInnerSpacing
     * }
     */
    public static final GroupLayout ItemInnerSpacing$layout() {
        return ItemInnerSpacing$LAYOUT;
    }

    private static final long ItemInnerSpacing$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ItemInnerSpacing
     * }
     */
    public static final long ItemInnerSpacing$offset() {
        return ItemInnerSpacing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ItemInnerSpacing
     * }
     */
    public static MemorySegment ItemInnerSpacing(MemorySegment struct) {
        return struct.asSlice(ItemInnerSpacing$OFFSET, ItemInnerSpacing$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ItemInnerSpacing
     * }
     */
    public static void ItemInnerSpacing(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ItemInnerSpacing$OFFSET, ItemInnerSpacing$LAYOUT.byteSize());
    }

    private static final GroupLayout CellPadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CellPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 CellPadding
     * }
     */
    public static final GroupLayout CellPadding$layout() {
        return CellPadding$LAYOUT;
    }

    private static final long CellPadding$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 CellPadding
     * }
     */
    public static final long CellPadding$offset() {
        return CellPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 CellPadding
     * }
     */
    public static MemorySegment CellPadding(MemorySegment struct) {
        return struct.asSlice(CellPadding$OFFSET, CellPadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 CellPadding
     * }
     */
    public static void CellPadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CellPadding$OFFSET, CellPadding$LAYOUT.byteSize());
    }

    private static final GroupLayout TouchExtraPadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TouchExtraPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 TouchExtraPadding
     * }
     */
    public static final GroupLayout TouchExtraPadding$layout() {
        return TouchExtraPadding$LAYOUT;
    }

    private static final long TouchExtraPadding$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 TouchExtraPadding
     * }
     */
    public static final long TouchExtraPadding$offset() {
        return TouchExtraPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 TouchExtraPadding
     * }
     */
    public static MemorySegment TouchExtraPadding(MemorySegment struct) {
        return struct.asSlice(TouchExtraPadding$OFFSET, TouchExtraPadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 TouchExtraPadding
     * }
     */
    public static void TouchExtraPadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TouchExtraPadding$OFFSET, TouchExtraPadding$LAYOUT.byteSize());
    }

    private static final OfFloat IndentSpacing$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("IndentSpacing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float IndentSpacing
     * }
     */
    public static final OfFloat IndentSpacing$layout() {
        return IndentSpacing$LAYOUT;
    }

    private static final long IndentSpacing$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float IndentSpacing
     * }
     */
    public static final long IndentSpacing$offset() {
        return IndentSpacing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float IndentSpacing
     * }
     */
    public static float IndentSpacing(MemorySegment struct) {
        return struct.get(IndentSpacing$LAYOUT, IndentSpacing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float IndentSpacing
     * }
     */
    public static void IndentSpacing(MemorySegment struct, float fieldValue) {
        struct.set(IndentSpacing$LAYOUT, IndentSpacing$OFFSET, fieldValue);
    }

    private static final OfFloat ColumnsMinSpacing$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ColumnsMinSpacing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ColumnsMinSpacing
     * }
     */
    public static final OfFloat ColumnsMinSpacing$layout() {
        return ColumnsMinSpacing$LAYOUT;
    }

    private static final long ColumnsMinSpacing$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ColumnsMinSpacing
     * }
     */
    public static final long ColumnsMinSpacing$offset() {
        return ColumnsMinSpacing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ColumnsMinSpacing
     * }
     */
    public static float ColumnsMinSpacing(MemorySegment struct) {
        return struct.get(ColumnsMinSpacing$LAYOUT, ColumnsMinSpacing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ColumnsMinSpacing
     * }
     */
    public static void ColumnsMinSpacing(MemorySegment struct, float fieldValue) {
        struct.set(ColumnsMinSpacing$LAYOUT, ColumnsMinSpacing$OFFSET, fieldValue);
    }

    private static final OfFloat ScrollbarSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ScrollbarSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ScrollbarSize
     * }
     */
    public static final OfFloat ScrollbarSize$layout() {
        return ScrollbarSize$LAYOUT;
    }

    private static final long ScrollbarSize$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ScrollbarSize
     * }
     */
    public static final long ScrollbarSize$offset() {
        return ScrollbarSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ScrollbarSize
     * }
     */
    public static float ScrollbarSize(MemorySegment struct) {
        return struct.get(ScrollbarSize$LAYOUT, ScrollbarSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ScrollbarSize
     * }
     */
    public static void ScrollbarSize(MemorySegment struct, float fieldValue) {
        struct.set(ScrollbarSize$LAYOUT, ScrollbarSize$OFFSET, fieldValue);
    }

    private static final OfFloat ScrollbarRounding$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ScrollbarRounding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ScrollbarRounding
     * }
     */
    public static final OfFloat ScrollbarRounding$layout() {
        return ScrollbarRounding$LAYOUT;
    }

    private static final long ScrollbarRounding$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ScrollbarRounding
     * }
     */
    public static final long ScrollbarRounding$offset() {
        return ScrollbarRounding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ScrollbarRounding
     * }
     */
    public static float ScrollbarRounding(MemorySegment struct) {
        return struct.get(ScrollbarRounding$LAYOUT, ScrollbarRounding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ScrollbarRounding
     * }
     */
    public static void ScrollbarRounding(MemorySegment struct, float fieldValue) {
        struct.set(ScrollbarRounding$LAYOUT, ScrollbarRounding$OFFSET, fieldValue);
    }

    private static final OfFloat GrabMinSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("GrabMinSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float GrabMinSize
     * }
     */
    public static final OfFloat GrabMinSize$layout() {
        return GrabMinSize$LAYOUT;
    }

    private static final long GrabMinSize$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float GrabMinSize
     * }
     */
    public static final long GrabMinSize$offset() {
        return GrabMinSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float GrabMinSize
     * }
     */
    public static float GrabMinSize(MemorySegment struct) {
        return struct.get(GrabMinSize$LAYOUT, GrabMinSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float GrabMinSize
     * }
     */
    public static void GrabMinSize(MemorySegment struct, float fieldValue) {
        struct.set(GrabMinSize$LAYOUT, GrabMinSize$OFFSET, fieldValue);
    }

    private static final OfFloat GrabRounding$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("GrabRounding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float GrabRounding
     * }
     */
    public static final OfFloat GrabRounding$layout() {
        return GrabRounding$LAYOUT;
    }

    private static final long GrabRounding$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float GrabRounding
     * }
     */
    public static final long GrabRounding$offset() {
        return GrabRounding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float GrabRounding
     * }
     */
    public static float GrabRounding(MemorySegment struct) {
        return struct.get(GrabRounding$LAYOUT, GrabRounding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float GrabRounding
     * }
     */
    public static void GrabRounding(MemorySegment struct, float fieldValue) {
        struct.set(GrabRounding$LAYOUT, GrabRounding$OFFSET, fieldValue);
    }

    private static final OfFloat LogSliderDeadzone$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("LogSliderDeadzone"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float LogSliderDeadzone
     * }
     */
    public static final OfFloat LogSliderDeadzone$layout() {
        return LogSliderDeadzone$LAYOUT;
    }

    private static final long LogSliderDeadzone$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float LogSliderDeadzone
     * }
     */
    public static final long LogSliderDeadzone$offset() {
        return LogSliderDeadzone$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float LogSliderDeadzone
     * }
     */
    public static float LogSliderDeadzone(MemorySegment struct) {
        return struct.get(LogSliderDeadzone$LAYOUT, LogSliderDeadzone$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float LogSliderDeadzone
     * }
     */
    public static void LogSliderDeadzone(MemorySegment struct, float fieldValue) {
        struct.set(LogSliderDeadzone$LAYOUT, LogSliderDeadzone$OFFSET, fieldValue);
    }

    private static final OfFloat TabRounding$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("TabRounding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float TabRounding
     * }
     */
    public static final OfFloat TabRounding$layout() {
        return TabRounding$LAYOUT;
    }

    private static final long TabRounding$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float TabRounding
     * }
     */
    public static final long TabRounding$offset() {
        return TabRounding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float TabRounding
     * }
     */
    public static float TabRounding(MemorySegment struct) {
        return struct.get(TabRounding$LAYOUT, TabRounding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float TabRounding
     * }
     */
    public static void TabRounding(MemorySegment struct, float fieldValue) {
        struct.set(TabRounding$LAYOUT, TabRounding$OFFSET, fieldValue);
    }

    private static final OfFloat TabBorderSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("TabBorderSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float TabBorderSize
     * }
     */
    public static final OfFloat TabBorderSize$layout() {
        return TabBorderSize$LAYOUT;
    }

    private static final long TabBorderSize$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float TabBorderSize
     * }
     */
    public static final long TabBorderSize$offset() {
        return TabBorderSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float TabBorderSize
     * }
     */
    public static float TabBorderSize(MemorySegment struct) {
        return struct.get(TabBorderSize$LAYOUT, TabBorderSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float TabBorderSize
     * }
     */
    public static void TabBorderSize(MemorySegment struct, float fieldValue) {
        struct.set(TabBorderSize$LAYOUT, TabBorderSize$OFFSET, fieldValue);
    }

    private static final OfFloat TabMinWidthForCloseButton$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("TabMinWidthForCloseButton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float TabMinWidthForCloseButton
     * }
     */
    public static final OfFloat TabMinWidthForCloseButton$layout() {
        return TabMinWidthForCloseButton$LAYOUT;
    }

    private static final long TabMinWidthForCloseButton$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float TabMinWidthForCloseButton
     * }
     */
    public static final long TabMinWidthForCloseButton$offset() {
        return TabMinWidthForCloseButton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float TabMinWidthForCloseButton
     * }
     */
    public static float TabMinWidthForCloseButton(MemorySegment struct) {
        return struct.get(TabMinWidthForCloseButton$LAYOUT, TabMinWidthForCloseButton$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float TabMinWidthForCloseButton
     * }
     */
    public static void TabMinWidthForCloseButton(MemorySegment struct, float fieldValue) {
        struct.set(TabMinWidthForCloseButton$LAYOUT, TabMinWidthForCloseButton$OFFSET, fieldValue);
    }

    private static final OfFloat TabBarBorderSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("TabBarBorderSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float TabBarBorderSize
     * }
     */
    public static final OfFloat TabBarBorderSize$layout() {
        return TabBarBorderSize$LAYOUT;
    }

    private static final long TabBarBorderSize$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float TabBarBorderSize
     * }
     */
    public static final long TabBarBorderSize$offset() {
        return TabBarBorderSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float TabBarBorderSize
     * }
     */
    public static float TabBarBorderSize(MemorySegment struct) {
        return struct.get(TabBarBorderSize$LAYOUT, TabBarBorderSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float TabBarBorderSize
     * }
     */
    public static void TabBarBorderSize(MemorySegment struct, float fieldValue) {
        struct.set(TabBarBorderSize$LAYOUT, TabBarBorderSize$OFFSET, fieldValue);
    }

    private static final OfFloat TabBarOverlineSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("TabBarOverlineSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float TabBarOverlineSize
     * }
     */
    public static final OfFloat TabBarOverlineSize$layout() {
        return TabBarOverlineSize$LAYOUT;
    }

    private static final long TabBarOverlineSize$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float TabBarOverlineSize
     * }
     */
    public static final long TabBarOverlineSize$offset() {
        return TabBarOverlineSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float TabBarOverlineSize
     * }
     */
    public static float TabBarOverlineSize(MemorySegment struct) {
        return struct.get(TabBarOverlineSize$LAYOUT, TabBarOverlineSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float TabBarOverlineSize
     * }
     */
    public static void TabBarOverlineSize(MemorySegment struct, float fieldValue) {
        struct.set(TabBarOverlineSize$LAYOUT, TabBarOverlineSize$OFFSET, fieldValue);
    }

    private static final OfFloat TableAngledHeadersAngle$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("TableAngledHeadersAngle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float TableAngledHeadersAngle
     * }
     */
    public static final OfFloat TableAngledHeadersAngle$layout() {
        return TableAngledHeadersAngle$LAYOUT;
    }

    private static final long TableAngledHeadersAngle$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float TableAngledHeadersAngle
     * }
     */
    public static final long TableAngledHeadersAngle$offset() {
        return TableAngledHeadersAngle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float TableAngledHeadersAngle
     * }
     */
    public static float TableAngledHeadersAngle(MemorySegment struct) {
        return struct.get(TableAngledHeadersAngle$LAYOUT, TableAngledHeadersAngle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float TableAngledHeadersAngle
     * }
     */
    public static void TableAngledHeadersAngle(MemorySegment struct, float fieldValue) {
        struct.set(TableAngledHeadersAngle$LAYOUT, TableAngledHeadersAngle$OFFSET, fieldValue);
    }

    private static final GroupLayout TableAngledHeadersTextAlign$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TableAngledHeadersTextAlign"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 TableAngledHeadersTextAlign
     * }
     */
    public static final GroupLayout TableAngledHeadersTextAlign$layout() {
        return TableAngledHeadersTextAlign$LAYOUT;
    }

    private static final long TableAngledHeadersTextAlign$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 TableAngledHeadersTextAlign
     * }
     */
    public static final long TableAngledHeadersTextAlign$offset() {
        return TableAngledHeadersTextAlign$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 TableAngledHeadersTextAlign
     * }
     */
    public static MemorySegment TableAngledHeadersTextAlign(MemorySegment struct) {
        return struct.asSlice(TableAngledHeadersTextAlign$OFFSET, TableAngledHeadersTextAlign$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 TableAngledHeadersTextAlign
     * }
     */
    public static void TableAngledHeadersTextAlign(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TableAngledHeadersTextAlign$OFFSET, TableAngledHeadersTextAlign$LAYOUT.byteSize());
    }

    private static final OfInt ColorButtonPosition$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ColorButtonPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDir ColorButtonPosition
     * }
     */
    public static final OfInt ColorButtonPosition$layout() {
        return ColorButtonPosition$LAYOUT;
    }

    private static final long ColorButtonPosition$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDir ColorButtonPosition
     * }
     */
    public static final long ColorButtonPosition$offset() {
        return ColorButtonPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDir ColorButtonPosition
     * }
     */
    public static int ColorButtonPosition(MemorySegment struct) {
        return struct.get(ColorButtonPosition$LAYOUT, ColorButtonPosition$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDir ColorButtonPosition
     * }
     */
    public static void ColorButtonPosition(MemorySegment struct, int fieldValue) {
        struct.set(ColorButtonPosition$LAYOUT, ColorButtonPosition$OFFSET, fieldValue);
    }

    private static final GroupLayout ButtonTextAlign$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ButtonTextAlign"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ButtonTextAlign
     * }
     */
    public static final GroupLayout ButtonTextAlign$layout() {
        return ButtonTextAlign$LAYOUT;
    }

    private static final long ButtonTextAlign$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ButtonTextAlign
     * }
     */
    public static final long ButtonTextAlign$offset() {
        return ButtonTextAlign$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ButtonTextAlign
     * }
     */
    public static MemorySegment ButtonTextAlign(MemorySegment struct) {
        return struct.asSlice(ButtonTextAlign$OFFSET, ButtonTextAlign$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ButtonTextAlign
     * }
     */
    public static void ButtonTextAlign(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ButtonTextAlign$OFFSET, ButtonTextAlign$LAYOUT.byteSize());
    }

    private static final GroupLayout SelectableTextAlign$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SelectableTextAlign"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 SelectableTextAlign
     * }
     */
    public static final GroupLayout SelectableTextAlign$layout() {
        return SelectableTextAlign$LAYOUT;
    }

    private static final long SelectableTextAlign$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 SelectableTextAlign
     * }
     */
    public static final long SelectableTextAlign$offset() {
        return SelectableTextAlign$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 SelectableTextAlign
     * }
     */
    public static MemorySegment SelectableTextAlign(MemorySegment struct) {
        return struct.asSlice(SelectableTextAlign$OFFSET, SelectableTextAlign$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 SelectableTextAlign
     * }
     */
    public static void SelectableTextAlign(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SelectableTextAlign$OFFSET, SelectableTextAlign$LAYOUT.byteSize());
    }

    private static final OfFloat SeparatorTextBorderSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("SeparatorTextBorderSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float SeparatorTextBorderSize
     * }
     */
    public static final OfFloat SeparatorTextBorderSize$layout() {
        return SeparatorTextBorderSize$LAYOUT;
    }

    private static final long SeparatorTextBorderSize$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float SeparatorTextBorderSize
     * }
     */
    public static final long SeparatorTextBorderSize$offset() {
        return SeparatorTextBorderSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float SeparatorTextBorderSize
     * }
     */
    public static float SeparatorTextBorderSize(MemorySegment struct) {
        return struct.get(SeparatorTextBorderSize$LAYOUT, SeparatorTextBorderSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float SeparatorTextBorderSize
     * }
     */
    public static void SeparatorTextBorderSize(MemorySegment struct, float fieldValue) {
        struct.set(SeparatorTextBorderSize$LAYOUT, SeparatorTextBorderSize$OFFSET, fieldValue);
    }

    private static final GroupLayout SeparatorTextAlign$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SeparatorTextAlign"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 SeparatorTextAlign
     * }
     */
    public static final GroupLayout SeparatorTextAlign$layout() {
        return SeparatorTextAlign$LAYOUT;
    }

    private static final long SeparatorTextAlign$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 SeparatorTextAlign
     * }
     */
    public static final long SeparatorTextAlign$offset() {
        return SeparatorTextAlign$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 SeparatorTextAlign
     * }
     */
    public static MemorySegment SeparatorTextAlign(MemorySegment struct) {
        return struct.asSlice(SeparatorTextAlign$OFFSET, SeparatorTextAlign$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 SeparatorTextAlign
     * }
     */
    public static void SeparatorTextAlign(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SeparatorTextAlign$OFFSET, SeparatorTextAlign$LAYOUT.byteSize());
    }

    private static final GroupLayout SeparatorTextPadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SeparatorTextPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 SeparatorTextPadding
     * }
     */
    public static final GroupLayout SeparatorTextPadding$layout() {
        return SeparatorTextPadding$LAYOUT;
    }

    private static final long SeparatorTextPadding$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 SeparatorTextPadding
     * }
     */
    public static final long SeparatorTextPadding$offset() {
        return SeparatorTextPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 SeparatorTextPadding
     * }
     */
    public static MemorySegment SeparatorTextPadding(MemorySegment struct) {
        return struct.asSlice(SeparatorTextPadding$OFFSET, SeparatorTextPadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 SeparatorTextPadding
     * }
     */
    public static void SeparatorTextPadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SeparatorTextPadding$OFFSET, SeparatorTextPadding$LAYOUT.byteSize());
    }

    private static final GroupLayout DisplayWindowPadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DisplayWindowPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 DisplayWindowPadding
     * }
     */
    public static final GroupLayout DisplayWindowPadding$layout() {
        return DisplayWindowPadding$LAYOUT;
    }

    private static final long DisplayWindowPadding$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 DisplayWindowPadding
     * }
     */
    public static final long DisplayWindowPadding$offset() {
        return DisplayWindowPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 DisplayWindowPadding
     * }
     */
    public static MemorySegment DisplayWindowPadding(MemorySegment struct) {
        return struct.asSlice(DisplayWindowPadding$OFFSET, DisplayWindowPadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 DisplayWindowPadding
     * }
     */
    public static void DisplayWindowPadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DisplayWindowPadding$OFFSET, DisplayWindowPadding$LAYOUT.byteSize());
    }

    private static final GroupLayout DisplaySafeAreaPadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DisplaySafeAreaPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 DisplaySafeAreaPadding
     * }
     */
    public static final GroupLayout DisplaySafeAreaPadding$layout() {
        return DisplaySafeAreaPadding$LAYOUT;
    }

    private static final long DisplaySafeAreaPadding$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 DisplaySafeAreaPadding
     * }
     */
    public static final long DisplaySafeAreaPadding$offset() {
        return DisplaySafeAreaPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 DisplaySafeAreaPadding
     * }
     */
    public static MemorySegment DisplaySafeAreaPadding(MemorySegment struct) {
        return struct.asSlice(DisplaySafeAreaPadding$OFFSET, DisplaySafeAreaPadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 DisplaySafeAreaPadding
     * }
     */
    public static void DisplaySafeAreaPadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DisplaySafeAreaPadding$OFFSET, DisplaySafeAreaPadding$LAYOUT.byteSize());
    }

    private static final OfFloat DockingSeparatorSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DockingSeparatorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DockingSeparatorSize
     * }
     */
    public static final OfFloat DockingSeparatorSize$layout() {
        return DockingSeparatorSize$LAYOUT;
    }

    private static final long DockingSeparatorSize$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DockingSeparatorSize
     * }
     */
    public static final long DockingSeparatorSize$offset() {
        return DockingSeparatorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DockingSeparatorSize
     * }
     */
    public static float DockingSeparatorSize(MemorySegment struct) {
        return struct.get(DockingSeparatorSize$LAYOUT, DockingSeparatorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DockingSeparatorSize
     * }
     */
    public static void DockingSeparatorSize(MemorySegment struct, float fieldValue) {
        struct.set(DockingSeparatorSize$LAYOUT, DockingSeparatorSize$OFFSET, fieldValue);
    }

    private static final OfFloat MouseCursorScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MouseCursorScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MouseCursorScale
     * }
     */
    public static final OfFloat MouseCursorScale$layout() {
        return MouseCursorScale$LAYOUT;
    }

    private static final long MouseCursorScale$OFFSET = 228;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MouseCursorScale
     * }
     */
    public static final long MouseCursorScale$offset() {
        return MouseCursorScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MouseCursorScale
     * }
     */
    public static float MouseCursorScale(MemorySegment struct) {
        return struct.get(MouseCursorScale$LAYOUT, MouseCursorScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MouseCursorScale
     * }
     */
    public static void MouseCursorScale(MemorySegment struct, float fieldValue) {
        struct.set(MouseCursorScale$LAYOUT, MouseCursorScale$OFFSET, fieldValue);
    }

    private static final OfBoolean AntiAliasedLines$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("AntiAliasedLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool AntiAliasedLines
     * }
     */
    public static final OfBoolean AntiAliasedLines$layout() {
        return AntiAliasedLines$LAYOUT;
    }

    private static final long AntiAliasedLines$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool AntiAliasedLines
     * }
     */
    public static final long AntiAliasedLines$offset() {
        return AntiAliasedLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool AntiAliasedLines
     * }
     */
    public static boolean AntiAliasedLines(MemorySegment struct) {
        return struct.get(AntiAliasedLines$LAYOUT, AntiAliasedLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool AntiAliasedLines
     * }
     */
    public static void AntiAliasedLines(MemorySegment struct, boolean fieldValue) {
        struct.set(AntiAliasedLines$LAYOUT, AntiAliasedLines$OFFSET, fieldValue);
    }

    private static final OfBoolean AntiAliasedLinesUseTex$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("AntiAliasedLinesUseTex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool AntiAliasedLinesUseTex
     * }
     */
    public static final OfBoolean AntiAliasedLinesUseTex$layout() {
        return AntiAliasedLinesUseTex$LAYOUT;
    }

    private static final long AntiAliasedLinesUseTex$OFFSET = 233;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool AntiAliasedLinesUseTex
     * }
     */
    public static final long AntiAliasedLinesUseTex$offset() {
        return AntiAliasedLinesUseTex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool AntiAliasedLinesUseTex
     * }
     */
    public static boolean AntiAliasedLinesUseTex(MemorySegment struct) {
        return struct.get(AntiAliasedLinesUseTex$LAYOUT, AntiAliasedLinesUseTex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool AntiAliasedLinesUseTex
     * }
     */
    public static void AntiAliasedLinesUseTex(MemorySegment struct, boolean fieldValue) {
        struct.set(AntiAliasedLinesUseTex$LAYOUT, AntiAliasedLinesUseTex$OFFSET, fieldValue);
    }

    private static final OfBoolean AntiAliasedFill$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("AntiAliasedFill"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool AntiAliasedFill
     * }
     */
    public static final OfBoolean AntiAliasedFill$layout() {
        return AntiAliasedFill$LAYOUT;
    }

    private static final long AntiAliasedFill$OFFSET = 234;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool AntiAliasedFill
     * }
     */
    public static final long AntiAliasedFill$offset() {
        return AntiAliasedFill$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool AntiAliasedFill
     * }
     */
    public static boolean AntiAliasedFill(MemorySegment struct) {
        return struct.get(AntiAliasedFill$LAYOUT, AntiAliasedFill$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool AntiAliasedFill
     * }
     */
    public static void AntiAliasedFill(MemorySegment struct, boolean fieldValue) {
        struct.set(AntiAliasedFill$LAYOUT, AntiAliasedFill$OFFSET, fieldValue);
    }

    private static final OfFloat CurveTessellationTol$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("CurveTessellationTol"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float CurveTessellationTol
     * }
     */
    public static final OfFloat CurveTessellationTol$layout() {
        return CurveTessellationTol$LAYOUT;
    }

    private static final long CurveTessellationTol$OFFSET = 236;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float CurveTessellationTol
     * }
     */
    public static final long CurveTessellationTol$offset() {
        return CurveTessellationTol$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float CurveTessellationTol
     * }
     */
    public static float CurveTessellationTol(MemorySegment struct) {
        return struct.get(CurveTessellationTol$LAYOUT, CurveTessellationTol$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float CurveTessellationTol
     * }
     */
    public static void CurveTessellationTol(MemorySegment struct, float fieldValue) {
        struct.set(CurveTessellationTol$LAYOUT, CurveTessellationTol$OFFSET, fieldValue);
    }

    private static final OfFloat CircleTessellationMaxError$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("CircleTessellationMaxError"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float CircleTessellationMaxError
     * }
     */
    public static final OfFloat CircleTessellationMaxError$layout() {
        return CircleTessellationMaxError$LAYOUT;
    }

    private static final long CircleTessellationMaxError$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float CircleTessellationMaxError
     * }
     */
    public static final long CircleTessellationMaxError$offset() {
        return CircleTessellationMaxError$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float CircleTessellationMaxError
     * }
     */
    public static float CircleTessellationMaxError(MemorySegment struct) {
        return struct.get(CircleTessellationMaxError$LAYOUT, CircleTessellationMaxError$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float CircleTessellationMaxError
     * }
     */
    public static void CircleTessellationMaxError(MemorySegment struct, float fieldValue) {
        struct.set(CircleTessellationMaxError$LAYOUT, CircleTessellationMaxError$OFFSET, fieldValue);
    }

    private static final SequenceLayout Colors$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Colors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec4 Colors[58]
     * }
     */
    public static final SequenceLayout Colors$layout() {
        return Colors$LAYOUT;
    }

    private static final long Colors$OFFSET = 244;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec4 Colors[58]
     * }
     */
    public static final long Colors$offset() {
        return Colors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec4 Colors[58]
     * }
     */
    public static MemorySegment Colors(MemorySegment struct) {
        return struct.asSlice(Colors$OFFSET, Colors$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec4 Colors[58]
     * }
     */
    public static void Colors(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Colors$OFFSET, Colors$LAYOUT.byteSize());
    }

    private static long[] Colors$DIMS = { 58 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImVec4 Colors[58]
     * }
     */
    public static long[] Colors$dimensions() {
        return Colors$DIMS;
    }
    private static final MethodHandle Colors$ELEM_HANDLE = Colors$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImVec4 Colors[58]
     * }
     */
    public static MemorySegment Colors(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)Colors$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImVec4 Colors[58]
     * }
     */
    public static void Colors(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, Colors(struct, index0), 0L, ImVec4.layout().byteSize());
    }

    private static final OfFloat HoverStationaryDelay$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("HoverStationaryDelay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float HoverStationaryDelay
     * }
     */
    public static final OfFloat HoverStationaryDelay$layout() {
        return HoverStationaryDelay$LAYOUT;
    }

    private static final long HoverStationaryDelay$OFFSET = 1172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float HoverStationaryDelay
     * }
     */
    public static final long HoverStationaryDelay$offset() {
        return HoverStationaryDelay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float HoverStationaryDelay
     * }
     */
    public static float HoverStationaryDelay(MemorySegment struct) {
        return struct.get(HoverStationaryDelay$LAYOUT, HoverStationaryDelay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float HoverStationaryDelay
     * }
     */
    public static void HoverStationaryDelay(MemorySegment struct, float fieldValue) {
        struct.set(HoverStationaryDelay$LAYOUT, HoverStationaryDelay$OFFSET, fieldValue);
    }

    private static final OfFloat HoverDelayShort$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("HoverDelayShort"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float HoverDelayShort
     * }
     */
    public static final OfFloat HoverDelayShort$layout() {
        return HoverDelayShort$LAYOUT;
    }

    private static final long HoverDelayShort$OFFSET = 1176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float HoverDelayShort
     * }
     */
    public static final long HoverDelayShort$offset() {
        return HoverDelayShort$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float HoverDelayShort
     * }
     */
    public static float HoverDelayShort(MemorySegment struct) {
        return struct.get(HoverDelayShort$LAYOUT, HoverDelayShort$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float HoverDelayShort
     * }
     */
    public static void HoverDelayShort(MemorySegment struct, float fieldValue) {
        struct.set(HoverDelayShort$LAYOUT, HoverDelayShort$OFFSET, fieldValue);
    }

    private static final OfFloat HoverDelayNormal$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("HoverDelayNormal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float HoverDelayNormal
     * }
     */
    public static final OfFloat HoverDelayNormal$layout() {
        return HoverDelayNormal$LAYOUT;
    }

    private static final long HoverDelayNormal$OFFSET = 1180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float HoverDelayNormal
     * }
     */
    public static final long HoverDelayNormal$offset() {
        return HoverDelayNormal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float HoverDelayNormal
     * }
     */
    public static float HoverDelayNormal(MemorySegment struct) {
        return struct.get(HoverDelayNormal$LAYOUT, HoverDelayNormal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float HoverDelayNormal
     * }
     */
    public static void HoverDelayNormal(MemorySegment struct, float fieldValue) {
        struct.set(HoverDelayNormal$LAYOUT, HoverDelayNormal$OFFSET, fieldValue);
    }

    private static final OfInt HoverFlagsForTooltipMouse$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HoverFlagsForTooltipMouse"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiHoveredFlags HoverFlagsForTooltipMouse
     * }
     */
    public static final OfInt HoverFlagsForTooltipMouse$layout() {
        return HoverFlagsForTooltipMouse$LAYOUT;
    }

    private static final long HoverFlagsForTooltipMouse$OFFSET = 1184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiHoveredFlags HoverFlagsForTooltipMouse
     * }
     */
    public static final long HoverFlagsForTooltipMouse$offset() {
        return HoverFlagsForTooltipMouse$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiHoveredFlags HoverFlagsForTooltipMouse
     * }
     */
    public static int HoverFlagsForTooltipMouse(MemorySegment struct) {
        return struct.get(HoverFlagsForTooltipMouse$LAYOUT, HoverFlagsForTooltipMouse$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiHoveredFlags HoverFlagsForTooltipMouse
     * }
     */
    public static void HoverFlagsForTooltipMouse(MemorySegment struct, int fieldValue) {
        struct.set(HoverFlagsForTooltipMouse$LAYOUT, HoverFlagsForTooltipMouse$OFFSET, fieldValue);
    }

    private static final OfInt HoverFlagsForTooltipNav$LAYOUT = (OfInt)$LAYOUT.select(groupElement("HoverFlagsForTooltipNav"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiHoveredFlags HoverFlagsForTooltipNav
     * }
     */
    public static final OfInt HoverFlagsForTooltipNav$layout() {
        return HoverFlagsForTooltipNav$LAYOUT;
    }

    private static final long HoverFlagsForTooltipNav$OFFSET = 1188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiHoveredFlags HoverFlagsForTooltipNav
     * }
     */
    public static final long HoverFlagsForTooltipNav$offset() {
        return HoverFlagsForTooltipNav$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiHoveredFlags HoverFlagsForTooltipNav
     * }
     */
    public static int HoverFlagsForTooltipNav(MemorySegment struct) {
        return struct.get(HoverFlagsForTooltipNav$LAYOUT, HoverFlagsForTooltipNav$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiHoveredFlags HoverFlagsForTooltipNav
     * }
     */
    public static void HoverFlagsForTooltipNav(MemorySegment struct, int fieldValue) {
        struct.set(HoverFlagsForTooltipNav$LAYOUT, HoverFlagsForTooltipNav$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

