// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StbUndoState {
 *     StbUndoRecord undo_rec[99];
 *     ImWchar undo_char[999];
 *     short undo_point;
 *     short redo_point;
 *     int undo_char_point;
 *     int redo_char_point;
 * }
 * }
 */
public class StbUndoState {

    StbUndoState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(99, StbUndoRecord.layout()).withName("undo_rec"),
        MemoryLayout.sequenceLayout(999, imgui.C_SHORT).withName("undo_char"),
        imgui.C_SHORT.withName("undo_point"),
        imgui.C_SHORT.withName("redo_point"),
        MemoryLayout.paddingLayout(2),
        imgui.C_INT.withName("undo_char_point"),
        imgui.C_INT.withName("redo_char_point")
    ).withName("StbUndoState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout undo_rec$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("undo_rec"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StbUndoRecord undo_rec[99]
     * }
     */
    public static final SequenceLayout undo_rec$layout() {
        return undo_rec$LAYOUT;
    }

    private static final long undo_rec$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StbUndoRecord undo_rec[99]
     * }
     */
    public static final long undo_rec$offset() {
        return undo_rec$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StbUndoRecord undo_rec[99]
     * }
     */
    public static MemorySegment undo_rec(MemorySegment struct) {
        return struct.asSlice(undo_rec$OFFSET, undo_rec$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StbUndoRecord undo_rec[99]
     * }
     */
    public static void undo_rec(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, undo_rec$OFFSET, undo_rec$LAYOUT.byteSize());
    }

    private static long[] undo_rec$DIMS = { 99 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * StbUndoRecord undo_rec[99]
     * }
     */
    public static long[] undo_rec$dimensions() {
        return undo_rec$DIMS;
    }
    private static final MethodHandle undo_rec$ELEM_HANDLE = undo_rec$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * StbUndoRecord undo_rec[99]
     * }
     */
    public static MemorySegment undo_rec(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)undo_rec$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * StbUndoRecord undo_rec[99]
     * }
     */
    public static void undo_rec(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, undo_rec(struct, index0), 0L, StbUndoRecord.layout().byteSize());
    }

    private static final SequenceLayout undo_char$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("undo_char"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImWchar undo_char[999]
     * }
     */
    public static final SequenceLayout undo_char$layout() {
        return undo_char$LAYOUT;
    }

    private static final long undo_char$OFFSET = 1584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImWchar undo_char[999]
     * }
     */
    public static final long undo_char$offset() {
        return undo_char$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImWchar undo_char[999]
     * }
     */
    public static MemorySegment undo_char(MemorySegment struct) {
        return struct.asSlice(undo_char$OFFSET, undo_char$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImWchar undo_char[999]
     * }
     */
    public static void undo_char(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, undo_char$OFFSET, undo_char$LAYOUT.byteSize());
    }

    private static long[] undo_char$DIMS = { 999 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImWchar undo_char[999]
     * }
     */
    public static long[] undo_char$dimensions() {
        return undo_char$DIMS;
    }
    private static final VarHandle undo_char$ELEM_HANDLE = undo_char$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImWchar undo_char[999]
     * }
     */
    public static short undo_char(MemorySegment struct, long index0) {
        return (short)undo_char$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImWchar undo_char[999]
     * }
     */
    public static void undo_char(MemorySegment struct, long index0, short fieldValue) {
        undo_char$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfShort undo_point$LAYOUT = (OfShort)$LAYOUT.select(groupElement("undo_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short undo_point
     * }
     */
    public static final OfShort undo_point$layout() {
        return undo_point$LAYOUT;
    }

    private static final long undo_point$OFFSET = 3582;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short undo_point
     * }
     */
    public static final long undo_point$offset() {
        return undo_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short undo_point
     * }
     */
    public static short undo_point(MemorySegment struct) {
        return struct.get(undo_point$LAYOUT, undo_point$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short undo_point
     * }
     */
    public static void undo_point(MemorySegment struct, short fieldValue) {
        struct.set(undo_point$LAYOUT, undo_point$OFFSET, fieldValue);
    }

    private static final OfShort redo_point$LAYOUT = (OfShort)$LAYOUT.select(groupElement("redo_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short redo_point
     * }
     */
    public static final OfShort redo_point$layout() {
        return redo_point$LAYOUT;
    }

    private static final long redo_point$OFFSET = 3584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short redo_point
     * }
     */
    public static final long redo_point$offset() {
        return redo_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short redo_point
     * }
     */
    public static short redo_point(MemorySegment struct) {
        return struct.get(redo_point$LAYOUT, redo_point$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short redo_point
     * }
     */
    public static void redo_point(MemorySegment struct, short fieldValue) {
        struct.set(redo_point$LAYOUT, redo_point$OFFSET, fieldValue);
    }

    private static final OfInt undo_char_point$LAYOUT = (OfInt)$LAYOUT.select(groupElement("undo_char_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int undo_char_point
     * }
     */
    public static final OfInt undo_char_point$layout() {
        return undo_char_point$LAYOUT;
    }

    private static final long undo_char_point$OFFSET = 3588;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int undo_char_point
     * }
     */
    public static final long undo_char_point$offset() {
        return undo_char_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int undo_char_point
     * }
     */
    public static int undo_char_point(MemorySegment struct) {
        return struct.get(undo_char_point$LAYOUT, undo_char_point$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int undo_char_point
     * }
     */
    public static void undo_char_point(MemorySegment struct, int fieldValue) {
        struct.set(undo_char_point$LAYOUT, undo_char_point$OFFSET, fieldValue);
    }

    private static final OfInt redo_char_point$LAYOUT = (OfInt)$LAYOUT.select(groupElement("redo_char_point"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int redo_char_point
     * }
     */
    public static final OfInt redo_char_point$layout() {
        return redo_char_point$LAYOUT;
    }

    private static final long redo_char_point$OFFSET = 3592;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int redo_char_point
     * }
     */
    public static final long redo_char_point$offset() {
        return redo_char_point$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int redo_char_point
     * }
     */
    public static int redo_char_point(MemorySegment struct) {
        return struct.get(redo_char_point$LAYOUT, redo_char_point$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int redo_char_point
     * }
     */
    public static void redo_char_point(MemorySegment struct, int fieldValue) {
        struct.set(redo_char_point$LAYOUT, redo_char_point$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

