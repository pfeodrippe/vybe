// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiDockNode {
 *     ImGuiID ID;
 *     ImGuiDockNodeFlags SharedFlags;
 *     ImGuiDockNodeFlags LocalFlags;
 *     ImGuiDockNodeFlags LocalFlagsInWindows;
 *     ImGuiDockNodeFlags MergedFlags;
 *     ImGuiDockNodeState State;
 *     ImGuiDockNode *ParentNode;
 *     ImGuiDockNode *ChildNodes[2];
 *     ImVector_ImGuiWindowPtr Windows;
 *     ImGuiTabBar *TabBar;
 *     ImVec2 Pos;
 *     ImVec2 Size;
 *     ImVec2 SizeRef;
 *     ImGuiAxis SplitAxis;
 *     ImGuiWindowClass WindowClass;
 *     ImU32 LastBgColor;
 *     ImGuiWindow *HostWindow;
 *     ImGuiWindow *VisibleWindow;
 *     ImGuiDockNode *CentralNode;
 *     ImGuiDockNode *OnlyNodeWithWindows;
 *     int CountNodeWithWindows;
 *     int LastFrameAlive;
 *     int LastFrameActive;
 *     int LastFrameFocused;
 *     ImGuiID LastFocusedNodeId;
 *     ImGuiID SelectedTabId;
 *     ImGuiID WantCloseTabId;
 *     ImGuiID RefViewportId;
 *     ImGuiDataAuthority AuthorityForPos : 3;
 *     ImGuiDataAuthority AuthorityForSize : 3;
 *     ImGuiDataAuthority AuthorityForViewport : 3;
 *     bool IsVisible : 1;
 *     bool IsFocused : 1;
 *     bool IsBgDrawnThisFrame : 1;
 *     bool HasCloseButton : 1;
 *     bool HasWindowMenuButton : 1;
 *     bool HasCentralNodeChild : 1;
 *     bool WantCloseAll : 1;
 *     bool WantLockSizeOnce : 1;
 *     bool WantMouseMove : 1;
 *     bool WantHiddenTabBarUpdate : 1;
 *     bool WantHiddenTabBarToggle : 1;
 * }
 * }
 */
public class ImGuiDockNode {

    ImGuiDockNode() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("ID"),
        imgui.C_INT.withName("SharedFlags"),
        imgui.C_INT.withName("LocalFlags"),
        imgui.C_INT.withName("LocalFlagsInWindows"),
        imgui.C_INT.withName("MergedFlags"),
        imgui.C_INT.withName("State"),
        imgui.C_POINTER.withName("ParentNode"),
        MemoryLayout.sequenceLayout(2, imgui.C_POINTER).withName("ChildNodes"),
        ImVector_ImGuiWindowPtr.layout().withName("Windows"),
        imgui.C_POINTER.withName("TabBar"),
        ImVec2.layout().withName("Pos"),
        ImVec2.layout().withName("Size"),
        ImVec2.layout().withName("SizeRef"),
        imgui.C_INT.withName("SplitAxis"),
        ImGuiWindowClass.layout().withName("WindowClass"),
        imgui.C_INT.withName("LastBgColor"),
        imgui.C_POINTER.withName("HostWindow"),
        imgui.C_POINTER.withName("VisibleWindow"),
        imgui.C_POINTER.withName("CentralNode"),
        imgui.C_POINTER.withName("OnlyNodeWithWindows"),
        imgui.C_INT.withName("CountNodeWithWindows"),
        imgui.C_INT.withName("LastFrameAlive"),
        imgui.C_INT.withName("LastFrameActive"),
        imgui.C_INT.withName("LastFrameFocused"),
        imgui.C_INT.withName("LastFocusedNodeId"),
        imgui.C_INT.withName("SelectedTabId"),
        imgui.C_INT.withName("WantCloseTabId"),
        imgui.C_INT.withName("RefViewportId"),
        MemoryLayout.paddingLayout(8)
    ).withName("ImGuiDockNode");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final OfInt ID$layout() {
        return ID$LAYOUT;
    }

    private static final long ID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final long ID$offset() {
        return ID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static int ID(MemorySegment struct) {
        return struct.get(ID$LAYOUT, ID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static void ID(MemorySegment struct, int fieldValue) {
        struct.set(ID$LAYOUT, ID$OFFSET, fieldValue);
    }

    private static final OfInt SharedFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SharedFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags SharedFlags
     * }
     */
    public static final OfInt SharedFlags$layout() {
        return SharedFlags$LAYOUT;
    }

    private static final long SharedFlags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags SharedFlags
     * }
     */
    public static final long SharedFlags$offset() {
        return SharedFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags SharedFlags
     * }
     */
    public static int SharedFlags(MemorySegment struct) {
        return struct.get(SharedFlags$LAYOUT, SharedFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags SharedFlags
     * }
     */
    public static void SharedFlags(MemorySegment struct, int fieldValue) {
        struct.set(SharedFlags$LAYOUT, SharedFlags$OFFSET, fieldValue);
    }

    private static final OfInt LocalFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LocalFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags LocalFlags
     * }
     */
    public static final OfInt LocalFlags$layout() {
        return LocalFlags$LAYOUT;
    }

    private static final long LocalFlags$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags LocalFlags
     * }
     */
    public static final long LocalFlags$offset() {
        return LocalFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags LocalFlags
     * }
     */
    public static int LocalFlags(MemorySegment struct) {
        return struct.get(LocalFlags$LAYOUT, LocalFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags LocalFlags
     * }
     */
    public static void LocalFlags(MemorySegment struct, int fieldValue) {
        struct.set(LocalFlags$LAYOUT, LocalFlags$OFFSET, fieldValue);
    }

    private static final OfInt LocalFlagsInWindows$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LocalFlagsInWindows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags LocalFlagsInWindows
     * }
     */
    public static final OfInt LocalFlagsInWindows$layout() {
        return LocalFlagsInWindows$LAYOUT;
    }

    private static final long LocalFlagsInWindows$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags LocalFlagsInWindows
     * }
     */
    public static final long LocalFlagsInWindows$offset() {
        return LocalFlagsInWindows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags LocalFlagsInWindows
     * }
     */
    public static int LocalFlagsInWindows(MemorySegment struct) {
        return struct.get(LocalFlagsInWindows$LAYOUT, LocalFlagsInWindows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags LocalFlagsInWindows
     * }
     */
    public static void LocalFlagsInWindows(MemorySegment struct, int fieldValue) {
        struct.set(LocalFlagsInWindows$LAYOUT, LocalFlagsInWindows$OFFSET, fieldValue);
    }

    private static final OfInt MergedFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MergedFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags MergedFlags
     * }
     */
    public static final OfInt MergedFlags$layout() {
        return MergedFlags$LAYOUT;
    }

    private static final long MergedFlags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags MergedFlags
     * }
     */
    public static final long MergedFlags$offset() {
        return MergedFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags MergedFlags
     * }
     */
    public static int MergedFlags(MemorySegment struct) {
        return struct.get(MergedFlags$LAYOUT, MergedFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeFlags MergedFlags
     * }
     */
    public static void MergedFlags(MemorySegment struct, int fieldValue) {
        struct.set(MergedFlags$LAYOUT, MergedFlags$OFFSET, fieldValue);
    }

    private static final OfInt State$LAYOUT = (OfInt)$LAYOUT.select(groupElement("State"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNodeState State
     * }
     */
    public static final OfInt State$layout() {
        return State$LAYOUT;
    }

    private static final long State$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNodeState State
     * }
     */
    public static final long State$offset() {
        return State$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeState State
     * }
     */
    public static int State(MemorySegment struct) {
        return struct.get(State$LAYOUT, State$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNodeState State
     * }
     */
    public static void State(MemorySegment struct, int fieldValue) {
        struct.set(State$LAYOUT, State$OFFSET, fieldValue);
    }

    private static final AddressLayout ParentNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ParentNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ParentNode
     * }
     */
    public static final AddressLayout ParentNode$layout() {
        return ParentNode$LAYOUT;
    }

    private static final long ParentNode$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ParentNode
     * }
     */
    public static final long ParentNode$offset() {
        return ParentNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ParentNode
     * }
     */
    public static MemorySegment ParentNode(MemorySegment struct) {
        return struct.get(ParentNode$LAYOUT, ParentNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ParentNode
     * }
     */
    public static void ParentNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ParentNode$LAYOUT, ParentNode$OFFSET, fieldValue);
    }

    private static final SequenceLayout ChildNodes$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ChildNodes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ChildNodes[2]
     * }
     */
    public static final SequenceLayout ChildNodes$layout() {
        return ChildNodes$LAYOUT;
    }

    private static final long ChildNodes$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ChildNodes[2]
     * }
     */
    public static final long ChildNodes$offset() {
        return ChildNodes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ChildNodes[2]
     * }
     */
    public static MemorySegment ChildNodes(MemorySegment struct) {
        return struct.asSlice(ChildNodes$OFFSET, ChildNodes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ChildNodes[2]
     * }
     */
    public static void ChildNodes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ChildNodes$OFFSET, ChildNodes$LAYOUT.byteSize());
    }

    private static long[] ChildNodes$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImGuiDockNode *ChildNodes[2]
     * }
     */
    public static long[] ChildNodes$dimensions() {
        return ChildNodes$DIMS;
    }
    private static final VarHandle ChildNodes$ELEM_HANDLE = ChildNodes$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ChildNodes[2]
     * }
     */
    public static MemorySegment ChildNodes(MemorySegment struct, long index0) {
        return (MemorySegment)ChildNodes$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *ChildNodes[2]
     * }
     */
    public static void ChildNodes(MemorySegment struct, long index0, MemorySegment fieldValue) {
        ChildNodes$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout Windows$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Windows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr Windows
     * }
     */
    public static final GroupLayout Windows$layout() {
        return Windows$LAYOUT;
    }

    private static final long Windows$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr Windows
     * }
     */
    public static final long Windows$offset() {
        return Windows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr Windows
     * }
     */
    public static MemorySegment Windows(MemorySegment struct) {
        return struct.asSlice(Windows$OFFSET, Windows$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiWindowPtr Windows
     * }
     */
    public static void Windows(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Windows$OFFSET, Windows$LAYOUT.byteSize());
    }

    private static final AddressLayout TabBar$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TabBar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTabBar *TabBar
     * }
     */
    public static final AddressLayout TabBar$layout() {
        return TabBar$LAYOUT;
    }

    private static final long TabBar$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTabBar *TabBar
     * }
     */
    public static final long TabBar$offset() {
        return TabBar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTabBar *TabBar
     * }
     */
    public static MemorySegment TabBar(MemorySegment struct) {
        return struct.get(TabBar$LAYOUT, TabBar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTabBar *TabBar
     * }
     */
    public static void TabBar(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TabBar$LAYOUT, TabBar$OFFSET, fieldValue);
    }

    private static final GroupLayout Pos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static final GroupLayout Pos$layout() {
        return Pos$LAYOUT;
    }

    private static final long Pos$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static final long Pos$offset() {
        return Pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static MemorySegment Pos(MemorySegment struct) {
        return struct.asSlice(Pos$OFFSET, Pos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static void Pos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Pos$OFFSET, Pos$LAYOUT.byteSize());
    }

    private static final GroupLayout Size$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 Size
     * }
     */
    public static final GroupLayout Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 Size
     * }
     */
    public static MemorySegment Size(MemorySegment struct) {
        return struct.asSlice(Size$OFFSET, Size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 Size
     * }
     */
    public static void Size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Size$OFFSET, Size$LAYOUT.byteSize());
    }

    private static final GroupLayout SizeRef$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SizeRef"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 SizeRef
     * }
     */
    public static final GroupLayout SizeRef$layout() {
        return SizeRef$LAYOUT;
    }

    private static final long SizeRef$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 SizeRef
     * }
     */
    public static final long SizeRef$offset() {
        return SizeRef$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 SizeRef
     * }
     */
    public static MemorySegment SizeRef(MemorySegment struct) {
        return struct.asSlice(SizeRef$OFFSET, SizeRef$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 SizeRef
     * }
     */
    public static void SizeRef(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SizeRef$OFFSET, SizeRef$LAYOUT.byteSize());
    }

    private static final OfInt SplitAxis$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SplitAxis"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiAxis SplitAxis
     * }
     */
    public static final OfInt SplitAxis$layout() {
        return SplitAxis$LAYOUT;
    }

    private static final long SplitAxis$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiAxis SplitAxis
     * }
     */
    public static final long SplitAxis$offset() {
        return SplitAxis$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiAxis SplitAxis
     * }
     */
    public static int SplitAxis(MemorySegment struct) {
        return struct.get(SplitAxis$LAYOUT, SplitAxis$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiAxis SplitAxis
     * }
     */
    public static void SplitAxis(MemorySegment struct, int fieldValue) {
        struct.set(SplitAxis$LAYOUT, SplitAxis$OFFSET, fieldValue);
    }

    private static final GroupLayout WindowClass$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindowClass WindowClass
     * }
     */
    public static final GroupLayout WindowClass$layout() {
        return WindowClass$LAYOUT;
    }

    private static final long WindowClass$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindowClass WindowClass
     * }
     */
    public static final long WindowClass$offset() {
        return WindowClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindowClass WindowClass
     * }
     */
    public static MemorySegment WindowClass(MemorySegment struct) {
        return struct.asSlice(WindowClass$OFFSET, WindowClass$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindowClass WindowClass
     * }
     */
    public static void WindowClass(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowClass$OFFSET, WindowClass$LAYOUT.byteSize());
    }

    private static final OfInt LastBgColor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastBgColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 LastBgColor
     * }
     */
    public static final OfInt LastBgColor$layout() {
        return LastBgColor$LAYOUT;
    }

    private static final long LastBgColor$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 LastBgColor
     * }
     */
    public static final long LastBgColor$offset() {
        return LastBgColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 LastBgColor
     * }
     */
    public static int LastBgColor(MemorySegment struct) {
        return struct.get(LastBgColor$LAYOUT, LastBgColor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 LastBgColor
     * }
     */
    public static void LastBgColor(MemorySegment struct, int fieldValue) {
        struct.set(LastBgColor$LAYOUT, LastBgColor$OFFSET, fieldValue);
    }

    private static final AddressLayout HostWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("HostWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *HostWindow
     * }
     */
    public static final AddressLayout HostWindow$layout() {
        return HostWindow$LAYOUT;
    }

    private static final long HostWindow$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *HostWindow
     * }
     */
    public static final long HostWindow$offset() {
        return HostWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *HostWindow
     * }
     */
    public static MemorySegment HostWindow(MemorySegment struct) {
        return struct.get(HostWindow$LAYOUT, HostWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *HostWindow
     * }
     */
    public static void HostWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(HostWindow$LAYOUT, HostWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout VisibleWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("VisibleWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *VisibleWindow
     * }
     */
    public static final AddressLayout VisibleWindow$layout() {
        return VisibleWindow$LAYOUT;
    }

    private static final long VisibleWindow$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *VisibleWindow
     * }
     */
    public static final long VisibleWindow$offset() {
        return VisibleWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *VisibleWindow
     * }
     */
    public static MemorySegment VisibleWindow(MemorySegment struct) {
        return struct.get(VisibleWindow$LAYOUT, VisibleWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *VisibleWindow
     * }
     */
    public static void VisibleWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(VisibleWindow$LAYOUT, VisibleWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout CentralNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("CentralNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNode *CentralNode
     * }
     */
    public static final AddressLayout CentralNode$layout() {
        return CentralNode$LAYOUT;
    }

    private static final long CentralNode$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNode *CentralNode
     * }
     */
    public static final long CentralNode$offset() {
        return CentralNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *CentralNode
     * }
     */
    public static MemorySegment CentralNode(MemorySegment struct) {
        return struct.get(CentralNode$LAYOUT, CentralNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *CentralNode
     * }
     */
    public static void CentralNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(CentralNode$LAYOUT, CentralNode$OFFSET, fieldValue);
    }

    private static final AddressLayout OnlyNodeWithWindows$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnlyNodeWithWindows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNode *OnlyNodeWithWindows
     * }
     */
    public static final AddressLayout OnlyNodeWithWindows$layout() {
        return OnlyNodeWithWindows$LAYOUT;
    }

    private static final long OnlyNodeWithWindows$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNode *OnlyNodeWithWindows
     * }
     */
    public static final long OnlyNodeWithWindows$offset() {
        return OnlyNodeWithWindows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *OnlyNodeWithWindows
     * }
     */
    public static MemorySegment OnlyNodeWithWindows(MemorySegment struct) {
        return struct.get(OnlyNodeWithWindows$LAYOUT, OnlyNodeWithWindows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *OnlyNodeWithWindows
     * }
     */
    public static void OnlyNodeWithWindows(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnlyNodeWithWindows$LAYOUT, OnlyNodeWithWindows$OFFSET, fieldValue);
    }

    private static final OfInt CountNodeWithWindows$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CountNodeWithWindows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int CountNodeWithWindows
     * }
     */
    public static final OfInt CountNodeWithWindows$layout() {
        return CountNodeWithWindows$LAYOUT;
    }

    private static final long CountNodeWithWindows$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int CountNodeWithWindows
     * }
     */
    public static final long CountNodeWithWindows$offset() {
        return CountNodeWithWindows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int CountNodeWithWindows
     * }
     */
    public static int CountNodeWithWindows(MemorySegment struct) {
        return struct.get(CountNodeWithWindows$LAYOUT, CountNodeWithWindows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int CountNodeWithWindows
     * }
     */
    public static void CountNodeWithWindows(MemorySegment struct, int fieldValue) {
        struct.set(CountNodeWithWindows$LAYOUT, CountNodeWithWindows$OFFSET, fieldValue);
    }

    private static final OfInt LastFrameAlive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFrameAlive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastFrameAlive
     * }
     */
    public static final OfInt LastFrameAlive$layout() {
        return LastFrameAlive$LAYOUT;
    }

    private static final long LastFrameAlive$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastFrameAlive
     * }
     */
    public static final long LastFrameAlive$offset() {
        return LastFrameAlive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastFrameAlive
     * }
     */
    public static int LastFrameAlive(MemorySegment struct) {
        return struct.get(LastFrameAlive$LAYOUT, LastFrameAlive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastFrameAlive
     * }
     */
    public static void LastFrameAlive(MemorySegment struct, int fieldValue) {
        struct.set(LastFrameAlive$LAYOUT, LastFrameAlive$OFFSET, fieldValue);
    }

    private static final OfInt LastFrameActive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFrameActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final OfInt LastFrameActive$layout() {
        return LastFrameActive$LAYOUT;
    }

    private static final long LastFrameActive$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final long LastFrameActive$offset() {
        return LastFrameActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static int LastFrameActive(MemorySegment struct) {
        return struct.get(LastFrameActive$LAYOUT, LastFrameActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static void LastFrameActive(MemorySegment struct, int fieldValue) {
        struct.set(LastFrameActive$LAYOUT, LastFrameActive$OFFSET, fieldValue);
    }

    private static final OfInt LastFrameFocused$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFrameFocused"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastFrameFocused
     * }
     */
    public static final OfInt LastFrameFocused$layout() {
        return LastFrameFocused$LAYOUT;
    }

    private static final long LastFrameFocused$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastFrameFocused
     * }
     */
    public static final long LastFrameFocused$offset() {
        return LastFrameFocused$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastFrameFocused
     * }
     */
    public static int LastFrameFocused(MemorySegment struct) {
        return struct.get(LastFrameFocused$LAYOUT, LastFrameFocused$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastFrameFocused
     * }
     */
    public static void LastFrameFocused(MemorySegment struct, int fieldValue) {
        struct.set(LastFrameFocused$LAYOUT, LastFrameFocused$OFFSET, fieldValue);
    }

    private static final OfInt LastFocusedNodeId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFocusedNodeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID LastFocusedNodeId
     * }
     */
    public static final OfInt LastFocusedNodeId$layout() {
        return LastFocusedNodeId$LAYOUT;
    }

    private static final long LastFocusedNodeId$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID LastFocusedNodeId
     * }
     */
    public static final long LastFocusedNodeId$offset() {
        return LastFocusedNodeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID LastFocusedNodeId
     * }
     */
    public static int LastFocusedNodeId(MemorySegment struct) {
        return struct.get(LastFocusedNodeId$LAYOUT, LastFocusedNodeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID LastFocusedNodeId
     * }
     */
    public static void LastFocusedNodeId(MemorySegment struct, int fieldValue) {
        struct.set(LastFocusedNodeId$LAYOUT, LastFocusedNodeId$OFFSET, fieldValue);
    }

    private static final OfInt SelectedTabId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SelectedTabId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID SelectedTabId
     * }
     */
    public static final OfInt SelectedTabId$layout() {
        return SelectedTabId$LAYOUT;
    }

    private static final long SelectedTabId$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID SelectedTabId
     * }
     */
    public static final long SelectedTabId$offset() {
        return SelectedTabId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID SelectedTabId
     * }
     */
    public static int SelectedTabId(MemorySegment struct) {
        return struct.get(SelectedTabId$LAYOUT, SelectedTabId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID SelectedTabId
     * }
     */
    public static void SelectedTabId(MemorySegment struct, int fieldValue) {
        struct.set(SelectedTabId$LAYOUT, SelectedTabId$OFFSET, fieldValue);
    }

    private static final OfInt WantCloseTabId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("WantCloseTabId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID WantCloseTabId
     * }
     */
    public static final OfInt WantCloseTabId$layout() {
        return WantCloseTabId$LAYOUT;
    }

    private static final long WantCloseTabId$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID WantCloseTabId
     * }
     */
    public static final long WantCloseTabId$offset() {
        return WantCloseTabId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID WantCloseTabId
     * }
     */
    public static int WantCloseTabId(MemorySegment struct) {
        return struct.get(WantCloseTabId$LAYOUT, WantCloseTabId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID WantCloseTabId
     * }
     */
    public static void WantCloseTabId(MemorySegment struct, int fieldValue) {
        struct.set(WantCloseTabId$LAYOUT, WantCloseTabId$OFFSET, fieldValue);
    }

    private static final OfInt RefViewportId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RefViewportId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID RefViewportId
     * }
     */
    public static final OfInt RefViewportId$layout() {
        return RefViewportId$LAYOUT;
    }

    private static final long RefViewportId$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID RefViewportId
     * }
     */
    public static final long RefViewportId$offset() {
        return RefViewportId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID RefViewportId
     * }
     */
    public static int RefViewportId(MemorySegment struct) {
        return struct.get(RefViewportId$LAYOUT, RefViewportId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID RefViewportId
     * }
     */
    public static void RefViewportId(MemorySegment struct, int fieldValue) {
        struct.set(RefViewportId$LAYOUT, RefViewportId$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

