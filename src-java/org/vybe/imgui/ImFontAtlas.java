// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImFontAtlas {
 *     ImFontAtlasFlags Flags;
 *     ImTextureID TexID;
 *     int TexDesiredWidth;
 *     int TexGlyphPadding;
 *     bool Locked;
 *     void *UserData;
 *     bool TexReady;
 *     bool TexPixelsUseColors;
 *     unsigned char *TexPixelsAlpha8;
 *     unsigned int *TexPixelsRGBA32;
 *     int TexWidth;
 *     int TexHeight;
 *     ImVec2 TexUvScale;
 *     ImVec2 TexUvWhitePixel;
 *     ImVector_ImFontPtr Fonts;
 *     ImVector_ImFontAtlasCustomRect CustomRects;
 *     ImVector_ImFontConfig ConfigData;
 *     ImVec4 TexUvLines[64];
 *     const ImFontBuilderIO *FontBuilderIO;
 *     unsigned int FontBuilderFlags;
 *     int PackIdMouseCursors;
 *     int PackIdLines;
 * }
 * }
 */
public class ImFontAtlas {

    ImFontAtlas() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("Flags"),
        MemoryLayout.paddingLayout(4),
        imgui.C_POINTER.withName("TexID"),
        imgui.C_INT.withName("TexDesiredWidth"),
        imgui.C_INT.withName("TexGlyphPadding"),
        imgui.C_BOOL.withName("Locked"),
        MemoryLayout.paddingLayout(7),
        imgui.C_POINTER.withName("UserData"),
        imgui.C_BOOL.withName("TexReady"),
        imgui.C_BOOL.withName("TexPixelsUseColors"),
        MemoryLayout.paddingLayout(6),
        imgui.C_POINTER.withName("TexPixelsAlpha8"),
        imgui.C_POINTER.withName("TexPixelsRGBA32"),
        imgui.C_INT.withName("TexWidth"),
        imgui.C_INT.withName("TexHeight"),
        ImVec2.layout().withName("TexUvScale"),
        ImVec2.layout().withName("TexUvWhitePixel"),
        ImVector_ImFontPtr.layout().withName("Fonts"),
        ImVector_ImFontAtlasCustomRect.layout().withName("CustomRects"),
        ImVector_ImFontConfig.layout().withName("ConfigData"),
        MemoryLayout.sequenceLayout(64, ImVec4.layout()).withName("TexUvLines"),
        imgui.C_POINTER.withName("FontBuilderIO"),
        imgui.C_INT.withName("FontBuilderFlags"),
        imgui.C_INT.withName("PackIdMouseCursors"),
        imgui.C_INT.withName("PackIdLines"),
        MemoryLayout.paddingLayout(4)
    ).withName("ImFontAtlas");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImFontAtlasFlags Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImFontAtlasFlags Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImFontAtlasFlags Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImFontAtlasFlags Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final AddressLayout TexID$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TexID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImTextureID TexID
     * }
     */
    public static final AddressLayout TexID$layout() {
        return TexID$LAYOUT;
    }

    private static final long TexID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImTextureID TexID
     * }
     */
    public static final long TexID$offset() {
        return TexID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImTextureID TexID
     * }
     */
    public static MemorySegment TexID(MemorySegment struct) {
        return struct.get(TexID$LAYOUT, TexID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImTextureID TexID
     * }
     */
    public static void TexID(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TexID$LAYOUT, TexID$OFFSET, fieldValue);
    }

    private static final OfInt TexDesiredWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TexDesiredWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int TexDesiredWidth
     * }
     */
    public static final OfInt TexDesiredWidth$layout() {
        return TexDesiredWidth$LAYOUT;
    }

    private static final long TexDesiredWidth$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int TexDesiredWidth
     * }
     */
    public static final long TexDesiredWidth$offset() {
        return TexDesiredWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int TexDesiredWidth
     * }
     */
    public static int TexDesiredWidth(MemorySegment struct) {
        return struct.get(TexDesiredWidth$LAYOUT, TexDesiredWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int TexDesiredWidth
     * }
     */
    public static void TexDesiredWidth(MemorySegment struct, int fieldValue) {
        struct.set(TexDesiredWidth$LAYOUT, TexDesiredWidth$OFFSET, fieldValue);
    }

    private static final OfInt TexGlyphPadding$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TexGlyphPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int TexGlyphPadding
     * }
     */
    public static final OfInt TexGlyphPadding$layout() {
        return TexGlyphPadding$LAYOUT;
    }

    private static final long TexGlyphPadding$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int TexGlyphPadding
     * }
     */
    public static final long TexGlyphPadding$offset() {
        return TexGlyphPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int TexGlyphPadding
     * }
     */
    public static int TexGlyphPadding(MemorySegment struct) {
        return struct.get(TexGlyphPadding$LAYOUT, TexGlyphPadding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int TexGlyphPadding
     * }
     */
    public static void TexGlyphPadding(MemorySegment struct, int fieldValue) {
        struct.set(TexGlyphPadding$LAYOUT, TexGlyphPadding$OFFSET, fieldValue);
    }

    private static final OfBoolean Locked$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("Locked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool Locked
     * }
     */
    public static final OfBoolean Locked$layout() {
        return Locked$LAYOUT;
    }

    private static final long Locked$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool Locked
     * }
     */
    public static final long Locked$offset() {
        return Locked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool Locked
     * }
     */
    public static boolean Locked(MemorySegment struct) {
        return struct.get(Locked$LAYOUT, Locked$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool Locked
     * }
     */
    public static void Locked(MemorySegment struct, boolean fieldValue) {
        struct.set(Locked$LAYOUT, Locked$OFFSET, fieldValue);
    }

    private static final AddressLayout UserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static final AddressLayout UserData$layout() {
        return UserData$LAYOUT;
    }

    private static final long UserData$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static final long UserData$offset() {
        return UserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static MemorySegment UserData(MemorySegment struct) {
        return struct.get(UserData$LAYOUT, UserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static void UserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(UserData$LAYOUT, UserData$OFFSET, fieldValue);
    }

    private static final OfBoolean TexReady$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("TexReady"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool TexReady
     * }
     */
    public static final OfBoolean TexReady$layout() {
        return TexReady$LAYOUT;
    }

    private static final long TexReady$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool TexReady
     * }
     */
    public static final long TexReady$offset() {
        return TexReady$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool TexReady
     * }
     */
    public static boolean TexReady(MemorySegment struct) {
        return struct.get(TexReady$LAYOUT, TexReady$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool TexReady
     * }
     */
    public static void TexReady(MemorySegment struct, boolean fieldValue) {
        struct.set(TexReady$LAYOUT, TexReady$OFFSET, fieldValue);
    }

    private static final OfBoolean TexPixelsUseColors$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("TexPixelsUseColors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool TexPixelsUseColors
     * }
     */
    public static final OfBoolean TexPixelsUseColors$layout() {
        return TexPixelsUseColors$LAYOUT;
    }

    private static final long TexPixelsUseColors$OFFSET = 41;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool TexPixelsUseColors
     * }
     */
    public static final long TexPixelsUseColors$offset() {
        return TexPixelsUseColors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool TexPixelsUseColors
     * }
     */
    public static boolean TexPixelsUseColors(MemorySegment struct) {
        return struct.get(TexPixelsUseColors$LAYOUT, TexPixelsUseColors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool TexPixelsUseColors
     * }
     */
    public static void TexPixelsUseColors(MemorySegment struct, boolean fieldValue) {
        struct.set(TexPixelsUseColors$LAYOUT, TexPixelsUseColors$OFFSET, fieldValue);
    }

    private static final AddressLayout TexPixelsAlpha8$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TexPixelsAlpha8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned char *TexPixelsAlpha8
     * }
     */
    public static final AddressLayout TexPixelsAlpha8$layout() {
        return TexPixelsAlpha8$LAYOUT;
    }

    private static final long TexPixelsAlpha8$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned char *TexPixelsAlpha8
     * }
     */
    public static final long TexPixelsAlpha8$offset() {
        return TexPixelsAlpha8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char *TexPixelsAlpha8
     * }
     */
    public static MemorySegment TexPixelsAlpha8(MemorySegment struct) {
        return struct.get(TexPixelsAlpha8$LAYOUT, TexPixelsAlpha8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char *TexPixelsAlpha8
     * }
     */
    public static void TexPixelsAlpha8(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TexPixelsAlpha8$LAYOUT, TexPixelsAlpha8$OFFSET, fieldValue);
    }

    private static final AddressLayout TexPixelsRGBA32$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TexPixelsRGBA32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int *TexPixelsRGBA32
     * }
     */
    public static final AddressLayout TexPixelsRGBA32$layout() {
        return TexPixelsRGBA32$LAYOUT;
    }

    private static final long TexPixelsRGBA32$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int *TexPixelsRGBA32
     * }
     */
    public static final long TexPixelsRGBA32$offset() {
        return TexPixelsRGBA32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int *TexPixelsRGBA32
     * }
     */
    public static MemorySegment TexPixelsRGBA32(MemorySegment struct) {
        return struct.get(TexPixelsRGBA32$LAYOUT, TexPixelsRGBA32$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int *TexPixelsRGBA32
     * }
     */
    public static void TexPixelsRGBA32(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TexPixelsRGBA32$LAYOUT, TexPixelsRGBA32$OFFSET, fieldValue);
    }

    private static final OfInt TexWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TexWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int TexWidth
     * }
     */
    public static final OfInt TexWidth$layout() {
        return TexWidth$LAYOUT;
    }

    private static final long TexWidth$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int TexWidth
     * }
     */
    public static final long TexWidth$offset() {
        return TexWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int TexWidth
     * }
     */
    public static int TexWidth(MemorySegment struct) {
        return struct.get(TexWidth$LAYOUT, TexWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int TexWidth
     * }
     */
    public static void TexWidth(MemorySegment struct, int fieldValue) {
        struct.set(TexWidth$LAYOUT, TexWidth$OFFSET, fieldValue);
    }

    private static final OfInt TexHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TexHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int TexHeight
     * }
     */
    public static final OfInt TexHeight$layout() {
        return TexHeight$LAYOUT;
    }

    private static final long TexHeight$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int TexHeight
     * }
     */
    public static final long TexHeight$offset() {
        return TexHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int TexHeight
     * }
     */
    public static int TexHeight(MemorySegment struct) {
        return struct.get(TexHeight$LAYOUT, TexHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int TexHeight
     * }
     */
    public static void TexHeight(MemorySegment struct, int fieldValue) {
        struct.set(TexHeight$LAYOUT, TexHeight$OFFSET, fieldValue);
    }

    private static final GroupLayout TexUvScale$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TexUvScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 TexUvScale
     * }
     */
    public static final GroupLayout TexUvScale$layout() {
        return TexUvScale$LAYOUT;
    }

    private static final long TexUvScale$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 TexUvScale
     * }
     */
    public static final long TexUvScale$offset() {
        return TexUvScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 TexUvScale
     * }
     */
    public static MemorySegment TexUvScale(MemorySegment struct) {
        return struct.asSlice(TexUvScale$OFFSET, TexUvScale$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 TexUvScale
     * }
     */
    public static void TexUvScale(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TexUvScale$OFFSET, TexUvScale$LAYOUT.byteSize());
    }

    private static final GroupLayout TexUvWhitePixel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("TexUvWhitePixel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 TexUvWhitePixel
     * }
     */
    public static final GroupLayout TexUvWhitePixel$layout() {
        return TexUvWhitePixel$LAYOUT;
    }

    private static final long TexUvWhitePixel$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 TexUvWhitePixel
     * }
     */
    public static final long TexUvWhitePixel$offset() {
        return TexUvWhitePixel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 TexUvWhitePixel
     * }
     */
    public static MemorySegment TexUvWhitePixel(MemorySegment struct) {
        return struct.asSlice(TexUvWhitePixel$OFFSET, TexUvWhitePixel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 TexUvWhitePixel
     * }
     */
    public static void TexUvWhitePixel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TexUvWhitePixel$OFFSET, TexUvWhitePixel$LAYOUT.byteSize());
    }

    private static final GroupLayout Fonts$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Fonts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImFontPtr Fonts
     * }
     */
    public static final GroupLayout Fonts$layout() {
        return Fonts$LAYOUT;
    }

    private static final long Fonts$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImFontPtr Fonts
     * }
     */
    public static final long Fonts$offset() {
        return Fonts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImFontPtr Fonts
     * }
     */
    public static MemorySegment Fonts(MemorySegment struct) {
        return struct.asSlice(Fonts$OFFSET, Fonts$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImFontPtr Fonts
     * }
     */
    public static void Fonts(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Fonts$OFFSET, Fonts$LAYOUT.byteSize());
    }

    private static final GroupLayout CustomRects$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CustomRects"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImFontAtlasCustomRect CustomRects
     * }
     */
    public static final GroupLayout CustomRects$layout() {
        return CustomRects$LAYOUT;
    }

    private static final long CustomRects$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImFontAtlasCustomRect CustomRects
     * }
     */
    public static final long CustomRects$offset() {
        return CustomRects$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImFontAtlasCustomRect CustomRects
     * }
     */
    public static MemorySegment CustomRects(MemorySegment struct) {
        return struct.asSlice(CustomRects$OFFSET, CustomRects$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImFontAtlasCustomRect CustomRects
     * }
     */
    public static void CustomRects(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CustomRects$OFFSET, CustomRects$LAYOUT.byteSize());
    }

    private static final GroupLayout ConfigData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ConfigData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImFontConfig ConfigData
     * }
     */
    public static final GroupLayout ConfigData$layout() {
        return ConfigData$LAYOUT;
    }

    private static final long ConfigData$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImFontConfig ConfigData
     * }
     */
    public static final long ConfigData$offset() {
        return ConfigData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImFontConfig ConfigData
     * }
     */
    public static MemorySegment ConfigData(MemorySegment struct) {
        return struct.asSlice(ConfigData$OFFSET, ConfigData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImFontConfig ConfigData
     * }
     */
    public static void ConfigData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ConfigData$OFFSET, ConfigData$LAYOUT.byteSize());
    }

    private static final SequenceLayout TexUvLines$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("TexUvLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec4 TexUvLines[64]
     * }
     */
    public static final SequenceLayout TexUvLines$layout() {
        return TexUvLines$LAYOUT;
    }

    private static final long TexUvLines$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec4 TexUvLines[64]
     * }
     */
    public static final long TexUvLines$offset() {
        return TexUvLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec4 TexUvLines[64]
     * }
     */
    public static MemorySegment TexUvLines(MemorySegment struct) {
        return struct.asSlice(TexUvLines$OFFSET, TexUvLines$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec4 TexUvLines[64]
     * }
     */
    public static void TexUvLines(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, TexUvLines$OFFSET, TexUvLines$LAYOUT.byteSize());
    }

    private static long[] TexUvLines$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImVec4 TexUvLines[64]
     * }
     */
    public static long[] TexUvLines$dimensions() {
        return TexUvLines$DIMS;
    }
    private static final MethodHandle TexUvLines$ELEM_HANDLE = TexUvLines$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImVec4 TexUvLines[64]
     * }
     */
    public static MemorySegment TexUvLines(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)TexUvLines$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImVec4 TexUvLines[64]
     * }
     */
    public static void TexUvLines(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, TexUvLines(struct, index0), 0L, ImVec4.layout().byteSize());
    }

    private static final AddressLayout FontBuilderIO$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("FontBuilderIO"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ImFontBuilderIO *FontBuilderIO
     * }
     */
    public static final AddressLayout FontBuilderIO$layout() {
        return FontBuilderIO$LAYOUT;
    }

    private static final long FontBuilderIO$OFFSET = 1160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ImFontBuilderIO *FontBuilderIO
     * }
     */
    public static final long FontBuilderIO$offset() {
        return FontBuilderIO$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ImFontBuilderIO *FontBuilderIO
     * }
     */
    public static MemorySegment FontBuilderIO(MemorySegment struct) {
        return struct.get(FontBuilderIO$LAYOUT, FontBuilderIO$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ImFontBuilderIO *FontBuilderIO
     * }
     */
    public static void FontBuilderIO(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(FontBuilderIO$LAYOUT, FontBuilderIO$OFFSET, fieldValue);
    }

    private static final OfInt FontBuilderFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FontBuilderFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int FontBuilderFlags
     * }
     */
    public static final OfInt FontBuilderFlags$layout() {
        return FontBuilderFlags$LAYOUT;
    }

    private static final long FontBuilderFlags$OFFSET = 1168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int FontBuilderFlags
     * }
     */
    public static final long FontBuilderFlags$offset() {
        return FontBuilderFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int FontBuilderFlags
     * }
     */
    public static int FontBuilderFlags(MemorySegment struct) {
        return struct.get(FontBuilderFlags$LAYOUT, FontBuilderFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int FontBuilderFlags
     * }
     */
    public static void FontBuilderFlags(MemorySegment struct, int fieldValue) {
        struct.set(FontBuilderFlags$LAYOUT, FontBuilderFlags$OFFSET, fieldValue);
    }

    private static final OfInt PackIdMouseCursors$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PackIdMouseCursors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int PackIdMouseCursors
     * }
     */
    public static final OfInt PackIdMouseCursors$layout() {
        return PackIdMouseCursors$LAYOUT;
    }

    private static final long PackIdMouseCursors$OFFSET = 1172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int PackIdMouseCursors
     * }
     */
    public static final long PackIdMouseCursors$offset() {
        return PackIdMouseCursors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int PackIdMouseCursors
     * }
     */
    public static int PackIdMouseCursors(MemorySegment struct) {
        return struct.get(PackIdMouseCursors$LAYOUT, PackIdMouseCursors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int PackIdMouseCursors
     * }
     */
    public static void PackIdMouseCursors(MemorySegment struct, int fieldValue) {
        struct.set(PackIdMouseCursors$LAYOUT, PackIdMouseCursors$OFFSET, fieldValue);
    }

    private static final OfInt PackIdLines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PackIdLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int PackIdLines
     * }
     */
    public static final OfInt PackIdLines$layout() {
        return PackIdLines$LAYOUT;
    }

    private static final long PackIdLines$OFFSET = 1176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int PackIdLines
     * }
     */
    public static final long PackIdLines$offset() {
        return PackIdLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int PackIdLines
     * }
     */
    public static int PackIdLines(MemorySegment struct) {
        return struct.get(PackIdLines$LAYOUT, PackIdLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int PackIdLines
     * }
     */
    public static void PackIdLines(MemorySegment struct, int fieldValue) {
        struct.set(PackIdLines$LAYOUT, PackIdLines$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

