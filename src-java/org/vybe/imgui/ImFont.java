// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImFont {
 *     ImVector_float IndexAdvanceX;
 *     float FallbackAdvanceX;
 *     float FontSize;
 *     ImVector_ImWchar IndexLookup;
 *     ImVector_ImFontGlyph Glyphs;
 *     const ImFontGlyph *FallbackGlyph;
 *     ImFontAtlas *ContainerAtlas;
 *     const ImFontConfig *ConfigData;
 *     short ConfigDataCount;
 *     ImWchar FallbackChar;
 *     ImWchar EllipsisChar;
 *     short EllipsisCharCount;
 *     float EllipsisWidth;
 *     float EllipsisCharStep;
 *     bool DirtyLookupTables;
 *     float Scale;
 *     float Ascent;
 *     float Descent;
 *     int MetricsTotalSurface;
 *     ImU8 Used4kPagesMap[2];
 * }
 * }
 */
public class ImFont {

    ImFont() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImVector_float.layout().withName("IndexAdvanceX"),
        imgui.C_FLOAT.withName("FallbackAdvanceX"),
        imgui.C_FLOAT.withName("FontSize"),
        ImVector_ImWchar.layout().withName("IndexLookup"),
        ImVector_ImFontGlyph.layout().withName("Glyphs"),
        imgui.C_POINTER.withName("FallbackGlyph"),
        imgui.C_POINTER.withName("ContainerAtlas"),
        imgui.C_POINTER.withName("ConfigData"),
        imgui.C_SHORT.withName("ConfigDataCount"),
        imgui.C_SHORT.withName("FallbackChar"),
        imgui.C_SHORT.withName("EllipsisChar"),
        imgui.C_SHORT.withName("EllipsisCharCount"),
        imgui.C_FLOAT.withName("EllipsisWidth"),
        imgui.C_FLOAT.withName("EllipsisCharStep"),
        imgui.C_BOOL.withName("DirtyLookupTables"),
        MemoryLayout.paddingLayout(3),
        imgui.C_FLOAT.withName("Scale"),
        imgui.C_FLOAT.withName("Ascent"),
        imgui.C_FLOAT.withName("Descent"),
        imgui.C_INT.withName("MetricsTotalSurface"),
        MemoryLayout.sequenceLayout(2, imgui.C_CHAR).withName("Used4kPagesMap"),
        MemoryLayout.paddingLayout(2)
    ).withName("ImFont");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout IndexAdvanceX$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IndexAdvanceX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_float IndexAdvanceX
     * }
     */
    public static final GroupLayout IndexAdvanceX$layout() {
        return IndexAdvanceX$LAYOUT;
    }

    private static final long IndexAdvanceX$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_float IndexAdvanceX
     * }
     */
    public static final long IndexAdvanceX$offset() {
        return IndexAdvanceX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_float IndexAdvanceX
     * }
     */
    public static MemorySegment IndexAdvanceX(MemorySegment struct) {
        return struct.asSlice(IndexAdvanceX$OFFSET, IndexAdvanceX$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_float IndexAdvanceX
     * }
     */
    public static void IndexAdvanceX(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, IndexAdvanceX$OFFSET, IndexAdvanceX$LAYOUT.byteSize());
    }

    private static final OfFloat FallbackAdvanceX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FallbackAdvanceX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FallbackAdvanceX
     * }
     */
    public static final OfFloat FallbackAdvanceX$layout() {
        return FallbackAdvanceX$LAYOUT;
    }

    private static final long FallbackAdvanceX$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FallbackAdvanceX
     * }
     */
    public static final long FallbackAdvanceX$offset() {
        return FallbackAdvanceX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FallbackAdvanceX
     * }
     */
    public static float FallbackAdvanceX(MemorySegment struct) {
        return struct.get(FallbackAdvanceX$LAYOUT, FallbackAdvanceX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FallbackAdvanceX
     * }
     */
    public static void FallbackAdvanceX(MemorySegment struct, float fieldValue) {
        struct.set(FallbackAdvanceX$LAYOUT, FallbackAdvanceX$OFFSET, fieldValue);
    }

    private static final OfFloat FontSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FontSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FontSize
     * }
     */
    public static final OfFloat FontSize$layout() {
        return FontSize$LAYOUT;
    }

    private static final long FontSize$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FontSize
     * }
     */
    public static final long FontSize$offset() {
        return FontSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FontSize
     * }
     */
    public static float FontSize(MemorySegment struct) {
        return struct.get(FontSize$LAYOUT, FontSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FontSize
     * }
     */
    public static void FontSize(MemorySegment struct, float fieldValue) {
        struct.set(FontSize$LAYOUT, FontSize$OFFSET, fieldValue);
    }

    private static final GroupLayout IndexLookup$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IndexLookup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImWchar IndexLookup
     * }
     */
    public static final GroupLayout IndexLookup$layout() {
        return IndexLookup$LAYOUT;
    }

    private static final long IndexLookup$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImWchar IndexLookup
     * }
     */
    public static final long IndexLookup$offset() {
        return IndexLookup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImWchar IndexLookup
     * }
     */
    public static MemorySegment IndexLookup(MemorySegment struct) {
        return struct.asSlice(IndexLookup$OFFSET, IndexLookup$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImWchar IndexLookup
     * }
     */
    public static void IndexLookup(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, IndexLookup$OFFSET, IndexLookup$LAYOUT.byteSize());
    }

    private static final GroupLayout Glyphs$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Glyphs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImFontGlyph Glyphs
     * }
     */
    public static final GroupLayout Glyphs$layout() {
        return Glyphs$LAYOUT;
    }

    private static final long Glyphs$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImFontGlyph Glyphs
     * }
     */
    public static final long Glyphs$offset() {
        return Glyphs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImFontGlyph Glyphs
     * }
     */
    public static MemorySegment Glyphs(MemorySegment struct) {
        return struct.asSlice(Glyphs$OFFSET, Glyphs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImFontGlyph Glyphs
     * }
     */
    public static void Glyphs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Glyphs$OFFSET, Glyphs$LAYOUT.byteSize());
    }

    private static final AddressLayout FallbackGlyph$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("FallbackGlyph"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ImFontGlyph *FallbackGlyph
     * }
     */
    public static final AddressLayout FallbackGlyph$layout() {
        return FallbackGlyph$LAYOUT;
    }

    private static final long FallbackGlyph$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ImFontGlyph *FallbackGlyph
     * }
     */
    public static final long FallbackGlyph$offset() {
        return FallbackGlyph$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ImFontGlyph *FallbackGlyph
     * }
     */
    public static MemorySegment FallbackGlyph(MemorySegment struct) {
        return struct.get(FallbackGlyph$LAYOUT, FallbackGlyph$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ImFontGlyph *FallbackGlyph
     * }
     */
    public static void FallbackGlyph(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(FallbackGlyph$LAYOUT, FallbackGlyph$OFFSET, fieldValue);
    }

    private static final AddressLayout ContainerAtlas$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ContainerAtlas"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImFontAtlas *ContainerAtlas
     * }
     */
    public static final AddressLayout ContainerAtlas$layout() {
        return ContainerAtlas$LAYOUT;
    }

    private static final long ContainerAtlas$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImFontAtlas *ContainerAtlas
     * }
     */
    public static final long ContainerAtlas$offset() {
        return ContainerAtlas$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImFontAtlas *ContainerAtlas
     * }
     */
    public static MemorySegment ContainerAtlas(MemorySegment struct) {
        return struct.get(ContainerAtlas$LAYOUT, ContainerAtlas$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImFontAtlas *ContainerAtlas
     * }
     */
    public static void ContainerAtlas(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ContainerAtlas$LAYOUT, ContainerAtlas$OFFSET, fieldValue);
    }

    private static final AddressLayout ConfigData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ConfigData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ImFontConfig *ConfigData
     * }
     */
    public static final AddressLayout ConfigData$layout() {
        return ConfigData$LAYOUT;
    }

    private static final long ConfigData$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ImFontConfig *ConfigData
     * }
     */
    public static final long ConfigData$offset() {
        return ConfigData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ImFontConfig *ConfigData
     * }
     */
    public static MemorySegment ConfigData(MemorySegment struct) {
        return struct.get(ConfigData$LAYOUT, ConfigData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ImFontConfig *ConfigData
     * }
     */
    public static void ConfigData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ConfigData$LAYOUT, ConfigData$OFFSET, fieldValue);
    }

    private static final OfShort ConfigDataCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ConfigDataCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short ConfigDataCount
     * }
     */
    public static final OfShort ConfigDataCount$layout() {
        return ConfigDataCount$LAYOUT;
    }

    private static final long ConfigDataCount$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short ConfigDataCount
     * }
     */
    public static final long ConfigDataCount$offset() {
        return ConfigDataCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short ConfigDataCount
     * }
     */
    public static short ConfigDataCount(MemorySegment struct) {
        return struct.get(ConfigDataCount$LAYOUT, ConfigDataCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short ConfigDataCount
     * }
     */
    public static void ConfigDataCount(MemorySegment struct, short fieldValue) {
        struct.set(ConfigDataCount$LAYOUT, ConfigDataCount$OFFSET, fieldValue);
    }

    private static final OfShort FallbackChar$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FallbackChar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImWchar FallbackChar
     * }
     */
    public static final OfShort FallbackChar$layout() {
        return FallbackChar$LAYOUT;
    }

    private static final long FallbackChar$OFFSET = 82;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImWchar FallbackChar
     * }
     */
    public static final long FallbackChar$offset() {
        return FallbackChar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImWchar FallbackChar
     * }
     */
    public static short FallbackChar(MemorySegment struct) {
        return struct.get(FallbackChar$LAYOUT, FallbackChar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImWchar FallbackChar
     * }
     */
    public static void FallbackChar(MemorySegment struct, short fieldValue) {
        struct.set(FallbackChar$LAYOUT, FallbackChar$OFFSET, fieldValue);
    }

    private static final OfShort EllipsisChar$LAYOUT = (OfShort)$LAYOUT.select(groupElement("EllipsisChar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImWchar EllipsisChar
     * }
     */
    public static final OfShort EllipsisChar$layout() {
        return EllipsisChar$LAYOUT;
    }

    private static final long EllipsisChar$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImWchar EllipsisChar
     * }
     */
    public static final long EllipsisChar$offset() {
        return EllipsisChar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImWchar EllipsisChar
     * }
     */
    public static short EllipsisChar(MemorySegment struct) {
        return struct.get(EllipsisChar$LAYOUT, EllipsisChar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImWchar EllipsisChar
     * }
     */
    public static void EllipsisChar(MemorySegment struct, short fieldValue) {
        struct.set(EllipsisChar$LAYOUT, EllipsisChar$OFFSET, fieldValue);
    }

    private static final OfShort EllipsisCharCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("EllipsisCharCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short EllipsisCharCount
     * }
     */
    public static final OfShort EllipsisCharCount$layout() {
        return EllipsisCharCount$LAYOUT;
    }

    private static final long EllipsisCharCount$OFFSET = 86;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short EllipsisCharCount
     * }
     */
    public static final long EllipsisCharCount$offset() {
        return EllipsisCharCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short EllipsisCharCount
     * }
     */
    public static short EllipsisCharCount(MemorySegment struct) {
        return struct.get(EllipsisCharCount$LAYOUT, EllipsisCharCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short EllipsisCharCount
     * }
     */
    public static void EllipsisCharCount(MemorySegment struct, short fieldValue) {
        struct.set(EllipsisCharCount$LAYOUT, EllipsisCharCount$OFFSET, fieldValue);
    }

    private static final OfFloat EllipsisWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("EllipsisWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float EllipsisWidth
     * }
     */
    public static final OfFloat EllipsisWidth$layout() {
        return EllipsisWidth$LAYOUT;
    }

    private static final long EllipsisWidth$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float EllipsisWidth
     * }
     */
    public static final long EllipsisWidth$offset() {
        return EllipsisWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float EllipsisWidth
     * }
     */
    public static float EllipsisWidth(MemorySegment struct) {
        return struct.get(EllipsisWidth$LAYOUT, EllipsisWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float EllipsisWidth
     * }
     */
    public static void EllipsisWidth(MemorySegment struct, float fieldValue) {
        struct.set(EllipsisWidth$LAYOUT, EllipsisWidth$OFFSET, fieldValue);
    }

    private static final OfFloat EllipsisCharStep$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("EllipsisCharStep"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float EllipsisCharStep
     * }
     */
    public static final OfFloat EllipsisCharStep$layout() {
        return EllipsisCharStep$LAYOUT;
    }

    private static final long EllipsisCharStep$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float EllipsisCharStep
     * }
     */
    public static final long EllipsisCharStep$offset() {
        return EllipsisCharStep$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float EllipsisCharStep
     * }
     */
    public static float EllipsisCharStep(MemorySegment struct) {
        return struct.get(EllipsisCharStep$LAYOUT, EllipsisCharStep$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float EllipsisCharStep
     * }
     */
    public static void EllipsisCharStep(MemorySegment struct, float fieldValue) {
        struct.set(EllipsisCharStep$LAYOUT, EllipsisCharStep$OFFSET, fieldValue);
    }

    private static final OfBoolean DirtyLookupTables$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("DirtyLookupTables"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool DirtyLookupTables
     * }
     */
    public static final OfBoolean DirtyLookupTables$layout() {
        return DirtyLookupTables$LAYOUT;
    }

    private static final long DirtyLookupTables$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool DirtyLookupTables
     * }
     */
    public static final long DirtyLookupTables$offset() {
        return DirtyLookupTables$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool DirtyLookupTables
     * }
     */
    public static boolean DirtyLookupTables(MemorySegment struct) {
        return struct.get(DirtyLookupTables$LAYOUT, DirtyLookupTables$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool DirtyLookupTables
     * }
     */
    public static void DirtyLookupTables(MemorySegment struct, boolean fieldValue) {
        struct.set(DirtyLookupTables$LAYOUT, DirtyLookupTables$OFFSET, fieldValue);
    }

    private static final OfFloat Scale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("Scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float Scale
     * }
     */
    public static final OfFloat Scale$layout() {
        return Scale$LAYOUT;
    }

    private static final long Scale$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float Scale
     * }
     */
    public static final long Scale$offset() {
        return Scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float Scale
     * }
     */
    public static float Scale(MemorySegment struct) {
        return struct.get(Scale$LAYOUT, Scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float Scale
     * }
     */
    public static void Scale(MemorySegment struct, float fieldValue) {
        struct.set(Scale$LAYOUT, Scale$OFFSET, fieldValue);
    }

    private static final OfFloat Ascent$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("Ascent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float Ascent
     * }
     */
    public static final OfFloat Ascent$layout() {
        return Ascent$LAYOUT;
    }

    private static final long Ascent$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float Ascent
     * }
     */
    public static final long Ascent$offset() {
        return Ascent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float Ascent
     * }
     */
    public static float Ascent(MemorySegment struct) {
        return struct.get(Ascent$LAYOUT, Ascent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float Ascent
     * }
     */
    public static void Ascent(MemorySegment struct, float fieldValue) {
        struct.set(Ascent$LAYOUT, Ascent$OFFSET, fieldValue);
    }

    private static final OfFloat Descent$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("Descent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float Descent
     * }
     */
    public static final OfFloat Descent$layout() {
        return Descent$LAYOUT;
    }

    private static final long Descent$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float Descent
     * }
     */
    public static final long Descent$offset() {
        return Descent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float Descent
     * }
     */
    public static float Descent(MemorySegment struct) {
        return struct.get(Descent$LAYOUT, Descent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float Descent
     * }
     */
    public static void Descent(MemorySegment struct, float fieldValue) {
        struct.set(Descent$LAYOUT, Descent$OFFSET, fieldValue);
    }

    private static final OfInt MetricsTotalSurface$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MetricsTotalSurface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int MetricsTotalSurface
     * }
     */
    public static final OfInt MetricsTotalSurface$layout() {
        return MetricsTotalSurface$LAYOUT;
    }

    private static final long MetricsTotalSurface$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int MetricsTotalSurface
     * }
     */
    public static final long MetricsTotalSurface$offset() {
        return MetricsTotalSurface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int MetricsTotalSurface
     * }
     */
    public static int MetricsTotalSurface(MemorySegment struct) {
        return struct.get(MetricsTotalSurface$LAYOUT, MetricsTotalSurface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int MetricsTotalSurface
     * }
     */
    public static void MetricsTotalSurface(MemorySegment struct, int fieldValue) {
        struct.set(MetricsTotalSurface$LAYOUT, MetricsTotalSurface$OFFSET, fieldValue);
    }

    private static final SequenceLayout Used4kPagesMap$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("Used4kPagesMap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU8 Used4kPagesMap[2]
     * }
     */
    public static final SequenceLayout Used4kPagesMap$layout() {
        return Used4kPagesMap$LAYOUT;
    }

    private static final long Used4kPagesMap$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU8 Used4kPagesMap[2]
     * }
     */
    public static final long Used4kPagesMap$offset() {
        return Used4kPagesMap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU8 Used4kPagesMap[2]
     * }
     */
    public static MemorySegment Used4kPagesMap(MemorySegment struct) {
        return struct.asSlice(Used4kPagesMap$OFFSET, Used4kPagesMap$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU8 Used4kPagesMap[2]
     * }
     */
    public static void Used4kPagesMap(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Used4kPagesMap$OFFSET, Used4kPagesMap$LAYOUT.byteSize());
    }

    private static long[] Used4kPagesMap$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImU8 Used4kPagesMap[2]
     * }
     */
    public static long[] Used4kPagesMap$dimensions() {
        return Used4kPagesMap$DIMS;
    }
    private static final VarHandle Used4kPagesMap$ELEM_HANDLE = Used4kPagesMap$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImU8 Used4kPagesMap[2]
     * }
     */
    public static byte Used4kPagesMap(MemorySegment struct, long index0) {
        return (byte)Used4kPagesMap$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImU8 Used4kPagesMap[2]
     * }
     */
    public static void Used4kPagesMap(MemorySegment struct, long index0, byte fieldValue) {
        Used4kPagesMap$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

