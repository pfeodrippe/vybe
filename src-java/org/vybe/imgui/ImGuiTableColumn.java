// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiTableColumn {
 *     ImGuiTableColumnFlags Flags;
 *     float WidthGiven;
 *     float MinX;
 *     float MaxX;
 *     float WidthRequest;
 *     float WidthAuto;
 *     float StretchWeight;
 *     float InitStretchWeightOrWidth;
 *     ImRect ClipRect;
 *     ImGuiID UserID;
 *     float WorkMinX;
 *     float WorkMaxX;
 *     float ItemWidth;
 *     float ContentMaxXFrozen;
 *     float ContentMaxXUnfrozen;
 *     float ContentMaxXHeadersUsed;
 *     float ContentMaxXHeadersIdeal;
 *     ImS16 NameOffset;
 *     ImGuiTableColumnIdx DisplayOrder;
 *     ImGuiTableColumnIdx IndexWithinEnabledSet;
 *     ImGuiTableColumnIdx PrevEnabledColumn;
 *     ImGuiTableColumnIdx NextEnabledColumn;
 *     ImGuiTableColumnIdx SortOrder;
 *     ImGuiTableDrawChannelIdx DrawChannelCurrent;
 *     ImGuiTableDrawChannelIdx DrawChannelFrozen;
 *     ImGuiTableDrawChannelIdx DrawChannelUnfrozen;
 *     bool IsEnabled;
 *     bool IsUserEnabled;
 *     bool IsUserEnabledNextFrame;
 *     bool IsVisibleX;
 *     bool IsVisibleY;
 *     bool IsRequestOutput;
 *     bool IsSkipItems;
 *     bool IsPreserveWidthAuto;
 *     ImS8 NavLayerCurrent;
 *     ImU8 AutoFitQueue;
 *     ImU8 CannotSkipItemsQueue;
 *     ImU8 SortDirection : 2;
 *     ImU8 SortDirectionsAvailCount : 2;
 *     ImU8 SortDirectionsAvailMask : 4;
 *     ImU8 SortDirectionsAvailList;
 * }
 * }
 */
public class ImGuiTableColumn {

    ImGuiTableColumn() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("Flags"),
        imgui.C_FLOAT.withName("WidthGiven"),
        imgui.C_FLOAT.withName("MinX"),
        imgui.C_FLOAT.withName("MaxX"),
        imgui.C_FLOAT.withName("WidthRequest"),
        imgui.C_FLOAT.withName("WidthAuto"),
        imgui.C_FLOAT.withName("StretchWeight"),
        imgui.C_FLOAT.withName("InitStretchWeightOrWidth"),
        ImRect.layout().withName("ClipRect"),
        imgui.C_INT.withName("UserID"),
        imgui.C_FLOAT.withName("WorkMinX"),
        imgui.C_FLOAT.withName("WorkMaxX"),
        imgui.C_FLOAT.withName("ItemWidth"),
        imgui.C_FLOAT.withName("ContentMaxXFrozen"),
        imgui.C_FLOAT.withName("ContentMaxXUnfrozen"),
        imgui.C_FLOAT.withName("ContentMaxXHeadersUsed"),
        imgui.C_FLOAT.withName("ContentMaxXHeadersIdeal"),
        imgui.C_SHORT.withName("NameOffset"),
        imgui.C_SHORT.withName("DisplayOrder"),
        imgui.C_SHORT.withName("IndexWithinEnabledSet"),
        imgui.C_SHORT.withName("PrevEnabledColumn"),
        imgui.C_SHORT.withName("NextEnabledColumn"),
        imgui.C_SHORT.withName("SortOrder"),
        imgui.C_SHORT.withName("DrawChannelCurrent"),
        imgui.C_SHORT.withName("DrawChannelFrozen"),
        imgui.C_SHORT.withName("DrawChannelUnfrozen"),
        imgui.C_BOOL.withName("IsEnabled"),
        imgui.C_BOOL.withName("IsUserEnabled"),
        imgui.C_BOOL.withName("IsUserEnabledNextFrame"),
        imgui.C_BOOL.withName("IsVisibleX"),
        imgui.C_BOOL.withName("IsVisibleY"),
        imgui.C_BOOL.withName("IsRequestOutput"),
        imgui.C_BOOL.withName("IsSkipItems"),
        imgui.C_BOOL.withName("IsPreserveWidthAuto"),
        imgui.C_CHAR.withName("NavLayerCurrent"),
        imgui.C_CHAR.withName("AutoFitQueue"),
        imgui.C_CHAR.withName("CannotSkipItemsQueue"),
        MemoryLayout.paddingLayout(1),
        imgui.C_CHAR.withName("SortDirectionsAvailList"),
        MemoryLayout.paddingLayout(1)
    ).withName("ImGuiTableColumn");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnFlags Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnFlags Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnFlags Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnFlags Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfFloat WidthGiven$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WidthGiven"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WidthGiven
     * }
     */
    public static final OfFloat WidthGiven$layout() {
        return WidthGiven$LAYOUT;
    }

    private static final long WidthGiven$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WidthGiven
     * }
     */
    public static final long WidthGiven$offset() {
        return WidthGiven$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WidthGiven
     * }
     */
    public static float WidthGiven(MemorySegment struct) {
        return struct.get(WidthGiven$LAYOUT, WidthGiven$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WidthGiven
     * }
     */
    public static void WidthGiven(MemorySegment struct, float fieldValue) {
        struct.set(WidthGiven$LAYOUT, WidthGiven$OFFSET, fieldValue);
    }

    private static final OfFloat MinX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MinX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MinX
     * }
     */
    public static final OfFloat MinX$layout() {
        return MinX$LAYOUT;
    }

    private static final long MinX$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MinX
     * }
     */
    public static final long MinX$offset() {
        return MinX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MinX
     * }
     */
    public static float MinX(MemorySegment struct) {
        return struct.get(MinX$LAYOUT, MinX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MinX
     * }
     */
    public static void MinX(MemorySegment struct, float fieldValue) {
        struct.set(MinX$LAYOUT, MinX$OFFSET, fieldValue);
    }

    private static final OfFloat MaxX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MaxX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MaxX
     * }
     */
    public static final OfFloat MaxX$layout() {
        return MaxX$LAYOUT;
    }

    private static final long MaxX$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MaxX
     * }
     */
    public static final long MaxX$offset() {
        return MaxX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MaxX
     * }
     */
    public static float MaxX(MemorySegment struct) {
        return struct.get(MaxX$LAYOUT, MaxX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MaxX
     * }
     */
    public static void MaxX(MemorySegment struct, float fieldValue) {
        struct.set(MaxX$LAYOUT, MaxX$OFFSET, fieldValue);
    }

    private static final OfFloat WidthRequest$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WidthRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WidthRequest
     * }
     */
    public static final OfFloat WidthRequest$layout() {
        return WidthRequest$LAYOUT;
    }

    private static final long WidthRequest$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WidthRequest
     * }
     */
    public static final long WidthRequest$offset() {
        return WidthRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WidthRequest
     * }
     */
    public static float WidthRequest(MemorySegment struct) {
        return struct.get(WidthRequest$LAYOUT, WidthRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WidthRequest
     * }
     */
    public static void WidthRequest(MemorySegment struct, float fieldValue) {
        struct.set(WidthRequest$LAYOUT, WidthRequest$OFFSET, fieldValue);
    }

    private static final OfFloat WidthAuto$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WidthAuto"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WidthAuto
     * }
     */
    public static final OfFloat WidthAuto$layout() {
        return WidthAuto$LAYOUT;
    }

    private static final long WidthAuto$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WidthAuto
     * }
     */
    public static final long WidthAuto$offset() {
        return WidthAuto$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WidthAuto
     * }
     */
    public static float WidthAuto(MemorySegment struct) {
        return struct.get(WidthAuto$LAYOUT, WidthAuto$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WidthAuto
     * }
     */
    public static void WidthAuto(MemorySegment struct, float fieldValue) {
        struct.set(WidthAuto$LAYOUT, WidthAuto$OFFSET, fieldValue);
    }

    private static final OfFloat StretchWeight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("StretchWeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float StretchWeight
     * }
     */
    public static final OfFloat StretchWeight$layout() {
        return StretchWeight$LAYOUT;
    }

    private static final long StretchWeight$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float StretchWeight
     * }
     */
    public static final long StretchWeight$offset() {
        return StretchWeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float StretchWeight
     * }
     */
    public static float StretchWeight(MemorySegment struct) {
        return struct.get(StretchWeight$LAYOUT, StretchWeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float StretchWeight
     * }
     */
    public static void StretchWeight(MemorySegment struct, float fieldValue) {
        struct.set(StretchWeight$LAYOUT, StretchWeight$OFFSET, fieldValue);
    }

    private static final OfFloat InitStretchWeightOrWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("InitStretchWeightOrWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float InitStretchWeightOrWidth
     * }
     */
    public static final OfFloat InitStretchWeightOrWidth$layout() {
        return InitStretchWeightOrWidth$LAYOUT;
    }

    private static final long InitStretchWeightOrWidth$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float InitStretchWeightOrWidth
     * }
     */
    public static final long InitStretchWeightOrWidth$offset() {
        return InitStretchWeightOrWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float InitStretchWeightOrWidth
     * }
     */
    public static float InitStretchWeightOrWidth(MemorySegment struct) {
        return struct.get(InitStretchWeightOrWidth$LAYOUT, InitStretchWeightOrWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float InitStretchWeightOrWidth
     * }
     */
    public static void InitStretchWeightOrWidth(MemorySegment struct, float fieldValue) {
        struct.set(InitStretchWeightOrWidth$LAYOUT, InitStretchWeightOrWidth$OFFSET, fieldValue);
    }

    private static final GroupLayout ClipRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ClipRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect ClipRect
     * }
     */
    public static final GroupLayout ClipRect$layout() {
        return ClipRect$LAYOUT;
    }

    private static final long ClipRect$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect ClipRect
     * }
     */
    public static final long ClipRect$offset() {
        return ClipRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect ClipRect
     * }
     */
    public static MemorySegment ClipRect(MemorySegment struct) {
        return struct.asSlice(ClipRect$OFFSET, ClipRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect ClipRect
     * }
     */
    public static void ClipRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ClipRect$OFFSET, ClipRect$LAYOUT.byteSize());
    }

    private static final OfInt UserID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("UserID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID UserID
     * }
     */
    public static final OfInt UserID$layout() {
        return UserID$LAYOUT;
    }

    private static final long UserID$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID UserID
     * }
     */
    public static final long UserID$offset() {
        return UserID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID UserID
     * }
     */
    public static int UserID(MemorySegment struct) {
        return struct.get(UserID$LAYOUT, UserID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID UserID
     * }
     */
    public static void UserID(MemorySegment struct, int fieldValue) {
        struct.set(UserID$LAYOUT, UserID$OFFSET, fieldValue);
    }

    private static final OfFloat WorkMinX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WorkMinX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WorkMinX
     * }
     */
    public static final OfFloat WorkMinX$layout() {
        return WorkMinX$LAYOUT;
    }

    private static final long WorkMinX$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WorkMinX
     * }
     */
    public static final long WorkMinX$offset() {
        return WorkMinX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WorkMinX
     * }
     */
    public static float WorkMinX(MemorySegment struct) {
        return struct.get(WorkMinX$LAYOUT, WorkMinX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WorkMinX
     * }
     */
    public static void WorkMinX(MemorySegment struct, float fieldValue) {
        struct.set(WorkMinX$LAYOUT, WorkMinX$OFFSET, fieldValue);
    }

    private static final OfFloat WorkMaxX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WorkMaxX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WorkMaxX
     * }
     */
    public static final OfFloat WorkMaxX$layout() {
        return WorkMaxX$LAYOUT;
    }

    private static final long WorkMaxX$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WorkMaxX
     * }
     */
    public static final long WorkMaxX$offset() {
        return WorkMaxX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WorkMaxX
     * }
     */
    public static float WorkMaxX(MemorySegment struct) {
        return struct.get(WorkMaxX$LAYOUT, WorkMaxX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WorkMaxX
     * }
     */
    public static void WorkMaxX(MemorySegment struct, float fieldValue) {
        struct.set(WorkMaxX$LAYOUT, WorkMaxX$OFFSET, fieldValue);
    }

    private static final OfFloat ItemWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ItemWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ItemWidth
     * }
     */
    public static final OfFloat ItemWidth$layout() {
        return ItemWidth$LAYOUT;
    }

    private static final long ItemWidth$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ItemWidth
     * }
     */
    public static final long ItemWidth$offset() {
        return ItemWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ItemWidth
     * }
     */
    public static float ItemWidth(MemorySegment struct) {
        return struct.get(ItemWidth$LAYOUT, ItemWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ItemWidth
     * }
     */
    public static void ItemWidth(MemorySegment struct, float fieldValue) {
        struct.set(ItemWidth$LAYOUT, ItemWidth$OFFSET, fieldValue);
    }

    private static final OfFloat ContentMaxXFrozen$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ContentMaxXFrozen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ContentMaxXFrozen
     * }
     */
    public static final OfFloat ContentMaxXFrozen$layout() {
        return ContentMaxXFrozen$LAYOUT;
    }

    private static final long ContentMaxXFrozen$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ContentMaxXFrozen
     * }
     */
    public static final long ContentMaxXFrozen$offset() {
        return ContentMaxXFrozen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ContentMaxXFrozen
     * }
     */
    public static float ContentMaxXFrozen(MemorySegment struct) {
        return struct.get(ContentMaxXFrozen$LAYOUT, ContentMaxXFrozen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ContentMaxXFrozen
     * }
     */
    public static void ContentMaxXFrozen(MemorySegment struct, float fieldValue) {
        struct.set(ContentMaxXFrozen$LAYOUT, ContentMaxXFrozen$OFFSET, fieldValue);
    }

    private static final OfFloat ContentMaxXUnfrozen$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ContentMaxXUnfrozen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ContentMaxXUnfrozen
     * }
     */
    public static final OfFloat ContentMaxXUnfrozen$layout() {
        return ContentMaxXUnfrozen$LAYOUT;
    }

    private static final long ContentMaxXUnfrozen$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ContentMaxXUnfrozen
     * }
     */
    public static final long ContentMaxXUnfrozen$offset() {
        return ContentMaxXUnfrozen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ContentMaxXUnfrozen
     * }
     */
    public static float ContentMaxXUnfrozen(MemorySegment struct) {
        return struct.get(ContentMaxXUnfrozen$LAYOUT, ContentMaxXUnfrozen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ContentMaxXUnfrozen
     * }
     */
    public static void ContentMaxXUnfrozen(MemorySegment struct, float fieldValue) {
        struct.set(ContentMaxXUnfrozen$LAYOUT, ContentMaxXUnfrozen$OFFSET, fieldValue);
    }

    private static final OfFloat ContentMaxXHeadersUsed$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ContentMaxXHeadersUsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ContentMaxXHeadersUsed
     * }
     */
    public static final OfFloat ContentMaxXHeadersUsed$layout() {
        return ContentMaxXHeadersUsed$LAYOUT;
    }

    private static final long ContentMaxXHeadersUsed$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ContentMaxXHeadersUsed
     * }
     */
    public static final long ContentMaxXHeadersUsed$offset() {
        return ContentMaxXHeadersUsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ContentMaxXHeadersUsed
     * }
     */
    public static float ContentMaxXHeadersUsed(MemorySegment struct) {
        return struct.get(ContentMaxXHeadersUsed$LAYOUT, ContentMaxXHeadersUsed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ContentMaxXHeadersUsed
     * }
     */
    public static void ContentMaxXHeadersUsed(MemorySegment struct, float fieldValue) {
        struct.set(ContentMaxXHeadersUsed$LAYOUT, ContentMaxXHeadersUsed$OFFSET, fieldValue);
    }

    private static final OfFloat ContentMaxXHeadersIdeal$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ContentMaxXHeadersIdeal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ContentMaxXHeadersIdeal
     * }
     */
    public static final OfFloat ContentMaxXHeadersIdeal$layout() {
        return ContentMaxXHeadersIdeal$LAYOUT;
    }

    private static final long ContentMaxXHeadersIdeal$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ContentMaxXHeadersIdeal
     * }
     */
    public static final long ContentMaxXHeadersIdeal$offset() {
        return ContentMaxXHeadersIdeal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ContentMaxXHeadersIdeal
     * }
     */
    public static float ContentMaxXHeadersIdeal(MemorySegment struct) {
        return struct.get(ContentMaxXHeadersIdeal$LAYOUT, ContentMaxXHeadersIdeal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ContentMaxXHeadersIdeal
     * }
     */
    public static void ContentMaxXHeadersIdeal(MemorySegment struct, float fieldValue) {
        struct.set(ContentMaxXHeadersIdeal$LAYOUT, ContentMaxXHeadersIdeal$OFFSET, fieldValue);
    }

    private static final OfShort NameOffset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("NameOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS16 NameOffset
     * }
     */
    public static final OfShort NameOffset$layout() {
        return NameOffset$LAYOUT;
    }

    private static final long NameOffset$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS16 NameOffset
     * }
     */
    public static final long NameOffset$offset() {
        return NameOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS16 NameOffset
     * }
     */
    public static short NameOffset(MemorySegment struct) {
        return struct.get(NameOffset$LAYOUT, NameOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS16 NameOffset
     * }
     */
    public static void NameOffset(MemorySegment struct, short fieldValue) {
        struct.set(NameOffset$LAYOUT, NameOffset$OFFSET, fieldValue);
    }

    private static final OfShort DisplayOrder$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DisplayOrder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx DisplayOrder
     * }
     */
    public static final OfShort DisplayOrder$layout() {
        return DisplayOrder$LAYOUT;
    }

    private static final long DisplayOrder$OFFSET = 82;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx DisplayOrder
     * }
     */
    public static final long DisplayOrder$offset() {
        return DisplayOrder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx DisplayOrder
     * }
     */
    public static short DisplayOrder(MemorySegment struct) {
        return struct.get(DisplayOrder$LAYOUT, DisplayOrder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx DisplayOrder
     * }
     */
    public static void DisplayOrder(MemorySegment struct, short fieldValue) {
        struct.set(DisplayOrder$LAYOUT, DisplayOrder$OFFSET, fieldValue);
    }

    private static final OfShort IndexWithinEnabledSet$LAYOUT = (OfShort)$LAYOUT.select(groupElement("IndexWithinEnabledSet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx IndexWithinEnabledSet
     * }
     */
    public static final OfShort IndexWithinEnabledSet$layout() {
        return IndexWithinEnabledSet$LAYOUT;
    }

    private static final long IndexWithinEnabledSet$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx IndexWithinEnabledSet
     * }
     */
    public static final long IndexWithinEnabledSet$offset() {
        return IndexWithinEnabledSet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx IndexWithinEnabledSet
     * }
     */
    public static short IndexWithinEnabledSet(MemorySegment struct) {
        return struct.get(IndexWithinEnabledSet$LAYOUT, IndexWithinEnabledSet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx IndexWithinEnabledSet
     * }
     */
    public static void IndexWithinEnabledSet(MemorySegment struct, short fieldValue) {
        struct.set(IndexWithinEnabledSet$LAYOUT, IndexWithinEnabledSet$OFFSET, fieldValue);
    }

    private static final OfShort PrevEnabledColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("PrevEnabledColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx PrevEnabledColumn
     * }
     */
    public static final OfShort PrevEnabledColumn$layout() {
        return PrevEnabledColumn$LAYOUT;
    }

    private static final long PrevEnabledColumn$OFFSET = 86;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx PrevEnabledColumn
     * }
     */
    public static final long PrevEnabledColumn$offset() {
        return PrevEnabledColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx PrevEnabledColumn
     * }
     */
    public static short PrevEnabledColumn(MemorySegment struct) {
        return struct.get(PrevEnabledColumn$LAYOUT, PrevEnabledColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx PrevEnabledColumn
     * }
     */
    public static void PrevEnabledColumn(MemorySegment struct, short fieldValue) {
        struct.set(PrevEnabledColumn$LAYOUT, PrevEnabledColumn$OFFSET, fieldValue);
    }

    private static final OfShort NextEnabledColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("NextEnabledColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx NextEnabledColumn
     * }
     */
    public static final OfShort NextEnabledColumn$layout() {
        return NextEnabledColumn$LAYOUT;
    }

    private static final long NextEnabledColumn$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx NextEnabledColumn
     * }
     */
    public static final long NextEnabledColumn$offset() {
        return NextEnabledColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx NextEnabledColumn
     * }
     */
    public static short NextEnabledColumn(MemorySegment struct) {
        return struct.get(NextEnabledColumn$LAYOUT, NextEnabledColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx NextEnabledColumn
     * }
     */
    public static void NextEnabledColumn(MemorySegment struct, short fieldValue) {
        struct.set(NextEnabledColumn$LAYOUT, NextEnabledColumn$OFFSET, fieldValue);
    }

    private static final OfShort SortOrder$LAYOUT = (OfShort)$LAYOUT.select(groupElement("SortOrder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx SortOrder
     * }
     */
    public static final OfShort SortOrder$layout() {
        return SortOrder$LAYOUT;
    }

    private static final long SortOrder$OFFSET = 90;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx SortOrder
     * }
     */
    public static final long SortOrder$offset() {
        return SortOrder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx SortOrder
     * }
     */
    public static short SortOrder(MemorySegment struct) {
        return struct.get(SortOrder$LAYOUT, SortOrder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx SortOrder
     * }
     */
    public static void SortOrder(MemorySegment struct, short fieldValue) {
        struct.set(SortOrder$LAYOUT, SortOrder$OFFSET, fieldValue);
    }

    private static final OfShort DrawChannelCurrent$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DrawChannelCurrent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelCurrent
     * }
     */
    public static final OfShort DrawChannelCurrent$layout() {
        return DrawChannelCurrent$LAYOUT;
    }

    private static final long DrawChannelCurrent$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelCurrent
     * }
     */
    public static final long DrawChannelCurrent$offset() {
        return DrawChannelCurrent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelCurrent
     * }
     */
    public static short DrawChannelCurrent(MemorySegment struct) {
        return struct.get(DrawChannelCurrent$LAYOUT, DrawChannelCurrent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelCurrent
     * }
     */
    public static void DrawChannelCurrent(MemorySegment struct, short fieldValue) {
        struct.set(DrawChannelCurrent$LAYOUT, DrawChannelCurrent$OFFSET, fieldValue);
    }

    private static final OfShort DrawChannelFrozen$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DrawChannelFrozen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelFrozen
     * }
     */
    public static final OfShort DrawChannelFrozen$layout() {
        return DrawChannelFrozen$LAYOUT;
    }

    private static final long DrawChannelFrozen$OFFSET = 94;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelFrozen
     * }
     */
    public static final long DrawChannelFrozen$offset() {
        return DrawChannelFrozen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelFrozen
     * }
     */
    public static short DrawChannelFrozen(MemorySegment struct) {
        return struct.get(DrawChannelFrozen$LAYOUT, DrawChannelFrozen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelFrozen
     * }
     */
    public static void DrawChannelFrozen(MemorySegment struct, short fieldValue) {
        struct.set(DrawChannelFrozen$LAYOUT, DrawChannelFrozen$OFFSET, fieldValue);
    }

    private static final OfShort DrawChannelUnfrozen$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DrawChannelUnfrozen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelUnfrozen
     * }
     */
    public static final OfShort DrawChannelUnfrozen$layout() {
        return DrawChannelUnfrozen$LAYOUT;
    }

    private static final long DrawChannelUnfrozen$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelUnfrozen
     * }
     */
    public static final long DrawChannelUnfrozen$offset() {
        return DrawChannelUnfrozen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelUnfrozen
     * }
     */
    public static short DrawChannelUnfrozen(MemorySegment struct) {
        return struct.get(DrawChannelUnfrozen$LAYOUT, DrawChannelUnfrozen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DrawChannelUnfrozen
     * }
     */
    public static void DrawChannelUnfrozen(MemorySegment struct, short fieldValue) {
        struct.set(DrawChannelUnfrozen$LAYOUT, DrawChannelUnfrozen$OFFSET, fieldValue);
    }

    private static final OfBoolean IsEnabled$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsEnabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsEnabled
     * }
     */
    public static final OfBoolean IsEnabled$layout() {
        return IsEnabled$LAYOUT;
    }

    private static final long IsEnabled$OFFSET = 98;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsEnabled
     * }
     */
    public static final long IsEnabled$offset() {
        return IsEnabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsEnabled
     * }
     */
    public static boolean IsEnabled(MemorySegment struct) {
        return struct.get(IsEnabled$LAYOUT, IsEnabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsEnabled
     * }
     */
    public static void IsEnabled(MemorySegment struct, boolean fieldValue) {
        struct.set(IsEnabled$LAYOUT, IsEnabled$OFFSET, fieldValue);
    }

    private static final OfBoolean IsUserEnabled$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsUserEnabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsUserEnabled
     * }
     */
    public static final OfBoolean IsUserEnabled$layout() {
        return IsUserEnabled$LAYOUT;
    }

    private static final long IsUserEnabled$OFFSET = 99;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsUserEnabled
     * }
     */
    public static final long IsUserEnabled$offset() {
        return IsUserEnabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsUserEnabled
     * }
     */
    public static boolean IsUserEnabled(MemorySegment struct) {
        return struct.get(IsUserEnabled$LAYOUT, IsUserEnabled$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsUserEnabled
     * }
     */
    public static void IsUserEnabled(MemorySegment struct, boolean fieldValue) {
        struct.set(IsUserEnabled$LAYOUT, IsUserEnabled$OFFSET, fieldValue);
    }

    private static final OfBoolean IsUserEnabledNextFrame$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsUserEnabledNextFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsUserEnabledNextFrame
     * }
     */
    public static final OfBoolean IsUserEnabledNextFrame$layout() {
        return IsUserEnabledNextFrame$LAYOUT;
    }

    private static final long IsUserEnabledNextFrame$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsUserEnabledNextFrame
     * }
     */
    public static final long IsUserEnabledNextFrame$offset() {
        return IsUserEnabledNextFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsUserEnabledNextFrame
     * }
     */
    public static boolean IsUserEnabledNextFrame(MemorySegment struct) {
        return struct.get(IsUserEnabledNextFrame$LAYOUT, IsUserEnabledNextFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsUserEnabledNextFrame
     * }
     */
    public static void IsUserEnabledNextFrame(MemorySegment struct, boolean fieldValue) {
        struct.set(IsUserEnabledNextFrame$LAYOUT, IsUserEnabledNextFrame$OFFSET, fieldValue);
    }

    private static final OfBoolean IsVisibleX$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsVisibleX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsVisibleX
     * }
     */
    public static final OfBoolean IsVisibleX$layout() {
        return IsVisibleX$LAYOUT;
    }

    private static final long IsVisibleX$OFFSET = 101;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsVisibleX
     * }
     */
    public static final long IsVisibleX$offset() {
        return IsVisibleX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsVisibleX
     * }
     */
    public static boolean IsVisibleX(MemorySegment struct) {
        return struct.get(IsVisibleX$LAYOUT, IsVisibleX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsVisibleX
     * }
     */
    public static void IsVisibleX(MemorySegment struct, boolean fieldValue) {
        struct.set(IsVisibleX$LAYOUT, IsVisibleX$OFFSET, fieldValue);
    }

    private static final OfBoolean IsVisibleY$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsVisibleY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsVisibleY
     * }
     */
    public static final OfBoolean IsVisibleY$layout() {
        return IsVisibleY$LAYOUT;
    }

    private static final long IsVisibleY$OFFSET = 102;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsVisibleY
     * }
     */
    public static final long IsVisibleY$offset() {
        return IsVisibleY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsVisibleY
     * }
     */
    public static boolean IsVisibleY(MemorySegment struct) {
        return struct.get(IsVisibleY$LAYOUT, IsVisibleY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsVisibleY
     * }
     */
    public static void IsVisibleY(MemorySegment struct, boolean fieldValue) {
        struct.set(IsVisibleY$LAYOUT, IsVisibleY$OFFSET, fieldValue);
    }

    private static final OfBoolean IsRequestOutput$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsRequestOutput"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsRequestOutput
     * }
     */
    public static final OfBoolean IsRequestOutput$layout() {
        return IsRequestOutput$LAYOUT;
    }

    private static final long IsRequestOutput$OFFSET = 103;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsRequestOutput
     * }
     */
    public static final long IsRequestOutput$offset() {
        return IsRequestOutput$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsRequestOutput
     * }
     */
    public static boolean IsRequestOutput(MemorySegment struct) {
        return struct.get(IsRequestOutput$LAYOUT, IsRequestOutput$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsRequestOutput
     * }
     */
    public static void IsRequestOutput(MemorySegment struct, boolean fieldValue) {
        struct.set(IsRequestOutput$LAYOUT, IsRequestOutput$OFFSET, fieldValue);
    }

    private static final OfBoolean IsSkipItems$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsSkipItems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsSkipItems
     * }
     */
    public static final OfBoolean IsSkipItems$layout() {
        return IsSkipItems$LAYOUT;
    }

    private static final long IsSkipItems$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsSkipItems
     * }
     */
    public static final long IsSkipItems$offset() {
        return IsSkipItems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsSkipItems
     * }
     */
    public static boolean IsSkipItems(MemorySegment struct) {
        return struct.get(IsSkipItems$LAYOUT, IsSkipItems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsSkipItems
     * }
     */
    public static void IsSkipItems(MemorySegment struct, boolean fieldValue) {
        struct.set(IsSkipItems$LAYOUT, IsSkipItems$OFFSET, fieldValue);
    }

    private static final OfBoolean IsPreserveWidthAuto$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsPreserveWidthAuto"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsPreserveWidthAuto
     * }
     */
    public static final OfBoolean IsPreserveWidthAuto$layout() {
        return IsPreserveWidthAuto$LAYOUT;
    }

    private static final long IsPreserveWidthAuto$OFFSET = 105;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsPreserveWidthAuto
     * }
     */
    public static final long IsPreserveWidthAuto$offset() {
        return IsPreserveWidthAuto$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsPreserveWidthAuto
     * }
     */
    public static boolean IsPreserveWidthAuto(MemorySegment struct) {
        return struct.get(IsPreserveWidthAuto$LAYOUT, IsPreserveWidthAuto$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsPreserveWidthAuto
     * }
     */
    public static void IsPreserveWidthAuto(MemorySegment struct, boolean fieldValue) {
        struct.set(IsPreserveWidthAuto$LAYOUT, IsPreserveWidthAuto$OFFSET, fieldValue);
    }

    private static final OfByte NavLayerCurrent$LAYOUT = (OfByte)$LAYOUT.select(groupElement("NavLayerCurrent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 NavLayerCurrent
     * }
     */
    public static final OfByte NavLayerCurrent$layout() {
        return NavLayerCurrent$LAYOUT;
    }

    private static final long NavLayerCurrent$OFFSET = 106;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 NavLayerCurrent
     * }
     */
    public static final long NavLayerCurrent$offset() {
        return NavLayerCurrent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 NavLayerCurrent
     * }
     */
    public static byte NavLayerCurrent(MemorySegment struct) {
        return struct.get(NavLayerCurrent$LAYOUT, NavLayerCurrent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 NavLayerCurrent
     * }
     */
    public static void NavLayerCurrent(MemorySegment struct, byte fieldValue) {
        struct.set(NavLayerCurrent$LAYOUT, NavLayerCurrent$OFFSET, fieldValue);
    }

    private static final OfByte AutoFitQueue$LAYOUT = (OfByte)$LAYOUT.select(groupElement("AutoFitQueue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU8 AutoFitQueue
     * }
     */
    public static final OfByte AutoFitQueue$layout() {
        return AutoFitQueue$LAYOUT;
    }

    private static final long AutoFitQueue$OFFSET = 107;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU8 AutoFitQueue
     * }
     */
    public static final long AutoFitQueue$offset() {
        return AutoFitQueue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU8 AutoFitQueue
     * }
     */
    public static byte AutoFitQueue(MemorySegment struct) {
        return struct.get(AutoFitQueue$LAYOUT, AutoFitQueue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU8 AutoFitQueue
     * }
     */
    public static void AutoFitQueue(MemorySegment struct, byte fieldValue) {
        struct.set(AutoFitQueue$LAYOUT, AutoFitQueue$OFFSET, fieldValue);
    }

    private static final OfByte CannotSkipItemsQueue$LAYOUT = (OfByte)$LAYOUT.select(groupElement("CannotSkipItemsQueue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU8 CannotSkipItemsQueue
     * }
     */
    public static final OfByte CannotSkipItemsQueue$layout() {
        return CannotSkipItemsQueue$LAYOUT;
    }

    private static final long CannotSkipItemsQueue$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU8 CannotSkipItemsQueue
     * }
     */
    public static final long CannotSkipItemsQueue$offset() {
        return CannotSkipItemsQueue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU8 CannotSkipItemsQueue
     * }
     */
    public static byte CannotSkipItemsQueue(MemorySegment struct) {
        return struct.get(CannotSkipItemsQueue$LAYOUT, CannotSkipItemsQueue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU8 CannotSkipItemsQueue
     * }
     */
    public static void CannotSkipItemsQueue(MemorySegment struct, byte fieldValue) {
        struct.set(CannotSkipItemsQueue$LAYOUT, CannotSkipItemsQueue$OFFSET, fieldValue);
    }

    private static final OfByte SortDirectionsAvailList$LAYOUT = (OfByte)$LAYOUT.select(groupElement("SortDirectionsAvailList"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU8 SortDirectionsAvailList
     * }
     */
    public static final OfByte SortDirectionsAvailList$layout() {
        return SortDirectionsAvailList$LAYOUT;
    }

    private static final long SortDirectionsAvailList$OFFSET = 110;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU8 SortDirectionsAvailList
     * }
     */
    public static final long SortDirectionsAvailList$offset() {
        return SortDirectionsAvailList$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU8 SortDirectionsAvailList
     * }
     */
    public static byte SortDirectionsAvailList(MemorySegment struct) {
        return struct.get(SortDirectionsAvailList$LAYOUT, SortDirectionsAvailList$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU8 SortDirectionsAvailList
     * }
     */
    public static void SortDirectionsAvailList(MemorySegment struct, byte fieldValue) {
        struct.set(SortDirectionsAvailList$LAYOUT, SortDirectionsAvailList$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

