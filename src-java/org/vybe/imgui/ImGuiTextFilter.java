// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiTextFilter {
 *     char InputBuf[256];
 *     ImVector_ImGuiTextRange Filters;
 *     int CountGrep;
 * }
 * }
 */
public class ImGuiTextFilter {

    ImGuiTextFilter() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(256, imgui.C_CHAR).withName("InputBuf"),
        ImVector_ImGuiTextRange.layout().withName("Filters"),
        imgui.C_INT.withName("CountGrep"),
        MemoryLayout.paddingLayout(4)
    ).withName("ImGuiTextFilter");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout InputBuf$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("InputBuf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char InputBuf[256]
     * }
     */
    public static final SequenceLayout InputBuf$layout() {
        return InputBuf$LAYOUT;
    }

    private static final long InputBuf$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char InputBuf[256]
     * }
     */
    public static final long InputBuf$offset() {
        return InputBuf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char InputBuf[256]
     * }
     */
    public static MemorySegment InputBuf(MemorySegment struct) {
        return struct.asSlice(InputBuf$OFFSET, InputBuf$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char InputBuf[256]
     * }
     */
    public static void InputBuf(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InputBuf$OFFSET, InputBuf$LAYOUT.byteSize());
    }

    private static long[] InputBuf$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char InputBuf[256]
     * }
     */
    public static long[] InputBuf$dimensions() {
        return InputBuf$DIMS;
    }
    private static final VarHandle InputBuf$ELEM_HANDLE = InputBuf$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char InputBuf[256]
     * }
     */
    public static byte InputBuf(MemorySegment struct, long index0) {
        return (byte)InputBuf$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char InputBuf[256]
     * }
     */
    public static void InputBuf(MemorySegment struct, long index0, byte fieldValue) {
        InputBuf$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout Filters$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Filters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTextRange Filters
     * }
     */
    public static final GroupLayout Filters$layout() {
        return Filters$LAYOUT;
    }

    private static final long Filters$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTextRange Filters
     * }
     */
    public static final long Filters$offset() {
        return Filters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTextRange Filters
     * }
     */
    public static MemorySegment Filters(MemorySegment struct) {
        return struct.asSlice(Filters$OFFSET, Filters$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTextRange Filters
     * }
     */
    public static void Filters(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Filters$OFFSET, Filters$LAYOUT.byteSize());
    }

    private static final OfInt CountGrep$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CountGrep"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int CountGrep
     * }
     */
    public static final OfInt CountGrep$layout() {
        return CountGrep$LAYOUT;
    }

    private static final long CountGrep$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int CountGrep
     * }
     */
    public static final long CountGrep$offset() {
        return CountGrep$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int CountGrep
     * }
     */
    public static int CountGrep(MemorySegment struct) {
        return struct.get(CountGrep$LAYOUT, CountGrep$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int CountGrep
     * }
     */
    public static void CountGrep(MemorySegment struct, int fieldValue) {
        struct.set(CountGrep$LAYOUT, CountGrep$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

