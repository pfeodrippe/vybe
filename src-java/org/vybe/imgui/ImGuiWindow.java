// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiWindow {
 *     ImGuiContext *Ctx;
 *     char *Name;
 *     ImGuiID ID;
 *     ImGuiWindowFlags Flags;
 *     ImGuiWindowFlags FlagsPreviousFrame;
 *     ImGuiChildFlags ChildFlags;
 *     ImGuiWindowClass WindowClass;
 *     ImGuiViewportP *Viewport;
 *     ImGuiID ViewportId;
 *     ImVec2 ViewportPos;
 *     int ViewportAllowPlatformMonitorExtend;
 *     ImVec2 Pos;
 *     ImVec2 Size;
 *     ImVec2 SizeFull;
 *     ImVec2 ContentSize;
 *     ImVec2 ContentSizeIdeal;
 *     ImVec2 ContentSizeExplicit;
 *     ImVec2 WindowPadding;
 *     float WindowRounding;
 *     float WindowBorderSize;
 *     float TitleBarHeight;
 *     float MenuBarHeight;
 *     float DecoOuterSizeX1;
 *     float DecoOuterSizeY1;
 *     float DecoOuterSizeX2;
 *     float DecoOuterSizeY2;
 *     float DecoInnerSizeX1;
 *     float DecoInnerSizeY1;
 *     int NameBufLen;
 *     ImGuiID MoveId;
 *     ImGuiID TabId;
 *     ImGuiID ChildId;
 *     ImGuiID PopupId;
 *     ImVec2 Scroll;
 *     ImVec2 ScrollMax;
 *     ImVec2 ScrollTarget;
 *     ImVec2 ScrollTargetCenterRatio;
 *     ImVec2 ScrollTargetEdgeSnapDist;
 *     ImVec2 ScrollbarSizes;
 *     bool ScrollbarX;
 *     bool ScrollbarY;
 *     bool ViewportOwned;
 *     bool Active;
 *     bool WasActive;
 *     bool WriteAccessed;
 *     bool Collapsed;
 *     bool WantCollapseToggle;
 *     bool SkipItems;
 *     bool SkipRefresh;
 *     bool Appearing;
 *     bool Hidden;
 *     bool IsFallbackWindow;
 *     bool IsExplicitChild;
 *     bool HasCloseButton;
 *     signed char ResizeBorderHovered;
 *     signed char ResizeBorderHeld;
 *     short BeginCount;
 *     short BeginCountPreviousFrame;
 *     short BeginOrderWithinParent;
 *     short BeginOrderWithinContext;
 *     short FocusOrder;
 *     ImS8 AutoFitFramesX;
 *     ImS8 AutoFitFramesY;
 *     bool AutoFitOnlyGrows;
 *     ImGuiDir AutoPosLastDirection;
 *     ImS8 HiddenFramesCanSkipItems;
 *     ImS8 HiddenFramesCannotSkipItems;
 *     ImS8 HiddenFramesForRenderOnly;
 *     ImS8 DisableInputsFrames;
 *     ImGuiCond SetWindowPosAllowFlags : 8;
 *     ImGuiCond SetWindowSizeAllowFlags : 8;
 *     ImGuiCond SetWindowCollapsedAllowFlags : 8;
 *     ImGuiCond SetWindowDockAllowFlags : 8;
 *     ImVec2 SetWindowPosVal;
 *     ImVec2 SetWindowPosPivot;
 *     ImVector_ImGuiID IDStack;
 *     ImGuiWindowTempData DC;
 *     ImRect OuterRectClipped;
 *     ImRect InnerRect;
 *     ImRect InnerClipRect;
 *     ImRect WorkRect;
 *     ImRect ParentWorkRect;
 *     ImRect ClipRect;
 *     ImRect ContentRegionRect;
 *     ImVec2ih HitTestHoleSize;
 *     ImVec2ih HitTestHoleOffset;
 *     int LastFrameActive;
 *     int LastFrameJustFocused;
 *     float LastTimeActive;
 *     float ItemWidthDefault;
 *     ImGuiStorage StateStorage;
 *     ImVector_ImGuiOldColumns ColumnsStorage;
 *     float FontWindowScale;
 *     float FontDpiScale;
 *     int SettingsOffset;
 *     ImDrawList *DrawList;
 *     ImDrawList DrawListInst;
 *     ImGuiWindow *ParentWindow;
 *     ImGuiWindow *ParentWindowInBeginStack;
 *     ImGuiWindow *RootWindow;
 *     ImGuiWindow *RootWindowPopupTree;
 *     ImGuiWindow *RootWindowDockTree;
 *     ImGuiWindow *RootWindowForTitleBarHighlight;
 *     ImGuiWindow *RootWindowForNav;
 *     ImGuiWindow *ParentWindowForFocusRoute;
 *     ImGuiWindow *NavLastChildNavWindow;
 *     ImGuiID NavLastIds[2];
 *     ImRect NavRectRel[2];
 *     ImVec2 NavPreferredScoringPosRel[2];
 *     ImGuiID NavRootFocusScopeId;
 *     int MemoryDrawListIdxCapacity;
 *     int MemoryDrawListVtxCapacity;
 *     bool MemoryCompacted;
 *     bool DockIsActive : 1;
 *     bool DockNodeIsVisible : 1;
 *     bool DockTabIsVisible : 1;
 *     bool DockTabWantClose : 1;
 *     short DockOrder;
 *     ImGuiWindowDockStyle DockStyle;
 *     ImGuiDockNode *DockNode;
 *     ImGuiDockNode *DockNodeAsHost;
 *     ImGuiID DockId;
 *     ImGuiItemStatusFlags DockTabItemStatusFlags;
 *     ImRect DockTabItemRect;
 * }
 * }
 */
public class ImGuiWindow {

    ImGuiWindow() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_POINTER.withName("Ctx"),
        imgui.C_POINTER.withName("Name"),
        imgui.C_INT.withName("ID"),
        imgui.C_INT.withName("Flags"),
        imgui.C_INT.withName("FlagsPreviousFrame"),
        imgui.C_INT.withName("ChildFlags"),
        ImGuiWindowClass.layout().withName("WindowClass"),
        imgui.C_POINTER.withName("Viewport"),
        imgui.C_INT.withName("ViewportId"),
        ImVec2.layout().withName("ViewportPos"),
        imgui.C_INT.withName("ViewportAllowPlatformMonitorExtend"),
        ImVec2.layout().withName("Pos"),
        ImVec2.layout().withName("Size"),
        ImVec2.layout().withName("SizeFull"),
        ImVec2.layout().withName("ContentSize"),
        ImVec2.layout().withName("ContentSizeIdeal"),
        ImVec2.layout().withName("ContentSizeExplicit"),
        ImVec2.layout().withName("WindowPadding"),
        imgui.C_FLOAT.withName("WindowRounding"),
        imgui.C_FLOAT.withName("WindowBorderSize"),
        imgui.C_FLOAT.withName("TitleBarHeight"),
        imgui.C_FLOAT.withName("MenuBarHeight"),
        imgui.C_FLOAT.withName("DecoOuterSizeX1"),
        imgui.C_FLOAT.withName("DecoOuterSizeY1"),
        imgui.C_FLOAT.withName("DecoOuterSizeX2"),
        imgui.C_FLOAT.withName("DecoOuterSizeY2"),
        imgui.C_FLOAT.withName("DecoInnerSizeX1"),
        imgui.C_FLOAT.withName("DecoInnerSizeY1"),
        imgui.C_INT.withName("NameBufLen"),
        imgui.C_INT.withName("MoveId"),
        imgui.C_INT.withName("TabId"),
        imgui.C_INT.withName("ChildId"),
        imgui.C_INT.withName("PopupId"),
        ImVec2.layout().withName("Scroll"),
        ImVec2.layout().withName("ScrollMax"),
        ImVec2.layout().withName("ScrollTarget"),
        ImVec2.layout().withName("ScrollTargetCenterRatio"),
        ImVec2.layout().withName("ScrollTargetEdgeSnapDist"),
        ImVec2.layout().withName("ScrollbarSizes"),
        imgui.C_BOOL.withName("ScrollbarX"),
        imgui.C_BOOL.withName("ScrollbarY"),
        imgui.C_BOOL.withName("ViewportOwned"),
        imgui.C_BOOL.withName("Active"),
        imgui.C_BOOL.withName("WasActive"),
        imgui.C_BOOL.withName("WriteAccessed"),
        imgui.C_BOOL.withName("Collapsed"),
        imgui.C_BOOL.withName("WantCollapseToggle"),
        imgui.C_BOOL.withName("SkipItems"),
        imgui.C_BOOL.withName("SkipRefresh"),
        imgui.C_BOOL.withName("Appearing"),
        imgui.C_BOOL.withName("Hidden"),
        imgui.C_BOOL.withName("IsFallbackWindow"),
        imgui.C_BOOL.withName("IsExplicitChild"),
        imgui.C_BOOL.withName("HasCloseButton"),
        imgui.C_CHAR.withName("ResizeBorderHovered"),
        imgui.C_CHAR.withName("ResizeBorderHeld"),
        MemoryLayout.paddingLayout(1),
        imgui.C_SHORT.withName("BeginCount"),
        imgui.C_SHORT.withName("BeginCountPreviousFrame"),
        imgui.C_SHORT.withName("BeginOrderWithinParent"),
        imgui.C_SHORT.withName("BeginOrderWithinContext"),
        imgui.C_SHORT.withName("FocusOrder"),
        imgui.C_CHAR.withName("AutoFitFramesX"),
        imgui.C_CHAR.withName("AutoFitFramesY"),
        imgui.C_BOOL.withName("AutoFitOnlyGrows"),
        MemoryLayout.paddingLayout(1),
        imgui.C_INT.withName("AutoPosLastDirection"),
        imgui.C_CHAR.withName("HiddenFramesCanSkipItems"),
        imgui.C_CHAR.withName("HiddenFramesCannotSkipItems"),
        imgui.C_CHAR.withName("HiddenFramesForRenderOnly"),
        imgui.C_CHAR.withName("DisableInputsFrames"),
        MemoryLayout.paddingLayout(4),
        ImVec2.layout().withName("SetWindowPosVal"),
        ImVec2.layout().withName("SetWindowPosPivot"),
        ImVector_ImGuiID.layout().withName("IDStack"),
        ImGuiWindowTempData.layout().withName("DC"),
        ImRect.layout().withName("OuterRectClipped"),
        ImRect.layout().withName("InnerRect"),
        ImRect.layout().withName("InnerClipRect"),
        ImRect.layout().withName("WorkRect"),
        ImRect.layout().withName("ParentWorkRect"),
        ImRect.layout().withName("ClipRect"),
        ImRect.layout().withName("ContentRegionRect"),
        ImVec2ih.layout().withName("HitTestHoleSize"),
        ImVec2ih.layout().withName("HitTestHoleOffset"),
        imgui.C_INT.withName("LastFrameActive"),
        imgui.C_INT.withName("LastFrameJustFocused"),
        imgui.C_FLOAT.withName("LastTimeActive"),
        imgui.C_FLOAT.withName("ItemWidthDefault"),
        ImGuiStorage.layout().withName("StateStorage"),
        ImVector_ImGuiOldColumns.layout().withName("ColumnsStorage"),
        imgui.C_FLOAT.withName("FontWindowScale"),
        imgui.C_FLOAT.withName("FontDpiScale"),
        imgui.C_INT.withName("SettingsOffset"),
        MemoryLayout.paddingLayout(4),
        imgui.C_POINTER.withName("DrawList"),
        ImDrawList.layout().withName("DrawListInst"),
        imgui.C_POINTER.withName("ParentWindow"),
        imgui.C_POINTER.withName("ParentWindowInBeginStack"),
        imgui.C_POINTER.withName("RootWindow"),
        imgui.C_POINTER.withName("RootWindowPopupTree"),
        imgui.C_POINTER.withName("RootWindowDockTree"),
        imgui.C_POINTER.withName("RootWindowForTitleBarHighlight"),
        imgui.C_POINTER.withName("RootWindowForNav"),
        imgui.C_POINTER.withName("ParentWindowForFocusRoute"),
        imgui.C_POINTER.withName("NavLastChildNavWindow"),
        MemoryLayout.sequenceLayout(2, imgui.C_INT).withName("NavLastIds"),
        MemoryLayout.sequenceLayout(2, ImRect.layout()).withName("NavRectRel"),
        MemoryLayout.sequenceLayout(2, ImVec2.layout()).withName("NavPreferredScoringPosRel"),
        imgui.C_INT.withName("NavRootFocusScopeId"),
        imgui.C_INT.withName("MemoryDrawListIdxCapacity"),
        imgui.C_INT.withName("MemoryDrawListVtxCapacity"),
        imgui.C_BOOL.withName("MemoryCompacted"),
        MemoryLayout.paddingLayout(1),
        imgui.C_SHORT.withName("DockOrder"),
        ImGuiWindowDockStyle.layout().withName("DockStyle"),
        imgui.C_POINTER.withName("DockNode"),
        imgui.C_POINTER.withName("DockNodeAsHost"),
        imgui.C_INT.withName("DockId"),
        imgui.C_INT.withName("DockTabItemStatusFlags"),
        ImRect.layout().withName("DockTabItemRect")
    ).withName("ImGuiWindow");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout Ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static final AddressLayout Ctx$layout() {
        return Ctx$LAYOUT;
    }

    private static final long Ctx$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static final long Ctx$offset() {
        return Ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static MemorySegment Ctx(MemorySegment struct) {
        return struct.get(Ctx$LAYOUT, Ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiContext *Ctx
     * }
     */
    public static void Ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Ctx$LAYOUT, Ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout Name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *Name
     * }
     */
    public static final AddressLayout Name$layout() {
        return Name$LAYOUT;
    }

    private static final long Name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *Name
     * }
     */
    public static final long Name$offset() {
        return Name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *Name
     * }
     */
    public static MemorySegment Name(MemorySegment struct) {
        return struct.get(Name$LAYOUT, Name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *Name
     * }
     */
    public static void Name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Name$LAYOUT, Name$OFFSET, fieldValue);
    }

    private static final OfInt ID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final OfInt ID$layout() {
        return ID$LAYOUT;
    }

    private static final long ID$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final long ID$offset() {
        return ID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static int ID(MemorySegment struct) {
        return struct.get(ID$LAYOUT, ID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static void ID(MemorySegment struct, int fieldValue) {
        struct.set(ID$LAYOUT, ID$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindowFlags Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindowFlags Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindowFlags Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindowFlags Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final OfInt FlagsPreviousFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FlagsPreviousFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindowFlags FlagsPreviousFrame
     * }
     */
    public static final OfInt FlagsPreviousFrame$layout() {
        return FlagsPreviousFrame$LAYOUT;
    }

    private static final long FlagsPreviousFrame$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindowFlags FlagsPreviousFrame
     * }
     */
    public static final long FlagsPreviousFrame$offset() {
        return FlagsPreviousFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindowFlags FlagsPreviousFrame
     * }
     */
    public static int FlagsPreviousFrame(MemorySegment struct) {
        return struct.get(FlagsPreviousFrame$LAYOUT, FlagsPreviousFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindowFlags FlagsPreviousFrame
     * }
     */
    public static void FlagsPreviousFrame(MemorySegment struct, int fieldValue) {
        struct.set(FlagsPreviousFrame$LAYOUT, FlagsPreviousFrame$OFFSET, fieldValue);
    }

    private static final OfInt ChildFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ChildFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiChildFlags ChildFlags
     * }
     */
    public static final OfInt ChildFlags$layout() {
        return ChildFlags$LAYOUT;
    }

    private static final long ChildFlags$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiChildFlags ChildFlags
     * }
     */
    public static final long ChildFlags$offset() {
        return ChildFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiChildFlags ChildFlags
     * }
     */
    public static int ChildFlags(MemorySegment struct) {
        return struct.get(ChildFlags$LAYOUT, ChildFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiChildFlags ChildFlags
     * }
     */
    public static void ChildFlags(MemorySegment struct, int fieldValue) {
        struct.set(ChildFlags$LAYOUT, ChildFlags$OFFSET, fieldValue);
    }

    private static final GroupLayout WindowClass$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowClass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindowClass WindowClass
     * }
     */
    public static final GroupLayout WindowClass$layout() {
        return WindowClass$LAYOUT;
    }

    private static final long WindowClass$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindowClass WindowClass
     * }
     */
    public static final long WindowClass$offset() {
        return WindowClass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindowClass WindowClass
     * }
     */
    public static MemorySegment WindowClass(MemorySegment struct) {
        return struct.asSlice(WindowClass$OFFSET, WindowClass$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindowClass WindowClass
     * }
     */
    public static void WindowClass(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowClass$OFFSET, WindowClass$LAYOUT.byteSize());
    }

    private static final AddressLayout Viewport$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Viewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiViewportP *Viewport
     * }
     */
    public static final AddressLayout Viewport$layout() {
        return Viewport$LAYOUT;
    }

    private static final long Viewport$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiViewportP *Viewport
     * }
     */
    public static final long Viewport$offset() {
        return Viewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiViewportP *Viewport
     * }
     */
    public static MemorySegment Viewport(MemorySegment struct) {
        return struct.get(Viewport$LAYOUT, Viewport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiViewportP *Viewport
     * }
     */
    public static void Viewport(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Viewport$LAYOUT, Viewport$OFFSET, fieldValue);
    }

    private static final OfInt ViewportId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ViewportId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ViewportId
     * }
     */
    public static final OfInt ViewportId$layout() {
        return ViewportId$LAYOUT;
    }

    private static final long ViewportId$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ViewportId
     * }
     */
    public static final long ViewportId$offset() {
        return ViewportId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ViewportId
     * }
     */
    public static int ViewportId(MemorySegment struct) {
        return struct.get(ViewportId$LAYOUT, ViewportId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ViewportId
     * }
     */
    public static void ViewportId(MemorySegment struct, int fieldValue) {
        struct.set(ViewportId$LAYOUT, ViewportId$OFFSET, fieldValue);
    }

    private static final GroupLayout ViewportPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ViewportPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ViewportPos
     * }
     */
    public static final GroupLayout ViewportPos$layout() {
        return ViewportPos$LAYOUT;
    }

    private static final long ViewportPos$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ViewportPos
     * }
     */
    public static final long ViewportPos$offset() {
        return ViewportPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ViewportPos
     * }
     */
    public static MemorySegment ViewportPos(MemorySegment struct) {
        return struct.asSlice(ViewportPos$OFFSET, ViewportPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ViewportPos
     * }
     */
    public static void ViewportPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ViewportPos$OFFSET, ViewportPos$LAYOUT.byteSize());
    }

    private static final OfInt ViewportAllowPlatformMonitorExtend$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ViewportAllowPlatformMonitorExtend"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ViewportAllowPlatformMonitorExtend
     * }
     */
    public static final OfInt ViewportAllowPlatformMonitorExtend$layout() {
        return ViewportAllowPlatformMonitorExtend$LAYOUT;
    }

    private static final long ViewportAllowPlatformMonitorExtend$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ViewportAllowPlatformMonitorExtend
     * }
     */
    public static final long ViewportAllowPlatformMonitorExtend$offset() {
        return ViewportAllowPlatformMonitorExtend$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ViewportAllowPlatformMonitorExtend
     * }
     */
    public static int ViewportAllowPlatformMonitorExtend(MemorySegment struct) {
        return struct.get(ViewportAllowPlatformMonitorExtend$LAYOUT, ViewportAllowPlatformMonitorExtend$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ViewportAllowPlatformMonitorExtend
     * }
     */
    public static void ViewportAllowPlatformMonitorExtend(MemorySegment struct, int fieldValue) {
        struct.set(ViewportAllowPlatformMonitorExtend$LAYOUT, ViewportAllowPlatformMonitorExtend$OFFSET, fieldValue);
    }

    private static final GroupLayout Pos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static final GroupLayout Pos$layout() {
        return Pos$LAYOUT;
    }

    private static final long Pos$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static final long Pos$offset() {
        return Pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static MemorySegment Pos(MemorySegment struct) {
        return struct.asSlice(Pos$OFFSET, Pos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static void Pos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Pos$OFFSET, Pos$LAYOUT.byteSize());
    }

    private static final GroupLayout Size$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 Size
     * }
     */
    public static final GroupLayout Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 Size
     * }
     */
    public static MemorySegment Size(MemorySegment struct) {
        return struct.asSlice(Size$OFFSET, Size$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 Size
     * }
     */
    public static void Size(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Size$OFFSET, Size$LAYOUT.byteSize());
    }

    private static final GroupLayout SizeFull$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SizeFull"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 SizeFull
     * }
     */
    public static final GroupLayout SizeFull$layout() {
        return SizeFull$LAYOUT;
    }

    private static final long SizeFull$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 SizeFull
     * }
     */
    public static final long SizeFull$offset() {
        return SizeFull$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 SizeFull
     * }
     */
    public static MemorySegment SizeFull(MemorySegment struct) {
        return struct.asSlice(SizeFull$OFFSET, SizeFull$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 SizeFull
     * }
     */
    public static void SizeFull(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SizeFull$OFFSET, SizeFull$LAYOUT.byteSize());
    }

    private static final GroupLayout ContentSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ContentSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ContentSize
     * }
     */
    public static final GroupLayout ContentSize$layout() {
        return ContentSize$LAYOUT;
    }

    private static final long ContentSize$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ContentSize
     * }
     */
    public static final long ContentSize$offset() {
        return ContentSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ContentSize
     * }
     */
    public static MemorySegment ContentSize(MemorySegment struct) {
        return struct.asSlice(ContentSize$OFFSET, ContentSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ContentSize
     * }
     */
    public static void ContentSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ContentSize$OFFSET, ContentSize$LAYOUT.byteSize());
    }

    private static final GroupLayout ContentSizeIdeal$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ContentSizeIdeal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ContentSizeIdeal
     * }
     */
    public static final GroupLayout ContentSizeIdeal$layout() {
        return ContentSizeIdeal$LAYOUT;
    }

    private static final long ContentSizeIdeal$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ContentSizeIdeal
     * }
     */
    public static final long ContentSizeIdeal$offset() {
        return ContentSizeIdeal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ContentSizeIdeal
     * }
     */
    public static MemorySegment ContentSizeIdeal(MemorySegment struct) {
        return struct.asSlice(ContentSizeIdeal$OFFSET, ContentSizeIdeal$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ContentSizeIdeal
     * }
     */
    public static void ContentSizeIdeal(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ContentSizeIdeal$OFFSET, ContentSizeIdeal$LAYOUT.byteSize());
    }

    private static final GroupLayout ContentSizeExplicit$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ContentSizeExplicit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ContentSizeExplicit
     * }
     */
    public static final GroupLayout ContentSizeExplicit$layout() {
        return ContentSizeExplicit$LAYOUT;
    }

    private static final long ContentSizeExplicit$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ContentSizeExplicit
     * }
     */
    public static final long ContentSizeExplicit$offset() {
        return ContentSizeExplicit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ContentSizeExplicit
     * }
     */
    public static MemorySegment ContentSizeExplicit(MemorySegment struct) {
        return struct.asSlice(ContentSizeExplicit$OFFSET, ContentSizeExplicit$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ContentSizeExplicit
     * }
     */
    public static void ContentSizeExplicit(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ContentSizeExplicit$OFFSET, ContentSizeExplicit$LAYOUT.byteSize());
    }

    private static final GroupLayout WindowPadding$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WindowPadding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WindowPadding
     * }
     */
    public static final GroupLayout WindowPadding$layout() {
        return WindowPadding$LAYOUT;
    }

    private static final long WindowPadding$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WindowPadding
     * }
     */
    public static final long WindowPadding$offset() {
        return WindowPadding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WindowPadding
     * }
     */
    public static MemorySegment WindowPadding(MemorySegment struct) {
        return struct.asSlice(WindowPadding$OFFSET, WindowPadding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WindowPadding
     * }
     */
    public static void WindowPadding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WindowPadding$OFFSET, WindowPadding$LAYOUT.byteSize());
    }

    private static final OfFloat WindowRounding$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WindowRounding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WindowRounding
     * }
     */
    public static final OfFloat WindowRounding$layout() {
        return WindowRounding$LAYOUT;
    }

    private static final long WindowRounding$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WindowRounding
     * }
     */
    public static final long WindowRounding$offset() {
        return WindowRounding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WindowRounding
     * }
     */
    public static float WindowRounding(MemorySegment struct) {
        return struct.get(WindowRounding$LAYOUT, WindowRounding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WindowRounding
     * }
     */
    public static void WindowRounding(MemorySegment struct, float fieldValue) {
        struct.set(WindowRounding$LAYOUT, WindowRounding$OFFSET, fieldValue);
    }

    private static final OfFloat WindowBorderSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("WindowBorderSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float WindowBorderSize
     * }
     */
    public static final OfFloat WindowBorderSize$layout() {
        return WindowBorderSize$LAYOUT;
    }

    private static final long WindowBorderSize$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float WindowBorderSize
     * }
     */
    public static final long WindowBorderSize$offset() {
        return WindowBorderSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float WindowBorderSize
     * }
     */
    public static float WindowBorderSize(MemorySegment struct) {
        return struct.get(WindowBorderSize$LAYOUT, WindowBorderSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float WindowBorderSize
     * }
     */
    public static void WindowBorderSize(MemorySegment struct, float fieldValue) {
        struct.set(WindowBorderSize$LAYOUT, WindowBorderSize$OFFSET, fieldValue);
    }

    private static final OfFloat TitleBarHeight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("TitleBarHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float TitleBarHeight
     * }
     */
    public static final OfFloat TitleBarHeight$layout() {
        return TitleBarHeight$LAYOUT;
    }

    private static final long TitleBarHeight$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float TitleBarHeight
     * }
     */
    public static final long TitleBarHeight$offset() {
        return TitleBarHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float TitleBarHeight
     * }
     */
    public static float TitleBarHeight(MemorySegment struct) {
        return struct.get(TitleBarHeight$LAYOUT, TitleBarHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float TitleBarHeight
     * }
     */
    public static void TitleBarHeight(MemorySegment struct, float fieldValue) {
        struct.set(TitleBarHeight$LAYOUT, TitleBarHeight$OFFSET, fieldValue);
    }

    private static final OfFloat MenuBarHeight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MenuBarHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MenuBarHeight
     * }
     */
    public static final OfFloat MenuBarHeight$layout() {
        return MenuBarHeight$LAYOUT;
    }

    private static final long MenuBarHeight$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MenuBarHeight
     * }
     */
    public static final long MenuBarHeight$offset() {
        return MenuBarHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MenuBarHeight
     * }
     */
    public static float MenuBarHeight(MemorySegment struct) {
        return struct.get(MenuBarHeight$LAYOUT, MenuBarHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MenuBarHeight
     * }
     */
    public static void MenuBarHeight(MemorySegment struct, float fieldValue) {
        struct.set(MenuBarHeight$LAYOUT, MenuBarHeight$OFFSET, fieldValue);
    }

    private static final OfFloat DecoOuterSizeX1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DecoOuterSizeX1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DecoOuterSizeX1
     * }
     */
    public static final OfFloat DecoOuterSizeX1$layout() {
        return DecoOuterSizeX1$LAYOUT;
    }

    private static final long DecoOuterSizeX1$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DecoOuterSizeX1
     * }
     */
    public static final long DecoOuterSizeX1$offset() {
        return DecoOuterSizeX1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DecoOuterSizeX1
     * }
     */
    public static float DecoOuterSizeX1(MemorySegment struct) {
        return struct.get(DecoOuterSizeX1$LAYOUT, DecoOuterSizeX1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DecoOuterSizeX1
     * }
     */
    public static void DecoOuterSizeX1(MemorySegment struct, float fieldValue) {
        struct.set(DecoOuterSizeX1$LAYOUT, DecoOuterSizeX1$OFFSET, fieldValue);
    }

    private static final OfFloat DecoOuterSizeY1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DecoOuterSizeY1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DecoOuterSizeY1
     * }
     */
    public static final OfFloat DecoOuterSizeY1$layout() {
        return DecoOuterSizeY1$LAYOUT;
    }

    private static final long DecoOuterSizeY1$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DecoOuterSizeY1
     * }
     */
    public static final long DecoOuterSizeY1$offset() {
        return DecoOuterSizeY1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DecoOuterSizeY1
     * }
     */
    public static float DecoOuterSizeY1(MemorySegment struct) {
        return struct.get(DecoOuterSizeY1$LAYOUT, DecoOuterSizeY1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DecoOuterSizeY1
     * }
     */
    public static void DecoOuterSizeY1(MemorySegment struct, float fieldValue) {
        struct.set(DecoOuterSizeY1$LAYOUT, DecoOuterSizeY1$OFFSET, fieldValue);
    }

    private static final OfFloat DecoOuterSizeX2$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DecoOuterSizeX2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DecoOuterSizeX2
     * }
     */
    public static final OfFloat DecoOuterSizeX2$layout() {
        return DecoOuterSizeX2$LAYOUT;
    }

    private static final long DecoOuterSizeX2$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DecoOuterSizeX2
     * }
     */
    public static final long DecoOuterSizeX2$offset() {
        return DecoOuterSizeX2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DecoOuterSizeX2
     * }
     */
    public static float DecoOuterSizeX2(MemorySegment struct) {
        return struct.get(DecoOuterSizeX2$LAYOUT, DecoOuterSizeX2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DecoOuterSizeX2
     * }
     */
    public static void DecoOuterSizeX2(MemorySegment struct, float fieldValue) {
        struct.set(DecoOuterSizeX2$LAYOUT, DecoOuterSizeX2$OFFSET, fieldValue);
    }

    private static final OfFloat DecoOuterSizeY2$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DecoOuterSizeY2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DecoOuterSizeY2
     * }
     */
    public static final OfFloat DecoOuterSizeY2$layout() {
        return DecoOuterSizeY2$LAYOUT;
    }

    private static final long DecoOuterSizeY2$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DecoOuterSizeY2
     * }
     */
    public static final long DecoOuterSizeY2$offset() {
        return DecoOuterSizeY2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DecoOuterSizeY2
     * }
     */
    public static float DecoOuterSizeY2(MemorySegment struct) {
        return struct.get(DecoOuterSizeY2$LAYOUT, DecoOuterSizeY2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DecoOuterSizeY2
     * }
     */
    public static void DecoOuterSizeY2(MemorySegment struct, float fieldValue) {
        struct.set(DecoOuterSizeY2$LAYOUT, DecoOuterSizeY2$OFFSET, fieldValue);
    }

    private static final OfFloat DecoInnerSizeX1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DecoInnerSizeX1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DecoInnerSizeX1
     * }
     */
    public static final OfFloat DecoInnerSizeX1$layout() {
        return DecoInnerSizeX1$LAYOUT;
    }

    private static final long DecoInnerSizeX1$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DecoInnerSizeX1
     * }
     */
    public static final long DecoInnerSizeX1$offset() {
        return DecoInnerSizeX1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DecoInnerSizeX1
     * }
     */
    public static float DecoInnerSizeX1(MemorySegment struct) {
        return struct.get(DecoInnerSizeX1$LAYOUT, DecoInnerSizeX1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DecoInnerSizeX1
     * }
     */
    public static void DecoInnerSizeX1(MemorySegment struct, float fieldValue) {
        struct.set(DecoInnerSizeX1$LAYOUT, DecoInnerSizeX1$OFFSET, fieldValue);
    }

    private static final OfFloat DecoInnerSizeY1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("DecoInnerSizeY1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float DecoInnerSizeY1
     * }
     */
    public static final OfFloat DecoInnerSizeY1$layout() {
        return DecoInnerSizeY1$LAYOUT;
    }

    private static final long DecoInnerSizeY1$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float DecoInnerSizeY1
     * }
     */
    public static final long DecoInnerSizeY1$offset() {
        return DecoInnerSizeY1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float DecoInnerSizeY1
     * }
     */
    public static float DecoInnerSizeY1(MemorySegment struct) {
        return struct.get(DecoInnerSizeY1$LAYOUT, DecoInnerSizeY1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float DecoInnerSizeY1
     * }
     */
    public static void DecoInnerSizeY1(MemorySegment struct, float fieldValue) {
        struct.set(DecoInnerSizeY1$LAYOUT, DecoInnerSizeY1$OFFSET, fieldValue);
    }

    private static final OfInt NameBufLen$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NameBufLen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int NameBufLen
     * }
     */
    public static final OfInt NameBufLen$layout() {
        return NameBufLen$LAYOUT;
    }

    private static final long NameBufLen$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int NameBufLen
     * }
     */
    public static final long NameBufLen$offset() {
        return NameBufLen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int NameBufLen
     * }
     */
    public static int NameBufLen(MemorySegment struct) {
        return struct.get(NameBufLen$LAYOUT, NameBufLen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int NameBufLen
     * }
     */
    public static void NameBufLen(MemorySegment struct, int fieldValue) {
        struct.set(NameBufLen$LAYOUT, NameBufLen$OFFSET, fieldValue);
    }

    private static final OfInt MoveId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MoveId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID MoveId
     * }
     */
    public static final OfInt MoveId$layout() {
        return MoveId$LAYOUT;
    }

    private static final long MoveId$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID MoveId
     * }
     */
    public static final long MoveId$offset() {
        return MoveId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID MoveId
     * }
     */
    public static int MoveId(MemorySegment struct) {
        return struct.get(MoveId$LAYOUT, MoveId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID MoveId
     * }
     */
    public static void MoveId(MemorySegment struct, int fieldValue) {
        struct.set(MoveId$LAYOUT, MoveId$OFFSET, fieldValue);
    }

    private static final OfInt TabId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TabId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID TabId
     * }
     */
    public static final OfInt TabId$layout() {
        return TabId$LAYOUT;
    }

    private static final long TabId$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID TabId
     * }
     */
    public static final long TabId$offset() {
        return TabId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID TabId
     * }
     */
    public static int TabId(MemorySegment struct) {
        return struct.get(TabId$LAYOUT, TabId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID TabId
     * }
     */
    public static void TabId(MemorySegment struct, int fieldValue) {
        struct.set(TabId$LAYOUT, TabId$OFFSET, fieldValue);
    }

    private static final OfInt ChildId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ChildId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ChildId
     * }
     */
    public static final OfInt ChildId$layout() {
        return ChildId$LAYOUT;
    }

    private static final long ChildId$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ChildId
     * }
     */
    public static final long ChildId$offset() {
        return ChildId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ChildId
     * }
     */
    public static int ChildId(MemorySegment struct) {
        return struct.get(ChildId$LAYOUT, ChildId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ChildId
     * }
     */
    public static void ChildId(MemorySegment struct, int fieldValue) {
        struct.set(ChildId$LAYOUT, ChildId$OFFSET, fieldValue);
    }

    private static final OfInt PopupId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PopupId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID PopupId
     * }
     */
    public static final OfInt PopupId$layout() {
        return PopupId$LAYOUT;
    }

    private static final long PopupId$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID PopupId
     * }
     */
    public static final long PopupId$offset() {
        return PopupId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID PopupId
     * }
     */
    public static int PopupId(MemorySegment struct) {
        return struct.get(PopupId$LAYOUT, PopupId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID PopupId
     * }
     */
    public static void PopupId(MemorySegment struct, int fieldValue) {
        struct.set(PopupId$LAYOUT, PopupId$OFFSET, fieldValue);
    }

    private static final GroupLayout Scroll$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Scroll"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 Scroll
     * }
     */
    public static final GroupLayout Scroll$layout() {
        return Scroll$LAYOUT;
    }

    private static final long Scroll$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 Scroll
     * }
     */
    public static final long Scroll$offset() {
        return Scroll$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 Scroll
     * }
     */
    public static MemorySegment Scroll(MemorySegment struct) {
        return struct.asSlice(Scroll$OFFSET, Scroll$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 Scroll
     * }
     */
    public static void Scroll(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Scroll$OFFSET, Scroll$LAYOUT.byteSize());
    }

    private static final GroupLayout ScrollMax$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ScrollMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ScrollMax
     * }
     */
    public static final GroupLayout ScrollMax$layout() {
        return ScrollMax$LAYOUT;
    }

    private static final long ScrollMax$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ScrollMax
     * }
     */
    public static final long ScrollMax$offset() {
        return ScrollMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollMax
     * }
     */
    public static MemorySegment ScrollMax(MemorySegment struct) {
        return struct.asSlice(ScrollMax$OFFSET, ScrollMax$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollMax
     * }
     */
    public static void ScrollMax(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ScrollMax$OFFSET, ScrollMax$LAYOUT.byteSize());
    }

    private static final GroupLayout ScrollTarget$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ScrollTarget"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTarget
     * }
     */
    public static final GroupLayout ScrollTarget$layout() {
        return ScrollTarget$LAYOUT;
    }

    private static final long ScrollTarget$OFFSET = 220;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTarget
     * }
     */
    public static final long ScrollTarget$offset() {
        return ScrollTarget$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTarget
     * }
     */
    public static MemorySegment ScrollTarget(MemorySegment struct) {
        return struct.asSlice(ScrollTarget$OFFSET, ScrollTarget$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTarget
     * }
     */
    public static void ScrollTarget(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ScrollTarget$OFFSET, ScrollTarget$LAYOUT.byteSize());
    }

    private static final GroupLayout ScrollTargetCenterRatio$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ScrollTargetCenterRatio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTargetCenterRatio
     * }
     */
    public static final GroupLayout ScrollTargetCenterRatio$layout() {
        return ScrollTargetCenterRatio$LAYOUT;
    }

    private static final long ScrollTargetCenterRatio$OFFSET = 228;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTargetCenterRatio
     * }
     */
    public static final long ScrollTargetCenterRatio$offset() {
        return ScrollTargetCenterRatio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTargetCenterRatio
     * }
     */
    public static MemorySegment ScrollTargetCenterRatio(MemorySegment struct) {
        return struct.asSlice(ScrollTargetCenterRatio$OFFSET, ScrollTargetCenterRatio$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTargetCenterRatio
     * }
     */
    public static void ScrollTargetCenterRatio(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ScrollTargetCenterRatio$OFFSET, ScrollTargetCenterRatio$LAYOUT.byteSize());
    }

    private static final GroupLayout ScrollTargetEdgeSnapDist$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ScrollTargetEdgeSnapDist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTargetEdgeSnapDist
     * }
     */
    public static final GroupLayout ScrollTargetEdgeSnapDist$layout() {
        return ScrollTargetEdgeSnapDist$LAYOUT;
    }

    private static final long ScrollTargetEdgeSnapDist$OFFSET = 236;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTargetEdgeSnapDist
     * }
     */
    public static final long ScrollTargetEdgeSnapDist$offset() {
        return ScrollTargetEdgeSnapDist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTargetEdgeSnapDist
     * }
     */
    public static MemorySegment ScrollTargetEdgeSnapDist(MemorySegment struct) {
        return struct.asSlice(ScrollTargetEdgeSnapDist$OFFSET, ScrollTargetEdgeSnapDist$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollTargetEdgeSnapDist
     * }
     */
    public static void ScrollTargetEdgeSnapDist(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ScrollTargetEdgeSnapDist$OFFSET, ScrollTargetEdgeSnapDist$LAYOUT.byteSize());
    }

    private static final GroupLayout ScrollbarSizes$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ScrollbarSizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 ScrollbarSizes
     * }
     */
    public static final GroupLayout ScrollbarSizes$layout() {
        return ScrollbarSizes$LAYOUT;
    }

    private static final long ScrollbarSizes$OFFSET = 244;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 ScrollbarSizes
     * }
     */
    public static final long ScrollbarSizes$offset() {
        return ScrollbarSizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollbarSizes
     * }
     */
    public static MemorySegment ScrollbarSizes(MemorySegment struct) {
        return struct.asSlice(ScrollbarSizes$OFFSET, ScrollbarSizes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 ScrollbarSizes
     * }
     */
    public static void ScrollbarSizes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ScrollbarSizes$OFFSET, ScrollbarSizes$LAYOUT.byteSize());
    }

    private static final OfBoolean ScrollbarX$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ScrollbarX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ScrollbarX
     * }
     */
    public static final OfBoolean ScrollbarX$layout() {
        return ScrollbarX$LAYOUT;
    }

    private static final long ScrollbarX$OFFSET = 252;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ScrollbarX
     * }
     */
    public static final long ScrollbarX$offset() {
        return ScrollbarX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ScrollbarX
     * }
     */
    public static boolean ScrollbarX(MemorySegment struct) {
        return struct.get(ScrollbarX$LAYOUT, ScrollbarX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ScrollbarX
     * }
     */
    public static void ScrollbarX(MemorySegment struct, boolean fieldValue) {
        struct.set(ScrollbarX$LAYOUT, ScrollbarX$OFFSET, fieldValue);
    }

    private static final OfBoolean ScrollbarY$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ScrollbarY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ScrollbarY
     * }
     */
    public static final OfBoolean ScrollbarY$layout() {
        return ScrollbarY$LAYOUT;
    }

    private static final long ScrollbarY$OFFSET = 253;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ScrollbarY
     * }
     */
    public static final long ScrollbarY$offset() {
        return ScrollbarY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ScrollbarY
     * }
     */
    public static boolean ScrollbarY(MemorySegment struct) {
        return struct.get(ScrollbarY$LAYOUT, ScrollbarY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ScrollbarY
     * }
     */
    public static void ScrollbarY(MemorySegment struct, boolean fieldValue) {
        struct.set(ScrollbarY$LAYOUT, ScrollbarY$OFFSET, fieldValue);
    }

    private static final OfBoolean ViewportOwned$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("ViewportOwned"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool ViewportOwned
     * }
     */
    public static final OfBoolean ViewportOwned$layout() {
        return ViewportOwned$LAYOUT;
    }

    private static final long ViewportOwned$OFFSET = 254;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool ViewportOwned
     * }
     */
    public static final long ViewportOwned$offset() {
        return ViewportOwned$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool ViewportOwned
     * }
     */
    public static boolean ViewportOwned(MemorySegment struct) {
        return struct.get(ViewportOwned$LAYOUT, ViewportOwned$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool ViewportOwned
     * }
     */
    public static void ViewportOwned(MemorySegment struct, boolean fieldValue) {
        struct.set(ViewportOwned$LAYOUT, ViewportOwned$OFFSET, fieldValue);
    }

    private static final OfBoolean Active$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("Active"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool Active
     * }
     */
    public static final OfBoolean Active$layout() {
        return Active$LAYOUT;
    }

    private static final long Active$OFFSET = 255;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool Active
     * }
     */
    public static final long Active$offset() {
        return Active$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool Active
     * }
     */
    public static boolean Active(MemorySegment struct) {
        return struct.get(Active$LAYOUT, Active$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool Active
     * }
     */
    public static void Active(MemorySegment struct, boolean fieldValue) {
        struct.set(Active$LAYOUT, Active$OFFSET, fieldValue);
    }

    private static final OfBoolean WasActive$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WasActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WasActive
     * }
     */
    public static final OfBoolean WasActive$layout() {
        return WasActive$LAYOUT;
    }

    private static final long WasActive$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WasActive
     * }
     */
    public static final long WasActive$offset() {
        return WasActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WasActive
     * }
     */
    public static boolean WasActive(MemorySegment struct) {
        return struct.get(WasActive$LAYOUT, WasActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WasActive
     * }
     */
    public static void WasActive(MemorySegment struct, boolean fieldValue) {
        struct.set(WasActive$LAYOUT, WasActive$OFFSET, fieldValue);
    }

    private static final OfBoolean WriteAccessed$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WriteAccessed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WriteAccessed
     * }
     */
    public static final OfBoolean WriteAccessed$layout() {
        return WriteAccessed$LAYOUT;
    }

    private static final long WriteAccessed$OFFSET = 257;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WriteAccessed
     * }
     */
    public static final long WriteAccessed$offset() {
        return WriteAccessed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WriteAccessed
     * }
     */
    public static boolean WriteAccessed(MemorySegment struct) {
        return struct.get(WriteAccessed$LAYOUT, WriteAccessed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WriteAccessed
     * }
     */
    public static void WriteAccessed(MemorySegment struct, boolean fieldValue) {
        struct.set(WriteAccessed$LAYOUT, WriteAccessed$OFFSET, fieldValue);
    }

    private static final OfBoolean Collapsed$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("Collapsed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool Collapsed
     * }
     */
    public static final OfBoolean Collapsed$layout() {
        return Collapsed$LAYOUT;
    }

    private static final long Collapsed$OFFSET = 258;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool Collapsed
     * }
     */
    public static final long Collapsed$offset() {
        return Collapsed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool Collapsed
     * }
     */
    public static boolean Collapsed(MemorySegment struct) {
        return struct.get(Collapsed$LAYOUT, Collapsed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool Collapsed
     * }
     */
    public static void Collapsed(MemorySegment struct, boolean fieldValue) {
        struct.set(Collapsed$LAYOUT, Collapsed$OFFSET, fieldValue);
    }

    private static final OfBoolean WantCollapseToggle$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("WantCollapseToggle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool WantCollapseToggle
     * }
     */
    public static final OfBoolean WantCollapseToggle$layout() {
        return WantCollapseToggle$LAYOUT;
    }

    private static final long WantCollapseToggle$OFFSET = 259;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool WantCollapseToggle
     * }
     */
    public static final long WantCollapseToggle$offset() {
        return WantCollapseToggle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool WantCollapseToggle
     * }
     */
    public static boolean WantCollapseToggle(MemorySegment struct) {
        return struct.get(WantCollapseToggle$LAYOUT, WantCollapseToggle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool WantCollapseToggle
     * }
     */
    public static void WantCollapseToggle(MemorySegment struct, boolean fieldValue) {
        struct.set(WantCollapseToggle$LAYOUT, WantCollapseToggle$OFFSET, fieldValue);
    }

    private static final OfBoolean SkipItems$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("SkipItems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool SkipItems
     * }
     */
    public static final OfBoolean SkipItems$layout() {
        return SkipItems$LAYOUT;
    }

    private static final long SkipItems$OFFSET = 260;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool SkipItems
     * }
     */
    public static final long SkipItems$offset() {
        return SkipItems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool SkipItems
     * }
     */
    public static boolean SkipItems(MemorySegment struct) {
        return struct.get(SkipItems$LAYOUT, SkipItems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool SkipItems
     * }
     */
    public static void SkipItems(MemorySegment struct, boolean fieldValue) {
        struct.set(SkipItems$LAYOUT, SkipItems$OFFSET, fieldValue);
    }

    private static final OfBoolean SkipRefresh$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("SkipRefresh"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool SkipRefresh
     * }
     */
    public static final OfBoolean SkipRefresh$layout() {
        return SkipRefresh$LAYOUT;
    }

    private static final long SkipRefresh$OFFSET = 261;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool SkipRefresh
     * }
     */
    public static final long SkipRefresh$offset() {
        return SkipRefresh$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool SkipRefresh
     * }
     */
    public static boolean SkipRefresh(MemorySegment struct) {
        return struct.get(SkipRefresh$LAYOUT, SkipRefresh$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool SkipRefresh
     * }
     */
    public static void SkipRefresh(MemorySegment struct, boolean fieldValue) {
        struct.set(SkipRefresh$LAYOUT, SkipRefresh$OFFSET, fieldValue);
    }

    private static final OfBoolean Appearing$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("Appearing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool Appearing
     * }
     */
    public static final OfBoolean Appearing$layout() {
        return Appearing$LAYOUT;
    }

    private static final long Appearing$OFFSET = 262;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool Appearing
     * }
     */
    public static final long Appearing$offset() {
        return Appearing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool Appearing
     * }
     */
    public static boolean Appearing(MemorySegment struct) {
        return struct.get(Appearing$LAYOUT, Appearing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool Appearing
     * }
     */
    public static void Appearing(MemorySegment struct, boolean fieldValue) {
        struct.set(Appearing$LAYOUT, Appearing$OFFSET, fieldValue);
    }

    private static final OfBoolean Hidden$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("Hidden"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool Hidden
     * }
     */
    public static final OfBoolean Hidden$layout() {
        return Hidden$LAYOUT;
    }

    private static final long Hidden$OFFSET = 263;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool Hidden
     * }
     */
    public static final long Hidden$offset() {
        return Hidden$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool Hidden
     * }
     */
    public static boolean Hidden(MemorySegment struct) {
        return struct.get(Hidden$LAYOUT, Hidden$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool Hidden
     * }
     */
    public static void Hidden(MemorySegment struct, boolean fieldValue) {
        struct.set(Hidden$LAYOUT, Hidden$OFFSET, fieldValue);
    }

    private static final OfBoolean IsFallbackWindow$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsFallbackWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsFallbackWindow
     * }
     */
    public static final OfBoolean IsFallbackWindow$layout() {
        return IsFallbackWindow$LAYOUT;
    }

    private static final long IsFallbackWindow$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsFallbackWindow
     * }
     */
    public static final long IsFallbackWindow$offset() {
        return IsFallbackWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsFallbackWindow
     * }
     */
    public static boolean IsFallbackWindow(MemorySegment struct) {
        return struct.get(IsFallbackWindow$LAYOUT, IsFallbackWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsFallbackWindow
     * }
     */
    public static void IsFallbackWindow(MemorySegment struct, boolean fieldValue) {
        struct.set(IsFallbackWindow$LAYOUT, IsFallbackWindow$OFFSET, fieldValue);
    }

    private static final OfBoolean IsExplicitChild$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsExplicitChild"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsExplicitChild
     * }
     */
    public static final OfBoolean IsExplicitChild$layout() {
        return IsExplicitChild$LAYOUT;
    }

    private static final long IsExplicitChild$OFFSET = 265;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsExplicitChild
     * }
     */
    public static final long IsExplicitChild$offset() {
        return IsExplicitChild$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsExplicitChild
     * }
     */
    public static boolean IsExplicitChild(MemorySegment struct) {
        return struct.get(IsExplicitChild$LAYOUT, IsExplicitChild$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsExplicitChild
     * }
     */
    public static void IsExplicitChild(MemorySegment struct, boolean fieldValue) {
        struct.set(IsExplicitChild$LAYOUT, IsExplicitChild$OFFSET, fieldValue);
    }

    private static final OfBoolean HasCloseButton$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("HasCloseButton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool HasCloseButton
     * }
     */
    public static final OfBoolean HasCloseButton$layout() {
        return HasCloseButton$LAYOUT;
    }

    private static final long HasCloseButton$OFFSET = 266;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool HasCloseButton
     * }
     */
    public static final long HasCloseButton$offset() {
        return HasCloseButton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool HasCloseButton
     * }
     */
    public static boolean HasCloseButton(MemorySegment struct) {
        return struct.get(HasCloseButton$LAYOUT, HasCloseButton$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool HasCloseButton
     * }
     */
    public static void HasCloseButton(MemorySegment struct, boolean fieldValue) {
        struct.set(HasCloseButton$LAYOUT, HasCloseButton$OFFSET, fieldValue);
    }

    private static final OfByte ResizeBorderHovered$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ResizeBorderHovered"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * signed char ResizeBorderHovered
     * }
     */
    public static final OfByte ResizeBorderHovered$layout() {
        return ResizeBorderHovered$LAYOUT;
    }

    private static final long ResizeBorderHovered$OFFSET = 267;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * signed char ResizeBorderHovered
     * }
     */
    public static final long ResizeBorderHovered$offset() {
        return ResizeBorderHovered$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * signed char ResizeBorderHovered
     * }
     */
    public static byte ResizeBorderHovered(MemorySegment struct) {
        return struct.get(ResizeBorderHovered$LAYOUT, ResizeBorderHovered$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * signed char ResizeBorderHovered
     * }
     */
    public static void ResizeBorderHovered(MemorySegment struct, byte fieldValue) {
        struct.set(ResizeBorderHovered$LAYOUT, ResizeBorderHovered$OFFSET, fieldValue);
    }

    private static final OfByte ResizeBorderHeld$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ResizeBorderHeld"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * signed char ResizeBorderHeld
     * }
     */
    public static final OfByte ResizeBorderHeld$layout() {
        return ResizeBorderHeld$LAYOUT;
    }

    private static final long ResizeBorderHeld$OFFSET = 268;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * signed char ResizeBorderHeld
     * }
     */
    public static final long ResizeBorderHeld$offset() {
        return ResizeBorderHeld$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * signed char ResizeBorderHeld
     * }
     */
    public static byte ResizeBorderHeld(MemorySegment struct) {
        return struct.get(ResizeBorderHeld$LAYOUT, ResizeBorderHeld$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * signed char ResizeBorderHeld
     * }
     */
    public static void ResizeBorderHeld(MemorySegment struct, byte fieldValue) {
        struct.set(ResizeBorderHeld$LAYOUT, ResizeBorderHeld$OFFSET, fieldValue);
    }

    private static final OfShort BeginCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("BeginCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short BeginCount
     * }
     */
    public static final OfShort BeginCount$layout() {
        return BeginCount$LAYOUT;
    }

    private static final long BeginCount$OFFSET = 270;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short BeginCount
     * }
     */
    public static final long BeginCount$offset() {
        return BeginCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short BeginCount
     * }
     */
    public static short BeginCount(MemorySegment struct) {
        return struct.get(BeginCount$LAYOUT, BeginCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short BeginCount
     * }
     */
    public static void BeginCount(MemorySegment struct, short fieldValue) {
        struct.set(BeginCount$LAYOUT, BeginCount$OFFSET, fieldValue);
    }

    private static final OfShort BeginCountPreviousFrame$LAYOUT = (OfShort)$LAYOUT.select(groupElement("BeginCountPreviousFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short BeginCountPreviousFrame
     * }
     */
    public static final OfShort BeginCountPreviousFrame$layout() {
        return BeginCountPreviousFrame$LAYOUT;
    }

    private static final long BeginCountPreviousFrame$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short BeginCountPreviousFrame
     * }
     */
    public static final long BeginCountPreviousFrame$offset() {
        return BeginCountPreviousFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short BeginCountPreviousFrame
     * }
     */
    public static short BeginCountPreviousFrame(MemorySegment struct) {
        return struct.get(BeginCountPreviousFrame$LAYOUT, BeginCountPreviousFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short BeginCountPreviousFrame
     * }
     */
    public static void BeginCountPreviousFrame(MemorySegment struct, short fieldValue) {
        struct.set(BeginCountPreviousFrame$LAYOUT, BeginCountPreviousFrame$OFFSET, fieldValue);
    }

    private static final OfShort BeginOrderWithinParent$LAYOUT = (OfShort)$LAYOUT.select(groupElement("BeginOrderWithinParent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short BeginOrderWithinParent
     * }
     */
    public static final OfShort BeginOrderWithinParent$layout() {
        return BeginOrderWithinParent$LAYOUT;
    }

    private static final long BeginOrderWithinParent$OFFSET = 274;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short BeginOrderWithinParent
     * }
     */
    public static final long BeginOrderWithinParent$offset() {
        return BeginOrderWithinParent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short BeginOrderWithinParent
     * }
     */
    public static short BeginOrderWithinParent(MemorySegment struct) {
        return struct.get(BeginOrderWithinParent$LAYOUT, BeginOrderWithinParent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short BeginOrderWithinParent
     * }
     */
    public static void BeginOrderWithinParent(MemorySegment struct, short fieldValue) {
        struct.set(BeginOrderWithinParent$LAYOUT, BeginOrderWithinParent$OFFSET, fieldValue);
    }

    private static final OfShort BeginOrderWithinContext$LAYOUT = (OfShort)$LAYOUT.select(groupElement("BeginOrderWithinContext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short BeginOrderWithinContext
     * }
     */
    public static final OfShort BeginOrderWithinContext$layout() {
        return BeginOrderWithinContext$LAYOUT;
    }

    private static final long BeginOrderWithinContext$OFFSET = 276;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short BeginOrderWithinContext
     * }
     */
    public static final long BeginOrderWithinContext$offset() {
        return BeginOrderWithinContext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short BeginOrderWithinContext
     * }
     */
    public static short BeginOrderWithinContext(MemorySegment struct) {
        return struct.get(BeginOrderWithinContext$LAYOUT, BeginOrderWithinContext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short BeginOrderWithinContext
     * }
     */
    public static void BeginOrderWithinContext(MemorySegment struct, short fieldValue) {
        struct.set(BeginOrderWithinContext$LAYOUT, BeginOrderWithinContext$OFFSET, fieldValue);
    }

    private static final OfShort FocusOrder$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FocusOrder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short FocusOrder
     * }
     */
    public static final OfShort FocusOrder$layout() {
        return FocusOrder$LAYOUT;
    }

    private static final long FocusOrder$OFFSET = 278;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short FocusOrder
     * }
     */
    public static final long FocusOrder$offset() {
        return FocusOrder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short FocusOrder
     * }
     */
    public static short FocusOrder(MemorySegment struct) {
        return struct.get(FocusOrder$LAYOUT, FocusOrder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short FocusOrder
     * }
     */
    public static void FocusOrder(MemorySegment struct, short fieldValue) {
        struct.set(FocusOrder$LAYOUT, FocusOrder$OFFSET, fieldValue);
    }

    private static final OfByte AutoFitFramesX$LAYOUT = (OfByte)$LAYOUT.select(groupElement("AutoFitFramesX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 AutoFitFramesX
     * }
     */
    public static final OfByte AutoFitFramesX$layout() {
        return AutoFitFramesX$LAYOUT;
    }

    private static final long AutoFitFramesX$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 AutoFitFramesX
     * }
     */
    public static final long AutoFitFramesX$offset() {
        return AutoFitFramesX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 AutoFitFramesX
     * }
     */
    public static byte AutoFitFramesX(MemorySegment struct) {
        return struct.get(AutoFitFramesX$LAYOUT, AutoFitFramesX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 AutoFitFramesX
     * }
     */
    public static void AutoFitFramesX(MemorySegment struct, byte fieldValue) {
        struct.set(AutoFitFramesX$LAYOUT, AutoFitFramesX$OFFSET, fieldValue);
    }

    private static final OfByte AutoFitFramesY$LAYOUT = (OfByte)$LAYOUT.select(groupElement("AutoFitFramesY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 AutoFitFramesY
     * }
     */
    public static final OfByte AutoFitFramesY$layout() {
        return AutoFitFramesY$LAYOUT;
    }

    private static final long AutoFitFramesY$OFFSET = 281;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 AutoFitFramesY
     * }
     */
    public static final long AutoFitFramesY$offset() {
        return AutoFitFramesY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 AutoFitFramesY
     * }
     */
    public static byte AutoFitFramesY(MemorySegment struct) {
        return struct.get(AutoFitFramesY$LAYOUT, AutoFitFramesY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 AutoFitFramesY
     * }
     */
    public static void AutoFitFramesY(MemorySegment struct, byte fieldValue) {
        struct.set(AutoFitFramesY$LAYOUT, AutoFitFramesY$OFFSET, fieldValue);
    }

    private static final OfBoolean AutoFitOnlyGrows$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("AutoFitOnlyGrows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool AutoFitOnlyGrows
     * }
     */
    public static final OfBoolean AutoFitOnlyGrows$layout() {
        return AutoFitOnlyGrows$LAYOUT;
    }

    private static final long AutoFitOnlyGrows$OFFSET = 282;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool AutoFitOnlyGrows
     * }
     */
    public static final long AutoFitOnlyGrows$offset() {
        return AutoFitOnlyGrows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool AutoFitOnlyGrows
     * }
     */
    public static boolean AutoFitOnlyGrows(MemorySegment struct) {
        return struct.get(AutoFitOnlyGrows$LAYOUT, AutoFitOnlyGrows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool AutoFitOnlyGrows
     * }
     */
    public static void AutoFitOnlyGrows(MemorySegment struct, boolean fieldValue) {
        struct.set(AutoFitOnlyGrows$LAYOUT, AutoFitOnlyGrows$OFFSET, fieldValue);
    }

    private static final OfInt AutoPosLastDirection$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AutoPosLastDirection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDir AutoPosLastDirection
     * }
     */
    public static final OfInt AutoPosLastDirection$layout() {
        return AutoPosLastDirection$LAYOUT;
    }

    private static final long AutoPosLastDirection$OFFSET = 284;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDir AutoPosLastDirection
     * }
     */
    public static final long AutoPosLastDirection$offset() {
        return AutoPosLastDirection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDir AutoPosLastDirection
     * }
     */
    public static int AutoPosLastDirection(MemorySegment struct) {
        return struct.get(AutoPosLastDirection$LAYOUT, AutoPosLastDirection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDir AutoPosLastDirection
     * }
     */
    public static void AutoPosLastDirection(MemorySegment struct, int fieldValue) {
        struct.set(AutoPosLastDirection$LAYOUT, AutoPosLastDirection$OFFSET, fieldValue);
    }

    private static final OfByte HiddenFramesCanSkipItems$LAYOUT = (OfByte)$LAYOUT.select(groupElement("HiddenFramesCanSkipItems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesCanSkipItems
     * }
     */
    public static final OfByte HiddenFramesCanSkipItems$layout() {
        return HiddenFramesCanSkipItems$LAYOUT;
    }

    private static final long HiddenFramesCanSkipItems$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesCanSkipItems
     * }
     */
    public static final long HiddenFramesCanSkipItems$offset() {
        return HiddenFramesCanSkipItems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesCanSkipItems
     * }
     */
    public static byte HiddenFramesCanSkipItems(MemorySegment struct) {
        return struct.get(HiddenFramesCanSkipItems$LAYOUT, HiddenFramesCanSkipItems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesCanSkipItems
     * }
     */
    public static void HiddenFramesCanSkipItems(MemorySegment struct, byte fieldValue) {
        struct.set(HiddenFramesCanSkipItems$LAYOUT, HiddenFramesCanSkipItems$OFFSET, fieldValue);
    }

    private static final OfByte HiddenFramesCannotSkipItems$LAYOUT = (OfByte)$LAYOUT.select(groupElement("HiddenFramesCannotSkipItems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesCannotSkipItems
     * }
     */
    public static final OfByte HiddenFramesCannotSkipItems$layout() {
        return HiddenFramesCannotSkipItems$LAYOUT;
    }

    private static final long HiddenFramesCannotSkipItems$OFFSET = 289;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesCannotSkipItems
     * }
     */
    public static final long HiddenFramesCannotSkipItems$offset() {
        return HiddenFramesCannotSkipItems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesCannotSkipItems
     * }
     */
    public static byte HiddenFramesCannotSkipItems(MemorySegment struct) {
        return struct.get(HiddenFramesCannotSkipItems$LAYOUT, HiddenFramesCannotSkipItems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesCannotSkipItems
     * }
     */
    public static void HiddenFramesCannotSkipItems(MemorySegment struct, byte fieldValue) {
        struct.set(HiddenFramesCannotSkipItems$LAYOUT, HiddenFramesCannotSkipItems$OFFSET, fieldValue);
    }

    private static final OfByte HiddenFramesForRenderOnly$LAYOUT = (OfByte)$LAYOUT.select(groupElement("HiddenFramesForRenderOnly"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesForRenderOnly
     * }
     */
    public static final OfByte HiddenFramesForRenderOnly$layout() {
        return HiddenFramesForRenderOnly$LAYOUT;
    }

    private static final long HiddenFramesForRenderOnly$OFFSET = 290;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesForRenderOnly
     * }
     */
    public static final long HiddenFramesForRenderOnly$offset() {
        return HiddenFramesForRenderOnly$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesForRenderOnly
     * }
     */
    public static byte HiddenFramesForRenderOnly(MemorySegment struct) {
        return struct.get(HiddenFramesForRenderOnly$LAYOUT, HiddenFramesForRenderOnly$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 HiddenFramesForRenderOnly
     * }
     */
    public static void HiddenFramesForRenderOnly(MemorySegment struct, byte fieldValue) {
        struct.set(HiddenFramesForRenderOnly$LAYOUT, HiddenFramesForRenderOnly$OFFSET, fieldValue);
    }

    private static final OfByte DisableInputsFrames$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DisableInputsFrames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 DisableInputsFrames
     * }
     */
    public static final OfByte DisableInputsFrames$layout() {
        return DisableInputsFrames$LAYOUT;
    }

    private static final long DisableInputsFrames$OFFSET = 291;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 DisableInputsFrames
     * }
     */
    public static final long DisableInputsFrames$offset() {
        return DisableInputsFrames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 DisableInputsFrames
     * }
     */
    public static byte DisableInputsFrames(MemorySegment struct) {
        return struct.get(DisableInputsFrames$LAYOUT, DisableInputsFrames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 DisableInputsFrames
     * }
     */
    public static void DisableInputsFrames(MemorySegment struct, byte fieldValue) {
        struct.set(DisableInputsFrames$LAYOUT, DisableInputsFrames$OFFSET, fieldValue);
    }

    private static final GroupLayout SetWindowPosVal$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SetWindowPosVal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 SetWindowPosVal
     * }
     */
    public static final GroupLayout SetWindowPosVal$layout() {
        return SetWindowPosVal$LAYOUT;
    }

    private static final long SetWindowPosVal$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 SetWindowPosVal
     * }
     */
    public static final long SetWindowPosVal$offset() {
        return SetWindowPosVal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 SetWindowPosVal
     * }
     */
    public static MemorySegment SetWindowPosVal(MemorySegment struct) {
        return struct.asSlice(SetWindowPosVal$OFFSET, SetWindowPosVal$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 SetWindowPosVal
     * }
     */
    public static void SetWindowPosVal(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SetWindowPosVal$OFFSET, SetWindowPosVal$LAYOUT.byteSize());
    }

    private static final GroupLayout SetWindowPosPivot$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SetWindowPosPivot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 SetWindowPosPivot
     * }
     */
    public static final GroupLayout SetWindowPosPivot$layout() {
        return SetWindowPosPivot$LAYOUT;
    }

    private static final long SetWindowPosPivot$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 SetWindowPosPivot
     * }
     */
    public static final long SetWindowPosPivot$offset() {
        return SetWindowPosPivot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 SetWindowPosPivot
     * }
     */
    public static MemorySegment SetWindowPosPivot(MemorySegment struct) {
        return struct.asSlice(SetWindowPosPivot$OFFSET, SetWindowPosPivot$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 SetWindowPosPivot
     * }
     */
    public static void SetWindowPosPivot(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SetWindowPosPivot$OFFSET, SetWindowPosPivot$LAYOUT.byteSize());
    }

    private static final GroupLayout IDStack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("IDStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiID IDStack
     * }
     */
    public static final GroupLayout IDStack$layout() {
        return IDStack$LAYOUT;
    }

    private static final long IDStack$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiID IDStack
     * }
     */
    public static final long IDStack$offset() {
        return IDStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiID IDStack
     * }
     */
    public static MemorySegment IDStack(MemorySegment struct) {
        return struct.asSlice(IDStack$OFFSET, IDStack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiID IDStack
     * }
     */
    public static void IDStack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, IDStack$OFFSET, IDStack$LAYOUT.byteSize());
    }

    private static final GroupLayout DC$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DC"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindowTempData DC
     * }
     */
    public static final GroupLayout DC$layout() {
        return DC$LAYOUT;
    }

    private static final long DC$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindowTempData DC
     * }
     */
    public static final long DC$offset() {
        return DC$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindowTempData DC
     * }
     */
    public static MemorySegment DC(MemorySegment struct) {
        return struct.asSlice(DC$OFFSET, DC$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindowTempData DC
     * }
     */
    public static void DC(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DC$OFFSET, DC$LAYOUT.byteSize());
    }

    private static final GroupLayout OuterRectClipped$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("OuterRectClipped"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect OuterRectClipped
     * }
     */
    public static final GroupLayout OuterRectClipped$layout() {
        return OuterRectClipped$LAYOUT;
    }

    private static final long OuterRectClipped$OFFSET = 560;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect OuterRectClipped
     * }
     */
    public static final long OuterRectClipped$offset() {
        return OuterRectClipped$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect OuterRectClipped
     * }
     */
    public static MemorySegment OuterRectClipped(MemorySegment struct) {
        return struct.asSlice(OuterRectClipped$OFFSET, OuterRectClipped$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect OuterRectClipped
     * }
     */
    public static void OuterRectClipped(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OuterRectClipped$OFFSET, OuterRectClipped$LAYOUT.byteSize());
    }

    private static final GroupLayout InnerRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InnerRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect InnerRect
     * }
     */
    public static final GroupLayout InnerRect$layout() {
        return InnerRect$LAYOUT;
    }

    private static final long InnerRect$OFFSET = 576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect InnerRect
     * }
     */
    public static final long InnerRect$offset() {
        return InnerRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect InnerRect
     * }
     */
    public static MemorySegment InnerRect(MemorySegment struct) {
        return struct.asSlice(InnerRect$OFFSET, InnerRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect InnerRect
     * }
     */
    public static void InnerRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InnerRect$OFFSET, InnerRect$LAYOUT.byteSize());
    }

    private static final GroupLayout InnerClipRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InnerClipRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect InnerClipRect
     * }
     */
    public static final GroupLayout InnerClipRect$layout() {
        return InnerClipRect$LAYOUT;
    }

    private static final long InnerClipRect$OFFSET = 592;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect InnerClipRect
     * }
     */
    public static final long InnerClipRect$offset() {
        return InnerClipRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect InnerClipRect
     * }
     */
    public static MemorySegment InnerClipRect(MemorySegment struct) {
        return struct.asSlice(InnerClipRect$OFFSET, InnerClipRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect InnerClipRect
     * }
     */
    public static void InnerClipRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InnerClipRect$OFFSET, InnerClipRect$LAYOUT.byteSize());
    }

    private static final GroupLayout WorkRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WorkRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect WorkRect
     * }
     */
    public static final GroupLayout WorkRect$layout() {
        return WorkRect$LAYOUT;
    }

    private static final long WorkRect$OFFSET = 608;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect WorkRect
     * }
     */
    public static final long WorkRect$offset() {
        return WorkRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect WorkRect
     * }
     */
    public static MemorySegment WorkRect(MemorySegment struct) {
        return struct.asSlice(WorkRect$OFFSET, WorkRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect WorkRect
     * }
     */
    public static void WorkRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WorkRect$OFFSET, WorkRect$LAYOUT.byteSize());
    }

    private static final GroupLayout ParentWorkRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ParentWorkRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect ParentWorkRect
     * }
     */
    public static final GroupLayout ParentWorkRect$layout() {
        return ParentWorkRect$LAYOUT;
    }

    private static final long ParentWorkRect$OFFSET = 624;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect ParentWorkRect
     * }
     */
    public static final long ParentWorkRect$offset() {
        return ParentWorkRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect ParentWorkRect
     * }
     */
    public static MemorySegment ParentWorkRect(MemorySegment struct) {
        return struct.asSlice(ParentWorkRect$OFFSET, ParentWorkRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect ParentWorkRect
     * }
     */
    public static void ParentWorkRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ParentWorkRect$OFFSET, ParentWorkRect$LAYOUT.byteSize());
    }

    private static final GroupLayout ClipRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ClipRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect ClipRect
     * }
     */
    public static final GroupLayout ClipRect$layout() {
        return ClipRect$LAYOUT;
    }

    private static final long ClipRect$OFFSET = 640;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect ClipRect
     * }
     */
    public static final long ClipRect$offset() {
        return ClipRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect ClipRect
     * }
     */
    public static MemorySegment ClipRect(MemorySegment struct) {
        return struct.asSlice(ClipRect$OFFSET, ClipRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect ClipRect
     * }
     */
    public static void ClipRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ClipRect$OFFSET, ClipRect$LAYOUT.byteSize());
    }

    private static final GroupLayout ContentRegionRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ContentRegionRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect ContentRegionRect
     * }
     */
    public static final GroupLayout ContentRegionRect$layout() {
        return ContentRegionRect$LAYOUT;
    }

    private static final long ContentRegionRect$OFFSET = 656;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect ContentRegionRect
     * }
     */
    public static final long ContentRegionRect$offset() {
        return ContentRegionRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect ContentRegionRect
     * }
     */
    public static MemorySegment ContentRegionRect(MemorySegment struct) {
        return struct.asSlice(ContentRegionRect$OFFSET, ContentRegionRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect ContentRegionRect
     * }
     */
    public static void ContentRegionRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ContentRegionRect$OFFSET, ContentRegionRect$LAYOUT.byteSize());
    }

    private static final GroupLayout HitTestHoleSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("HitTestHoleSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2ih HitTestHoleSize
     * }
     */
    public static final GroupLayout HitTestHoleSize$layout() {
        return HitTestHoleSize$LAYOUT;
    }

    private static final long HitTestHoleSize$OFFSET = 672;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2ih HitTestHoleSize
     * }
     */
    public static final long HitTestHoleSize$offset() {
        return HitTestHoleSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2ih HitTestHoleSize
     * }
     */
    public static MemorySegment HitTestHoleSize(MemorySegment struct) {
        return struct.asSlice(HitTestHoleSize$OFFSET, HitTestHoleSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2ih HitTestHoleSize
     * }
     */
    public static void HitTestHoleSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, HitTestHoleSize$OFFSET, HitTestHoleSize$LAYOUT.byteSize());
    }

    private static final GroupLayout HitTestHoleOffset$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("HitTestHoleOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2ih HitTestHoleOffset
     * }
     */
    public static final GroupLayout HitTestHoleOffset$layout() {
        return HitTestHoleOffset$LAYOUT;
    }

    private static final long HitTestHoleOffset$OFFSET = 676;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2ih HitTestHoleOffset
     * }
     */
    public static final long HitTestHoleOffset$offset() {
        return HitTestHoleOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2ih HitTestHoleOffset
     * }
     */
    public static MemorySegment HitTestHoleOffset(MemorySegment struct) {
        return struct.asSlice(HitTestHoleOffset$OFFSET, HitTestHoleOffset$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2ih HitTestHoleOffset
     * }
     */
    public static void HitTestHoleOffset(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, HitTestHoleOffset$OFFSET, HitTestHoleOffset$LAYOUT.byteSize());
    }

    private static final OfInt LastFrameActive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFrameActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final OfInt LastFrameActive$layout() {
        return LastFrameActive$LAYOUT;
    }

    private static final long LastFrameActive$OFFSET = 680;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final long LastFrameActive$offset() {
        return LastFrameActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static int LastFrameActive(MemorySegment struct) {
        return struct.get(LastFrameActive$LAYOUT, LastFrameActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static void LastFrameActive(MemorySegment struct, int fieldValue) {
        struct.set(LastFrameActive$LAYOUT, LastFrameActive$OFFSET, fieldValue);
    }

    private static final OfInt LastFrameJustFocused$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFrameJustFocused"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastFrameJustFocused
     * }
     */
    public static final OfInt LastFrameJustFocused$layout() {
        return LastFrameJustFocused$LAYOUT;
    }

    private static final long LastFrameJustFocused$OFFSET = 684;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastFrameJustFocused
     * }
     */
    public static final long LastFrameJustFocused$offset() {
        return LastFrameJustFocused$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastFrameJustFocused
     * }
     */
    public static int LastFrameJustFocused(MemorySegment struct) {
        return struct.get(LastFrameJustFocused$LAYOUT, LastFrameJustFocused$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastFrameJustFocused
     * }
     */
    public static void LastFrameJustFocused(MemorySegment struct, int fieldValue) {
        struct.set(LastFrameJustFocused$LAYOUT, LastFrameJustFocused$OFFSET, fieldValue);
    }

    private static final OfFloat LastTimeActive$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("LastTimeActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float LastTimeActive
     * }
     */
    public static final OfFloat LastTimeActive$layout() {
        return LastTimeActive$LAYOUT;
    }

    private static final long LastTimeActive$OFFSET = 688;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float LastTimeActive
     * }
     */
    public static final long LastTimeActive$offset() {
        return LastTimeActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float LastTimeActive
     * }
     */
    public static float LastTimeActive(MemorySegment struct) {
        return struct.get(LastTimeActive$LAYOUT, LastTimeActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float LastTimeActive
     * }
     */
    public static void LastTimeActive(MemorySegment struct, float fieldValue) {
        struct.set(LastTimeActive$LAYOUT, LastTimeActive$OFFSET, fieldValue);
    }

    private static final OfFloat ItemWidthDefault$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ItemWidthDefault"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ItemWidthDefault
     * }
     */
    public static final OfFloat ItemWidthDefault$layout() {
        return ItemWidthDefault$LAYOUT;
    }

    private static final long ItemWidthDefault$OFFSET = 692;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ItemWidthDefault
     * }
     */
    public static final long ItemWidthDefault$offset() {
        return ItemWidthDefault$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ItemWidthDefault
     * }
     */
    public static float ItemWidthDefault(MemorySegment struct) {
        return struct.get(ItemWidthDefault$LAYOUT, ItemWidthDefault$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ItemWidthDefault
     * }
     */
    public static void ItemWidthDefault(MemorySegment struct, float fieldValue) {
        struct.set(ItemWidthDefault$LAYOUT, ItemWidthDefault$OFFSET, fieldValue);
    }

    private static final GroupLayout StateStorage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("StateStorage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiStorage StateStorage
     * }
     */
    public static final GroupLayout StateStorage$layout() {
        return StateStorage$LAYOUT;
    }

    private static final long StateStorage$OFFSET = 696;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiStorage StateStorage
     * }
     */
    public static final long StateStorage$offset() {
        return StateStorage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiStorage StateStorage
     * }
     */
    public static MemorySegment StateStorage(MemorySegment struct) {
        return struct.asSlice(StateStorage$OFFSET, StateStorage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiStorage StateStorage
     * }
     */
    public static void StateStorage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, StateStorage$OFFSET, StateStorage$LAYOUT.byteSize());
    }

    private static final GroupLayout ColumnsStorage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ColumnsStorage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiOldColumns ColumnsStorage
     * }
     */
    public static final GroupLayout ColumnsStorage$layout() {
        return ColumnsStorage$LAYOUT;
    }

    private static final long ColumnsStorage$OFFSET = 712;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiOldColumns ColumnsStorage
     * }
     */
    public static final long ColumnsStorage$offset() {
        return ColumnsStorage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiOldColumns ColumnsStorage
     * }
     */
    public static MemorySegment ColumnsStorage(MemorySegment struct) {
        return struct.asSlice(ColumnsStorage$OFFSET, ColumnsStorage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiOldColumns ColumnsStorage
     * }
     */
    public static void ColumnsStorage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ColumnsStorage$OFFSET, ColumnsStorage$LAYOUT.byteSize());
    }

    private static final OfFloat FontWindowScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FontWindowScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FontWindowScale
     * }
     */
    public static final OfFloat FontWindowScale$layout() {
        return FontWindowScale$LAYOUT;
    }

    private static final long FontWindowScale$OFFSET = 728;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FontWindowScale
     * }
     */
    public static final long FontWindowScale$offset() {
        return FontWindowScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FontWindowScale
     * }
     */
    public static float FontWindowScale(MemorySegment struct) {
        return struct.get(FontWindowScale$LAYOUT, FontWindowScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FontWindowScale
     * }
     */
    public static void FontWindowScale(MemorySegment struct, float fieldValue) {
        struct.set(FontWindowScale$LAYOUT, FontWindowScale$OFFSET, fieldValue);
    }

    private static final OfFloat FontDpiScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("FontDpiScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float FontDpiScale
     * }
     */
    public static final OfFloat FontDpiScale$layout() {
        return FontDpiScale$LAYOUT;
    }

    private static final long FontDpiScale$OFFSET = 732;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float FontDpiScale
     * }
     */
    public static final long FontDpiScale$offset() {
        return FontDpiScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float FontDpiScale
     * }
     */
    public static float FontDpiScale(MemorySegment struct) {
        return struct.get(FontDpiScale$LAYOUT, FontDpiScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float FontDpiScale
     * }
     */
    public static void FontDpiScale(MemorySegment struct, float fieldValue) {
        struct.set(FontDpiScale$LAYOUT, FontDpiScale$OFFSET, fieldValue);
    }

    private static final OfInt SettingsOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SettingsOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int SettingsOffset
     * }
     */
    public static final OfInt SettingsOffset$layout() {
        return SettingsOffset$LAYOUT;
    }

    private static final long SettingsOffset$OFFSET = 736;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int SettingsOffset
     * }
     */
    public static final long SettingsOffset$offset() {
        return SettingsOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int SettingsOffset
     * }
     */
    public static int SettingsOffset(MemorySegment struct) {
        return struct.get(SettingsOffset$LAYOUT, SettingsOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int SettingsOffset
     * }
     */
    public static void SettingsOffset(MemorySegment struct, int fieldValue) {
        struct.set(SettingsOffset$LAYOUT, SettingsOffset$OFFSET, fieldValue);
    }

    private static final AddressLayout DrawList$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DrawList"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawList *DrawList
     * }
     */
    public static final AddressLayout DrawList$layout() {
        return DrawList$LAYOUT;
    }

    private static final long DrawList$OFFSET = 744;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawList *DrawList
     * }
     */
    public static final long DrawList$offset() {
        return DrawList$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawList *DrawList
     * }
     */
    public static MemorySegment DrawList(MemorySegment struct) {
        return struct.get(DrawList$LAYOUT, DrawList$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawList *DrawList
     * }
     */
    public static void DrawList(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DrawList$LAYOUT, DrawList$OFFSET, fieldValue);
    }

    private static final GroupLayout DrawListInst$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DrawListInst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawList DrawListInst
     * }
     */
    public static final GroupLayout DrawListInst$layout() {
        return DrawListInst$LAYOUT;
    }

    private static final long DrawListInst$OFFSET = 752;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawList DrawListInst
     * }
     */
    public static final long DrawListInst$offset() {
        return DrawListInst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawList DrawListInst
     * }
     */
    public static MemorySegment DrawListInst(MemorySegment struct) {
        return struct.asSlice(DrawListInst$OFFSET, DrawListInst$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawList DrawListInst
     * }
     */
    public static void DrawListInst(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DrawListInst$OFFSET, DrawListInst$LAYOUT.byteSize());
    }

    private static final AddressLayout ParentWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ParentWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindow
     * }
     */
    public static final AddressLayout ParentWindow$layout() {
        return ParentWindow$LAYOUT;
    }

    private static final long ParentWindow$OFFSET = 952;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindow
     * }
     */
    public static final long ParentWindow$offset() {
        return ParentWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindow
     * }
     */
    public static MemorySegment ParentWindow(MemorySegment struct) {
        return struct.get(ParentWindow$LAYOUT, ParentWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindow
     * }
     */
    public static void ParentWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ParentWindow$LAYOUT, ParentWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout ParentWindowInBeginStack$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ParentWindowInBeginStack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindowInBeginStack
     * }
     */
    public static final AddressLayout ParentWindowInBeginStack$layout() {
        return ParentWindowInBeginStack$LAYOUT;
    }

    private static final long ParentWindowInBeginStack$OFFSET = 960;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindowInBeginStack
     * }
     */
    public static final long ParentWindowInBeginStack$offset() {
        return ParentWindowInBeginStack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindowInBeginStack
     * }
     */
    public static MemorySegment ParentWindowInBeginStack(MemorySegment struct) {
        return struct.get(ParentWindowInBeginStack$LAYOUT, ParentWindowInBeginStack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindowInBeginStack
     * }
     */
    public static void ParentWindowInBeginStack(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ParentWindowInBeginStack$LAYOUT, ParentWindowInBeginStack$OFFSET, fieldValue);
    }

    private static final AddressLayout RootWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RootWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindow
     * }
     */
    public static final AddressLayout RootWindow$layout() {
        return RootWindow$LAYOUT;
    }

    private static final long RootWindow$OFFSET = 968;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindow
     * }
     */
    public static final long RootWindow$offset() {
        return RootWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindow
     * }
     */
    public static MemorySegment RootWindow(MemorySegment struct) {
        return struct.get(RootWindow$LAYOUT, RootWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindow
     * }
     */
    public static void RootWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RootWindow$LAYOUT, RootWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout RootWindowPopupTree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RootWindowPopupTree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowPopupTree
     * }
     */
    public static final AddressLayout RootWindowPopupTree$layout() {
        return RootWindowPopupTree$LAYOUT;
    }

    private static final long RootWindowPopupTree$OFFSET = 976;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowPopupTree
     * }
     */
    public static final long RootWindowPopupTree$offset() {
        return RootWindowPopupTree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowPopupTree
     * }
     */
    public static MemorySegment RootWindowPopupTree(MemorySegment struct) {
        return struct.get(RootWindowPopupTree$LAYOUT, RootWindowPopupTree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowPopupTree
     * }
     */
    public static void RootWindowPopupTree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RootWindowPopupTree$LAYOUT, RootWindowPopupTree$OFFSET, fieldValue);
    }

    private static final AddressLayout RootWindowDockTree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RootWindowDockTree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowDockTree
     * }
     */
    public static final AddressLayout RootWindowDockTree$layout() {
        return RootWindowDockTree$LAYOUT;
    }

    private static final long RootWindowDockTree$OFFSET = 984;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowDockTree
     * }
     */
    public static final long RootWindowDockTree$offset() {
        return RootWindowDockTree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowDockTree
     * }
     */
    public static MemorySegment RootWindowDockTree(MemorySegment struct) {
        return struct.get(RootWindowDockTree$LAYOUT, RootWindowDockTree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowDockTree
     * }
     */
    public static void RootWindowDockTree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RootWindowDockTree$LAYOUT, RootWindowDockTree$OFFSET, fieldValue);
    }

    private static final AddressLayout RootWindowForTitleBarHighlight$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RootWindowForTitleBarHighlight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowForTitleBarHighlight
     * }
     */
    public static final AddressLayout RootWindowForTitleBarHighlight$layout() {
        return RootWindowForTitleBarHighlight$LAYOUT;
    }

    private static final long RootWindowForTitleBarHighlight$OFFSET = 992;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowForTitleBarHighlight
     * }
     */
    public static final long RootWindowForTitleBarHighlight$offset() {
        return RootWindowForTitleBarHighlight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowForTitleBarHighlight
     * }
     */
    public static MemorySegment RootWindowForTitleBarHighlight(MemorySegment struct) {
        return struct.get(RootWindowForTitleBarHighlight$LAYOUT, RootWindowForTitleBarHighlight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowForTitleBarHighlight
     * }
     */
    public static void RootWindowForTitleBarHighlight(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RootWindowForTitleBarHighlight$LAYOUT, RootWindowForTitleBarHighlight$OFFSET, fieldValue);
    }

    private static final AddressLayout RootWindowForNav$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RootWindowForNav"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowForNav
     * }
     */
    public static final AddressLayout RootWindowForNav$layout() {
        return RootWindowForNav$LAYOUT;
    }

    private static final long RootWindowForNav$OFFSET = 1000;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowForNav
     * }
     */
    public static final long RootWindowForNav$offset() {
        return RootWindowForNav$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowForNav
     * }
     */
    public static MemorySegment RootWindowForNav(MemorySegment struct) {
        return struct.get(RootWindowForNav$LAYOUT, RootWindowForNav$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *RootWindowForNav
     * }
     */
    public static void RootWindowForNav(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RootWindowForNav$LAYOUT, RootWindowForNav$OFFSET, fieldValue);
    }

    private static final AddressLayout ParentWindowForFocusRoute$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ParentWindowForFocusRoute"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindowForFocusRoute
     * }
     */
    public static final AddressLayout ParentWindowForFocusRoute$layout() {
        return ParentWindowForFocusRoute$LAYOUT;
    }

    private static final long ParentWindowForFocusRoute$OFFSET = 1008;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindowForFocusRoute
     * }
     */
    public static final long ParentWindowForFocusRoute$offset() {
        return ParentWindowForFocusRoute$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindowForFocusRoute
     * }
     */
    public static MemorySegment ParentWindowForFocusRoute(MemorySegment struct) {
        return struct.get(ParentWindowForFocusRoute$LAYOUT, ParentWindowForFocusRoute$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *ParentWindowForFocusRoute
     * }
     */
    public static void ParentWindowForFocusRoute(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ParentWindowForFocusRoute$LAYOUT, ParentWindowForFocusRoute$OFFSET, fieldValue);
    }

    private static final AddressLayout NavLastChildNavWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("NavLastChildNavWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavLastChildNavWindow
     * }
     */
    public static final AddressLayout NavLastChildNavWindow$layout() {
        return NavLastChildNavWindow$LAYOUT;
    }

    private static final long NavLastChildNavWindow$OFFSET = 1016;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavLastChildNavWindow
     * }
     */
    public static final long NavLastChildNavWindow$offset() {
        return NavLastChildNavWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavLastChildNavWindow
     * }
     */
    public static MemorySegment NavLastChildNavWindow(MemorySegment struct) {
        return struct.get(NavLastChildNavWindow$LAYOUT, NavLastChildNavWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *NavLastChildNavWindow
     * }
     */
    public static void NavLastChildNavWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(NavLastChildNavWindow$LAYOUT, NavLastChildNavWindow$OFFSET, fieldValue);
    }

    private static final SequenceLayout NavLastIds$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("NavLastIds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavLastIds[2]
     * }
     */
    public static final SequenceLayout NavLastIds$layout() {
        return NavLastIds$LAYOUT;
    }

    private static final long NavLastIds$OFFSET = 1024;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavLastIds[2]
     * }
     */
    public static final long NavLastIds$offset() {
        return NavLastIds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavLastIds[2]
     * }
     */
    public static MemorySegment NavLastIds(MemorySegment struct) {
        return struct.asSlice(NavLastIds$OFFSET, NavLastIds$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavLastIds[2]
     * }
     */
    public static void NavLastIds(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavLastIds$OFFSET, NavLastIds$LAYOUT.byteSize());
    }

    private static long[] NavLastIds$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImGuiID NavLastIds[2]
     * }
     */
    public static long[] NavLastIds$dimensions() {
        return NavLastIds$DIMS;
    }
    private static final VarHandle NavLastIds$ELEM_HANDLE = NavLastIds$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImGuiID NavLastIds[2]
     * }
     */
    public static int NavLastIds(MemorySegment struct, long index0) {
        return (int)NavLastIds$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImGuiID NavLastIds[2]
     * }
     */
    public static void NavLastIds(MemorySegment struct, long index0, int fieldValue) {
        NavLastIds$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout NavRectRel$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("NavRectRel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect NavRectRel[2]
     * }
     */
    public static final SequenceLayout NavRectRel$layout() {
        return NavRectRel$LAYOUT;
    }

    private static final long NavRectRel$OFFSET = 1032;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect NavRectRel[2]
     * }
     */
    public static final long NavRectRel$offset() {
        return NavRectRel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect NavRectRel[2]
     * }
     */
    public static MemorySegment NavRectRel(MemorySegment struct) {
        return struct.asSlice(NavRectRel$OFFSET, NavRectRel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect NavRectRel[2]
     * }
     */
    public static void NavRectRel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavRectRel$OFFSET, NavRectRel$LAYOUT.byteSize());
    }

    private static long[] NavRectRel$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImRect NavRectRel[2]
     * }
     */
    public static long[] NavRectRel$dimensions() {
        return NavRectRel$DIMS;
    }
    private static final MethodHandle NavRectRel$ELEM_HANDLE = NavRectRel$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImRect NavRectRel[2]
     * }
     */
    public static MemorySegment NavRectRel(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)NavRectRel$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImRect NavRectRel[2]
     * }
     */
    public static void NavRectRel(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, NavRectRel(struct, index0), 0L, ImRect.layout().byteSize());
    }

    private static final SequenceLayout NavPreferredScoringPosRel$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("NavPreferredScoringPosRel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 NavPreferredScoringPosRel[2]
     * }
     */
    public static final SequenceLayout NavPreferredScoringPosRel$layout() {
        return NavPreferredScoringPosRel$LAYOUT;
    }

    private static final long NavPreferredScoringPosRel$OFFSET = 1064;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 NavPreferredScoringPosRel[2]
     * }
     */
    public static final long NavPreferredScoringPosRel$offset() {
        return NavPreferredScoringPosRel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 NavPreferredScoringPosRel[2]
     * }
     */
    public static MemorySegment NavPreferredScoringPosRel(MemorySegment struct) {
        return struct.asSlice(NavPreferredScoringPosRel$OFFSET, NavPreferredScoringPosRel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 NavPreferredScoringPosRel[2]
     * }
     */
    public static void NavPreferredScoringPosRel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, NavPreferredScoringPosRel$OFFSET, NavPreferredScoringPosRel$LAYOUT.byteSize());
    }

    private static long[] NavPreferredScoringPosRel$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImVec2 NavPreferredScoringPosRel[2]
     * }
     */
    public static long[] NavPreferredScoringPosRel$dimensions() {
        return NavPreferredScoringPosRel$DIMS;
    }
    private static final MethodHandle NavPreferredScoringPosRel$ELEM_HANDLE = NavPreferredScoringPosRel$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImVec2 NavPreferredScoringPosRel[2]
     * }
     */
    public static MemorySegment NavPreferredScoringPosRel(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)NavPreferredScoringPosRel$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImVec2 NavPreferredScoringPosRel[2]
     * }
     */
    public static void NavPreferredScoringPosRel(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, NavPreferredScoringPosRel(struct, index0), 0L, ImVec2.layout().byteSize());
    }

    private static final OfInt NavRootFocusScopeId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NavRootFocusScopeId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID NavRootFocusScopeId
     * }
     */
    public static final OfInt NavRootFocusScopeId$layout() {
        return NavRootFocusScopeId$LAYOUT;
    }

    private static final long NavRootFocusScopeId$OFFSET = 1080;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID NavRootFocusScopeId
     * }
     */
    public static final long NavRootFocusScopeId$offset() {
        return NavRootFocusScopeId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID NavRootFocusScopeId
     * }
     */
    public static int NavRootFocusScopeId(MemorySegment struct) {
        return struct.get(NavRootFocusScopeId$LAYOUT, NavRootFocusScopeId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID NavRootFocusScopeId
     * }
     */
    public static void NavRootFocusScopeId(MemorySegment struct, int fieldValue) {
        struct.set(NavRootFocusScopeId$LAYOUT, NavRootFocusScopeId$OFFSET, fieldValue);
    }

    private static final OfInt MemoryDrawListIdxCapacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MemoryDrawListIdxCapacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int MemoryDrawListIdxCapacity
     * }
     */
    public static final OfInt MemoryDrawListIdxCapacity$layout() {
        return MemoryDrawListIdxCapacity$LAYOUT;
    }

    private static final long MemoryDrawListIdxCapacity$OFFSET = 1084;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int MemoryDrawListIdxCapacity
     * }
     */
    public static final long MemoryDrawListIdxCapacity$offset() {
        return MemoryDrawListIdxCapacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int MemoryDrawListIdxCapacity
     * }
     */
    public static int MemoryDrawListIdxCapacity(MemorySegment struct) {
        return struct.get(MemoryDrawListIdxCapacity$LAYOUT, MemoryDrawListIdxCapacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int MemoryDrawListIdxCapacity
     * }
     */
    public static void MemoryDrawListIdxCapacity(MemorySegment struct, int fieldValue) {
        struct.set(MemoryDrawListIdxCapacity$LAYOUT, MemoryDrawListIdxCapacity$OFFSET, fieldValue);
    }

    private static final OfInt MemoryDrawListVtxCapacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MemoryDrawListVtxCapacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int MemoryDrawListVtxCapacity
     * }
     */
    public static final OfInt MemoryDrawListVtxCapacity$layout() {
        return MemoryDrawListVtxCapacity$LAYOUT;
    }

    private static final long MemoryDrawListVtxCapacity$OFFSET = 1088;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int MemoryDrawListVtxCapacity
     * }
     */
    public static final long MemoryDrawListVtxCapacity$offset() {
        return MemoryDrawListVtxCapacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int MemoryDrawListVtxCapacity
     * }
     */
    public static int MemoryDrawListVtxCapacity(MemorySegment struct) {
        return struct.get(MemoryDrawListVtxCapacity$LAYOUT, MemoryDrawListVtxCapacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int MemoryDrawListVtxCapacity
     * }
     */
    public static void MemoryDrawListVtxCapacity(MemorySegment struct, int fieldValue) {
        struct.set(MemoryDrawListVtxCapacity$LAYOUT, MemoryDrawListVtxCapacity$OFFSET, fieldValue);
    }

    private static final OfBoolean MemoryCompacted$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("MemoryCompacted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MemoryCompacted
     * }
     */
    public static final OfBoolean MemoryCompacted$layout() {
        return MemoryCompacted$LAYOUT;
    }

    private static final long MemoryCompacted$OFFSET = 1092;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MemoryCompacted
     * }
     */
    public static final long MemoryCompacted$offset() {
        return MemoryCompacted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MemoryCompacted
     * }
     */
    public static boolean MemoryCompacted(MemorySegment struct) {
        return struct.get(MemoryCompacted$LAYOUT, MemoryCompacted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MemoryCompacted
     * }
     */
    public static void MemoryCompacted(MemorySegment struct, boolean fieldValue) {
        struct.set(MemoryCompacted$LAYOUT, MemoryCompacted$OFFSET, fieldValue);
    }

    private static final OfShort DockOrder$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DockOrder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short DockOrder
     * }
     */
    public static final OfShort DockOrder$layout() {
        return DockOrder$LAYOUT;
    }

    private static final long DockOrder$OFFSET = 1094;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short DockOrder
     * }
     */
    public static final long DockOrder$offset() {
        return DockOrder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short DockOrder
     * }
     */
    public static short DockOrder(MemorySegment struct) {
        return struct.get(DockOrder$LAYOUT, DockOrder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short DockOrder
     * }
     */
    public static void DockOrder(MemorySegment struct, short fieldValue) {
        struct.set(DockOrder$LAYOUT, DockOrder$OFFSET, fieldValue);
    }

    private static final GroupLayout DockStyle$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DockStyle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindowDockStyle DockStyle
     * }
     */
    public static final GroupLayout DockStyle$layout() {
        return DockStyle$LAYOUT;
    }

    private static final long DockStyle$OFFSET = 1096;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindowDockStyle DockStyle
     * }
     */
    public static final long DockStyle$offset() {
        return DockStyle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindowDockStyle DockStyle
     * }
     */
    public static MemorySegment DockStyle(MemorySegment struct) {
        return struct.asSlice(DockStyle$OFFSET, DockStyle$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindowDockStyle DockStyle
     * }
     */
    public static void DockStyle(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DockStyle$OFFSET, DockStyle$LAYOUT.byteSize());
    }

    private static final AddressLayout DockNode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DockNode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DockNode
     * }
     */
    public static final AddressLayout DockNode$layout() {
        return DockNode$LAYOUT;
    }

    private static final long DockNode$OFFSET = 1128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DockNode
     * }
     */
    public static final long DockNode$offset() {
        return DockNode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DockNode
     * }
     */
    public static MemorySegment DockNode(MemorySegment struct) {
        return struct.get(DockNode$LAYOUT, DockNode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DockNode
     * }
     */
    public static void DockNode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DockNode$LAYOUT, DockNode$OFFSET, fieldValue);
    }

    private static final AddressLayout DockNodeAsHost$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DockNodeAsHost"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DockNodeAsHost
     * }
     */
    public static final AddressLayout DockNodeAsHost$layout() {
        return DockNodeAsHost$LAYOUT;
    }

    private static final long DockNodeAsHost$OFFSET = 1136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DockNodeAsHost
     * }
     */
    public static final long DockNodeAsHost$offset() {
        return DockNodeAsHost$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DockNodeAsHost
     * }
     */
    public static MemorySegment DockNodeAsHost(MemorySegment struct) {
        return struct.get(DockNodeAsHost$LAYOUT, DockNodeAsHost$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiDockNode *DockNodeAsHost
     * }
     */
    public static void DockNodeAsHost(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DockNodeAsHost$LAYOUT, DockNodeAsHost$OFFSET, fieldValue);
    }

    private static final OfInt DockId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DockId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID DockId
     * }
     */
    public static final OfInt DockId$layout() {
        return DockId$LAYOUT;
    }

    private static final long DockId$OFFSET = 1144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID DockId
     * }
     */
    public static final long DockId$offset() {
        return DockId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID DockId
     * }
     */
    public static int DockId(MemorySegment struct) {
        return struct.get(DockId$LAYOUT, DockId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID DockId
     * }
     */
    public static void DockId(MemorySegment struct, int fieldValue) {
        struct.set(DockId$LAYOUT, DockId$OFFSET, fieldValue);
    }

    private static final OfInt DockTabItemStatusFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("DockTabItemStatusFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiItemStatusFlags DockTabItemStatusFlags
     * }
     */
    public static final OfInt DockTabItemStatusFlags$layout() {
        return DockTabItemStatusFlags$LAYOUT;
    }

    private static final long DockTabItemStatusFlags$OFFSET = 1148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiItemStatusFlags DockTabItemStatusFlags
     * }
     */
    public static final long DockTabItemStatusFlags$offset() {
        return DockTabItemStatusFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiItemStatusFlags DockTabItemStatusFlags
     * }
     */
    public static int DockTabItemStatusFlags(MemorySegment struct) {
        return struct.get(DockTabItemStatusFlags$LAYOUT, DockTabItemStatusFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiItemStatusFlags DockTabItemStatusFlags
     * }
     */
    public static void DockTabItemStatusFlags(MemorySegment struct, int fieldValue) {
        struct.set(DockTabItemStatusFlags$LAYOUT, DockTabItemStatusFlags$OFFSET, fieldValue);
    }

    private static final GroupLayout DockTabItemRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DockTabItemRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect DockTabItemRect
     * }
     */
    public static final GroupLayout DockTabItemRect$layout() {
        return DockTabItemRect$LAYOUT;
    }

    private static final long DockTabItemRect$OFFSET = 1152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect DockTabItemRect
     * }
     */
    public static final long DockTabItemRect$offset() {
        return DockTabItemRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect DockTabItemRect
     * }
     */
    public static MemorySegment DockTabItemRect(MemorySegment struct) {
        return struct.asSlice(DockTabItemRect$OFFSET, DockTabItemRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect DockTabItemRect
     * }
     */
    public static void DockTabItemRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DockTabItemRect$OFFSET, DockTabItemRect$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

