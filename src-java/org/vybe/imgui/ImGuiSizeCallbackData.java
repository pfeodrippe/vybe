// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiSizeCallbackData {
 *     void *UserData;
 *     ImVec2 Pos;
 *     ImVec2 CurrentSize;
 *     ImVec2 DesiredSize;
 * }
 * }
 */
public class ImGuiSizeCallbackData {

    ImGuiSizeCallbackData() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_POINTER.withName("UserData"),
        ImVec2.layout().withName("Pos"),
        ImVec2.layout().withName("CurrentSize"),
        ImVec2.layout().withName("DesiredSize")
    ).withName("ImGuiSizeCallbackData");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout UserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("UserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static final AddressLayout UserData$layout() {
        return UserData$LAYOUT;
    }

    private static final long UserData$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static final long UserData$offset() {
        return UserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static MemorySegment UserData(MemorySegment struct) {
        return struct.get(UserData$LAYOUT, UserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *UserData
     * }
     */
    public static void UserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(UserData$LAYOUT, UserData$OFFSET, fieldValue);
    }

    private static final GroupLayout Pos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static final GroupLayout Pos$layout() {
        return Pos$LAYOUT;
    }

    private static final long Pos$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static final long Pos$offset() {
        return Pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static MemorySegment Pos(MemorySegment struct) {
        return struct.asSlice(Pos$OFFSET, Pos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 Pos
     * }
     */
    public static void Pos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Pos$OFFSET, Pos$LAYOUT.byteSize());
    }

    private static final GroupLayout CurrentSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("CurrentSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 CurrentSize
     * }
     */
    public static final GroupLayout CurrentSize$layout() {
        return CurrentSize$LAYOUT;
    }

    private static final long CurrentSize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 CurrentSize
     * }
     */
    public static final long CurrentSize$offset() {
        return CurrentSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 CurrentSize
     * }
     */
    public static MemorySegment CurrentSize(MemorySegment struct) {
        return struct.asSlice(CurrentSize$OFFSET, CurrentSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 CurrentSize
     * }
     */
    public static void CurrentSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, CurrentSize$OFFSET, CurrentSize$LAYOUT.byteSize());
    }

    private static final GroupLayout DesiredSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DesiredSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 DesiredSize
     * }
     */
    public static final GroupLayout DesiredSize$layout() {
        return DesiredSize$LAYOUT;
    }

    private static final long DesiredSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 DesiredSize
     * }
     */
    public static final long DesiredSize$offset() {
        return DesiredSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 DesiredSize
     * }
     */
    public static MemorySegment DesiredSize(MemorySegment struct) {
        return struct.asSlice(DesiredSize$OFFSET, DesiredSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 DesiredSize
     * }
     */
    public static void DesiredSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DesiredSize$OFFSET, DesiredSize$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

