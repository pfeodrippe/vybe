// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiTable {
 *     ImGuiID ID;
 *     ImGuiTableFlags Flags;
 *     void *RawData;
 *     ImGuiTableTempData *TempData;
 *     ImSpan_ImGuiTableColumn Columns;
 *     ImSpan_ImGuiTableColumnIdx DisplayOrderToIndex;
 *     ImSpan_ImGuiTableCellData RowCellData;
 *     ImBitArrayPtr EnabledMaskByDisplayOrder;
 *     ImBitArrayPtr EnabledMaskByIndex;
 *     ImBitArrayPtr VisibleMaskByIndex;
 *     ImGuiTableFlags SettingsLoadedFlags;
 *     int SettingsOffset;
 *     int LastFrameActive;
 *     int ColumnsCount;
 *     int CurrentRow;
 *     int CurrentColumn;
 *     ImS16 InstanceCurrent;
 *     ImS16 InstanceInteracted;
 *     float RowPosY1;
 *     float RowPosY2;
 *     float RowMinHeight;
 *     float RowCellPaddingY;
 *     float RowTextBaseline;
 *     float RowIndentOffsetX;
 *     ImGuiTableRowFlags RowFlags : 16;
 *     ImGuiTableRowFlags LastRowFlags : 16;
 *     int RowBgColorCounter;
 *     ImU32 RowBgColor[2];
 *     ImU32 BorderColorStrong;
 *     ImU32 BorderColorLight;
 *     float BorderX1;
 *     float BorderX2;
 *     float HostIndentX;
 *     float MinColumnWidth;
 *     float OuterPaddingX;
 *     float CellPaddingX;
 *     float CellSpacingX1;
 *     float CellSpacingX2;
 *     float InnerWidth;
 *     float ColumnsGivenWidth;
 *     float ColumnsAutoFitWidth;
 *     float ColumnsStretchSumWeights;
 *     float ResizedColumnNextWidth;
 *     float ResizeLockMinContentsX2;
 *     float RefScale;
 *     float AngledHeadersHeight;
 *     float AngledHeadersSlope;
 *     ImRect OuterRect;
 *     ImRect InnerRect;
 *     ImRect WorkRect;
 *     ImRect InnerClipRect;
 *     ImRect BgClipRect;
 *     ImRect Bg0ClipRectForDrawCmd;
 *     ImRect Bg2ClipRectForDrawCmd;
 *     ImRect HostClipRect;
 *     ImRect HostBackupInnerClipRect;
 *     ImGuiWindow *OuterWindow;
 *     ImGuiWindow *InnerWindow;
 *     ImGuiTextBuffer ColumnsNames;
 *     ImDrawListSplitter *DrawSplitter;
 *     ImGuiTableInstanceData InstanceDataFirst;
 *     ImVector_ImGuiTableInstanceData InstanceDataExtra;
 *     ImGuiTableColumnSortSpecs SortSpecsSingle;
 *     ImVector_ImGuiTableColumnSortSpecs SortSpecsMulti;
 *     ImGuiTableSortSpecs SortSpecs;
 *     ImGuiTableColumnIdx SortSpecsCount;
 *     ImGuiTableColumnIdx ColumnsEnabledCount;
 *     ImGuiTableColumnIdx ColumnsEnabledFixedCount;
 *     ImGuiTableColumnIdx DeclColumnsCount;
 *     ImGuiTableColumnIdx AngledHeadersCount;
 *     ImGuiTableColumnIdx HoveredColumnBody;
 *     ImGuiTableColumnIdx HoveredColumnBorder;
 *     ImGuiTableColumnIdx HighlightColumnHeader;
 *     ImGuiTableColumnIdx AutoFitSingleColumn;
 *     ImGuiTableColumnIdx ResizedColumn;
 *     ImGuiTableColumnIdx LastResizedColumn;
 *     ImGuiTableColumnIdx HeldHeaderColumn;
 *     ImGuiTableColumnIdx ReorderColumn;
 *     ImGuiTableColumnIdx ReorderColumnDir;
 *     ImGuiTableColumnIdx LeftMostEnabledColumn;
 *     ImGuiTableColumnIdx RightMostEnabledColumn;
 *     ImGuiTableColumnIdx LeftMostStretchedColumn;
 *     ImGuiTableColumnIdx RightMostStretchedColumn;
 *     ImGuiTableColumnIdx ContextPopupColumn;
 *     ImGuiTableColumnIdx FreezeRowsRequest;
 *     ImGuiTableColumnIdx FreezeRowsCount;
 *     ImGuiTableColumnIdx FreezeColumnsRequest;
 *     ImGuiTableColumnIdx FreezeColumnsCount;
 *     ImGuiTableColumnIdx RowCellDataCurrent;
 *     ImGuiTableDrawChannelIdx DummyDrawChannel;
 *     ImGuiTableDrawChannelIdx Bg2DrawChannelCurrent;
 *     ImGuiTableDrawChannelIdx Bg2DrawChannelUnfrozen;
 *     bool IsLayoutLocked;
 *     bool IsInsideRow;
 *     bool IsInitializing;
 *     bool IsSortSpecsDirty;
 *     bool IsUsingHeaders;
 *     bool IsContextPopupOpen;
 *     bool DisableDefaultContextMenu;
 *     bool IsSettingsRequestLoad;
 *     bool IsSettingsDirty;
 *     bool IsDefaultDisplayOrder;
 *     bool IsResetAllRequest;
 *     bool IsResetDisplayOrderRequest;
 *     bool IsUnfrozenRows;
 *     bool IsDefaultSizingPolicy;
 *     bool IsActiveIdAliveBeforeTable;
 *     bool IsActiveIdInTable;
 *     bool HasScrollbarYCurr;
 *     bool HasScrollbarYPrev;
 *     bool MemoryCompacted;
 *     bool HostSkipItems;
 * }
 * }
 */
public class ImGuiTable {

    ImGuiTable() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("ID"),
        imgui.C_INT.withName("Flags"),
        imgui.C_POINTER.withName("RawData"),
        imgui.C_POINTER.withName("TempData"),
        ImSpan_ImGuiTableColumn.layout().withName("Columns"),
        ImSpan_ImGuiTableColumnIdx.layout().withName("DisplayOrderToIndex"),
        ImSpan_ImGuiTableCellData.layout().withName("RowCellData"),
        imgui.C_POINTER.withName("EnabledMaskByDisplayOrder"),
        imgui.C_POINTER.withName("EnabledMaskByIndex"),
        imgui.C_POINTER.withName("VisibleMaskByIndex"),
        imgui.C_INT.withName("SettingsLoadedFlags"),
        imgui.C_INT.withName("SettingsOffset"),
        imgui.C_INT.withName("LastFrameActive"),
        imgui.C_INT.withName("ColumnsCount"),
        imgui.C_INT.withName("CurrentRow"),
        imgui.C_INT.withName("CurrentColumn"),
        imgui.C_SHORT.withName("InstanceCurrent"),
        imgui.C_SHORT.withName("InstanceInteracted"),
        imgui.C_FLOAT.withName("RowPosY1"),
        imgui.C_FLOAT.withName("RowPosY2"),
        imgui.C_FLOAT.withName("RowMinHeight"),
        imgui.C_FLOAT.withName("RowCellPaddingY"),
        imgui.C_FLOAT.withName("RowTextBaseline"),
        imgui.C_FLOAT.withName("RowIndentOffsetX"),
        MemoryLayout.paddingLayout(4),
        imgui.C_INT.withName("RowBgColorCounter"),
        MemoryLayout.sequenceLayout(2, imgui.C_INT).withName("RowBgColor"),
        imgui.C_INT.withName("BorderColorStrong"),
        imgui.C_INT.withName("BorderColorLight"),
        imgui.C_FLOAT.withName("BorderX1"),
        imgui.C_FLOAT.withName("BorderX2"),
        imgui.C_FLOAT.withName("HostIndentX"),
        imgui.C_FLOAT.withName("MinColumnWidth"),
        imgui.C_FLOAT.withName("OuterPaddingX"),
        imgui.C_FLOAT.withName("CellPaddingX"),
        imgui.C_FLOAT.withName("CellSpacingX1"),
        imgui.C_FLOAT.withName("CellSpacingX2"),
        imgui.C_FLOAT.withName("InnerWidth"),
        imgui.C_FLOAT.withName("ColumnsGivenWidth"),
        imgui.C_FLOAT.withName("ColumnsAutoFitWidth"),
        imgui.C_FLOAT.withName("ColumnsStretchSumWeights"),
        imgui.C_FLOAT.withName("ResizedColumnNextWidth"),
        imgui.C_FLOAT.withName("ResizeLockMinContentsX2"),
        imgui.C_FLOAT.withName("RefScale"),
        imgui.C_FLOAT.withName("AngledHeadersHeight"),
        imgui.C_FLOAT.withName("AngledHeadersSlope"),
        ImRect.layout().withName("OuterRect"),
        ImRect.layout().withName("InnerRect"),
        ImRect.layout().withName("WorkRect"),
        ImRect.layout().withName("InnerClipRect"),
        ImRect.layout().withName("BgClipRect"),
        ImRect.layout().withName("Bg0ClipRectForDrawCmd"),
        ImRect.layout().withName("Bg2ClipRectForDrawCmd"),
        ImRect.layout().withName("HostClipRect"),
        ImRect.layout().withName("HostBackupInnerClipRect"),
        imgui.C_POINTER.withName("OuterWindow"),
        imgui.C_POINTER.withName("InnerWindow"),
        ImGuiTextBuffer.layout().withName("ColumnsNames"),
        imgui.C_POINTER.withName("DrawSplitter"),
        ImGuiTableInstanceData.layout().withName("InstanceDataFirst"),
        ImVector_ImGuiTableInstanceData.layout().withName("InstanceDataExtra"),
        ImGuiTableColumnSortSpecs.layout().withName("SortSpecsSingle"),
        MemoryLayout.paddingLayout(4),
        ImVector_ImGuiTableColumnSortSpecs.layout().withName("SortSpecsMulti"),
        ImGuiTableSortSpecs.layout().withName("SortSpecs"),
        imgui.C_SHORT.withName("SortSpecsCount"),
        imgui.C_SHORT.withName("ColumnsEnabledCount"),
        imgui.C_SHORT.withName("ColumnsEnabledFixedCount"),
        imgui.C_SHORT.withName("DeclColumnsCount"),
        imgui.C_SHORT.withName("AngledHeadersCount"),
        imgui.C_SHORT.withName("HoveredColumnBody"),
        imgui.C_SHORT.withName("HoveredColumnBorder"),
        imgui.C_SHORT.withName("HighlightColumnHeader"),
        imgui.C_SHORT.withName("AutoFitSingleColumn"),
        imgui.C_SHORT.withName("ResizedColumn"),
        imgui.C_SHORT.withName("LastResizedColumn"),
        imgui.C_SHORT.withName("HeldHeaderColumn"),
        imgui.C_SHORT.withName("ReorderColumn"),
        imgui.C_SHORT.withName("ReorderColumnDir"),
        imgui.C_SHORT.withName("LeftMostEnabledColumn"),
        imgui.C_SHORT.withName("RightMostEnabledColumn"),
        imgui.C_SHORT.withName("LeftMostStretchedColumn"),
        imgui.C_SHORT.withName("RightMostStretchedColumn"),
        imgui.C_SHORT.withName("ContextPopupColumn"),
        imgui.C_SHORT.withName("FreezeRowsRequest"),
        imgui.C_SHORT.withName("FreezeRowsCount"),
        imgui.C_SHORT.withName("FreezeColumnsRequest"),
        imgui.C_SHORT.withName("FreezeColumnsCount"),
        imgui.C_SHORT.withName("RowCellDataCurrent"),
        imgui.C_SHORT.withName("DummyDrawChannel"),
        imgui.C_SHORT.withName("Bg2DrawChannelCurrent"),
        imgui.C_SHORT.withName("Bg2DrawChannelUnfrozen"),
        imgui.C_BOOL.withName("IsLayoutLocked"),
        imgui.C_BOOL.withName("IsInsideRow"),
        imgui.C_BOOL.withName("IsInitializing"),
        imgui.C_BOOL.withName("IsSortSpecsDirty"),
        imgui.C_BOOL.withName("IsUsingHeaders"),
        imgui.C_BOOL.withName("IsContextPopupOpen"),
        imgui.C_BOOL.withName("DisableDefaultContextMenu"),
        imgui.C_BOOL.withName("IsSettingsRequestLoad"),
        imgui.C_BOOL.withName("IsSettingsDirty"),
        imgui.C_BOOL.withName("IsDefaultDisplayOrder"),
        imgui.C_BOOL.withName("IsResetAllRequest"),
        imgui.C_BOOL.withName("IsResetDisplayOrderRequest"),
        imgui.C_BOOL.withName("IsUnfrozenRows"),
        imgui.C_BOOL.withName("IsDefaultSizingPolicy"),
        imgui.C_BOOL.withName("IsActiveIdAliveBeforeTable"),
        imgui.C_BOOL.withName("IsActiveIdInTable"),
        imgui.C_BOOL.withName("HasScrollbarYCurr"),
        imgui.C_BOOL.withName("HasScrollbarYPrev"),
        imgui.C_BOOL.withName("MemoryCompacted"),
        imgui.C_BOOL.withName("HostSkipItems"),
        MemoryLayout.paddingLayout(6)
    ).withName("ImGuiTable");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt ID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final OfInt ID$layout() {
        return ID$LAYOUT;
    }

    private static final long ID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final long ID$offset() {
        return ID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static int ID(MemorySegment struct) {
        return struct.get(ID$LAYOUT, ID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static void ID(MemorySegment struct, int fieldValue) {
        struct.set(ID$LAYOUT, ID$OFFSET, fieldValue);
    }

    private static final OfInt Flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableFlags Flags
     * }
     */
    public static final OfInt Flags$layout() {
        return Flags$LAYOUT;
    }

    private static final long Flags$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableFlags Flags
     * }
     */
    public static final long Flags$offset() {
        return Flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableFlags Flags
     * }
     */
    public static int Flags(MemorySegment struct) {
        return struct.get(Flags$LAYOUT, Flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableFlags Flags
     * }
     */
    public static void Flags(MemorySegment struct, int fieldValue) {
        struct.set(Flags$LAYOUT, Flags$OFFSET, fieldValue);
    }

    private static final AddressLayout RawData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("RawData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *RawData
     * }
     */
    public static final AddressLayout RawData$layout() {
        return RawData$LAYOUT;
    }

    private static final long RawData$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *RawData
     * }
     */
    public static final long RawData$offset() {
        return RawData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *RawData
     * }
     */
    public static MemorySegment RawData(MemorySegment struct) {
        return struct.get(RawData$LAYOUT, RawData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *RawData
     * }
     */
    public static void RawData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(RawData$LAYOUT, RawData$OFFSET, fieldValue);
    }

    private static final AddressLayout TempData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("TempData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableTempData *TempData
     * }
     */
    public static final AddressLayout TempData$layout() {
        return TempData$LAYOUT;
    }

    private static final long TempData$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableTempData *TempData
     * }
     */
    public static final long TempData$offset() {
        return TempData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableTempData *TempData
     * }
     */
    public static MemorySegment TempData(MemorySegment struct) {
        return struct.get(TempData$LAYOUT, TempData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableTempData *TempData
     * }
     */
    public static void TempData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(TempData$LAYOUT, TempData$OFFSET, fieldValue);
    }

    private static final GroupLayout Columns$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Columns"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableColumn Columns
     * }
     */
    public static final GroupLayout Columns$layout() {
        return Columns$LAYOUT;
    }

    private static final long Columns$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableColumn Columns
     * }
     */
    public static final long Columns$offset() {
        return Columns$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableColumn Columns
     * }
     */
    public static MemorySegment Columns(MemorySegment struct) {
        return struct.asSlice(Columns$OFFSET, Columns$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableColumn Columns
     * }
     */
    public static void Columns(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Columns$OFFSET, Columns$LAYOUT.byteSize());
    }

    private static final GroupLayout DisplayOrderToIndex$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DisplayOrderToIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableColumnIdx DisplayOrderToIndex
     * }
     */
    public static final GroupLayout DisplayOrderToIndex$layout() {
        return DisplayOrderToIndex$LAYOUT;
    }

    private static final long DisplayOrderToIndex$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableColumnIdx DisplayOrderToIndex
     * }
     */
    public static final long DisplayOrderToIndex$offset() {
        return DisplayOrderToIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableColumnIdx DisplayOrderToIndex
     * }
     */
    public static MemorySegment DisplayOrderToIndex(MemorySegment struct) {
        return struct.asSlice(DisplayOrderToIndex$OFFSET, DisplayOrderToIndex$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableColumnIdx DisplayOrderToIndex
     * }
     */
    public static void DisplayOrderToIndex(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DisplayOrderToIndex$OFFSET, DisplayOrderToIndex$LAYOUT.byteSize());
    }

    private static final GroupLayout RowCellData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("RowCellData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableCellData RowCellData
     * }
     */
    public static final GroupLayout RowCellData$layout() {
        return RowCellData$LAYOUT;
    }

    private static final long RowCellData$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableCellData RowCellData
     * }
     */
    public static final long RowCellData$offset() {
        return RowCellData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableCellData RowCellData
     * }
     */
    public static MemorySegment RowCellData(MemorySegment struct) {
        return struct.asSlice(RowCellData$OFFSET, RowCellData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImSpan_ImGuiTableCellData RowCellData
     * }
     */
    public static void RowCellData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RowCellData$OFFSET, RowCellData$LAYOUT.byteSize());
    }

    private static final AddressLayout EnabledMaskByDisplayOrder$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EnabledMaskByDisplayOrder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImBitArrayPtr EnabledMaskByDisplayOrder
     * }
     */
    public static final AddressLayout EnabledMaskByDisplayOrder$layout() {
        return EnabledMaskByDisplayOrder$LAYOUT;
    }

    private static final long EnabledMaskByDisplayOrder$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImBitArrayPtr EnabledMaskByDisplayOrder
     * }
     */
    public static final long EnabledMaskByDisplayOrder$offset() {
        return EnabledMaskByDisplayOrder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImBitArrayPtr EnabledMaskByDisplayOrder
     * }
     */
    public static MemorySegment EnabledMaskByDisplayOrder(MemorySegment struct) {
        return struct.get(EnabledMaskByDisplayOrder$LAYOUT, EnabledMaskByDisplayOrder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImBitArrayPtr EnabledMaskByDisplayOrder
     * }
     */
    public static void EnabledMaskByDisplayOrder(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EnabledMaskByDisplayOrder$LAYOUT, EnabledMaskByDisplayOrder$OFFSET, fieldValue);
    }

    private static final AddressLayout EnabledMaskByIndex$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("EnabledMaskByIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImBitArrayPtr EnabledMaskByIndex
     * }
     */
    public static final AddressLayout EnabledMaskByIndex$layout() {
        return EnabledMaskByIndex$LAYOUT;
    }

    private static final long EnabledMaskByIndex$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImBitArrayPtr EnabledMaskByIndex
     * }
     */
    public static final long EnabledMaskByIndex$offset() {
        return EnabledMaskByIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImBitArrayPtr EnabledMaskByIndex
     * }
     */
    public static MemorySegment EnabledMaskByIndex(MemorySegment struct) {
        return struct.get(EnabledMaskByIndex$LAYOUT, EnabledMaskByIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImBitArrayPtr EnabledMaskByIndex
     * }
     */
    public static void EnabledMaskByIndex(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(EnabledMaskByIndex$LAYOUT, EnabledMaskByIndex$OFFSET, fieldValue);
    }

    private static final AddressLayout VisibleMaskByIndex$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("VisibleMaskByIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImBitArrayPtr VisibleMaskByIndex
     * }
     */
    public static final AddressLayout VisibleMaskByIndex$layout() {
        return VisibleMaskByIndex$LAYOUT;
    }

    private static final long VisibleMaskByIndex$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImBitArrayPtr VisibleMaskByIndex
     * }
     */
    public static final long VisibleMaskByIndex$offset() {
        return VisibleMaskByIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImBitArrayPtr VisibleMaskByIndex
     * }
     */
    public static MemorySegment VisibleMaskByIndex(MemorySegment struct) {
        return struct.get(VisibleMaskByIndex$LAYOUT, VisibleMaskByIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImBitArrayPtr VisibleMaskByIndex
     * }
     */
    public static void VisibleMaskByIndex(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(VisibleMaskByIndex$LAYOUT, VisibleMaskByIndex$OFFSET, fieldValue);
    }

    private static final OfInt SettingsLoadedFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SettingsLoadedFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableFlags SettingsLoadedFlags
     * }
     */
    public static final OfInt SettingsLoadedFlags$layout() {
        return SettingsLoadedFlags$LAYOUT;
    }

    private static final long SettingsLoadedFlags$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableFlags SettingsLoadedFlags
     * }
     */
    public static final long SettingsLoadedFlags$offset() {
        return SettingsLoadedFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableFlags SettingsLoadedFlags
     * }
     */
    public static int SettingsLoadedFlags(MemorySegment struct) {
        return struct.get(SettingsLoadedFlags$LAYOUT, SettingsLoadedFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableFlags SettingsLoadedFlags
     * }
     */
    public static void SettingsLoadedFlags(MemorySegment struct, int fieldValue) {
        struct.set(SettingsLoadedFlags$LAYOUT, SettingsLoadedFlags$OFFSET, fieldValue);
    }

    private static final OfInt SettingsOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("SettingsOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int SettingsOffset
     * }
     */
    public static final OfInt SettingsOffset$layout() {
        return SettingsOffset$LAYOUT;
    }

    private static final long SettingsOffset$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int SettingsOffset
     * }
     */
    public static final long SettingsOffset$offset() {
        return SettingsOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int SettingsOffset
     * }
     */
    public static int SettingsOffset(MemorySegment struct) {
        return struct.get(SettingsOffset$LAYOUT, SettingsOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int SettingsOffset
     * }
     */
    public static void SettingsOffset(MemorySegment struct, int fieldValue) {
        struct.set(SettingsOffset$LAYOUT, SettingsOffset$OFFSET, fieldValue);
    }

    private static final OfInt LastFrameActive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFrameActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final OfInt LastFrameActive$layout() {
        return LastFrameActive$LAYOUT;
    }

    private static final long LastFrameActive$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final long LastFrameActive$offset() {
        return LastFrameActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static int LastFrameActive(MemorySegment struct) {
        return struct.get(LastFrameActive$LAYOUT, LastFrameActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static void LastFrameActive(MemorySegment struct, int fieldValue) {
        struct.set(LastFrameActive$LAYOUT, LastFrameActive$OFFSET, fieldValue);
    }

    private static final OfInt ColumnsCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ColumnsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ColumnsCount
     * }
     */
    public static final OfInt ColumnsCount$layout() {
        return ColumnsCount$LAYOUT;
    }

    private static final long ColumnsCount$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ColumnsCount
     * }
     */
    public static final long ColumnsCount$offset() {
        return ColumnsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ColumnsCount
     * }
     */
    public static int ColumnsCount(MemorySegment struct) {
        return struct.get(ColumnsCount$LAYOUT, ColumnsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ColumnsCount
     * }
     */
    public static void ColumnsCount(MemorySegment struct, int fieldValue) {
        struct.set(ColumnsCount$LAYOUT, ColumnsCount$OFFSET, fieldValue);
    }

    private static final OfInt CurrentRow$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CurrentRow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int CurrentRow
     * }
     */
    public static final OfInt CurrentRow$layout() {
        return CurrentRow$LAYOUT;
    }

    private static final long CurrentRow$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int CurrentRow
     * }
     */
    public static final long CurrentRow$offset() {
        return CurrentRow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int CurrentRow
     * }
     */
    public static int CurrentRow(MemorySegment struct) {
        return struct.get(CurrentRow$LAYOUT, CurrentRow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int CurrentRow
     * }
     */
    public static void CurrentRow(MemorySegment struct, int fieldValue) {
        struct.set(CurrentRow$LAYOUT, CurrentRow$OFFSET, fieldValue);
    }

    private static final OfInt CurrentColumn$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CurrentColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int CurrentColumn
     * }
     */
    public static final OfInt CurrentColumn$layout() {
        return CurrentColumn$LAYOUT;
    }

    private static final long CurrentColumn$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int CurrentColumn
     * }
     */
    public static final long CurrentColumn$offset() {
        return CurrentColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int CurrentColumn
     * }
     */
    public static int CurrentColumn(MemorySegment struct) {
        return struct.get(CurrentColumn$LAYOUT, CurrentColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int CurrentColumn
     * }
     */
    public static void CurrentColumn(MemorySegment struct, int fieldValue) {
        struct.set(CurrentColumn$LAYOUT, CurrentColumn$OFFSET, fieldValue);
    }

    private static final OfShort InstanceCurrent$LAYOUT = (OfShort)$LAYOUT.select(groupElement("InstanceCurrent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS16 InstanceCurrent
     * }
     */
    public static final OfShort InstanceCurrent$layout() {
        return InstanceCurrent$LAYOUT;
    }

    private static final long InstanceCurrent$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS16 InstanceCurrent
     * }
     */
    public static final long InstanceCurrent$offset() {
        return InstanceCurrent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS16 InstanceCurrent
     * }
     */
    public static short InstanceCurrent(MemorySegment struct) {
        return struct.get(InstanceCurrent$LAYOUT, InstanceCurrent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS16 InstanceCurrent
     * }
     */
    public static void InstanceCurrent(MemorySegment struct, short fieldValue) {
        struct.set(InstanceCurrent$LAYOUT, InstanceCurrent$OFFSET, fieldValue);
    }

    private static final OfShort InstanceInteracted$LAYOUT = (OfShort)$LAYOUT.select(groupElement("InstanceInteracted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS16 InstanceInteracted
     * }
     */
    public static final OfShort InstanceInteracted$layout() {
        return InstanceInteracted$LAYOUT;
    }

    private static final long InstanceInteracted$OFFSET = 122;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS16 InstanceInteracted
     * }
     */
    public static final long InstanceInteracted$offset() {
        return InstanceInteracted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS16 InstanceInteracted
     * }
     */
    public static short InstanceInteracted(MemorySegment struct) {
        return struct.get(InstanceInteracted$LAYOUT, InstanceInteracted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS16 InstanceInteracted
     * }
     */
    public static void InstanceInteracted(MemorySegment struct, short fieldValue) {
        struct.set(InstanceInteracted$LAYOUT, InstanceInteracted$OFFSET, fieldValue);
    }

    private static final OfFloat RowPosY1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("RowPosY1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float RowPosY1
     * }
     */
    public static final OfFloat RowPosY1$layout() {
        return RowPosY1$LAYOUT;
    }

    private static final long RowPosY1$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float RowPosY1
     * }
     */
    public static final long RowPosY1$offset() {
        return RowPosY1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float RowPosY1
     * }
     */
    public static float RowPosY1(MemorySegment struct) {
        return struct.get(RowPosY1$LAYOUT, RowPosY1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float RowPosY1
     * }
     */
    public static void RowPosY1(MemorySegment struct, float fieldValue) {
        struct.set(RowPosY1$LAYOUT, RowPosY1$OFFSET, fieldValue);
    }

    private static final OfFloat RowPosY2$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("RowPosY2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float RowPosY2
     * }
     */
    public static final OfFloat RowPosY2$layout() {
        return RowPosY2$LAYOUT;
    }

    private static final long RowPosY2$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float RowPosY2
     * }
     */
    public static final long RowPosY2$offset() {
        return RowPosY2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float RowPosY2
     * }
     */
    public static float RowPosY2(MemorySegment struct) {
        return struct.get(RowPosY2$LAYOUT, RowPosY2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float RowPosY2
     * }
     */
    public static void RowPosY2(MemorySegment struct, float fieldValue) {
        struct.set(RowPosY2$LAYOUT, RowPosY2$OFFSET, fieldValue);
    }

    private static final OfFloat RowMinHeight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("RowMinHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float RowMinHeight
     * }
     */
    public static final OfFloat RowMinHeight$layout() {
        return RowMinHeight$LAYOUT;
    }

    private static final long RowMinHeight$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float RowMinHeight
     * }
     */
    public static final long RowMinHeight$offset() {
        return RowMinHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float RowMinHeight
     * }
     */
    public static float RowMinHeight(MemorySegment struct) {
        return struct.get(RowMinHeight$LAYOUT, RowMinHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float RowMinHeight
     * }
     */
    public static void RowMinHeight(MemorySegment struct, float fieldValue) {
        struct.set(RowMinHeight$LAYOUT, RowMinHeight$OFFSET, fieldValue);
    }

    private static final OfFloat RowCellPaddingY$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("RowCellPaddingY"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float RowCellPaddingY
     * }
     */
    public static final OfFloat RowCellPaddingY$layout() {
        return RowCellPaddingY$LAYOUT;
    }

    private static final long RowCellPaddingY$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float RowCellPaddingY
     * }
     */
    public static final long RowCellPaddingY$offset() {
        return RowCellPaddingY$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float RowCellPaddingY
     * }
     */
    public static float RowCellPaddingY(MemorySegment struct) {
        return struct.get(RowCellPaddingY$LAYOUT, RowCellPaddingY$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float RowCellPaddingY
     * }
     */
    public static void RowCellPaddingY(MemorySegment struct, float fieldValue) {
        struct.set(RowCellPaddingY$LAYOUT, RowCellPaddingY$OFFSET, fieldValue);
    }

    private static final OfFloat RowTextBaseline$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("RowTextBaseline"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float RowTextBaseline
     * }
     */
    public static final OfFloat RowTextBaseline$layout() {
        return RowTextBaseline$LAYOUT;
    }

    private static final long RowTextBaseline$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float RowTextBaseline
     * }
     */
    public static final long RowTextBaseline$offset() {
        return RowTextBaseline$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float RowTextBaseline
     * }
     */
    public static float RowTextBaseline(MemorySegment struct) {
        return struct.get(RowTextBaseline$LAYOUT, RowTextBaseline$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float RowTextBaseline
     * }
     */
    public static void RowTextBaseline(MemorySegment struct, float fieldValue) {
        struct.set(RowTextBaseline$LAYOUT, RowTextBaseline$OFFSET, fieldValue);
    }

    private static final OfFloat RowIndentOffsetX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("RowIndentOffsetX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float RowIndentOffsetX
     * }
     */
    public static final OfFloat RowIndentOffsetX$layout() {
        return RowIndentOffsetX$LAYOUT;
    }

    private static final long RowIndentOffsetX$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float RowIndentOffsetX
     * }
     */
    public static final long RowIndentOffsetX$offset() {
        return RowIndentOffsetX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float RowIndentOffsetX
     * }
     */
    public static float RowIndentOffsetX(MemorySegment struct) {
        return struct.get(RowIndentOffsetX$LAYOUT, RowIndentOffsetX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float RowIndentOffsetX
     * }
     */
    public static void RowIndentOffsetX(MemorySegment struct, float fieldValue) {
        struct.set(RowIndentOffsetX$LAYOUT, RowIndentOffsetX$OFFSET, fieldValue);
    }

    private static final OfInt RowBgColorCounter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("RowBgColorCounter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int RowBgColorCounter
     * }
     */
    public static final OfInt RowBgColorCounter$layout() {
        return RowBgColorCounter$LAYOUT;
    }

    private static final long RowBgColorCounter$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int RowBgColorCounter
     * }
     */
    public static final long RowBgColorCounter$offset() {
        return RowBgColorCounter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int RowBgColorCounter
     * }
     */
    public static int RowBgColorCounter(MemorySegment struct) {
        return struct.get(RowBgColorCounter$LAYOUT, RowBgColorCounter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int RowBgColorCounter
     * }
     */
    public static void RowBgColorCounter(MemorySegment struct, int fieldValue) {
        struct.set(RowBgColorCounter$LAYOUT, RowBgColorCounter$OFFSET, fieldValue);
    }

    private static final SequenceLayout RowBgColor$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("RowBgColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 RowBgColor[2]
     * }
     */
    public static final SequenceLayout RowBgColor$layout() {
        return RowBgColor$LAYOUT;
    }

    private static final long RowBgColor$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 RowBgColor[2]
     * }
     */
    public static final long RowBgColor$offset() {
        return RowBgColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 RowBgColor[2]
     * }
     */
    public static MemorySegment RowBgColor(MemorySegment struct) {
        return struct.asSlice(RowBgColor$OFFSET, RowBgColor$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 RowBgColor[2]
     * }
     */
    public static void RowBgColor(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RowBgColor$OFFSET, RowBgColor$LAYOUT.byteSize());
    }

    private static long[] RowBgColor$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImU32 RowBgColor[2]
     * }
     */
    public static long[] RowBgColor$dimensions() {
        return RowBgColor$DIMS;
    }
    private static final VarHandle RowBgColor$ELEM_HANDLE = RowBgColor$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImU32 RowBgColor[2]
     * }
     */
    public static int RowBgColor(MemorySegment struct, long index0) {
        return (int)RowBgColor$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImU32 RowBgColor[2]
     * }
     */
    public static void RowBgColor(MemorySegment struct, long index0, int fieldValue) {
        RowBgColor$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt BorderColorStrong$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BorderColorStrong"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 BorderColorStrong
     * }
     */
    public static final OfInt BorderColorStrong$layout() {
        return BorderColorStrong$LAYOUT;
    }

    private static final long BorderColorStrong$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 BorderColorStrong
     * }
     */
    public static final long BorderColorStrong$offset() {
        return BorderColorStrong$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 BorderColorStrong
     * }
     */
    public static int BorderColorStrong(MemorySegment struct) {
        return struct.get(BorderColorStrong$LAYOUT, BorderColorStrong$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 BorderColorStrong
     * }
     */
    public static void BorderColorStrong(MemorySegment struct, int fieldValue) {
        struct.set(BorderColorStrong$LAYOUT, BorderColorStrong$OFFSET, fieldValue);
    }

    private static final OfInt BorderColorLight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BorderColorLight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 BorderColorLight
     * }
     */
    public static final OfInt BorderColorLight$layout() {
        return BorderColorLight$LAYOUT;
    }

    private static final long BorderColorLight$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 BorderColorLight
     * }
     */
    public static final long BorderColorLight$offset() {
        return BorderColorLight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 BorderColorLight
     * }
     */
    public static int BorderColorLight(MemorySegment struct) {
        return struct.get(BorderColorLight$LAYOUT, BorderColorLight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 BorderColorLight
     * }
     */
    public static void BorderColorLight(MemorySegment struct, int fieldValue) {
        struct.set(BorderColorLight$LAYOUT, BorderColorLight$OFFSET, fieldValue);
    }

    private static final OfFloat BorderX1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("BorderX1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float BorderX1
     * }
     */
    public static final OfFloat BorderX1$layout() {
        return BorderX1$LAYOUT;
    }

    private static final long BorderX1$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float BorderX1
     * }
     */
    public static final long BorderX1$offset() {
        return BorderX1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float BorderX1
     * }
     */
    public static float BorderX1(MemorySegment struct) {
        return struct.get(BorderX1$LAYOUT, BorderX1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float BorderX1
     * }
     */
    public static void BorderX1(MemorySegment struct, float fieldValue) {
        struct.set(BorderX1$LAYOUT, BorderX1$OFFSET, fieldValue);
    }

    private static final OfFloat BorderX2$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("BorderX2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float BorderX2
     * }
     */
    public static final OfFloat BorderX2$layout() {
        return BorderX2$LAYOUT;
    }

    private static final long BorderX2$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float BorderX2
     * }
     */
    public static final long BorderX2$offset() {
        return BorderX2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float BorderX2
     * }
     */
    public static float BorderX2(MemorySegment struct) {
        return struct.get(BorderX2$LAYOUT, BorderX2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float BorderX2
     * }
     */
    public static void BorderX2(MemorySegment struct, float fieldValue) {
        struct.set(BorderX2$LAYOUT, BorderX2$OFFSET, fieldValue);
    }

    private static final OfFloat HostIndentX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("HostIndentX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float HostIndentX
     * }
     */
    public static final OfFloat HostIndentX$layout() {
        return HostIndentX$LAYOUT;
    }

    private static final long HostIndentX$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float HostIndentX
     * }
     */
    public static final long HostIndentX$offset() {
        return HostIndentX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float HostIndentX
     * }
     */
    public static float HostIndentX(MemorySegment struct) {
        return struct.get(HostIndentX$LAYOUT, HostIndentX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float HostIndentX
     * }
     */
    public static void HostIndentX(MemorySegment struct, float fieldValue) {
        struct.set(HostIndentX$LAYOUT, HostIndentX$OFFSET, fieldValue);
    }

    private static final OfFloat MinColumnWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("MinColumnWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float MinColumnWidth
     * }
     */
    public static final OfFloat MinColumnWidth$layout() {
        return MinColumnWidth$LAYOUT;
    }

    private static final long MinColumnWidth$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float MinColumnWidth
     * }
     */
    public static final long MinColumnWidth$offset() {
        return MinColumnWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float MinColumnWidth
     * }
     */
    public static float MinColumnWidth(MemorySegment struct) {
        return struct.get(MinColumnWidth$LAYOUT, MinColumnWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float MinColumnWidth
     * }
     */
    public static void MinColumnWidth(MemorySegment struct, float fieldValue) {
        struct.set(MinColumnWidth$LAYOUT, MinColumnWidth$OFFSET, fieldValue);
    }

    private static final OfFloat OuterPaddingX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("OuterPaddingX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float OuterPaddingX
     * }
     */
    public static final OfFloat OuterPaddingX$layout() {
        return OuterPaddingX$LAYOUT;
    }

    private static final long OuterPaddingX$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float OuterPaddingX
     * }
     */
    public static final long OuterPaddingX$offset() {
        return OuterPaddingX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float OuterPaddingX
     * }
     */
    public static float OuterPaddingX(MemorySegment struct) {
        return struct.get(OuterPaddingX$LAYOUT, OuterPaddingX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float OuterPaddingX
     * }
     */
    public static void OuterPaddingX(MemorySegment struct, float fieldValue) {
        struct.set(OuterPaddingX$LAYOUT, OuterPaddingX$OFFSET, fieldValue);
    }

    private static final OfFloat CellPaddingX$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("CellPaddingX"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float CellPaddingX
     * }
     */
    public static final OfFloat CellPaddingX$layout() {
        return CellPaddingX$LAYOUT;
    }

    private static final long CellPaddingX$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float CellPaddingX
     * }
     */
    public static final long CellPaddingX$offset() {
        return CellPaddingX$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float CellPaddingX
     * }
     */
    public static float CellPaddingX(MemorySegment struct) {
        return struct.get(CellPaddingX$LAYOUT, CellPaddingX$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float CellPaddingX
     * }
     */
    public static void CellPaddingX(MemorySegment struct, float fieldValue) {
        struct.set(CellPaddingX$LAYOUT, CellPaddingX$OFFSET, fieldValue);
    }

    private static final OfFloat CellSpacingX1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("CellSpacingX1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float CellSpacingX1
     * }
     */
    public static final OfFloat CellSpacingX1$layout() {
        return CellSpacingX1$LAYOUT;
    }

    private static final long CellSpacingX1$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float CellSpacingX1
     * }
     */
    public static final long CellSpacingX1$offset() {
        return CellSpacingX1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float CellSpacingX1
     * }
     */
    public static float CellSpacingX1(MemorySegment struct) {
        return struct.get(CellSpacingX1$LAYOUT, CellSpacingX1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float CellSpacingX1
     * }
     */
    public static void CellSpacingX1(MemorySegment struct, float fieldValue) {
        struct.set(CellSpacingX1$LAYOUT, CellSpacingX1$OFFSET, fieldValue);
    }

    private static final OfFloat CellSpacingX2$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("CellSpacingX2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float CellSpacingX2
     * }
     */
    public static final OfFloat CellSpacingX2$layout() {
        return CellSpacingX2$LAYOUT;
    }

    private static final long CellSpacingX2$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float CellSpacingX2
     * }
     */
    public static final long CellSpacingX2$offset() {
        return CellSpacingX2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float CellSpacingX2
     * }
     */
    public static float CellSpacingX2(MemorySegment struct) {
        return struct.get(CellSpacingX2$LAYOUT, CellSpacingX2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float CellSpacingX2
     * }
     */
    public static void CellSpacingX2(MemorySegment struct, float fieldValue) {
        struct.set(CellSpacingX2$LAYOUT, CellSpacingX2$OFFSET, fieldValue);
    }

    private static final OfFloat InnerWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("InnerWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float InnerWidth
     * }
     */
    public static final OfFloat InnerWidth$layout() {
        return InnerWidth$LAYOUT;
    }

    private static final long InnerWidth$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float InnerWidth
     * }
     */
    public static final long InnerWidth$offset() {
        return InnerWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float InnerWidth
     * }
     */
    public static float InnerWidth(MemorySegment struct) {
        return struct.get(InnerWidth$LAYOUT, InnerWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float InnerWidth
     * }
     */
    public static void InnerWidth(MemorySegment struct, float fieldValue) {
        struct.set(InnerWidth$LAYOUT, InnerWidth$OFFSET, fieldValue);
    }

    private static final OfFloat ColumnsGivenWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ColumnsGivenWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ColumnsGivenWidth
     * }
     */
    public static final OfFloat ColumnsGivenWidth$layout() {
        return ColumnsGivenWidth$LAYOUT;
    }

    private static final long ColumnsGivenWidth$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ColumnsGivenWidth
     * }
     */
    public static final long ColumnsGivenWidth$offset() {
        return ColumnsGivenWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ColumnsGivenWidth
     * }
     */
    public static float ColumnsGivenWidth(MemorySegment struct) {
        return struct.get(ColumnsGivenWidth$LAYOUT, ColumnsGivenWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ColumnsGivenWidth
     * }
     */
    public static void ColumnsGivenWidth(MemorySegment struct, float fieldValue) {
        struct.set(ColumnsGivenWidth$LAYOUT, ColumnsGivenWidth$OFFSET, fieldValue);
    }

    private static final OfFloat ColumnsAutoFitWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ColumnsAutoFitWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ColumnsAutoFitWidth
     * }
     */
    public static final OfFloat ColumnsAutoFitWidth$layout() {
        return ColumnsAutoFitWidth$LAYOUT;
    }

    private static final long ColumnsAutoFitWidth$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ColumnsAutoFitWidth
     * }
     */
    public static final long ColumnsAutoFitWidth$offset() {
        return ColumnsAutoFitWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ColumnsAutoFitWidth
     * }
     */
    public static float ColumnsAutoFitWidth(MemorySegment struct) {
        return struct.get(ColumnsAutoFitWidth$LAYOUT, ColumnsAutoFitWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ColumnsAutoFitWidth
     * }
     */
    public static void ColumnsAutoFitWidth(MemorySegment struct, float fieldValue) {
        struct.set(ColumnsAutoFitWidth$LAYOUT, ColumnsAutoFitWidth$OFFSET, fieldValue);
    }

    private static final OfFloat ColumnsStretchSumWeights$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ColumnsStretchSumWeights"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ColumnsStretchSumWeights
     * }
     */
    public static final OfFloat ColumnsStretchSumWeights$layout() {
        return ColumnsStretchSumWeights$LAYOUT;
    }

    private static final long ColumnsStretchSumWeights$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ColumnsStretchSumWeights
     * }
     */
    public static final long ColumnsStretchSumWeights$offset() {
        return ColumnsStretchSumWeights$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ColumnsStretchSumWeights
     * }
     */
    public static float ColumnsStretchSumWeights(MemorySegment struct) {
        return struct.get(ColumnsStretchSumWeights$LAYOUT, ColumnsStretchSumWeights$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ColumnsStretchSumWeights
     * }
     */
    public static void ColumnsStretchSumWeights(MemorySegment struct, float fieldValue) {
        struct.set(ColumnsStretchSumWeights$LAYOUT, ColumnsStretchSumWeights$OFFSET, fieldValue);
    }

    private static final OfFloat ResizedColumnNextWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ResizedColumnNextWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ResizedColumnNextWidth
     * }
     */
    public static final OfFloat ResizedColumnNextWidth$layout() {
        return ResizedColumnNextWidth$LAYOUT;
    }

    private static final long ResizedColumnNextWidth$OFFSET = 220;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ResizedColumnNextWidth
     * }
     */
    public static final long ResizedColumnNextWidth$offset() {
        return ResizedColumnNextWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ResizedColumnNextWidth
     * }
     */
    public static float ResizedColumnNextWidth(MemorySegment struct) {
        return struct.get(ResizedColumnNextWidth$LAYOUT, ResizedColumnNextWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ResizedColumnNextWidth
     * }
     */
    public static void ResizedColumnNextWidth(MemorySegment struct, float fieldValue) {
        struct.set(ResizedColumnNextWidth$LAYOUT, ResizedColumnNextWidth$OFFSET, fieldValue);
    }

    private static final OfFloat ResizeLockMinContentsX2$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ResizeLockMinContentsX2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ResizeLockMinContentsX2
     * }
     */
    public static final OfFloat ResizeLockMinContentsX2$layout() {
        return ResizeLockMinContentsX2$LAYOUT;
    }

    private static final long ResizeLockMinContentsX2$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ResizeLockMinContentsX2
     * }
     */
    public static final long ResizeLockMinContentsX2$offset() {
        return ResizeLockMinContentsX2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ResizeLockMinContentsX2
     * }
     */
    public static float ResizeLockMinContentsX2(MemorySegment struct) {
        return struct.get(ResizeLockMinContentsX2$LAYOUT, ResizeLockMinContentsX2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ResizeLockMinContentsX2
     * }
     */
    public static void ResizeLockMinContentsX2(MemorySegment struct, float fieldValue) {
        struct.set(ResizeLockMinContentsX2$LAYOUT, ResizeLockMinContentsX2$OFFSET, fieldValue);
    }

    private static final OfFloat RefScale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("RefScale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float RefScale
     * }
     */
    public static final OfFloat RefScale$layout() {
        return RefScale$LAYOUT;
    }

    private static final long RefScale$OFFSET = 228;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float RefScale
     * }
     */
    public static final long RefScale$offset() {
        return RefScale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float RefScale
     * }
     */
    public static float RefScale(MemorySegment struct) {
        return struct.get(RefScale$LAYOUT, RefScale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float RefScale
     * }
     */
    public static void RefScale(MemorySegment struct, float fieldValue) {
        struct.set(RefScale$LAYOUT, RefScale$OFFSET, fieldValue);
    }

    private static final OfFloat AngledHeadersHeight$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("AngledHeadersHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float AngledHeadersHeight
     * }
     */
    public static final OfFloat AngledHeadersHeight$layout() {
        return AngledHeadersHeight$LAYOUT;
    }

    private static final long AngledHeadersHeight$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float AngledHeadersHeight
     * }
     */
    public static final long AngledHeadersHeight$offset() {
        return AngledHeadersHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float AngledHeadersHeight
     * }
     */
    public static float AngledHeadersHeight(MemorySegment struct) {
        return struct.get(AngledHeadersHeight$LAYOUT, AngledHeadersHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float AngledHeadersHeight
     * }
     */
    public static void AngledHeadersHeight(MemorySegment struct, float fieldValue) {
        struct.set(AngledHeadersHeight$LAYOUT, AngledHeadersHeight$OFFSET, fieldValue);
    }

    private static final OfFloat AngledHeadersSlope$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("AngledHeadersSlope"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float AngledHeadersSlope
     * }
     */
    public static final OfFloat AngledHeadersSlope$layout() {
        return AngledHeadersSlope$LAYOUT;
    }

    private static final long AngledHeadersSlope$OFFSET = 236;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float AngledHeadersSlope
     * }
     */
    public static final long AngledHeadersSlope$offset() {
        return AngledHeadersSlope$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float AngledHeadersSlope
     * }
     */
    public static float AngledHeadersSlope(MemorySegment struct) {
        return struct.get(AngledHeadersSlope$LAYOUT, AngledHeadersSlope$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float AngledHeadersSlope
     * }
     */
    public static void AngledHeadersSlope(MemorySegment struct, float fieldValue) {
        struct.set(AngledHeadersSlope$LAYOUT, AngledHeadersSlope$OFFSET, fieldValue);
    }

    private static final GroupLayout OuterRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("OuterRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect OuterRect
     * }
     */
    public static final GroupLayout OuterRect$layout() {
        return OuterRect$LAYOUT;
    }

    private static final long OuterRect$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect OuterRect
     * }
     */
    public static final long OuterRect$offset() {
        return OuterRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect OuterRect
     * }
     */
    public static MemorySegment OuterRect(MemorySegment struct) {
        return struct.asSlice(OuterRect$OFFSET, OuterRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect OuterRect
     * }
     */
    public static void OuterRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OuterRect$OFFSET, OuterRect$LAYOUT.byteSize());
    }

    private static final GroupLayout InnerRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InnerRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect InnerRect
     * }
     */
    public static final GroupLayout InnerRect$layout() {
        return InnerRect$LAYOUT;
    }

    private static final long InnerRect$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect InnerRect
     * }
     */
    public static final long InnerRect$offset() {
        return InnerRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect InnerRect
     * }
     */
    public static MemorySegment InnerRect(MemorySegment struct) {
        return struct.asSlice(InnerRect$OFFSET, InnerRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect InnerRect
     * }
     */
    public static void InnerRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InnerRect$OFFSET, InnerRect$LAYOUT.byteSize());
    }

    private static final GroupLayout WorkRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WorkRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect WorkRect
     * }
     */
    public static final GroupLayout WorkRect$layout() {
        return WorkRect$LAYOUT;
    }

    private static final long WorkRect$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect WorkRect
     * }
     */
    public static final long WorkRect$offset() {
        return WorkRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect WorkRect
     * }
     */
    public static MemorySegment WorkRect(MemorySegment struct) {
        return struct.asSlice(WorkRect$OFFSET, WorkRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect WorkRect
     * }
     */
    public static void WorkRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WorkRect$OFFSET, WorkRect$LAYOUT.byteSize());
    }

    private static final GroupLayout InnerClipRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InnerClipRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect InnerClipRect
     * }
     */
    public static final GroupLayout InnerClipRect$layout() {
        return InnerClipRect$LAYOUT;
    }

    private static final long InnerClipRect$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect InnerClipRect
     * }
     */
    public static final long InnerClipRect$offset() {
        return InnerClipRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect InnerClipRect
     * }
     */
    public static MemorySegment InnerClipRect(MemorySegment struct) {
        return struct.asSlice(InnerClipRect$OFFSET, InnerClipRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect InnerClipRect
     * }
     */
    public static void InnerClipRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InnerClipRect$OFFSET, InnerClipRect$LAYOUT.byteSize());
    }

    private static final GroupLayout BgClipRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BgClipRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect BgClipRect
     * }
     */
    public static final GroupLayout BgClipRect$layout() {
        return BgClipRect$LAYOUT;
    }

    private static final long BgClipRect$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect BgClipRect
     * }
     */
    public static final long BgClipRect$offset() {
        return BgClipRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect BgClipRect
     * }
     */
    public static MemorySegment BgClipRect(MemorySegment struct) {
        return struct.asSlice(BgClipRect$OFFSET, BgClipRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect BgClipRect
     * }
     */
    public static void BgClipRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BgClipRect$OFFSET, BgClipRect$LAYOUT.byteSize());
    }

    private static final GroupLayout Bg0ClipRectForDrawCmd$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Bg0ClipRectForDrawCmd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect Bg0ClipRectForDrawCmd
     * }
     */
    public static final GroupLayout Bg0ClipRectForDrawCmd$layout() {
        return Bg0ClipRectForDrawCmd$LAYOUT;
    }

    private static final long Bg0ClipRectForDrawCmd$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect Bg0ClipRectForDrawCmd
     * }
     */
    public static final long Bg0ClipRectForDrawCmd$offset() {
        return Bg0ClipRectForDrawCmd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect Bg0ClipRectForDrawCmd
     * }
     */
    public static MemorySegment Bg0ClipRectForDrawCmd(MemorySegment struct) {
        return struct.asSlice(Bg0ClipRectForDrawCmd$OFFSET, Bg0ClipRectForDrawCmd$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect Bg0ClipRectForDrawCmd
     * }
     */
    public static void Bg0ClipRectForDrawCmd(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Bg0ClipRectForDrawCmd$OFFSET, Bg0ClipRectForDrawCmd$LAYOUT.byteSize());
    }

    private static final GroupLayout Bg2ClipRectForDrawCmd$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Bg2ClipRectForDrawCmd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect Bg2ClipRectForDrawCmd
     * }
     */
    public static final GroupLayout Bg2ClipRectForDrawCmd$layout() {
        return Bg2ClipRectForDrawCmd$LAYOUT;
    }

    private static final long Bg2ClipRectForDrawCmd$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect Bg2ClipRectForDrawCmd
     * }
     */
    public static final long Bg2ClipRectForDrawCmd$offset() {
        return Bg2ClipRectForDrawCmd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect Bg2ClipRectForDrawCmd
     * }
     */
    public static MemorySegment Bg2ClipRectForDrawCmd(MemorySegment struct) {
        return struct.asSlice(Bg2ClipRectForDrawCmd$OFFSET, Bg2ClipRectForDrawCmd$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect Bg2ClipRectForDrawCmd
     * }
     */
    public static void Bg2ClipRectForDrawCmd(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Bg2ClipRectForDrawCmd$OFFSET, Bg2ClipRectForDrawCmd$LAYOUT.byteSize());
    }

    private static final GroupLayout HostClipRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("HostClipRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect HostClipRect
     * }
     */
    public static final GroupLayout HostClipRect$layout() {
        return HostClipRect$LAYOUT;
    }

    private static final long HostClipRect$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect HostClipRect
     * }
     */
    public static final long HostClipRect$offset() {
        return HostClipRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect HostClipRect
     * }
     */
    public static MemorySegment HostClipRect(MemorySegment struct) {
        return struct.asSlice(HostClipRect$OFFSET, HostClipRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect HostClipRect
     * }
     */
    public static void HostClipRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, HostClipRect$OFFSET, HostClipRect$LAYOUT.byteSize());
    }

    private static final GroupLayout HostBackupInnerClipRect$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("HostBackupInnerClipRect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImRect HostBackupInnerClipRect
     * }
     */
    public static final GroupLayout HostBackupInnerClipRect$layout() {
        return HostBackupInnerClipRect$LAYOUT;
    }

    private static final long HostBackupInnerClipRect$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImRect HostBackupInnerClipRect
     * }
     */
    public static final long HostBackupInnerClipRect$offset() {
        return HostBackupInnerClipRect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImRect HostBackupInnerClipRect
     * }
     */
    public static MemorySegment HostBackupInnerClipRect(MemorySegment struct) {
        return struct.asSlice(HostBackupInnerClipRect$OFFSET, HostBackupInnerClipRect$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImRect HostBackupInnerClipRect
     * }
     */
    public static void HostBackupInnerClipRect(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, HostBackupInnerClipRect$OFFSET, HostBackupInnerClipRect$LAYOUT.byteSize());
    }

    private static final AddressLayout OuterWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OuterWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *OuterWindow
     * }
     */
    public static final AddressLayout OuterWindow$layout() {
        return OuterWindow$LAYOUT;
    }

    private static final long OuterWindow$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *OuterWindow
     * }
     */
    public static final long OuterWindow$offset() {
        return OuterWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *OuterWindow
     * }
     */
    public static MemorySegment OuterWindow(MemorySegment struct) {
        return struct.get(OuterWindow$LAYOUT, OuterWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *OuterWindow
     * }
     */
    public static void OuterWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OuterWindow$LAYOUT, OuterWindow$OFFSET, fieldValue);
    }

    private static final AddressLayout InnerWindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("InnerWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *InnerWindow
     * }
     */
    public static final AddressLayout InnerWindow$layout() {
        return InnerWindow$LAYOUT;
    }

    private static final long InnerWindow$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *InnerWindow
     * }
     */
    public static final long InnerWindow$offset() {
        return InnerWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *InnerWindow
     * }
     */
    public static MemorySegment InnerWindow(MemorySegment struct) {
        return struct.get(InnerWindow$LAYOUT, InnerWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *InnerWindow
     * }
     */
    public static void InnerWindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(InnerWindow$LAYOUT, InnerWindow$OFFSET, fieldValue);
    }

    private static final GroupLayout ColumnsNames$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ColumnsNames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer ColumnsNames
     * }
     */
    public static final GroupLayout ColumnsNames$layout() {
        return ColumnsNames$LAYOUT;
    }

    private static final long ColumnsNames$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer ColumnsNames
     * }
     */
    public static final long ColumnsNames$offset() {
        return ColumnsNames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer ColumnsNames
     * }
     */
    public static MemorySegment ColumnsNames(MemorySegment struct) {
        return struct.asSlice(ColumnsNames$OFFSET, ColumnsNames$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTextBuffer ColumnsNames
     * }
     */
    public static void ColumnsNames(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ColumnsNames$OFFSET, ColumnsNames$LAYOUT.byteSize());
    }

    private static final AddressLayout DrawSplitter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("DrawSplitter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawListSplitter *DrawSplitter
     * }
     */
    public static final AddressLayout DrawSplitter$layout() {
        return DrawSplitter$LAYOUT;
    }

    private static final long DrawSplitter$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawListSplitter *DrawSplitter
     * }
     */
    public static final long DrawSplitter$offset() {
        return DrawSplitter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawListSplitter *DrawSplitter
     * }
     */
    public static MemorySegment DrawSplitter(MemorySegment struct) {
        return struct.get(DrawSplitter$LAYOUT, DrawSplitter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawListSplitter *DrawSplitter
     * }
     */
    public static void DrawSplitter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(DrawSplitter$LAYOUT, DrawSplitter$OFFSET, fieldValue);
    }

    private static final GroupLayout InstanceDataFirst$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InstanceDataFirst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableInstanceData InstanceDataFirst
     * }
     */
    public static final GroupLayout InstanceDataFirst$layout() {
        return InstanceDataFirst$LAYOUT;
    }

    private static final long InstanceDataFirst$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableInstanceData InstanceDataFirst
     * }
     */
    public static final long InstanceDataFirst$offset() {
        return InstanceDataFirst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableInstanceData InstanceDataFirst
     * }
     */
    public static MemorySegment InstanceDataFirst(MemorySegment struct) {
        return struct.asSlice(InstanceDataFirst$OFFSET, InstanceDataFirst$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableInstanceData InstanceDataFirst
     * }
     */
    public static void InstanceDataFirst(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InstanceDataFirst$OFFSET, InstanceDataFirst$LAYOUT.byteSize());
    }

    private static final GroupLayout InstanceDataExtra$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("InstanceDataExtra"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableInstanceData InstanceDataExtra
     * }
     */
    public static final GroupLayout InstanceDataExtra$layout() {
        return InstanceDataExtra$LAYOUT;
    }

    private static final long InstanceDataExtra$OFFSET = 448;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableInstanceData InstanceDataExtra
     * }
     */
    public static final long InstanceDataExtra$offset() {
        return InstanceDataExtra$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableInstanceData InstanceDataExtra
     * }
     */
    public static MemorySegment InstanceDataExtra(MemorySegment struct) {
        return struct.asSlice(InstanceDataExtra$OFFSET, InstanceDataExtra$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableInstanceData InstanceDataExtra
     * }
     */
    public static void InstanceDataExtra(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, InstanceDataExtra$OFFSET, InstanceDataExtra$LAYOUT.byteSize());
    }

    private static final GroupLayout SortSpecsSingle$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SortSpecsSingle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnSortSpecs SortSpecsSingle
     * }
     */
    public static final GroupLayout SortSpecsSingle$layout() {
        return SortSpecsSingle$LAYOUT;
    }

    private static final long SortSpecsSingle$OFFSET = 464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnSortSpecs SortSpecsSingle
     * }
     */
    public static final long SortSpecsSingle$offset() {
        return SortSpecsSingle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnSortSpecs SortSpecsSingle
     * }
     */
    public static MemorySegment SortSpecsSingle(MemorySegment struct) {
        return struct.asSlice(SortSpecsSingle$OFFSET, SortSpecsSingle$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnSortSpecs SortSpecsSingle
     * }
     */
    public static void SortSpecsSingle(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SortSpecsSingle$OFFSET, SortSpecsSingle$LAYOUT.byteSize());
    }

    private static final GroupLayout SortSpecsMulti$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SortSpecsMulti"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableColumnSortSpecs SortSpecsMulti
     * }
     */
    public static final GroupLayout SortSpecsMulti$layout() {
        return SortSpecsMulti$LAYOUT;
    }

    private static final long SortSpecsMulti$OFFSET = 480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableColumnSortSpecs SortSpecsMulti
     * }
     */
    public static final long SortSpecsMulti$offset() {
        return SortSpecsMulti$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableColumnSortSpecs SortSpecsMulti
     * }
     */
    public static MemorySegment SortSpecsMulti(MemorySegment struct) {
        return struct.asSlice(SortSpecsMulti$OFFSET, SortSpecsMulti$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiTableColumnSortSpecs SortSpecsMulti
     * }
     */
    public static void SortSpecsMulti(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SortSpecsMulti$OFFSET, SortSpecsMulti$LAYOUT.byteSize());
    }

    private static final GroupLayout SortSpecs$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("SortSpecs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableSortSpecs SortSpecs
     * }
     */
    public static final GroupLayout SortSpecs$layout() {
        return SortSpecs$LAYOUT;
    }

    private static final long SortSpecs$OFFSET = 496;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableSortSpecs SortSpecs
     * }
     */
    public static final long SortSpecs$offset() {
        return SortSpecs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableSortSpecs SortSpecs
     * }
     */
    public static MemorySegment SortSpecs(MemorySegment struct) {
        return struct.asSlice(SortSpecs$OFFSET, SortSpecs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableSortSpecs SortSpecs
     * }
     */
    public static void SortSpecs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SortSpecs$OFFSET, SortSpecs$LAYOUT.byteSize());
    }

    private static final OfShort SortSpecsCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("SortSpecsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx SortSpecsCount
     * }
     */
    public static final OfShort SortSpecsCount$layout() {
        return SortSpecsCount$LAYOUT;
    }

    private static final long SortSpecsCount$OFFSET = 512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx SortSpecsCount
     * }
     */
    public static final long SortSpecsCount$offset() {
        return SortSpecsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx SortSpecsCount
     * }
     */
    public static short SortSpecsCount(MemorySegment struct) {
        return struct.get(SortSpecsCount$LAYOUT, SortSpecsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx SortSpecsCount
     * }
     */
    public static void SortSpecsCount(MemorySegment struct, short fieldValue) {
        struct.set(SortSpecsCount$LAYOUT, SortSpecsCount$OFFSET, fieldValue);
    }

    private static final OfShort ColumnsEnabledCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ColumnsEnabledCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ColumnsEnabledCount
     * }
     */
    public static final OfShort ColumnsEnabledCount$layout() {
        return ColumnsEnabledCount$LAYOUT;
    }

    private static final long ColumnsEnabledCount$OFFSET = 514;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ColumnsEnabledCount
     * }
     */
    public static final long ColumnsEnabledCount$offset() {
        return ColumnsEnabledCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ColumnsEnabledCount
     * }
     */
    public static short ColumnsEnabledCount(MemorySegment struct) {
        return struct.get(ColumnsEnabledCount$LAYOUT, ColumnsEnabledCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ColumnsEnabledCount
     * }
     */
    public static void ColumnsEnabledCount(MemorySegment struct, short fieldValue) {
        struct.set(ColumnsEnabledCount$LAYOUT, ColumnsEnabledCount$OFFSET, fieldValue);
    }

    private static final OfShort ColumnsEnabledFixedCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ColumnsEnabledFixedCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ColumnsEnabledFixedCount
     * }
     */
    public static final OfShort ColumnsEnabledFixedCount$layout() {
        return ColumnsEnabledFixedCount$LAYOUT;
    }

    private static final long ColumnsEnabledFixedCount$OFFSET = 516;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ColumnsEnabledFixedCount
     * }
     */
    public static final long ColumnsEnabledFixedCount$offset() {
        return ColumnsEnabledFixedCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ColumnsEnabledFixedCount
     * }
     */
    public static short ColumnsEnabledFixedCount(MemorySegment struct) {
        return struct.get(ColumnsEnabledFixedCount$LAYOUT, ColumnsEnabledFixedCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ColumnsEnabledFixedCount
     * }
     */
    public static void ColumnsEnabledFixedCount(MemorySegment struct, short fieldValue) {
        struct.set(ColumnsEnabledFixedCount$LAYOUT, ColumnsEnabledFixedCount$OFFSET, fieldValue);
    }

    private static final OfShort DeclColumnsCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DeclColumnsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx DeclColumnsCount
     * }
     */
    public static final OfShort DeclColumnsCount$layout() {
        return DeclColumnsCount$LAYOUT;
    }

    private static final long DeclColumnsCount$OFFSET = 518;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx DeclColumnsCount
     * }
     */
    public static final long DeclColumnsCount$offset() {
        return DeclColumnsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx DeclColumnsCount
     * }
     */
    public static short DeclColumnsCount(MemorySegment struct) {
        return struct.get(DeclColumnsCount$LAYOUT, DeclColumnsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx DeclColumnsCount
     * }
     */
    public static void DeclColumnsCount(MemorySegment struct, short fieldValue) {
        struct.set(DeclColumnsCount$LAYOUT, DeclColumnsCount$OFFSET, fieldValue);
    }

    private static final OfShort AngledHeadersCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AngledHeadersCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx AngledHeadersCount
     * }
     */
    public static final OfShort AngledHeadersCount$layout() {
        return AngledHeadersCount$LAYOUT;
    }

    private static final long AngledHeadersCount$OFFSET = 520;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx AngledHeadersCount
     * }
     */
    public static final long AngledHeadersCount$offset() {
        return AngledHeadersCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx AngledHeadersCount
     * }
     */
    public static short AngledHeadersCount(MemorySegment struct) {
        return struct.get(AngledHeadersCount$LAYOUT, AngledHeadersCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx AngledHeadersCount
     * }
     */
    public static void AngledHeadersCount(MemorySegment struct, short fieldValue) {
        struct.set(AngledHeadersCount$LAYOUT, AngledHeadersCount$OFFSET, fieldValue);
    }

    private static final OfShort HoveredColumnBody$LAYOUT = (OfShort)$LAYOUT.select(groupElement("HoveredColumnBody"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HoveredColumnBody
     * }
     */
    public static final OfShort HoveredColumnBody$layout() {
        return HoveredColumnBody$LAYOUT;
    }

    private static final long HoveredColumnBody$OFFSET = 522;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HoveredColumnBody
     * }
     */
    public static final long HoveredColumnBody$offset() {
        return HoveredColumnBody$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HoveredColumnBody
     * }
     */
    public static short HoveredColumnBody(MemorySegment struct) {
        return struct.get(HoveredColumnBody$LAYOUT, HoveredColumnBody$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HoveredColumnBody
     * }
     */
    public static void HoveredColumnBody(MemorySegment struct, short fieldValue) {
        struct.set(HoveredColumnBody$LAYOUT, HoveredColumnBody$OFFSET, fieldValue);
    }

    private static final OfShort HoveredColumnBorder$LAYOUT = (OfShort)$LAYOUT.select(groupElement("HoveredColumnBorder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HoveredColumnBorder
     * }
     */
    public static final OfShort HoveredColumnBorder$layout() {
        return HoveredColumnBorder$LAYOUT;
    }

    private static final long HoveredColumnBorder$OFFSET = 524;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HoveredColumnBorder
     * }
     */
    public static final long HoveredColumnBorder$offset() {
        return HoveredColumnBorder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HoveredColumnBorder
     * }
     */
    public static short HoveredColumnBorder(MemorySegment struct) {
        return struct.get(HoveredColumnBorder$LAYOUT, HoveredColumnBorder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HoveredColumnBorder
     * }
     */
    public static void HoveredColumnBorder(MemorySegment struct, short fieldValue) {
        struct.set(HoveredColumnBorder$LAYOUT, HoveredColumnBorder$OFFSET, fieldValue);
    }

    private static final OfShort HighlightColumnHeader$LAYOUT = (OfShort)$LAYOUT.select(groupElement("HighlightColumnHeader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HighlightColumnHeader
     * }
     */
    public static final OfShort HighlightColumnHeader$layout() {
        return HighlightColumnHeader$LAYOUT;
    }

    private static final long HighlightColumnHeader$OFFSET = 526;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HighlightColumnHeader
     * }
     */
    public static final long HighlightColumnHeader$offset() {
        return HighlightColumnHeader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HighlightColumnHeader
     * }
     */
    public static short HighlightColumnHeader(MemorySegment struct) {
        return struct.get(HighlightColumnHeader$LAYOUT, HighlightColumnHeader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HighlightColumnHeader
     * }
     */
    public static void HighlightColumnHeader(MemorySegment struct, short fieldValue) {
        struct.set(HighlightColumnHeader$LAYOUT, HighlightColumnHeader$OFFSET, fieldValue);
    }

    private static final OfShort AutoFitSingleColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("AutoFitSingleColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx AutoFitSingleColumn
     * }
     */
    public static final OfShort AutoFitSingleColumn$layout() {
        return AutoFitSingleColumn$LAYOUT;
    }

    private static final long AutoFitSingleColumn$OFFSET = 528;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx AutoFitSingleColumn
     * }
     */
    public static final long AutoFitSingleColumn$offset() {
        return AutoFitSingleColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx AutoFitSingleColumn
     * }
     */
    public static short AutoFitSingleColumn(MemorySegment struct) {
        return struct.get(AutoFitSingleColumn$LAYOUT, AutoFitSingleColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx AutoFitSingleColumn
     * }
     */
    public static void AutoFitSingleColumn(MemorySegment struct, short fieldValue) {
        struct.set(AutoFitSingleColumn$LAYOUT, AutoFitSingleColumn$OFFSET, fieldValue);
    }

    private static final OfShort ResizedColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ResizedColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ResizedColumn
     * }
     */
    public static final OfShort ResizedColumn$layout() {
        return ResizedColumn$LAYOUT;
    }

    private static final long ResizedColumn$OFFSET = 530;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ResizedColumn
     * }
     */
    public static final long ResizedColumn$offset() {
        return ResizedColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ResizedColumn
     * }
     */
    public static short ResizedColumn(MemorySegment struct) {
        return struct.get(ResizedColumn$LAYOUT, ResizedColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ResizedColumn
     * }
     */
    public static void ResizedColumn(MemorySegment struct, short fieldValue) {
        struct.set(ResizedColumn$LAYOUT, ResizedColumn$OFFSET, fieldValue);
    }

    private static final OfShort LastResizedColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("LastResizedColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LastResizedColumn
     * }
     */
    public static final OfShort LastResizedColumn$layout() {
        return LastResizedColumn$LAYOUT;
    }

    private static final long LastResizedColumn$OFFSET = 532;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LastResizedColumn
     * }
     */
    public static final long LastResizedColumn$offset() {
        return LastResizedColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LastResizedColumn
     * }
     */
    public static short LastResizedColumn(MemorySegment struct) {
        return struct.get(LastResizedColumn$LAYOUT, LastResizedColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LastResizedColumn
     * }
     */
    public static void LastResizedColumn(MemorySegment struct, short fieldValue) {
        struct.set(LastResizedColumn$LAYOUT, LastResizedColumn$OFFSET, fieldValue);
    }

    private static final OfShort HeldHeaderColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("HeldHeaderColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HeldHeaderColumn
     * }
     */
    public static final OfShort HeldHeaderColumn$layout() {
        return HeldHeaderColumn$LAYOUT;
    }

    private static final long HeldHeaderColumn$OFFSET = 534;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HeldHeaderColumn
     * }
     */
    public static final long HeldHeaderColumn$offset() {
        return HeldHeaderColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HeldHeaderColumn
     * }
     */
    public static short HeldHeaderColumn(MemorySegment struct) {
        return struct.get(HeldHeaderColumn$LAYOUT, HeldHeaderColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx HeldHeaderColumn
     * }
     */
    public static void HeldHeaderColumn(MemorySegment struct, short fieldValue) {
        struct.set(HeldHeaderColumn$LAYOUT, HeldHeaderColumn$OFFSET, fieldValue);
    }

    private static final OfShort ReorderColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ReorderColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ReorderColumn
     * }
     */
    public static final OfShort ReorderColumn$layout() {
        return ReorderColumn$LAYOUT;
    }

    private static final long ReorderColumn$OFFSET = 536;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ReorderColumn
     * }
     */
    public static final long ReorderColumn$offset() {
        return ReorderColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ReorderColumn
     * }
     */
    public static short ReorderColumn(MemorySegment struct) {
        return struct.get(ReorderColumn$LAYOUT, ReorderColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ReorderColumn
     * }
     */
    public static void ReorderColumn(MemorySegment struct, short fieldValue) {
        struct.set(ReorderColumn$LAYOUT, ReorderColumn$OFFSET, fieldValue);
    }

    private static final OfShort ReorderColumnDir$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ReorderColumnDir"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ReorderColumnDir
     * }
     */
    public static final OfShort ReorderColumnDir$layout() {
        return ReorderColumnDir$LAYOUT;
    }

    private static final long ReorderColumnDir$OFFSET = 538;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ReorderColumnDir
     * }
     */
    public static final long ReorderColumnDir$offset() {
        return ReorderColumnDir$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ReorderColumnDir
     * }
     */
    public static short ReorderColumnDir(MemorySegment struct) {
        return struct.get(ReorderColumnDir$LAYOUT, ReorderColumnDir$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ReorderColumnDir
     * }
     */
    public static void ReorderColumnDir(MemorySegment struct, short fieldValue) {
        struct.set(ReorderColumnDir$LAYOUT, ReorderColumnDir$OFFSET, fieldValue);
    }

    private static final OfShort LeftMostEnabledColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("LeftMostEnabledColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LeftMostEnabledColumn
     * }
     */
    public static final OfShort LeftMostEnabledColumn$layout() {
        return LeftMostEnabledColumn$LAYOUT;
    }

    private static final long LeftMostEnabledColumn$OFFSET = 540;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LeftMostEnabledColumn
     * }
     */
    public static final long LeftMostEnabledColumn$offset() {
        return LeftMostEnabledColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LeftMostEnabledColumn
     * }
     */
    public static short LeftMostEnabledColumn(MemorySegment struct) {
        return struct.get(LeftMostEnabledColumn$LAYOUT, LeftMostEnabledColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LeftMostEnabledColumn
     * }
     */
    public static void LeftMostEnabledColumn(MemorySegment struct, short fieldValue) {
        struct.set(LeftMostEnabledColumn$LAYOUT, LeftMostEnabledColumn$OFFSET, fieldValue);
    }

    private static final OfShort RightMostEnabledColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("RightMostEnabledColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RightMostEnabledColumn
     * }
     */
    public static final OfShort RightMostEnabledColumn$layout() {
        return RightMostEnabledColumn$LAYOUT;
    }

    private static final long RightMostEnabledColumn$OFFSET = 542;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RightMostEnabledColumn
     * }
     */
    public static final long RightMostEnabledColumn$offset() {
        return RightMostEnabledColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RightMostEnabledColumn
     * }
     */
    public static short RightMostEnabledColumn(MemorySegment struct) {
        return struct.get(RightMostEnabledColumn$LAYOUT, RightMostEnabledColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RightMostEnabledColumn
     * }
     */
    public static void RightMostEnabledColumn(MemorySegment struct, short fieldValue) {
        struct.set(RightMostEnabledColumn$LAYOUT, RightMostEnabledColumn$OFFSET, fieldValue);
    }

    private static final OfShort LeftMostStretchedColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("LeftMostStretchedColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LeftMostStretchedColumn
     * }
     */
    public static final OfShort LeftMostStretchedColumn$layout() {
        return LeftMostStretchedColumn$LAYOUT;
    }

    private static final long LeftMostStretchedColumn$OFFSET = 544;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LeftMostStretchedColumn
     * }
     */
    public static final long LeftMostStretchedColumn$offset() {
        return LeftMostStretchedColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LeftMostStretchedColumn
     * }
     */
    public static short LeftMostStretchedColumn(MemorySegment struct) {
        return struct.get(LeftMostStretchedColumn$LAYOUT, LeftMostStretchedColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx LeftMostStretchedColumn
     * }
     */
    public static void LeftMostStretchedColumn(MemorySegment struct, short fieldValue) {
        struct.set(LeftMostStretchedColumn$LAYOUT, LeftMostStretchedColumn$OFFSET, fieldValue);
    }

    private static final OfShort RightMostStretchedColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("RightMostStretchedColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RightMostStretchedColumn
     * }
     */
    public static final OfShort RightMostStretchedColumn$layout() {
        return RightMostStretchedColumn$LAYOUT;
    }

    private static final long RightMostStretchedColumn$OFFSET = 546;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RightMostStretchedColumn
     * }
     */
    public static final long RightMostStretchedColumn$offset() {
        return RightMostStretchedColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RightMostStretchedColumn
     * }
     */
    public static short RightMostStretchedColumn(MemorySegment struct) {
        return struct.get(RightMostStretchedColumn$LAYOUT, RightMostStretchedColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RightMostStretchedColumn
     * }
     */
    public static void RightMostStretchedColumn(MemorySegment struct, short fieldValue) {
        struct.set(RightMostStretchedColumn$LAYOUT, RightMostStretchedColumn$OFFSET, fieldValue);
    }

    private static final OfShort ContextPopupColumn$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ContextPopupColumn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ContextPopupColumn
     * }
     */
    public static final OfShort ContextPopupColumn$layout() {
        return ContextPopupColumn$LAYOUT;
    }

    private static final long ContextPopupColumn$OFFSET = 548;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ContextPopupColumn
     * }
     */
    public static final long ContextPopupColumn$offset() {
        return ContextPopupColumn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ContextPopupColumn
     * }
     */
    public static short ContextPopupColumn(MemorySegment struct) {
        return struct.get(ContextPopupColumn$LAYOUT, ContextPopupColumn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx ContextPopupColumn
     * }
     */
    public static void ContextPopupColumn(MemorySegment struct, short fieldValue) {
        struct.set(ContextPopupColumn$LAYOUT, ContextPopupColumn$OFFSET, fieldValue);
    }

    private static final OfShort FreezeRowsRequest$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FreezeRowsRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeRowsRequest
     * }
     */
    public static final OfShort FreezeRowsRequest$layout() {
        return FreezeRowsRequest$LAYOUT;
    }

    private static final long FreezeRowsRequest$OFFSET = 550;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeRowsRequest
     * }
     */
    public static final long FreezeRowsRequest$offset() {
        return FreezeRowsRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeRowsRequest
     * }
     */
    public static short FreezeRowsRequest(MemorySegment struct) {
        return struct.get(FreezeRowsRequest$LAYOUT, FreezeRowsRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeRowsRequest
     * }
     */
    public static void FreezeRowsRequest(MemorySegment struct, short fieldValue) {
        struct.set(FreezeRowsRequest$LAYOUT, FreezeRowsRequest$OFFSET, fieldValue);
    }

    private static final OfShort FreezeRowsCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FreezeRowsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeRowsCount
     * }
     */
    public static final OfShort FreezeRowsCount$layout() {
        return FreezeRowsCount$LAYOUT;
    }

    private static final long FreezeRowsCount$OFFSET = 552;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeRowsCount
     * }
     */
    public static final long FreezeRowsCount$offset() {
        return FreezeRowsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeRowsCount
     * }
     */
    public static short FreezeRowsCount(MemorySegment struct) {
        return struct.get(FreezeRowsCount$LAYOUT, FreezeRowsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeRowsCount
     * }
     */
    public static void FreezeRowsCount(MemorySegment struct, short fieldValue) {
        struct.set(FreezeRowsCount$LAYOUT, FreezeRowsCount$OFFSET, fieldValue);
    }

    private static final OfShort FreezeColumnsRequest$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FreezeColumnsRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeColumnsRequest
     * }
     */
    public static final OfShort FreezeColumnsRequest$layout() {
        return FreezeColumnsRequest$LAYOUT;
    }

    private static final long FreezeColumnsRequest$OFFSET = 554;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeColumnsRequest
     * }
     */
    public static final long FreezeColumnsRequest$offset() {
        return FreezeColumnsRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeColumnsRequest
     * }
     */
    public static short FreezeColumnsRequest(MemorySegment struct) {
        return struct.get(FreezeColumnsRequest$LAYOUT, FreezeColumnsRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeColumnsRequest
     * }
     */
    public static void FreezeColumnsRequest(MemorySegment struct, short fieldValue) {
        struct.set(FreezeColumnsRequest$LAYOUT, FreezeColumnsRequest$OFFSET, fieldValue);
    }

    private static final OfShort FreezeColumnsCount$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FreezeColumnsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeColumnsCount
     * }
     */
    public static final OfShort FreezeColumnsCount$layout() {
        return FreezeColumnsCount$LAYOUT;
    }

    private static final long FreezeColumnsCount$OFFSET = 556;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeColumnsCount
     * }
     */
    public static final long FreezeColumnsCount$offset() {
        return FreezeColumnsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeColumnsCount
     * }
     */
    public static short FreezeColumnsCount(MemorySegment struct) {
        return struct.get(FreezeColumnsCount$LAYOUT, FreezeColumnsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx FreezeColumnsCount
     * }
     */
    public static void FreezeColumnsCount(MemorySegment struct, short fieldValue) {
        struct.set(FreezeColumnsCount$LAYOUT, FreezeColumnsCount$OFFSET, fieldValue);
    }

    private static final OfShort RowCellDataCurrent$LAYOUT = (OfShort)$LAYOUT.select(groupElement("RowCellDataCurrent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RowCellDataCurrent
     * }
     */
    public static final OfShort RowCellDataCurrent$layout() {
        return RowCellDataCurrent$LAYOUT;
    }

    private static final long RowCellDataCurrent$OFFSET = 558;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RowCellDataCurrent
     * }
     */
    public static final long RowCellDataCurrent$offset() {
        return RowCellDataCurrent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RowCellDataCurrent
     * }
     */
    public static short RowCellDataCurrent(MemorySegment struct) {
        return struct.get(RowCellDataCurrent$LAYOUT, RowCellDataCurrent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableColumnIdx RowCellDataCurrent
     * }
     */
    public static void RowCellDataCurrent(MemorySegment struct, short fieldValue) {
        struct.set(RowCellDataCurrent$LAYOUT, RowCellDataCurrent$OFFSET, fieldValue);
    }

    private static final OfShort DummyDrawChannel$LAYOUT = (OfShort)$LAYOUT.select(groupElement("DummyDrawChannel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DummyDrawChannel
     * }
     */
    public static final OfShort DummyDrawChannel$layout() {
        return DummyDrawChannel$LAYOUT;
    }

    private static final long DummyDrawChannel$OFFSET = 560;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DummyDrawChannel
     * }
     */
    public static final long DummyDrawChannel$offset() {
        return DummyDrawChannel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DummyDrawChannel
     * }
     */
    public static short DummyDrawChannel(MemorySegment struct) {
        return struct.get(DummyDrawChannel$LAYOUT, DummyDrawChannel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx DummyDrawChannel
     * }
     */
    public static void DummyDrawChannel(MemorySegment struct, short fieldValue) {
        struct.set(DummyDrawChannel$LAYOUT, DummyDrawChannel$OFFSET, fieldValue);
    }

    private static final OfShort Bg2DrawChannelCurrent$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Bg2DrawChannelCurrent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx Bg2DrawChannelCurrent
     * }
     */
    public static final OfShort Bg2DrawChannelCurrent$layout() {
        return Bg2DrawChannelCurrent$LAYOUT;
    }

    private static final long Bg2DrawChannelCurrent$OFFSET = 562;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx Bg2DrawChannelCurrent
     * }
     */
    public static final long Bg2DrawChannelCurrent$offset() {
        return Bg2DrawChannelCurrent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx Bg2DrawChannelCurrent
     * }
     */
    public static short Bg2DrawChannelCurrent(MemorySegment struct) {
        return struct.get(Bg2DrawChannelCurrent$LAYOUT, Bg2DrawChannelCurrent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx Bg2DrawChannelCurrent
     * }
     */
    public static void Bg2DrawChannelCurrent(MemorySegment struct, short fieldValue) {
        struct.set(Bg2DrawChannelCurrent$LAYOUT, Bg2DrawChannelCurrent$OFFSET, fieldValue);
    }

    private static final OfShort Bg2DrawChannelUnfrozen$LAYOUT = (OfShort)$LAYOUT.select(groupElement("Bg2DrawChannelUnfrozen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx Bg2DrawChannelUnfrozen
     * }
     */
    public static final OfShort Bg2DrawChannelUnfrozen$layout() {
        return Bg2DrawChannelUnfrozen$LAYOUT;
    }

    private static final long Bg2DrawChannelUnfrozen$OFFSET = 564;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx Bg2DrawChannelUnfrozen
     * }
     */
    public static final long Bg2DrawChannelUnfrozen$offset() {
        return Bg2DrawChannelUnfrozen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx Bg2DrawChannelUnfrozen
     * }
     */
    public static short Bg2DrawChannelUnfrozen(MemorySegment struct) {
        return struct.get(Bg2DrawChannelUnfrozen$LAYOUT, Bg2DrawChannelUnfrozen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiTableDrawChannelIdx Bg2DrawChannelUnfrozen
     * }
     */
    public static void Bg2DrawChannelUnfrozen(MemorySegment struct, short fieldValue) {
        struct.set(Bg2DrawChannelUnfrozen$LAYOUT, Bg2DrawChannelUnfrozen$OFFSET, fieldValue);
    }

    private static final OfBoolean IsLayoutLocked$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsLayoutLocked"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsLayoutLocked
     * }
     */
    public static final OfBoolean IsLayoutLocked$layout() {
        return IsLayoutLocked$LAYOUT;
    }

    private static final long IsLayoutLocked$OFFSET = 566;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsLayoutLocked
     * }
     */
    public static final long IsLayoutLocked$offset() {
        return IsLayoutLocked$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsLayoutLocked
     * }
     */
    public static boolean IsLayoutLocked(MemorySegment struct) {
        return struct.get(IsLayoutLocked$LAYOUT, IsLayoutLocked$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsLayoutLocked
     * }
     */
    public static void IsLayoutLocked(MemorySegment struct, boolean fieldValue) {
        struct.set(IsLayoutLocked$LAYOUT, IsLayoutLocked$OFFSET, fieldValue);
    }

    private static final OfBoolean IsInsideRow$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsInsideRow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsInsideRow
     * }
     */
    public static final OfBoolean IsInsideRow$layout() {
        return IsInsideRow$LAYOUT;
    }

    private static final long IsInsideRow$OFFSET = 567;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsInsideRow
     * }
     */
    public static final long IsInsideRow$offset() {
        return IsInsideRow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsInsideRow
     * }
     */
    public static boolean IsInsideRow(MemorySegment struct) {
        return struct.get(IsInsideRow$LAYOUT, IsInsideRow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsInsideRow
     * }
     */
    public static void IsInsideRow(MemorySegment struct, boolean fieldValue) {
        struct.set(IsInsideRow$LAYOUT, IsInsideRow$OFFSET, fieldValue);
    }

    private static final OfBoolean IsInitializing$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsInitializing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsInitializing
     * }
     */
    public static final OfBoolean IsInitializing$layout() {
        return IsInitializing$LAYOUT;
    }

    private static final long IsInitializing$OFFSET = 568;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsInitializing
     * }
     */
    public static final long IsInitializing$offset() {
        return IsInitializing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsInitializing
     * }
     */
    public static boolean IsInitializing(MemorySegment struct) {
        return struct.get(IsInitializing$LAYOUT, IsInitializing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsInitializing
     * }
     */
    public static void IsInitializing(MemorySegment struct, boolean fieldValue) {
        struct.set(IsInitializing$LAYOUT, IsInitializing$OFFSET, fieldValue);
    }

    private static final OfBoolean IsSortSpecsDirty$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsSortSpecsDirty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsSortSpecsDirty
     * }
     */
    public static final OfBoolean IsSortSpecsDirty$layout() {
        return IsSortSpecsDirty$LAYOUT;
    }

    private static final long IsSortSpecsDirty$OFFSET = 569;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsSortSpecsDirty
     * }
     */
    public static final long IsSortSpecsDirty$offset() {
        return IsSortSpecsDirty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsSortSpecsDirty
     * }
     */
    public static boolean IsSortSpecsDirty(MemorySegment struct) {
        return struct.get(IsSortSpecsDirty$LAYOUT, IsSortSpecsDirty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsSortSpecsDirty
     * }
     */
    public static void IsSortSpecsDirty(MemorySegment struct, boolean fieldValue) {
        struct.set(IsSortSpecsDirty$LAYOUT, IsSortSpecsDirty$OFFSET, fieldValue);
    }

    private static final OfBoolean IsUsingHeaders$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsUsingHeaders"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsUsingHeaders
     * }
     */
    public static final OfBoolean IsUsingHeaders$layout() {
        return IsUsingHeaders$LAYOUT;
    }

    private static final long IsUsingHeaders$OFFSET = 570;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsUsingHeaders
     * }
     */
    public static final long IsUsingHeaders$offset() {
        return IsUsingHeaders$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsUsingHeaders
     * }
     */
    public static boolean IsUsingHeaders(MemorySegment struct) {
        return struct.get(IsUsingHeaders$LAYOUT, IsUsingHeaders$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsUsingHeaders
     * }
     */
    public static void IsUsingHeaders(MemorySegment struct, boolean fieldValue) {
        struct.set(IsUsingHeaders$LAYOUT, IsUsingHeaders$OFFSET, fieldValue);
    }

    private static final OfBoolean IsContextPopupOpen$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsContextPopupOpen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsContextPopupOpen
     * }
     */
    public static final OfBoolean IsContextPopupOpen$layout() {
        return IsContextPopupOpen$LAYOUT;
    }

    private static final long IsContextPopupOpen$OFFSET = 571;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsContextPopupOpen
     * }
     */
    public static final long IsContextPopupOpen$offset() {
        return IsContextPopupOpen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsContextPopupOpen
     * }
     */
    public static boolean IsContextPopupOpen(MemorySegment struct) {
        return struct.get(IsContextPopupOpen$LAYOUT, IsContextPopupOpen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsContextPopupOpen
     * }
     */
    public static void IsContextPopupOpen(MemorySegment struct, boolean fieldValue) {
        struct.set(IsContextPopupOpen$LAYOUT, IsContextPopupOpen$OFFSET, fieldValue);
    }

    private static final OfBoolean DisableDefaultContextMenu$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("DisableDefaultContextMenu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool DisableDefaultContextMenu
     * }
     */
    public static final OfBoolean DisableDefaultContextMenu$layout() {
        return DisableDefaultContextMenu$LAYOUT;
    }

    private static final long DisableDefaultContextMenu$OFFSET = 572;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool DisableDefaultContextMenu
     * }
     */
    public static final long DisableDefaultContextMenu$offset() {
        return DisableDefaultContextMenu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool DisableDefaultContextMenu
     * }
     */
    public static boolean DisableDefaultContextMenu(MemorySegment struct) {
        return struct.get(DisableDefaultContextMenu$LAYOUT, DisableDefaultContextMenu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool DisableDefaultContextMenu
     * }
     */
    public static void DisableDefaultContextMenu(MemorySegment struct, boolean fieldValue) {
        struct.set(DisableDefaultContextMenu$LAYOUT, DisableDefaultContextMenu$OFFSET, fieldValue);
    }

    private static final OfBoolean IsSettingsRequestLoad$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsSettingsRequestLoad"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsSettingsRequestLoad
     * }
     */
    public static final OfBoolean IsSettingsRequestLoad$layout() {
        return IsSettingsRequestLoad$LAYOUT;
    }

    private static final long IsSettingsRequestLoad$OFFSET = 573;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsSettingsRequestLoad
     * }
     */
    public static final long IsSettingsRequestLoad$offset() {
        return IsSettingsRequestLoad$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsSettingsRequestLoad
     * }
     */
    public static boolean IsSettingsRequestLoad(MemorySegment struct) {
        return struct.get(IsSettingsRequestLoad$LAYOUT, IsSettingsRequestLoad$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsSettingsRequestLoad
     * }
     */
    public static void IsSettingsRequestLoad(MemorySegment struct, boolean fieldValue) {
        struct.set(IsSettingsRequestLoad$LAYOUT, IsSettingsRequestLoad$OFFSET, fieldValue);
    }

    private static final OfBoolean IsSettingsDirty$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsSettingsDirty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsSettingsDirty
     * }
     */
    public static final OfBoolean IsSettingsDirty$layout() {
        return IsSettingsDirty$LAYOUT;
    }

    private static final long IsSettingsDirty$OFFSET = 574;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsSettingsDirty
     * }
     */
    public static final long IsSettingsDirty$offset() {
        return IsSettingsDirty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsSettingsDirty
     * }
     */
    public static boolean IsSettingsDirty(MemorySegment struct) {
        return struct.get(IsSettingsDirty$LAYOUT, IsSettingsDirty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsSettingsDirty
     * }
     */
    public static void IsSettingsDirty(MemorySegment struct, boolean fieldValue) {
        struct.set(IsSettingsDirty$LAYOUT, IsSettingsDirty$OFFSET, fieldValue);
    }

    private static final OfBoolean IsDefaultDisplayOrder$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsDefaultDisplayOrder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsDefaultDisplayOrder
     * }
     */
    public static final OfBoolean IsDefaultDisplayOrder$layout() {
        return IsDefaultDisplayOrder$LAYOUT;
    }

    private static final long IsDefaultDisplayOrder$OFFSET = 575;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsDefaultDisplayOrder
     * }
     */
    public static final long IsDefaultDisplayOrder$offset() {
        return IsDefaultDisplayOrder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsDefaultDisplayOrder
     * }
     */
    public static boolean IsDefaultDisplayOrder(MemorySegment struct) {
        return struct.get(IsDefaultDisplayOrder$LAYOUT, IsDefaultDisplayOrder$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsDefaultDisplayOrder
     * }
     */
    public static void IsDefaultDisplayOrder(MemorySegment struct, boolean fieldValue) {
        struct.set(IsDefaultDisplayOrder$LAYOUT, IsDefaultDisplayOrder$OFFSET, fieldValue);
    }

    private static final OfBoolean IsResetAllRequest$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsResetAllRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsResetAllRequest
     * }
     */
    public static final OfBoolean IsResetAllRequest$layout() {
        return IsResetAllRequest$LAYOUT;
    }

    private static final long IsResetAllRequest$OFFSET = 576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsResetAllRequest
     * }
     */
    public static final long IsResetAllRequest$offset() {
        return IsResetAllRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsResetAllRequest
     * }
     */
    public static boolean IsResetAllRequest(MemorySegment struct) {
        return struct.get(IsResetAllRequest$LAYOUT, IsResetAllRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsResetAllRequest
     * }
     */
    public static void IsResetAllRequest(MemorySegment struct, boolean fieldValue) {
        struct.set(IsResetAllRequest$LAYOUT, IsResetAllRequest$OFFSET, fieldValue);
    }

    private static final OfBoolean IsResetDisplayOrderRequest$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsResetDisplayOrderRequest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsResetDisplayOrderRequest
     * }
     */
    public static final OfBoolean IsResetDisplayOrderRequest$layout() {
        return IsResetDisplayOrderRequest$LAYOUT;
    }

    private static final long IsResetDisplayOrderRequest$OFFSET = 577;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsResetDisplayOrderRequest
     * }
     */
    public static final long IsResetDisplayOrderRequest$offset() {
        return IsResetDisplayOrderRequest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsResetDisplayOrderRequest
     * }
     */
    public static boolean IsResetDisplayOrderRequest(MemorySegment struct) {
        return struct.get(IsResetDisplayOrderRequest$LAYOUT, IsResetDisplayOrderRequest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsResetDisplayOrderRequest
     * }
     */
    public static void IsResetDisplayOrderRequest(MemorySegment struct, boolean fieldValue) {
        struct.set(IsResetDisplayOrderRequest$LAYOUT, IsResetDisplayOrderRequest$OFFSET, fieldValue);
    }

    private static final OfBoolean IsUnfrozenRows$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsUnfrozenRows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsUnfrozenRows
     * }
     */
    public static final OfBoolean IsUnfrozenRows$layout() {
        return IsUnfrozenRows$LAYOUT;
    }

    private static final long IsUnfrozenRows$OFFSET = 578;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsUnfrozenRows
     * }
     */
    public static final long IsUnfrozenRows$offset() {
        return IsUnfrozenRows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsUnfrozenRows
     * }
     */
    public static boolean IsUnfrozenRows(MemorySegment struct) {
        return struct.get(IsUnfrozenRows$LAYOUT, IsUnfrozenRows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsUnfrozenRows
     * }
     */
    public static void IsUnfrozenRows(MemorySegment struct, boolean fieldValue) {
        struct.set(IsUnfrozenRows$LAYOUT, IsUnfrozenRows$OFFSET, fieldValue);
    }

    private static final OfBoolean IsDefaultSizingPolicy$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsDefaultSizingPolicy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsDefaultSizingPolicy
     * }
     */
    public static final OfBoolean IsDefaultSizingPolicy$layout() {
        return IsDefaultSizingPolicy$LAYOUT;
    }

    private static final long IsDefaultSizingPolicy$OFFSET = 579;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsDefaultSizingPolicy
     * }
     */
    public static final long IsDefaultSizingPolicy$offset() {
        return IsDefaultSizingPolicy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsDefaultSizingPolicy
     * }
     */
    public static boolean IsDefaultSizingPolicy(MemorySegment struct) {
        return struct.get(IsDefaultSizingPolicy$LAYOUT, IsDefaultSizingPolicy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsDefaultSizingPolicy
     * }
     */
    public static void IsDefaultSizingPolicy(MemorySegment struct, boolean fieldValue) {
        struct.set(IsDefaultSizingPolicy$LAYOUT, IsDefaultSizingPolicy$OFFSET, fieldValue);
    }

    private static final OfBoolean IsActiveIdAliveBeforeTable$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsActiveIdAliveBeforeTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsActiveIdAliveBeforeTable
     * }
     */
    public static final OfBoolean IsActiveIdAliveBeforeTable$layout() {
        return IsActiveIdAliveBeforeTable$LAYOUT;
    }

    private static final long IsActiveIdAliveBeforeTable$OFFSET = 580;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsActiveIdAliveBeforeTable
     * }
     */
    public static final long IsActiveIdAliveBeforeTable$offset() {
        return IsActiveIdAliveBeforeTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsActiveIdAliveBeforeTable
     * }
     */
    public static boolean IsActiveIdAliveBeforeTable(MemorySegment struct) {
        return struct.get(IsActiveIdAliveBeforeTable$LAYOUT, IsActiveIdAliveBeforeTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsActiveIdAliveBeforeTable
     * }
     */
    public static void IsActiveIdAliveBeforeTable(MemorySegment struct, boolean fieldValue) {
        struct.set(IsActiveIdAliveBeforeTable$LAYOUT, IsActiveIdAliveBeforeTable$OFFSET, fieldValue);
    }

    private static final OfBoolean IsActiveIdInTable$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("IsActiveIdInTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool IsActiveIdInTable
     * }
     */
    public static final OfBoolean IsActiveIdInTable$layout() {
        return IsActiveIdInTable$LAYOUT;
    }

    private static final long IsActiveIdInTable$OFFSET = 581;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool IsActiveIdInTable
     * }
     */
    public static final long IsActiveIdInTable$offset() {
        return IsActiveIdInTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool IsActiveIdInTable
     * }
     */
    public static boolean IsActiveIdInTable(MemorySegment struct) {
        return struct.get(IsActiveIdInTable$LAYOUT, IsActiveIdInTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool IsActiveIdInTable
     * }
     */
    public static void IsActiveIdInTable(MemorySegment struct, boolean fieldValue) {
        struct.set(IsActiveIdInTable$LAYOUT, IsActiveIdInTable$OFFSET, fieldValue);
    }

    private static final OfBoolean HasScrollbarYCurr$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("HasScrollbarYCurr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool HasScrollbarYCurr
     * }
     */
    public static final OfBoolean HasScrollbarYCurr$layout() {
        return HasScrollbarYCurr$LAYOUT;
    }

    private static final long HasScrollbarYCurr$OFFSET = 582;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool HasScrollbarYCurr
     * }
     */
    public static final long HasScrollbarYCurr$offset() {
        return HasScrollbarYCurr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool HasScrollbarYCurr
     * }
     */
    public static boolean HasScrollbarYCurr(MemorySegment struct) {
        return struct.get(HasScrollbarYCurr$LAYOUT, HasScrollbarYCurr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool HasScrollbarYCurr
     * }
     */
    public static void HasScrollbarYCurr(MemorySegment struct, boolean fieldValue) {
        struct.set(HasScrollbarYCurr$LAYOUT, HasScrollbarYCurr$OFFSET, fieldValue);
    }

    private static final OfBoolean HasScrollbarYPrev$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("HasScrollbarYPrev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool HasScrollbarYPrev
     * }
     */
    public static final OfBoolean HasScrollbarYPrev$layout() {
        return HasScrollbarYPrev$LAYOUT;
    }

    private static final long HasScrollbarYPrev$OFFSET = 583;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool HasScrollbarYPrev
     * }
     */
    public static final long HasScrollbarYPrev$offset() {
        return HasScrollbarYPrev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool HasScrollbarYPrev
     * }
     */
    public static boolean HasScrollbarYPrev(MemorySegment struct) {
        return struct.get(HasScrollbarYPrev$LAYOUT, HasScrollbarYPrev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool HasScrollbarYPrev
     * }
     */
    public static void HasScrollbarYPrev(MemorySegment struct, boolean fieldValue) {
        struct.set(HasScrollbarYPrev$LAYOUT, HasScrollbarYPrev$OFFSET, fieldValue);
    }

    private static final OfBoolean MemoryCompacted$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("MemoryCompacted"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool MemoryCompacted
     * }
     */
    public static final OfBoolean MemoryCompacted$layout() {
        return MemoryCompacted$LAYOUT;
    }

    private static final long MemoryCompacted$OFFSET = 584;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool MemoryCompacted
     * }
     */
    public static final long MemoryCompacted$offset() {
        return MemoryCompacted$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool MemoryCompacted
     * }
     */
    public static boolean MemoryCompacted(MemorySegment struct) {
        return struct.get(MemoryCompacted$LAYOUT, MemoryCompacted$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool MemoryCompacted
     * }
     */
    public static void MemoryCompacted(MemorySegment struct, boolean fieldValue) {
        struct.set(MemoryCompacted$LAYOUT, MemoryCompacted$OFFSET, fieldValue);
    }

    private static final OfBoolean HostSkipItems$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("HostSkipItems"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool HostSkipItems
     * }
     */
    public static final OfBoolean HostSkipItems$layout() {
        return HostSkipItems$LAYOUT;
    }

    private static final long HostSkipItems$OFFSET = 585;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool HostSkipItems
     * }
     */
    public static final long HostSkipItems$offset() {
        return HostSkipItems$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool HostSkipItems
     * }
     */
    public static boolean HostSkipItems(MemorySegment struct) {
        return struct.get(HostSkipItems$LAYOUT, HostSkipItems$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool HostSkipItems
     * }
     */
    public static void HostSkipItems(MemorySegment struct, boolean fieldValue) {
        struct.set(HostSkipItems$LAYOUT, HostSkipItems$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

