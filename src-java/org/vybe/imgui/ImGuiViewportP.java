// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiViewportP {
 *     ImGuiViewport _ImGuiViewport;
 *     ImGuiWindow *Window;
 *     int Idx;
 *     int LastFrameActive;
 *     int LastFocusedStampCount;
 *     ImGuiID LastNameHash;
 *     ImVec2 LastPos;
 *     float Alpha;
 *     float LastAlpha;
 *     bool LastFocusedHadNavWindow;
 *     short PlatformMonitor;
 *     int BgFgDrawListsLastFrame[2];
 *     ImDrawList *BgFgDrawLists[2];
 *     ImDrawData DrawDataP;
 *     ImDrawDataBuilder DrawDataBuilder;
 *     ImVec2 LastPlatformPos;
 *     ImVec2 LastPlatformSize;
 *     ImVec2 LastRendererSize;
 *     ImVec2 WorkOffsetMin;
 *     ImVec2 WorkOffsetMax;
 *     ImVec2 BuildWorkOffsetMin;
 *     ImVec2 BuildWorkOffsetMax;
 * }
 * }
 */
public class ImGuiViewportP {

    ImGuiViewportP() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImGuiViewport.layout().withName("_ImGuiViewport"),
        imgui.C_POINTER.withName("Window"),
        imgui.C_INT.withName("Idx"),
        imgui.C_INT.withName("LastFrameActive"),
        imgui.C_INT.withName("LastFocusedStampCount"),
        imgui.C_INT.withName("LastNameHash"),
        ImVec2.layout().withName("LastPos"),
        imgui.C_FLOAT.withName("Alpha"),
        imgui.C_FLOAT.withName("LastAlpha"),
        imgui.C_BOOL.withName("LastFocusedHadNavWindow"),
        MemoryLayout.paddingLayout(1),
        imgui.C_SHORT.withName("PlatformMonitor"),
        MemoryLayout.sequenceLayout(2, imgui.C_INT).withName("BgFgDrawListsLastFrame"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(2, imgui.C_POINTER).withName("BgFgDrawLists"),
        ImDrawData.layout().withName("DrawDataP"),
        ImDrawDataBuilder.layout().withName("DrawDataBuilder"),
        ImVec2.layout().withName("LastPlatformPos"),
        ImVec2.layout().withName("LastPlatformSize"),
        ImVec2.layout().withName("LastRendererSize"),
        ImVec2.layout().withName("WorkOffsetMin"),
        ImVec2.layout().withName("WorkOffsetMax"),
        ImVec2.layout().withName("BuildWorkOffsetMin"),
        ImVec2.layout().withName("BuildWorkOffsetMax")
    ).withName("ImGuiViewportP");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout _ImGuiViewport$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("_ImGuiViewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiViewport _ImGuiViewport
     * }
     */
    public static final GroupLayout _ImGuiViewport$layout() {
        return _ImGuiViewport$LAYOUT;
    }

    private static final long _ImGuiViewport$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiViewport _ImGuiViewport
     * }
     */
    public static final long _ImGuiViewport$offset() {
        return _ImGuiViewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiViewport _ImGuiViewport
     * }
     */
    public static MemorySegment _ImGuiViewport(MemorySegment struct) {
        return struct.asSlice(_ImGuiViewport$OFFSET, _ImGuiViewport$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiViewport _ImGuiViewport
     * }
     */
    public static void _ImGuiViewport(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, _ImGuiViewport$OFFSET, _ImGuiViewport$LAYOUT.byteSize());
    }

    private static final AddressLayout Window$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Window"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static final AddressLayout Window$layout() {
        return Window$LAYOUT;
    }

    private static final long Window$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static final long Window$offset() {
        return Window$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static MemorySegment Window(MemorySegment struct) {
        return struct.get(Window$LAYOUT, Window$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static void Window(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Window$LAYOUT, Window$OFFSET, fieldValue);
    }

    private static final OfInt Idx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Idx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int Idx
     * }
     */
    public static final OfInt Idx$layout() {
        return Idx$LAYOUT;
    }

    private static final long Idx$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int Idx
     * }
     */
    public static final long Idx$offset() {
        return Idx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int Idx
     * }
     */
    public static int Idx(MemorySegment struct) {
        return struct.get(Idx$LAYOUT, Idx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int Idx
     * }
     */
    public static void Idx(MemorySegment struct, int fieldValue) {
        struct.set(Idx$LAYOUT, Idx$OFFSET, fieldValue);
    }

    private static final OfInt LastFrameActive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFrameActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final OfInt LastFrameActive$layout() {
        return LastFrameActive$LAYOUT;
    }

    private static final long LastFrameActive$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final long LastFrameActive$offset() {
        return LastFrameActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static int LastFrameActive(MemorySegment struct) {
        return struct.get(LastFrameActive$LAYOUT, LastFrameActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static void LastFrameActive(MemorySegment struct, int fieldValue) {
        struct.set(LastFrameActive$LAYOUT, LastFrameActive$OFFSET, fieldValue);
    }

    private static final OfInt LastFocusedStampCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFocusedStampCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastFocusedStampCount
     * }
     */
    public static final OfInt LastFocusedStampCount$layout() {
        return LastFocusedStampCount$LAYOUT;
    }

    private static final long LastFocusedStampCount$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastFocusedStampCount
     * }
     */
    public static final long LastFocusedStampCount$offset() {
        return LastFocusedStampCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastFocusedStampCount
     * }
     */
    public static int LastFocusedStampCount(MemorySegment struct) {
        return struct.get(LastFocusedStampCount$LAYOUT, LastFocusedStampCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastFocusedStampCount
     * }
     */
    public static void LastFocusedStampCount(MemorySegment struct, int fieldValue) {
        struct.set(LastFocusedStampCount$LAYOUT, LastFocusedStampCount$OFFSET, fieldValue);
    }

    private static final OfInt LastNameHash$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastNameHash"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID LastNameHash
     * }
     */
    public static final OfInt LastNameHash$layout() {
        return LastNameHash$LAYOUT;
    }

    private static final long LastNameHash$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID LastNameHash
     * }
     */
    public static final long LastNameHash$offset() {
        return LastNameHash$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID LastNameHash
     * }
     */
    public static int LastNameHash(MemorySegment struct) {
        return struct.get(LastNameHash$LAYOUT, LastNameHash$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID LastNameHash
     * }
     */
    public static void LastNameHash(MemorySegment struct, int fieldValue) {
        struct.set(LastNameHash$LAYOUT, LastNameHash$OFFSET, fieldValue);
    }

    private static final GroupLayout LastPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("LastPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 LastPos
     * }
     */
    public static final GroupLayout LastPos$layout() {
        return LastPos$LAYOUT;
    }

    private static final long LastPos$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 LastPos
     * }
     */
    public static final long LastPos$offset() {
        return LastPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 LastPos
     * }
     */
    public static MemorySegment LastPos(MemorySegment struct) {
        return struct.asSlice(LastPos$OFFSET, LastPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 LastPos
     * }
     */
    public static void LastPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LastPos$OFFSET, LastPos$LAYOUT.byteSize());
    }

    private static final OfFloat Alpha$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("Alpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float Alpha
     * }
     */
    public static final OfFloat Alpha$layout() {
        return Alpha$LAYOUT;
    }

    private static final long Alpha$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float Alpha
     * }
     */
    public static final long Alpha$offset() {
        return Alpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float Alpha
     * }
     */
    public static float Alpha(MemorySegment struct) {
        return struct.get(Alpha$LAYOUT, Alpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float Alpha
     * }
     */
    public static void Alpha(MemorySegment struct, float fieldValue) {
        struct.set(Alpha$LAYOUT, Alpha$OFFSET, fieldValue);
    }

    private static final OfFloat LastAlpha$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("LastAlpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float LastAlpha
     * }
     */
    public static final OfFloat LastAlpha$layout() {
        return LastAlpha$LAYOUT;
    }

    private static final long LastAlpha$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float LastAlpha
     * }
     */
    public static final long LastAlpha$offset() {
        return LastAlpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float LastAlpha
     * }
     */
    public static float LastAlpha(MemorySegment struct) {
        return struct.get(LastAlpha$LAYOUT, LastAlpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float LastAlpha
     * }
     */
    public static void LastAlpha(MemorySegment struct, float fieldValue) {
        struct.set(LastAlpha$LAYOUT, LastAlpha$OFFSET, fieldValue);
    }

    private static final OfBoolean LastFocusedHadNavWindow$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("LastFocusedHadNavWindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool LastFocusedHadNavWindow
     * }
     */
    public static final OfBoolean LastFocusedHadNavWindow$layout() {
        return LastFocusedHadNavWindow$LAYOUT;
    }

    private static final long LastFocusedHadNavWindow$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool LastFocusedHadNavWindow
     * }
     */
    public static final long LastFocusedHadNavWindow$offset() {
        return LastFocusedHadNavWindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool LastFocusedHadNavWindow
     * }
     */
    public static boolean LastFocusedHadNavWindow(MemorySegment struct) {
        return struct.get(LastFocusedHadNavWindow$LAYOUT, LastFocusedHadNavWindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool LastFocusedHadNavWindow
     * }
     */
    public static void LastFocusedHadNavWindow(MemorySegment struct, boolean fieldValue) {
        struct.set(LastFocusedHadNavWindow$LAYOUT, LastFocusedHadNavWindow$OFFSET, fieldValue);
    }

    private static final OfShort PlatformMonitor$LAYOUT = (OfShort)$LAYOUT.select(groupElement("PlatformMonitor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * short PlatformMonitor
     * }
     */
    public static final OfShort PlatformMonitor$layout() {
        return PlatformMonitor$LAYOUT;
    }

    private static final long PlatformMonitor$OFFSET = 138;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * short PlatformMonitor
     * }
     */
    public static final long PlatformMonitor$offset() {
        return PlatformMonitor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * short PlatformMonitor
     * }
     */
    public static short PlatformMonitor(MemorySegment struct) {
        return struct.get(PlatformMonitor$LAYOUT, PlatformMonitor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * short PlatformMonitor
     * }
     */
    public static void PlatformMonitor(MemorySegment struct, short fieldValue) {
        struct.set(PlatformMonitor$LAYOUT, PlatformMonitor$OFFSET, fieldValue);
    }

    private static final SequenceLayout BgFgDrawListsLastFrame$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("BgFgDrawListsLastFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int BgFgDrawListsLastFrame[2]
     * }
     */
    public static final SequenceLayout BgFgDrawListsLastFrame$layout() {
        return BgFgDrawListsLastFrame$LAYOUT;
    }

    private static final long BgFgDrawListsLastFrame$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int BgFgDrawListsLastFrame[2]
     * }
     */
    public static final long BgFgDrawListsLastFrame$offset() {
        return BgFgDrawListsLastFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int BgFgDrawListsLastFrame[2]
     * }
     */
    public static MemorySegment BgFgDrawListsLastFrame(MemorySegment struct) {
        return struct.asSlice(BgFgDrawListsLastFrame$OFFSET, BgFgDrawListsLastFrame$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int BgFgDrawListsLastFrame[2]
     * }
     */
    public static void BgFgDrawListsLastFrame(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BgFgDrawListsLastFrame$OFFSET, BgFgDrawListsLastFrame$LAYOUT.byteSize());
    }

    private static long[] BgFgDrawListsLastFrame$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int BgFgDrawListsLastFrame[2]
     * }
     */
    public static long[] BgFgDrawListsLastFrame$dimensions() {
        return BgFgDrawListsLastFrame$DIMS;
    }
    private static final VarHandle BgFgDrawListsLastFrame$ELEM_HANDLE = BgFgDrawListsLastFrame$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int BgFgDrawListsLastFrame[2]
     * }
     */
    public static int BgFgDrawListsLastFrame(MemorySegment struct, long index0) {
        return (int)BgFgDrawListsLastFrame$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int BgFgDrawListsLastFrame[2]
     * }
     */
    public static void BgFgDrawListsLastFrame(MemorySegment struct, long index0, int fieldValue) {
        BgFgDrawListsLastFrame$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout BgFgDrawLists$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("BgFgDrawLists"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawList *BgFgDrawLists[2]
     * }
     */
    public static final SequenceLayout BgFgDrawLists$layout() {
        return BgFgDrawLists$LAYOUT;
    }

    private static final long BgFgDrawLists$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawList *BgFgDrawLists[2]
     * }
     */
    public static final long BgFgDrawLists$offset() {
        return BgFgDrawLists$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawList *BgFgDrawLists[2]
     * }
     */
    public static MemorySegment BgFgDrawLists(MemorySegment struct) {
        return struct.asSlice(BgFgDrawLists$OFFSET, BgFgDrawLists$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawList *BgFgDrawLists[2]
     * }
     */
    public static void BgFgDrawLists(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BgFgDrawLists$OFFSET, BgFgDrawLists$LAYOUT.byteSize());
    }

    private static long[] BgFgDrawLists$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * ImDrawList *BgFgDrawLists[2]
     * }
     */
    public static long[] BgFgDrawLists$dimensions() {
        return BgFgDrawLists$DIMS;
    }
    private static final VarHandle BgFgDrawLists$ELEM_HANDLE = BgFgDrawLists$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * ImDrawList *BgFgDrawLists[2]
     * }
     */
    public static MemorySegment BgFgDrawLists(MemorySegment struct, long index0) {
        return (MemorySegment)BgFgDrawLists$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * ImDrawList *BgFgDrawLists[2]
     * }
     */
    public static void BgFgDrawLists(MemorySegment struct, long index0, MemorySegment fieldValue) {
        BgFgDrawLists$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout DrawDataP$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DrawDataP"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawData DrawDataP
     * }
     */
    public static final GroupLayout DrawDataP$layout() {
        return DrawDataP$LAYOUT;
    }

    private static final long DrawDataP$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawData DrawDataP
     * }
     */
    public static final long DrawDataP$offset() {
        return DrawDataP$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawData DrawDataP
     * }
     */
    public static MemorySegment DrawDataP(MemorySegment struct) {
        return struct.asSlice(DrawDataP$OFFSET, DrawDataP$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawData DrawDataP
     * }
     */
    public static void DrawDataP(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DrawDataP$OFFSET, DrawDataP$LAYOUT.byteSize());
    }

    private static final GroupLayout DrawDataBuilder$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("DrawDataBuilder"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImDrawDataBuilder DrawDataBuilder
     * }
     */
    public static final GroupLayout DrawDataBuilder$layout() {
        return DrawDataBuilder$LAYOUT;
    }

    private static final long DrawDataBuilder$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImDrawDataBuilder DrawDataBuilder
     * }
     */
    public static final long DrawDataBuilder$offset() {
        return DrawDataBuilder$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImDrawDataBuilder DrawDataBuilder
     * }
     */
    public static MemorySegment DrawDataBuilder(MemorySegment struct) {
        return struct.asSlice(DrawDataBuilder$OFFSET, DrawDataBuilder$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImDrawDataBuilder DrawDataBuilder
     * }
     */
    public static void DrawDataBuilder(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, DrawDataBuilder$OFFSET, DrawDataBuilder$LAYOUT.byteSize());
    }

    private static final GroupLayout LastPlatformPos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("LastPlatformPos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 LastPlatformPos
     * }
     */
    public static final GroupLayout LastPlatformPos$layout() {
        return LastPlatformPos$LAYOUT;
    }

    private static final long LastPlatformPos$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 LastPlatformPos
     * }
     */
    public static final long LastPlatformPos$offset() {
        return LastPlatformPos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 LastPlatformPos
     * }
     */
    public static MemorySegment LastPlatformPos(MemorySegment struct) {
        return struct.asSlice(LastPlatformPos$OFFSET, LastPlatformPos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 LastPlatformPos
     * }
     */
    public static void LastPlatformPos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LastPlatformPos$OFFSET, LastPlatformPos$LAYOUT.byteSize());
    }

    private static final GroupLayout LastPlatformSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("LastPlatformSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 LastPlatformSize
     * }
     */
    public static final GroupLayout LastPlatformSize$layout() {
        return LastPlatformSize$LAYOUT;
    }

    private static final long LastPlatformSize$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 LastPlatformSize
     * }
     */
    public static final long LastPlatformSize$offset() {
        return LastPlatformSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 LastPlatformSize
     * }
     */
    public static MemorySegment LastPlatformSize(MemorySegment struct) {
        return struct.asSlice(LastPlatformSize$OFFSET, LastPlatformSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 LastPlatformSize
     * }
     */
    public static void LastPlatformSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LastPlatformSize$OFFSET, LastPlatformSize$LAYOUT.byteSize());
    }

    private static final GroupLayout LastRendererSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("LastRendererSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 LastRendererSize
     * }
     */
    public static final GroupLayout LastRendererSize$layout() {
        return LastRendererSize$LAYOUT;
    }

    private static final long LastRendererSize$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 LastRendererSize
     * }
     */
    public static final long LastRendererSize$offset() {
        return LastRendererSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 LastRendererSize
     * }
     */
    public static MemorySegment LastRendererSize(MemorySegment struct) {
        return struct.asSlice(LastRendererSize$OFFSET, LastRendererSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 LastRendererSize
     * }
     */
    public static void LastRendererSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LastRendererSize$OFFSET, LastRendererSize$LAYOUT.byteSize());
    }

    private static final GroupLayout WorkOffsetMin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WorkOffsetMin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WorkOffsetMin
     * }
     */
    public static final GroupLayout WorkOffsetMin$layout() {
        return WorkOffsetMin$LAYOUT;
    }

    private static final long WorkOffsetMin$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WorkOffsetMin
     * }
     */
    public static final long WorkOffsetMin$offset() {
        return WorkOffsetMin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WorkOffsetMin
     * }
     */
    public static MemorySegment WorkOffsetMin(MemorySegment struct) {
        return struct.asSlice(WorkOffsetMin$OFFSET, WorkOffsetMin$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WorkOffsetMin
     * }
     */
    public static void WorkOffsetMin(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WorkOffsetMin$OFFSET, WorkOffsetMin$LAYOUT.byteSize());
    }

    private static final GroupLayout WorkOffsetMax$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("WorkOffsetMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 WorkOffsetMax
     * }
     */
    public static final GroupLayout WorkOffsetMax$layout() {
        return WorkOffsetMax$LAYOUT;
    }

    private static final long WorkOffsetMax$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 WorkOffsetMax
     * }
     */
    public static final long WorkOffsetMax$offset() {
        return WorkOffsetMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 WorkOffsetMax
     * }
     */
    public static MemorySegment WorkOffsetMax(MemorySegment struct) {
        return struct.asSlice(WorkOffsetMax$OFFSET, WorkOffsetMax$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 WorkOffsetMax
     * }
     */
    public static void WorkOffsetMax(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, WorkOffsetMax$OFFSET, WorkOffsetMax$LAYOUT.byteSize());
    }

    private static final GroupLayout BuildWorkOffsetMin$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BuildWorkOffsetMin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 BuildWorkOffsetMin
     * }
     */
    public static final GroupLayout BuildWorkOffsetMin$layout() {
        return BuildWorkOffsetMin$LAYOUT;
    }

    private static final long BuildWorkOffsetMin$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 BuildWorkOffsetMin
     * }
     */
    public static final long BuildWorkOffsetMin$offset() {
        return BuildWorkOffsetMin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 BuildWorkOffsetMin
     * }
     */
    public static MemorySegment BuildWorkOffsetMin(MemorySegment struct) {
        return struct.asSlice(BuildWorkOffsetMin$OFFSET, BuildWorkOffsetMin$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 BuildWorkOffsetMin
     * }
     */
    public static void BuildWorkOffsetMin(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BuildWorkOffsetMin$OFFSET, BuildWorkOffsetMin$LAYOUT.byteSize());
    }

    private static final GroupLayout BuildWorkOffsetMax$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("BuildWorkOffsetMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVec2 BuildWorkOffsetMax
     * }
     */
    public static final GroupLayout BuildWorkOffsetMax$layout() {
        return BuildWorkOffsetMax$LAYOUT;
    }

    private static final long BuildWorkOffsetMax$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVec2 BuildWorkOffsetMax
     * }
     */
    public static final long BuildWorkOffsetMax$offset() {
        return BuildWorkOffsetMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVec2 BuildWorkOffsetMax
     * }
     */
    public static MemorySegment BuildWorkOffsetMax(MemorySegment struct) {
        return struct.asSlice(BuildWorkOffsetMax$OFFSET, BuildWorkOffsetMax$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVec2 BuildWorkOffsetMax
     * }
     */
    public static void BuildWorkOffsetMax(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BuildWorkOffsetMax$OFFSET, BuildWorkOffsetMax$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

