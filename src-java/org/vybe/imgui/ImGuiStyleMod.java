// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiStyleMod {
 *     ImGuiStyleVar VarIdx;
 *     union {
 *         int BackupInt[2];
 *         float BackupFloat[2];
 *     };
 * }
 * }
 */
public class ImGuiStyleMod {

    ImGuiStyleMod() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("VarIdx"),
        MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(2, imgui.C_INT).withName("BackupInt"),
            MemoryLayout.sequenceLayout(2, imgui.C_FLOAT).withName("BackupFloat")
        ).withName("$anon$1883:5")
    ).withName("ImGuiStyleMod");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt VarIdx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("VarIdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiStyleVar VarIdx
     * }
     */
    public static final OfInt VarIdx$layout() {
        return VarIdx$LAYOUT;
    }

    private static final long VarIdx$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiStyleVar VarIdx
     * }
     */
    public static final long VarIdx$offset() {
        return VarIdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiStyleVar VarIdx
     * }
     */
    public static int VarIdx(MemorySegment struct) {
        return struct.get(VarIdx$LAYOUT, VarIdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiStyleVar VarIdx
     * }
     */
    public static void VarIdx(MemorySegment struct, int fieldValue) {
        struct.set(VarIdx$LAYOUT, VarIdx$OFFSET, fieldValue);
    }

    private static final SequenceLayout BackupInt$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$1883:5"), groupElement("BackupInt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int BackupInt[2]
     * }
     */
    public static final SequenceLayout BackupInt$layout() {
        return BackupInt$LAYOUT;
    }

    private static final long BackupInt$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int BackupInt[2]
     * }
     */
    public static final long BackupInt$offset() {
        return BackupInt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int BackupInt[2]
     * }
     */
    public static MemorySegment BackupInt(MemorySegment struct) {
        return struct.asSlice(BackupInt$OFFSET, BackupInt$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int BackupInt[2]
     * }
     */
    public static void BackupInt(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupInt$OFFSET, BackupInt$LAYOUT.byteSize());
    }

    private static long[] BackupInt$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int BackupInt[2]
     * }
     */
    public static long[] BackupInt$dimensions() {
        return BackupInt$DIMS;
    }
    private static final VarHandle BackupInt$ELEM_HANDLE = BackupInt$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int BackupInt[2]
     * }
     */
    public static int BackupInt(MemorySegment struct, long index0) {
        return (int)BackupInt$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int BackupInt[2]
     * }
     */
    public static void BackupInt(MemorySegment struct, long index0, int fieldValue) {
        BackupInt$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout BackupFloat$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$1883:5"), groupElement("BackupFloat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float BackupFloat[2]
     * }
     */
    public static final SequenceLayout BackupFloat$layout() {
        return BackupFloat$LAYOUT;
    }

    private static final long BackupFloat$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float BackupFloat[2]
     * }
     */
    public static final long BackupFloat$offset() {
        return BackupFloat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float BackupFloat[2]
     * }
     */
    public static MemorySegment BackupFloat(MemorySegment struct) {
        return struct.asSlice(BackupFloat$OFFSET, BackupFloat$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float BackupFloat[2]
     * }
     */
    public static void BackupFloat(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, BackupFloat$OFFSET, BackupFloat$LAYOUT.byteSize());
    }

    private static long[] BackupFloat$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float BackupFloat[2]
     * }
     */
    public static long[] BackupFloat$dimensions() {
        return BackupFloat$DIMS;
    }
    private static final VarHandle BackupFloat$ELEM_HANDLE = BackupFloat$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float BackupFloat[2]
     * }
     */
    public static float BackupFloat(MemorySegment struct, long index0) {
        return (float)BackupFloat$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float BackupFloat[2]
     * }
     */
    public static void BackupFloat(MemorySegment struct, long index0, float fieldValue) {
        BackupFloat$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

