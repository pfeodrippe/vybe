// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiSelectionRequest {
 *     ImGuiSelectionRequestType Type;
 *     bool Selected;
 *     ImS8 RangeDirection;
 *     ImGuiSelectionUserData RangeFirstItem;
 *     ImGuiSelectionUserData RangeLastItem;
 * }
 * }
 */
public class ImGuiSelectionRequest {

    ImGuiSelectionRequest() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("Type"),
        imgui.C_BOOL.withName("Selected"),
        imgui.C_CHAR.withName("RangeDirection"),
        MemoryLayout.paddingLayout(2),
        imgui.C_LONG_LONG.withName("RangeFirstItem"),
        imgui.C_LONG_LONG.withName("RangeLastItem")
    ).withName("ImGuiSelectionRequest");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiSelectionRequestType Type
     * }
     */
    public static final OfInt Type$layout() {
        return Type$LAYOUT;
    }

    private static final long Type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiSelectionRequestType Type
     * }
     */
    public static final long Type$offset() {
        return Type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiSelectionRequestType Type
     * }
     */
    public static int Type(MemorySegment struct) {
        return struct.get(Type$LAYOUT, Type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiSelectionRequestType Type
     * }
     */
    public static void Type(MemorySegment struct, int fieldValue) {
        struct.set(Type$LAYOUT, Type$OFFSET, fieldValue);
    }

    private static final OfBoolean Selected$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("Selected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool Selected
     * }
     */
    public static final OfBoolean Selected$layout() {
        return Selected$LAYOUT;
    }

    private static final long Selected$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool Selected
     * }
     */
    public static final long Selected$offset() {
        return Selected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool Selected
     * }
     */
    public static boolean Selected(MemorySegment struct) {
        return struct.get(Selected$LAYOUT, Selected$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool Selected
     * }
     */
    public static void Selected(MemorySegment struct, boolean fieldValue) {
        struct.set(Selected$LAYOUT, Selected$OFFSET, fieldValue);
    }

    private static final OfByte RangeDirection$LAYOUT = (OfByte)$LAYOUT.select(groupElement("RangeDirection"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 RangeDirection
     * }
     */
    public static final OfByte RangeDirection$layout() {
        return RangeDirection$LAYOUT;
    }

    private static final long RangeDirection$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 RangeDirection
     * }
     */
    public static final long RangeDirection$offset() {
        return RangeDirection$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 RangeDirection
     * }
     */
    public static byte RangeDirection(MemorySegment struct) {
        return struct.get(RangeDirection$LAYOUT, RangeDirection$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 RangeDirection
     * }
     */
    public static void RangeDirection(MemorySegment struct, byte fieldValue) {
        struct.set(RangeDirection$LAYOUT, RangeDirection$OFFSET, fieldValue);
    }

    private static final OfLong RangeFirstItem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("RangeFirstItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeFirstItem
     * }
     */
    public static final OfLong RangeFirstItem$layout() {
        return RangeFirstItem$LAYOUT;
    }

    private static final long RangeFirstItem$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeFirstItem
     * }
     */
    public static final long RangeFirstItem$offset() {
        return RangeFirstItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeFirstItem
     * }
     */
    public static long RangeFirstItem(MemorySegment struct) {
        return struct.get(RangeFirstItem$LAYOUT, RangeFirstItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeFirstItem
     * }
     */
    public static void RangeFirstItem(MemorySegment struct, long fieldValue) {
        struct.set(RangeFirstItem$LAYOUT, RangeFirstItem$OFFSET, fieldValue);
    }

    private static final OfLong RangeLastItem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("RangeLastItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeLastItem
     * }
     */
    public static final OfLong RangeLastItem$layout() {
        return RangeLastItem$LAYOUT;
    }

    private static final long RangeLastItem$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeLastItem
     * }
     */
    public static final long RangeLastItem$offset() {
        return RangeLastItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeLastItem
     * }
     */
    public static long RangeLastItem(MemorySegment struct) {
        return struct.get(RangeLastItem$LAYOUT, RangeLastItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeLastItem
     * }
     */
    public static void RangeLastItem(MemorySegment struct, long fieldValue) {
        struct.set(RangeLastItem$LAYOUT, RangeLastItem$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

