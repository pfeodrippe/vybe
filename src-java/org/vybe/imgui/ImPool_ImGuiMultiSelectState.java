// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImPool_ImGuiMultiSelectState {
 *     ImVector_ImGuiMultiSelectState Buf;
 *     ImGuiStorage Map;
 *     ImPoolIdx FreeIdx;
 *     ImPoolIdx AliveCount;
 * }
 * }
 */
public class ImPool_ImGuiMultiSelectState {

    ImPool_ImGuiMultiSelectState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ImVector_ImGuiMultiSelectState.layout().withName("Buf"),
        ImGuiStorage.layout().withName("Map"),
        imgui.C_INT.withName("FreeIdx"),
        imgui.C_INT.withName("AliveCount")
    ).withName("ImPool_ImGuiMultiSelectState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout Buf$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Buf"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiMultiSelectState Buf
     * }
     */
    public static final GroupLayout Buf$layout() {
        return Buf$LAYOUT;
    }

    private static final long Buf$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiMultiSelectState Buf
     * }
     */
    public static final long Buf$offset() {
        return Buf$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiMultiSelectState Buf
     * }
     */
    public static MemorySegment Buf(MemorySegment struct) {
        return struct.asSlice(Buf$OFFSET, Buf$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiMultiSelectState Buf
     * }
     */
    public static void Buf(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Buf$OFFSET, Buf$LAYOUT.byteSize());
    }

    private static final GroupLayout Map$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Map"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiStorage Map
     * }
     */
    public static final GroupLayout Map$layout() {
        return Map$LAYOUT;
    }

    private static final long Map$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiStorage Map
     * }
     */
    public static final long Map$offset() {
        return Map$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiStorage Map
     * }
     */
    public static MemorySegment Map(MemorySegment struct) {
        return struct.asSlice(Map$OFFSET, Map$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiStorage Map
     * }
     */
    public static void Map(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Map$OFFSET, Map$LAYOUT.byteSize());
    }

    private static final OfInt FreeIdx$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FreeIdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImPoolIdx FreeIdx
     * }
     */
    public static final OfInt FreeIdx$layout() {
        return FreeIdx$LAYOUT;
    }

    private static final long FreeIdx$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImPoolIdx FreeIdx
     * }
     */
    public static final long FreeIdx$offset() {
        return FreeIdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImPoolIdx FreeIdx
     * }
     */
    public static int FreeIdx(MemorySegment struct) {
        return struct.get(FreeIdx$LAYOUT, FreeIdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImPoolIdx FreeIdx
     * }
     */
    public static void FreeIdx(MemorySegment struct, int fieldValue) {
        struct.set(FreeIdx$LAYOUT, FreeIdx$OFFSET, fieldValue);
    }

    private static final OfInt AliveCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AliveCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImPoolIdx AliveCount
     * }
     */
    public static final OfInt AliveCount$layout() {
        return AliveCount$LAYOUT;
    }

    private static final long AliveCount$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImPoolIdx AliveCount
     * }
     */
    public static final long AliveCount$offset() {
        return AliveCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImPoolIdx AliveCount
     * }
     */
    public static int AliveCount(MemorySegment struct) {
        return struct.get(AliveCount$LAYOUT, AliveCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImPoolIdx AliveCount
     * }
     */
    public static void AliveCount(MemorySegment struct, int fieldValue) {
        struct.set(AliveCount$LAYOUT, AliveCount$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

