// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiDataTypeInfo {
 *     size_t Size;
 *     const char *Name;
 *     const char *PrintFmt;
 *     const char *ScanFmt;
 * }
 * }
 */
public class ImGuiDataTypeInfo {

    ImGuiDataTypeInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_LONG.withName("Size"),
        imgui.C_POINTER.withName("Name"),
        imgui.C_POINTER.withName("PrintFmt"),
        imgui.C_POINTER.withName("ScanFmt")
    ).withName("ImGuiDataTypeInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong Size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("Size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t Size
     * }
     */
    public static final OfLong Size$layout() {
        return Size$LAYOUT;
    }

    private static final long Size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t Size
     * }
     */
    public static final long Size$offset() {
        return Size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t Size
     * }
     */
    public static long Size(MemorySegment struct) {
        return struct.get(Size$LAYOUT, Size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t Size
     * }
     */
    public static void Size(MemorySegment struct, long fieldValue) {
        struct.set(Size$LAYOUT, Size$OFFSET, fieldValue);
    }

    private static final AddressLayout Name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *Name
     * }
     */
    public static final AddressLayout Name$layout() {
        return Name$LAYOUT;
    }

    private static final long Name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *Name
     * }
     */
    public static final long Name$offset() {
        return Name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *Name
     * }
     */
    public static MemorySegment Name(MemorySegment struct) {
        return struct.get(Name$LAYOUT, Name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *Name
     * }
     */
    public static void Name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Name$LAYOUT, Name$OFFSET, fieldValue);
    }

    private static final AddressLayout PrintFmt$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("PrintFmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *PrintFmt
     * }
     */
    public static final AddressLayout PrintFmt$layout() {
        return PrintFmt$LAYOUT;
    }

    private static final long PrintFmt$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *PrintFmt
     * }
     */
    public static final long PrintFmt$offset() {
        return PrintFmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *PrintFmt
     * }
     */
    public static MemorySegment PrintFmt(MemorySegment struct) {
        return struct.get(PrintFmt$LAYOUT, PrintFmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *PrintFmt
     * }
     */
    public static void PrintFmt(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(PrintFmt$LAYOUT, PrintFmt$OFFSET, fieldValue);
    }

    private static final AddressLayout ScanFmt$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ScanFmt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *ScanFmt
     * }
     */
    public static final AddressLayout ScanFmt$layout() {
        return ScanFmt$LAYOUT;
    }

    private static final long ScanFmt$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *ScanFmt
     * }
     */
    public static final long ScanFmt$offset() {
        return ScanFmt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *ScanFmt
     * }
     */
    public static MemorySegment ScanFmt(MemorySegment struct) {
        return struct.get(ScanFmt$LAYOUT, ScanFmt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *ScanFmt
     * }
     */
    public static void ScanFmt(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ScanFmt$LAYOUT, ScanFmt$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

