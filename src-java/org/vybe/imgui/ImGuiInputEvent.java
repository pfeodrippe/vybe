// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiInputEvent {
 *     ImGuiInputEventType Type;
 *     ImGuiInputSource Source;
 *     ImU32 EventId;
 *     union {
 *         ImGuiInputEventMousePos MousePos;
 *         ImGuiInputEventMouseWheel MouseWheel;
 *         ImGuiInputEventMouseButton MouseButton;
 *         ImGuiInputEventMouseViewport MouseViewport;
 *         ImGuiInputEventKey Key;
 *         ImGuiInputEventText Text;
 *         ImGuiInputEventAppFocused AppFocused;
 *     };
 *     bool AddedByTestEngine;
 * }
 * }
 */
public class ImGuiInputEvent {

    ImGuiInputEvent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("Type"),
        imgui.C_INT.withName("Source"),
        imgui.C_INT.withName("EventId"),
        MemoryLayout.unionLayout(
            ImGuiInputEventMousePos.layout().withName("MousePos"),
            ImGuiInputEventMouseWheel.layout().withName("MouseWheel"),
            ImGuiInputEventMouseButton.layout().withName("MouseButton"),
            ImGuiInputEventMouseViewport.layout().withName("MouseViewport"),
            ImGuiInputEventKey.layout().withName("Key"),
            ImGuiInputEventText.layout().withName("Text"),
            ImGuiInputEventAppFocused.layout().withName("AppFocused")
        ).withName("$anon$2140:5"),
        imgui.C_BOOL.withName("AddedByTestEngine"),
        MemoryLayout.paddingLayout(3)
    ).withName("ImGuiInputEvent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt Type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputEventType Type
     * }
     */
    public static final OfInt Type$layout() {
        return Type$LAYOUT;
    }

    private static final long Type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputEventType Type
     * }
     */
    public static final long Type$offset() {
        return Type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputEventType Type
     * }
     */
    public static int Type(MemorySegment struct) {
        return struct.get(Type$LAYOUT, Type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputEventType Type
     * }
     */
    public static void Type(MemorySegment struct, int fieldValue) {
        struct.set(Type$LAYOUT, Type$OFFSET, fieldValue);
    }

    private static final OfInt Source$LAYOUT = (OfInt)$LAYOUT.select(groupElement("Source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputSource Source
     * }
     */
    public static final OfInt Source$layout() {
        return Source$LAYOUT;
    }

    private static final long Source$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputSource Source
     * }
     */
    public static final long Source$offset() {
        return Source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputSource Source
     * }
     */
    public static int Source(MemorySegment struct) {
        return struct.get(Source$LAYOUT, Source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputSource Source
     * }
     */
    public static void Source(MemorySegment struct, int fieldValue) {
        struct.set(Source$LAYOUT, Source$OFFSET, fieldValue);
    }

    private static final OfInt EventId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("EventId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImU32 EventId
     * }
     */
    public static final OfInt EventId$layout() {
        return EventId$LAYOUT;
    }

    private static final long EventId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImU32 EventId
     * }
     */
    public static final long EventId$offset() {
        return EventId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImU32 EventId
     * }
     */
    public static int EventId(MemorySegment struct) {
        return struct.get(EventId$LAYOUT, EventId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImU32 EventId
     * }
     */
    public static void EventId(MemorySegment struct, int fieldValue) {
        struct.set(EventId$LAYOUT, EventId$OFFSET, fieldValue);
    }

    private static final GroupLayout MousePos$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2140:5"), groupElement("MousePos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputEventMousePos MousePos
     * }
     */
    public static final GroupLayout MousePos$layout() {
        return MousePos$LAYOUT;
    }

    private static final long MousePos$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputEventMousePos MousePos
     * }
     */
    public static final long MousePos$offset() {
        return MousePos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputEventMousePos MousePos
     * }
     */
    public static MemorySegment MousePos(MemorySegment struct) {
        return struct.asSlice(MousePos$OFFSET, MousePos$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputEventMousePos MousePos
     * }
     */
    public static void MousePos(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MousePos$OFFSET, MousePos$LAYOUT.byteSize());
    }

    private static final GroupLayout MouseWheel$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2140:5"), groupElement("MouseWheel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseWheel MouseWheel
     * }
     */
    public static final GroupLayout MouseWheel$layout() {
        return MouseWheel$LAYOUT;
    }

    private static final long MouseWheel$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseWheel MouseWheel
     * }
     */
    public static final long MouseWheel$offset() {
        return MouseWheel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseWheel MouseWheel
     * }
     */
    public static MemorySegment MouseWheel(MemorySegment struct) {
        return struct.asSlice(MouseWheel$OFFSET, MouseWheel$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseWheel MouseWheel
     * }
     */
    public static void MouseWheel(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseWheel$OFFSET, MouseWheel$LAYOUT.byteSize());
    }

    private static final GroupLayout MouseButton$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2140:5"), groupElement("MouseButton"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseButton MouseButton
     * }
     */
    public static final GroupLayout MouseButton$layout() {
        return MouseButton$LAYOUT;
    }

    private static final long MouseButton$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseButton MouseButton
     * }
     */
    public static final long MouseButton$offset() {
        return MouseButton$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseButton MouseButton
     * }
     */
    public static MemorySegment MouseButton(MemorySegment struct) {
        return struct.asSlice(MouseButton$OFFSET, MouseButton$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseButton MouseButton
     * }
     */
    public static void MouseButton(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseButton$OFFSET, MouseButton$LAYOUT.byteSize());
    }

    private static final GroupLayout MouseViewport$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2140:5"), groupElement("MouseViewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseViewport MouseViewport
     * }
     */
    public static final GroupLayout MouseViewport$layout() {
        return MouseViewport$LAYOUT;
    }

    private static final long MouseViewport$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseViewport MouseViewport
     * }
     */
    public static final long MouseViewport$offset() {
        return MouseViewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseViewport MouseViewport
     * }
     */
    public static MemorySegment MouseViewport(MemorySegment struct) {
        return struct.asSlice(MouseViewport$OFFSET, MouseViewport$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputEventMouseViewport MouseViewport
     * }
     */
    public static void MouseViewport(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, MouseViewport$OFFSET, MouseViewport$LAYOUT.byteSize());
    }

    private static final GroupLayout Key$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2140:5"), groupElement("Key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputEventKey Key
     * }
     */
    public static final GroupLayout Key$layout() {
        return Key$LAYOUT;
    }

    private static final long Key$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputEventKey Key
     * }
     */
    public static final long Key$offset() {
        return Key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputEventKey Key
     * }
     */
    public static MemorySegment Key(MemorySegment struct) {
        return struct.asSlice(Key$OFFSET, Key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputEventKey Key
     * }
     */
    public static void Key(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Key$OFFSET, Key$LAYOUT.byteSize());
    }

    private static final GroupLayout Text$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2140:5"), groupElement("Text"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputEventText Text
     * }
     */
    public static final GroupLayout Text$layout() {
        return Text$LAYOUT;
    }

    private static final long Text$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputEventText Text
     * }
     */
    public static final long Text$offset() {
        return Text$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputEventText Text
     * }
     */
    public static MemorySegment Text(MemorySegment struct) {
        return struct.asSlice(Text$OFFSET, Text$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputEventText Text
     * }
     */
    public static void Text(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Text$OFFSET, Text$LAYOUT.byteSize());
    }

    private static final GroupLayout AppFocused$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("$anon$2140:5"), groupElement("AppFocused"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiInputEventAppFocused AppFocused
     * }
     */
    public static final GroupLayout AppFocused$layout() {
        return AppFocused$LAYOUT;
    }

    private static final long AppFocused$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiInputEventAppFocused AppFocused
     * }
     */
    public static final long AppFocused$offset() {
        return AppFocused$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiInputEventAppFocused AppFocused
     * }
     */
    public static MemorySegment AppFocused(MemorySegment struct) {
        return struct.asSlice(AppFocused$OFFSET, AppFocused$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiInputEventAppFocused AppFocused
     * }
     */
    public static void AppFocused(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, AppFocused$OFFSET, AppFocused$LAYOUT.byteSize());
    }

    private static final OfBoolean AddedByTestEngine$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("AddedByTestEngine"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool AddedByTestEngine
     * }
     */
    public static final OfBoolean AddedByTestEngine$layout() {
        return AddedByTestEngine$LAYOUT;
    }

    private static final long AddedByTestEngine$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool AddedByTestEngine
     * }
     */
    public static final long AddedByTestEngine$offset() {
        return AddedByTestEngine$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool AddedByTestEngine
     * }
     */
    public static boolean AddedByTestEngine(MemorySegment struct) {
        return struct.get(AddedByTestEngine$LAYOUT, AddedByTestEngine$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool AddedByTestEngine
     * }
     */
    public static void AddedByTestEngine(MemorySegment struct, boolean fieldValue) {
        struct.set(AddedByTestEngine$LAYOUT, AddedByTestEngine$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

