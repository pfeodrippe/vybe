// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiMultiSelectState {
 *     ImGuiWindow *Window;
 *     ImGuiID ID;
 *     int LastFrameActive;
 *     int LastSelectionSize;
 *     ImS8 RangeSelected;
 *     ImS8 NavIdSelected;
 *     ImGuiSelectionUserData RangeSrcItem;
 *     ImGuiSelectionUserData NavIdItem;
 * }
 * }
 */
public class ImGuiMultiSelectState {

    ImGuiMultiSelectState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_POINTER.withName("Window"),
        imgui.C_INT.withName("ID"),
        imgui.C_INT.withName("LastFrameActive"),
        imgui.C_INT.withName("LastSelectionSize"),
        imgui.C_CHAR.withName("RangeSelected"),
        imgui.C_CHAR.withName("NavIdSelected"),
        MemoryLayout.paddingLayout(2),
        imgui.C_LONG_LONG.withName("RangeSrcItem"),
        imgui.C_LONG_LONG.withName("NavIdItem")
    ).withName("ImGuiMultiSelectState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout Window$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("Window"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static final AddressLayout Window$layout() {
        return Window$LAYOUT;
    }

    private static final long Window$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static final long Window$offset() {
        return Window$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static MemorySegment Window(MemorySegment struct) {
        return struct.get(Window$LAYOUT, Window$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiWindow *Window
     * }
     */
    public static void Window(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(Window$LAYOUT, Window$OFFSET, fieldValue);
    }

    private static final OfInt ID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final OfInt ID$layout() {
        return ID$LAYOUT;
    }

    private static final long ID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static final long ID$offset() {
        return ID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static int ID(MemorySegment struct) {
        return struct.get(ID$LAYOUT, ID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID ID
     * }
     */
    public static void ID(MemorySegment struct, int fieldValue) {
        struct.set(ID$LAYOUT, ID$OFFSET, fieldValue);
    }

    private static final OfInt LastFrameActive$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastFrameActive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final OfInt LastFrameActive$layout() {
        return LastFrameActive$LAYOUT;
    }

    private static final long LastFrameActive$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static final long LastFrameActive$offset() {
        return LastFrameActive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static int LastFrameActive(MemorySegment struct) {
        return struct.get(LastFrameActive$LAYOUT, LastFrameActive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastFrameActive
     * }
     */
    public static void LastFrameActive(MemorySegment struct, int fieldValue) {
        struct.set(LastFrameActive$LAYOUT, LastFrameActive$OFFSET, fieldValue);
    }

    private static final OfInt LastSelectionSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastSelectionSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastSelectionSize
     * }
     */
    public static final OfInt LastSelectionSize$layout() {
        return LastSelectionSize$LAYOUT;
    }

    private static final long LastSelectionSize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastSelectionSize
     * }
     */
    public static final long LastSelectionSize$offset() {
        return LastSelectionSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastSelectionSize
     * }
     */
    public static int LastSelectionSize(MemorySegment struct) {
        return struct.get(LastSelectionSize$LAYOUT, LastSelectionSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastSelectionSize
     * }
     */
    public static void LastSelectionSize(MemorySegment struct, int fieldValue) {
        struct.set(LastSelectionSize$LAYOUT, LastSelectionSize$OFFSET, fieldValue);
    }

    private static final OfByte RangeSelected$LAYOUT = (OfByte)$LAYOUT.select(groupElement("RangeSelected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 RangeSelected
     * }
     */
    public static final OfByte RangeSelected$layout() {
        return RangeSelected$LAYOUT;
    }

    private static final long RangeSelected$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 RangeSelected
     * }
     */
    public static final long RangeSelected$offset() {
        return RangeSelected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 RangeSelected
     * }
     */
    public static byte RangeSelected(MemorySegment struct) {
        return struct.get(RangeSelected$LAYOUT, RangeSelected$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 RangeSelected
     * }
     */
    public static void RangeSelected(MemorySegment struct, byte fieldValue) {
        struct.set(RangeSelected$LAYOUT, RangeSelected$OFFSET, fieldValue);
    }

    private static final OfByte NavIdSelected$LAYOUT = (OfByte)$LAYOUT.select(groupElement("NavIdSelected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImS8 NavIdSelected
     * }
     */
    public static final OfByte NavIdSelected$layout() {
        return NavIdSelected$LAYOUT;
    }

    private static final long NavIdSelected$OFFSET = 21;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImS8 NavIdSelected
     * }
     */
    public static final long NavIdSelected$offset() {
        return NavIdSelected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImS8 NavIdSelected
     * }
     */
    public static byte NavIdSelected(MemorySegment struct) {
        return struct.get(NavIdSelected$LAYOUT, NavIdSelected$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImS8 NavIdSelected
     * }
     */
    public static void NavIdSelected(MemorySegment struct, byte fieldValue) {
        struct.set(NavIdSelected$LAYOUT, NavIdSelected$OFFSET, fieldValue);
    }

    private static final OfLong RangeSrcItem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("RangeSrcItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeSrcItem
     * }
     */
    public static final OfLong RangeSrcItem$layout() {
        return RangeSrcItem$LAYOUT;
    }

    private static final long RangeSrcItem$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeSrcItem
     * }
     */
    public static final long RangeSrcItem$offset() {
        return RangeSrcItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeSrcItem
     * }
     */
    public static long RangeSrcItem(MemorySegment struct) {
        return struct.get(RangeSrcItem$LAYOUT, RangeSrcItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData RangeSrcItem
     * }
     */
    public static void RangeSrcItem(MemorySegment struct, long fieldValue) {
        struct.set(RangeSrcItem$LAYOUT, RangeSrcItem$OFFSET, fieldValue);
    }

    private static final OfLong NavIdItem$LAYOUT = (OfLong)$LAYOUT.select(groupElement("NavIdItem"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavIdItem
     * }
     */
    public static final OfLong NavIdItem$layout() {
        return NavIdItem$LAYOUT;
    }

    private static final long NavIdItem$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavIdItem
     * }
     */
    public static final long NavIdItem$offset() {
        return NavIdItem$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavIdItem
     * }
     */
    public static long NavIdItem(MemorySegment struct) {
        return struct.get(NavIdItem$LAYOUT, NavIdItem$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiSelectionUserData NavIdItem
     * }
     */
    public static void NavIdItem(MemorySegment struct, long fieldValue) {
        struct.set(NavIdItem$LAYOUT, NavIdItem$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

