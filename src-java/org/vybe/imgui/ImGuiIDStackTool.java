// Generated by jextract

package org.vybe.imgui;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ImGuiIDStackTool {
 *     int LastActiveFrame;
 *     int StackLevel;
 *     ImGuiID QueryId;
 *     ImVector_ImGuiStackLevelInfo Results;
 *     bool CopyToClipboardOnCtrlC;
 *     float CopyToClipboardLastTime;
 * }
 * }
 */
public class ImGuiIDStackTool {

    ImGuiIDStackTool() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        imgui.C_INT.withName("LastActiveFrame"),
        imgui.C_INT.withName("StackLevel"),
        imgui.C_INT.withName("QueryId"),
        MemoryLayout.paddingLayout(4),
        ImVector_ImGuiStackLevelInfo.layout().withName("Results"),
        imgui.C_BOOL.withName("CopyToClipboardOnCtrlC"),
        MemoryLayout.paddingLayout(3),
        imgui.C_FLOAT.withName("CopyToClipboardLastTime")
    ).withName("ImGuiIDStackTool");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt LastActiveFrame$LAYOUT = (OfInt)$LAYOUT.select(groupElement("LastActiveFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int LastActiveFrame
     * }
     */
    public static final OfInt LastActiveFrame$layout() {
        return LastActiveFrame$LAYOUT;
    }

    private static final long LastActiveFrame$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int LastActiveFrame
     * }
     */
    public static final long LastActiveFrame$offset() {
        return LastActiveFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int LastActiveFrame
     * }
     */
    public static int LastActiveFrame(MemorySegment struct) {
        return struct.get(LastActiveFrame$LAYOUT, LastActiveFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int LastActiveFrame
     * }
     */
    public static void LastActiveFrame(MemorySegment struct, int fieldValue) {
        struct.set(LastActiveFrame$LAYOUT, LastActiveFrame$OFFSET, fieldValue);
    }

    private static final OfInt StackLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("StackLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int StackLevel
     * }
     */
    public static final OfInt StackLevel$layout() {
        return StackLevel$LAYOUT;
    }

    private static final long StackLevel$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int StackLevel
     * }
     */
    public static final long StackLevel$offset() {
        return StackLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int StackLevel
     * }
     */
    public static int StackLevel(MemorySegment struct) {
        return struct.get(StackLevel$LAYOUT, StackLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int StackLevel
     * }
     */
    public static void StackLevel(MemorySegment struct, int fieldValue) {
        struct.set(StackLevel$LAYOUT, StackLevel$OFFSET, fieldValue);
    }

    private static final OfInt QueryId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("QueryId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImGuiID QueryId
     * }
     */
    public static final OfInt QueryId$layout() {
        return QueryId$LAYOUT;
    }

    private static final long QueryId$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImGuiID QueryId
     * }
     */
    public static final long QueryId$offset() {
        return QueryId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImGuiID QueryId
     * }
     */
    public static int QueryId(MemorySegment struct) {
        return struct.get(QueryId$LAYOUT, QueryId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImGuiID QueryId
     * }
     */
    public static void QueryId(MemorySegment struct, int fieldValue) {
        struct.set(QueryId$LAYOUT, QueryId$OFFSET, fieldValue);
    }

    private static final GroupLayout Results$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("Results"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ImVector_ImGuiStackLevelInfo Results
     * }
     */
    public static final GroupLayout Results$layout() {
        return Results$LAYOUT;
    }

    private static final long Results$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ImVector_ImGuiStackLevelInfo Results
     * }
     */
    public static final long Results$offset() {
        return Results$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiStackLevelInfo Results
     * }
     */
    public static MemorySegment Results(MemorySegment struct) {
        return struct.asSlice(Results$OFFSET, Results$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ImVector_ImGuiStackLevelInfo Results
     * }
     */
    public static void Results(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, Results$OFFSET, Results$LAYOUT.byteSize());
    }

    private static final OfBoolean CopyToClipboardOnCtrlC$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("CopyToClipboardOnCtrlC"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool CopyToClipboardOnCtrlC
     * }
     */
    public static final OfBoolean CopyToClipboardOnCtrlC$layout() {
        return CopyToClipboardOnCtrlC$LAYOUT;
    }

    private static final long CopyToClipboardOnCtrlC$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool CopyToClipboardOnCtrlC
     * }
     */
    public static final long CopyToClipboardOnCtrlC$offset() {
        return CopyToClipboardOnCtrlC$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool CopyToClipboardOnCtrlC
     * }
     */
    public static boolean CopyToClipboardOnCtrlC(MemorySegment struct) {
        return struct.get(CopyToClipboardOnCtrlC$LAYOUT, CopyToClipboardOnCtrlC$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool CopyToClipboardOnCtrlC
     * }
     */
    public static void CopyToClipboardOnCtrlC(MemorySegment struct, boolean fieldValue) {
        struct.set(CopyToClipboardOnCtrlC$LAYOUT, CopyToClipboardOnCtrlC$OFFSET, fieldValue);
    }

    private static final OfFloat CopyToClipboardLastTime$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("CopyToClipboardLastTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float CopyToClipboardLastTime
     * }
     */
    public static final OfFloat CopyToClipboardLastTime$layout() {
        return CopyToClipboardLastTime$LAYOUT;
    }

    private static final long CopyToClipboardLastTime$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float CopyToClipboardLastTime
     * }
     */
    public static final long CopyToClipboardLastTime$offset() {
        return CopyToClipboardLastTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float CopyToClipboardLastTime
     * }
     */
    public static float CopyToClipboardLastTime(MemorySegment struct) {
        return struct.get(CopyToClipboardLastTime$LAYOUT, CopyToClipboardLastTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float CopyToClipboardLastTime
     * }
     */
    public static void CopyToClipboardLastTime(MemorySegment struct, float fieldValue) {
        struct.set(CopyToClipboardLastTime$LAYOUT, CopyToClipboardLastTime$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

