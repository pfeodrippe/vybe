// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_script_vars_t {
 *     struct ecs_script_vars_t *parent;
 *     ecs_hashmap_t var_index;
 *     ecs_vec_t vars;
 *     const ecs_world_t *world;
 *     struct ecs_stack_t *stack;
 *     ecs_stack_cursor_t *cursor;
 *     ecs_allocator_t *allocator;
 * }
 * }
 */
public class ecs_script_vars_t {

    ecs_script_vars_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_POINTER.withName("parent"),
        ecs_hashmap_t.layout().withName("var_index"),
        ecs_vec_t.layout().withName("vars"),
        flecs.C_POINTER.withName("world"),
        flecs.C_POINTER.withName("stack"),
        flecs.C_POINTER.withName("cursor"),
        flecs.C_POINTER.withName("allocator")
    ).withName("ecs_script_vars_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout parent$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ecs_script_vars_t *parent
     * }
     */
    public static final AddressLayout parent$layout() {
        return parent$LAYOUT;
    }

    private static final long parent$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ecs_script_vars_t *parent
     * }
     */
    public static final long parent$offset() {
        return parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ecs_script_vars_t *parent
     * }
     */
    public static MemorySegment parent(MemorySegment struct) {
        return struct.get(parent$LAYOUT, parent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ecs_script_vars_t *parent
     * }
     */
    public static void parent(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(parent$LAYOUT, parent$OFFSET, fieldValue);
    }

    private static final GroupLayout var_index$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("var_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_hashmap_t var_index
     * }
     */
    public static final GroupLayout var_index$layout() {
        return var_index$LAYOUT;
    }

    private static final long var_index$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_hashmap_t var_index
     * }
     */
    public static final long var_index$offset() {
        return var_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_hashmap_t var_index
     * }
     */
    public static MemorySegment var_index(MemorySegment struct) {
        return struct.asSlice(var_index$OFFSET, var_index$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_hashmap_t var_index
     * }
     */
    public static void var_index(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, var_index$OFFSET, var_index$LAYOUT.byteSize());
    }

    private static final GroupLayout vars$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("vars"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_vec_t vars
     * }
     */
    public static final GroupLayout vars$layout() {
        return vars$LAYOUT;
    }

    private static final long vars$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_vec_t vars
     * }
     */
    public static final long vars$offset() {
        return vars$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_vec_t vars
     * }
     */
    public static MemorySegment vars(MemorySegment struct) {
        return struct.asSlice(vars$OFFSET, vars$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_vec_t vars
     * }
     */
    public static void vars(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, vars$OFFSET, vars$LAYOUT.byteSize());
    }

    private static final AddressLayout world$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("world"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ecs_world_t *world
     * }
     */
    public static final AddressLayout world$layout() {
        return world$LAYOUT;
    }

    private static final long world$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ecs_world_t *world
     * }
     */
    public static final long world$offset() {
        return world$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ecs_world_t *world
     * }
     */
    public static MemorySegment world(MemorySegment struct) {
        return struct.get(world$LAYOUT, world$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ecs_world_t *world
     * }
     */
    public static void world(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(world$LAYOUT, world$OFFSET, fieldValue);
    }

    private static final AddressLayout stack$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ecs_stack_t *stack
     * }
     */
    public static final AddressLayout stack$layout() {
        return stack$LAYOUT;
    }

    private static final long stack$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ecs_stack_t *stack
     * }
     */
    public static final long stack$offset() {
        return stack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ecs_stack_t *stack
     * }
     */
    public static MemorySegment stack(MemorySegment struct) {
        return struct.get(stack$LAYOUT, stack$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ecs_stack_t *stack
     * }
     */
    public static void stack(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stack$LAYOUT, stack$OFFSET, fieldValue);
    }

    private static final AddressLayout cursor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cursor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_stack_cursor_t *cursor
     * }
     */
    public static final AddressLayout cursor$layout() {
        return cursor$LAYOUT;
    }

    private static final long cursor$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_stack_cursor_t *cursor
     * }
     */
    public static final long cursor$offset() {
        return cursor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_stack_cursor_t *cursor
     * }
     */
    public static MemorySegment cursor(MemorySegment struct) {
        return struct.get(cursor$LAYOUT, cursor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_stack_cursor_t *cursor
     * }
     */
    public static void cursor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cursor$LAYOUT, cursor$OFFSET, fieldValue);
    }

    private static final AddressLayout allocator$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("allocator"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_allocator_t *allocator
     * }
     */
    public static final AddressLayout allocator$layout() {
        return allocator$LAYOUT;
    }

    private static final long allocator$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_allocator_t *allocator
     * }
     */
    public static final long allocator$offset() {
        return allocator$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_allocator_t *allocator
     * }
     */
    public static MemorySegment allocator(MemorySegment struct) {
        return struct.get(allocator$LAYOUT, allocator$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_allocator_t *allocator
     * }
     */
    public static void allocator(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(allocator$LAYOUT, allocator$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

