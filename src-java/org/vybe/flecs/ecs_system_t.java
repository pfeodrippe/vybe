// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_system_t {
 *     ecs_header_t hdr;
 *     ecs_run_action_t run;
 *     ecs_iter_action_t action;
 *     ecs_query_t *query;
 *     ecs_entity_t query_entity;
 *     ecs_entity_t tick_source;
 *     bool multi_threaded;
 *     bool immediate;
 *     const char *name;
 *     void *ctx;
 *     void *callback_ctx;
 *     void *run_ctx;
 *     ecs_ctx_free_t ctx_free;
 *     ecs_ctx_free_t callback_ctx_free;
 *     ecs_ctx_free_t run_ctx_free;
 *     float time_spent;
 *     float time_passed;
 *     int64_t last_frame;
 *     ecs_world_t *world;
 *     ecs_entity_t entity;
 *     flecs_poly_dtor_t dtor;
 * }
 * }
 */
public class ecs_system_t {

    ecs_system_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ecs_header_t.layout().withName("hdr"),
        flecs.C_POINTER.withName("run"),
        flecs.C_POINTER.withName("action"),
        flecs.C_POINTER.withName("query"),
        flecs.C_LONG_LONG.withName("query_entity"),
        flecs.C_LONG_LONG.withName("tick_source"),
        flecs.C_BOOL.withName("multi_threaded"),
        flecs.C_BOOL.withName("immediate"),
        MemoryLayout.paddingLayout(6),
        flecs.C_POINTER.withName("name"),
        flecs.C_POINTER.withName("ctx"),
        flecs.C_POINTER.withName("callback_ctx"),
        flecs.C_POINTER.withName("run_ctx"),
        flecs.C_POINTER.withName("ctx_free"),
        flecs.C_POINTER.withName("callback_ctx_free"),
        flecs.C_POINTER.withName("run_ctx_free"),
        flecs.C_FLOAT.withName("time_spent"),
        flecs.C_FLOAT.withName("time_passed"),
        flecs.C_LONG_LONG.withName("last_frame"),
        flecs.C_POINTER.withName("world"),
        flecs.C_LONG_LONG.withName("entity"),
        flecs.C_POINTER.withName("dtor")
    ).withName("ecs_system_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout hdr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("hdr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_header_t hdr
     * }
     */
    public static final GroupLayout hdr$layout() {
        return hdr$LAYOUT;
    }

    private static final long hdr$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_header_t hdr
     * }
     */
    public static final long hdr$offset() {
        return hdr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_header_t hdr
     * }
     */
    public static MemorySegment hdr(MemorySegment struct) {
        return struct.asSlice(hdr$OFFSET, hdr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_header_t hdr
     * }
     */
    public static void hdr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, hdr$OFFSET, hdr$LAYOUT.byteSize());
    }

    private static final AddressLayout run$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_run_action_t run
     * }
     */
    public static final AddressLayout run$layout() {
        return run$LAYOUT;
    }

    private static final long run$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_run_action_t run
     * }
     */
    public static final long run$offset() {
        return run$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_run_action_t run
     * }
     */
    public static MemorySegment run(MemorySegment struct) {
        return struct.get(run$LAYOUT, run$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_run_action_t run
     * }
     */
    public static void run(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run$LAYOUT, run$OFFSET, fieldValue);
    }

    private static final AddressLayout action$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("action"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_iter_action_t action
     * }
     */
    public static final AddressLayout action$layout() {
        return action$LAYOUT;
    }

    private static final long action$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_iter_action_t action
     * }
     */
    public static final long action$offset() {
        return action$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_iter_action_t action
     * }
     */
    public static MemorySegment action(MemorySegment struct) {
        return struct.get(action$LAYOUT, action$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_iter_action_t action
     * }
     */
    public static void action(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(action$LAYOUT, action$OFFSET, fieldValue);
    }

    private static final AddressLayout query$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("query"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_query_t *query
     * }
     */
    public static final AddressLayout query$layout() {
        return query$LAYOUT;
    }

    private static final long query$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_query_t *query
     * }
     */
    public static final long query$offset() {
        return query$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_query_t *query
     * }
     */
    public static MemorySegment query(MemorySegment struct) {
        return struct.get(query$LAYOUT, query$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_query_t *query
     * }
     */
    public static void query(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(query$LAYOUT, query$OFFSET, fieldValue);
    }

    private static final OfLong query_entity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("query_entity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t query_entity
     * }
     */
    public static final OfLong query_entity$layout() {
        return query_entity$LAYOUT;
    }

    private static final long query_entity$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t query_entity
     * }
     */
    public static final long query_entity$offset() {
        return query_entity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t query_entity
     * }
     */
    public static long query_entity(MemorySegment struct) {
        return struct.get(query_entity$LAYOUT, query_entity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t query_entity
     * }
     */
    public static void query_entity(MemorySegment struct, long fieldValue) {
        struct.set(query_entity$LAYOUT, query_entity$OFFSET, fieldValue);
    }

    private static final OfLong tick_source$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tick_source"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t tick_source
     * }
     */
    public static final OfLong tick_source$layout() {
        return tick_source$LAYOUT;
    }

    private static final long tick_source$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t tick_source
     * }
     */
    public static final long tick_source$offset() {
        return tick_source$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t tick_source
     * }
     */
    public static long tick_source(MemorySegment struct) {
        return struct.get(tick_source$LAYOUT, tick_source$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t tick_source
     * }
     */
    public static void tick_source(MemorySegment struct, long fieldValue) {
        struct.set(tick_source$LAYOUT, tick_source$OFFSET, fieldValue);
    }

    private static final OfBoolean multi_threaded$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("multi_threaded"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool multi_threaded
     * }
     */
    public static final OfBoolean multi_threaded$layout() {
        return multi_threaded$LAYOUT;
    }

    private static final long multi_threaded$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool multi_threaded
     * }
     */
    public static final long multi_threaded$offset() {
        return multi_threaded$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool multi_threaded
     * }
     */
    public static boolean multi_threaded(MemorySegment struct) {
        return struct.get(multi_threaded$LAYOUT, multi_threaded$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool multi_threaded
     * }
     */
    public static void multi_threaded(MemorySegment struct, boolean fieldValue) {
        struct.set(multi_threaded$LAYOUT, multi_threaded$OFFSET, fieldValue);
    }

    private static final OfBoolean immediate$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("immediate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool immediate
     * }
     */
    public static final OfBoolean immediate$layout() {
        return immediate$LAYOUT;
    }

    private static final long immediate$OFFSET = 65;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool immediate
     * }
     */
    public static final long immediate$offset() {
        return immediate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool immediate
     * }
     */
    public static boolean immediate(MemorySegment struct) {
        return struct.get(immediate$LAYOUT, immediate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool immediate
     * }
     */
    public static void immediate(MemorySegment struct, boolean fieldValue) {
        struct.set(immediate$LAYOUT, immediate$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final AddressLayout ctx$layout() {
        return ctx$LAYOUT;
    }

    private static final long ctx$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final long ctx$offset() {
        return ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static MemorySegment ctx(MemorySegment struct) {
        return struct.get(ctx$LAYOUT, ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static void ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx$LAYOUT, ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout callback_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static final AddressLayout callback_ctx$layout() {
        return callback_ctx$LAYOUT;
    }

    private static final long callback_ctx$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static final long callback_ctx$offset() {
        return callback_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static MemorySegment callback_ctx(MemorySegment struct) {
        return struct.get(callback_ctx$LAYOUT, callback_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static void callback_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(callback_ctx$LAYOUT, callback_ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout run_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static final AddressLayout run_ctx$layout() {
        return run_ctx$LAYOUT;
    }

    private static final long run_ctx$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static final long run_ctx$offset() {
        return run_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static MemorySegment run_ctx(MemorySegment struct) {
        return struct.get(run_ctx$LAYOUT, run_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static void run_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run_ctx$LAYOUT, run_ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static final AddressLayout ctx_free$layout() {
        return ctx_free$LAYOUT;
    }

    private static final long ctx_free$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static final long ctx_free$offset() {
        return ctx_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static MemorySegment ctx_free(MemorySegment struct) {
        return struct.get(ctx_free$LAYOUT, ctx_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t ctx_free
     * }
     */
    public static void ctx_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx_free$LAYOUT, ctx_free$OFFSET, fieldValue);
    }

    private static final AddressLayout callback_ctx_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback_ctx_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t callback_ctx_free
     * }
     */
    public static final AddressLayout callback_ctx_free$layout() {
        return callback_ctx_free$LAYOUT;
    }

    private static final long callback_ctx_free$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t callback_ctx_free
     * }
     */
    public static final long callback_ctx_free$offset() {
        return callback_ctx_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t callback_ctx_free
     * }
     */
    public static MemorySegment callback_ctx_free(MemorySegment struct) {
        return struct.get(callback_ctx_free$LAYOUT, callback_ctx_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t callback_ctx_free
     * }
     */
    public static void callback_ctx_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(callback_ctx_free$LAYOUT, callback_ctx_free$OFFSET, fieldValue);
    }

    private static final AddressLayout run_ctx_free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run_ctx_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t run_ctx_free
     * }
     */
    public static final AddressLayout run_ctx_free$layout() {
        return run_ctx_free$LAYOUT;
    }

    private static final long run_ctx_free$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t run_ctx_free
     * }
     */
    public static final long run_ctx_free$offset() {
        return run_ctx_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t run_ctx_free
     * }
     */
    public static MemorySegment run_ctx_free(MemorySegment struct) {
        return struct.get(run_ctx_free$LAYOUT, run_ctx_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_ctx_free_t run_ctx_free
     * }
     */
    public static void run_ctx_free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run_ctx_free$LAYOUT, run_ctx_free$OFFSET, fieldValue);
    }

    private static final OfFloat time_spent$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("time_spent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float time_spent
     * }
     */
    public static final OfFloat time_spent$layout() {
        return time_spent$LAYOUT;
    }

    private static final long time_spent$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float time_spent
     * }
     */
    public static final long time_spent$offset() {
        return time_spent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float time_spent
     * }
     */
    public static float time_spent(MemorySegment struct) {
        return struct.get(time_spent$LAYOUT, time_spent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float time_spent
     * }
     */
    public static void time_spent(MemorySegment struct, float fieldValue) {
        struct.set(time_spent$LAYOUT, time_spent$OFFSET, fieldValue);
    }

    private static final OfFloat time_passed$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("time_passed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float time_passed
     * }
     */
    public static final OfFloat time_passed$layout() {
        return time_passed$LAYOUT;
    }

    private static final long time_passed$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float time_passed
     * }
     */
    public static final long time_passed$offset() {
        return time_passed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float time_passed
     * }
     */
    public static float time_passed(MemorySegment struct) {
        return struct.get(time_passed$LAYOUT, time_passed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float time_passed
     * }
     */
    public static void time_passed(MemorySegment struct, float fieldValue) {
        struct.set(time_passed$LAYOUT, time_passed$OFFSET, fieldValue);
    }

    private static final OfLong last_frame$LAYOUT = (OfLong)$LAYOUT.select(groupElement("last_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t last_frame
     * }
     */
    public static final OfLong last_frame$layout() {
        return last_frame$LAYOUT;
    }

    private static final long last_frame$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t last_frame
     * }
     */
    public static final long last_frame$offset() {
        return last_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t last_frame
     * }
     */
    public static long last_frame(MemorySegment struct) {
        return struct.get(last_frame$LAYOUT, last_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t last_frame
     * }
     */
    public static void last_frame(MemorySegment struct, long fieldValue) {
        struct.set(last_frame$LAYOUT, last_frame$OFFSET, fieldValue);
    }

    private static final AddressLayout world$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("world"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static final AddressLayout world$layout() {
        return world$LAYOUT;
    }

    private static final long world$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static final long world$offset() {
        return world$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static MemorySegment world(MemorySegment struct) {
        return struct.get(world$LAYOUT, world$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static void world(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(world$LAYOUT, world$OFFSET, fieldValue);
    }

    private static final OfLong entity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("entity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final OfLong entity$layout() {
        return entity$LAYOUT;
    }

    private static final long entity$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static final long entity$offset() {
        return entity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static long entity(MemorySegment struct) {
        return struct.get(entity$LAYOUT, entity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t entity
     * }
     */
    public static void entity(MemorySegment struct, long fieldValue) {
        struct.set(entity$LAYOUT, entity$OFFSET, fieldValue);
    }

    private static final AddressLayout dtor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dtor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * flecs_poly_dtor_t dtor
     * }
     */
    public static final AddressLayout dtor$layout() {
        return dtor$LAYOUT;
    }

    private static final long dtor$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * flecs_poly_dtor_t dtor
     * }
     */
    public static final long dtor$offset() {
        return dtor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * flecs_poly_dtor_t dtor
     * }
     */
    public static MemorySegment dtor(MemorySegment struct) {
        return struct.get(dtor$LAYOUT, dtor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * flecs_poly_dtor_t dtor
     * }
     */
    public static void dtor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dtor$LAYOUT, dtor$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

