// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_suspend_readonly_state_t {
 *     bool is_readonly;
 *     bool is_deferred;
 *     int32_t defer_count;
 *     ecs_entity_t scope;
 *     ecs_entity_t with;
 *     ecs_vec_t commands;
 *     ecs_stack_t defer_stack;
 *     ecs_stage_t *stage;
 * }
 * }
 */
public class ecs_suspend_readonly_state_t {

    ecs_suspend_readonly_state_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_BOOL.withName("is_readonly"),
        flecs.C_BOOL.withName("is_deferred"),
        MemoryLayout.paddingLayout(2),
        flecs.C_INT.withName("defer_count"),
        flecs.C_LONG_LONG.withName("scope"),
        flecs.C_LONG_LONG.withName("with"),
        ecs_vec_t.layout().withName("commands"),
        ecs_stack_t.layout().withName("defer_stack"),
        flecs.C_POINTER.withName("stage")
    ).withName("ecs_suspend_readonly_state_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean is_readonly$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_readonly"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_readonly
     * }
     */
    public static final OfBoolean is_readonly$layout() {
        return is_readonly$LAYOUT;
    }

    private static final long is_readonly$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_readonly
     * }
     */
    public static final long is_readonly$offset() {
        return is_readonly$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_readonly
     * }
     */
    public static boolean is_readonly(MemorySegment struct) {
        return struct.get(is_readonly$LAYOUT, is_readonly$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_readonly
     * }
     */
    public static void is_readonly(MemorySegment struct, boolean fieldValue) {
        struct.set(is_readonly$LAYOUT, is_readonly$OFFSET, fieldValue);
    }

    private static final OfBoolean is_deferred$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_deferred"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_deferred
     * }
     */
    public static final OfBoolean is_deferred$layout() {
        return is_deferred$LAYOUT;
    }

    private static final long is_deferred$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_deferred
     * }
     */
    public static final long is_deferred$offset() {
        return is_deferred$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_deferred
     * }
     */
    public static boolean is_deferred(MemorySegment struct) {
        return struct.get(is_deferred$LAYOUT, is_deferred$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_deferred
     * }
     */
    public static void is_deferred(MemorySegment struct, boolean fieldValue) {
        struct.set(is_deferred$LAYOUT, is_deferred$OFFSET, fieldValue);
    }

    private static final OfInt defer_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("defer_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t defer_count
     * }
     */
    public static final OfInt defer_count$layout() {
        return defer_count$LAYOUT;
    }

    private static final long defer_count$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t defer_count
     * }
     */
    public static final long defer_count$offset() {
        return defer_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t defer_count
     * }
     */
    public static int defer_count(MemorySegment struct) {
        return struct.get(defer_count$LAYOUT, defer_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t defer_count
     * }
     */
    public static void defer_count(MemorySegment struct, int fieldValue) {
        struct.set(defer_count$LAYOUT, defer_count$OFFSET, fieldValue);
    }

    private static final OfLong scope$LAYOUT = (OfLong)$LAYOUT.select(groupElement("scope"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t scope
     * }
     */
    public static final OfLong scope$layout() {
        return scope$LAYOUT;
    }

    private static final long scope$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t scope
     * }
     */
    public static final long scope$offset() {
        return scope$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t scope
     * }
     */
    public static long scope(MemorySegment struct) {
        return struct.get(scope$LAYOUT, scope$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t scope
     * }
     */
    public static void scope(MemorySegment struct, long fieldValue) {
        struct.set(scope$LAYOUT, scope$OFFSET, fieldValue);
    }

    private static final OfLong with$LAYOUT = (OfLong)$LAYOUT.select(groupElement("with"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t with
     * }
     */
    public static final OfLong with$layout() {
        return with$LAYOUT;
    }

    private static final long with$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t with
     * }
     */
    public static final long with$offset() {
        return with$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t with
     * }
     */
    public static long with(MemorySegment struct) {
        return struct.get(with$LAYOUT, with$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t with
     * }
     */
    public static void with(MemorySegment struct, long fieldValue) {
        struct.set(with$LAYOUT, with$OFFSET, fieldValue);
    }

    private static final GroupLayout commands$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("commands"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_vec_t commands
     * }
     */
    public static final GroupLayout commands$layout() {
        return commands$LAYOUT;
    }

    private static final long commands$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_vec_t commands
     * }
     */
    public static final long commands$offset() {
        return commands$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_vec_t commands
     * }
     */
    public static MemorySegment commands(MemorySegment struct) {
        return struct.asSlice(commands$OFFSET, commands$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_vec_t commands
     * }
     */
    public static void commands(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, commands$OFFSET, commands$LAYOUT.byteSize());
    }

    private static final GroupLayout defer_stack$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("defer_stack"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_stack_t defer_stack
     * }
     */
    public static final GroupLayout defer_stack$layout() {
        return defer_stack$LAYOUT;
    }

    private static final long defer_stack$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_stack_t defer_stack
     * }
     */
    public static final long defer_stack$offset() {
        return defer_stack$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_stack_t defer_stack
     * }
     */
    public static MemorySegment defer_stack(MemorySegment struct) {
        return struct.asSlice(defer_stack$OFFSET, defer_stack$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_stack_t defer_stack
     * }
     */
    public static void defer_stack(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, defer_stack$OFFSET, defer_stack$LAYOUT.byteSize());
    }

    private static final AddressLayout stage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("stage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_stage_t *stage
     * }
     */
    public static final AddressLayout stage$layout() {
        return stage$LAYOUT;
    }

    private static final long stage$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_stage_t *stage
     * }
     */
    public static final long stage$offset() {
        return stage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_stage_t *stage
     * }
     */
    public static MemorySegment stage(MemorySegment struct) {
        return struct.get(stage$LAYOUT, stage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_stage_t *stage
     * }
     */
    public static void stage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(stage$LAYOUT, stage$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

