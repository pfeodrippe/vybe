// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_each_iter_t {
 *     ecs_table_cache_iter_t it;
 *     ecs_id_t ids;
 *     ecs_entity_t sources;
 *     ecs_size_t sizes;
 *     int32_t columns;
 *     const ecs_table_record_t *trs;
 * }
 * }
 */
public class ecs_each_iter_t {

    ecs_each_iter_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ecs_table_cache_iter_t.layout().withName("it"),
        flecs.C_LONG_LONG.withName("ids"),
        flecs.C_LONG_LONG.withName("sources"),
        flecs.C_INT.withName("sizes"),
        flecs.C_INT.withName("columns"),
        flecs.C_POINTER.withName("trs")
    ).withName("ecs_each_iter_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout it$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("it"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_table_cache_iter_t it
     * }
     */
    public static final GroupLayout it$layout() {
        return it$LAYOUT;
    }

    private static final long it$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_table_cache_iter_t it
     * }
     */
    public static final long it$offset() {
        return it$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_table_cache_iter_t it
     * }
     */
    public static MemorySegment it(MemorySegment struct) {
        return struct.asSlice(it$OFFSET, it$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_table_cache_iter_t it
     * }
     */
    public static void it(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, it$OFFSET, it$LAYOUT.byteSize());
    }

    private static final OfLong ids$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ids"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_id_t ids
     * }
     */
    public static final OfLong ids$layout() {
        return ids$LAYOUT;
    }

    private static final long ids$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_id_t ids
     * }
     */
    public static final long ids$offset() {
        return ids$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_id_t ids
     * }
     */
    public static long ids(MemorySegment struct) {
        return struct.get(ids$LAYOUT, ids$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_id_t ids
     * }
     */
    public static void ids(MemorySegment struct, long fieldValue) {
        struct.set(ids$LAYOUT, ids$OFFSET, fieldValue);
    }

    private static final OfLong sources$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sources"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t sources
     * }
     */
    public static final OfLong sources$layout() {
        return sources$LAYOUT;
    }

    private static final long sources$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t sources
     * }
     */
    public static final long sources$offset() {
        return sources$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t sources
     * }
     */
    public static long sources(MemorySegment struct) {
        return struct.get(sources$LAYOUT, sources$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t sources
     * }
     */
    public static void sources(MemorySegment struct, long fieldValue) {
        struct.set(sources$LAYOUT, sources$OFFSET, fieldValue);
    }

    private static final OfInt sizes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_size_t sizes
     * }
     */
    public static final OfInt sizes$layout() {
        return sizes$LAYOUT;
    }

    private static final long sizes$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_size_t sizes
     * }
     */
    public static final long sizes$offset() {
        return sizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_size_t sizes
     * }
     */
    public static int sizes(MemorySegment struct) {
        return struct.get(sizes$LAYOUT, sizes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_size_t sizes
     * }
     */
    public static void sizes(MemorySegment struct, int fieldValue) {
        struct.set(sizes$LAYOUT, sizes$OFFSET, fieldValue);
    }

    private static final OfInt columns$LAYOUT = (OfInt)$LAYOUT.select(groupElement("columns"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t columns
     * }
     */
    public static final OfInt columns$layout() {
        return columns$LAYOUT;
    }

    private static final long columns$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t columns
     * }
     */
    public static final long columns$offset() {
        return columns$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t columns
     * }
     */
    public static int columns(MemorySegment struct) {
        return struct.get(columns$LAYOUT, columns$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t columns
     * }
     */
    public static void columns(MemorySegment struct, int fieldValue) {
        struct.set(columns$LAYOUT, columns$OFFSET, fieldValue);
    }

    private static final AddressLayout trs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("trs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ecs_table_record_t *trs
     * }
     */
    public static final AddressLayout trs$layout() {
        return trs$LAYOUT;
    }

    private static final long trs$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ecs_table_record_t *trs
     * }
     */
    public static final long trs$offset() {
        return trs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ecs_table_record_t *trs
     * }
     */
    public static MemorySegment trs(MemorySegment struct) {
        return struct.get(trs$LAYOUT, trs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ecs_table_record_t *trs
     * }
     */
    public static void trs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(trs$LAYOUT, trs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

