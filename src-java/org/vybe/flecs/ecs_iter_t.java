// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_iter_t {
 *     ecs_world_t *world;
 *     ecs_world_t *real_world;
 *     const ecs_entity_t *entities;
 *     const ecs_size_t *sizes;
 *     ecs_table_t *table;
 *     ecs_table_t *other_table;
 *     ecs_id_t *ids;
 *     ecs_var_t *variables;
 *     const ecs_table_record_t **trs;
 *     ecs_entity_t *sources;
 *     ecs_flags64_t constrained_vars;
 *     uint64_t group_id;
 *     ecs_flags32_t set_fields;
 *     ecs_flags32_t ref_fields;
 *     ecs_flags32_t row_fields;
 *     ecs_flags32_t up_fields;
 *     ecs_entity_t system;
 *     ecs_entity_t event;
 *     ecs_id_t event_id;
 *     int32_t event_cur;
 *     int8_t field_count;
 *     int8_t term_index;
 *     int8_t variable_count;
 *     const ecs_query_t *query;
 *     char **variable_names;
 *     void *param;
 *     void *ctx;
 *     void *binding_ctx;
 *     void *callback_ctx;
 *     void *run_ctx;
 *     float delta_time;
 *     float delta_system_time;
 *     int32_t frame_offset;
 *     int32_t offset;
 *     int32_t count;
 *     ecs_flags32_t flags;
 *     ecs_entity_t interrupted_by;
 *     ecs_iter_private_t priv_;
 *     ecs_iter_next_action_t next;
 *     ecs_iter_action_t callback;
 *     ecs_iter_fini_action_t fini;
 *     ecs_iter_t *chain_it;
 * }
 * }
 */
public class ecs_iter_t {

    ecs_iter_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_POINTER.withName("world"),
        flecs.C_POINTER.withName("real_world"),
        flecs.C_POINTER.withName("entities"),
        flecs.C_POINTER.withName("sizes"),
        flecs.C_POINTER.withName("table"),
        flecs.C_POINTER.withName("other_table"),
        flecs.C_POINTER.withName("ids"),
        flecs.C_POINTER.withName("variables"),
        flecs.C_POINTER.withName("trs"),
        flecs.C_POINTER.withName("sources"),
        flecs.C_LONG_LONG.withName("constrained_vars"),
        flecs.C_LONG_LONG.withName("group_id"),
        flecs.C_INT.withName("set_fields"),
        flecs.C_INT.withName("ref_fields"),
        flecs.C_INT.withName("row_fields"),
        flecs.C_INT.withName("up_fields"),
        flecs.C_LONG_LONG.withName("system"),
        flecs.C_LONG_LONG.withName("event"),
        flecs.C_LONG_LONG.withName("event_id"),
        flecs.C_INT.withName("event_cur"),
        flecs.C_CHAR.withName("field_count"),
        flecs.C_CHAR.withName("term_index"),
        flecs.C_CHAR.withName("variable_count"),
        MemoryLayout.paddingLayout(1),
        flecs.C_POINTER.withName("query"),
        flecs.C_POINTER.withName("variable_names"),
        flecs.C_POINTER.withName("param"),
        flecs.C_POINTER.withName("ctx"),
        flecs.C_POINTER.withName("binding_ctx"),
        flecs.C_POINTER.withName("callback_ctx"),
        flecs.C_POINTER.withName("run_ctx"),
        flecs.C_FLOAT.withName("delta_time"),
        flecs.C_FLOAT.withName("delta_system_time"),
        flecs.C_INT.withName("frame_offset"),
        flecs.C_INT.withName("offset"),
        flecs.C_INT.withName("count"),
        flecs.C_INT.withName("flags"),
        flecs.C_LONG_LONG.withName("interrupted_by"),
        ecs_iter_private_t.layout().withName("priv_"),
        flecs.C_POINTER.withName("next"),
        flecs.C_POINTER.withName("callback"),
        flecs.C_POINTER.withName("fini"),
        flecs.C_POINTER.withName("chain_it")
    ).withName("ecs_iter_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout world$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("world"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static final AddressLayout world$layout() {
        return world$LAYOUT;
    }

    private static final long world$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static final long world$offset() {
        return world$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static MemorySegment world(MemorySegment struct) {
        return struct.get(world$LAYOUT, world$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_world_t *world
     * }
     */
    public static void world(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(world$LAYOUT, world$OFFSET, fieldValue);
    }

    private static final AddressLayout real_world$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("real_world"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_world_t *real_world
     * }
     */
    public static final AddressLayout real_world$layout() {
        return real_world$LAYOUT;
    }

    private static final long real_world$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_world_t *real_world
     * }
     */
    public static final long real_world$offset() {
        return real_world$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_world_t *real_world
     * }
     */
    public static MemorySegment real_world(MemorySegment struct) {
        return struct.get(real_world$LAYOUT, real_world$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_world_t *real_world
     * }
     */
    public static void real_world(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(real_world$LAYOUT, real_world$OFFSET, fieldValue);
    }

    private static final AddressLayout entities$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ecs_entity_t *entities
     * }
     */
    public static final AddressLayout entities$layout() {
        return entities$LAYOUT;
    }

    private static final long entities$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ecs_entity_t *entities
     * }
     */
    public static final long entities$offset() {
        return entities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ecs_entity_t *entities
     * }
     */
    public static MemorySegment entities(MemorySegment struct) {
        return struct.get(entities$LAYOUT, entities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ecs_entity_t *entities
     * }
     */
    public static void entities(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entities$LAYOUT, entities$OFFSET, fieldValue);
    }

    private static final AddressLayout sizes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ecs_size_t *sizes
     * }
     */
    public static final AddressLayout sizes$layout() {
        return sizes$LAYOUT;
    }

    private static final long sizes$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ecs_size_t *sizes
     * }
     */
    public static final long sizes$offset() {
        return sizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ecs_size_t *sizes
     * }
     */
    public static MemorySegment sizes(MemorySegment struct) {
        return struct.get(sizes$LAYOUT, sizes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ecs_size_t *sizes
     * }
     */
    public static void sizes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sizes$LAYOUT, sizes$OFFSET, fieldValue);
    }

    private static final AddressLayout table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static final AddressLayout table$layout() {
        return table$LAYOUT;
    }

    private static final long table$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static final long table$offset() {
        return table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static MemorySegment table(MemorySegment struct) {
        return struct.get(table$LAYOUT, table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_table_t *table
     * }
     */
    public static void table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(table$LAYOUT, table$OFFSET, fieldValue);
    }

    private static final AddressLayout other_table$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("other_table"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_table_t *other_table
     * }
     */
    public static final AddressLayout other_table$layout() {
        return other_table$LAYOUT;
    }

    private static final long other_table$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_table_t *other_table
     * }
     */
    public static final long other_table$offset() {
        return other_table$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_table_t *other_table
     * }
     */
    public static MemorySegment other_table(MemorySegment struct) {
        return struct.get(other_table$LAYOUT, other_table$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_table_t *other_table
     * }
     */
    public static void other_table(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(other_table$LAYOUT, other_table$OFFSET, fieldValue);
    }

    private static final AddressLayout ids$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ids"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_id_t *ids
     * }
     */
    public static final AddressLayout ids$layout() {
        return ids$LAYOUT;
    }

    private static final long ids$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_id_t *ids
     * }
     */
    public static final long ids$offset() {
        return ids$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_id_t *ids
     * }
     */
    public static MemorySegment ids(MemorySegment struct) {
        return struct.get(ids$LAYOUT, ids$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_id_t *ids
     * }
     */
    public static void ids(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ids$LAYOUT, ids$OFFSET, fieldValue);
    }

    private static final AddressLayout variables$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("variables"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_var_t *variables
     * }
     */
    public static final AddressLayout variables$layout() {
        return variables$LAYOUT;
    }

    private static final long variables$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_var_t *variables
     * }
     */
    public static final long variables$offset() {
        return variables$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_var_t *variables
     * }
     */
    public static MemorySegment variables(MemorySegment struct) {
        return struct.get(variables$LAYOUT, variables$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_var_t *variables
     * }
     */
    public static void variables(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(variables$LAYOUT, variables$OFFSET, fieldValue);
    }

    private static final AddressLayout trs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("trs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ecs_table_record_t **trs
     * }
     */
    public static final AddressLayout trs$layout() {
        return trs$LAYOUT;
    }

    private static final long trs$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ecs_table_record_t **trs
     * }
     */
    public static final long trs$offset() {
        return trs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ecs_table_record_t **trs
     * }
     */
    public static MemorySegment trs(MemorySegment struct) {
        return struct.get(trs$LAYOUT, trs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ecs_table_record_t **trs
     * }
     */
    public static void trs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(trs$LAYOUT, trs$OFFSET, fieldValue);
    }

    private static final AddressLayout sources$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sources"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t *sources
     * }
     */
    public static final AddressLayout sources$layout() {
        return sources$LAYOUT;
    }

    private static final long sources$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t *sources
     * }
     */
    public static final long sources$offset() {
        return sources$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t *sources
     * }
     */
    public static MemorySegment sources(MemorySegment struct) {
        return struct.get(sources$LAYOUT, sources$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t *sources
     * }
     */
    public static void sources(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sources$LAYOUT, sources$OFFSET, fieldValue);
    }

    private static final OfLong constrained_vars$LAYOUT = (OfLong)$LAYOUT.select(groupElement("constrained_vars"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags64_t constrained_vars
     * }
     */
    public static final OfLong constrained_vars$layout() {
        return constrained_vars$LAYOUT;
    }

    private static final long constrained_vars$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags64_t constrained_vars
     * }
     */
    public static final long constrained_vars$offset() {
        return constrained_vars$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags64_t constrained_vars
     * }
     */
    public static long constrained_vars(MemorySegment struct) {
        return struct.get(constrained_vars$LAYOUT, constrained_vars$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags64_t constrained_vars
     * }
     */
    public static void constrained_vars(MemorySegment struct, long fieldValue) {
        struct.set(constrained_vars$LAYOUT, constrained_vars$OFFSET, fieldValue);
    }

    private static final OfLong group_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("group_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t group_id
     * }
     */
    public static final OfLong group_id$layout() {
        return group_id$LAYOUT;
    }

    private static final long group_id$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t group_id
     * }
     */
    public static final long group_id$offset() {
        return group_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t group_id
     * }
     */
    public static long group_id(MemorySegment struct) {
        return struct.get(group_id$LAYOUT, group_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t group_id
     * }
     */
    public static void group_id(MemorySegment struct, long fieldValue) {
        struct.set(group_id$LAYOUT, group_id$OFFSET, fieldValue);
    }

    private static final OfInt set_fields$LAYOUT = (OfInt)$LAYOUT.select(groupElement("set_fields"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags32_t set_fields
     * }
     */
    public static final OfInt set_fields$layout() {
        return set_fields$LAYOUT;
    }

    private static final long set_fields$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags32_t set_fields
     * }
     */
    public static final long set_fields$offset() {
        return set_fields$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags32_t set_fields
     * }
     */
    public static int set_fields(MemorySegment struct) {
        return struct.get(set_fields$LAYOUT, set_fields$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags32_t set_fields
     * }
     */
    public static void set_fields(MemorySegment struct, int fieldValue) {
        struct.set(set_fields$LAYOUT, set_fields$OFFSET, fieldValue);
    }

    private static final OfInt ref_fields$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ref_fields"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags32_t ref_fields
     * }
     */
    public static final OfInt ref_fields$layout() {
        return ref_fields$LAYOUT;
    }

    private static final long ref_fields$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags32_t ref_fields
     * }
     */
    public static final long ref_fields$offset() {
        return ref_fields$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags32_t ref_fields
     * }
     */
    public static int ref_fields(MemorySegment struct) {
        return struct.get(ref_fields$LAYOUT, ref_fields$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags32_t ref_fields
     * }
     */
    public static void ref_fields(MemorySegment struct, int fieldValue) {
        struct.set(ref_fields$LAYOUT, ref_fields$OFFSET, fieldValue);
    }

    private static final OfInt row_fields$LAYOUT = (OfInt)$LAYOUT.select(groupElement("row_fields"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags32_t row_fields
     * }
     */
    public static final OfInt row_fields$layout() {
        return row_fields$LAYOUT;
    }

    private static final long row_fields$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags32_t row_fields
     * }
     */
    public static final long row_fields$offset() {
        return row_fields$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags32_t row_fields
     * }
     */
    public static int row_fields(MemorySegment struct) {
        return struct.get(row_fields$LAYOUT, row_fields$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags32_t row_fields
     * }
     */
    public static void row_fields(MemorySegment struct, int fieldValue) {
        struct.set(row_fields$LAYOUT, row_fields$OFFSET, fieldValue);
    }

    private static final OfInt up_fields$LAYOUT = (OfInt)$LAYOUT.select(groupElement("up_fields"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags32_t up_fields
     * }
     */
    public static final OfInt up_fields$layout() {
        return up_fields$LAYOUT;
    }

    private static final long up_fields$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags32_t up_fields
     * }
     */
    public static final long up_fields$offset() {
        return up_fields$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags32_t up_fields
     * }
     */
    public static int up_fields(MemorySegment struct) {
        return struct.get(up_fields$LAYOUT, up_fields$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags32_t up_fields
     * }
     */
    public static void up_fields(MemorySegment struct, int fieldValue) {
        struct.set(up_fields$LAYOUT, up_fields$OFFSET, fieldValue);
    }

    private static final OfLong system$LAYOUT = (OfLong)$LAYOUT.select(groupElement("system"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t system
     * }
     */
    public static final OfLong system$layout() {
        return system$LAYOUT;
    }

    private static final long system$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t system
     * }
     */
    public static final long system$offset() {
        return system$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t system
     * }
     */
    public static long system(MemorySegment struct) {
        return struct.get(system$LAYOUT, system$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t system
     * }
     */
    public static void system(MemorySegment struct, long fieldValue) {
        struct.set(system$LAYOUT, system$OFFSET, fieldValue);
    }

    private static final OfLong event$LAYOUT = (OfLong)$LAYOUT.select(groupElement("event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t event
     * }
     */
    public static final OfLong event$layout() {
        return event$LAYOUT;
    }

    private static final long event$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t event
     * }
     */
    public static final long event$offset() {
        return event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t event
     * }
     */
    public static long event(MemorySegment struct) {
        return struct.get(event$LAYOUT, event$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t event
     * }
     */
    public static void event(MemorySegment struct, long fieldValue) {
        struct.set(event$LAYOUT, event$OFFSET, fieldValue);
    }

    private static final OfLong event_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("event_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_id_t event_id
     * }
     */
    public static final OfLong event_id$layout() {
        return event_id$LAYOUT;
    }

    private static final long event_id$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_id_t event_id
     * }
     */
    public static final long event_id$offset() {
        return event_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_id_t event_id
     * }
     */
    public static long event_id(MemorySegment struct) {
        return struct.get(event_id$LAYOUT, event_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_id_t event_id
     * }
     */
    public static void event_id(MemorySegment struct, long fieldValue) {
        struct.set(event_id$LAYOUT, event_id$OFFSET, fieldValue);
    }

    private static final OfInt event_cur$LAYOUT = (OfInt)$LAYOUT.select(groupElement("event_cur"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t event_cur
     * }
     */
    public static final OfInt event_cur$layout() {
        return event_cur$LAYOUT;
    }

    private static final long event_cur$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t event_cur
     * }
     */
    public static final long event_cur$offset() {
        return event_cur$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t event_cur
     * }
     */
    public static int event_cur(MemorySegment struct) {
        return struct.get(event_cur$LAYOUT, event_cur$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t event_cur
     * }
     */
    public static void event_cur(MemorySegment struct, int fieldValue) {
        struct.set(event_cur$LAYOUT, event_cur$OFFSET, fieldValue);
    }

    private static final OfByte field_count$LAYOUT = (OfByte)$LAYOUT.select(groupElement("field_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t field_count
     * }
     */
    public static final OfByte field_count$layout() {
        return field_count$LAYOUT;
    }

    private static final long field_count$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t field_count
     * }
     */
    public static final long field_count$offset() {
        return field_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t field_count
     * }
     */
    public static byte field_count(MemorySegment struct) {
        return struct.get(field_count$LAYOUT, field_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t field_count
     * }
     */
    public static void field_count(MemorySegment struct, byte fieldValue) {
        struct.set(field_count$LAYOUT, field_count$OFFSET, fieldValue);
    }

    private static final OfByte term_index$LAYOUT = (OfByte)$LAYOUT.select(groupElement("term_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t term_index
     * }
     */
    public static final OfByte term_index$layout() {
        return term_index$LAYOUT;
    }

    private static final long term_index$OFFSET = 141;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t term_index
     * }
     */
    public static final long term_index$offset() {
        return term_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t term_index
     * }
     */
    public static byte term_index(MemorySegment struct) {
        return struct.get(term_index$LAYOUT, term_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t term_index
     * }
     */
    public static void term_index(MemorySegment struct, byte fieldValue) {
        struct.set(term_index$LAYOUT, term_index$OFFSET, fieldValue);
    }

    private static final OfByte variable_count$LAYOUT = (OfByte)$LAYOUT.select(groupElement("variable_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t variable_count
     * }
     */
    public static final OfByte variable_count$layout() {
        return variable_count$LAYOUT;
    }

    private static final long variable_count$OFFSET = 142;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t variable_count
     * }
     */
    public static final long variable_count$offset() {
        return variable_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t variable_count
     * }
     */
    public static byte variable_count(MemorySegment struct) {
        return struct.get(variable_count$LAYOUT, variable_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t variable_count
     * }
     */
    public static void variable_count(MemorySegment struct, byte fieldValue) {
        struct.set(variable_count$LAYOUT, variable_count$OFFSET, fieldValue);
    }

    private static final AddressLayout query$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("query"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const ecs_query_t *query
     * }
     */
    public static final AddressLayout query$layout() {
        return query$LAYOUT;
    }

    private static final long query$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const ecs_query_t *query
     * }
     */
    public static final long query$offset() {
        return query$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const ecs_query_t *query
     * }
     */
    public static MemorySegment query(MemorySegment struct) {
        return struct.get(query$LAYOUT, query$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const ecs_query_t *query
     * }
     */
    public static void query(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(query$LAYOUT, query$OFFSET, fieldValue);
    }

    private static final AddressLayout variable_names$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("variable_names"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char **variable_names
     * }
     */
    public static final AddressLayout variable_names$layout() {
        return variable_names$LAYOUT;
    }

    private static final long variable_names$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char **variable_names
     * }
     */
    public static final long variable_names$offset() {
        return variable_names$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char **variable_names
     * }
     */
    public static MemorySegment variable_names(MemorySegment struct) {
        return struct.get(variable_names$LAYOUT, variable_names$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char **variable_names
     * }
     */
    public static void variable_names(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(variable_names$LAYOUT, variable_names$OFFSET, fieldValue);
    }

    private static final AddressLayout param$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("param"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *param
     * }
     */
    public static final AddressLayout param$layout() {
        return param$LAYOUT;
    }

    private static final long param$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *param
     * }
     */
    public static final long param$offset() {
        return param$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *param
     * }
     */
    public static MemorySegment param(MemorySegment struct) {
        return struct.get(param$LAYOUT, param$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *param
     * }
     */
    public static void param(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(param$LAYOUT, param$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final AddressLayout ctx$layout() {
        return ctx$LAYOUT;
    }

    private static final long ctx$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static final long ctx$offset() {
        return ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static MemorySegment ctx(MemorySegment struct) {
        return struct.get(ctx$LAYOUT, ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ctx
     * }
     */
    public static void ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx$LAYOUT, ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout binding_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("binding_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *binding_ctx
     * }
     */
    public static final AddressLayout binding_ctx$layout() {
        return binding_ctx$LAYOUT;
    }

    private static final long binding_ctx$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *binding_ctx
     * }
     */
    public static final long binding_ctx$offset() {
        return binding_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *binding_ctx
     * }
     */
    public static MemorySegment binding_ctx(MemorySegment struct) {
        return struct.get(binding_ctx$LAYOUT, binding_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *binding_ctx
     * }
     */
    public static void binding_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(binding_ctx$LAYOUT, binding_ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout callback_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static final AddressLayout callback_ctx$layout() {
        return callback_ctx$LAYOUT;
    }

    private static final long callback_ctx$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static final long callback_ctx$offset() {
        return callback_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static MemorySegment callback_ctx(MemorySegment struct) {
        return struct.get(callback_ctx$LAYOUT, callback_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *callback_ctx
     * }
     */
    public static void callback_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(callback_ctx$LAYOUT, callback_ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout run_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("run_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static final AddressLayout run_ctx$layout() {
        return run_ctx$LAYOUT;
    }

    private static final long run_ctx$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static final long run_ctx$offset() {
        return run_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static MemorySegment run_ctx(MemorySegment struct) {
        return struct.get(run_ctx$LAYOUT, run_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *run_ctx
     * }
     */
    public static void run_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(run_ctx$LAYOUT, run_ctx$OFFSET, fieldValue);
    }

    private static final OfFloat delta_time$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("delta_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static final OfFloat delta_time$layout() {
        return delta_time$LAYOUT;
    }

    private static final long delta_time$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static final long delta_time$offset() {
        return delta_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static float delta_time(MemorySegment struct) {
        return struct.get(delta_time$LAYOUT, delta_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static void delta_time(MemorySegment struct, float fieldValue) {
        struct.set(delta_time$LAYOUT, delta_time$OFFSET, fieldValue);
    }

    private static final OfFloat delta_system_time$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("delta_system_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float delta_system_time
     * }
     */
    public static final OfFloat delta_system_time$layout() {
        return delta_system_time$LAYOUT;
    }

    private static final long delta_system_time$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float delta_system_time
     * }
     */
    public static final long delta_system_time$offset() {
        return delta_system_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float delta_system_time
     * }
     */
    public static float delta_system_time(MemorySegment struct) {
        return struct.get(delta_system_time$LAYOUT, delta_system_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float delta_system_time
     * }
     */
    public static void delta_system_time(MemorySegment struct, float fieldValue) {
        struct.set(delta_system_time$LAYOUT, delta_system_time$OFFSET, fieldValue);
    }

    private static final OfInt frame_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t frame_offset
     * }
     */
    public static final OfInt frame_offset$layout() {
        return frame_offset$LAYOUT;
    }

    private static final long frame_offset$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t frame_offset
     * }
     */
    public static final long frame_offset$offset() {
        return frame_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t frame_offset
     * }
     */
    public static int frame_offset(MemorySegment struct) {
        return struct.get(frame_offset$LAYOUT, frame_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t frame_offset
     * }
     */
    public static void frame_offset(MemorySegment struct, int fieldValue) {
        struct.set(frame_offset$LAYOUT, frame_offset$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final OfInt count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static int count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t count
     * }
     */
    public static void count(MemorySegment struct, int fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 220;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfLong interrupted_by$LAYOUT = (OfLong)$LAYOUT.select(groupElement("interrupted_by"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t interrupted_by
     * }
     */
    public static final OfLong interrupted_by$layout() {
        return interrupted_by$LAYOUT;
    }

    private static final long interrupted_by$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t interrupted_by
     * }
     */
    public static final long interrupted_by$offset() {
        return interrupted_by$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t interrupted_by
     * }
     */
    public static long interrupted_by(MemorySegment struct) {
        return struct.get(interrupted_by$LAYOUT, interrupted_by$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t interrupted_by
     * }
     */
    public static void interrupted_by(MemorySegment struct, long fieldValue) {
        struct.set(interrupted_by$LAYOUT, interrupted_by$OFFSET, fieldValue);
    }

    private static final GroupLayout priv_$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("priv_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_iter_private_t priv_
     * }
     */
    public static final GroupLayout priv_$layout() {
        return priv_$LAYOUT;
    }

    private static final long priv_$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_iter_private_t priv_
     * }
     */
    public static final long priv_$offset() {
        return priv_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_iter_private_t priv_
     * }
     */
    public static MemorySegment priv_(MemorySegment struct) {
        return struct.asSlice(priv_$OFFSET, priv_$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_iter_private_t priv_
     * }
     */
    public static void priv_(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, priv_$OFFSET, priv_$LAYOUT.byteSize());
    }

    private static final AddressLayout next$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("next"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_iter_next_action_t next
     * }
     */
    public static final AddressLayout next$layout() {
        return next$LAYOUT;
    }

    private static final long next$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_iter_next_action_t next
     * }
     */
    public static final long next$offset() {
        return next$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_iter_next_action_t next
     * }
     */
    public static MemorySegment next(MemorySegment struct) {
        return struct.get(next$LAYOUT, next$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_iter_next_action_t next
     * }
     */
    public static void next(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(next$LAYOUT, next$OFFSET, fieldValue);
    }

    private static final AddressLayout callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_iter_action_t callback
     * }
     */
    public static final AddressLayout callback$layout() {
        return callback$LAYOUT;
    }

    private static final long callback$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_iter_action_t callback
     * }
     */
    public static final long callback$offset() {
        return callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_iter_action_t callback
     * }
     */
    public static MemorySegment callback(MemorySegment struct) {
        return struct.get(callback$LAYOUT, callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_iter_action_t callback
     * }
     */
    public static void callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(callback$LAYOUT, callback$OFFSET, fieldValue);
    }

    private static final AddressLayout fini$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fini"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_iter_fini_action_t fini
     * }
     */
    public static final AddressLayout fini$layout() {
        return fini$LAYOUT;
    }

    private static final long fini$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_iter_fini_action_t fini
     * }
     */
    public static final long fini$offset() {
        return fini$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_iter_fini_action_t fini
     * }
     */
    public static MemorySegment fini(MemorySegment struct) {
        return struct.get(fini$LAYOUT, fini$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_iter_fini_action_t fini
     * }
     */
    public static void fini(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fini$LAYOUT, fini$OFFSET, fieldValue);
    }

    private static final AddressLayout chain_it$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("chain_it"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_iter_t *chain_it
     * }
     */
    public static final AddressLayout chain_it$layout() {
        return chain_it$LAYOUT;
    }

    private static final long chain_it$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_iter_t *chain_it
     * }
     */
    public static final long chain_it$offset() {
        return chain_it$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_iter_t *chain_it
     * }
     */
    public static MemorySegment chain_it(MemorySegment struct) {
        return struct.get(chain_it$LAYOUT, chain_it$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_iter_t *chain_it
     * }
     */
    public static void chain_it(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(chain_it$LAYOUT, chain_it$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

