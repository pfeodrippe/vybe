// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_stack_cursor_t {
 *     struct ecs_stack_cursor_t *prev;
 *     struct ecs_stack_page_t *page;
 *     int16_t sp;
 *     bool is_free;
 * }
 * }
 */
public class ecs_stack_cursor_t {

    ecs_stack_cursor_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_POINTER.withName("prev"),
        flecs.C_POINTER.withName("page"),
        flecs.C_SHORT.withName("sp"),
        flecs.C_BOOL.withName("is_free"),
        MemoryLayout.paddingLayout(5)
    ).withName("ecs_stack_cursor_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout prev$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("prev"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ecs_stack_cursor_t *prev
     * }
     */
    public static final AddressLayout prev$layout() {
        return prev$LAYOUT;
    }

    private static final long prev$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ecs_stack_cursor_t *prev
     * }
     */
    public static final long prev$offset() {
        return prev$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ecs_stack_cursor_t *prev
     * }
     */
    public static MemorySegment prev(MemorySegment struct) {
        return struct.get(prev$LAYOUT, prev$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ecs_stack_cursor_t *prev
     * }
     */
    public static void prev(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(prev$LAYOUT, prev$OFFSET, fieldValue);
    }

    private static final AddressLayout page$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("page"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ecs_stack_page_t *page
     * }
     */
    public static final AddressLayout page$layout() {
        return page$LAYOUT;
    }

    private static final long page$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ecs_stack_page_t *page
     * }
     */
    public static final long page$offset() {
        return page$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ecs_stack_page_t *page
     * }
     */
    public static MemorySegment page(MemorySegment struct) {
        return struct.get(page$LAYOUT, page$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ecs_stack_page_t *page
     * }
     */
    public static void page(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(page$LAYOUT, page$OFFSET, fieldValue);
    }

    private static final OfShort sp$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t sp
     * }
     */
    public static final OfShort sp$layout() {
        return sp$LAYOUT;
    }

    private static final long sp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t sp
     * }
     */
    public static final long sp$offset() {
        return sp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t sp
     * }
     */
    public static short sp(MemorySegment struct) {
        return struct.get(sp$LAYOUT, sp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t sp
     * }
     */
    public static void sp(MemorySegment struct, short fieldValue) {
        struct.set(sp$LAYOUT, sp$OFFSET, fieldValue);
    }

    private static final OfBoolean is_free$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_free
     * }
     */
    public static final OfBoolean is_free$layout() {
        return is_free$LAYOUT;
    }

    private static final long is_free$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_free
     * }
     */
    public static final long is_free$offset() {
        return is_free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_free
     * }
     */
    public static boolean is_free(MemorySegment struct) {
        return struct.get(is_free$LAYOUT, is_free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_free
     * }
     */
    public static void is_free(MemorySegment struct, boolean fieldValue) {
        struct.set(is_free$LAYOUT, is_free$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

