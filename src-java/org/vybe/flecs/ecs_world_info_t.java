// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_world_info_t {
 *     ecs_entity_t last_component_id;
 *     ecs_entity_t min_id;
 *     ecs_entity_t max_id;
 *     float delta_time_raw;
 *     float delta_time;
 *     float time_scale;
 *     float target_fps;
 *     float frame_time_total;
 *     float system_time_total;
 *     float emit_time_total;
 *     float merge_time_total;
 *     float rematch_time_total;
 *     double world_time_total;
 *     double world_time_total_raw;
 *     int64_t frame_count_total;
 *     int64_t merge_count_total;
 *     int64_t eval_comp_monitors_total;
 *     int64_t rematch_count_total;
 *     int64_t id_create_total;
 *     int64_t id_delete_total;
 *     int64_t table_create_total;
 *     int64_t table_delete_total;
 *     int64_t pipeline_build_count_total;
 *     int64_t systems_ran_frame;
 *     int64_t observers_ran_frame;
 *     int32_t tag_id_count;
 *     int32_t component_id_count;
 *     int32_t pair_id_count;
 *     int32_t table_count;
 *     int32_t empty_table_count;
 *     struct {
 *         int64_t add_count;
 *         int64_t remove_count;
 *         int64_t delete_count;
 *         int64_t clear_count;
 *         int64_t set_count;
 *         int64_t ensure_count;
 *         int64_t modified_count;
 *         int64_t discard_count;
 *         int64_t event_count;
 *         int64_t other_count;
 *         int64_t batched_entity_count;
 *         int64_t batched_command_count;
 *     } cmd;
 *     const char *name_prefix;
 * }
 * }
 */
public class ecs_world_info_t {

    ecs_world_info_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_LONG_LONG.withName("last_component_id"),
        flecs.C_LONG_LONG.withName("min_id"),
        flecs.C_LONG_LONG.withName("max_id"),
        flecs.C_FLOAT.withName("delta_time_raw"),
        flecs.C_FLOAT.withName("delta_time"),
        flecs.C_FLOAT.withName("time_scale"),
        flecs.C_FLOAT.withName("target_fps"),
        flecs.C_FLOAT.withName("frame_time_total"),
        flecs.C_FLOAT.withName("system_time_total"),
        flecs.C_FLOAT.withName("emit_time_total"),
        flecs.C_FLOAT.withName("merge_time_total"),
        flecs.C_FLOAT.withName("rematch_time_total"),
        MemoryLayout.paddingLayout(4),
        flecs.C_DOUBLE.withName("world_time_total"),
        flecs.C_DOUBLE.withName("world_time_total_raw"),
        flecs.C_LONG_LONG.withName("frame_count_total"),
        flecs.C_LONG_LONG.withName("merge_count_total"),
        flecs.C_LONG_LONG.withName("eval_comp_monitors_total"),
        flecs.C_LONG_LONG.withName("rematch_count_total"),
        flecs.C_LONG_LONG.withName("id_create_total"),
        flecs.C_LONG_LONG.withName("id_delete_total"),
        flecs.C_LONG_LONG.withName("table_create_total"),
        flecs.C_LONG_LONG.withName("table_delete_total"),
        flecs.C_LONG_LONG.withName("pipeline_build_count_total"),
        flecs.C_LONG_LONG.withName("systems_ran_frame"),
        flecs.C_LONG_LONG.withName("observers_ran_frame"),
        flecs.C_INT.withName("tag_id_count"),
        flecs.C_INT.withName("component_id_count"),
        flecs.C_INT.withName("pair_id_count"),
        flecs.C_INT.withName("table_count"),
        flecs.C_INT.withName("empty_table_count"),
        MemoryLayout.paddingLayout(4),
        ecs_world_info_t.cmd.layout().withName("cmd"),
        flecs.C_POINTER.withName("name_prefix")
    ).withName("ecs_world_info_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong last_component_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("last_component_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t last_component_id
     * }
     */
    public static final OfLong last_component_id$layout() {
        return last_component_id$LAYOUT;
    }

    private static final long last_component_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t last_component_id
     * }
     */
    public static final long last_component_id$offset() {
        return last_component_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t last_component_id
     * }
     */
    public static long last_component_id(MemorySegment struct) {
        return struct.get(last_component_id$LAYOUT, last_component_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t last_component_id
     * }
     */
    public static void last_component_id(MemorySegment struct, long fieldValue) {
        struct.set(last_component_id$LAYOUT, last_component_id$OFFSET, fieldValue);
    }

    private static final OfLong min_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("min_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t min_id
     * }
     */
    public static final OfLong min_id$layout() {
        return min_id$LAYOUT;
    }

    private static final long min_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t min_id
     * }
     */
    public static final long min_id$offset() {
        return min_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t min_id
     * }
     */
    public static long min_id(MemorySegment struct) {
        return struct.get(min_id$LAYOUT, min_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t min_id
     * }
     */
    public static void min_id(MemorySegment struct, long fieldValue) {
        struct.set(min_id$LAYOUT, min_id$OFFSET, fieldValue);
    }

    private static final OfLong max_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("max_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_entity_t max_id
     * }
     */
    public static final OfLong max_id$layout() {
        return max_id$LAYOUT;
    }

    private static final long max_id$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_entity_t max_id
     * }
     */
    public static final long max_id$offset() {
        return max_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_entity_t max_id
     * }
     */
    public static long max_id(MemorySegment struct) {
        return struct.get(max_id$LAYOUT, max_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_entity_t max_id
     * }
     */
    public static void max_id(MemorySegment struct, long fieldValue) {
        struct.set(max_id$LAYOUT, max_id$OFFSET, fieldValue);
    }

    private static final OfFloat delta_time_raw$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("delta_time_raw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float delta_time_raw
     * }
     */
    public static final OfFloat delta_time_raw$layout() {
        return delta_time_raw$LAYOUT;
    }

    private static final long delta_time_raw$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float delta_time_raw
     * }
     */
    public static final long delta_time_raw$offset() {
        return delta_time_raw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float delta_time_raw
     * }
     */
    public static float delta_time_raw(MemorySegment struct) {
        return struct.get(delta_time_raw$LAYOUT, delta_time_raw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float delta_time_raw
     * }
     */
    public static void delta_time_raw(MemorySegment struct, float fieldValue) {
        struct.set(delta_time_raw$LAYOUT, delta_time_raw$OFFSET, fieldValue);
    }

    private static final OfFloat delta_time$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("delta_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static final OfFloat delta_time$layout() {
        return delta_time$LAYOUT;
    }

    private static final long delta_time$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static final long delta_time$offset() {
        return delta_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static float delta_time(MemorySegment struct) {
        return struct.get(delta_time$LAYOUT, delta_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float delta_time
     * }
     */
    public static void delta_time(MemorySegment struct, float fieldValue) {
        struct.set(delta_time$LAYOUT, delta_time$OFFSET, fieldValue);
    }

    private static final OfFloat time_scale$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("time_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float time_scale
     * }
     */
    public static final OfFloat time_scale$layout() {
        return time_scale$LAYOUT;
    }

    private static final long time_scale$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float time_scale
     * }
     */
    public static final long time_scale$offset() {
        return time_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float time_scale
     * }
     */
    public static float time_scale(MemorySegment struct) {
        return struct.get(time_scale$LAYOUT, time_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float time_scale
     * }
     */
    public static void time_scale(MemorySegment struct, float fieldValue) {
        struct.set(time_scale$LAYOUT, time_scale$OFFSET, fieldValue);
    }

    private static final OfFloat target_fps$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("target_fps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float target_fps
     * }
     */
    public static final OfFloat target_fps$layout() {
        return target_fps$LAYOUT;
    }

    private static final long target_fps$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float target_fps
     * }
     */
    public static final long target_fps$offset() {
        return target_fps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float target_fps
     * }
     */
    public static float target_fps(MemorySegment struct) {
        return struct.get(target_fps$LAYOUT, target_fps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float target_fps
     * }
     */
    public static void target_fps(MemorySegment struct, float fieldValue) {
        struct.set(target_fps$LAYOUT, target_fps$OFFSET, fieldValue);
    }

    private static final OfFloat frame_time_total$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("frame_time_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float frame_time_total
     * }
     */
    public static final OfFloat frame_time_total$layout() {
        return frame_time_total$LAYOUT;
    }

    private static final long frame_time_total$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float frame_time_total
     * }
     */
    public static final long frame_time_total$offset() {
        return frame_time_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float frame_time_total
     * }
     */
    public static float frame_time_total(MemorySegment struct) {
        return struct.get(frame_time_total$LAYOUT, frame_time_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float frame_time_total
     * }
     */
    public static void frame_time_total(MemorySegment struct, float fieldValue) {
        struct.set(frame_time_total$LAYOUT, frame_time_total$OFFSET, fieldValue);
    }

    private static final OfFloat system_time_total$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("system_time_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float system_time_total
     * }
     */
    public static final OfFloat system_time_total$layout() {
        return system_time_total$LAYOUT;
    }

    private static final long system_time_total$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float system_time_total
     * }
     */
    public static final long system_time_total$offset() {
        return system_time_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float system_time_total
     * }
     */
    public static float system_time_total(MemorySegment struct) {
        return struct.get(system_time_total$LAYOUT, system_time_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float system_time_total
     * }
     */
    public static void system_time_total(MemorySegment struct, float fieldValue) {
        struct.set(system_time_total$LAYOUT, system_time_total$OFFSET, fieldValue);
    }

    private static final OfFloat emit_time_total$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("emit_time_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float emit_time_total
     * }
     */
    public static final OfFloat emit_time_total$layout() {
        return emit_time_total$LAYOUT;
    }

    private static final long emit_time_total$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float emit_time_total
     * }
     */
    public static final long emit_time_total$offset() {
        return emit_time_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float emit_time_total
     * }
     */
    public static float emit_time_total(MemorySegment struct) {
        return struct.get(emit_time_total$LAYOUT, emit_time_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float emit_time_total
     * }
     */
    public static void emit_time_total(MemorySegment struct, float fieldValue) {
        struct.set(emit_time_total$LAYOUT, emit_time_total$OFFSET, fieldValue);
    }

    private static final OfFloat merge_time_total$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("merge_time_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float merge_time_total
     * }
     */
    public static final OfFloat merge_time_total$layout() {
        return merge_time_total$LAYOUT;
    }

    private static final long merge_time_total$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float merge_time_total
     * }
     */
    public static final long merge_time_total$offset() {
        return merge_time_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float merge_time_total
     * }
     */
    public static float merge_time_total(MemorySegment struct) {
        return struct.get(merge_time_total$LAYOUT, merge_time_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float merge_time_total
     * }
     */
    public static void merge_time_total(MemorySegment struct, float fieldValue) {
        struct.set(merge_time_total$LAYOUT, merge_time_total$OFFSET, fieldValue);
    }

    private static final OfFloat rematch_time_total$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("rematch_time_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float rematch_time_total
     * }
     */
    public static final OfFloat rematch_time_total$layout() {
        return rematch_time_total$LAYOUT;
    }

    private static final long rematch_time_total$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float rematch_time_total
     * }
     */
    public static final long rematch_time_total$offset() {
        return rematch_time_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float rematch_time_total
     * }
     */
    public static float rematch_time_total(MemorySegment struct) {
        return struct.get(rematch_time_total$LAYOUT, rematch_time_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float rematch_time_total
     * }
     */
    public static void rematch_time_total(MemorySegment struct, float fieldValue) {
        struct.set(rematch_time_total$LAYOUT, rematch_time_total$OFFSET, fieldValue);
    }

    private static final OfDouble world_time_total$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("world_time_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double world_time_total
     * }
     */
    public static final OfDouble world_time_total$layout() {
        return world_time_total$LAYOUT;
    }

    private static final long world_time_total$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double world_time_total
     * }
     */
    public static final long world_time_total$offset() {
        return world_time_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double world_time_total
     * }
     */
    public static double world_time_total(MemorySegment struct) {
        return struct.get(world_time_total$LAYOUT, world_time_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double world_time_total
     * }
     */
    public static void world_time_total(MemorySegment struct, double fieldValue) {
        struct.set(world_time_total$LAYOUT, world_time_total$OFFSET, fieldValue);
    }

    private static final OfDouble world_time_total_raw$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("world_time_total_raw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double world_time_total_raw
     * }
     */
    public static final OfDouble world_time_total_raw$layout() {
        return world_time_total_raw$LAYOUT;
    }

    private static final long world_time_total_raw$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double world_time_total_raw
     * }
     */
    public static final long world_time_total_raw$offset() {
        return world_time_total_raw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double world_time_total_raw
     * }
     */
    public static double world_time_total_raw(MemorySegment struct) {
        return struct.get(world_time_total_raw$LAYOUT, world_time_total_raw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double world_time_total_raw
     * }
     */
    public static void world_time_total_raw(MemorySegment struct, double fieldValue) {
        struct.set(world_time_total_raw$LAYOUT, world_time_total_raw$OFFSET, fieldValue);
    }

    private static final OfLong frame_count_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("frame_count_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t frame_count_total
     * }
     */
    public static final OfLong frame_count_total$layout() {
        return frame_count_total$LAYOUT;
    }

    private static final long frame_count_total$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t frame_count_total
     * }
     */
    public static final long frame_count_total$offset() {
        return frame_count_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t frame_count_total
     * }
     */
    public static long frame_count_total(MemorySegment struct) {
        return struct.get(frame_count_total$LAYOUT, frame_count_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t frame_count_total
     * }
     */
    public static void frame_count_total(MemorySegment struct, long fieldValue) {
        struct.set(frame_count_total$LAYOUT, frame_count_total$OFFSET, fieldValue);
    }

    private static final OfLong merge_count_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("merge_count_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t merge_count_total
     * }
     */
    public static final OfLong merge_count_total$layout() {
        return merge_count_total$LAYOUT;
    }

    private static final long merge_count_total$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t merge_count_total
     * }
     */
    public static final long merge_count_total$offset() {
        return merge_count_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t merge_count_total
     * }
     */
    public static long merge_count_total(MemorySegment struct) {
        return struct.get(merge_count_total$LAYOUT, merge_count_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t merge_count_total
     * }
     */
    public static void merge_count_total(MemorySegment struct, long fieldValue) {
        struct.set(merge_count_total$LAYOUT, merge_count_total$OFFSET, fieldValue);
    }

    private static final OfLong eval_comp_monitors_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("eval_comp_monitors_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t eval_comp_monitors_total
     * }
     */
    public static final OfLong eval_comp_monitors_total$layout() {
        return eval_comp_monitors_total$LAYOUT;
    }

    private static final long eval_comp_monitors_total$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t eval_comp_monitors_total
     * }
     */
    public static final long eval_comp_monitors_total$offset() {
        return eval_comp_monitors_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t eval_comp_monitors_total
     * }
     */
    public static long eval_comp_monitors_total(MemorySegment struct) {
        return struct.get(eval_comp_monitors_total$LAYOUT, eval_comp_monitors_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t eval_comp_monitors_total
     * }
     */
    public static void eval_comp_monitors_total(MemorySegment struct, long fieldValue) {
        struct.set(eval_comp_monitors_total$LAYOUT, eval_comp_monitors_total$OFFSET, fieldValue);
    }

    private static final OfLong rematch_count_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rematch_count_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t rematch_count_total
     * }
     */
    public static final OfLong rematch_count_total$layout() {
        return rematch_count_total$LAYOUT;
    }

    private static final long rematch_count_total$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t rematch_count_total
     * }
     */
    public static final long rematch_count_total$offset() {
        return rematch_count_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t rematch_count_total
     * }
     */
    public static long rematch_count_total(MemorySegment struct) {
        return struct.get(rematch_count_total$LAYOUT, rematch_count_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t rematch_count_total
     * }
     */
    public static void rematch_count_total(MemorySegment struct, long fieldValue) {
        struct.set(rematch_count_total$LAYOUT, rematch_count_total$OFFSET, fieldValue);
    }

    private static final OfLong id_create_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("id_create_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t id_create_total
     * }
     */
    public static final OfLong id_create_total$layout() {
        return id_create_total$LAYOUT;
    }

    private static final long id_create_total$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t id_create_total
     * }
     */
    public static final long id_create_total$offset() {
        return id_create_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t id_create_total
     * }
     */
    public static long id_create_total(MemorySegment struct) {
        return struct.get(id_create_total$LAYOUT, id_create_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t id_create_total
     * }
     */
    public static void id_create_total(MemorySegment struct, long fieldValue) {
        struct.set(id_create_total$LAYOUT, id_create_total$OFFSET, fieldValue);
    }

    private static final OfLong id_delete_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("id_delete_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t id_delete_total
     * }
     */
    public static final OfLong id_delete_total$layout() {
        return id_delete_total$LAYOUT;
    }

    private static final long id_delete_total$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t id_delete_total
     * }
     */
    public static final long id_delete_total$offset() {
        return id_delete_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t id_delete_total
     * }
     */
    public static long id_delete_total(MemorySegment struct) {
        return struct.get(id_delete_total$LAYOUT, id_delete_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t id_delete_total
     * }
     */
    public static void id_delete_total(MemorySegment struct, long fieldValue) {
        struct.set(id_delete_total$LAYOUT, id_delete_total$OFFSET, fieldValue);
    }

    private static final OfLong table_create_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("table_create_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t table_create_total
     * }
     */
    public static final OfLong table_create_total$layout() {
        return table_create_total$LAYOUT;
    }

    private static final long table_create_total$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t table_create_total
     * }
     */
    public static final long table_create_total$offset() {
        return table_create_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t table_create_total
     * }
     */
    public static long table_create_total(MemorySegment struct) {
        return struct.get(table_create_total$LAYOUT, table_create_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t table_create_total
     * }
     */
    public static void table_create_total(MemorySegment struct, long fieldValue) {
        struct.set(table_create_total$LAYOUT, table_create_total$OFFSET, fieldValue);
    }

    private static final OfLong table_delete_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("table_delete_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t table_delete_total
     * }
     */
    public static final OfLong table_delete_total$layout() {
        return table_delete_total$LAYOUT;
    }

    private static final long table_delete_total$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t table_delete_total
     * }
     */
    public static final long table_delete_total$offset() {
        return table_delete_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t table_delete_total
     * }
     */
    public static long table_delete_total(MemorySegment struct) {
        return struct.get(table_delete_total$LAYOUT, table_delete_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t table_delete_total
     * }
     */
    public static void table_delete_total(MemorySegment struct, long fieldValue) {
        struct.set(table_delete_total$LAYOUT, table_delete_total$OFFSET, fieldValue);
    }

    private static final OfLong pipeline_build_count_total$LAYOUT = (OfLong)$LAYOUT.select(groupElement("pipeline_build_count_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t pipeline_build_count_total
     * }
     */
    public static final OfLong pipeline_build_count_total$layout() {
        return pipeline_build_count_total$LAYOUT;
    }

    private static final long pipeline_build_count_total$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t pipeline_build_count_total
     * }
     */
    public static final long pipeline_build_count_total$offset() {
        return pipeline_build_count_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t pipeline_build_count_total
     * }
     */
    public static long pipeline_build_count_total(MemorySegment struct) {
        return struct.get(pipeline_build_count_total$LAYOUT, pipeline_build_count_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t pipeline_build_count_total
     * }
     */
    public static void pipeline_build_count_total(MemorySegment struct, long fieldValue) {
        struct.set(pipeline_build_count_total$LAYOUT, pipeline_build_count_total$OFFSET, fieldValue);
    }

    private static final OfLong systems_ran_frame$LAYOUT = (OfLong)$LAYOUT.select(groupElement("systems_ran_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t systems_ran_frame
     * }
     */
    public static final OfLong systems_ran_frame$layout() {
        return systems_ran_frame$LAYOUT;
    }

    private static final long systems_ran_frame$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t systems_ran_frame
     * }
     */
    public static final long systems_ran_frame$offset() {
        return systems_ran_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t systems_ran_frame
     * }
     */
    public static long systems_ran_frame(MemorySegment struct) {
        return struct.get(systems_ran_frame$LAYOUT, systems_ran_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t systems_ran_frame
     * }
     */
    public static void systems_ran_frame(MemorySegment struct, long fieldValue) {
        struct.set(systems_ran_frame$LAYOUT, systems_ran_frame$OFFSET, fieldValue);
    }

    private static final OfLong observers_ran_frame$LAYOUT = (OfLong)$LAYOUT.select(groupElement("observers_ran_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t observers_ran_frame
     * }
     */
    public static final OfLong observers_ran_frame$layout() {
        return observers_ran_frame$LAYOUT;
    }

    private static final long observers_ran_frame$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t observers_ran_frame
     * }
     */
    public static final long observers_ran_frame$offset() {
        return observers_ran_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t observers_ran_frame
     * }
     */
    public static long observers_ran_frame(MemorySegment struct) {
        return struct.get(observers_ran_frame$LAYOUT, observers_ran_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t observers_ran_frame
     * }
     */
    public static void observers_ran_frame(MemorySegment struct, long fieldValue) {
        struct.set(observers_ran_frame$LAYOUT, observers_ran_frame$OFFSET, fieldValue);
    }

    private static final OfInt tag_id_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tag_id_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t tag_id_count
     * }
     */
    public static final OfInt tag_id_count$layout() {
        return tag_id_count$LAYOUT;
    }

    private static final long tag_id_count$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t tag_id_count
     * }
     */
    public static final long tag_id_count$offset() {
        return tag_id_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t tag_id_count
     * }
     */
    public static int tag_id_count(MemorySegment struct) {
        return struct.get(tag_id_count$LAYOUT, tag_id_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t tag_id_count
     * }
     */
    public static void tag_id_count(MemorySegment struct, int fieldValue) {
        struct.set(tag_id_count$LAYOUT, tag_id_count$OFFSET, fieldValue);
    }

    private static final OfInt component_id_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("component_id_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t component_id_count
     * }
     */
    public static final OfInt component_id_count$layout() {
        return component_id_count$LAYOUT;
    }

    private static final long component_id_count$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t component_id_count
     * }
     */
    public static final long component_id_count$offset() {
        return component_id_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t component_id_count
     * }
     */
    public static int component_id_count(MemorySegment struct) {
        return struct.get(component_id_count$LAYOUT, component_id_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t component_id_count
     * }
     */
    public static void component_id_count(MemorySegment struct, int fieldValue) {
        struct.set(component_id_count$LAYOUT, component_id_count$OFFSET, fieldValue);
    }

    private static final OfInt pair_id_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pair_id_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t pair_id_count
     * }
     */
    public static final OfInt pair_id_count$layout() {
        return pair_id_count$LAYOUT;
    }

    private static final long pair_id_count$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t pair_id_count
     * }
     */
    public static final long pair_id_count$offset() {
        return pair_id_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t pair_id_count
     * }
     */
    public static int pair_id_count(MemorySegment struct) {
        return struct.get(pair_id_count$LAYOUT, pair_id_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t pair_id_count
     * }
     */
    public static void pair_id_count(MemorySegment struct, int fieldValue) {
        struct.set(pair_id_count$LAYOUT, pair_id_count$OFFSET, fieldValue);
    }

    private static final OfInt table_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("table_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t table_count
     * }
     */
    public static final OfInt table_count$layout() {
        return table_count$LAYOUT;
    }

    private static final long table_count$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t table_count
     * }
     */
    public static final long table_count$offset() {
        return table_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t table_count
     * }
     */
    public static int table_count(MemorySegment struct) {
        return struct.get(table_count$LAYOUT, table_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t table_count
     * }
     */
    public static void table_count(MemorySegment struct, int fieldValue) {
        struct.set(table_count$LAYOUT, table_count$OFFSET, fieldValue);
    }

    private static final OfInt empty_table_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("empty_table_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t empty_table_count
     * }
     */
    public static final OfInt empty_table_count$layout() {
        return empty_table_count$LAYOUT;
    }

    private static final long empty_table_count$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t empty_table_count
     * }
     */
    public static final long empty_table_count$offset() {
        return empty_table_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t empty_table_count
     * }
     */
    public static int empty_table_count(MemorySegment struct) {
        return struct.get(empty_table_count$LAYOUT, empty_table_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t empty_table_count
     * }
     */
    public static void empty_table_count(MemorySegment struct, int fieldValue) {
        struct.set(empty_table_count$LAYOUT, empty_table_count$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     int64_t add_count;
     *     int64_t remove_count;
     *     int64_t delete_count;
     *     int64_t clear_count;
     *     int64_t set_count;
     *     int64_t ensure_count;
     *     int64_t modified_count;
     *     int64_t discard_count;
     *     int64_t event_count;
     *     int64_t other_count;
     *     int64_t batched_entity_count;
     *     int64_t batched_command_count;
     * }
     * }
     */
    public static class cmd {

        cmd() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            flecs.C_LONG_LONG.withName("add_count"),
            flecs.C_LONG_LONG.withName("remove_count"),
            flecs.C_LONG_LONG.withName("delete_count"),
            flecs.C_LONG_LONG.withName("clear_count"),
            flecs.C_LONG_LONG.withName("set_count"),
            flecs.C_LONG_LONG.withName("ensure_count"),
            flecs.C_LONG_LONG.withName("modified_count"),
            flecs.C_LONG_LONG.withName("discard_count"),
            flecs.C_LONG_LONG.withName("event_count"),
            flecs.C_LONG_LONG.withName("other_count"),
            flecs.C_LONG_LONG.withName("batched_entity_count"),
            flecs.C_LONG_LONG.withName("batched_command_count")
        ).withName("$anon$4604:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfLong add_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("add_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t add_count
         * }
         */
        public static final OfLong add_count$layout() {
            return add_count$LAYOUT;
        }

        private static final long add_count$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t add_count
         * }
         */
        public static final long add_count$offset() {
            return add_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t add_count
         * }
         */
        public static long add_count(MemorySegment struct) {
            return struct.get(add_count$LAYOUT, add_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t add_count
         * }
         */
        public static void add_count(MemorySegment struct, long fieldValue) {
            struct.set(add_count$LAYOUT, add_count$OFFSET, fieldValue);
        }

        private static final OfLong remove_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("remove_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t remove_count
         * }
         */
        public static final OfLong remove_count$layout() {
            return remove_count$LAYOUT;
        }

        private static final long remove_count$OFFSET = 8;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t remove_count
         * }
         */
        public static final long remove_count$offset() {
            return remove_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t remove_count
         * }
         */
        public static long remove_count(MemorySegment struct) {
            return struct.get(remove_count$LAYOUT, remove_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t remove_count
         * }
         */
        public static void remove_count(MemorySegment struct, long fieldValue) {
            struct.set(remove_count$LAYOUT, remove_count$OFFSET, fieldValue);
        }

        private static final OfLong delete_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("delete_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t delete_count
         * }
         */
        public static final OfLong delete_count$layout() {
            return delete_count$LAYOUT;
        }

        private static final long delete_count$OFFSET = 16;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t delete_count
         * }
         */
        public static final long delete_count$offset() {
            return delete_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t delete_count
         * }
         */
        public static long delete_count(MemorySegment struct) {
            return struct.get(delete_count$LAYOUT, delete_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t delete_count
         * }
         */
        public static void delete_count(MemorySegment struct, long fieldValue) {
            struct.set(delete_count$LAYOUT, delete_count$OFFSET, fieldValue);
        }

        private static final OfLong clear_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("clear_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t clear_count
         * }
         */
        public static final OfLong clear_count$layout() {
            return clear_count$LAYOUT;
        }

        private static final long clear_count$OFFSET = 24;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t clear_count
         * }
         */
        public static final long clear_count$offset() {
            return clear_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t clear_count
         * }
         */
        public static long clear_count(MemorySegment struct) {
            return struct.get(clear_count$LAYOUT, clear_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t clear_count
         * }
         */
        public static void clear_count(MemorySegment struct, long fieldValue) {
            struct.set(clear_count$LAYOUT, clear_count$OFFSET, fieldValue);
        }

        private static final OfLong set_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("set_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t set_count
         * }
         */
        public static final OfLong set_count$layout() {
            return set_count$LAYOUT;
        }

        private static final long set_count$OFFSET = 32;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t set_count
         * }
         */
        public static final long set_count$offset() {
            return set_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t set_count
         * }
         */
        public static long set_count(MemorySegment struct) {
            return struct.get(set_count$LAYOUT, set_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t set_count
         * }
         */
        public static void set_count(MemorySegment struct, long fieldValue) {
            struct.set(set_count$LAYOUT, set_count$OFFSET, fieldValue);
        }

        private static final OfLong ensure_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ensure_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t ensure_count
         * }
         */
        public static final OfLong ensure_count$layout() {
            return ensure_count$LAYOUT;
        }

        private static final long ensure_count$OFFSET = 40;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t ensure_count
         * }
         */
        public static final long ensure_count$offset() {
            return ensure_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t ensure_count
         * }
         */
        public static long ensure_count(MemorySegment struct) {
            return struct.get(ensure_count$LAYOUT, ensure_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t ensure_count
         * }
         */
        public static void ensure_count(MemorySegment struct, long fieldValue) {
            struct.set(ensure_count$LAYOUT, ensure_count$OFFSET, fieldValue);
        }

        private static final OfLong modified_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("modified_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t modified_count
         * }
         */
        public static final OfLong modified_count$layout() {
            return modified_count$LAYOUT;
        }

        private static final long modified_count$OFFSET = 48;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t modified_count
         * }
         */
        public static final long modified_count$offset() {
            return modified_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t modified_count
         * }
         */
        public static long modified_count(MemorySegment struct) {
            return struct.get(modified_count$LAYOUT, modified_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t modified_count
         * }
         */
        public static void modified_count(MemorySegment struct, long fieldValue) {
            struct.set(modified_count$LAYOUT, modified_count$OFFSET, fieldValue);
        }

        private static final OfLong discard_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("discard_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t discard_count
         * }
         */
        public static final OfLong discard_count$layout() {
            return discard_count$LAYOUT;
        }

        private static final long discard_count$OFFSET = 56;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t discard_count
         * }
         */
        public static final long discard_count$offset() {
            return discard_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t discard_count
         * }
         */
        public static long discard_count(MemorySegment struct) {
            return struct.get(discard_count$LAYOUT, discard_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t discard_count
         * }
         */
        public static void discard_count(MemorySegment struct, long fieldValue) {
            struct.set(discard_count$LAYOUT, discard_count$OFFSET, fieldValue);
        }

        private static final OfLong event_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("event_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t event_count
         * }
         */
        public static final OfLong event_count$layout() {
            return event_count$LAYOUT;
        }

        private static final long event_count$OFFSET = 64;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t event_count
         * }
         */
        public static final long event_count$offset() {
            return event_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t event_count
         * }
         */
        public static long event_count(MemorySegment struct) {
            return struct.get(event_count$LAYOUT, event_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t event_count
         * }
         */
        public static void event_count(MemorySegment struct, long fieldValue) {
            struct.set(event_count$LAYOUT, event_count$OFFSET, fieldValue);
        }

        private static final OfLong other_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("other_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t other_count
         * }
         */
        public static final OfLong other_count$layout() {
            return other_count$LAYOUT;
        }

        private static final long other_count$OFFSET = 72;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t other_count
         * }
         */
        public static final long other_count$offset() {
            return other_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t other_count
         * }
         */
        public static long other_count(MemorySegment struct) {
            return struct.get(other_count$LAYOUT, other_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t other_count
         * }
         */
        public static void other_count(MemorySegment struct, long fieldValue) {
            struct.set(other_count$LAYOUT, other_count$OFFSET, fieldValue);
        }

        private static final OfLong batched_entity_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("batched_entity_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t batched_entity_count
         * }
         */
        public static final OfLong batched_entity_count$layout() {
            return batched_entity_count$LAYOUT;
        }

        private static final long batched_entity_count$OFFSET = 80;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t batched_entity_count
         * }
         */
        public static final long batched_entity_count$offset() {
            return batched_entity_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t batched_entity_count
         * }
         */
        public static long batched_entity_count(MemorySegment struct) {
            return struct.get(batched_entity_count$LAYOUT, batched_entity_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t batched_entity_count
         * }
         */
        public static void batched_entity_count(MemorySegment struct, long fieldValue) {
            struct.set(batched_entity_count$LAYOUT, batched_entity_count$OFFSET, fieldValue);
        }

        private static final OfLong batched_command_count$LAYOUT = (OfLong)$LAYOUT.select(groupElement("batched_command_count"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int64_t batched_command_count
         * }
         */
        public static final OfLong batched_command_count$layout() {
            return batched_command_count$LAYOUT;
        }

        private static final long batched_command_count$OFFSET = 88;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int64_t batched_command_count
         * }
         */
        public static final long batched_command_count$offset() {
            return batched_command_count$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int64_t batched_command_count
         * }
         */
        public static long batched_command_count(MemorySegment struct) {
            return struct.get(batched_command_count$LAYOUT, batched_command_count$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int64_t batched_command_count
         * }
         */
        public static void batched_command_count(MemorySegment struct, long fieldValue) {
            struct.set(batched_command_count$LAYOUT, batched_command_count$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout cmd$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("cmd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     int64_t add_count;
     *     int64_t remove_count;
     *     int64_t delete_count;
     *     int64_t clear_count;
     *     int64_t set_count;
     *     int64_t ensure_count;
     *     int64_t modified_count;
     *     int64_t discard_count;
     *     int64_t event_count;
     *     int64_t other_count;
     *     int64_t batched_entity_count;
     *     int64_t batched_command_count;
     * } cmd
     * }
     */
    public static final GroupLayout cmd$layout() {
        return cmd$LAYOUT;
    }

    private static final long cmd$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     int64_t add_count;
     *     int64_t remove_count;
     *     int64_t delete_count;
     *     int64_t clear_count;
     *     int64_t set_count;
     *     int64_t ensure_count;
     *     int64_t modified_count;
     *     int64_t discard_count;
     *     int64_t event_count;
     *     int64_t other_count;
     *     int64_t batched_entity_count;
     *     int64_t batched_command_count;
     * } cmd
     * }
     */
    public static final long cmd$offset() {
        return cmd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     int64_t add_count;
     *     int64_t remove_count;
     *     int64_t delete_count;
     *     int64_t clear_count;
     *     int64_t set_count;
     *     int64_t ensure_count;
     *     int64_t modified_count;
     *     int64_t discard_count;
     *     int64_t event_count;
     *     int64_t other_count;
     *     int64_t batched_entity_count;
     *     int64_t batched_command_count;
     * } cmd
     * }
     */
    public static MemorySegment cmd(MemorySegment struct) {
        return struct.asSlice(cmd$OFFSET, cmd$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     int64_t add_count;
     *     int64_t remove_count;
     *     int64_t delete_count;
     *     int64_t clear_count;
     *     int64_t set_count;
     *     int64_t ensure_count;
     *     int64_t modified_count;
     *     int64_t discard_count;
     *     int64_t event_count;
     *     int64_t other_count;
     *     int64_t batched_entity_count;
     *     int64_t batched_command_count;
     * } cmd
     * }
     */
    public static void cmd(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cmd$OFFSET, cmd$LAYOUT.byteSize());
    }

    private static final AddressLayout name_prefix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name_prefix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name_prefix
     * }
     */
    public static final AddressLayout name_prefix$layout() {
        return name_prefix$LAYOUT;
    }

    private static final long name_prefix$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name_prefix
     * }
     */
    public static final long name_prefix$offset() {
        return name_prefix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name_prefix
     * }
     */
    public static MemorySegment name_prefix(MemorySegment struct) {
        return struct.get(name_prefix$LAYOUT, name_prefix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name_prefix
     * }
     */
    public static void name_prefix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name_prefix$LAYOUT, name_prefix$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

