// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_os_api_t {
 *     ecs_os_api_init_t init_;
 *     ecs_os_api_fini_t fini_;
 *     ecs_os_api_malloc_t malloc_;
 *     ecs_os_api_realloc_t realloc_;
 *     ecs_os_api_calloc_t calloc_;
 *     ecs_os_api_free_t free_;
 *     ecs_os_api_strdup_t strdup_;
 *     ecs_os_api_thread_new_t thread_new_;
 *     ecs_os_api_thread_join_t thread_join_;
 *     ecs_os_api_thread_self_t thread_self_;
 *     ecs_os_api_thread_new_t task_new_;
 *     ecs_os_api_thread_join_t task_join_;
 *     ecs_os_api_ainc_t ainc_;
 *     ecs_os_api_ainc_t adec_;
 *     ecs_os_api_lainc_t lainc_;
 *     ecs_os_api_lainc_t ladec_;
 *     ecs_os_api_mutex_new_t mutex_new_;
 *     ecs_os_api_mutex_free_t mutex_free_;
 *     ecs_os_api_mutex_lock_t mutex_lock_;
 *     ecs_os_api_mutex_lock_t mutex_unlock_;
 *     ecs_os_api_cond_new_t cond_new_;
 *     ecs_os_api_cond_free_t cond_free_;
 *     ecs_os_api_cond_signal_t cond_signal_;
 *     ecs_os_api_cond_broadcast_t cond_broadcast_;
 *     ecs_os_api_cond_wait_t cond_wait_;
 *     ecs_os_api_sleep_t sleep_;
 *     ecs_os_api_now_t now_;
 *     ecs_os_api_get_time_t get_time_;
 *     ecs_os_api_log_t log_;
 *     ecs_os_api_abort_t abort_;
 *     ecs_os_api_dlopen_t dlopen_;
 *     ecs_os_api_dlproc_t dlproc_;
 *     ecs_os_api_dlclose_t dlclose_;
 *     ecs_os_api_module_to_path_t module_to_dl_;
 *     ecs_os_api_module_to_path_t module_to_etc_;
 *     ecs_os_api_perf_trace_t perf_trace_push_;
 *     ecs_os_api_perf_trace_t perf_trace_pop_;
 *     int32_t log_level_;
 *     int32_t log_indent_;
 *     int32_t log_last_error_;
 *     int64_t log_last_timestamp_;
 *     ecs_flags32_t flags_;
 *     FILE *log_out_;
 * }
 * }
 */
public class ecs_os_api_t {

    ecs_os_api_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_POINTER.withName("init_"),
        flecs.C_POINTER.withName("fini_"),
        flecs.C_POINTER.withName("malloc_"),
        flecs.C_POINTER.withName("realloc_"),
        flecs.C_POINTER.withName("calloc_"),
        flecs.C_POINTER.withName("free_"),
        flecs.C_POINTER.withName("strdup_"),
        flecs.C_POINTER.withName("thread_new_"),
        flecs.C_POINTER.withName("thread_join_"),
        flecs.C_POINTER.withName("thread_self_"),
        flecs.C_POINTER.withName("task_new_"),
        flecs.C_POINTER.withName("task_join_"),
        flecs.C_POINTER.withName("ainc_"),
        flecs.C_POINTER.withName("adec_"),
        flecs.C_POINTER.withName("lainc_"),
        flecs.C_POINTER.withName("ladec_"),
        flecs.C_POINTER.withName("mutex_new_"),
        flecs.C_POINTER.withName("mutex_free_"),
        flecs.C_POINTER.withName("mutex_lock_"),
        flecs.C_POINTER.withName("mutex_unlock_"),
        flecs.C_POINTER.withName("cond_new_"),
        flecs.C_POINTER.withName("cond_free_"),
        flecs.C_POINTER.withName("cond_signal_"),
        flecs.C_POINTER.withName("cond_broadcast_"),
        flecs.C_POINTER.withName("cond_wait_"),
        flecs.C_POINTER.withName("sleep_"),
        flecs.C_POINTER.withName("now_"),
        flecs.C_POINTER.withName("get_time_"),
        flecs.C_POINTER.withName("log_"),
        flecs.C_POINTER.withName("abort_"),
        flecs.C_POINTER.withName("dlopen_"),
        flecs.C_POINTER.withName("dlproc_"),
        flecs.C_POINTER.withName("dlclose_"),
        flecs.C_POINTER.withName("module_to_dl_"),
        flecs.C_POINTER.withName("module_to_etc_"),
        flecs.C_POINTER.withName("perf_trace_push_"),
        flecs.C_POINTER.withName("perf_trace_pop_"),
        flecs.C_INT.withName("log_level_"),
        flecs.C_INT.withName("log_indent_"),
        flecs.C_INT.withName("log_last_error_"),
        MemoryLayout.paddingLayout(4),
        flecs.C_LONG_LONG.withName("log_last_timestamp_"),
        flecs.C_INT.withName("flags_"),
        MemoryLayout.paddingLayout(4),
        flecs.C_POINTER.withName("log_out_")
    ).withName("ecs_os_api_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout init_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("init_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_init_t init_
     * }
     */
    public static final AddressLayout init_$layout() {
        return init_$LAYOUT;
    }

    private static final long init_$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_init_t init_
     * }
     */
    public static final long init_$offset() {
        return init_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_init_t init_
     * }
     */
    public static MemorySegment init_(MemorySegment struct) {
        return struct.get(init_$LAYOUT, init_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_init_t init_
     * }
     */
    public static void init_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(init_$LAYOUT, init_$OFFSET, fieldValue);
    }

    private static final AddressLayout fini_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fini_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_fini_t fini_
     * }
     */
    public static final AddressLayout fini_$layout() {
        return fini_$LAYOUT;
    }

    private static final long fini_$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_fini_t fini_
     * }
     */
    public static final long fini_$offset() {
        return fini_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_fini_t fini_
     * }
     */
    public static MemorySegment fini_(MemorySegment struct) {
        return struct.get(fini_$LAYOUT, fini_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_fini_t fini_
     * }
     */
    public static void fini_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fini_$LAYOUT, fini_$OFFSET, fieldValue);
    }

    private static final AddressLayout malloc_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("malloc_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_malloc_t malloc_
     * }
     */
    public static final AddressLayout malloc_$layout() {
        return malloc_$LAYOUT;
    }

    private static final long malloc_$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_malloc_t malloc_
     * }
     */
    public static final long malloc_$offset() {
        return malloc_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_malloc_t malloc_
     * }
     */
    public static MemorySegment malloc_(MemorySegment struct) {
        return struct.get(malloc_$LAYOUT, malloc_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_malloc_t malloc_
     * }
     */
    public static void malloc_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(malloc_$LAYOUT, malloc_$OFFSET, fieldValue);
    }

    private static final AddressLayout realloc_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("realloc_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_realloc_t realloc_
     * }
     */
    public static final AddressLayout realloc_$layout() {
        return realloc_$LAYOUT;
    }

    private static final long realloc_$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_realloc_t realloc_
     * }
     */
    public static final long realloc_$offset() {
        return realloc_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_realloc_t realloc_
     * }
     */
    public static MemorySegment realloc_(MemorySegment struct) {
        return struct.get(realloc_$LAYOUT, realloc_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_realloc_t realloc_
     * }
     */
    public static void realloc_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(realloc_$LAYOUT, realloc_$OFFSET, fieldValue);
    }

    private static final AddressLayout calloc_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("calloc_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_calloc_t calloc_
     * }
     */
    public static final AddressLayout calloc_$layout() {
        return calloc_$LAYOUT;
    }

    private static final long calloc_$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_calloc_t calloc_
     * }
     */
    public static final long calloc_$offset() {
        return calloc_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_calloc_t calloc_
     * }
     */
    public static MemorySegment calloc_(MemorySegment struct) {
        return struct.get(calloc_$LAYOUT, calloc_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_calloc_t calloc_
     * }
     */
    public static void calloc_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(calloc_$LAYOUT, calloc_$OFFSET, fieldValue);
    }

    private static final AddressLayout free_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_free_t free_
     * }
     */
    public static final AddressLayout free_$layout() {
        return free_$LAYOUT;
    }

    private static final long free_$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_free_t free_
     * }
     */
    public static final long free_$offset() {
        return free_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_free_t free_
     * }
     */
    public static MemorySegment free_(MemorySegment struct) {
        return struct.get(free_$LAYOUT, free_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_free_t free_
     * }
     */
    public static void free_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free_$LAYOUT, free_$OFFSET, fieldValue);
    }

    private static final AddressLayout strdup_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("strdup_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_strdup_t strdup_
     * }
     */
    public static final AddressLayout strdup_$layout() {
        return strdup_$LAYOUT;
    }

    private static final long strdup_$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_strdup_t strdup_
     * }
     */
    public static final long strdup_$offset() {
        return strdup_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_strdup_t strdup_
     * }
     */
    public static MemorySegment strdup_(MemorySegment struct) {
        return struct.get(strdup_$LAYOUT, strdup_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_strdup_t strdup_
     * }
     */
    public static void strdup_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(strdup_$LAYOUT, strdup_$OFFSET, fieldValue);
    }

    private static final AddressLayout thread_new_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("thread_new_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_new_t thread_new_
     * }
     */
    public static final AddressLayout thread_new_$layout() {
        return thread_new_$LAYOUT;
    }

    private static final long thread_new_$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_new_t thread_new_
     * }
     */
    public static final long thread_new_$offset() {
        return thread_new_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_new_t thread_new_
     * }
     */
    public static MemorySegment thread_new_(MemorySegment struct) {
        return struct.get(thread_new_$LAYOUT, thread_new_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_new_t thread_new_
     * }
     */
    public static void thread_new_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(thread_new_$LAYOUT, thread_new_$OFFSET, fieldValue);
    }

    private static final AddressLayout thread_join_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("thread_join_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_join_t thread_join_
     * }
     */
    public static final AddressLayout thread_join_$layout() {
        return thread_join_$LAYOUT;
    }

    private static final long thread_join_$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_join_t thread_join_
     * }
     */
    public static final long thread_join_$offset() {
        return thread_join_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_join_t thread_join_
     * }
     */
    public static MemorySegment thread_join_(MemorySegment struct) {
        return struct.get(thread_join_$LAYOUT, thread_join_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_join_t thread_join_
     * }
     */
    public static void thread_join_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(thread_join_$LAYOUT, thread_join_$OFFSET, fieldValue);
    }

    private static final AddressLayout thread_self_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("thread_self_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_self_t thread_self_
     * }
     */
    public static final AddressLayout thread_self_$layout() {
        return thread_self_$LAYOUT;
    }

    private static final long thread_self_$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_self_t thread_self_
     * }
     */
    public static final long thread_self_$offset() {
        return thread_self_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_self_t thread_self_
     * }
     */
    public static MemorySegment thread_self_(MemorySegment struct) {
        return struct.get(thread_self_$LAYOUT, thread_self_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_self_t thread_self_
     * }
     */
    public static void thread_self_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(thread_self_$LAYOUT, thread_self_$OFFSET, fieldValue);
    }

    private static final AddressLayout task_new_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("task_new_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_new_t task_new_
     * }
     */
    public static final AddressLayout task_new_$layout() {
        return task_new_$LAYOUT;
    }

    private static final long task_new_$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_new_t task_new_
     * }
     */
    public static final long task_new_$offset() {
        return task_new_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_new_t task_new_
     * }
     */
    public static MemorySegment task_new_(MemorySegment struct) {
        return struct.get(task_new_$LAYOUT, task_new_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_new_t task_new_
     * }
     */
    public static void task_new_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(task_new_$LAYOUT, task_new_$OFFSET, fieldValue);
    }

    private static final AddressLayout task_join_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("task_join_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_join_t task_join_
     * }
     */
    public static final AddressLayout task_join_$layout() {
        return task_join_$LAYOUT;
    }

    private static final long task_join_$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_join_t task_join_
     * }
     */
    public static final long task_join_$offset() {
        return task_join_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_join_t task_join_
     * }
     */
    public static MemorySegment task_join_(MemorySegment struct) {
        return struct.get(task_join_$LAYOUT, task_join_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_thread_join_t task_join_
     * }
     */
    public static void task_join_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(task_join_$LAYOUT, task_join_$OFFSET, fieldValue);
    }

    private static final AddressLayout ainc_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ainc_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_ainc_t ainc_
     * }
     */
    public static final AddressLayout ainc_$layout() {
        return ainc_$LAYOUT;
    }

    private static final long ainc_$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_ainc_t ainc_
     * }
     */
    public static final long ainc_$offset() {
        return ainc_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_ainc_t ainc_
     * }
     */
    public static MemorySegment ainc_(MemorySegment struct) {
        return struct.get(ainc_$LAYOUT, ainc_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_ainc_t ainc_
     * }
     */
    public static void ainc_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ainc_$LAYOUT, ainc_$OFFSET, fieldValue);
    }

    private static final AddressLayout adec_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("adec_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_ainc_t adec_
     * }
     */
    public static final AddressLayout adec_$layout() {
        return adec_$LAYOUT;
    }

    private static final long adec_$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_ainc_t adec_
     * }
     */
    public static final long adec_$offset() {
        return adec_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_ainc_t adec_
     * }
     */
    public static MemorySegment adec_(MemorySegment struct) {
        return struct.get(adec_$LAYOUT, adec_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_ainc_t adec_
     * }
     */
    public static void adec_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(adec_$LAYOUT, adec_$OFFSET, fieldValue);
    }

    private static final AddressLayout lainc_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("lainc_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_lainc_t lainc_
     * }
     */
    public static final AddressLayout lainc_$layout() {
        return lainc_$LAYOUT;
    }

    private static final long lainc_$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_lainc_t lainc_
     * }
     */
    public static final long lainc_$offset() {
        return lainc_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_lainc_t lainc_
     * }
     */
    public static MemorySegment lainc_(MemorySegment struct) {
        return struct.get(lainc_$LAYOUT, lainc_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_lainc_t lainc_
     * }
     */
    public static void lainc_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(lainc_$LAYOUT, lainc_$OFFSET, fieldValue);
    }

    private static final AddressLayout ladec_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ladec_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_lainc_t ladec_
     * }
     */
    public static final AddressLayout ladec_$layout() {
        return ladec_$LAYOUT;
    }

    private static final long ladec_$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_lainc_t ladec_
     * }
     */
    public static final long ladec_$offset() {
        return ladec_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_lainc_t ladec_
     * }
     */
    public static MemorySegment ladec_(MemorySegment struct) {
        return struct.get(ladec_$LAYOUT, ladec_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_lainc_t ladec_
     * }
     */
    public static void ladec_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ladec_$LAYOUT, ladec_$OFFSET, fieldValue);
    }

    private static final AddressLayout mutex_new_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mutex_new_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_new_t mutex_new_
     * }
     */
    public static final AddressLayout mutex_new_$layout() {
        return mutex_new_$LAYOUT;
    }

    private static final long mutex_new_$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_new_t mutex_new_
     * }
     */
    public static final long mutex_new_$offset() {
        return mutex_new_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_new_t mutex_new_
     * }
     */
    public static MemorySegment mutex_new_(MemorySegment struct) {
        return struct.get(mutex_new_$LAYOUT, mutex_new_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_new_t mutex_new_
     * }
     */
    public static void mutex_new_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mutex_new_$LAYOUT, mutex_new_$OFFSET, fieldValue);
    }

    private static final AddressLayout mutex_free_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mutex_free_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_free_t mutex_free_
     * }
     */
    public static final AddressLayout mutex_free_$layout() {
        return mutex_free_$LAYOUT;
    }

    private static final long mutex_free_$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_free_t mutex_free_
     * }
     */
    public static final long mutex_free_$offset() {
        return mutex_free_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_free_t mutex_free_
     * }
     */
    public static MemorySegment mutex_free_(MemorySegment struct) {
        return struct.get(mutex_free_$LAYOUT, mutex_free_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_free_t mutex_free_
     * }
     */
    public static void mutex_free_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mutex_free_$LAYOUT, mutex_free_$OFFSET, fieldValue);
    }

    private static final AddressLayout mutex_lock_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mutex_lock_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_lock_t mutex_lock_
     * }
     */
    public static final AddressLayout mutex_lock_$layout() {
        return mutex_lock_$LAYOUT;
    }

    private static final long mutex_lock_$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_lock_t mutex_lock_
     * }
     */
    public static final long mutex_lock_$offset() {
        return mutex_lock_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_lock_t mutex_lock_
     * }
     */
    public static MemorySegment mutex_lock_(MemorySegment struct) {
        return struct.get(mutex_lock_$LAYOUT, mutex_lock_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_lock_t mutex_lock_
     * }
     */
    public static void mutex_lock_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mutex_lock_$LAYOUT, mutex_lock_$OFFSET, fieldValue);
    }

    private static final AddressLayout mutex_unlock_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mutex_unlock_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_lock_t mutex_unlock_
     * }
     */
    public static final AddressLayout mutex_unlock_$layout() {
        return mutex_unlock_$LAYOUT;
    }

    private static final long mutex_unlock_$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_lock_t mutex_unlock_
     * }
     */
    public static final long mutex_unlock_$offset() {
        return mutex_unlock_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_lock_t mutex_unlock_
     * }
     */
    public static MemorySegment mutex_unlock_(MemorySegment struct) {
        return struct.get(mutex_unlock_$LAYOUT, mutex_unlock_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_mutex_lock_t mutex_unlock_
     * }
     */
    public static void mutex_unlock_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mutex_unlock_$LAYOUT, mutex_unlock_$OFFSET, fieldValue);
    }

    private static final AddressLayout cond_new_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cond_new_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_new_t cond_new_
     * }
     */
    public static final AddressLayout cond_new_$layout() {
        return cond_new_$LAYOUT;
    }

    private static final long cond_new_$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_new_t cond_new_
     * }
     */
    public static final long cond_new_$offset() {
        return cond_new_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_new_t cond_new_
     * }
     */
    public static MemorySegment cond_new_(MemorySegment struct) {
        return struct.get(cond_new_$LAYOUT, cond_new_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_new_t cond_new_
     * }
     */
    public static void cond_new_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cond_new_$LAYOUT, cond_new_$OFFSET, fieldValue);
    }

    private static final AddressLayout cond_free_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cond_free_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_free_t cond_free_
     * }
     */
    public static final AddressLayout cond_free_$layout() {
        return cond_free_$LAYOUT;
    }

    private static final long cond_free_$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_free_t cond_free_
     * }
     */
    public static final long cond_free_$offset() {
        return cond_free_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_free_t cond_free_
     * }
     */
    public static MemorySegment cond_free_(MemorySegment struct) {
        return struct.get(cond_free_$LAYOUT, cond_free_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_free_t cond_free_
     * }
     */
    public static void cond_free_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cond_free_$LAYOUT, cond_free_$OFFSET, fieldValue);
    }

    private static final AddressLayout cond_signal_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cond_signal_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_signal_t cond_signal_
     * }
     */
    public static final AddressLayout cond_signal_$layout() {
        return cond_signal_$LAYOUT;
    }

    private static final long cond_signal_$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_signal_t cond_signal_
     * }
     */
    public static final long cond_signal_$offset() {
        return cond_signal_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_signal_t cond_signal_
     * }
     */
    public static MemorySegment cond_signal_(MemorySegment struct) {
        return struct.get(cond_signal_$LAYOUT, cond_signal_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_signal_t cond_signal_
     * }
     */
    public static void cond_signal_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cond_signal_$LAYOUT, cond_signal_$OFFSET, fieldValue);
    }

    private static final AddressLayout cond_broadcast_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cond_broadcast_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_broadcast_t cond_broadcast_
     * }
     */
    public static final AddressLayout cond_broadcast_$layout() {
        return cond_broadcast_$LAYOUT;
    }

    private static final long cond_broadcast_$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_broadcast_t cond_broadcast_
     * }
     */
    public static final long cond_broadcast_$offset() {
        return cond_broadcast_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_broadcast_t cond_broadcast_
     * }
     */
    public static MemorySegment cond_broadcast_(MemorySegment struct) {
        return struct.get(cond_broadcast_$LAYOUT, cond_broadcast_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_broadcast_t cond_broadcast_
     * }
     */
    public static void cond_broadcast_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cond_broadcast_$LAYOUT, cond_broadcast_$OFFSET, fieldValue);
    }

    private static final AddressLayout cond_wait_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cond_wait_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_wait_t cond_wait_
     * }
     */
    public static final AddressLayout cond_wait_$layout() {
        return cond_wait_$LAYOUT;
    }

    private static final long cond_wait_$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_wait_t cond_wait_
     * }
     */
    public static final long cond_wait_$offset() {
        return cond_wait_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_wait_t cond_wait_
     * }
     */
    public static MemorySegment cond_wait_(MemorySegment struct) {
        return struct.get(cond_wait_$LAYOUT, cond_wait_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_cond_wait_t cond_wait_
     * }
     */
    public static void cond_wait_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cond_wait_$LAYOUT, cond_wait_$OFFSET, fieldValue);
    }

    private static final AddressLayout sleep_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("sleep_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_sleep_t sleep_
     * }
     */
    public static final AddressLayout sleep_$layout() {
        return sleep_$LAYOUT;
    }

    private static final long sleep_$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_sleep_t sleep_
     * }
     */
    public static final long sleep_$offset() {
        return sleep_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_sleep_t sleep_
     * }
     */
    public static MemorySegment sleep_(MemorySegment struct) {
        return struct.get(sleep_$LAYOUT, sleep_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_sleep_t sleep_
     * }
     */
    public static void sleep_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(sleep_$LAYOUT, sleep_$OFFSET, fieldValue);
    }

    private static final AddressLayout now_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("now_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_now_t now_
     * }
     */
    public static final AddressLayout now_$layout() {
        return now_$LAYOUT;
    }

    private static final long now_$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_now_t now_
     * }
     */
    public static final long now_$offset() {
        return now_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_now_t now_
     * }
     */
    public static MemorySegment now_(MemorySegment struct) {
        return struct.get(now_$LAYOUT, now_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_now_t now_
     * }
     */
    public static void now_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(now_$LAYOUT, now_$OFFSET, fieldValue);
    }

    private static final AddressLayout get_time_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_time_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_get_time_t get_time_
     * }
     */
    public static final AddressLayout get_time_$layout() {
        return get_time_$LAYOUT;
    }

    private static final long get_time_$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_get_time_t get_time_
     * }
     */
    public static final long get_time_$offset() {
        return get_time_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_get_time_t get_time_
     * }
     */
    public static MemorySegment get_time_(MemorySegment struct) {
        return struct.get(get_time_$LAYOUT, get_time_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_get_time_t get_time_
     * }
     */
    public static void get_time_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_time_$LAYOUT, get_time_$OFFSET, fieldValue);
    }

    private static final AddressLayout log_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("log_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_log_t log_
     * }
     */
    public static final AddressLayout log_$layout() {
        return log_$LAYOUT;
    }

    private static final long log_$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_log_t log_
     * }
     */
    public static final long log_$offset() {
        return log_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_log_t log_
     * }
     */
    public static MemorySegment log_(MemorySegment struct) {
        return struct.get(log_$LAYOUT, log_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_log_t log_
     * }
     */
    public static void log_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(log_$LAYOUT, log_$OFFSET, fieldValue);
    }

    private static final AddressLayout abort_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("abort_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_abort_t abort_
     * }
     */
    public static final AddressLayout abort_$layout() {
        return abort_$LAYOUT;
    }

    private static final long abort_$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_abort_t abort_
     * }
     */
    public static final long abort_$offset() {
        return abort_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_abort_t abort_
     * }
     */
    public static MemorySegment abort_(MemorySegment struct) {
        return struct.get(abort_$LAYOUT, abort_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_abort_t abort_
     * }
     */
    public static void abort_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(abort_$LAYOUT, abort_$OFFSET, fieldValue);
    }

    private static final AddressLayout dlopen_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dlopen_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_dlopen_t dlopen_
     * }
     */
    public static final AddressLayout dlopen_$layout() {
        return dlopen_$LAYOUT;
    }

    private static final long dlopen_$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_dlopen_t dlopen_
     * }
     */
    public static final long dlopen_$offset() {
        return dlopen_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_dlopen_t dlopen_
     * }
     */
    public static MemorySegment dlopen_(MemorySegment struct) {
        return struct.get(dlopen_$LAYOUT, dlopen_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_dlopen_t dlopen_
     * }
     */
    public static void dlopen_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dlopen_$LAYOUT, dlopen_$OFFSET, fieldValue);
    }

    private static final AddressLayout dlproc_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dlproc_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_dlproc_t dlproc_
     * }
     */
    public static final AddressLayout dlproc_$layout() {
        return dlproc_$LAYOUT;
    }

    private static final long dlproc_$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_dlproc_t dlproc_
     * }
     */
    public static final long dlproc_$offset() {
        return dlproc_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_dlproc_t dlproc_
     * }
     */
    public static MemorySegment dlproc_(MemorySegment struct) {
        return struct.get(dlproc_$LAYOUT, dlproc_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_dlproc_t dlproc_
     * }
     */
    public static void dlproc_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dlproc_$LAYOUT, dlproc_$OFFSET, fieldValue);
    }

    private static final AddressLayout dlclose_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dlclose_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_dlclose_t dlclose_
     * }
     */
    public static final AddressLayout dlclose_$layout() {
        return dlclose_$LAYOUT;
    }

    private static final long dlclose_$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_dlclose_t dlclose_
     * }
     */
    public static final long dlclose_$offset() {
        return dlclose_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_dlclose_t dlclose_
     * }
     */
    public static MemorySegment dlclose_(MemorySegment struct) {
        return struct.get(dlclose_$LAYOUT, dlclose_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_dlclose_t dlclose_
     * }
     */
    public static void dlclose_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dlclose_$LAYOUT, dlclose_$OFFSET, fieldValue);
    }

    private static final AddressLayout module_to_dl_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("module_to_dl_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_module_to_path_t module_to_dl_
     * }
     */
    public static final AddressLayout module_to_dl_$layout() {
        return module_to_dl_$LAYOUT;
    }

    private static final long module_to_dl_$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_module_to_path_t module_to_dl_
     * }
     */
    public static final long module_to_dl_$offset() {
        return module_to_dl_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_module_to_path_t module_to_dl_
     * }
     */
    public static MemorySegment module_to_dl_(MemorySegment struct) {
        return struct.get(module_to_dl_$LAYOUT, module_to_dl_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_module_to_path_t module_to_dl_
     * }
     */
    public static void module_to_dl_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(module_to_dl_$LAYOUT, module_to_dl_$OFFSET, fieldValue);
    }

    private static final AddressLayout module_to_etc_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("module_to_etc_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_module_to_path_t module_to_etc_
     * }
     */
    public static final AddressLayout module_to_etc_$layout() {
        return module_to_etc_$LAYOUT;
    }

    private static final long module_to_etc_$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_module_to_path_t module_to_etc_
     * }
     */
    public static final long module_to_etc_$offset() {
        return module_to_etc_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_module_to_path_t module_to_etc_
     * }
     */
    public static MemorySegment module_to_etc_(MemorySegment struct) {
        return struct.get(module_to_etc_$LAYOUT, module_to_etc_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_module_to_path_t module_to_etc_
     * }
     */
    public static void module_to_etc_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(module_to_etc_$LAYOUT, module_to_etc_$OFFSET, fieldValue);
    }

    private static final AddressLayout perf_trace_push_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("perf_trace_push_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_perf_trace_t perf_trace_push_
     * }
     */
    public static final AddressLayout perf_trace_push_$layout() {
        return perf_trace_push_$LAYOUT;
    }

    private static final long perf_trace_push_$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_perf_trace_t perf_trace_push_
     * }
     */
    public static final long perf_trace_push_$offset() {
        return perf_trace_push_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_perf_trace_t perf_trace_push_
     * }
     */
    public static MemorySegment perf_trace_push_(MemorySegment struct) {
        return struct.get(perf_trace_push_$LAYOUT, perf_trace_push_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_perf_trace_t perf_trace_push_
     * }
     */
    public static void perf_trace_push_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(perf_trace_push_$LAYOUT, perf_trace_push_$OFFSET, fieldValue);
    }

    private static final AddressLayout perf_trace_pop_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("perf_trace_pop_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_os_api_perf_trace_t perf_trace_pop_
     * }
     */
    public static final AddressLayout perf_trace_pop_$layout() {
        return perf_trace_pop_$LAYOUT;
    }

    private static final long perf_trace_pop_$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_os_api_perf_trace_t perf_trace_pop_
     * }
     */
    public static final long perf_trace_pop_$offset() {
        return perf_trace_pop_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_os_api_perf_trace_t perf_trace_pop_
     * }
     */
    public static MemorySegment perf_trace_pop_(MemorySegment struct) {
        return struct.get(perf_trace_pop_$LAYOUT, perf_trace_pop_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_os_api_perf_trace_t perf_trace_pop_
     * }
     */
    public static void perf_trace_pop_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(perf_trace_pop_$LAYOUT, perf_trace_pop_$OFFSET, fieldValue);
    }

    private static final OfInt log_level_$LAYOUT = (OfInt)$LAYOUT.select(groupElement("log_level_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t log_level_
     * }
     */
    public static final OfInt log_level_$layout() {
        return log_level_$LAYOUT;
    }

    private static final long log_level_$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t log_level_
     * }
     */
    public static final long log_level_$offset() {
        return log_level_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t log_level_
     * }
     */
    public static int log_level_(MemorySegment struct) {
        return struct.get(log_level_$LAYOUT, log_level_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t log_level_
     * }
     */
    public static void log_level_(MemorySegment struct, int fieldValue) {
        struct.set(log_level_$LAYOUT, log_level_$OFFSET, fieldValue);
    }

    private static final OfInt log_indent_$LAYOUT = (OfInt)$LAYOUT.select(groupElement("log_indent_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t log_indent_
     * }
     */
    public static final OfInt log_indent_$layout() {
        return log_indent_$LAYOUT;
    }

    private static final long log_indent_$OFFSET = 300;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t log_indent_
     * }
     */
    public static final long log_indent_$offset() {
        return log_indent_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t log_indent_
     * }
     */
    public static int log_indent_(MemorySegment struct) {
        return struct.get(log_indent_$LAYOUT, log_indent_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t log_indent_
     * }
     */
    public static void log_indent_(MemorySegment struct, int fieldValue) {
        struct.set(log_indent_$LAYOUT, log_indent_$OFFSET, fieldValue);
    }

    private static final OfInt log_last_error_$LAYOUT = (OfInt)$LAYOUT.select(groupElement("log_last_error_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t log_last_error_
     * }
     */
    public static final OfInt log_last_error_$layout() {
        return log_last_error_$LAYOUT;
    }

    private static final long log_last_error_$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t log_last_error_
     * }
     */
    public static final long log_last_error_$offset() {
        return log_last_error_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t log_last_error_
     * }
     */
    public static int log_last_error_(MemorySegment struct) {
        return struct.get(log_last_error_$LAYOUT, log_last_error_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t log_last_error_
     * }
     */
    public static void log_last_error_(MemorySegment struct, int fieldValue) {
        struct.set(log_last_error_$LAYOUT, log_last_error_$OFFSET, fieldValue);
    }

    private static final OfLong log_last_timestamp_$LAYOUT = (OfLong)$LAYOUT.select(groupElement("log_last_timestamp_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t log_last_timestamp_
     * }
     */
    public static final OfLong log_last_timestamp_$layout() {
        return log_last_timestamp_$LAYOUT;
    }

    private static final long log_last_timestamp_$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t log_last_timestamp_
     * }
     */
    public static final long log_last_timestamp_$offset() {
        return log_last_timestamp_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t log_last_timestamp_
     * }
     */
    public static long log_last_timestamp_(MemorySegment struct) {
        return struct.get(log_last_timestamp_$LAYOUT, log_last_timestamp_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t log_last_timestamp_
     * }
     */
    public static void log_last_timestamp_(MemorySegment struct, long fieldValue) {
        struct.set(log_last_timestamp_$LAYOUT, log_last_timestamp_$OFFSET, fieldValue);
    }

    private static final OfInt flags_$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags_
     * }
     */
    public static final OfInt flags_$layout() {
        return flags_$LAYOUT;
    }

    private static final long flags_$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags_
     * }
     */
    public static final long flags_$offset() {
        return flags_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags_
     * }
     */
    public static int flags_(MemorySegment struct) {
        return struct.get(flags_$LAYOUT, flags_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_flags32_t flags_
     * }
     */
    public static void flags_(MemorySegment struct, int fieldValue) {
        struct.set(flags_$LAYOUT, flags_$OFFSET, fieldValue);
    }

    private static final AddressLayout log_out_$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("log_out_"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * FILE *log_out_
     * }
     */
    public static final AddressLayout log_out_$layout() {
        return log_out_$LAYOUT;
    }

    private static final long log_out_$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * FILE *log_out_
     * }
     */
    public static final long log_out_$offset() {
        return log_out_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * FILE *log_out_
     * }
     */
    public static MemorySegment log_out_(MemorySegment struct) {
        return struct.get(log_out_$LAYOUT, log_out_$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * FILE *log_out_
     * }
     */
    public static void log_out_(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(log_out_$LAYOUT, log_out_$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

