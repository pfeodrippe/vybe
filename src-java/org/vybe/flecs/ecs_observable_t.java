// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_observable_t {
 *     ecs_event_record_t on_add;
 *     ecs_event_record_t on_remove;
 *     ecs_event_record_t on_set;
 *     ecs_event_record_t on_wildcard;
 *     ecs_sparse_t events;
 *     uint64_t last_observer_id;
 * }
 * }
 */
public class ecs_observable_t {

    ecs_observable_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ecs_event_record_t.layout().withName("on_add"),
        ecs_event_record_t.layout().withName("on_remove"),
        ecs_event_record_t.layout().withName("on_set"),
        ecs_event_record_t.layout().withName("on_wildcard"),
        ecs_sparse_t.layout().withName("events"),
        flecs.C_LONG_LONG.withName("last_observer_id")
    ).withName("ecs_observable_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout on_add$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("on_add"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_add
     * }
     */
    public static final GroupLayout on_add$layout() {
        return on_add$LAYOUT;
    }

    private static final long on_add$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_add
     * }
     */
    public static final long on_add$offset() {
        return on_add$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_add
     * }
     */
    public static MemorySegment on_add(MemorySegment struct) {
        return struct.asSlice(on_add$OFFSET, on_add$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_add
     * }
     */
    public static void on_add(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_add$OFFSET, on_add$LAYOUT.byteSize());
    }

    private static final GroupLayout on_remove$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("on_remove"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_remove
     * }
     */
    public static final GroupLayout on_remove$layout() {
        return on_remove$LAYOUT;
    }

    private static final long on_remove$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_remove
     * }
     */
    public static final long on_remove$offset() {
        return on_remove$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_remove
     * }
     */
    public static MemorySegment on_remove(MemorySegment struct) {
        return struct.asSlice(on_remove$OFFSET, on_remove$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_remove
     * }
     */
    public static void on_remove(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_remove$OFFSET, on_remove$LAYOUT.byteSize());
    }

    private static final GroupLayout on_set$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("on_set"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_set
     * }
     */
    public static final GroupLayout on_set$layout() {
        return on_set$LAYOUT;
    }

    private static final long on_set$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_set
     * }
     */
    public static final long on_set$offset() {
        return on_set$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_set
     * }
     */
    public static MemorySegment on_set(MemorySegment struct) {
        return struct.asSlice(on_set$OFFSET, on_set$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_set
     * }
     */
    public static void on_set(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_set$OFFSET, on_set$LAYOUT.byteSize());
    }

    private static final GroupLayout on_wildcard$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("on_wildcard"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_wildcard
     * }
     */
    public static final GroupLayout on_wildcard$layout() {
        return on_wildcard$LAYOUT;
    }

    private static final long on_wildcard$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_wildcard
     * }
     */
    public static final long on_wildcard$offset() {
        return on_wildcard$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_wildcard
     * }
     */
    public static MemorySegment on_wildcard(MemorySegment struct) {
        return struct.asSlice(on_wildcard$OFFSET, on_wildcard$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_event_record_t on_wildcard
     * }
     */
    public static void on_wildcard(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, on_wildcard$OFFSET, on_wildcard$LAYOUT.byteSize());
    }

    private static final GroupLayout events$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ecs_sparse_t events
     * }
     */
    public static final GroupLayout events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ecs_sparse_t events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ecs_sparse_t events
     * }
     */
    public static MemorySegment events(MemorySegment struct) {
        return struct.asSlice(events$OFFSET, events$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ecs_sparse_t events
     * }
     */
    public static void events(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, events$OFFSET, events$LAYOUT.byteSize());
    }

    private static final OfLong last_observer_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("last_observer_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t last_observer_id
     * }
     */
    public static final OfLong last_observer_id$layout() {
        return last_observer_id$LAYOUT;
    }

    private static final long last_observer_id$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t last_observer_id
     * }
     */
    public static final long last_observer_id$offset() {
        return last_observer_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t last_observer_id
     * }
     */
    public static long last_observer_id(MemorySegment struct) {
        return struct.get(last_observer_id$LAYOUT, last_observer_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t last_observer_id
     * }
     */
    public static void last_observer_id(MemorySegment struct, long fieldValue) {
        struct.set(last_observer_id$LAYOUT, last_observer_id$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

