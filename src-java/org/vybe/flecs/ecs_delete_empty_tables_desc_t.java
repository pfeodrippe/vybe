// Generated by jextract

package org.vybe.flecs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ecs_delete_empty_tables_desc_t {
 *     uint16_t clear_generation;
 *     uint16_t delete_generation;
 *     double time_budget_seconds;
 * }
 * }
 */
public class ecs_delete_empty_tables_desc_t {

    ecs_delete_empty_tables_desc_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        flecs.C_SHORT.withName("clear_generation"),
        flecs.C_SHORT.withName("delete_generation"),
        MemoryLayout.paddingLayout(4),
        flecs.C_DOUBLE.withName("time_budget_seconds")
    ).withName("ecs_delete_empty_tables_desc_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort clear_generation$LAYOUT = (OfShort)$LAYOUT.select(groupElement("clear_generation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t clear_generation
     * }
     */
    public static final OfShort clear_generation$layout() {
        return clear_generation$LAYOUT;
    }

    private static final long clear_generation$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t clear_generation
     * }
     */
    public static final long clear_generation$offset() {
        return clear_generation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t clear_generation
     * }
     */
    public static short clear_generation(MemorySegment struct) {
        return struct.get(clear_generation$LAYOUT, clear_generation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t clear_generation
     * }
     */
    public static void clear_generation(MemorySegment struct, short fieldValue) {
        struct.set(clear_generation$LAYOUT, clear_generation$OFFSET, fieldValue);
    }

    private static final OfShort delete_generation$LAYOUT = (OfShort)$LAYOUT.select(groupElement("delete_generation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t delete_generation
     * }
     */
    public static final OfShort delete_generation$layout() {
        return delete_generation$LAYOUT;
    }

    private static final long delete_generation$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t delete_generation
     * }
     */
    public static final long delete_generation$offset() {
        return delete_generation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t delete_generation
     * }
     */
    public static short delete_generation(MemorySegment struct) {
        return struct.get(delete_generation$LAYOUT, delete_generation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t delete_generation
     * }
     */
    public static void delete_generation(MemorySegment struct, short fieldValue) {
        struct.set(delete_generation$LAYOUT, delete_generation$OFFSET, fieldValue);
    }

    private static final OfDouble time_budget_seconds$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("time_budget_seconds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double time_budget_seconds
     * }
     */
    public static final OfDouble time_budget_seconds$layout() {
        return time_budget_seconds$LAYOUT;
    }

    private static final long time_budget_seconds$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double time_budget_seconds
     * }
     */
    public static final long time_budget_seconds$offset() {
        return time_budget_seconds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double time_budget_seconds
     * }
     */
    public static double time_budget_seconds(MemorySegment struct) {
        return struct.get(time_budget_seconds$LAYOUT, time_budget_seconds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double time_budget_seconds
     * }
     */
    public static void time_budget_seconds(MemorySegment struct, double fieldValue) {
        struct.set(time_budget_seconds$LAYOUT, time_budget_seconds$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

