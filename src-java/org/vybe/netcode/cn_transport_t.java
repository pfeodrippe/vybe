// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_transport_t {
 *     float resend_rate;
 *     int fragment_size;
 *     int max_packet_size;
 *     int max_fragments_in_flight;
 *     int max_size_single_send;
 *     cn_socket_send_queue_t send_queue;
 *     int fragments_count;
 *     int fragments_capacity;
 *     cn_fragment_t *fragments;
 *     cn_ack_system_t *ack_system;
 *     cn_sequence_buffer_t sent_fragments;
 *     uint64_t fragment_id_gen;
 *     uint16_t oldest_received_sequence;
 *     cn_packet_assembly_t reliable_and_in_order_assembly;
 *     cn_packet_assembly_t fire_and_forget_assembly;
 *     void *mem_ctx;
 *     void *udata;
 *     uint8_t fire_and_forget_buffer[1109];
 * }
 * }
 */
public class cn_transport_t {

    cn_transport_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_FLOAT.withName("resend_rate"),
        netcode.C_INT.withName("fragment_size"),
        netcode.C_INT.withName("max_packet_size"),
        netcode.C_INT.withName("max_fragments_in_flight"),
        netcode.C_INT.withName("max_size_single_send"),
        MemoryLayout.paddingLayout(4),
        cn_socket_send_queue_t.layout().withName("send_queue"),
        netcode.C_INT.withName("fragments_count"),
        netcode.C_INT.withName("fragments_capacity"),
        netcode.C_POINTER.withName("fragments"),
        netcode.C_POINTER.withName("ack_system"),
        cn_sequence_buffer_t.layout().withName("sent_fragments"),
        netcode.C_LONG_LONG.withName("fragment_id_gen"),
        netcode.C_SHORT.withName("oldest_received_sequence"),
        MemoryLayout.paddingLayout(6),
        cn_packet_assembly_t.layout().withName("reliable_and_in_order_assembly"),
        cn_packet_assembly_t.layout().withName("fire_and_forget_assembly"),
        netcode.C_POINTER.withName("mem_ctx"),
        netcode.C_POINTER.withName("udata"),
        MemoryLayout.sequenceLayout(1109, netcode.C_CHAR).withName("fire_and_forget_buffer"),
        MemoryLayout.paddingLayout(3)
    ).withName("cn_transport_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat resend_rate$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("resend_rate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float resend_rate
     * }
     */
    public static final OfFloat resend_rate$layout() {
        return resend_rate$LAYOUT;
    }

    private static final long resend_rate$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float resend_rate
     * }
     */
    public static final long resend_rate$offset() {
        return resend_rate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float resend_rate
     * }
     */
    public static float resend_rate(MemorySegment struct) {
        return struct.get(resend_rate$LAYOUT, resend_rate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float resend_rate
     * }
     */
    public static void resend_rate(MemorySegment struct, float fieldValue) {
        struct.set(resend_rate$LAYOUT, resend_rate$OFFSET, fieldValue);
    }

    private static final OfInt fragment_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fragment_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fragment_size
     * }
     */
    public static final OfInt fragment_size$layout() {
        return fragment_size$LAYOUT;
    }

    private static final long fragment_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fragment_size
     * }
     */
    public static final long fragment_size$offset() {
        return fragment_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fragment_size
     * }
     */
    public static int fragment_size(MemorySegment struct) {
        return struct.get(fragment_size$LAYOUT, fragment_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fragment_size
     * }
     */
    public static void fragment_size(MemorySegment struct, int fieldValue) {
        struct.set(fragment_size$LAYOUT, fragment_size$OFFSET, fieldValue);
    }

    private static final OfInt max_packet_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_packet_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max_packet_size
     * }
     */
    public static final OfInt max_packet_size$layout() {
        return max_packet_size$LAYOUT;
    }

    private static final long max_packet_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max_packet_size
     * }
     */
    public static final long max_packet_size$offset() {
        return max_packet_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max_packet_size
     * }
     */
    public static int max_packet_size(MemorySegment struct) {
        return struct.get(max_packet_size$LAYOUT, max_packet_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max_packet_size
     * }
     */
    public static void max_packet_size(MemorySegment struct, int fieldValue) {
        struct.set(max_packet_size$LAYOUT, max_packet_size$OFFSET, fieldValue);
    }

    private static final OfInt max_fragments_in_flight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_fragments_in_flight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max_fragments_in_flight
     * }
     */
    public static final OfInt max_fragments_in_flight$layout() {
        return max_fragments_in_flight$LAYOUT;
    }

    private static final long max_fragments_in_flight$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max_fragments_in_flight
     * }
     */
    public static final long max_fragments_in_flight$offset() {
        return max_fragments_in_flight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max_fragments_in_flight
     * }
     */
    public static int max_fragments_in_flight(MemorySegment struct) {
        return struct.get(max_fragments_in_flight$LAYOUT, max_fragments_in_flight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max_fragments_in_flight
     * }
     */
    public static void max_fragments_in_flight(MemorySegment struct, int fieldValue) {
        struct.set(max_fragments_in_flight$LAYOUT, max_fragments_in_flight$OFFSET, fieldValue);
    }

    private static final OfInt max_size_single_send$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_size_single_send"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max_size_single_send
     * }
     */
    public static final OfInt max_size_single_send$layout() {
        return max_size_single_send$LAYOUT;
    }

    private static final long max_size_single_send$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max_size_single_send
     * }
     */
    public static final long max_size_single_send$offset() {
        return max_size_single_send$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max_size_single_send
     * }
     */
    public static int max_size_single_send(MemorySegment struct) {
        return struct.get(max_size_single_send$LAYOUT, max_size_single_send$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max_size_single_send
     * }
     */
    public static void max_size_single_send(MemorySegment struct, int fieldValue) {
        struct.set(max_size_single_send$LAYOUT, max_size_single_send$OFFSET, fieldValue);
    }

    private static final GroupLayout send_queue$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("send_queue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_socket_send_queue_t send_queue
     * }
     */
    public static final GroupLayout send_queue$layout() {
        return send_queue$LAYOUT;
    }

    private static final long send_queue$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_socket_send_queue_t send_queue
     * }
     */
    public static final long send_queue$offset() {
        return send_queue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_socket_send_queue_t send_queue
     * }
     */
    public static MemorySegment send_queue(MemorySegment struct) {
        return struct.asSlice(send_queue$OFFSET, send_queue$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_socket_send_queue_t send_queue
     * }
     */
    public static void send_queue(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, send_queue$OFFSET, send_queue$LAYOUT.byteSize());
    }

    private static final OfInt fragments_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fragments_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fragments_count
     * }
     */
    public static final OfInt fragments_count$layout() {
        return fragments_count$LAYOUT;
    }

    private static final long fragments_count$OFFSET = 32808;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fragments_count
     * }
     */
    public static final long fragments_count$offset() {
        return fragments_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fragments_count
     * }
     */
    public static int fragments_count(MemorySegment struct) {
        return struct.get(fragments_count$LAYOUT, fragments_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fragments_count
     * }
     */
    public static void fragments_count(MemorySegment struct, int fieldValue) {
        struct.set(fragments_count$LAYOUT, fragments_count$OFFSET, fieldValue);
    }

    private static final OfInt fragments_capacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fragments_capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fragments_capacity
     * }
     */
    public static final OfInt fragments_capacity$layout() {
        return fragments_capacity$LAYOUT;
    }

    private static final long fragments_capacity$OFFSET = 32812;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fragments_capacity
     * }
     */
    public static final long fragments_capacity$offset() {
        return fragments_capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fragments_capacity
     * }
     */
    public static int fragments_capacity(MemorySegment struct) {
        return struct.get(fragments_capacity$LAYOUT, fragments_capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fragments_capacity
     * }
     */
    public static void fragments_capacity(MemorySegment struct, int fieldValue) {
        struct.set(fragments_capacity$LAYOUT, fragments_capacity$OFFSET, fieldValue);
    }

    private static final AddressLayout fragments$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fragments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_fragment_t *fragments
     * }
     */
    public static final AddressLayout fragments$layout() {
        return fragments$LAYOUT;
    }

    private static final long fragments$OFFSET = 32816;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_fragment_t *fragments
     * }
     */
    public static final long fragments$offset() {
        return fragments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_fragment_t *fragments
     * }
     */
    public static MemorySegment fragments(MemorySegment struct) {
        return struct.get(fragments$LAYOUT, fragments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_fragment_t *fragments
     * }
     */
    public static void fragments(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fragments$LAYOUT, fragments$OFFSET, fieldValue);
    }

    private static final AddressLayout ack_system$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ack_system"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_ack_system_t *ack_system
     * }
     */
    public static final AddressLayout ack_system$layout() {
        return ack_system$LAYOUT;
    }

    private static final long ack_system$OFFSET = 32824;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_ack_system_t *ack_system
     * }
     */
    public static final long ack_system$offset() {
        return ack_system$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_ack_system_t *ack_system
     * }
     */
    public static MemorySegment ack_system(MemorySegment struct) {
        return struct.get(ack_system$LAYOUT, ack_system$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_ack_system_t *ack_system
     * }
     */
    public static void ack_system(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ack_system$LAYOUT, ack_system$OFFSET, fieldValue);
    }

    private static final GroupLayout sent_fragments$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sent_fragments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_sequence_buffer_t sent_fragments
     * }
     */
    public static final GroupLayout sent_fragments$layout() {
        return sent_fragments$LAYOUT;
    }

    private static final long sent_fragments$OFFSET = 32832;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_sequence_buffer_t sent_fragments
     * }
     */
    public static final long sent_fragments$offset() {
        return sent_fragments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_sequence_buffer_t sent_fragments
     * }
     */
    public static MemorySegment sent_fragments(MemorySegment struct) {
        return struct.asSlice(sent_fragments$OFFSET, sent_fragments$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_sequence_buffer_t sent_fragments
     * }
     */
    public static void sent_fragments(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sent_fragments$OFFSET, sent_fragments$LAYOUT.byteSize());
    }

    private static final OfLong fragment_id_gen$LAYOUT = (OfLong)$LAYOUT.select(groupElement("fragment_id_gen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t fragment_id_gen
     * }
     */
    public static final OfLong fragment_id_gen$layout() {
        return fragment_id_gen$LAYOUT;
    }

    private static final long fragment_id_gen$OFFSET = 32880;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t fragment_id_gen
     * }
     */
    public static final long fragment_id_gen$offset() {
        return fragment_id_gen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t fragment_id_gen
     * }
     */
    public static long fragment_id_gen(MemorySegment struct) {
        return struct.get(fragment_id_gen$LAYOUT, fragment_id_gen$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t fragment_id_gen
     * }
     */
    public static void fragment_id_gen(MemorySegment struct, long fieldValue) {
        struct.set(fragment_id_gen$LAYOUT, fragment_id_gen$OFFSET, fieldValue);
    }

    private static final OfShort oldest_received_sequence$LAYOUT = (OfShort)$LAYOUT.select(groupElement("oldest_received_sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t oldest_received_sequence
     * }
     */
    public static final OfShort oldest_received_sequence$layout() {
        return oldest_received_sequence$LAYOUT;
    }

    private static final long oldest_received_sequence$OFFSET = 32888;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t oldest_received_sequence
     * }
     */
    public static final long oldest_received_sequence$offset() {
        return oldest_received_sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t oldest_received_sequence
     * }
     */
    public static short oldest_received_sequence(MemorySegment struct) {
        return struct.get(oldest_received_sequence$LAYOUT, oldest_received_sequence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t oldest_received_sequence
     * }
     */
    public static void oldest_received_sequence(MemorySegment struct, short fieldValue) {
        struct.set(oldest_received_sequence$LAYOUT, oldest_received_sequence$OFFSET, fieldValue);
    }

    private static final GroupLayout reliable_and_in_order_assembly$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("reliable_and_in_order_assembly"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_packet_assembly_t reliable_and_in_order_assembly
     * }
     */
    public static final GroupLayout reliable_and_in_order_assembly$layout() {
        return reliable_and_in_order_assembly$LAYOUT;
    }

    private static final long reliable_and_in_order_assembly$OFFSET = 32896;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_packet_assembly_t reliable_and_in_order_assembly
     * }
     */
    public static final long reliable_and_in_order_assembly$offset() {
        return reliable_and_in_order_assembly$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_packet_assembly_t reliable_and_in_order_assembly
     * }
     */
    public static MemorySegment reliable_and_in_order_assembly(MemorySegment struct) {
        return struct.asSlice(reliable_and_in_order_assembly$OFFSET, reliable_and_in_order_assembly$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_packet_assembly_t reliable_and_in_order_assembly
     * }
     */
    public static void reliable_and_in_order_assembly(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reliable_and_in_order_assembly$OFFSET, reliable_and_in_order_assembly$LAYOUT.byteSize());
    }

    private static final GroupLayout fire_and_forget_assembly$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fire_and_forget_assembly"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_packet_assembly_t fire_and_forget_assembly
     * }
     */
    public static final GroupLayout fire_and_forget_assembly$layout() {
        return fire_and_forget_assembly$LAYOUT;
    }

    private static final long fire_and_forget_assembly$OFFSET = 45256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_packet_assembly_t fire_and_forget_assembly
     * }
     */
    public static final long fire_and_forget_assembly$offset() {
        return fire_and_forget_assembly$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_packet_assembly_t fire_and_forget_assembly
     * }
     */
    public static MemorySegment fire_and_forget_assembly(MemorySegment struct) {
        return struct.asSlice(fire_and_forget_assembly$OFFSET, fire_and_forget_assembly$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_packet_assembly_t fire_and_forget_assembly
     * }
     */
    public static void fire_and_forget_assembly(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fire_and_forget_assembly$OFFSET, fire_and_forget_assembly$LAYOUT.byteSize());
    }

    private static final AddressLayout mem_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mem_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final AddressLayout mem_ctx$layout() {
        return mem_ctx$LAYOUT;
    }

    private static final long mem_ctx$OFFSET = 57616;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final long mem_ctx$offset() {
        return mem_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static MemorySegment mem_ctx(MemorySegment struct) {
        return struct.get(mem_ctx$LAYOUT, mem_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static void mem_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mem_ctx$LAYOUT, mem_ctx$OFFSET, fieldValue);
    }

    private static final AddressLayout udata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("udata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static final AddressLayout udata$layout() {
        return udata$LAYOUT;
    }

    private static final long udata$OFFSET = 57624;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static final long udata$offset() {
        return udata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static MemorySegment udata(MemorySegment struct) {
        return struct.get(udata$LAYOUT, udata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static void udata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(udata$LAYOUT, udata$OFFSET, fieldValue);
    }

    private static final SequenceLayout fire_and_forget_buffer$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("fire_and_forget_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t fire_and_forget_buffer[1109]
     * }
     */
    public static final SequenceLayout fire_and_forget_buffer$layout() {
        return fire_and_forget_buffer$LAYOUT;
    }

    private static final long fire_and_forget_buffer$OFFSET = 57632;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t fire_and_forget_buffer[1109]
     * }
     */
    public static final long fire_and_forget_buffer$offset() {
        return fire_and_forget_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t fire_and_forget_buffer[1109]
     * }
     */
    public static MemorySegment fire_and_forget_buffer(MemorySegment struct) {
        return struct.asSlice(fire_and_forget_buffer$OFFSET, fire_and_forget_buffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t fire_and_forget_buffer[1109]
     * }
     */
    public static void fire_and_forget_buffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fire_and_forget_buffer$OFFSET, fire_and_forget_buffer$LAYOUT.byteSize());
    }

    private static long[] fire_and_forget_buffer$DIMS = { 1109 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t fire_and_forget_buffer[1109]
     * }
     */
    public static long[] fire_and_forget_buffer$dimensions() {
        return fire_and_forget_buffer$DIMS;
    }
    private static final VarHandle fire_and_forget_buffer$ELEM_HANDLE = fire_and_forget_buffer$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t fire_and_forget_buffer[1109]
     * }
     */
    public static byte fire_and_forget_buffer(MemorySegment struct, long index0) {
        return (byte)fire_and_forget_buffer$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t fire_and_forget_buffer[1109]
     * }
     */
    public static void fire_and_forget_buffer(MemorySegment struct, long index0, byte fieldValue) {
        fire_and_forget_buffer$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

