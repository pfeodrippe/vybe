// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_server_t {
 *     bool running;
 *     cn_endpoint_t endpoint;
 *     cn_crypto_sign_public_t public_key;
 *     cn_crypto_sign_secret_t secret_key;
 *     cn_server_config_t config;
 *     cn_socket_t socket;
 *     uint8_t buffer[1280];
 *     cn_circular_buffer_t event_queue;
 *     cn_transport_t *client_transports[32];
 *     cn_protocol_server_t *p_server;
 *     void *mem_ctx;
 * }
 * }
 */
public class cn_server_t {

    cn_server_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_BOOL.withName("running"),
        MemoryLayout.paddingLayout(3),
        cn_endpoint_t.layout().withName("endpoint"),
        cn_crypto_sign_public_t.layout().withName("public_key"),
        cn_crypto_sign_secret_t.layout().withName("secret_key"),
        MemoryLayout.paddingLayout(4),
        cn_server_config_t.layout().withName("config"),
        cn_socket_t.layout().withName("socket"),
        MemoryLayout.sequenceLayout(1280, netcode.C_CHAR).withName("buffer"),
        MemoryLayout.paddingLayout(4),
        cn_circular_buffer_t.layout().withName("event_queue"),
        MemoryLayout.sequenceLayout(32, netcode.C_POINTER).withName("client_transports"),
        netcode.C_POINTER.withName("p_server"),
        netcode.C_POINTER.withName("mem_ctx")
    ).withName("cn_server_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean running$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("running"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool running
     * }
     */
    public static final OfBoolean running$layout() {
        return running$LAYOUT;
    }

    private static final long running$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool running
     * }
     */
    public static final long running$offset() {
        return running$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool running
     * }
     */
    public static boolean running(MemorySegment struct) {
        return struct.get(running$LAYOUT, running$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool running
     * }
     */
    public static void running(MemorySegment struct, boolean fieldValue) {
        struct.set(running$LAYOUT, running$OFFSET, fieldValue);
    }

    private static final GroupLayout endpoint$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("endpoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_endpoint_t endpoint
     * }
     */
    public static final GroupLayout endpoint$layout() {
        return endpoint$LAYOUT;
    }

    private static final long endpoint$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_endpoint_t endpoint
     * }
     */
    public static final long endpoint$offset() {
        return endpoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_endpoint_t endpoint
     * }
     */
    public static MemorySegment endpoint(MemorySegment struct) {
        return struct.asSlice(endpoint$OFFSET, endpoint$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_endpoint_t endpoint
     * }
     */
    public static void endpoint(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, endpoint$OFFSET, endpoint$LAYOUT.byteSize());
    }

    private static final GroupLayout public_key$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("public_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_crypto_sign_public_t public_key
     * }
     */
    public static final GroupLayout public_key$layout() {
        return public_key$LAYOUT;
    }

    private static final long public_key$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_crypto_sign_public_t public_key
     * }
     */
    public static final long public_key$offset() {
        return public_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_crypto_sign_public_t public_key
     * }
     */
    public static MemorySegment public_key(MemorySegment struct) {
        return struct.asSlice(public_key$OFFSET, public_key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_crypto_sign_public_t public_key
     * }
     */
    public static void public_key(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, public_key$OFFSET, public_key$LAYOUT.byteSize());
    }

    private static final GroupLayout secret_key$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("secret_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_crypto_sign_secret_t secret_key
     * }
     */
    public static final GroupLayout secret_key$layout() {
        return secret_key$LAYOUT;
    }

    private static final long secret_key$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_crypto_sign_secret_t secret_key
     * }
     */
    public static final long secret_key$offset() {
        return secret_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_crypto_sign_secret_t secret_key
     * }
     */
    public static MemorySegment secret_key(MemorySegment struct) {
        return struct.asSlice(secret_key$OFFSET, secret_key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_crypto_sign_secret_t secret_key
     * }
     */
    public static void secret_key(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, secret_key$OFFSET, secret_key$LAYOUT.byteSize());
    }

    private static final GroupLayout config$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("config"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_server_config_t config
     * }
     */
    public static final GroupLayout config$layout() {
        return config$LAYOUT;
    }

    private static final long config$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_server_config_t config
     * }
     */
    public static final long config$offset() {
        return config$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_server_config_t config
     * }
     */
    public static MemorySegment config(MemorySegment struct) {
        return struct.asSlice(config$OFFSET, config$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_server_config_t config
     * }
     */
    public static void config(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, config$OFFSET, config$LAYOUT.byteSize());
    }

    private static final GroupLayout socket$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("socket"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_socket_t socket
     * }
     */
    public static final GroupLayout socket$layout() {
        return socket$LAYOUT;
    }

    private static final long socket$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_socket_t socket
     * }
     */
    public static final long socket$offset() {
        return socket$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_socket_t socket
     * }
     */
    public static MemorySegment socket(MemorySegment struct) {
        return struct.asSlice(socket$OFFSET, socket$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_socket_t socket
     * }
     */
    public static void socket(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, socket$OFFSET, socket$LAYOUT.byteSize());
    }

    private static final SequenceLayout buffer$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t buffer[1280]
     * }
     */
    public static final SequenceLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = 292;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t buffer[1280]
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t buffer[1280]
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.asSlice(buffer$OFFSET, buffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t buffer[1280]
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, buffer$OFFSET, buffer$LAYOUT.byteSize());
    }

    private static long[] buffer$DIMS = { 1280 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t buffer[1280]
     * }
     */
    public static long[] buffer$dimensions() {
        return buffer$DIMS;
    }
    private static final VarHandle buffer$ELEM_HANDLE = buffer$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t buffer[1280]
     * }
     */
    public static byte buffer(MemorySegment struct, long index0) {
        return (byte)buffer$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t buffer[1280]
     * }
     */
    public static void buffer(MemorySegment struct, long index0, byte fieldValue) {
        buffer$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout event_queue$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("event_queue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_circular_buffer_t event_queue
     * }
     */
    public static final GroupLayout event_queue$layout() {
        return event_queue$LAYOUT;
    }

    private static final long event_queue$OFFSET = 1576;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_circular_buffer_t event_queue
     * }
     */
    public static final long event_queue$offset() {
        return event_queue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_circular_buffer_t event_queue
     * }
     */
    public static MemorySegment event_queue(MemorySegment struct) {
        return struct.asSlice(event_queue$OFFSET, event_queue$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_circular_buffer_t event_queue
     * }
     */
    public static void event_queue(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, event_queue$OFFSET, event_queue$LAYOUT.byteSize());
    }

    private static final SequenceLayout client_transports$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("client_transports"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_transport_t *client_transports[32]
     * }
     */
    public static final SequenceLayout client_transports$layout() {
        return client_transports$LAYOUT;
    }

    private static final long client_transports$OFFSET = 1608;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_transport_t *client_transports[32]
     * }
     */
    public static final long client_transports$offset() {
        return client_transports$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_transport_t *client_transports[32]
     * }
     */
    public static MemorySegment client_transports(MemorySegment struct) {
        return struct.asSlice(client_transports$OFFSET, client_transports$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_transport_t *client_transports[32]
     * }
     */
    public static void client_transports(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, client_transports$OFFSET, client_transports$LAYOUT.byteSize());
    }

    private static long[] client_transports$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * cn_transport_t *client_transports[32]
     * }
     */
    public static long[] client_transports$dimensions() {
        return client_transports$DIMS;
    }
    private static final VarHandle client_transports$ELEM_HANDLE = client_transports$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * cn_transport_t *client_transports[32]
     * }
     */
    public static MemorySegment client_transports(MemorySegment struct, long index0) {
        return (MemorySegment)client_transports$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * cn_transport_t *client_transports[32]
     * }
     */
    public static void client_transports(MemorySegment struct, long index0, MemorySegment fieldValue) {
        client_transports$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout p_server$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("p_server"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_protocol_server_t *p_server
     * }
     */
    public static final AddressLayout p_server$layout() {
        return p_server$LAYOUT;
    }

    private static final long p_server$OFFSET = 1864;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_protocol_server_t *p_server
     * }
     */
    public static final long p_server$offset() {
        return p_server$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_protocol_server_t *p_server
     * }
     */
    public static MemorySegment p_server(MemorySegment struct) {
        return struct.get(p_server$LAYOUT, p_server$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_protocol_server_t *p_server
     * }
     */
    public static void p_server(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(p_server$LAYOUT, p_server$OFFSET, fieldValue);
    }

    private static final AddressLayout mem_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mem_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final AddressLayout mem_ctx$layout() {
        return mem_ctx$LAYOUT;
    }

    private static final long mem_ctx$OFFSET = 1872;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final long mem_ctx$offset() {
        return mem_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static MemorySegment mem_ctx(MemorySegment struct) {
        return struct.get(mem_ctx$LAYOUT, mem_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static void mem_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mem_ctx$LAYOUT, mem_ctx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

