// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_ack_system_config_t {
 *     int max_packet_size;
 *     int initial_ack_capacity;
 *     int sent_packets_sequence_buffer_size;
 *     int received_packets_sequence_buffer_size;
 *     int index;
 *     cn_result_t (*send_packet_fn)(int, void *, int, void *);
 *     void *udata;
 *     void *user_allocator_context;
 * }
 * }
 */
public class cn_ack_system_config_t {

    cn_ack_system_config_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_INT.withName("max_packet_size"),
        netcode.C_INT.withName("initial_ack_capacity"),
        netcode.C_INT.withName("sent_packets_sequence_buffer_size"),
        netcode.C_INT.withName("received_packets_sequence_buffer_size"),
        netcode.C_INT.withName("index"),
        MemoryLayout.paddingLayout(4),
        netcode.C_POINTER.withName("send_packet_fn"),
        netcode.C_POINTER.withName("udata"),
        netcode.C_POINTER.withName("user_allocator_context")
    ).withName("cn_ack_system_config_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt max_packet_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_packet_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max_packet_size
     * }
     */
    public static final OfInt max_packet_size$layout() {
        return max_packet_size$LAYOUT;
    }

    private static final long max_packet_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max_packet_size
     * }
     */
    public static final long max_packet_size$offset() {
        return max_packet_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max_packet_size
     * }
     */
    public static int max_packet_size(MemorySegment struct) {
        return struct.get(max_packet_size$LAYOUT, max_packet_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max_packet_size
     * }
     */
    public static void max_packet_size(MemorySegment struct, int fieldValue) {
        struct.set(max_packet_size$LAYOUT, max_packet_size$OFFSET, fieldValue);
    }

    private static final OfInt initial_ack_capacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("initial_ack_capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int initial_ack_capacity
     * }
     */
    public static final OfInt initial_ack_capacity$layout() {
        return initial_ack_capacity$LAYOUT;
    }

    private static final long initial_ack_capacity$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int initial_ack_capacity
     * }
     */
    public static final long initial_ack_capacity$offset() {
        return initial_ack_capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int initial_ack_capacity
     * }
     */
    public static int initial_ack_capacity(MemorySegment struct) {
        return struct.get(initial_ack_capacity$LAYOUT, initial_ack_capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int initial_ack_capacity
     * }
     */
    public static void initial_ack_capacity(MemorySegment struct, int fieldValue) {
        struct.set(initial_ack_capacity$LAYOUT, initial_ack_capacity$OFFSET, fieldValue);
    }

    private static final OfInt sent_packets_sequence_buffer_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sent_packets_sequence_buffer_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sent_packets_sequence_buffer_size
     * }
     */
    public static final OfInt sent_packets_sequence_buffer_size$layout() {
        return sent_packets_sequence_buffer_size$LAYOUT;
    }

    private static final long sent_packets_sequence_buffer_size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sent_packets_sequence_buffer_size
     * }
     */
    public static final long sent_packets_sequence_buffer_size$offset() {
        return sent_packets_sequence_buffer_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sent_packets_sequence_buffer_size
     * }
     */
    public static int sent_packets_sequence_buffer_size(MemorySegment struct) {
        return struct.get(sent_packets_sequence_buffer_size$LAYOUT, sent_packets_sequence_buffer_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sent_packets_sequence_buffer_size
     * }
     */
    public static void sent_packets_sequence_buffer_size(MemorySegment struct, int fieldValue) {
        struct.set(sent_packets_sequence_buffer_size$LAYOUT, sent_packets_sequence_buffer_size$OFFSET, fieldValue);
    }

    private static final OfInt received_packets_sequence_buffer_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("received_packets_sequence_buffer_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int received_packets_sequence_buffer_size
     * }
     */
    public static final OfInt received_packets_sequence_buffer_size$layout() {
        return received_packets_sequence_buffer_size$LAYOUT;
    }

    private static final long received_packets_sequence_buffer_size$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int received_packets_sequence_buffer_size
     * }
     */
    public static final long received_packets_sequence_buffer_size$offset() {
        return received_packets_sequence_buffer_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int received_packets_sequence_buffer_size
     * }
     */
    public static int received_packets_sequence_buffer_size(MemorySegment struct) {
        return struct.get(received_packets_sequence_buffer_size$LAYOUT, received_packets_sequence_buffer_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int received_packets_sequence_buffer_size
     * }
     */
    public static void received_packets_sequence_buffer_size(MemorySegment struct, int fieldValue) {
        struct.set(received_packets_sequence_buffer_size$LAYOUT, received_packets_sequence_buffer_size$OFFSET, fieldValue);
    }

    private static final OfInt index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static final OfInt index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static int index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static void index(MemorySegment struct, int fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * cn_result_t (*send_packet_fn)(int, void *, int, void *)
     * }
     */
    public static class send_packet_fn {

        send_packet_fn() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(int _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            cn_result_t.layout(),
            netcode.C_INT,
            netcode.C_POINTER,
            netcode.C_INT,
            netcode.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = netcode.upcallHandle(send_packet_fn.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(send_packet_fn.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, SegmentAllocator alloc,int _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, alloc, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout send_packet_fn$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("send_packet_fn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_result_t (*send_packet_fn)(int, void *, int, void *)
     * }
     */
    public static final AddressLayout send_packet_fn$layout() {
        return send_packet_fn$LAYOUT;
    }

    private static final long send_packet_fn$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_result_t (*send_packet_fn)(int, void *, int, void *)
     * }
     */
    public static final long send_packet_fn$offset() {
        return send_packet_fn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_result_t (*send_packet_fn)(int, void *, int, void *)
     * }
     */
    public static MemorySegment send_packet_fn(MemorySegment struct) {
        return struct.get(send_packet_fn$LAYOUT, send_packet_fn$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_result_t (*send_packet_fn)(int, void *, int, void *)
     * }
     */
    public static void send_packet_fn(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(send_packet_fn$LAYOUT, send_packet_fn$OFFSET, fieldValue);
    }

    private static final AddressLayout udata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("udata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static final AddressLayout udata$layout() {
        return udata$LAYOUT;
    }

    private static final long udata$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static final long udata$offset() {
        return udata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static MemorySegment udata(MemorySegment struct) {
        return struct.get(udata$LAYOUT, udata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static void udata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(udata$LAYOUT, udata$OFFSET, fieldValue);
    }

    private static final AddressLayout user_allocator_context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("user_allocator_context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static final AddressLayout user_allocator_context$layout() {
        return user_allocator_context$LAYOUT;
    }

    private static final long user_allocator_context$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static final long user_allocator_context$offset() {
        return user_allocator_context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static MemorySegment user_allocator_context(MemorySegment struct) {
        return struct.get(user_allocator_context$LAYOUT, user_allocator_context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static void user_allocator_context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(user_allocator_context$LAYOUT, user_allocator_context$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

