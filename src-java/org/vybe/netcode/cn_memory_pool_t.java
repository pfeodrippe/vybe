// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_memory_pool_t {
 *     int element_size;
 *     int arena_size;
 *     uint8_t *arena;
 *     void *free_list;
 *     int overflow_count;
 *     void *mem_ctx;
 * }
 * }
 */
public class cn_memory_pool_t {

    cn_memory_pool_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_INT.withName("element_size"),
        netcode.C_INT.withName("arena_size"),
        netcode.C_POINTER.withName("arena"),
        netcode.C_POINTER.withName("free_list"),
        netcode.C_INT.withName("overflow_count"),
        MemoryLayout.paddingLayout(4),
        netcode.C_POINTER.withName("mem_ctx")
    ).withName("cn_memory_pool_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt element_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("element_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int element_size
     * }
     */
    public static final OfInt element_size$layout() {
        return element_size$LAYOUT;
    }

    private static final long element_size$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int element_size
     * }
     */
    public static final long element_size$offset() {
        return element_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int element_size
     * }
     */
    public static int element_size(MemorySegment struct) {
        return struct.get(element_size$LAYOUT, element_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int element_size
     * }
     */
    public static void element_size(MemorySegment struct, int fieldValue) {
        struct.set(element_size$LAYOUT, element_size$OFFSET, fieldValue);
    }

    private static final OfInt arena_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("arena_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int arena_size
     * }
     */
    public static final OfInt arena_size$layout() {
        return arena_size$LAYOUT;
    }

    private static final long arena_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int arena_size
     * }
     */
    public static final long arena_size$offset() {
        return arena_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int arena_size
     * }
     */
    public static int arena_size(MemorySegment struct) {
        return struct.get(arena_size$LAYOUT, arena_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int arena_size
     * }
     */
    public static void arena_size(MemorySegment struct, int fieldValue) {
        struct.set(arena_size$LAYOUT, arena_size$OFFSET, fieldValue);
    }

    private static final AddressLayout arena$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("arena"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *arena
     * }
     */
    public static final AddressLayout arena$layout() {
        return arena$LAYOUT;
    }

    private static final long arena$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *arena
     * }
     */
    public static final long arena$offset() {
        return arena$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *arena
     * }
     */
    public static MemorySegment arena(MemorySegment struct) {
        return struct.get(arena$LAYOUT, arena$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *arena
     * }
     */
    public static void arena(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(arena$LAYOUT, arena$OFFSET, fieldValue);
    }

    private static final AddressLayout free_list$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *free_list
     * }
     */
    public static final AddressLayout free_list$layout() {
        return free_list$LAYOUT;
    }

    private static final long free_list$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *free_list
     * }
     */
    public static final long free_list$offset() {
        return free_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *free_list
     * }
     */
    public static MemorySegment free_list(MemorySegment struct) {
        return struct.get(free_list$LAYOUT, free_list$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *free_list
     * }
     */
    public static void free_list(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free_list$LAYOUT, free_list$OFFSET, fieldValue);
    }

    private static final OfInt overflow_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("overflow_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int overflow_count
     * }
     */
    public static final OfInt overflow_count$layout() {
        return overflow_count$LAYOUT;
    }

    private static final long overflow_count$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int overflow_count
     * }
     */
    public static final long overflow_count$offset() {
        return overflow_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int overflow_count
     * }
     */
    public static int overflow_count(MemorySegment struct) {
        return struct.get(overflow_count$LAYOUT, overflow_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int overflow_count
     * }
     */
    public static void overflow_count(MemorySegment struct, int fieldValue) {
        struct.set(overflow_count$LAYOUT, overflow_count$OFFSET, fieldValue);
    }

    private static final AddressLayout mem_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mem_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final AddressLayout mem_ctx$layout() {
        return mem_ctx$LAYOUT;
    }

    private static final long mem_ctx$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final long mem_ctx$offset() {
        return mem_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static MemorySegment mem_ctx(MemorySegment struct) {
        return struct.get(mem_ctx$LAYOUT, mem_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static void mem_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mem_ctx$LAYOUT, mem_ctx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

