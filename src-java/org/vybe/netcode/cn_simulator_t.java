// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_simulator_t {
 *     cn_socket_t *socket;
 *     double latency;
 *     double jitter;
 *     double drop_chance;
 *     double duplicate_chance;
 *     cn_rnd_t rnd;
 *     int index;
 *     void *mem_ctx;
 *     cn_simulator_packet_t packets[5120];
 * }
 * }
 */
public class cn_simulator_t {

    cn_simulator_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_POINTER.withName("socket"),
        netcode.C_DOUBLE.withName("latency"),
        netcode.C_DOUBLE.withName("jitter"),
        netcode.C_DOUBLE.withName("drop_chance"),
        netcode.C_DOUBLE.withName("duplicate_chance"),
        cn_rnd_t.layout().withName("rnd"),
        netcode.C_INT.withName("index"),
        MemoryLayout.paddingLayout(4),
        netcode.C_POINTER.withName("mem_ctx"),
        MemoryLayout.sequenceLayout(5120, cn_simulator_packet_t.layout()).withName("packets")
    ).withName("cn_simulator_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout socket$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("socket"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_socket_t *socket
     * }
     */
    public static final AddressLayout socket$layout() {
        return socket$LAYOUT;
    }

    private static final long socket$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_socket_t *socket
     * }
     */
    public static final long socket$offset() {
        return socket$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_socket_t *socket
     * }
     */
    public static MemorySegment socket(MemorySegment struct) {
        return struct.get(socket$LAYOUT, socket$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_socket_t *socket
     * }
     */
    public static void socket(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(socket$LAYOUT, socket$OFFSET, fieldValue);
    }

    private static final OfDouble latency$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("latency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double latency
     * }
     */
    public static final OfDouble latency$layout() {
        return latency$LAYOUT;
    }

    private static final long latency$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double latency
     * }
     */
    public static final long latency$offset() {
        return latency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double latency
     * }
     */
    public static double latency(MemorySegment struct) {
        return struct.get(latency$LAYOUT, latency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double latency
     * }
     */
    public static void latency(MemorySegment struct, double fieldValue) {
        struct.set(latency$LAYOUT, latency$OFFSET, fieldValue);
    }

    private static final OfDouble jitter$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("jitter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double jitter
     * }
     */
    public static final OfDouble jitter$layout() {
        return jitter$LAYOUT;
    }

    private static final long jitter$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double jitter
     * }
     */
    public static final long jitter$offset() {
        return jitter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double jitter
     * }
     */
    public static double jitter(MemorySegment struct) {
        return struct.get(jitter$LAYOUT, jitter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double jitter
     * }
     */
    public static void jitter(MemorySegment struct, double fieldValue) {
        struct.set(jitter$LAYOUT, jitter$OFFSET, fieldValue);
    }

    private static final OfDouble drop_chance$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("drop_chance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double drop_chance
     * }
     */
    public static final OfDouble drop_chance$layout() {
        return drop_chance$LAYOUT;
    }

    private static final long drop_chance$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double drop_chance
     * }
     */
    public static final long drop_chance$offset() {
        return drop_chance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double drop_chance
     * }
     */
    public static double drop_chance(MemorySegment struct) {
        return struct.get(drop_chance$LAYOUT, drop_chance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double drop_chance
     * }
     */
    public static void drop_chance(MemorySegment struct, double fieldValue) {
        struct.set(drop_chance$LAYOUT, drop_chance$OFFSET, fieldValue);
    }

    private static final OfDouble duplicate_chance$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("duplicate_chance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double duplicate_chance
     * }
     */
    public static final OfDouble duplicate_chance$layout() {
        return duplicate_chance$LAYOUT;
    }

    private static final long duplicate_chance$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double duplicate_chance
     * }
     */
    public static final long duplicate_chance$offset() {
        return duplicate_chance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double duplicate_chance
     * }
     */
    public static double duplicate_chance(MemorySegment struct) {
        return struct.get(duplicate_chance$LAYOUT, duplicate_chance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double duplicate_chance
     * }
     */
    public static void duplicate_chance(MemorySegment struct, double fieldValue) {
        struct.set(duplicate_chance$LAYOUT, duplicate_chance$OFFSET, fieldValue);
    }

    private static final GroupLayout rnd$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("rnd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_rnd_t rnd
     * }
     */
    public static final GroupLayout rnd$layout() {
        return rnd$LAYOUT;
    }

    private static final long rnd$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_rnd_t rnd
     * }
     */
    public static final long rnd$offset() {
        return rnd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_rnd_t rnd
     * }
     */
    public static MemorySegment rnd(MemorySegment struct) {
        return struct.asSlice(rnd$OFFSET, rnd$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_rnd_t rnd
     * }
     */
    public static void rnd(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, rnd$OFFSET, rnd$LAYOUT.byteSize());
    }

    private static final OfInt index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static final OfInt index$layout() {
        return index$LAYOUT;
    }

    private static final long index$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static final long index$offset() {
        return index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static int index(MemorySegment struct) {
        return struct.get(index$LAYOUT, index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int index
     * }
     */
    public static void index(MemorySegment struct, int fieldValue) {
        struct.set(index$LAYOUT, index$OFFSET, fieldValue);
    }

    private static final AddressLayout mem_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mem_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final AddressLayout mem_ctx$layout() {
        return mem_ctx$LAYOUT;
    }

    private static final long mem_ctx$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final long mem_ctx$offset() {
        return mem_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static MemorySegment mem_ctx(MemorySegment struct) {
        return struct.get(mem_ctx$LAYOUT, mem_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static void mem_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mem_ctx$LAYOUT, mem_ctx$OFFSET, fieldValue);
    }

    private static final SequenceLayout packets$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("packets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_simulator_packet_t packets[5120]
     * }
     */
    public static final SequenceLayout packets$layout() {
        return packets$LAYOUT;
    }

    private static final long packets$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_simulator_packet_t packets[5120]
     * }
     */
    public static final long packets$offset() {
        return packets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_simulator_packet_t packets[5120]
     * }
     */
    public static MemorySegment packets(MemorySegment struct) {
        return struct.asSlice(packets$OFFSET, packets$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_simulator_packet_t packets[5120]
     * }
     */
    public static void packets(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, packets$OFFSET, packets$LAYOUT.byteSize());
    }

    private static long[] packets$DIMS = { 5120 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * cn_simulator_packet_t packets[5120]
     * }
     */
    public static long[] packets$dimensions() {
        return packets$DIMS;
    }
    private static final MethodHandle packets$ELEM_HANDLE = packets$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * cn_simulator_packet_t packets[5120]
     * }
     */
    public static MemorySegment packets(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)packets$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * cn_simulator_packet_t packets[5120]
     * }
     */
    public static void packets(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, packets(struct, index0), 0L, cn_simulator_packet_t.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

