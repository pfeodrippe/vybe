// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct hydro_hash_state {
 *     uint32_t state[12];
 *     uint8_t buf_off;
 *     uint8_t align[3];
 * }
 * }
 */
public class hydro_hash_state {

    hydro_hash_state() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(12, netcode.C_INT).withName("state"),
        netcode.C_CHAR.withName("buf_off"),
        MemoryLayout.sequenceLayout(3, netcode.C_CHAR).withName("align")
    ).withName("hydro_hash_state");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout state$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t state[12]
     * }
     */
    public static final SequenceLayout state$layout() {
        return state$LAYOUT;
    }

    private static final long state$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t state[12]
     * }
     */
    public static final long state$offset() {
        return state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t state[12]
     * }
     */
    public static MemorySegment state(MemorySegment struct) {
        return struct.asSlice(state$OFFSET, state$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t state[12]
     * }
     */
    public static void state(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, state$OFFSET, state$LAYOUT.byteSize());
    }

    private static long[] state$DIMS = { 12 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t state[12]
     * }
     */
    public static long[] state$dimensions() {
        return state$DIMS;
    }
    private static final VarHandle state$ELEM_HANDLE = state$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t state[12]
     * }
     */
    public static int state(MemorySegment struct, long index0) {
        return (int)state$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t state[12]
     * }
     */
    public static void state(MemorySegment struct, long index0, int fieldValue) {
        state$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte buf_off$LAYOUT = (OfByte)$LAYOUT.select(groupElement("buf_off"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t buf_off
     * }
     */
    public static final OfByte buf_off$layout() {
        return buf_off$LAYOUT;
    }

    private static final long buf_off$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t buf_off
     * }
     */
    public static final long buf_off$offset() {
        return buf_off$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t buf_off
     * }
     */
    public static byte buf_off(MemorySegment struct) {
        return struct.get(buf_off$LAYOUT, buf_off$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t buf_off
     * }
     */
    public static void buf_off(MemorySegment struct, byte fieldValue) {
        struct.set(buf_off$LAYOUT, buf_off$OFFSET, fieldValue);
    }

    private static final SequenceLayout align$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("align"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t align[3]
     * }
     */
    public static final SequenceLayout align$layout() {
        return align$LAYOUT;
    }

    private static final long align$OFFSET = 49;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t align[3]
     * }
     */
    public static final long align$offset() {
        return align$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t align[3]
     * }
     */
    public static MemorySegment align(MemorySegment struct) {
        return struct.asSlice(align$OFFSET, align$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t align[3]
     * }
     */
    public static void align(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, align$OFFSET, align$LAYOUT.byteSize());
    }

    private static long[] align$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t align[3]
     * }
     */
    public static long[] align$dimensions() {
        return align$DIMS;
    }
    private static final VarHandle align$ELEM_HANDLE = align$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t align[3]
     * }
     */
    public static byte align(MemorySegment struct, long index0) {
        return (byte)align$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t align[3]
     * }
     */
    public static void align(MemorySegment struct, long index0, byte fieldValue) {
        align$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

