// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct hydro_sign_keypair {
 *     uint8_t pk[32];
 *     uint8_t sk[64];
 * }
 * }
 */
public class hydro_sign_keypair {

    hydro_sign_keypair() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(32, netcode.C_CHAR).withName("pk"),
        MemoryLayout.sequenceLayout(64, netcode.C_CHAR).withName("sk")
    ).withName("hydro_sign_keypair");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout pk$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pk[32]
     * }
     */
    public static final SequenceLayout pk$layout() {
        return pk$LAYOUT;
    }

    private static final long pk$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pk[32]
     * }
     */
    public static final long pk$offset() {
        return pk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pk[32]
     * }
     */
    public static MemorySegment pk(MemorySegment struct) {
        return struct.asSlice(pk$OFFSET, pk$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pk[32]
     * }
     */
    public static void pk(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pk$OFFSET, pk$LAYOUT.byteSize());
    }

    private static long[] pk$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t pk[32]
     * }
     */
    public static long[] pk$dimensions() {
        return pk$DIMS;
    }
    private static final VarHandle pk$ELEM_HANDLE = pk$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t pk[32]
     * }
     */
    public static byte pk(MemorySegment struct, long index0) {
        return (byte)pk$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t pk[32]
     * }
     */
    public static void pk(MemorySegment struct, long index0, byte fieldValue) {
        pk$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout sk$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("sk"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t sk[64]
     * }
     */
    public static final SequenceLayout sk$layout() {
        return sk$LAYOUT;
    }

    private static final long sk$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t sk[64]
     * }
     */
    public static final long sk$offset() {
        return sk$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t sk[64]
     * }
     */
    public static MemorySegment sk(MemorySegment struct) {
        return struct.asSlice(sk$OFFSET, sk$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t sk[64]
     * }
     */
    public static void sk(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sk$OFFSET, sk$LAYOUT.byteSize());
    }

    private static long[] sk$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t sk[64]
     * }
     */
    public static long[] sk$dimensions() {
        return sk$DIMS;
    }
    private static final VarHandle sk$ELEM_HANDLE = sk$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t sk[64]
     * }
     */
    public static byte sk(MemorySegment struct, long index0) {
        return (byte)sk$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t sk[64]
     * }
     */
    public static void sk(MemorySegment struct, long index0, byte fieldValue) {
        sk$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

