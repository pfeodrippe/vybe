// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_circular_buffer_t {
 *     int index0;
 *     int index1;
 *     int size_left;
 *     int capacity;
 *     uint8_t *data;
 *     void *user_allocator_context;
 * }
 * }
 */
public class cn_circular_buffer_t {

    cn_circular_buffer_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_INT.withName("index0"),
        netcode.C_INT.withName("index1"),
        netcode.C_INT.withName("size_left"),
        netcode.C_INT.withName("capacity"),
        netcode.C_POINTER.withName("data"),
        netcode.C_POINTER.withName("user_allocator_context")
    ).withName("cn_circular_buffer_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt index0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int index0
     * }
     */
    public static final OfInt index0$layout() {
        return index0$LAYOUT;
    }

    private static final long index0$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int index0
     * }
     */
    public static final long index0$offset() {
        return index0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int index0
     * }
     */
    public static int index0(MemorySegment struct) {
        return struct.get(index0$LAYOUT, index0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int index0
     * }
     */
    public static void index0(MemorySegment struct, int fieldValue) {
        struct.set(index0$LAYOUT, index0$OFFSET, fieldValue);
    }

    private static final OfInt index1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int index1
     * }
     */
    public static final OfInt index1$layout() {
        return index1$LAYOUT;
    }

    private static final long index1$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int index1
     * }
     */
    public static final long index1$offset() {
        return index1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int index1
     * }
     */
    public static int index1(MemorySegment struct) {
        return struct.get(index1$LAYOUT, index1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int index1
     * }
     */
    public static void index1(MemorySegment struct, int fieldValue) {
        struct.set(index1$LAYOUT, index1$OFFSET, fieldValue);
    }

    private static final OfInt size_left$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size_left"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int size_left
     * }
     */
    public static final OfInt size_left$layout() {
        return size_left$LAYOUT;
    }

    private static final long size_left$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int size_left
     * }
     */
    public static final long size_left$offset() {
        return size_left$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int size_left
     * }
     */
    public static int size_left(MemorySegment struct) {
        return struct.get(size_left$LAYOUT, size_left$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int size_left
     * }
     */
    public static void size_left(MemorySegment struct, int fieldValue) {
        struct.set(size_left$LAYOUT, size_left$OFFSET, fieldValue);
    }

    private static final OfInt capacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int capacity
     * }
     */
    public static final OfInt capacity$layout() {
        return capacity$LAYOUT;
    }

    private static final long capacity$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int capacity
     * }
     */
    public static final long capacity$offset() {
        return capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int capacity
     * }
     */
    public static int capacity(MemorySegment struct) {
        return struct.get(capacity$LAYOUT, capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int capacity
     * }
     */
    public static void capacity(MemorySegment struct, int fieldValue) {
        struct.set(capacity$LAYOUT, capacity$OFFSET, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final AddressLayout user_allocator_context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("user_allocator_context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static final AddressLayout user_allocator_context$layout() {
        return user_allocator_context$LAYOUT;
    }

    private static final long user_allocator_context$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static final long user_allocator_context$offset() {
        return user_allocator_context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static MemorySegment user_allocator_context(MemorySegment struct) {
        return struct.get(user_allocator_context$LAYOUT, user_allocator_context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static void user_allocator_context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(user_allocator_context$LAYOUT, user_allocator_context$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

