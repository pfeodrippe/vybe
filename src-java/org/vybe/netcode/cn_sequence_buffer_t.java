// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_sequence_buffer_t {
 *     uint16_t sequence;
 *     int capacity;
 *     int stride;
 *     uint32_t *entry_sequence;
 *     uint8_t *entry_data;
 *     void *udata;
 *     void *mem_ctx;
 * }
 * }
 */
public class cn_sequence_buffer_t {

    cn_sequence_buffer_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_SHORT.withName("sequence"),
        MemoryLayout.paddingLayout(2),
        netcode.C_INT.withName("capacity"),
        netcode.C_INT.withName("stride"),
        MemoryLayout.paddingLayout(4),
        netcode.C_POINTER.withName("entry_sequence"),
        netcode.C_POINTER.withName("entry_data"),
        netcode.C_POINTER.withName("udata"),
        netcode.C_POINTER.withName("mem_ctx")
    ).withName("cn_sequence_buffer_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort sequence$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t sequence
     * }
     */
    public static final OfShort sequence$layout() {
        return sequence$LAYOUT;
    }

    private static final long sequence$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t sequence
     * }
     */
    public static final long sequence$offset() {
        return sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t sequence
     * }
     */
    public static short sequence(MemorySegment struct) {
        return struct.get(sequence$LAYOUT, sequence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t sequence
     * }
     */
    public static void sequence(MemorySegment struct, short fieldValue) {
        struct.set(sequence$LAYOUT, sequence$OFFSET, fieldValue);
    }

    private static final OfInt capacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int capacity
     * }
     */
    public static final OfInt capacity$layout() {
        return capacity$LAYOUT;
    }

    private static final long capacity$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int capacity
     * }
     */
    public static final long capacity$offset() {
        return capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int capacity
     * }
     */
    public static int capacity(MemorySegment struct) {
        return struct.get(capacity$LAYOUT, capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int capacity
     * }
     */
    public static void capacity(MemorySegment struct, int fieldValue) {
        struct.set(capacity$LAYOUT, capacity$OFFSET, fieldValue);
    }

    private static final OfInt stride$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int stride
     * }
     */
    public static final OfInt stride$layout() {
        return stride$LAYOUT;
    }

    private static final long stride$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int stride
     * }
     */
    public static final long stride$offset() {
        return stride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int stride
     * }
     */
    public static int stride(MemorySegment struct) {
        return struct.get(stride$LAYOUT, stride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int stride
     * }
     */
    public static void stride(MemorySegment struct, int fieldValue) {
        struct.set(stride$LAYOUT, stride$OFFSET, fieldValue);
    }

    private static final AddressLayout entry_sequence$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entry_sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t *entry_sequence
     * }
     */
    public static final AddressLayout entry_sequence$layout() {
        return entry_sequence$LAYOUT;
    }

    private static final long entry_sequence$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t *entry_sequence
     * }
     */
    public static final long entry_sequence$offset() {
        return entry_sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t *entry_sequence
     * }
     */
    public static MemorySegment entry_sequence(MemorySegment struct) {
        return struct.get(entry_sequence$LAYOUT, entry_sequence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t *entry_sequence
     * }
     */
    public static void entry_sequence(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entry_sequence$LAYOUT, entry_sequence$OFFSET, fieldValue);
    }

    private static final AddressLayout entry_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("entry_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *entry_data
     * }
     */
    public static final AddressLayout entry_data$layout() {
        return entry_data$LAYOUT;
    }

    private static final long entry_data$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *entry_data
     * }
     */
    public static final long entry_data$offset() {
        return entry_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *entry_data
     * }
     */
    public static MemorySegment entry_data(MemorySegment struct) {
        return struct.get(entry_data$LAYOUT, entry_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *entry_data
     * }
     */
    public static void entry_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(entry_data$LAYOUT, entry_data$OFFSET, fieldValue);
    }

    private static final AddressLayout udata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("udata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static final AddressLayout udata$layout() {
        return udata$LAYOUT;
    }

    private static final long udata$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static final long udata$offset() {
        return udata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static MemorySegment udata(MemorySegment struct) {
        return struct.get(udata$LAYOUT, udata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *udata
     * }
     */
    public static void udata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(udata$LAYOUT, udata$OFFSET, fieldValue);
    }

    private static final AddressLayout mem_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mem_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final AddressLayout mem_ctx$layout() {
        return mem_ctx$LAYOUT;
    }

    private static final long mem_ctx$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final long mem_ctx$offset() {
        return mem_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static MemorySegment mem_ctx(MemorySegment struct) {
        return struct.get(mem_ctx$LAYOUT, mem_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static void mem_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mem_ctx$LAYOUT, mem_ctx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

