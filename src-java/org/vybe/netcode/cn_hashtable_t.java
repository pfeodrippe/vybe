// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_hashtable_t {
 *     int count;
 *     int slot_capacity;
 *     cn_hashtable_slot_t *slots;
 *     uint8_t secret_key[32];
 *     int key_size;
 *     int item_size;
 *     int item_capacity;
 *     void *items_key;
 *     int *items_slot_index;
 *     void *items_data;
 *     void *temp_key;
 *     void *temp_item;
 *     void *mem_ctx;
 * }
 * }
 */
public class cn_hashtable_t {

    cn_hashtable_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_INT.withName("count"),
        netcode.C_INT.withName("slot_capacity"),
        netcode.C_POINTER.withName("slots"),
        MemoryLayout.sequenceLayout(32, netcode.C_CHAR).withName("secret_key"),
        netcode.C_INT.withName("key_size"),
        netcode.C_INT.withName("item_size"),
        netcode.C_INT.withName("item_capacity"),
        MemoryLayout.paddingLayout(4),
        netcode.C_POINTER.withName("items_key"),
        netcode.C_POINTER.withName("items_slot_index"),
        netcode.C_POINTER.withName("items_data"),
        netcode.C_POINTER.withName("temp_key"),
        netcode.C_POINTER.withName("temp_item"),
        netcode.C_POINTER.withName("mem_ctx")
    ).withName("cn_hashtable_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static final OfInt count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static int count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static void count(MemorySegment struct, int fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final OfInt slot_capacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("slot_capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int slot_capacity
     * }
     */
    public static final OfInt slot_capacity$layout() {
        return slot_capacity$LAYOUT;
    }

    private static final long slot_capacity$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int slot_capacity
     * }
     */
    public static final long slot_capacity$offset() {
        return slot_capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int slot_capacity
     * }
     */
    public static int slot_capacity(MemorySegment struct) {
        return struct.get(slot_capacity$LAYOUT, slot_capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int slot_capacity
     * }
     */
    public static void slot_capacity(MemorySegment struct, int fieldValue) {
        struct.set(slot_capacity$LAYOUT, slot_capacity$OFFSET, fieldValue);
    }

    private static final AddressLayout slots$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("slots"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_hashtable_slot_t *slots
     * }
     */
    public static final AddressLayout slots$layout() {
        return slots$LAYOUT;
    }

    private static final long slots$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_hashtable_slot_t *slots
     * }
     */
    public static final long slots$offset() {
        return slots$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_hashtable_slot_t *slots
     * }
     */
    public static MemorySegment slots(MemorySegment struct) {
        return struct.get(slots$LAYOUT, slots$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_hashtable_slot_t *slots
     * }
     */
    public static void slots(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(slots$LAYOUT, slots$OFFSET, fieldValue);
    }

    private static final SequenceLayout secret_key$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("secret_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t secret_key[32]
     * }
     */
    public static final SequenceLayout secret_key$layout() {
        return secret_key$LAYOUT;
    }

    private static final long secret_key$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t secret_key[32]
     * }
     */
    public static final long secret_key$offset() {
        return secret_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t secret_key[32]
     * }
     */
    public static MemorySegment secret_key(MemorySegment struct) {
        return struct.asSlice(secret_key$OFFSET, secret_key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t secret_key[32]
     * }
     */
    public static void secret_key(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, secret_key$OFFSET, secret_key$LAYOUT.byteSize());
    }

    private static long[] secret_key$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t secret_key[32]
     * }
     */
    public static long[] secret_key$dimensions() {
        return secret_key$DIMS;
    }
    private static final VarHandle secret_key$ELEM_HANDLE = secret_key$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t secret_key[32]
     * }
     */
    public static byte secret_key(MemorySegment struct, long index0) {
        return (byte)secret_key$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t secret_key[32]
     * }
     */
    public static void secret_key(MemorySegment struct, long index0, byte fieldValue) {
        secret_key$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt key_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("key_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int key_size
     * }
     */
    public static final OfInt key_size$layout() {
        return key_size$LAYOUT;
    }

    private static final long key_size$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int key_size
     * }
     */
    public static final long key_size$offset() {
        return key_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int key_size
     * }
     */
    public static int key_size(MemorySegment struct) {
        return struct.get(key_size$LAYOUT, key_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int key_size
     * }
     */
    public static void key_size(MemorySegment struct, int fieldValue) {
        struct.set(key_size$LAYOUT, key_size$OFFSET, fieldValue);
    }

    private static final OfInt item_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("item_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int item_size
     * }
     */
    public static final OfInt item_size$layout() {
        return item_size$LAYOUT;
    }

    private static final long item_size$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int item_size
     * }
     */
    public static final long item_size$offset() {
        return item_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int item_size
     * }
     */
    public static int item_size(MemorySegment struct) {
        return struct.get(item_size$LAYOUT, item_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int item_size
     * }
     */
    public static void item_size(MemorySegment struct, int fieldValue) {
        struct.set(item_size$LAYOUT, item_size$OFFSET, fieldValue);
    }

    private static final OfInt item_capacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("item_capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int item_capacity
     * }
     */
    public static final OfInt item_capacity$layout() {
        return item_capacity$LAYOUT;
    }

    private static final long item_capacity$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int item_capacity
     * }
     */
    public static final long item_capacity$offset() {
        return item_capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int item_capacity
     * }
     */
    public static int item_capacity(MemorySegment struct) {
        return struct.get(item_capacity$LAYOUT, item_capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int item_capacity
     * }
     */
    public static void item_capacity(MemorySegment struct, int fieldValue) {
        struct.set(item_capacity$LAYOUT, item_capacity$OFFSET, fieldValue);
    }

    private static final AddressLayout items_key$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("items_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *items_key
     * }
     */
    public static final AddressLayout items_key$layout() {
        return items_key$LAYOUT;
    }

    private static final long items_key$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *items_key
     * }
     */
    public static final long items_key$offset() {
        return items_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *items_key
     * }
     */
    public static MemorySegment items_key(MemorySegment struct) {
        return struct.get(items_key$LAYOUT, items_key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *items_key
     * }
     */
    public static void items_key(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(items_key$LAYOUT, items_key$OFFSET, fieldValue);
    }

    private static final AddressLayout items_slot_index$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("items_slot_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int *items_slot_index
     * }
     */
    public static final AddressLayout items_slot_index$layout() {
        return items_slot_index$LAYOUT;
    }

    private static final long items_slot_index$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int *items_slot_index
     * }
     */
    public static final long items_slot_index$offset() {
        return items_slot_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int *items_slot_index
     * }
     */
    public static MemorySegment items_slot_index(MemorySegment struct) {
        return struct.get(items_slot_index$LAYOUT, items_slot_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int *items_slot_index
     * }
     */
    public static void items_slot_index(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(items_slot_index$LAYOUT, items_slot_index$OFFSET, fieldValue);
    }

    private static final AddressLayout items_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("items_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *items_data
     * }
     */
    public static final AddressLayout items_data$layout() {
        return items_data$LAYOUT;
    }

    private static final long items_data$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *items_data
     * }
     */
    public static final long items_data$offset() {
        return items_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *items_data
     * }
     */
    public static MemorySegment items_data(MemorySegment struct) {
        return struct.get(items_data$LAYOUT, items_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *items_data
     * }
     */
    public static void items_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(items_data$LAYOUT, items_data$OFFSET, fieldValue);
    }

    private static final AddressLayout temp_key$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("temp_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *temp_key
     * }
     */
    public static final AddressLayout temp_key$layout() {
        return temp_key$LAYOUT;
    }

    private static final long temp_key$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *temp_key
     * }
     */
    public static final long temp_key$offset() {
        return temp_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *temp_key
     * }
     */
    public static MemorySegment temp_key(MemorySegment struct) {
        return struct.get(temp_key$LAYOUT, temp_key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *temp_key
     * }
     */
    public static void temp_key(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(temp_key$LAYOUT, temp_key$OFFSET, fieldValue);
    }

    private static final AddressLayout temp_item$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("temp_item"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *temp_item
     * }
     */
    public static final AddressLayout temp_item$layout() {
        return temp_item$LAYOUT;
    }

    private static final long temp_item$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *temp_item
     * }
     */
    public static final long temp_item$offset() {
        return temp_item$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *temp_item
     * }
     */
    public static MemorySegment temp_item(MemorySegment struct) {
        return struct.get(temp_item$LAYOUT, temp_item$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *temp_item
     * }
     */
    public static void temp_item(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(temp_item$LAYOUT, temp_item$OFFSET, fieldValue);
    }

    private static final AddressLayout mem_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mem_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final AddressLayout mem_ctx$layout() {
        return mem_ctx$LAYOUT;
    }

    private static final long mem_ctx$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final long mem_ctx$offset() {
        return mem_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static MemorySegment mem_ctx(MemorySegment struct) {
        return struct.get(mem_ctx$LAYOUT, mem_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static void mem_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mem_ctx$LAYOUT, mem_ctx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

