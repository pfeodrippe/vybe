// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_handle_allocator_t {
 *     uint32_t freelist;
 *     int handles_capacity;
 *     int handles_count;
 *     cn_handle_entry_t *handles;
 *     void *mem_ctx;
 * }
 * }
 */
public class cn_handle_allocator_t {

    cn_handle_allocator_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_INT.withName("freelist"),
        netcode.C_INT.withName("handles_capacity"),
        netcode.C_INT.withName("handles_count"),
        MemoryLayout.paddingLayout(4),
        netcode.C_POINTER.withName("handles"),
        netcode.C_POINTER.withName("mem_ctx")
    ).withName("cn_handle_allocator_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt freelist$LAYOUT = (OfInt)$LAYOUT.select(groupElement("freelist"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t freelist
     * }
     */
    public static final OfInt freelist$layout() {
        return freelist$LAYOUT;
    }

    private static final long freelist$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t freelist
     * }
     */
    public static final long freelist$offset() {
        return freelist$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t freelist
     * }
     */
    public static int freelist(MemorySegment struct) {
        return struct.get(freelist$LAYOUT, freelist$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t freelist
     * }
     */
    public static void freelist(MemorySegment struct, int fieldValue) {
        struct.set(freelist$LAYOUT, freelist$OFFSET, fieldValue);
    }

    private static final OfInt handles_capacity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("handles_capacity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int handles_capacity
     * }
     */
    public static final OfInt handles_capacity$layout() {
        return handles_capacity$LAYOUT;
    }

    private static final long handles_capacity$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int handles_capacity
     * }
     */
    public static final long handles_capacity$offset() {
        return handles_capacity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int handles_capacity
     * }
     */
    public static int handles_capacity(MemorySegment struct) {
        return struct.get(handles_capacity$LAYOUT, handles_capacity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int handles_capacity
     * }
     */
    public static void handles_capacity(MemorySegment struct, int fieldValue) {
        struct.set(handles_capacity$LAYOUT, handles_capacity$OFFSET, fieldValue);
    }

    private static final OfInt handles_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("handles_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int handles_count
     * }
     */
    public static final OfInt handles_count$layout() {
        return handles_count$LAYOUT;
    }

    private static final long handles_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int handles_count
     * }
     */
    public static final long handles_count$offset() {
        return handles_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int handles_count
     * }
     */
    public static int handles_count(MemorySegment struct) {
        return struct.get(handles_count$LAYOUT, handles_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int handles_count
     * }
     */
    public static void handles_count(MemorySegment struct, int fieldValue) {
        struct.set(handles_count$LAYOUT, handles_count$OFFSET, fieldValue);
    }

    private static final AddressLayout handles$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("handles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_handle_entry_t *handles
     * }
     */
    public static final AddressLayout handles$layout() {
        return handles$LAYOUT;
    }

    private static final long handles$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_handle_entry_t *handles
     * }
     */
    public static final long handles$offset() {
        return handles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_handle_entry_t *handles
     * }
     */
    public static MemorySegment handles(MemorySegment struct) {
        return struct.get(handles$LAYOUT, handles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_handle_entry_t *handles
     * }
     */
    public static void handles(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(handles$LAYOUT, handles$OFFSET, fieldValue);
    }

    private static final AddressLayout mem_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mem_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final AddressLayout mem_ctx$layout() {
        return mem_ctx$LAYOUT;
    }

    private static final long mem_ctx$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final long mem_ctx$offset() {
        return mem_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static MemorySegment mem_ctx(MemorySegment struct) {
        return struct.get(mem_ctx$LAYOUT, mem_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static void mem_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mem_ctx$LAYOUT, mem_ctx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

