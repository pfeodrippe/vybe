// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_socket_send_queue_item_t {
 *     uint16_t fragment_sequence;
 *     int fragment_index;
 *     int fragment_count;
 *     int final_fragment_size;
 *     int size;
 *     uint8_t *packet;
 * }
 * }
 */
public class cn_socket_send_queue_item_t {

    cn_socket_send_queue_item_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_SHORT.withName("fragment_sequence"),
        MemoryLayout.paddingLayout(2),
        netcode.C_INT.withName("fragment_index"),
        netcode.C_INT.withName("fragment_count"),
        netcode.C_INT.withName("final_fragment_size"),
        netcode.C_INT.withName("size"),
        MemoryLayout.paddingLayout(4),
        netcode.C_POINTER.withName("packet")
    ).withName("cn_socket_send_queue_item_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort fragment_sequence$LAYOUT = (OfShort)$LAYOUT.select(groupElement("fragment_sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t fragment_sequence
     * }
     */
    public static final OfShort fragment_sequence$layout() {
        return fragment_sequence$LAYOUT;
    }

    private static final long fragment_sequence$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t fragment_sequence
     * }
     */
    public static final long fragment_sequence$offset() {
        return fragment_sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t fragment_sequence
     * }
     */
    public static short fragment_sequence(MemorySegment struct) {
        return struct.get(fragment_sequence$LAYOUT, fragment_sequence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t fragment_sequence
     * }
     */
    public static void fragment_sequence(MemorySegment struct, short fieldValue) {
        struct.set(fragment_sequence$LAYOUT, fragment_sequence$OFFSET, fieldValue);
    }

    private static final OfInt fragment_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fragment_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fragment_index
     * }
     */
    public static final OfInt fragment_index$layout() {
        return fragment_index$LAYOUT;
    }

    private static final long fragment_index$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fragment_index
     * }
     */
    public static final long fragment_index$offset() {
        return fragment_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fragment_index
     * }
     */
    public static int fragment_index(MemorySegment struct) {
        return struct.get(fragment_index$LAYOUT, fragment_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fragment_index
     * }
     */
    public static void fragment_index(MemorySegment struct, int fieldValue) {
        struct.set(fragment_index$LAYOUT, fragment_index$OFFSET, fieldValue);
    }

    private static final OfInt fragment_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fragment_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fragment_count
     * }
     */
    public static final OfInt fragment_count$layout() {
        return fragment_count$LAYOUT;
    }

    private static final long fragment_count$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fragment_count
     * }
     */
    public static final long fragment_count$offset() {
        return fragment_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fragment_count
     * }
     */
    public static int fragment_count(MemorySegment struct) {
        return struct.get(fragment_count$LAYOUT, fragment_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fragment_count
     * }
     */
    public static void fragment_count(MemorySegment struct, int fieldValue) {
        struct.set(fragment_count$LAYOUT, fragment_count$OFFSET, fieldValue);
    }

    private static final OfInt final_fragment_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("final_fragment_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int final_fragment_size
     * }
     */
    public static final OfInt final_fragment_size$layout() {
        return final_fragment_size$LAYOUT;
    }

    private static final long final_fragment_size$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int final_fragment_size
     * }
     */
    public static final long final_fragment_size$offset() {
        return final_fragment_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int final_fragment_size
     * }
     */
    public static int final_fragment_size(MemorySegment struct) {
        return struct.get(final_fragment_size$LAYOUT, final_fragment_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int final_fragment_size
     * }
     */
    public static void final_fragment_size(MemorySegment struct, int fieldValue) {
        struct.set(final_fragment_size$LAYOUT, final_fragment_size$OFFSET, fieldValue);
    }

    private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static final OfInt size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static int size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int size
     * }
     */
    public static void size(MemorySegment struct, int fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final AddressLayout packet$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("packet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *packet
     * }
     */
    public static final AddressLayout packet$layout() {
        return packet$LAYOUT;
    }

    private static final long packet$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *packet
     * }
     */
    public static final long packet$offset() {
        return packet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *packet
     * }
     */
    public static MemorySegment packet(MemorySegment struct) {
        return struct.get(packet$LAYOUT, packet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *packet
     * }
     */
    public static void packet(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(packet$LAYOUT, packet$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

