// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_server_event_t {
 *     cn_server_event_type_t type;
 *     union {
 *         struct {
 *             int client_index;
 *             uint64_t client_id;
 *             cn_endpoint_t endpoint;
 *         } new_connection;
 *         struct {
 *             int client_index;
 *         } disconnected;
 *         struct {
 *             int client_index;
 *             void *data;
 *             int size;
 *         } payload_packet;
 *     } u;
 * }
 * }
 */
public class cn_server_event_t {

    cn_server_event_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        cn_server_event_t.u.layout().withName("u")
    ).withName("cn_server_event_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_server_event_type_t type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_server_event_type_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_server_event_type_t type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_server_event_type_t type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int client_index;
     *         uint64_t client_id;
     *         cn_endpoint_t endpoint;
     *     } new_connection;
     *     struct {
     *         int client_index;
     *     } disconnected;
     *     struct {
     *         int client_index;
     *         void *data;
     *         int size;
     *     } payload_packet;
     * }
     * }
     */
    public static class u {

        u() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            cn_server_event_t.u.new_connection.layout().withName("new_connection"),
            cn_server_event_t.u.disconnected.layout().withName("disconnected"),
            cn_server_event_t.u.payload_packet.layout().withName("payload_packet")
        ).withName("$anon$480:2");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     uint64_t client_id;
         *     cn_endpoint_t endpoint;
         * }
         * }
         */
        public static class new_connection {

            new_connection() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                netcode.C_INT.withName("client_index"),
                MemoryLayout.paddingLayout(4),
                netcode.C_LONG_LONG.withName("client_id"),
                cn_endpoint_t.layout().withName("endpoint")
            ).withName("$anon$482:3");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfInt client_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("client_index"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static final OfInt client_index$layout() {
                return client_index$LAYOUT;
            }

            private static final long client_index$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static final long client_index$offset() {
                return client_index$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static int client_index(MemorySegment struct) {
                return struct.get(client_index$LAYOUT, client_index$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static void client_index(MemorySegment struct, int fieldValue) {
                struct.set(client_index$LAYOUT, client_index$OFFSET, fieldValue);
            }

            private static final OfLong client_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("client_id"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * uint64_t client_id
             * }
             */
            public static final OfLong client_id$layout() {
                return client_id$LAYOUT;
            }

            private static final long client_id$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * uint64_t client_id
             * }
             */
            public static final long client_id$offset() {
                return client_id$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * uint64_t client_id
             * }
             */
            public static long client_id(MemorySegment struct) {
                return struct.get(client_id$LAYOUT, client_id$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * uint64_t client_id
             * }
             */
            public static void client_id(MemorySegment struct, long fieldValue) {
                struct.set(client_id$LAYOUT, client_id$OFFSET, fieldValue);
            }

            private static final GroupLayout endpoint$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("endpoint"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * cn_endpoint_t endpoint
             * }
             */
            public static final GroupLayout endpoint$layout() {
                return endpoint$LAYOUT;
            }

            private static final long endpoint$OFFSET = 16;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * cn_endpoint_t endpoint
             * }
             */
            public static final long endpoint$offset() {
                return endpoint$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * cn_endpoint_t endpoint
             * }
             */
            public static MemorySegment endpoint(MemorySegment struct) {
                return struct.asSlice(endpoint$OFFSET, endpoint$LAYOUT.byteSize());
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * cn_endpoint_t endpoint
             * }
             */
            public static void endpoint(MemorySegment struct, MemorySegment fieldValue) {
                MemorySegment.copy(fieldValue, 0L, struct, endpoint$OFFSET, endpoint$LAYOUT.byteSize());
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout new_connection$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("new_connection"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     uint64_t client_id;
         *     cn_endpoint_t endpoint;
         * } new_connection
         * }
         */
        public static final GroupLayout new_connection$layout() {
            return new_connection$LAYOUT;
        }

        private static final long new_connection$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     uint64_t client_id;
         *     cn_endpoint_t endpoint;
         * } new_connection
         * }
         */
        public static final long new_connection$offset() {
            return new_connection$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     uint64_t client_id;
         *     cn_endpoint_t endpoint;
         * } new_connection
         * }
         */
        public static MemorySegment new_connection(MemorySegment union) {
            return union.asSlice(new_connection$OFFSET, new_connection$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     uint64_t client_id;
         *     cn_endpoint_t endpoint;
         * } new_connection
         * }
         */
        public static void new_connection(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, new_connection$OFFSET, new_connection$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         * }
         * }
         */
        public static class disconnected {

            disconnected() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                netcode.C_INT.withName("client_index")
            ).withName("$anon$489:3");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfInt client_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("client_index"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static final OfInt client_index$layout() {
                return client_index$LAYOUT;
            }

            private static final long client_index$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static final long client_index$offset() {
                return client_index$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static int client_index(MemorySegment struct) {
                return struct.get(client_index$LAYOUT, client_index$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static void client_index(MemorySegment struct, int fieldValue) {
                struct.set(client_index$LAYOUT, client_index$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout disconnected$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("disconnected"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         * } disconnected
         * }
         */
        public static final GroupLayout disconnected$layout() {
            return disconnected$LAYOUT;
        }

        private static final long disconnected$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         * } disconnected
         * }
         */
        public static final long disconnected$offset() {
            return disconnected$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         * } disconnected
         * }
         */
        public static MemorySegment disconnected(MemorySegment union) {
            return union.asSlice(disconnected$OFFSET, disconnected$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         * } disconnected
         * }
         */
        public static void disconnected(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, disconnected$OFFSET, disconnected$LAYOUT.byteSize());
        }

        /**
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     void *data;
         *     int size;
         * }
         * }
         */
        public static class payload_packet {

            payload_packet() {
                // Should not be called directly
            }

            private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
                netcode.C_INT.withName("client_index"),
                MemoryLayout.paddingLayout(4),
                netcode.C_POINTER.withName("data"),
                netcode.C_INT.withName("size"),
                MemoryLayout.paddingLayout(4)
            ).withName("$anon$494:3");

            /**
             * The layout of this struct
             */
            public static final GroupLayout layout() {
                return $LAYOUT;
            }

            private static final OfInt client_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("client_index"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static final OfInt client_index$layout() {
                return client_index$LAYOUT;
            }

            private static final long client_index$OFFSET = 0;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static final long client_index$offset() {
                return client_index$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static int client_index(MemorySegment struct) {
                return struct.get(client_index$LAYOUT, client_index$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int client_index
             * }
             */
            public static void client_index(MemorySegment struct, int fieldValue) {
                struct.set(client_index$LAYOUT, client_index$OFFSET, fieldValue);
            }

            private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * void *data
             * }
             */
            public static final AddressLayout data$layout() {
                return data$LAYOUT;
            }

            private static final long data$OFFSET = 8;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * void *data
             * }
             */
            public static final long data$offset() {
                return data$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * void *data
             * }
             */
            public static MemorySegment data(MemorySegment struct) {
                return struct.get(data$LAYOUT, data$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * void *data
             * }
             */
            public static void data(MemorySegment struct, MemorySegment fieldValue) {
                struct.set(data$LAYOUT, data$OFFSET, fieldValue);
            }

            private static final OfInt size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("size"));

            /**
             * Layout for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static final OfInt size$layout() {
                return size$LAYOUT;
            }

            private static final long size$OFFSET = 16;

            /**
             * Offset for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static final long size$offset() {
                return size$OFFSET;
            }

            /**
             * Getter for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static int size(MemorySegment struct) {
                return struct.get(size$LAYOUT, size$OFFSET);
            }

            /**
             * Setter for field:
             * {@snippet lang=c :
             * int size
             * }
             */
            public static void size(MemorySegment struct, int fieldValue) {
                struct.set(size$LAYOUT, size$OFFSET, fieldValue);
            }

            /**
             * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
             * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
             */
            public static MemorySegment asSlice(MemorySegment array, long index) {
                return array.asSlice(layout().byteSize() * index);
            }

            /**
             * The size (in bytes) of this struct
             */
            public static long sizeof() { return layout().byteSize(); }

            /**
             * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
             */
            public static MemorySegment allocate(SegmentAllocator allocator) {
                return allocator.allocate(layout());
            }

            /**
             * Allocate an array of size {@code elementCount} using {@code allocator}.
             * The returned segment has size {@code elementCount * layout().byteSize()}.
             */
            public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
                return reinterpret(addr, 1, arena, cleanup);
            }

            /**
             * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
             * The returned segment has size {@code elementCount * layout().byteSize()}
             */
            public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
                return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
            }
        }

        private static final GroupLayout payload_packet$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("payload_packet"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     void *data;
         *     int size;
         * } payload_packet
         * }
         */
        public static final GroupLayout payload_packet$layout() {
            return payload_packet$LAYOUT;
        }

        private static final long payload_packet$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     void *data;
         *     int size;
         * } payload_packet
         * }
         */
        public static final long payload_packet$offset() {
            return payload_packet$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     void *data;
         *     int size;
         * } payload_packet
         * }
         */
        public static MemorySegment payload_packet(MemorySegment union) {
            return union.asSlice(payload_packet$OFFSET, payload_packet$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct {
         *     int client_index;
         *     void *data;
         *     int size;
         * } payload_packet
         * }
         */
        public static void payload_packet(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, payload_packet$OFFSET, payload_packet$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int client_index;
     *         uint64_t client_id;
     *         cn_endpoint_t endpoint;
     *     } new_connection;
     *     struct {
     *         int client_index;
     *     } disconnected;
     *     struct {
     *         int client_index;
     *         void *data;
     *         int size;
     *     } payload_packet;
     * } u
     * }
     */
    public static final GroupLayout u$layout() {
        return u$LAYOUT;
    }

    private static final long u$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int client_index;
     *         uint64_t client_id;
     *         cn_endpoint_t endpoint;
     *     } new_connection;
     *     struct {
     *         int client_index;
     *     } disconnected;
     *     struct {
     *         int client_index;
     *         void *data;
     *         int size;
     *     } payload_packet;
     * } u
     * }
     */
    public static final long u$offset() {
        return u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int client_index;
     *         uint64_t client_id;
     *         cn_endpoint_t endpoint;
     *     } new_connection;
     *     struct {
     *         int client_index;
     *     } disconnected;
     *     struct {
     *         int client_index;
     *         void *data;
     *         int size;
     *     } payload_packet;
     * } u
     * }
     */
    public static MemorySegment u(MemorySegment struct) {
        return struct.asSlice(u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct {
     *         int client_index;
     *         uint64_t client_id;
     *         cn_endpoint_t endpoint;
     *     } new_connection;
     *     struct {
     *         int client_index;
     *     } disconnected;
     *     struct {
     *         int client_index;
     *         void *data;
     *         int size;
     *     } payload_packet;
     * } u
     * }
     */
    public static void u(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, u$OFFSET, u$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

