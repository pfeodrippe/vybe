// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_fragment_reassembly_entry_t {
 *     int received_final_fragment;
 *     int packet_size;
 *     uint8_t *packet;
 *     int fragment_count_so_far;
 *     int fragments_total;
 *     uint8_t *fragment_received;
 * }
 * }
 */
public class cn_fragment_reassembly_entry_t {

    cn_fragment_reassembly_entry_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_INT.withName("received_final_fragment"),
        netcode.C_INT.withName("packet_size"),
        netcode.C_POINTER.withName("packet"),
        netcode.C_INT.withName("fragment_count_so_far"),
        netcode.C_INT.withName("fragments_total"),
        netcode.C_POINTER.withName("fragment_received")
    ).withName("cn_fragment_reassembly_entry_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt received_final_fragment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("received_final_fragment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int received_final_fragment
     * }
     */
    public static final OfInt received_final_fragment$layout() {
        return received_final_fragment$LAYOUT;
    }

    private static final long received_final_fragment$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int received_final_fragment
     * }
     */
    public static final long received_final_fragment$offset() {
        return received_final_fragment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int received_final_fragment
     * }
     */
    public static int received_final_fragment(MemorySegment struct) {
        return struct.get(received_final_fragment$LAYOUT, received_final_fragment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int received_final_fragment
     * }
     */
    public static void received_final_fragment(MemorySegment struct, int fieldValue) {
        struct.set(received_final_fragment$LAYOUT, received_final_fragment$OFFSET, fieldValue);
    }

    private static final OfInt packet_size$LAYOUT = (OfInt)$LAYOUT.select(groupElement("packet_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int packet_size
     * }
     */
    public static final OfInt packet_size$layout() {
        return packet_size$LAYOUT;
    }

    private static final long packet_size$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int packet_size
     * }
     */
    public static final long packet_size$offset() {
        return packet_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int packet_size
     * }
     */
    public static int packet_size(MemorySegment struct) {
        return struct.get(packet_size$LAYOUT, packet_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int packet_size
     * }
     */
    public static void packet_size(MemorySegment struct, int fieldValue) {
        struct.set(packet_size$LAYOUT, packet_size$OFFSET, fieldValue);
    }

    private static final AddressLayout packet$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("packet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *packet
     * }
     */
    public static final AddressLayout packet$layout() {
        return packet$LAYOUT;
    }

    private static final long packet$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *packet
     * }
     */
    public static final long packet$offset() {
        return packet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *packet
     * }
     */
    public static MemorySegment packet(MemorySegment struct) {
        return struct.get(packet$LAYOUT, packet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *packet
     * }
     */
    public static void packet(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(packet$LAYOUT, packet$OFFSET, fieldValue);
    }

    private static final OfInt fragment_count_so_far$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fragment_count_so_far"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fragment_count_so_far
     * }
     */
    public static final OfInt fragment_count_so_far$layout() {
        return fragment_count_so_far$LAYOUT;
    }

    private static final long fragment_count_so_far$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fragment_count_so_far
     * }
     */
    public static final long fragment_count_so_far$offset() {
        return fragment_count_so_far$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fragment_count_so_far
     * }
     */
    public static int fragment_count_so_far(MemorySegment struct) {
        return struct.get(fragment_count_so_far$LAYOUT, fragment_count_so_far$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fragment_count_so_far
     * }
     */
    public static void fragment_count_so_far(MemorySegment struct, int fieldValue) {
        struct.set(fragment_count_so_far$LAYOUT, fragment_count_so_far$OFFSET, fieldValue);
    }

    private static final OfInt fragments_total$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fragments_total"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fragments_total
     * }
     */
    public static final OfInt fragments_total$layout() {
        return fragments_total$LAYOUT;
    }

    private static final long fragments_total$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fragments_total
     * }
     */
    public static final long fragments_total$offset() {
        return fragments_total$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fragments_total
     * }
     */
    public static int fragments_total(MemorySegment struct) {
        return struct.get(fragments_total$LAYOUT, fragments_total$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fragments_total
     * }
     */
    public static void fragments_total(MemorySegment struct, int fieldValue) {
        struct.set(fragments_total$LAYOUT, fragments_total$OFFSET, fieldValue);
    }

    private static final AddressLayout fragment_received$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fragment_received"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *fragment_received
     * }
     */
    public static final AddressLayout fragment_received$layout() {
        return fragment_received$LAYOUT;
    }

    private static final long fragment_received$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *fragment_received
     * }
     */
    public static final long fragment_received$offset() {
        return fragment_received$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *fragment_received
     * }
     */
    public static MemorySegment fragment_received(MemorySegment struct) {
        return struct.get(fragment_received$LAYOUT, fragment_received$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *fragment_received
     * }
     */
    public static void fragment_received(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fragment_received$LAYOUT, fragment_received$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

