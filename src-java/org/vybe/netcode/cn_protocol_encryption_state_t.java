// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_protocol_encryption_state_t {
 *     uint64_t sequence;
 *     uint64_t expiration_timestamp;
 *     uint32_t handshake_timeout;
 *     double last_packet_recieved_time;
 *     double last_packet_sent_time;
 *     cn_crypto_key_t client_to_server_key;
 *     cn_crypto_key_t server_to_client_key;
 *     uint64_t client_id;
 *     cn_crypto_signature_t signature;
 * }
 * }
 */
public class cn_protocol_encryption_state_t {

    cn_protocol_encryption_state_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_LONG_LONG.withName("sequence"),
        netcode.C_LONG_LONG.withName("expiration_timestamp"),
        netcode.C_INT.withName("handshake_timeout"),
        MemoryLayout.paddingLayout(4),
        netcode.C_DOUBLE.withName("last_packet_recieved_time"),
        netcode.C_DOUBLE.withName("last_packet_sent_time"),
        cn_crypto_key_t.layout().withName("client_to_server_key"),
        cn_crypto_key_t.layout().withName("server_to_client_key"),
        netcode.C_LONG_LONG.withName("client_id"),
        cn_crypto_signature_t.layout().withName("signature")
    ).withName("cn_protocol_encryption_state_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong sequence$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t sequence
     * }
     */
    public static final OfLong sequence$layout() {
        return sequence$LAYOUT;
    }

    private static final long sequence$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t sequence
     * }
     */
    public static final long sequence$offset() {
        return sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t sequence
     * }
     */
    public static long sequence(MemorySegment struct) {
        return struct.get(sequence$LAYOUT, sequence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t sequence
     * }
     */
    public static void sequence(MemorySegment struct, long fieldValue) {
        struct.set(sequence$LAYOUT, sequence$OFFSET, fieldValue);
    }

    private static final OfLong expiration_timestamp$LAYOUT = (OfLong)$LAYOUT.select(groupElement("expiration_timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t expiration_timestamp
     * }
     */
    public static final OfLong expiration_timestamp$layout() {
        return expiration_timestamp$LAYOUT;
    }

    private static final long expiration_timestamp$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t expiration_timestamp
     * }
     */
    public static final long expiration_timestamp$offset() {
        return expiration_timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t expiration_timestamp
     * }
     */
    public static long expiration_timestamp(MemorySegment struct) {
        return struct.get(expiration_timestamp$LAYOUT, expiration_timestamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t expiration_timestamp
     * }
     */
    public static void expiration_timestamp(MemorySegment struct, long fieldValue) {
        struct.set(expiration_timestamp$LAYOUT, expiration_timestamp$OFFSET, fieldValue);
    }

    private static final OfInt handshake_timeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("handshake_timeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t handshake_timeout
     * }
     */
    public static final OfInt handshake_timeout$layout() {
        return handshake_timeout$LAYOUT;
    }

    private static final long handshake_timeout$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t handshake_timeout
     * }
     */
    public static final long handshake_timeout$offset() {
        return handshake_timeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t handshake_timeout
     * }
     */
    public static int handshake_timeout(MemorySegment struct) {
        return struct.get(handshake_timeout$LAYOUT, handshake_timeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t handshake_timeout
     * }
     */
    public static void handshake_timeout(MemorySegment struct, int fieldValue) {
        struct.set(handshake_timeout$LAYOUT, handshake_timeout$OFFSET, fieldValue);
    }

    private static final OfDouble last_packet_recieved_time$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("last_packet_recieved_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double last_packet_recieved_time
     * }
     */
    public static final OfDouble last_packet_recieved_time$layout() {
        return last_packet_recieved_time$LAYOUT;
    }

    private static final long last_packet_recieved_time$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double last_packet_recieved_time
     * }
     */
    public static final long last_packet_recieved_time$offset() {
        return last_packet_recieved_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double last_packet_recieved_time
     * }
     */
    public static double last_packet_recieved_time(MemorySegment struct) {
        return struct.get(last_packet_recieved_time$LAYOUT, last_packet_recieved_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double last_packet_recieved_time
     * }
     */
    public static void last_packet_recieved_time(MemorySegment struct, double fieldValue) {
        struct.set(last_packet_recieved_time$LAYOUT, last_packet_recieved_time$OFFSET, fieldValue);
    }

    private static final OfDouble last_packet_sent_time$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("last_packet_sent_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double last_packet_sent_time
     * }
     */
    public static final OfDouble last_packet_sent_time$layout() {
        return last_packet_sent_time$LAYOUT;
    }

    private static final long last_packet_sent_time$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double last_packet_sent_time
     * }
     */
    public static final long last_packet_sent_time$offset() {
        return last_packet_sent_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double last_packet_sent_time
     * }
     */
    public static double last_packet_sent_time(MemorySegment struct) {
        return struct.get(last_packet_sent_time$LAYOUT, last_packet_sent_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double last_packet_sent_time
     * }
     */
    public static void last_packet_sent_time(MemorySegment struct, double fieldValue) {
        struct.set(last_packet_sent_time$LAYOUT, last_packet_sent_time$OFFSET, fieldValue);
    }

    private static final GroupLayout client_to_server_key$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("client_to_server_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_crypto_key_t client_to_server_key
     * }
     */
    public static final GroupLayout client_to_server_key$layout() {
        return client_to_server_key$LAYOUT;
    }

    private static final long client_to_server_key$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_crypto_key_t client_to_server_key
     * }
     */
    public static final long client_to_server_key$offset() {
        return client_to_server_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_crypto_key_t client_to_server_key
     * }
     */
    public static MemorySegment client_to_server_key(MemorySegment struct) {
        return struct.asSlice(client_to_server_key$OFFSET, client_to_server_key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_crypto_key_t client_to_server_key
     * }
     */
    public static void client_to_server_key(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, client_to_server_key$OFFSET, client_to_server_key$LAYOUT.byteSize());
    }

    private static final GroupLayout server_to_client_key$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("server_to_client_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_crypto_key_t server_to_client_key
     * }
     */
    public static final GroupLayout server_to_client_key$layout() {
        return server_to_client_key$LAYOUT;
    }

    private static final long server_to_client_key$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_crypto_key_t server_to_client_key
     * }
     */
    public static final long server_to_client_key$offset() {
        return server_to_client_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_crypto_key_t server_to_client_key
     * }
     */
    public static MemorySegment server_to_client_key(MemorySegment struct) {
        return struct.asSlice(server_to_client_key$OFFSET, server_to_client_key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_crypto_key_t server_to_client_key
     * }
     */
    public static void server_to_client_key(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, server_to_client_key$OFFSET, server_to_client_key$LAYOUT.byteSize());
    }

    private static final OfLong client_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("client_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t client_id
     * }
     */
    public static final OfLong client_id$layout() {
        return client_id$LAYOUT;
    }

    private static final long client_id$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t client_id
     * }
     */
    public static final long client_id$offset() {
        return client_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t client_id
     * }
     */
    public static long client_id(MemorySegment struct) {
        return struct.get(client_id$LAYOUT, client_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t client_id
     * }
     */
    public static void client_id(MemorySegment struct, long fieldValue) {
        struct.set(client_id$LAYOUT, client_id$OFFSET, fieldValue);
    }

    private static final GroupLayout signature$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("signature"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_crypto_signature_t signature
     * }
     */
    public static final GroupLayout signature$layout() {
        return signature$LAYOUT;
    }

    private static final long signature$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_crypto_signature_t signature
     * }
     */
    public static final long signature$offset() {
        return signature$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_crypto_signature_t signature
     * }
     */
    public static MemorySegment signature(MemorySegment struct) {
        return struct.asSlice(signature$OFFSET, signature$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_crypto_signature_t signature
     * }
     */
    public static void signature(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, signature$OFFSET, signature$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

