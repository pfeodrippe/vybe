// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_server_config_t {
 *     uint64_t application_id;
 *     int max_incoming_bytes_per_second;
 *     int max_outgoing_bytes_per_second;
 *     int connection_timeout;
 *     double resend_rate;
 *     cn_crypto_sign_public_t public_key;
 *     cn_crypto_sign_secret_t secret_key;
 *     void *user_allocator_context;
 * }
 * }
 */
public class cn_server_config_t {

    cn_server_config_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_LONG_LONG.withName("application_id"),
        netcode.C_INT.withName("max_incoming_bytes_per_second"),
        netcode.C_INT.withName("max_outgoing_bytes_per_second"),
        netcode.C_INT.withName("connection_timeout"),
        MemoryLayout.paddingLayout(4),
        netcode.C_DOUBLE.withName("resend_rate"),
        cn_crypto_sign_public_t.layout().withName("public_key"),
        cn_crypto_sign_secret_t.layout().withName("secret_key"),
        netcode.C_POINTER.withName("user_allocator_context")
    ).withName("cn_server_config_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong application_id$LAYOUT = (OfLong)$LAYOUT.select(groupElement("application_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t application_id
     * }
     */
    public static final OfLong application_id$layout() {
        return application_id$LAYOUT;
    }

    private static final long application_id$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t application_id
     * }
     */
    public static final long application_id$offset() {
        return application_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t application_id
     * }
     */
    public static long application_id(MemorySegment struct) {
        return struct.get(application_id$LAYOUT, application_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t application_id
     * }
     */
    public static void application_id(MemorySegment struct, long fieldValue) {
        struct.set(application_id$LAYOUT, application_id$OFFSET, fieldValue);
    }

    private static final OfInt max_incoming_bytes_per_second$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_incoming_bytes_per_second"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max_incoming_bytes_per_second
     * }
     */
    public static final OfInt max_incoming_bytes_per_second$layout() {
        return max_incoming_bytes_per_second$LAYOUT;
    }

    private static final long max_incoming_bytes_per_second$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max_incoming_bytes_per_second
     * }
     */
    public static final long max_incoming_bytes_per_second$offset() {
        return max_incoming_bytes_per_second$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max_incoming_bytes_per_second
     * }
     */
    public static int max_incoming_bytes_per_second(MemorySegment struct) {
        return struct.get(max_incoming_bytes_per_second$LAYOUT, max_incoming_bytes_per_second$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max_incoming_bytes_per_second
     * }
     */
    public static void max_incoming_bytes_per_second(MemorySegment struct, int fieldValue) {
        struct.set(max_incoming_bytes_per_second$LAYOUT, max_incoming_bytes_per_second$OFFSET, fieldValue);
    }

    private static final OfInt max_outgoing_bytes_per_second$LAYOUT = (OfInt)$LAYOUT.select(groupElement("max_outgoing_bytes_per_second"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int max_outgoing_bytes_per_second
     * }
     */
    public static final OfInt max_outgoing_bytes_per_second$layout() {
        return max_outgoing_bytes_per_second$LAYOUT;
    }

    private static final long max_outgoing_bytes_per_second$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int max_outgoing_bytes_per_second
     * }
     */
    public static final long max_outgoing_bytes_per_second$offset() {
        return max_outgoing_bytes_per_second$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int max_outgoing_bytes_per_second
     * }
     */
    public static int max_outgoing_bytes_per_second(MemorySegment struct) {
        return struct.get(max_outgoing_bytes_per_second$LAYOUT, max_outgoing_bytes_per_second$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int max_outgoing_bytes_per_second
     * }
     */
    public static void max_outgoing_bytes_per_second(MemorySegment struct, int fieldValue) {
        struct.set(max_outgoing_bytes_per_second$LAYOUT, max_outgoing_bytes_per_second$OFFSET, fieldValue);
    }

    private static final OfInt connection_timeout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("connection_timeout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int connection_timeout
     * }
     */
    public static final OfInt connection_timeout$layout() {
        return connection_timeout$LAYOUT;
    }

    private static final long connection_timeout$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int connection_timeout
     * }
     */
    public static final long connection_timeout$offset() {
        return connection_timeout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int connection_timeout
     * }
     */
    public static int connection_timeout(MemorySegment struct) {
        return struct.get(connection_timeout$LAYOUT, connection_timeout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int connection_timeout
     * }
     */
    public static void connection_timeout(MemorySegment struct, int fieldValue) {
        struct.set(connection_timeout$LAYOUT, connection_timeout$OFFSET, fieldValue);
    }

    private static final OfDouble resend_rate$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("resend_rate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double resend_rate
     * }
     */
    public static final OfDouble resend_rate$layout() {
        return resend_rate$LAYOUT;
    }

    private static final long resend_rate$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double resend_rate
     * }
     */
    public static final long resend_rate$offset() {
        return resend_rate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double resend_rate
     * }
     */
    public static double resend_rate(MemorySegment struct) {
        return struct.get(resend_rate$LAYOUT, resend_rate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double resend_rate
     * }
     */
    public static void resend_rate(MemorySegment struct, double fieldValue) {
        struct.set(resend_rate$LAYOUT, resend_rate$OFFSET, fieldValue);
    }

    private static final GroupLayout public_key$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("public_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_crypto_sign_public_t public_key
     * }
     */
    public static final GroupLayout public_key$layout() {
        return public_key$LAYOUT;
    }

    private static final long public_key$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_crypto_sign_public_t public_key
     * }
     */
    public static final long public_key$offset() {
        return public_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_crypto_sign_public_t public_key
     * }
     */
    public static MemorySegment public_key(MemorySegment struct) {
        return struct.asSlice(public_key$OFFSET, public_key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_crypto_sign_public_t public_key
     * }
     */
    public static void public_key(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, public_key$OFFSET, public_key$LAYOUT.byteSize());
    }

    private static final GroupLayout secret_key$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("secret_key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_crypto_sign_secret_t secret_key
     * }
     */
    public static final GroupLayout secret_key$layout() {
        return secret_key$LAYOUT;
    }

    private static final long secret_key$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_crypto_sign_secret_t secret_key
     * }
     */
    public static final long secret_key$offset() {
        return secret_key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_crypto_sign_secret_t secret_key
     * }
     */
    public static MemorySegment secret_key(MemorySegment struct) {
        return struct.asSlice(secret_key$OFFSET, secret_key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_crypto_sign_secret_t secret_key
     * }
     */
    public static void secret_key(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, secret_key$OFFSET, secret_key$LAYOUT.byteSize());
    }

    private static final AddressLayout user_allocator_context$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("user_allocator_context"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static final AddressLayout user_allocator_context$layout() {
        return user_allocator_context$LAYOUT;
    }

    private static final long user_allocator_context$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static final long user_allocator_context$offset() {
        return user_allocator_context$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static MemorySegment user_allocator_context(MemorySegment struct) {
        return struct.get(user_allocator_context$LAYOUT, user_allocator_context$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *user_allocator_context
     * }
     */
    public static void user_allocator_context(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(user_allocator_context$LAYOUT, user_allocator_context$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

