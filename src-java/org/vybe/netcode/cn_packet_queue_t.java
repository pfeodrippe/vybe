// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_packet_queue_t {
 *     int count;
 *     int index0;
 *     int index1;
 *     int sizes[1024];
 *     void *packets[1024];
 * }
 * }
 */
public class cn_packet_queue_t {

    cn_packet_queue_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_INT.withName("count"),
        netcode.C_INT.withName("index0"),
        netcode.C_INT.withName("index1"),
        MemoryLayout.sequenceLayout(1024, netcode.C_INT).withName("sizes"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.sequenceLayout(1024, netcode.C_POINTER).withName("packets")
    ).withName("cn_packet_queue_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static final OfInt count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static int count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int count
     * }
     */
    public static void count(MemorySegment struct, int fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final OfInt index0$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int index0
     * }
     */
    public static final OfInt index0$layout() {
        return index0$LAYOUT;
    }

    private static final long index0$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int index0
     * }
     */
    public static final long index0$offset() {
        return index0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int index0
     * }
     */
    public static int index0(MemorySegment struct) {
        return struct.get(index0$LAYOUT, index0$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int index0
     * }
     */
    public static void index0(MemorySegment struct, int fieldValue) {
        struct.set(index0$LAYOUT, index0$OFFSET, fieldValue);
    }

    private static final OfInt index1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("index1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int index1
     * }
     */
    public static final OfInt index1$layout() {
        return index1$LAYOUT;
    }

    private static final long index1$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int index1
     * }
     */
    public static final long index1$offset() {
        return index1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int index1
     * }
     */
    public static int index1(MemorySegment struct) {
        return struct.get(index1$LAYOUT, index1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int index1
     * }
     */
    public static void index1(MemorySegment struct, int fieldValue) {
        struct.set(index1$LAYOUT, index1$OFFSET, fieldValue);
    }

    private static final SequenceLayout sizes$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("sizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int sizes[1024]
     * }
     */
    public static final SequenceLayout sizes$layout() {
        return sizes$LAYOUT;
    }

    private static final long sizes$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int sizes[1024]
     * }
     */
    public static final long sizes$offset() {
        return sizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int sizes[1024]
     * }
     */
    public static MemorySegment sizes(MemorySegment struct) {
        return struct.asSlice(sizes$OFFSET, sizes$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int sizes[1024]
     * }
     */
    public static void sizes(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sizes$OFFSET, sizes$LAYOUT.byteSize());
    }

    private static long[] sizes$DIMS = { 1024 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int sizes[1024]
     * }
     */
    public static long[] sizes$dimensions() {
        return sizes$DIMS;
    }
    private static final VarHandle sizes$ELEM_HANDLE = sizes$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int sizes[1024]
     * }
     */
    public static int sizes(MemorySegment struct, long index0) {
        return (int)sizes$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int sizes[1024]
     * }
     */
    public static void sizes(MemorySegment struct, long index0, int fieldValue) {
        sizes$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout packets$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("packets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *packets[1024]
     * }
     */
    public static final SequenceLayout packets$layout() {
        return packets$LAYOUT;
    }

    private static final long packets$OFFSET = 4112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *packets[1024]
     * }
     */
    public static final long packets$offset() {
        return packets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *packets[1024]
     * }
     */
    public static MemorySegment packets(MemorySegment struct) {
        return struct.asSlice(packets$OFFSET, packets$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *packets[1024]
     * }
     */
    public static void packets(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, packets$OFFSET, packets$LAYOUT.byteSize());
    }

    private static long[] packets$DIMS = { 1024 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * void *packets[1024]
     * }
     */
    public static long[] packets$dimensions() {
        return packets$DIMS;
    }
    private static final VarHandle packets$ELEM_HANDLE = packets$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * void *packets[1024]
     * }
     */
    public static MemorySegment packets(MemorySegment struct, long index0) {
        return (MemorySegment)packets$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * void *packets[1024]
     * }
     */
    public static void packets(MemorySegment struct, long index0, MemorySegment fieldValue) {
        packets$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

