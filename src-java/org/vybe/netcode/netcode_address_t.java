// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct netcode_address_t {
 *     union {
 *         uint8_t ipv4[4];
 *         uint16_t ipv6[8];
 *     } data;
 *     uint16_t port;
 *     uint8_t type;
 * }
 * }
 */
public class netcode_address_t {

    netcode_address_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode_address_t.data.layout().withName("data"),
        netcode.C_SHORT.withName("port"),
        netcode.C_CHAR.withName("type"),
        MemoryLayout.paddingLayout(1)
    ).withName("netcode_address_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * union {
     *     uint8_t ipv4[4];
     *     uint16_t ipv6[8];
     * }
     * }
     */
    public static class data {

        data() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(4, netcode.C_CHAR).withName("ipv4"),
            MemoryLayout.sequenceLayout(8, netcode.C_SHORT).withName("ipv6")
        ).withName("$anon$117:5");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final SequenceLayout ipv4$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ipv4"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint8_t ipv4[4]
         * }
         */
        public static final SequenceLayout ipv4$layout() {
            return ipv4$LAYOUT;
        }

        private static final long ipv4$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint8_t ipv4[4]
         * }
         */
        public static final long ipv4$offset() {
            return ipv4$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint8_t ipv4[4]
         * }
         */
        public static MemorySegment ipv4(MemorySegment union) {
            return union.asSlice(ipv4$OFFSET, ipv4$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint8_t ipv4[4]
         * }
         */
        public static void ipv4(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ipv4$OFFSET, ipv4$LAYOUT.byteSize());
        }

        private static long[] ipv4$DIMS = { 4 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * uint8_t ipv4[4]
         * }
         */
        public static long[] ipv4$dimensions() {
            return ipv4$DIMS;
        }
        private static final VarHandle ipv4$ELEM_HANDLE = ipv4$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * uint8_t ipv4[4]
         * }
         */
        public static byte ipv4(MemorySegment union, long index0) {
            return (byte)ipv4$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * uint8_t ipv4[4]
         * }
         */
        public static void ipv4(MemorySegment union, long index0, byte fieldValue) {
            ipv4$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        private static final SequenceLayout ipv6$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ipv6"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * uint16_t ipv6[8]
         * }
         */
        public static final SequenceLayout ipv6$layout() {
            return ipv6$LAYOUT;
        }

        private static final long ipv6$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * uint16_t ipv6[8]
         * }
         */
        public static final long ipv6$offset() {
            return ipv6$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * uint16_t ipv6[8]
         * }
         */
        public static MemorySegment ipv6(MemorySegment union) {
            return union.asSlice(ipv6$OFFSET, ipv6$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * uint16_t ipv6[8]
         * }
         */
        public static void ipv6(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ipv6$OFFSET, ipv6$LAYOUT.byteSize());
        }

        private static long[] ipv6$DIMS = { 8 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * uint16_t ipv6[8]
         * }
         */
        public static long[] ipv6$dimensions() {
            return ipv6$DIMS;
        }
        private static final VarHandle ipv6$ELEM_HANDLE = ipv6$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * uint16_t ipv6[8]
         * }
         */
        public static short ipv6(MemorySegment union, long index0) {
            return (short)ipv6$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * uint16_t ipv6[8]
         * }
         */
        public static void ipv6(MemorySegment union, long index0, short fieldValue) {
            ipv6$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout data$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     uint8_t ipv4[4];
     *     uint16_t ipv6[8];
     * } data
     * }
     */
    public static final GroupLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     uint8_t ipv4[4];
     *     uint16_t ipv6[8];
     * } data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     uint8_t ipv4[4];
     *     uint16_t ipv6[8];
     * } data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.asSlice(data$OFFSET, data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     uint8_t ipv4[4];
     *     uint16_t ipv6[8];
     * } data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$LAYOUT.byteSize());
    }

    private static final OfShort port$LAYOUT = (OfShort)$LAYOUT.select(groupElement("port"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t port
     * }
     */
    public static final OfShort port$layout() {
        return port$LAYOUT;
    }

    private static final long port$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t port
     * }
     */
    public static final long port$offset() {
        return port$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t port
     * }
     */
    public static short port(MemorySegment struct) {
        return struct.get(port$LAYOUT, port$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t port
     * }
     */
    public static void port(MemorySegment struct, short fieldValue) {
        struct.set(port$LAYOUT, port$OFFSET, fieldValue);
    }

    private static final OfByte type$LAYOUT = (OfByte)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static final OfByte type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static byte type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t type
     * }
     */
    public static void type(MemorySegment struct, byte fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

