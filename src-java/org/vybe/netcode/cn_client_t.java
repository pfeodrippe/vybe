// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_client_t {
 *     cn_protocol_client_t *p_client;
 *     cn_transport_t *transport;
 *     void *mem_ctx;
 * }
 * }
 */
public class cn_client_t {

    cn_client_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_POINTER.withName("p_client"),
        netcode.C_POINTER.withName("transport"),
        netcode.C_POINTER.withName("mem_ctx")
    ).withName("cn_client_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout p_client$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("p_client"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_protocol_client_t *p_client
     * }
     */
    public static final AddressLayout p_client$layout() {
        return p_client$LAYOUT;
    }

    private static final long p_client$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_protocol_client_t *p_client
     * }
     */
    public static final long p_client$offset() {
        return p_client$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_protocol_client_t *p_client
     * }
     */
    public static MemorySegment p_client(MemorySegment struct) {
        return struct.get(p_client$LAYOUT, p_client$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_protocol_client_t *p_client
     * }
     */
    public static void p_client(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(p_client$LAYOUT, p_client$OFFSET, fieldValue);
    }

    private static final AddressLayout transport$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("transport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_transport_t *transport
     * }
     */
    public static final AddressLayout transport$layout() {
        return transport$LAYOUT;
    }

    private static final long transport$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_transport_t *transport
     * }
     */
    public static final long transport$offset() {
        return transport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_transport_t *transport
     * }
     */
    public static MemorySegment transport(MemorySegment struct) {
        return struct.get(transport$LAYOUT, transport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_transport_t *transport
     * }
     */
    public static void transport(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(transport$LAYOUT, transport$OFFSET, fieldValue);
    }

    private static final AddressLayout mem_ctx$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mem_ctx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final AddressLayout mem_ctx$layout() {
        return mem_ctx$LAYOUT;
    }

    private static final long mem_ctx$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static final long mem_ctx$offset() {
        return mem_ctx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static MemorySegment mem_ctx(MemorySegment struct) {
        return struct.get(mem_ctx$LAYOUT, mem_ctx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mem_ctx
     * }
     */
    public static void mem_ctx(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mem_ctx$LAYOUT, mem_ctx$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

