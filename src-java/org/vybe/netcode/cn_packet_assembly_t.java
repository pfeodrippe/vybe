// Generated by jextract

package org.vybe.netcode;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct cn_packet_assembly_t {
 *     uint16_t send_sequence;
 *     uint16_t receive_sequence;
 *     cn_sequence_buffer_t fragments_received;
 *     cn_packet_queue_t packets_received;
 * }
 * }
 */
public class cn_packet_assembly_t {

    cn_packet_assembly_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        netcode.C_SHORT.withName("send_sequence"),
        netcode.C_SHORT.withName("receive_sequence"),
        MemoryLayout.paddingLayout(4),
        cn_sequence_buffer_t.layout().withName("fragments_received"),
        cn_packet_queue_t.layout().withName("packets_received")
    ).withName("cn_packet_assembly_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort send_sequence$LAYOUT = (OfShort)$LAYOUT.select(groupElement("send_sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t send_sequence
     * }
     */
    public static final OfShort send_sequence$layout() {
        return send_sequence$LAYOUT;
    }

    private static final long send_sequence$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t send_sequence
     * }
     */
    public static final long send_sequence$offset() {
        return send_sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t send_sequence
     * }
     */
    public static short send_sequence(MemorySegment struct) {
        return struct.get(send_sequence$LAYOUT, send_sequence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t send_sequence
     * }
     */
    public static void send_sequence(MemorySegment struct, short fieldValue) {
        struct.set(send_sequence$LAYOUT, send_sequence$OFFSET, fieldValue);
    }

    private static final OfShort receive_sequence$LAYOUT = (OfShort)$LAYOUT.select(groupElement("receive_sequence"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t receive_sequence
     * }
     */
    public static final OfShort receive_sequence$layout() {
        return receive_sequence$LAYOUT;
    }

    private static final long receive_sequence$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t receive_sequence
     * }
     */
    public static final long receive_sequence$offset() {
        return receive_sequence$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t receive_sequence
     * }
     */
    public static short receive_sequence(MemorySegment struct) {
        return struct.get(receive_sequence$LAYOUT, receive_sequence$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t receive_sequence
     * }
     */
    public static void receive_sequence(MemorySegment struct, short fieldValue) {
        struct.set(receive_sequence$LAYOUT, receive_sequence$OFFSET, fieldValue);
    }

    private static final GroupLayout fragments_received$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("fragments_received"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_sequence_buffer_t fragments_received
     * }
     */
    public static final GroupLayout fragments_received$layout() {
        return fragments_received$LAYOUT;
    }

    private static final long fragments_received$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_sequence_buffer_t fragments_received
     * }
     */
    public static final long fragments_received$offset() {
        return fragments_received$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_sequence_buffer_t fragments_received
     * }
     */
    public static MemorySegment fragments_received(MemorySegment struct) {
        return struct.asSlice(fragments_received$OFFSET, fragments_received$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_sequence_buffer_t fragments_received
     * }
     */
    public static void fragments_received(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, fragments_received$OFFSET, fragments_received$LAYOUT.byteSize());
    }

    private static final GroupLayout packets_received$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("packets_received"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * cn_packet_queue_t packets_received
     * }
     */
    public static final GroupLayout packets_received$layout() {
        return packets_received$LAYOUT;
    }

    private static final long packets_received$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * cn_packet_queue_t packets_received
     * }
     */
    public static final long packets_received$offset() {
        return packets_received$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * cn_packet_queue_t packets_received
     * }
     */
    public static MemorySegment packets_received(MemorySegment struct) {
        return struct.asSlice(packets_received$OFFSET, packets_received$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * cn_packet_queue_t packets_received
     * }
     */
    public static void packets_received(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, packets_received$OFFSET, packets_received$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

