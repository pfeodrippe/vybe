// Generated by jextract

package org.vybe.jolt_cs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPH_Matrix4x4 {
 *     float m11;
 *     float m12;
 *     float m13;
 *     float m14;
 *     float m21;
 *     float m22;
 *     float m23;
 *     float m24;
 *     float m31;
 *     float m32;
 *     float m33;
 *     float m34;
 *     float m41;
 *     float m42;
 *     float m43;
 *     float m44;
 * }
 * }
 */
public class JPH_Matrix4x4 {

    JPH_Matrix4x4() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        jolt_cs.C_FLOAT.withName("m11"),
        jolt_cs.C_FLOAT.withName("m12"),
        jolt_cs.C_FLOAT.withName("m13"),
        jolt_cs.C_FLOAT.withName("m14"),
        jolt_cs.C_FLOAT.withName("m21"),
        jolt_cs.C_FLOAT.withName("m22"),
        jolt_cs.C_FLOAT.withName("m23"),
        jolt_cs.C_FLOAT.withName("m24"),
        jolt_cs.C_FLOAT.withName("m31"),
        jolt_cs.C_FLOAT.withName("m32"),
        jolt_cs.C_FLOAT.withName("m33"),
        jolt_cs.C_FLOAT.withName("m34"),
        jolt_cs.C_FLOAT.withName("m41"),
        jolt_cs.C_FLOAT.withName("m42"),
        jolt_cs.C_FLOAT.withName("m43"),
        jolt_cs.C_FLOAT.withName("m44")
    ).withName("JPH_Matrix4x4");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat m11$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m11"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m11
     * }
     */
    public static final OfFloat m11$layout() {
        return m11$LAYOUT;
    }

    private static final long m11$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m11
     * }
     */
    public static final long m11$offset() {
        return m11$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m11
     * }
     */
    public static float m11(MemorySegment struct) {
        return struct.get(m11$LAYOUT, m11$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m11
     * }
     */
    public static void m11(MemorySegment struct, float fieldValue) {
        struct.set(m11$LAYOUT, m11$OFFSET, fieldValue);
    }

    private static final OfFloat m12$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m12"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m12
     * }
     */
    public static final OfFloat m12$layout() {
        return m12$LAYOUT;
    }

    private static final long m12$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m12
     * }
     */
    public static final long m12$offset() {
        return m12$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m12
     * }
     */
    public static float m12(MemorySegment struct) {
        return struct.get(m12$LAYOUT, m12$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m12
     * }
     */
    public static void m12(MemorySegment struct, float fieldValue) {
        struct.set(m12$LAYOUT, m12$OFFSET, fieldValue);
    }

    private static final OfFloat m13$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m13"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m13
     * }
     */
    public static final OfFloat m13$layout() {
        return m13$LAYOUT;
    }

    private static final long m13$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m13
     * }
     */
    public static final long m13$offset() {
        return m13$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m13
     * }
     */
    public static float m13(MemorySegment struct) {
        return struct.get(m13$LAYOUT, m13$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m13
     * }
     */
    public static void m13(MemorySegment struct, float fieldValue) {
        struct.set(m13$LAYOUT, m13$OFFSET, fieldValue);
    }

    private static final OfFloat m14$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m14"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m14
     * }
     */
    public static final OfFloat m14$layout() {
        return m14$LAYOUT;
    }

    private static final long m14$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m14
     * }
     */
    public static final long m14$offset() {
        return m14$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m14
     * }
     */
    public static float m14(MemorySegment struct) {
        return struct.get(m14$LAYOUT, m14$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m14
     * }
     */
    public static void m14(MemorySegment struct, float fieldValue) {
        struct.set(m14$LAYOUT, m14$OFFSET, fieldValue);
    }

    private static final OfFloat m21$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m21"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m21
     * }
     */
    public static final OfFloat m21$layout() {
        return m21$LAYOUT;
    }

    private static final long m21$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m21
     * }
     */
    public static final long m21$offset() {
        return m21$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m21
     * }
     */
    public static float m21(MemorySegment struct) {
        return struct.get(m21$LAYOUT, m21$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m21
     * }
     */
    public static void m21(MemorySegment struct, float fieldValue) {
        struct.set(m21$LAYOUT, m21$OFFSET, fieldValue);
    }

    private static final OfFloat m22$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m22"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m22
     * }
     */
    public static final OfFloat m22$layout() {
        return m22$LAYOUT;
    }

    private static final long m22$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m22
     * }
     */
    public static final long m22$offset() {
        return m22$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m22
     * }
     */
    public static float m22(MemorySegment struct) {
        return struct.get(m22$LAYOUT, m22$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m22
     * }
     */
    public static void m22(MemorySegment struct, float fieldValue) {
        struct.set(m22$LAYOUT, m22$OFFSET, fieldValue);
    }

    private static final OfFloat m23$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m23"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m23
     * }
     */
    public static final OfFloat m23$layout() {
        return m23$LAYOUT;
    }

    private static final long m23$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m23
     * }
     */
    public static final long m23$offset() {
        return m23$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m23
     * }
     */
    public static float m23(MemorySegment struct) {
        return struct.get(m23$LAYOUT, m23$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m23
     * }
     */
    public static void m23(MemorySegment struct, float fieldValue) {
        struct.set(m23$LAYOUT, m23$OFFSET, fieldValue);
    }

    private static final OfFloat m24$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m24"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m24
     * }
     */
    public static final OfFloat m24$layout() {
        return m24$LAYOUT;
    }

    private static final long m24$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m24
     * }
     */
    public static final long m24$offset() {
        return m24$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m24
     * }
     */
    public static float m24(MemorySegment struct) {
        return struct.get(m24$LAYOUT, m24$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m24
     * }
     */
    public static void m24(MemorySegment struct, float fieldValue) {
        struct.set(m24$LAYOUT, m24$OFFSET, fieldValue);
    }

    private static final OfFloat m31$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m31"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m31
     * }
     */
    public static final OfFloat m31$layout() {
        return m31$LAYOUT;
    }

    private static final long m31$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m31
     * }
     */
    public static final long m31$offset() {
        return m31$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m31
     * }
     */
    public static float m31(MemorySegment struct) {
        return struct.get(m31$LAYOUT, m31$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m31
     * }
     */
    public static void m31(MemorySegment struct, float fieldValue) {
        struct.set(m31$LAYOUT, m31$OFFSET, fieldValue);
    }

    private static final OfFloat m32$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m32
     * }
     */
    public static final OfFloat m32$layout() {
        return m32$LAYOUT;
    }

    private static final long m32$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m32
     * }
     */
    public static final long m32$offset() {
        return m32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m32
     * }
     */
    public static float m32(MemorySegment struct) {
        return struct.get(m32$LAYOUT, m32$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m32
     * }
     */
    public static void m32(MemorySegment struct, float fieldValue) {
        struct.set(m32$LAYOUT, m32$OFFSET, fieldValue);
    }

    private static final OfFloat m33$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m33"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m33
     * }
     */
    public static final OfFloat m33$layout() {
        return m33$LAYOUT;
    }

    private static final long m33$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m33
     * }
     */
    public static final long m33$offset() {
        return m33$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m33
     * }
     */
    public static float m33(MemorySegment struct) {
        return struct.get(m33$LAYOUT, m33$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m33
     * }
     */
    public static void m33(MemorySegment struct, float fieldValue) {
        struct.set(m33$LAYOUT, m33$OFFSET, fieldValue);
    }

    private static final OfFloat m34$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m34"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m34
     * }
     */
    public static final OfFloat m34$layout() {
        return m34$LAYOUT;
    }

    private static final long m34$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m34
     * }
     */
    public static final long m34$offset() {
        return m34$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m34
     * }
     */
    public static float m34(MemorySegment struct) {
        return struct.get(m34$LAYOUT, m34$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m34
     * }
     */
    public static void m34(MemorySegment struct, float fieldValue) {
        struct.set(m34$LAYOUT, m34$OFFSET, fieldValue);
    }

    private static final OfFloat m41$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m41"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m41
     * }
     */
    public static final OfFloat m41$layout() {
        return m41$LAYOUT;
    }

    private static final long m41$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m41
     * }
     */
    public static final long m41$offset() {
        return m41$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m41
     * }
     */
    public static float m41(MemorySegment struct) {
        return struct.get(m41$LAYOUT, m41$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m41
     * }
     */
    public static void m41(MemorySegment struct, float fieldValue) {
        struct.set(m41$LAYOUT, m41$OFFSET, fieldValue);
    }

    private static final OfFloat m42$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m42"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m42
     * }
     */
    public static final OfFloat m42$layout() {
        return m42$LAYOUT;
    }

    private static final long m42$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m42
     * }
     */
    public static final long m42$offset() {
        return m42$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m42
     * }
     */
    public static float m42(MemorySegment struct) {
        return struct.get(m42$LAYOUT, m42$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m42
     * }
     */
    public static void m42(MemorySegment struct, float fieldValue) {
        struct.set(m42$LAYOUT, m42$OFFSET, fieldValue);
    }

    private static final OfFloat m43$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m43"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m43
     * }
     */
    public static final OfFloat m43$layout() {
        return m43$LAYOUT;
    }

    private static final long m43$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m43
     * }
     */
    public static final long m43$offset() {
        return m43$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m43
     * }
     */
    public static float m43(MemorySegment struct) {
        return struct.get(m43$LAYOUT, m43$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m43
     * }
     */
    public static void m43(MemorySegment struct, float fieldValue) {
        struct.set(m43$LAYOUT, m43$OFFSET, fieldValue);
    }

    private static final OfFloat m44$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("m44"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float m44
     * }
     */
    public static final OfFloat m44$layout() {
        return m44$LAYOUT;
    }

    private static final long m44$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float m44
     * }
     */
    public static final long m44$offset() {
        return m44$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float m44
     * }
     */
    public static float m44(MemorySegment struct) {
        return struct.get(m44$LAYOUT, m44$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float m44
     * }
     */
    public static void m44(MemorySegment struct, float fieldValue) {
        struct.set(m44$LAYOUT, m44$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

