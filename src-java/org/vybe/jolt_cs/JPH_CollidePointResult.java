// Generated by jextract

package org.vybe.jolt_cs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPH_CollidePointResult {
 *     JPH_BodyID bodyID;
 *     JPH_SubShapeID subShapeID2;
 * }
 * }
 */
public class JPH_CollidePointResult {

    JPH_CollidePointResult() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        jolt_cs.C_INT.withName("bodyID"),
        jolt_cs.C_INT.withName("subShapeID2")
    ).withName("JPH_CollidePointResult");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt bodyID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bodyID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_BodyID bodyID
     * }
     */
    public static final OfInt bodyID$layout() {
        return bodyID$LAYOUT;
    }

    private static final long bodyID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_BodyID bodyID
     * }
     */
    public static final long bodyID$offset() {
        return bodyID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_BodyID bodyID
     * }
     */
    public static int bodyID(MemorySegment struct) {
        return struct.get(bodyID$LAYOUT, bodyID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_BodyID bodyID
     * }
     */
    public static void bodyID(MemorySegment struct, int fieldValue) {
        struct.set(bodyID$LAYOUT, bodyID$OFFSET, fieldValue);
    }

    private static final OfInt subShapeID2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subShapeID2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID2
     * }
     */
    public static final OfInt subShapeID2$layout() {
        return subShapeID2$LAYOUT;
    }

    private static final long subShapeID2$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID2
     * }
     */
    public static final long subShapeID2$offset() {
        return subShapeID2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID2
     * }
     */
    public static int subShapeID2(MemorySegment struct) {
        return struct.get(subShapeID2$LAYOUT, subShapeID2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID2
     * }
     */
    public static void subShapeID2(MemorySegment struct, int fieldValue) {
        struct.set(subShapeID2$LAYOUT, subShapeID2$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

