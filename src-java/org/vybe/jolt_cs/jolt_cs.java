// Generated by jextract

package org.vybe.jolt_cs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class jolt_cs {

    jolt_cs() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup("/tmp/pfeodrippe_vybe_native/libjoltc_cs.dylib", LIBRARY_ARENA)
            .or(SymbolLookup.libraryLookup("/tmp/pfeodrippe_vybe_native/libJolt_cs.dylib", LIBRARY_ARENA))
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }
    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }
    private static final int __DARWIN_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }
    private static final int __DARWIN_UNIX03 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }
    private static final int __DARWIN_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }
    private static final int __DARWIN_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }
    private static final int __DARWIN_NON_CANCELABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }
    private static final int __STDC_WANT_LIB_EXT1__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }
    private static final int __DARWIN_NO_LONG_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }
    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }
    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }
    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }
    private static final int __has_ptrcheck = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = jolt_cs.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = jolt_cs.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = jolt_cs.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = jolt_cs.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = jolt_cs.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = jolt_cs.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = jolt_cs.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = jolt_cs.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = jolt_cs.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = jolt_cs.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_int8_t
     * }
     */
    public static final OfByte u_int8_t = jolt_cs.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_int16_t
     * }
     */
    public static final OfShort u_int16_t = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int32_t
     * }
     */
    public static final OfInt u_int32_t = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u_int64_t
     * }
     */
    public static final OfLong u_int64_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t register_t
     * }
     */
    public static final OfLong register_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_addr_t
     * }
     */
    public static final OfLong user_addr_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_size_t
     * }
     */
    public static final OfLong user_size_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_ssize_t
     * }
     */
    public static final OfLong user_ssize_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_long_t
     * }
     */
    public static final OfLong user_long_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_ulong_t
     * }
     */
    public static final OfLong user_ulong_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_time_t
     * }
     */
    public static final OfLong user_time_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_off_t
     * }
     */
    public static final OfLong user_off_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t syscall_arg_t
     * }
     */
    public static final OfLong syscall_arg_t = jolt_cs.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = jolt_cs.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint32_t JPH_Bool32
     * }
     */
    public static final OfInt JPH_Bool32 = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t JPH_BodyID
     * }
     */
    public static final OfInt JPH_BodyID = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t JPH_SubShapeID
     * }
     */
    public static final OfInt JPH_SubShapeID = jolt_cs.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint16_t JPH_ObjectLayer
     * }
     */
    public static final OfShort JPH_ObjectLayer = jolt_cs.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint8_t JPH_BroadPhaseLayer
     * }
     */
    public static final OfByte JPH_BroadPhaseLayer = jolt_cs.C_CHAR;
    private static final int JPH_PhysicsUpdateError_None = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_PhysicsUpdateError.JPH_PhysicsUpdateError_None = 0
     * }
     */
    public static int JPH_PhysicsUpdateError_None() {
        return JPH_PhysicsUpdateError_None;
    }
    private static final int JPH_PhysicsUpdateError_ManifoldCacheFull = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_PhysicsUpdateError.JPH_PhysicsUpdateError_ManifoldCacheFull = 1
     * }
     */
    public static int JPH_PhysicsUpdateError_ManifoldCacheFull() {
        return JPH_PhysicsUpdateError_ManifoldCacheFull;
    }
    private static final int JPH_PhysicsUpdateError_BodyPairCacheFull = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_PhysicsUpdateError.JPH_PhysicsUpdateError_BodyPairCacheFull = 2
     * }
     */
    public static int JPH_PhysicsUpdateError_BodyPairCacheFull() {
        return JPH_PhysicsUpdateError_BodyPairCacheFull;
    }
    private static final int JPH_PhysicsUpdateError_ContactConstraintsFull = (int)4L;
    /**
     * {@snippet lang=c :
     * enum JPH_PhysicsUpdateError.JPH_PhysicsUpdateError_ContactConstraintsFull = 4
     * }
     */
    public static int JPH_PhysicsUpdateError_ContactConstraintsFull() {
        return JPH_PhysicsUpdateError_ContactConstraintsFull;
    }
    private static final int _JPH_PhysicsUpdateError_Count = (int)5L;
    /**
     * {@snippet lang=c :
     * enum JPH_PhysicsUpdateError._JPH_PhysicsUpdateError_Count = 5
     * }
     */
    public static int _JPH_PhysicsUpdateError_Count() {
        return _JPH_PhysicsUpdateError_Count;
    }
    private static final int _JPH_PhysicsUpdateError_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_PhysicsUpdateError._JPH_PhysicsUpdateError_Force32 = 2147483647
     * }
     */
    public static int _JPH_PhysicsUpdateError_Force32() {
        return _JPH_PhysicsUpdateError_Force32;
    }
    private static final int JPH_BodyType_Rigid = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_BodyType.JPH_BodyType_Rigid = 0
     * }
     */
    public static int JPH_BodyType_Rigid() {
        return JPH_BodyType_Rigid;
    }
    private static final int JPH_BodyType_Soft = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_BodyType.JPH_BodyType_Soft = 1
     * }
     */
    public static int JPH_BodyType_Soft() {
        return JPH_BodyType_Soft;
    }
    private static final int _JPH_BodyType_Count = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_BodyType._JPH_BodyType_Count = 2
     * }
     */
    public static int _JPH_BodyType_Count() {
        return _JPH_BodyType_Count;
    }
    private static final int _JPH_BodyType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_BodyType._JPH_BodyType_Force32 = 2147483647
     * }
     */
    public static int _JPH_BodyType_Force32() {
        return _JPH_BodyType_Force32;
    }
    private static final int JPH_MotionType_Static = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotionType.JPH_MotionType_Static = 0
     * }
     */
    public static int JPH_MotionType_Static() {
        return JPH_MotionType_Static;
    }
    private static final int JPH_MotionType_Kinematic = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotionType.JPH_MotionType_Kinematic = 1
     * }
     */
    public static int JPH_MotionType_Kinematic() {
        return JPH_MotionType_Kinematic;
    }
    private static final int JPH_MotionType_Dynamic = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotionType.JPH_MotionType_Dynamic = 2
     * }
     */
    public static int JPH_MotionType_Dynamic() {
        return JPH_MotionType_Dynamic;
    }
    private static final int _JPH_MotionType_Count = (int)3L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotionType._JPH_MotionType_Count = 3
     * }
     */
    public static int _JPH_MotionType_Count() {
        return _JPH_MotionType_Count;
    }
    private static final int _JPH_MotionType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotionType._JPH_MotionType_Force32 = 2147483647
     * }
     */
    public static int _JPH_MotionType_Force32() {
        return _JPH_MotionType_Force32;
    }
    private static final int JPH_Activation_Activate = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_Activation.JPH_Activation_Activate = 0
     * }
     */
    public static int JPH_Activation_Activate() {
        return JPH_Activation_Activate;
    }
    private static final int JPH_Activation_DontActivate = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_Activation.JPH_Activation_DontActivate = 1
     * }
     */
    public static int JPH_Activation_DontActivate() {
        return JPH_Activation_DontActivate;
    }
    private static final int _JPH_Activation_Count = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_Activation._JPH_Activation_Count = 2
     * }
     */
    public static int _JPH_Activation_Count() {
        return _JPH_Activation_Count;
    }
    private static final int _JPH_Activation_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_Activation._JPH_Activation_Force32 = 2147483647
     * }
     */
    public static int _JPH_Activation_Force32() {
        return _JPH_Activation_Force32;
    }
    private static final int JPH_ValidateResult_AcceptAllContactsForThisBodyPair = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_ValidateResult.JPH_ValidateResult_AcceptAllContactsForThisBodyPair = 0
     * }
     */
    public static int JPH_ValidateResult_AcceptAllContactsForThisBodyPair() {
        return JPH_ValidateResult_AcceptAllContactsForThisBodyPair;
    }
    private static final int JPH_ValidateResult_AcceptContact = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_ValidateResult.JPH_ValidateResult_AcceptContact = 1
     * }
     */
    public static int JPH_ValidateResult_AcceptContact() {
        return JPH_ValidateResult_AcceptContact;
    }
    private static final int JPH_ValidateResult_RejectContact = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_ValidateResult.JPH_ValidateResult_RejectContact = 2
     * }
     */
    public static int JPH_ValidateResult_RejectContact() {
        return JPH_ValidateResult_RejectContact;
    }
    private static final int JPH_ValidateResult_RejectAllContactsForThisBodyPair = (int)3L;
    /**
     * {@snippet lang=c :
     * enum JPH_ValidateResult.JPH_ValidateResult_RejectAllContactsForThisBodyPair = 3
     * }
     */
    public static int JPH_ValidateResult_RejectAllContactsForThisBodyPair() {
        return JPH_ValidateResult_RejectAllContactsForThisBodyPair;
    }
    private static final int _JPH_ValidateResult_Count = (int)4L;
    /**
     * {@snippet lang=c :
     * enum JPH_ValidateResult._JPH_ValidateResult_Count = 4
     * }
     */
    public static int _JPH_ValidateResult_Count() {
        return _JPH_ValidateResult_Count;
    }
    private static final int _JPH_ValidateResult_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_ValidateResult._JPH_ValidateResult_Force32 = 2147483647
     * }
     */
    public static int _JPH_ValidateResult_Force32() {
        return _JPH_ValidateResult_Force32;
    }
    private static final int JPH_ShapeType_Convex = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_Convex = 0
     * }
     */
    public static int JPH_ShapeType_Convex() {
        return JPH_ShapeType_Convex;
    }
    private static final int JPH_ShapeType_Compound = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_Compound = 1
     * }
     */
    public static int JPH_ShapeType_Compound() {
        return JPH_ShapeType_Compound;
    }
    private static final int JPH_ShapeType_Decorated = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_Decorated = 2
     * }
     */
    public static int JPH_ShapeType_Decorated() {
        return JPH_ShapeType_Decorated;
    }
    private static final int JPH_ShapeType_Mesh = (int)3L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_Mesh = 3
     * }
     */
    public static int JPH_ShapeType_Mesh() {
        return JPH_ShapeType_Mesh;
    }
    private static final int JPH_ShapeType_HeightField = (int)4L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_HeightField = 4
     * }
     */
    public static int JPH_ShapeType_HeightField() {
        return JPH_ShapeType_HeightField;
    }
    private static final int JPH_ShapeType_SoftBody = (int)5L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_SoftBody = 5
     * }
     */
    public static int JPH_ShapeType_SoftBody() {
        return JPH_ShapeType_SoftBody;
    }
    private static final int JPH_ShapeType_User1 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_User1 = 6
     * }
     */
    public static int JPH_ShapeType_User1() {
        return JPH_ShapeType_User1;
    }
    private static final int JPH_ShapeType_User2 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_User2 = 7
     * }
     */
    public static int JPH_ShapeType_User2() {
        return JPH_ShapeType_User2;
    }
    private static final int JPH_ShapeType_User3 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_User3 = 8
     * }
     */
    public static int JPH_ShapeType_User3() {
        return JPH_ShapeType_User3;
    }
    private static final int JPH_ShapeType_User4 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType.JPH_ShapeType_User4 = 9
     * }
     */
    public static int JPH_ShapeType_User4() {
        return JPH_ShapeType_User4;
    }
    private static final int _JPH_ShapeType_Count = (int)10L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType._JPH_ShapeType_Count = 10
     * }
     */
    public static int _JPH_ShapeType_Count() {
        return _JPH_ShapeType_Count;
    }
    private static final int _JPH_ShapeType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeType._JPH_ShapeType_Force32 = 2147483647
     * }
     */
    public static int _JPH_ShapeType_Force32() {
        return _JPH_ShapeType_Force32;
    }
    private static final int JPH_ShapeSubType_Sphere = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_Sphere = 0
     * }
     */
    public static int JPH_ShapeSubType_Sphere() {
        return JPH_ShapeSubType_Sphere;
    }
    private static final int JPH_ShapeSubType_Box = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_Box = 1
     * }
     */
    public static int JPH_ShapeSubType_Box() {
        return JPH_ShapeSubType_Box;
    }
    private static final int JPH_ShapeSubType_Triangle = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_Triangle = 2
     * }
     */
    public static int JPH_ShapeSubType_Triangle() {
        return JPH_ShapeSubType_Triangle;
    }
    private static final int JPH_ShapeSubType_Capsule = (int)3L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_Capsule = 3
     * }
     */
    public static int JPH_ShapeSubType_Capsule() {
        return JPH_ShapeSubType_Capsule;
    }
    private static final int JPH_ShapeSubType_TaperedCapsule = (int)4L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_TaperedCapsule = 4
     * }
     */
    public static int JPH_ShapeSubType_TaperedCapsule() {
        return JPH_ShapeSubType_TaperedCapsule;
    }
    private static final int JPH_ShapeSubType_Cylinder = (int)5L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_Cylinder = 5
     * }
     */
    public static int JPH_ShapeSubType_Cylinder() {
        return JPH_ShapeSubType_Cylinder;
    }
    private static final int JPH_ShapeSubType_ConvexHull = (int)6L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_ConvexHull = 6
     * }
     */
    public static int JPH_ShapeSubType_ConvexHull() {
        return JPH_ShapeSubType_ConvexHull;
    }
    private static final int JPH_ShapeSubType_StaticCompound = (int)7L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_StaticCompound = 7
     * }
     */
    public static int JPH_ShapeSubType_StaticCompound() {
        return JPH_ShapeSubType_StaticCompound;
    }
    private static final int JPH_ShapeSubType_MutableCompound = (int)8L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_MutableCompound = 8
     * }
     */
    public static int JPH_ShapeSubType_MutableCompound() {
        return JPH_ShapeSubType_MutableCompound;
    }
    private static final int JPH_ShapeSubType_RotatedTranslated = (int)9L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_RotatedTranslated = 9
     * }
     */
    public static int JPH_ShapeSubType_RotatedTranslated() {
        return JPH_ShapeSubType_RotatedTranslated;
    }
    private static final int JPH_ShapeSubType_Scaled = (int)10L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_Scaled = 10
     * }
     */
    public static int JPH_ShapeSubType_Scaled() {
        return JPH_ShapeSubType_Scaled;
    }
    private static final int JPH_ShapeSubType_OffsetCenterOfMass = (int)11L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_OffsetCenterOfMass = 11
     * }
     */
    public static int JPH_ShapeSubType_OffsetCenterOfMass() {
        return JPH_ShapeSubType_OffsetCenterOfMass;
    }
    private static final int JPH_ShapeSubType_Mesh = (int)12L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_Mesh = 12
     * }
     */
    public static int JPH_ShapeSubType_Mesh() {
        return JPH_ShapeSubType_Mesh;
    }
    private static final int JPH_ShapeSubType_HeightField = (int)13L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_HeightField = 13
     * }
     */
    public static int JPH_ShapeSubType_HeightField() {
        return JPH_ShapeSubType_HeightField;
    }
    private static final int JPH_ShapeSubType_SoftBody = (int)14L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType.JPH_ShapeSubType_SoftBody = 14
     * }
     */
    public static int JPH_ShapeSubType_SoftBody() {
        return JPH_ShapeSubType_SoftBody;
    }
    private static final int _JPH_ShapeSubType_Count = (int)15L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType._JPH_ShapeSubType_Count = 15
     * }
     */
    public static int _JPH_ShapeSubType_Count() {
        return _JPH_ShapeSubType_Count;
    }
    private static final int _JPH_ShapeSubType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_ShapeSubType._JPH_ShapeSubType_Force32 = 2147483647
     * }
     */
    public static int _JPH_ShapeSubType_Force32() {
        return _JPH_ShapeSubType_Force32;
    }
    private static final int JPH_ConstraintType_Constraint = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintType.JPH_ConstraintType_Constraint = 0
     * }
     */
    public static int JPH_ConstraintType_Constraint() {
        return JPH_ConstraintType_Constraint;
    }
    private static final int JPH_ConstraintType_TwoBodyConstraint = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintType.JPH_ConstraintType_TwoBodyConstraint = 1
     * }
     */
    public static int JPH_ConstraintType_TwoBodyConstraint() {
        return JPH_ConstraintType_TwoBodyConstraint;
    }
    private static final int _JPH_ConstraintType_Count = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintType._JPH_ConstraintType_Count = 2
     * }
     */
    public static int _JPH_ConstraintType_Count() {
        return _JPH_ConstraintType_Count;
    }
    private static final int _JPH_ConstraintType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintType._JPH_ConstraintType_Force32 = 2147483647
     * }
     */
    public static int _JPH_ConstraintType_Force32() {
        return _JPH_ConstraintType_Force32;
    }
    private static final int JPH_ConstraintSubType_Fixed = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Fixed = 0
     * }
     */
    public static int JPH_ConstraintSubType_Fixed() {
        return JPH_ConstraintSubType_Fixed;
    }
    private static final int JPH_ConstraintSubType_Point = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Point = 1
     * }
     */
    public static int JPH_ConstraintSubType_Point() {
        return JPH_ConstraintSubType_Point;
    }
    private static final int JPH_ConstraintSubType_Hinge = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Hinge = 2
     * }
     */
    public static int JPH_ConstraintSubType_Hinge() {
        return JPH_ConstraintSubType_Hinge;
    }
    private static final int JPH_ConstraintSubType_Slider = (int)3L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Slider = 3
     * }
     */
    public static int JPH_ConstraintSubType_Slider() {
        return JPH_ConstraintSubType_Slider;
    }
    private static final int JPH_ConstraintSubType_Distance = (int)4L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Distance = 4
     * }
     */
    public static int JPH_ConstraintSubType_Distance() {
        return JPH_ConstraintSubType_Distance;
    }
    private static final int JPH_ConstraintSubType_Cone = (int)5L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Cone = 5
     * }
     */
    public static int JPH_ConstraintSubType_Cone() {
        return JPH_ConstraintSubType_Cone;
    }
    private static final int JPH_ConstraintSubType_SwingTwist = (int)6L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_SwingTwist = 6
     * }
     */
    public static int JPH_ConstraintSubType_SwingTwist() {
        return JPH_ConstraintSubType_SwingTwist;
    }
    private static final int JPH_ConstraintSubType_SixDOF = (int)7L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_SixDOF = 7
     * }
     */
    public static int JPH_ConstraintSubType_SixDOF() {
        return JPH_ConstraintSubType_SixDOF;
    }
    private static final int JPH_ConstraintSubType_Path = (int)8L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Path = 8
     * }
     */
    public static int JPH_ConstraintSubType_Path() {
        return JPH_ConstraintSubType_Path;
    }
    private static final int JPH_ConstraintSubType_Vehicle = (int)9L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Vehicle = 9
     * }
     */
    public static int JPH_ConstraintSubType_Vehicle() {
        return JPH_ConstraintSubType_Vehicle;
    }
    private static final int JPH_ConstraintSubType_RackAndPinion = (int)10L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_RackAndPinion = 10
     * }
     */
    public static int JPH_ConstraintSubType_RackAndPinion() {
        return JPH_ConstraintSubType_RackAndPinion;
    }
    private static final int JPH_ConstraintSubType_Gear = (int)11L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Gear = 11
     * }
     */
    public static int JPH_ConstraintSubType_Gear() {
        return JPH_ConstraintSubType_Gear;
    }
    private static final int JPH_ConstraintSubType_Pulley = (int)12L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_Pulley = 12
     * }
     */
    public static int JPH_ConstraintSubType_Pulley() {
        return JPH_ConstraintSubType_Pulley;
    }
    private static final int JPH_ConstraintSubType_User1 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_User1 = 13
     * }
     */
    public static int JPH_ConstraintSubType_User1() {
        return JPH_ConstraintSubType_User1;
    }
    private static final int JPH_ConstraintSubType_User2 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_User2 = 14
     * }
     */
    public static int JPH_ConstraintSubType_User2() {
        return JPH_ConstraintSubType_User2;
    }
    private static final int JPH_ConstraintSubType_User3 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_User3 = 15
     * }
     */
    public static int JPH_ConstraintSubType_User3() {
        return JPH_ConstraintSubType_User3;
    }
    private static final int JPH_ConstraintSubType_User4 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType.JPH_ConstraintSubType_User4 = 16
     * }
     */
    public static int JPH_ConstraintSubType_User4() {
        return JPH_ConstraintSubType_User4;
    }
    private static final int _JPH_ConstraintSubType_Count = (int)17L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType._JPH_ConstraintSubType_Count = 17
     * }
     */
    public static int _JPH_ConstraintSubType_Count() {
        return _JPH_ConstraintSubType_Count;
    }
    private static final int _JPH_ConstraintSubType_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSubType._JPH_ConstraintSubType_Force32 = 2147483647
     * }
     */
    public static int _JPH_ConstraintSubType_Force32() {
        return _JPH_ConstraintSubType_Force32;
    }
    private static final int JPH_ConstraintSpace_LocalToBodyCOM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSpace.JPH_ConstraintSpace_LocalToBodyCOM = 0
     * }
     */
    public static int JPH_ConstraintSpace_LocalToBodyCOM() {
        return JPH_ConstraintSpace_LocalToBodyCOM;
    }
    private static final int JPH_ConstraintSpace_WorldSpace = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSpace.JPH_ConstraintSpace_WorldSpace = 1
     * }
     */
    public static int JPH_ConstraintSpace_WorldSpace() {
        return JPH_ConstraintSpace_WorldSpace;
    }
    private static final int _JPH_ConstraintSpace_Count = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSpace._JPH_ConstraintSpace_Count = 2
     * }
     */
    public static int _JPH_ConstraintSpace_Count() {
        return _JPH_ConstraintSpace_Count;
    }
    private static final int _JPH_ConstraintSpace_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_ConstraintSpace._JPH_ConstraintSpace_Force32 = 2147483647
     * }
     */
    public static int _JPH_ConstraintSpace_Force32() {
        return _JPH_ConstraintSpace_Force32;
    }
    private static final int JPH_MotionQuality_Discrete = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotionQuality.JPH_MotionQuality_Discrete = 0
     * }
     */
    public static int JPH_MotionQuality_Discrete() {
        return JPH_MotionQuality_Discrete;
    }
    private static final int JPH_MotionQuality_LinearCast = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotionQuality.JPH_MotionQuality_LinearCast = 1
     * }
     */
    public static int JPH_MotionQuality_LinearCast() {
        return JPH_MotionQuality_LinearCast;
    }
    private static final int _JPH_MotionQuality_Count = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotionQuality._JPH_MotionQuality_Count = 2
     * }
     */
    public static int _JPH_MotionQuality_Count() {
        return _JPH_MotionQuality_Count;
    }
    private static final int _JPH_MotionQuality_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotionQuality._JPH_MotionQuality_Force32 = 2147483647
     * }
     */
    public static int _JPH_MotionQuality_Force32() {
        return _JPH_MotionQuality_Force32;
    }
    private static final int JPH_AllowedDOFs_All = (int)63L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs.JPH_AllowedDOFs_All = 63
     * }
     */
    public static int JPH_AllowedDOFs_All() {
        return JPH_AllowedDOFs_All;
    }
    private static final int JPH_AllowedDOFs_TranslationX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs.JPH_AllowedDOFs_TranslationX = 1
     * }
     */
    public static int JPH_AllowedDOFs_TranslationX() {
        return JPH_AllowedDOFs_TranslationX;
    }
    private static final int JPH_AllowedDOFs_TranslationY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs.JPH_AllowedDOFs_TranslationY = 2
     * }
     */
    public static int JPH_AllowedDOFs_TranslationY() {
        return JPH_AllowedDOFs_TranslationY;
    }
    private static final int JPH_AllowedDOFs_TranslationZ = (int)4L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs.JPH_AllowedDOFs_TranslationZ = 4
     * }
     */
    public static int JPH_AllowedDOFs_TranslationZ() {
        return JPH_AllowedDOFs_TranslationZ;
    }
    private static final int JPH_AllowedDOFs_RotationX = (int)8L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs.JPH_AllowedDOFs_RotationX = 8
     * }
     */
    public static int JPH_AllowedDOFs_RotationX() {
        return JPH_AllowedDOFs_RotationX;
    }
    private static final int JPH_AllowedDOFs_RotationY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs.JPH_AllowedDOFs_RotationY = 16
     * }
     */
    public static int JPH_AllowedDOFs_RotationY() {
        return JPH_AllowedDOFs_RotationY;
    }
    private static final int JPH_AllowedDOFs_RotationZ = (int)32L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs.JPH_AllowedDOFs_RotationZ = 32
     * }
     */
    public static int JPH_AllowedDOFs_RotationZ() {
        return JPH_AllowedDOFs_RotationZ;
    }
    private static final int JPH_AllowedDOFs_Plane2D = (int)35L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs.JPH_AllowedDOFs_Plane2D = 35
     * }
     */
    public static int JPH_AllowedDOFs_Plane2D() {
        return JPH_AllowedDOFs_Plane2D;
    }
    private static final int _JPH_AllowedDOFs_Count = (int)36L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs._JPH_AllowedDOFs_Count = 36
     * }
     */
    public static int _JPH_AllowedDOFs_Count() {
        return _JPH_AllowedDOFs_Count;
    }
    private static final int _JPH_AllowedDOFs_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_AllowedDOFs._JPH_AllowedDOFs_Force32 = 2147483647
     * }
     */
    public static int _JPH_AllowedDOFs_Force32() {
        return _JPH_AllowedDOFs_Force32;
    }
    private static final int JPH_GroundState_OnGround = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_GroundState.JPH_GroundState_OnGround = 0
     * }
     */
    public static int JPH_GroundState_OnGround() {
        return JPH_GroundState_OnGround;
    }
    private static final int JPH_GroundState_OnSteepGround = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_GroundState.JPH_GroundState_OnSteepGround = 1
     * }
     */
    public static int JPH_GroundState_OnSteepGround() {
        return JPH_GroundState_OnSteepGround;
    }
    private static final int JPH_GroundState_NotSupported = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_GroundState.JPH_GroundState_NotSupported = 2
     * }
     */
    public static int JPH_GroundState_NotSupported() {
        return JPH_GroundState_NotSupported;
    }
    private static final int JPH_GroundState_InAir = (int)3L;
    /**
     * {@snippet lang=c :
     * enum JPH_GroundState.JPH_GroundState_InAir = 3
     * }
     */
    public static int JPH_GroundState_InAir() {
        return JPH_GroundState_InAir;
    }
    private static final int _JPH_GroundState_Count = (int)4L;
    /**
     * {@snippet lang=c :
     * enum JPH_GroundState._JPH_GroundState_Count = 4
     * }
     */
    public static int _JPH_GroundState_Count() {
        return _JPH_GroundState_Count;
    }
    private static final int _JPH_GroundState_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_GroundState._JPH_GroundState_Force32 = 2147483647
     * }
     */
    public static int _JPH_GroundState_Force32() {
        return _JPH_GroundState_Force32;
    }
    private static final int JPH_BackFaceMode_IgnoreBackFaces = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_BackFaceMode.JPH_BackFaceMode_IgnoreBackFaces = 0
     * }
     */
    public static int JPH_BackFaceMode_IgnoreBackFaces() {
        return JPH_BackFaceMode_IgnoreBackFaces;
    }
    private static final int JPH_BackFaceMode_CollideWithBackFaces = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_BackFaceMode.JPH_BackFaceMode_CollideWithBackFaces = 1
     * }
     */
    public static int JPH_BackFaceMode_CollideWithBackFaces() {
        return JPH_BackFaceMode_CollideWithBackFaces;
    }
    private static final int _JPH_BackFaceMode_Count = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_BackFaceMode._JPH_BackFaceMode_Count = 2
     * }
     */
    public static int _JPH_BackFaceMode_Count() {
        return _JPH_BackFaceMode_Count;
    }
    private static final int _JPH_BackFaceMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_BackFaceMode._JPH_BackFaceMode_Force32 = 2147483647
     * }
     */
    public static int _JPH_BackFaceMode_Force32() {
        return _JPH_BackFaceMode_Force32;
    }
    private static final int JPH_MotorState_Off = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotorState.JPH_MotorState_Off = 0
     * }
     */
    public static int JPH_MotorState_Off() {
        return JPH_MotorState_Off;
    }
    private static final int JPH_MotorState_Velocity = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotorState.JPH_MotorState_Velocity = 1
     * }
     */
    public static int JPH_MotorState_Velocity() {
        return JPH_MotorState_Velocity;
    }
    private static final int JPH_MotorState_Position = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotorState.JPH_MotorState_Position = 2
     * }
     */
    public static int JPH_MotorState_Position() {
        return JPH_MotorState_Position;
    }
    private static final int _JPH_MotorState_Count = (int)3L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotorState._JPH_MotorState_Count = 3
     * }
     */
    public static int _JPH_MotorState_Count() {
        return _JPH_MotorState_Count;
    }
    private static final int _JPH_MotorState_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_MotorState._JPH_MotorState_Force32 = 2147483647
     * }
     */
    public static int _JPH_MotorState_Force32() {
        return _JPH_MotorState_Force32;
    }
    private static final int JPH_SixDOFConstraintAxis_TranslationX = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_SixDOFConstraintAxis.JPH_SixDOFConstraintAxis_TranslationX = 0
     * }
     */
    public static int JPH_SixDOFConstraintAxis_TranslationX() {
        return JPH_SixDOFConstraintAxis_TranslationX;
    }
    private static final int JPH_SixDOFConstraintAxis_TranslationY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_SixDOFConstraintAxis.JPH_SixDOFConstraintAxis_TranslationY = 1
     * }
     */
    public static int JPH_SixDOFConstraintAxis_TranslationY() {
        return JPH_SixDOFConstraintAxis_TranslationY;
    }
    private static final int JPH_SixDOFConstraintAxis_TranslationZ = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_SixDOFConstraintAxis.JPH_SixDOFConstraintAxis_TranslationZ = 2
     * }
     */
    public static int JPH_SixDOFConstraintAxis_TranslationZ() {
        return JPH_SixDOFConstraintAxis_TranslationZ;
    }
    private static final int JPH_SixDOFConstraintAxis_RotationX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum JPH_SixDOFConstraintAxis.JPH_SixDOFConstraintAxis_RotationX = 3
     * }
     */
    public static int JPH_SixDOFConstraintAxis_RotationX() {
        return JPH_SixDOFConstraintAxis_RotationX;
    }
    private static final int JPH_SixDOFConstraintAxis_RotationY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum JPH_SixDOFConstraintAxis.JPH_SixDOFConstraintAxis_RotationY = 4
     * }
     */
    public static int JPH_SixDOFConstraintAxis_RotationY() {
        return JPH_SixDOFConstraintAxis_RotationY;
    }
    private static final int JPH_SixDOFConstraintAxis_RotationZ = (int)5L;
    /**
     * {@snippet lang=c :
     * enum JPH_SixDOFConstraintAxis.JPH_SixDOFConstraintAxis_RotationZ = 5
     * }
     */
    public static int JPH_SixDOFConstraintAxis_RotationZ() {
        return JPH_SixDOFConstraintAxis_RotationZ;
    }
    private static final int _JPH_SixDOFConstraintAxis_Count = (int)6L;
    /**
     * {@snippet lang=c :
     * enum JPH_SixDOFConstraintAxis._JPH_SixDOFConstraintAxis_Count = 6
     * }
     */
    public static int _JPH_SixDOFConstraintAxis_Count() {
        return _JPH_SixDOFConstraintAxis_Count;
    }
    private static final int _JPH_SixDOFConstraintAxis_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_SixDOFConstraintAxis._JPH_SixDOFConstraintAxis_Force32 = 2147483647
     * }
     */
    public static int _JPH_SixDOFConstraintAxis_Force32() {
        return _JPH_SixDOFConstraintAxis_Force32;
    }
    private static final int JPH_SpringMode_FrequencyAndDamping = (int)0L;
    /**
     * {@snippet lang=c :
     * enum JPH_SpringMode.JPH_SpringMode_FrequencyAndDamping = 0
     * }
     */
    public static int JPH_SpringMode_FrequencyAndDamping() {
        return JPH_SpringMode_FrequencyAndDamping;
    }
    private static final int JPH_SpringMode_StiffnessAndDamping = (int)1L;
    /**
     * {@snippet lang=c :
     * enum JPH_SpringMode.JPH_SpringMode_StiffnessAndDamping = 1
     * }
     */
    public static int JPH_SpringMode_StiffnessAndDamping() {
        return JPH_SpringMode_StiffnessAndDamping;
    }
    private static final int _JPH_SpringMode_Count = (int)2L;
    /**
     * {@snippet lang=c :
     * enum JPH_SpringMode._JPH_SpringMode_Count = 2
     * }
     */
    public static int _JPH_SpringMode_Count() {
        return _JPH_SpringMode_Count;
    }
    private static final int _JPH_SpringMode_Force32 = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum JPH_SpringMode._JPH_SpringMode_Force32 = 2147483647
     * }
     */
    public static int _JPH_SpringMode_Force32() {
        return _JPH_SpringMode_Force32;
    }

    private static class JPH_Init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Init(uint32_t tempAllocatorSize)
     * }
     */
    public static FunctionDescriptor JPH_Init$descriptor() {
        return JPH_Init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Init(uint32_t tempAllocatorSize)
     * }
     */
    public static MethodHandle JPH_Init$handle() {
        return JPH_Init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Init(uint32_t tempAllocatorSize)
     * }
     */
    public static MemorySegment JPH_Init$address() {
        return JPH_Init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Init(uint32_t tempAllocatorSize)
     * }
     */
    public static int JPH_Init(int tempAllocatorSize) {
        var mh$ = JPH_Init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Init", tempAllocatorSize);
            }
            return (int)mh$.invokeExact(tempAllocatorSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shutdown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shutdown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Shutdown()
     * }
     */
    public static FunctionDescriptor JPH_Shutdown$descriptor() {
        return JPH_Shutdown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Shutdown()
     * }
     */
    public static MethodHandle JPH_Shutdown$handle() {
        return JPH_Shutdown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Shutdown()
     * }
     */
    public static MemorySegment JPH_Shutdown$address() {
        return JPH_Shutdown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Shutdown()
     * }
     */
    public static void JPH_Shutdown() {
        var mh$ = JPH_Shutdown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shutdown");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SetAssertFailureHandler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SetAssertFailureHandler");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SetAssertFailureHandler(JPH_AssertFailureFunc handler)
     * }
     */
    public static FunctionDescriptor JPH_SetAssertFailureHandler$descriptor() {
        return JPH_SetAssertFailureHandler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SetAssertFailureHandler(JPH_AssertFailureFunc handler)
     * }
     */
    public static MethodHandle JPH_SetAssertFailureHandler$handle() {
        return JPH_SetAssertFailureHandler.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SetAssertFailureHandler(JPH_AssertFailureFunc handler)
     * }
     */
    public static MemorySegment JPH_SetAssertFailureHandler$address() {
        return JPH_SetAssertFailureHandler.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SetAssertFailureHandler(JPH_AssertFailureFunc handler)
     * }
     */
    public static void JPH_SetAssertFailureHandler(MemorySegment handler) {
        var mh$ = JPH_SetAssertFailureHandler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SetAssertFailureHandler", handler);
            }
            mh$.invokeExact(handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseLayerInterfaceMask_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseLayerInterfaceMask_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerInterface *JPH_BroadPhaseLayerInterfaceMask_Create(uint32_t numBroadPhaseLayers)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseLayerInterfaceMask_Create$descriptor() {
        return JPH_BroadPhaseLayerInterfaceMask_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerInterface *JPH_BroadPhaseLayerInterfaceMask_Create(uint32_t numBroadPhaseLayers)
     * }
     */
    public static MethodHandle JPH_BroadPhaseLayerInterfaceMask_Create$handle() {
        return JPH_BroadPhaseLayerInterfaceMask_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerInterface *JPH_BroadPhaseLayerInterfaceMask_Create(uint32_t numBroadPhaseLayers)
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerInterfaceMask_Create$address() {
        return JPH_BroadPhaseLayerInterfaceMask_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerInterface *JPH_BroadPhaseLayerInterfaceMask_Create(uint32_t numBroadPhaseLayers)
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerInterfaceMask_Create(int numBroadPhaseLayers) {
        var mh$ = JPH_BroadPhaseLayerInterfaceMask_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseLayerInterfaceMask_Create", numBroadPhaseLayers);
            }
            return (MemorySegment)mh$.invokeExact(numBroadPhaseLayers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_CHAR,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer(JPH_BroadPhaseLayerInterface *bpInterface, JPH_BroadPhaseLayer broadPhaseLayer, uint32_t groupsToInclude, uint32_t groupsToExclude)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer$descriptor() {
        return JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer(JPH_BroadPhaseLayerInterface *bpInterface, JPH_BroadPhaseLayer broadPhaseLayer, uint32_t groupsToInclude, uint32_t groupsToExclude)
     * }
     */
    public static MethodHandle JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer$handle() {
        return JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer(JPH_BroadPhaseLayerInterface *bpInterface, JPH_BroadPhaseLayer broadPhaseLayer, uint32_t groupsToInclude, uint32_t groupsToExclude)
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer$address() {
        return JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer(JPH_BroadPhaseLayerInterface *bpInterface, JPH_BroadPhaseLayer broadPhaseLayer, uint32_t groupsToInclude, uint32_t groupsToExclude)
     * }
     */
    public static void JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer(MemorySegment bpInterface, byte broadPhaseLayer, int groupsToInclude, int groupsToExclude) {
        var mh$ = JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseLayerInterfaceMask_ConfigureLayer", bpInterface, broadPhaseLayer, groupsToInclude, groupsToExclude);
            }
            mh$.invokeExact(bpInterface, broadPhaseLayer, groupsToInclude, groupsToExclude);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseLayerInterfaceTable_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseLayerInterfaceTable_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerInterface *JPH_BroadPhaseLayerInterfaceTable_Create(uint32_t numObjectLayers, uint32_t numBroadPhaseLayers)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseLayerInterfaceTable_Create$descriptor() {
        return JPH_BroadPhaseLayerInterfaceTable_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerInterface *JPH_BroadPhaseLayerInterfaceTable_Create(uint32_t numObjectLayers, uint32_t numBroadPhaseLayers)
     * }
     */
    public static MethodHandle JPH_BroadPhaseLayerInterfaceTable_Create$handle() {
        return JPH_BroadPhaseLayerInterfaceTable_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerInterface *JPH_BroadPhaseLayerInterfaceTable_Create(uint32_t numObjectLayers, uint32_t numBroadPhaseLayers)
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerInterfaceTable_Create$address() {
        return JPH_BroadPhaseLayerInterfaceTable_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerInterface *JPH_BroadPhaseLayerInterfaceTable_Create(uint32_t numObjectLayers, uint32_t numBroadPhaseLayers)
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerInterfaceTable_Create(int numObjectLayers, int numBroadPhaseLayers) {
        var mh$ = JPH_BroadPhaseLayerInterfaceTable_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseLayerInterfaceTable_Create", numObjectLayers, numBroadPhaseLayers);
            }
            return (MemorySegment)mh$.invokeExact(numObjectLayers, numBroadPhaseLayers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_SHORT,
            jolt_cs.C_CHAR
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer(JPH_BroadPhaseLayerInterface *bpInterface, JPH_ObjectLayer objectLayer, JPH_BroadPhaseLayer broadPhaseLayer)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer$descriptor() {
        return JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer(JPH_BroadPhaseLayerInterface *bpInterface, JPH_ObjectLayer objectLayer, JPH_BroadPhaseLayer broadPhaseLayer)
     * }
     */
    public static MethodHandle JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer$handle() {
        return JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer(JPH_BroadPhaseLayerInterface *bpInterface, JPH_ObjectLayer objectLayer, JPH_BroadPhaseLayer broadPhaseLayer)
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer$address() {
        return JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer(JPH_BroadPhaseLayerInterface *bpInterface, JPH_ObjectLayer objectLayer, JPH_BroadPhaseLayer broadPhaseLayer)
     * }
     */
    public static void JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer(MemorySegment bpInterface, short objectLayer, byte broadPhaseLayer) {
        var mh$ = JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseLayerInterfaceTable_MapObjectToBroadPhaseLayer", bpInterface, objectLayer, broadPhaseLayer);
            }
            mh$.invokeExact(bpInterface, objectLayer, broadPhaseLayer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerPairFilterMask_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerPairFilterMask_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayerPairFilter *JPH_ObjectLayerPairFilterMask_Create()
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerPairFilterMask_Create$descriptor() {
        return JPH_ObjectLayerPairFilterMask_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayerPairFilter *JPH_ObjectLayerPairFilterMask_Create()
     * }
     */
    public static MethodHandle JPH_ObjectLayerPairFilterMask_Create$handle() {
        return JPH_ObjectLayerPairFilterMask_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayerPairFilter *JPH_ObjectLayerPairFilterMask_Create()
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterMask_Create$address() {
        return JPH_ObjectLayerPairFilterMask_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ObjectLayerPairFilter *JPH_ObjectLayerPairFilterMask_Create()
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterMask_Create() {
        var mh$ = JPH_ObjectLayerPairFilterMask_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerPairFilterMask_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerPairFilterMask_GetObjectLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_SHORT,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerPairFilterMask_GetObjectLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayer JPH_ObjectLayerPairFilterMask_GetObjectLayer(uint32_t group, uint32_t mask)
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerPairFilterMask_GetObjectLayer$descriptor() {
        return JPH_ObjectLayerPairFilterMask_GetObjectLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayer JPH_ObjectLayerPairFilterMask_GetObjectLayer(uint32_t group, uint32_t mask)
     * }
     */
    public static MethodHandle JPH_ObjectLayerPairFilterMask_GetObjectLayer$handle() {
        return JPH_ObjectLayerPairFilterMask_GetObjectLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayer JPH_ObjectLayerPairFilterMask_GetObjectLayer(uint32_t group, uint32_t mask)
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterMask_GetObjectLayer$address() {
        return JPH_ObjectLayerPairFilterMask_GetObjectLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ObjectLayer JPH_ObjectLayerPairFilterMask_GetObjectLayer(uint32_t group, uint32_t mask)
     * }
     */
    public static short JPH_ObjectLayerPairFilterMask_GetObjectLayer(int group, int mask) {
        var mh$ = JPH_ObjectLayerPairFilterMask_GetObjectLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerPairFilterMask_GetObjectLayer", group, mask);
            }
            return (short)mh$.invokeExact(group, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerPairFilterMask_GetGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_SHORT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerPairFilterMask_GetGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ObjectLayerPairFilterMask_GetGroup(JPH_ObjectLayer layer)
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerPairFilterMask_GetGroup$descriptor() {
        return JPH_ObjectLayerPairFilterMask_GetGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ObjectLayerPairFilterMask_GetGroup(JPH_ObjectLayer layer)
     * }
     */
    public static MethodHandle JPH_ObjectLayerPairFilterMask_GetGroup$handle() {
        return JPH_ObjectLayerPairFilterMask_GetGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ObjectLayerPairFilterMask_GetGroup(JPH_ObjectLayer layer)
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterMask_GetGroup$address() {
        return JPH_ObjectLayerPairFilterMask_GetGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ObjectLayerPairFilterMask_GetGroup(JPH_ObjectLayer layer)
     * }
     */
    public static int JPH_ObjectLayerPairFilterMask_GetGroup(short layer) {
        var mh$ = JPH_ObjectLayerPairFilterMask_GetGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerPairFilterMask_GetGroup", layer);
            }
            return (int)mh$.invokeExact(layer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerPairFilterMask_GetMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_SHORT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerPairFilterMask_GetMask");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ObjectLayerPairFilterMask_GetMask(JPH_ObjectLayer layer)
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerPairFilterMask_GetMask$descriptor() {
        return JPH_ObjectLayerPairFilterMask_GetMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ObjectLayerPairFilterMask_GetMask(JPH_ObjectLayer layer)
     * }
     */
    public static MethodHandle JPH_ObjectLayerPairFilterMask_GetMask$handle() {
        return JPH_ObjectLayerPairFilterMask_GetMask.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ObjectLayerPairFilterMask_GetMask(JPH_ObjectLayer layer)
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterMask_GetMask$address() {
        return JPH_ObjectLayerPairFilterMask_GetMask.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ObjectLayerPairFilterMask_GetMask(JPH_ObjectLayer layer)
     * }
     */
    public static int JPH_ObjectLayerPairFilterMask_GetMask(short layer) {
        var mh$ = JPH_ObjectLayerPairFilterMask_GetMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerPairFilterMask_GetMask", layer);
            }
            return (int)mh$.invokeExact(layer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerPairFilterTable_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerPairFilterTable_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayerPairFilter *JPH_ObjectLayerPairFilterTable_Create(uint32_t numObjectLayers)
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerPairFilterTable_Create$descriptor() {
        return JPH_ObjectLayerPairFilterTable_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayerPairFilter *JPH_ObjectLayerPairFilterTable_Create(uint32_t numObjectLayers)
     * }
     */
    public static MethodHandle JPH_ObjectLayerPairFilterTable_Create$handle() {
        return JPH_ObjectLayerPairFilterTable_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayerPairFilter *JPH_ObjectLayerPairFilterTable_Create(uint32_t numObjectLayers)
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterTable_Create$address() {
        return JPH_ObjectLayerPairFilterTable_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ObjectLayerPairFilter *JPH_ObjectLayerPairFilterTable_Create(uint32_t numObjectLayers)
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterTable_Create(int numObjectLayers) {
        var mh$ = JPH_ObjectLayerPairFilterTable_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerPairFilterTable_Create", numObjectLayers);
            }
            return (MemorySegment)mh$.invokeExact(numObjectLayers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerPairFilterTable_DisableCollision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_SHORT,
            jolt_cs.C_SHORT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerPairFilterTable_DisableCollision");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerPairFilterTable_DisableCollision(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerPairFilterTable_DisableCollision$descriptor() {
        return JPH_ObjectLayerPairFilterTable_DisableCollision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerPairFilterTable_DisableCollision(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static MethodHandle JPH_ObjectLayerPairFilterTable_DisableCollision$handle() {
        return JPH_ObjectLayerPairFilterTable_DisableCollision.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerPairFilterTable_DisableCollision(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterTable_DisableCollision$address() {
        return JPH_ObjectLayerPairFilterTable_DisableCollision.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerPairFilterTable_DisableCollision(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static void JPH_ObjectLayerPairFilterTable_DisableCollision(MemorySegment objectFilter, short layer1, short layer2) {
        var mh$ = JPH_ObjectLayerPairFilterTable_DisableCollision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerPairFilterTable_DisableCollision", objectFilter, layer1, layer2);
            }
            mh$.invokeExact(objectFilter, layer1, layer2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerPairFilterTable_EnableCollision {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_SHORT,
            jolt_cs.C_SHORT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerPairFilterTable_EnableCollision");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerPairFilterTable_EnableCollision(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerPairFilterTable_EnableCollision$descriptor() {
        return JPH_ObjectLayerPairFilterTable_EnableCollision.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerPairFilterTable_EnableCollision(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static MethodHandle JPH_ObjectLayerPairFilterTable_EnableCollision$handle() {
        return JPH_ObjectLayerPairFilterTable_EnableCollision.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerPairFilterTable_EnableCollision(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterTable_EnableCollision$address() {
        return JPH_ObjectLayerPairFilterTable_EnableCollision.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerPairFilterTable_EnableCollision(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static void JPH_ObjectLayerPairFilterTable_EnableCollision(MemorySegment objectFilter, short layer1, short layer2) {
        var mh$ = JPH_ObjectLayerPairFilterTable_EnableCollision.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerPairFilterTable_EnableCollision", objectFilter, layer1, layer2);
            }
            mh$.invokeExact(objectFilter, layer1, layer2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerPairFilterTable_ShouldCollide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_SHORT,
            jolt_cs.C_SHORT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerPairFilterTable_ShouldCollide");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ObjectLayerPairFilterTable_ShouldCollide(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerPairFilterTable_ShouldCollide$descriptor() {
        return JPH_ObjectLayerPairFilterTable_ShouldCollide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ObjectLayerPairFilterTable_ShouldCollide(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static MethodHandle JPH_ObjectLayerPairFilterTable_ShouldCollide$handle() {
        return JPH_ObjectLayerPairFilterTable_ShouldCollide.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ObjectLayerPairFilterTable_ShouldCollide(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static MemorySegment JPH_ObjectLayerPairFilterTable_ShouldCollide$address() {
        return JPH_ObjectLayerPairFilterTable_ShouldCollide.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ObjectLayerPairFilterTable_ShouldCollide(JPH_ObjectLayerPairFilter *objectFilter, JPH_ObjectLayer layer1, JPH_ObjectLayer layer2)
     * }
     */
    public static int JPH_ObjectLayerPairFilterTable_ShouldCollide(MemorySegment objectFilter, short layer1, short layer2) {
        var mh$ = JPH_ObjectLayerPairFilterTable_ShouldCollide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerPairFilterTable_ShouldCollide", objectFilter, layer1, layer2);
            }
            return (int)mh$.invokeExact(objectFilter, layer1, layer2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectVsBroadPhaseLayerFilterMask_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectVsBroadPhaseLayerFilterMask_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ObjectVsBroadPhaseLayerFilter *JPH_ObjectVsBroadPhaseLayerFilterMask_Create(const JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface)
     * }
     */
    public static FunctionDescriptor JPH_ObjectVsBroadPhaseLayerFilterMask_Create$descriptor() {
        return JPH_ObjectVsBroadPhaseLayerFilterMask_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ObjectVsBroadPhaseLayerFilter *JPH_ObjectVsBroadPhaseLayerFilterMask_Create(const JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface)
     * }
     */
    public static MethodHandle JPH_ObjectVsBroadPhaseLayerFilterMask_Create$handle() {
        return JPH_ObjectVsBroadPhaseLayerFilterMask_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ObjectVsBroadPhaseLayerFilter *JPH_ObjectVsBroadPhaseLayerFilterMask_Create(const JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface)
     * }
     */
    public static MemorySegment JPH_ObjectVsBroadPhaseLayerFilterMask_Create$address() {
        return JPH_ObjectVsBroadPhaseLayerFilterMask_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ObjectVsBroadPhaseLayerFilter *JPH_ObjectVsBroadPhaseLayerFilterMask_Create(const JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface)
     * }
     */
    public static MemorySegment JPH_ObjectVsBroadPhaseLayerFilterMask_Create(MemorySegment broadPhaseLayerInterface) {
        var mh$ = JPH_ObjectVsBroadPhaseLayerFilterMask_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectVsBroadPhaseLayerFilterMask_Create", broadPhaseLayerInterface);
            }
            return (MemorySegment)mh$.invokeExact(broadPhaseLayerInterface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectVsBroadPhaseLayerFilterTable_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectVsBroadPhaseLayerFilterTable_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ObjectVsBroadPhaseLayerFilter *JPH_ObjectVsBroadPhaseLayerFilterTable_Create(JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface, uint32_t numBroadPhaseLayers, JPH_ObjectLayerPairFilter *objectLayerPairFilter, uint32_t numObjectLayers)
     * }
     */
    public static FunctionDescriptor JPH_ObjectVsBroadPhaseLayerFilterTable_Create$descriptor() {
        return JPH_ObjectVsBroadPhaseLayerFilterTable_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ObjectVsBroadPhaseLayerFilter *JPH_ObjectVsBroadPhaseLayerFilterTable_Create(JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface, uint32_t numBroadPhaseLayers, JPH_ObjectLayerPairFilter *objectLayerPairFilter, uint32_t numObjectLayers)
     * }
     */
    public static MethodHandle JPH_ObjectVsBroadPhaseLayerFilterTable_Create$handle() {
        return JPH_ObjectVsBroadPhaseLayerFilterTable_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ObjectVsBroadPhaseLayerFilter *JPH_ObjectVsBroadPhaseLayerFilterTable_Create(JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface, uint32_t numBroadPhaseLayers, JPH_ObjectLayerPairFilter *objectLayerPairFilter, uint32_t numObjectLayers)
     * }
     */
    public static MemorySegment JPH_ObjectVsBroadPhaseLayerFilterTable_Create$address() {
        return JPH_ObjectVsBroadPhaseLayerFilterTable_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ObjectVsBroadPhaseLayerFilter *JPH_ObjectVsBroadPhaseLayerFilterTable_Create(JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface, uint32_t numBroadPhaseLayers, JPH_ObjectLayerPairFilter *objectLayerPairFilter, uint32_t numObjectLayers)
     * }
     */
    public static MemorySegment JPH_ObjectVsBroadPhaseLayerFilterTable_Create(MemorySegment broadPhaseLayerInterface, int numBroadPhaseLayers, MemorySegment objectLayerPairFilter, int numObjectLayers) {
        var mh$ = JPH_ObjectVsBroadPhaseLayerFilterTable_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectVsBroadPhaseLayerFilterTable_Create", broadPhaseLayerInterface, numBroadPhaseLayers, objectLayerPairFilter, numObjectLayers);
            }
            return (MemorySegment)mh$.invokeExact(broadPhaseLayerInterface, numBroadPhaseLayers, objectLayerPairFilter, numObjectLayers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_PhysicsSystem *JPH_PhysicsSystem_Create(const JPH_PhysicsSystemSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_Create$descriptor() {
        return JPH_PhysicsSystem_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_PhysicsSystem *JPH_PhysicsSystem_Create(const JPH_PhysicsSystemSettings *settings)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_Create$handle() {
        return JPH_PhysicsSystem_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_PhysicsSystem *JPH_PhysicsSystem_Create(const JPH_PhysicsSystemSettings *settings)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_Create$address() {
        return JPH_PhysicsSystem_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_PhysicsSystem *JPH_PhysicsSystem_Create(const JPH_PhysicsSystemSettings *settings)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_Create(MemorySegment settings) {
        var mh$ = JPH_PhysicsSystem_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_Create", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_Destroy(JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_Destroy$descriptor() {
        return JPH_PhysicsSystem_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_Destroy(JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_Destroy$handle() {
        return JPH_PhysicsSystem_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_Destroy(JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_Destroy$address() {
        return JPH_PhysicsSystem_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_Destroy(JPH_PhysicsSystem *system)
     * }
     */
    public static void JPH_PhysicsSystem_Destroy(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_Destroy", system);
            }
            mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_SetPhysicsSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_SetPhysicsSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetPhysicsSettings(JPH_PhysicsSystem *system, JPH_PhysicsSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_SetPhysicsSettings$descriptor() {
        return JPH_PhysicsSystem_SetPhysicsSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetPhysicsSettings(JPH_PhysicsSystem *system, JPH_PhysicsSettings *settings)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_SetPhysicsSettings$handle() {
        return JPH_PhysicsSystem_SetPhysicsSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetPhysicsSettings(JPH_PhysicsSystem *system, JPH_PhysicsSettings *settings)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_SetPhysicsSettings$address() {
        return JPH_PhysicsSystem_SetPhysicsSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetPhysicsSettings(JPH_PhysicsSystem *system, JPH_PhysicsSettings *settings)
     * }
     */
    public static void JPH_PhysicsSystem_SetPhysicsSettings(MemorySegment system, MemorySegment settings) {
        var mh$ = JPH_PhysicsSystem_SetPhysicsSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_SetPhysicsSettings", system, settings);
            }
            mh$.invokeExact(system, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetPhysicsSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetPhysicsSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetPhysicsSettings(JPH_PhysicsSystem *system, JPH_PhysicsSettings *result)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetPhysicsSettings$descriptor() {
        return JPH_PhysicsSystem_GetPhysicsSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetPhysicsSettings(JPH_PhysicsSystem *system, JPH_PhysicsSettings *result)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetPhysicsSettings$handle() {
        return JPH_PhysicsSystem_GetPhysicsSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetPhysicsSettings(JPH_PhysicsSystem *system, JPH_PhysicsSettings *result)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetPhysicsSettings$address() {
        return JPH_PhysicsSystem_GetPhysicsSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetPhysicsSettings(JPH_PhysicsSystem *system, JPH_PhysicsSettings *result)
     * }
     */
    public static void JPH_PhysicsSystem_GetPhysicsSettings(MemorySegment system, MemorySegment result) {
        var mh$ = JPH_PhysicsSystem_GetPhysicsSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetPhysicsSettings", system, result);
            }
            mh$.invokeExact(system, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_OptimizeBroadPhase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_OptimizeBroadPhase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_OptimizeBroadPhase(JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_OptimizeBroadPhase$descriptor() {
        return JPH_PhysicsSystem_OptimizeBroadPhase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_OptimizeBroadPhase(JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_OptimizeBroadPhase$handle() {
        return JPH_PhysicsSystem_OptimizeBroadPhase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_OptimizeBroadPhase(JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_OptimizeBroadPhase$address() {
        return JPH_PhysicsSystem_OptimizeBroadPhase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_OptimizeBroadPhase(JPH_PhysicsSystem *system)
     * }
     */
    public static void JPH_PhysicsSystem_OptimizeBroadPhase(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_OptimizeBroadPhase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_OptimizeBroadPhase", system);
            }
            mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_Step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_Step");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_PhysicsUpdateError JPH_PhysicsSystem_Step(JPH_PhysicsSystem *system, float deltaTime, int collisionSteps)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_Step$descriptor() {
        return JPH_PhysicsSystem_Step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_PhysicsUpdateError JPH_PhysicsSystem_Step(JPH_PhysicsSystem *system, float deltaTime, int collisionSteps)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_Step$handle() {
        return JPH_PhysicsSystem_Step.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_PhysicsUpdateError JPH_PhysicsSystem_Step(JPH_PhysicsSystem *system, float deltaTime, int collisionSteps)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_Step$address() {
        return JPH_PhysicsSystem_Step.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_PhysicsUpdateError JPH_PhysicsSystem_Step(JPH_PhysicsSystem *system, float deltaTime, int collisionSteps)
     * }
     */
    public static int JPH_PhysicsSystem_Step(MemorySegment system, float deltaTime, int collisionSteps) {
        var mh$ = JPH_PhysicsSystem_Step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_Step", system, deltaTime, collisionSteps);
            }
            return (int)mh$.invokeExact(system, deltaTime, collisionSteps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetBodyInterface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetBodyInterface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyInterface *JPH_PhysicsSystem_GetBodyInterface(JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetBodyInterface$descriptor() {
        return JPH_PhysicsSystem_GetBodyInterface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyInterface *JPH_PhysicsSystem_GetBodyInterface(JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetBodyInterface$handle() {
        return JPH_PhysicsSystem_GetBodyInterface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyInterface *JPH_PhysicsSystem_GetBodyInterface(JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBodyInterface$address() {
        return JPH_PhysicsSystem_GetBodyInterface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyInterface *JPH_PhysicsSystem_GetBodyInterface(JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBodyInterface(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetBodyInterface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetBodyInterface", system);
            }
            return (MemorySegment)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetBodyInterfaceNoLock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetBodyInterfaceNoLock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyInterface *JPH_PhysicsSystem_GetBodyInterfaceNoLock(JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetBodyInterfaceNoLock$descriptor() {
        return JPH_PhysicsSystem_GetBodyInterfaceNoLock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyInterface *JPH_PhysicsSystem_GetBodyInterfaceNoLock(JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetBodyInterfaceNoLock$handle() {
        return JPH_PhysicsSystem_GetBodyInterfaceNoLock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyInterface *JPH_PhysicsSystem_GetBodyInterfaceNoLock(JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBodyInterfaceNoLock$address() {
        return JPH_PhysicsSystem_GetBodyInterfaceNoLock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyInterface *JPH_PhysicsSystem_GetBodyInterfaceNoLock(JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBodyInterfaceNoLock(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetBodyInterfaceNoLock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetBodyInterfaceNoLock", system);
            }
            return (MemorySegment)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetBodyLockInterface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetBodyLockInterface");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_BodyLockInterface *JPH_PhysicsSystem_GetBodyLockInterface(const JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetBodyLockInterface$descriptor() {
        return JPH_PhysicsSystem_GetBodyLockInterface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_BodyLockInterface *JPH_PhysicsSystem_GetBodyLockInterface(const JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetBodyLockInterface$handle() {
        return JPH_PhysicsSystem_GetBodyLockInterface.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_BodyLockInterface *JPH_PhysicsSystem_GetBodyLockInterface(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBodyLockInterface$address() {
        return JPH_PhysicsSystem_GetBodyLockInterface.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_BodyLockInterface *JPH_PhysicsSystem_GetBodyLockInterface(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBodyLockInterface(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetBodyLockInterface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetBodyLockInterface", system);
            }
            return (MemorySegment)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetBodyLockInterfaceNoLock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetBodyLockInterfaceNoLock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_BodyLockInterface *JPH_PhysicsSystem_GetBodyLockInterfaceNoLock(const JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetBodyLockInterfaceNoLock$descriptor() {
        return JPH_PhysicsSystem_GetBodyLockInterfaceNoLock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_BodyLockInterface *JPH_PhysicsSystem_GetBodyLockInterfaceNoLock(const JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetBodyLockInterfaceNoLock$handle() {
        return JPH_PhysicsSystem_GetBodyLockInterfaceNoLock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_BodyLockInterface *JPH_PhysicsSystem_GetBodyLockInterfaceNoLock(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBodyLockInterfaceNoLock$address() {
        return JPH_PhysicsSystem_GetBodyLockInterfaceNoLock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_BodyLockInterface *JPH_PhysicsSystem_GetBodyLockInterfaceNoLock(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBodyLockInterfaceNoLock(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetBodyLockInterfaceNoLock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetBodyLockInterfaceNoLock", system);
            }
            return (MemorySegment)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetBroadPhaseQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetBroadPhaseQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_BroadPhaseQuery *JPH_PhysicsSystem_GetBroadPhaseQuery(const JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetBroadPhaseQuery$descriptor() {
        return JPH_PhysicsSystem_GetBroadPhaseQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_BroadPhaseQuery *JPH_PhysicsSystem_GetBroadPhaseQuery(const JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetBroadPhaseQuery$handle() {
        return JPH_PhysicsSystem_GetBroadPhaseQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_BroadPhaseQuery *JPH_PhysicsSystem_GetBroadPhaseQuery(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBroadPhaseQuery$address() {
        return JPH_PhysicsSystem_GetBroadPhaseQuery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_BroadPhaseQuery *JPH_PhysicsSystem_GetBroadPhaseQuery(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBroadPhaseQuery(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetBroadPhaseQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetBroadPhaseQuery", system);
            }
            return (MemorySegment)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetNarrowPhaseQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetNarrowPhaseQuery");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_NarrowPhaseQuery *JPH_PhysicsSystem_GetNarrowPhaseQuery(const JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetNarrowPhaseQuery$descriptor() {
        return JPH_PhysicsSystem_GetNarrowPhaseQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_NarrowPhaseQuery *JPH_PhysicsSystem_GetNarrowPhaseQuery(const JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetNarrowPhaseQuery$handle() {
        return JPH_PhysicsSystem_GetNarrowPhaseQuery.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_NarrowPhaseQuery *JPH_PhysicsSystem_GetNarrowPhaseQuery(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetNarrowPhaseQuery$address() {
        return JPH_PhysicsSystem_GetNarrowPhaseQuery.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_NarrowPhaseQuery *JPH_PhysicsSystem_GetNarrowPhaseQuery(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetNarrowPhaseQuery(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetNarrowPhaseQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetNarrowPhaseQuery", system);
            }
            return (MemorySegment)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_NarrowPhaseQuery *JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock(const JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock$descriptor() {
        return JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_NarrowPhaseQuery *JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock(const JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock$handle() {
        return JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_NarrowPhaseQuery *JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock$address() {
        return JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_NarrowPhaseQuery *JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetNarrowPhaseQueryNoLock", system);
            }
            return (MemorySegment)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_SetContactListener {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_SetContactListener");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetContactListener(JPH_PhysicsSystem *system, JPH_ContactListener *listener)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_SetContactListener$descriptor() {
        return JPH_PhysicsSystem_SetContactListener.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetContactListener(JPH_PhysicsSystem *system, JPH_ContactListener *listener)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_SetContactListener$handle() {
        return JPH_PhysicsSystem_SetContactListener.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetContactListener(JPH_PhysicsSystem *system, JPH_ContactListener *listener)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_SetContactListener$address() {
        return JPH_PhysicsSystem_SetContactListener.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetContactListener(JPH_PhysicsSystem *system, JPH_ContactListener *listener)
     * }
     */
    public static void JPH_PhysicsSystem_SetContactListener(MemorySegment system, MemorySegment listener) {
        var mh$ = JPH_PhysicsSystem_SetContactListener.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_SetContactListener", system, listener);
            }
            mh$.invokeExact(system, listener);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_SetBodyActivationListener {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_SetBodyActivationListener");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetBodyActivationListener(JPH_PhysicsSystem *system, JPH_BodyActivationListener *listener)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_SetBodyActivationListener$descriptor() {
        return JPH_PhysicsSystem_SetBodyActivationListener.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetBodyActivationListener(JPH_PhysicsSystem *system, JPH_BodyActivationListener *listener)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_SetBodyActivationListener$handle() {
        return JPH_PhysicsSystem_SetBodyActivationListener.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetBodyActivationListener(JPH_PhysicsSystem *system, JPH_BodyActivationListener *listener)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_SetBodyActivationListener$address() {
        return JPH_PhysicsSystem_SetBodyActivationListener.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetBodyActivationListener(JPH_PhysicsSystem *system, JPH_BodyActivationListener *listener)
     * }
     */
    public static void JPH_PhysicsSystem_SetBodyActivationListener(MemorySegment system, MemorySegment listener) {
        var mh$ = JPH_PhysicsSystem_SetBodyActivationListener.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_SetBodyActivationListener", system, listener);
            }
            mh$.invokeExact(system, listener);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_WereBodiesInContact {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_WereBodiesInContact");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_PhysicsSystem_WereBodiesInContact(const JPH_PhysicsSystem *system, JPH_BodyID body1, JPH_BodyID body2)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_WereBodiesInContact$descriptor() {
        return JPH_PhysicsSystem_WereBodiesInContact.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_PhysicsSystem_WereBodiesInContact(const JPH_PhysicsSystem *system, JPH_BodyID body1, JPH_BodyID body2)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_WereBodiesInContact$handle() {
        return JPH_PhysicsSystem_WereBodiesInContact.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_PhysicsSystem_WereBodiesInContact(const JPH_PhysicsSystem *system, JPH_BodyID body1, JPH_BodyID body2)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_WereBodiesInContact$address() {
        return JPH_PhysicsSystem_WereBodiesInContact.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_PhysicsSystem_WereBodiesInContact(const JPH_PhysicsSystem *system, JPH_BodyID body1, JPH_BodyID body2)
     * }
     */
    public static int JPH_PhysicsSystem_WereBodiesInContact(MemorySegment system, int body1, int body2) {
        var mh$ = JPH_PhysicsSystem_WereBodiesInContact.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_WereBodiesInContact", system, body1, body2);
            }
            return (int)mh$.invokeExact(system, body1, body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetNumBodies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetNumBodies");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumBodies(const JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetNumBodies$descriptor() {
        return JPH_PhysicsSystem_GetNumBodies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumBodies(const JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetNumBodies$handle() {
        return JPH_PhysicsSystem_GetNumBodies.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumBodies(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetNumBodies$address() {
        return JPH_PhysicsSystem_GetNumBodies.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumBodies(const JPH_PhysicsSystem *system)
     * }
     */
    public static int JPH_PhysicsSystem_GetNumBodies(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetNumBodies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetNumBodies", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetNumActiveBodies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetNumActiveBodies");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumActiveBodies(const JPH_PhysicsSystem *system, JPH_BodyType type)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetNumActiveBodies$descriptor() {
        return JPH_PhysicsSystem_GetNumActiveBodies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumActiveBodies(const JPH_PhysicsSystem *system, JPH_BodyType type)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetNumActiveBodies$handle() {
        return JPH_PhysicsSystem_GetNumActiveBodies.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumActiveBodies(const JPH_PhysicsSystem *system, JPH_BodyType type)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetNumActiveBodies$address() {
        return JPH_PhysicsSystem_GetNumActiveBodies.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumActiveBodies(const JPH_PhysicsSystem *system, JPH_BodyType type)
     * }
     */
    public static int JPH_PhysicsSystem_GetNumActiveBodies(MemorySegment system, int type) {
        var mh$ = JPH_PhysicsSystem_GetNumActiveBodies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetNumActiveBodies", system, type);
            }
            return (int)mh$.invokeExact(system, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetMaxBodies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetMaxBodies");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetMaxBodies(const JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetMaxBodies$descriptor() {
        return JPH_PhysicsSystem_GetMaxBodies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetMaxBodies(const JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetMaxBodies$handle() {
        return JPH_PhysicsSystem_GetMaxBodies.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetMaxBodies(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetMaxBodies$address() {
        return JPH_PhysicsSystem_GetMaxBodies.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetMaxBodies(const JPH_PhysicsSystem *system)
     * }
     */
    public static int JPH_PhysicsSystem_GetMaxBodies(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetMaxBodies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetMaxBodies", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetNumConstraints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetNumConstraints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumConstraints(const JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetNumConstraints$descriptor() {
        return JPH_PhysicsSystem_GetNumConstraints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumConstraints(const JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetNumConstraints$handle() {
        return JPH_PhysicsSystem_GetNumConstraints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumConstraints(const JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetNumConstraints$address() {
        return JPH_PhysicsSystem_GetNumConstraints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_PhysicsSystem_GetNumConstraints(const JPH_PhysicsSystem *system)
     * }
     */
    public static int JPH_PhysicsSystem_GetNumConstraints(MemorySegment system) {
        var mh$ = JPH_PhysicsSystem_GetNumConstraints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetNumConstraints", system);
            }
            return (int)mh$.invokeExact(system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_SetGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_SetGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetGravity(JPH_PhysicsSystem *system, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_SetGravity$descriptor() {
        return JPH_PhysicsSystem_SetGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetGravity(JPH_PhysicsSystem *system, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_SetGravity$handle() {
        return JPH_PhysicsSystem_SetGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetGravity(JPH_PhysicsSystem *system, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_SetGravity$address() {
        return JPH_PhysicsSystem_SetGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_SetGravity(JPH_PhysicsSystem *system, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_PhysicsSystem_SetGravity(MemorySegment system, MemorySegment value) {
        var mh$ = JPH_PhysicsSystem_SetGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_SetGravity", system, value);
            }
            mh$.invokeExact(system, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetGravity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetGravity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetGravity(JPH_PhysicsSystem *system, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetGravity$descriptor() {
        return JPH_PhysicsSystem_GetGravity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetGravity(JPH_PhysicsSystem *system, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetGravity$handle() {
        return JPH_PhysicsSystem_GetGravity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetGravity(JPH_PhysicsSystem *system, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetGravity$address() {
        return JPH_PhysicsSystem_GetGravity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetGravity(JPH_PhysicsSystem *system, JPH_Vec3 *result)
     * }
     */
    public static void JPH_PhysicsSystem_GetGravity(MemorySegment system, MemorySegment result) {
        var mh$ = JPH_PhysicsSystem_GetGravity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetGravity", system, result);
            }
            mh$.invokeExact(system, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_AddConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_AddConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_AddConstraint(JPH_PhysicsSystem *system, JPH_Constraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_AddConstraint$descriptor() {
        return JPH_PhysicsSystem_AddConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_AddConstraint(JPH_PhysicsSystem *system, JPH_Constraint *constraint)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_AddConstraint$handle() {
        return JPH_PhysicsSystem_AddConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_AddConstraint(JPH_PhysicsSystem *system, JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_AddConstraint$address() {
        return JPH_PhysicsSystem_AddConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_AddConstraint(JPH_PhysicsSystem *system, JPH_Constraint *constraint)
     * }
     */
    public static void JPH_PhysicsSystem_AddConstraint(MemorySegment system, MemorySegment constraint) {
        var mh$ = JPH_PhysicsSystem_AddConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_AddConstraint", system, constraint);
            }
            mh$.invokeExact(system, constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_RemoveConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_RemoveConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_RemoveConstraint(JPH_PhysicsSystem *system, JPH_Constraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_RemoveConstraint$descriptor() {
        return JPH_PhysicsSystem_RemoveConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_RemoveConstraint(JPH_PhysicsSystem *system, JPH_Constraint *constraint)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_RemoveConstraint$handle() {
        return JPH_PhysicsSystem_RemoveConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_RemoveConstraint(JPH_PhysicsSystem *system, JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_RemoveConstraint$address() {
        return JPH_PhysicsSystem_RemoveConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_RemoveConstraint(JPH_PhysicsSystem *system, JPH_Constraint *constraint)
     * }
     */
    public static void JPH_PhysicsSystem_RemoveConstraint(MemorySegment system, MemorySegment constraint) {
        var mh$ = JPH_PhysicsSystem_RemoveConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_RemoveConstraint", system, constraint);
            }
            mh$.invokeExact(system, constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_AddConstraints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_AddConstraints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_AddConstraints(JPH_PhysicsSystem *system, JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_AddConstraints$descriptor() {
        return JPH_PhysicsSystem_AddConstraints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_AddConstraints(JPH_PhysicsSystem *system, JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_AddConstraints$handle() {
        return JPH_PhysicsSystem_AddConstraints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_AddConstraints(JPH_PhysicsSystem *system, JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_AddConstraints$address() {
        return JPH_PhysicsSystem_AddConstraints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_AddConstraints(JPH_PhysicsSystem *system, JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static void JPH_PhysicsSystem_AddConstraints(MemorySegment system, MemorySegment constraints, int count) {
        var mh$ = JPH_PhysicsSystem_AddConstraints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_AddConstraints", system, constraints, count);
            }
            mh$.invokeExact(system, constraints, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_RemoveConstraints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_RemoveConstraints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_RemoveConstraints(JPH_PhysicsSystem *system, JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_RemoveConstraints$descriptor() {
        return JPH_PhysicsSystem_RemoveConstraints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_RemoveConstraints(JPH_PhysicsSystem *system, JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_RemoveConstraints$handle() {
        return JPH_PhysicsSystem_RemoveConstraints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_RemoveConstraints(JPH_PhysicsSystem *system, JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_RemoveConstraints$address() {
        return JPH_PhysicsSystem_RemoveConstraints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_RemoveConstraints(JPH_PhysicsSystem *system, JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static void JPH_PhysicsSystem_RemoveConstraints(MemorySegment system, MemorySegment constraints, int count) {
        var mh$ = JPH_PhysicsSystem_RemoveConstraints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_RemoveConstraints", system, constraints, count);
            }
            mh$.invokeExact(system, constraints, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetBodies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetBodies");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetBodies(const JPH_PhysicsSystem *system, JPH_BodyID *ids, uint32_t count)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetBodies$descriptor() {
        return JPH_PhysicsSystem_GetBodies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetBodies(const JPH_PhysicsSystem *system, JPH_BodyID *ids, uint32_t count)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetBodies$handle() {
        return JPH_PhysicsSystem_GetBodies.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetBodies(const JPH_PhysicsSystem *system, JPH_BodyID *ids, uint32_t count)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetBodies$address() {
        return JPH_PhysicsSystem_GetBodies.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetBodies(const JPH_PhysicsSystem *system, JPH_BodyID *ids, uint32_t count)
     * }
     */
    public static void JPH_PhysicsSystem_GetBodies(MemorySegment system, MemorySegment ids, int count) {
        var mh$ = JPH_PhysicsSystem_GetBodies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetBodies", system, ids, count);
            }
            mh$.invokeExact(system, ids, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PhysicsSystem_GetConstraints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PhysicsSystem_GetConstraints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetConstraints(const JPH_PhysicsSystem *system, const JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static FunctionDescriptor JPH_PhysicsSystem_GetConstraints$descriptor() {
        return JPH_PhysicsSystem_GetConstraints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetConstraints(const JPH_PhysicsSystem *system, const JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static MethodHandle JPH_PhysicsSystem_GetConstraints$handle() {
        return JPH_PhysicsSystem_GetConstraints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetConstraints(const JPH_PhysicsSystem *system, const JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static MemorySegment JPH_PhysicsSystem_GetConstraints$address() {
        return JPH_PhysicsSystem_GetConstraints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PhysicsSystem_GetConstraints(const JPH_PhysicsSystem *system, const JPH_Constraint **constraints, uint32_t count)
     * }
     */
    public static void JPH_PhysicsSystem_GetConstraints(MemorySegment system, MemorySegment constraints, int count) {
        var mh$ = JPH_PhysicsSystem_GetConstraints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PhysicsSystem_GetConstraints", system, constraints, count);
            }
            mh$.invokeExact(system, constraints, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Quaternion_FromTo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Quaternion_FromTo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Quaternion_FromTo(const JPH_Vec3 *from, const JPH_Vec3 *to, JPH_Quat *quat)
     * }
     */
    public static FunctionDescriptor JPH_Quaternion_FromTo$descriptor() {
        return JPH_Quaternion_FromTo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Quaternion_FromTo(const JPH_Vec3 *from, const JPH_Vec3 *to, JPH_Quat *quat)
     * }
     */
    public static MethodHandle JPH_Quaternion_FromTo$handle() {
        return JPH_Quaternion_FromTo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Quaternion_FromTo(const JPH_Vec3 *from, const JPH_Vec3 *to, JPH_Quat *quat)
     * }
     */
    public static MemorySegment JPH_Quaternion_FromTo$address() {
        return JPH_Quaternion_FromTo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Quaternion_FromTo(const JPH_Vec3 *from, const JPH_Vec3 *to, JPH_Quat *quat)
     * }
     */
    public static void JPH_Quaternion_FromTo(MemorySegment from, MemorySegment to, MemorySegment quat) {
        var mh$ = JPH_Quaternion_FromTo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Quaternion_FromTo", from, to, quat);
            }
            mh$.invokeExact(from, to, quat);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ShapeSettings_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ShapeSettings_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ShapeSettings_Destroy(JPH_ShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ShapeSettings_Destroy$descriptor() {
        return JPH_ShapeSettings_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ShapeSettings_Destroy(JPH_ShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_ShapeSettings_Destroy$handle() {
        return JPH_ShapeSettings_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ShapeSettings_Destroy(JPH_ShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_ShapeSettings_Destroy$address() {
        return JPH_ShapeSettings_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ShapeSettings_Destroy(JPH_ShapeSettings *settings)
     * }
     */
    public static void JPH_ShapeSettings_Destroy(MemorySegment settings) {
        var mh$ = JPH_ShapeSettings_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ShapeSettings_Destroy", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexShapeSettings_GetDensity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexShapeSettings_GetDensity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ConvexShapeSettings_GetDensity(const JPH_ConvexShapeSettings *shape)
     * }
     */
    public static FunctionDescriptor JPH_ConvexShapeSettings_GetDensity$descriptor() {
        return JPH_ConvexShapeSettings_GetDensity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ConvexShapeSettings_GetDensity(const JPH_ConvexShapeSettings *shape)
     * }
     */
    public static MethodHandle JPH_ConvexShapeSettings_GetDensity$handle() {
        return JPH_ConvexShapeSettings_GetDensity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ConvexShapeSettings_GetDensity(const JPH_ConvexShapeSettings *shape)
     * }
     */
    public static MemorySegment JPH_ConvexShapeSettings_GetDensity$address() {
        return JPH_ConvexShapeSettings_GetDensity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ConvexShapeSettings_GetDensity(const JPH_ConvexShapeSettings *shape)
     * }
     */
    public static float JPH_ConvexShapeSettings_GetDensity(MemorySegment shape) {
        var mh$ = JPH_ConvexShapeSettings_GetDensity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexShapeSettings_GetDensity", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexShapeSettings_SetDensity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexShapeSettings_SetDensity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConvexShapeSettings_SetDensity(JPH_ConvexShapeSettings *shape, float value)
     * }
     */
    public static FunctionDescriptor JPH_ConvexShapeSettings_SetDensity$descriptor() {
        return JPH_ConvexShapeSettings_SetDensity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConvexShapeSettings_SetDensity(JPH_ConvexShapeSettings *shape, float value)
     * }
     */
    public static MethodHandle JPH_ConvexShapeSettings_SetDensity$handle() {
        return JPH_ConvexShapeSettings_SetDensity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConvexShapeSettings_SetDensity(JPH_ConvexShapeSettings *shape, float value)
     * }
     */
    public static MemorySegment JPH_ConvexShapeSettings_SetDensity$address() {
        return JPH_ConvexShapeSettings_SetDensity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConvexShapeSettings_SetDensity(JPH_ConvexShapeSettings *shape, float value)
     * }
     */
    public static void JPH_ConvexShapeSettings_SetDensity(MemorySegment shape, float value) {
        var mh$ = JPH_ConvexShapeSettings_SetDensity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexShapeSettings_SetDensity", shape, value);
            }
            mh$.invokeExact(shape, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexShape_GetDensity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexShape_GetDensity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ConvexShape_GetDensity(const JPH_ConvexShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_ConvexShape_GetDensity$descriptor() {
        return JPH_ConvexShape_GetDensity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ConvexShape_GetDensity(const JPH_ConvexShape *shape)
     * }
     */
    public static MethodHandle JPH_ConvexShape_GetDensity$handle() {
        return JPH_ConvexShape_GetDensity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ConvexShape_GetDensity(const JPH_ConvexShape *shape)
     * }
     */
    public static MemorySegment JPH_ConvexShape_GetDensity$address() {
        return JPH_ConvexShape_GetDensity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ConvexShape_GetDensity(const JPH_ConvexShape *shape)
     * }
     */
    public static float JPH_ConvexShape_GetDensity(MemorySegment shape) {
        var mh$ = JPH_ConvexShape_GetDensity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexShape_GetDensity", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexShape_SetDensity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexShape_SetDensity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConvexShape_SetDensity(JPH_ConvexShape *shape, float inDensity)
     * }
     */
    public static FunctionDescriptor JPH_ConvexShape_SetDensity$descriptor() {
        return JPH_ConvexShape_SetDensity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConvexShape_SetDensity(JPH_ConvexShape *shape, float inDensity)
     * }
     */
    public static MethodHandle JPH_ConvexShape_SetDensity$handle() {
        return JPH_ConvexShape_SetDensity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConvexShape_SetDensity(JPH_ConvexShape *shape, float inDensity)
     * }
     */
    public static MemorySegment JPH_ConvexShape_SetDensity$address() {
        return JPH_ConvexShape_SetDensity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConvexShape_SetDensity(JPH_ConvexShape *shape, float inDensity)
     * }
     */
    public static void JPH_ConvexShape_SetDensity(MemorySegment shape, float inDensity) {
        var mh$ = JPH_ConvexShape_SetDensity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexShape_SetDensity", shape, inDensity);
            }
            mh$.invokeExact(shape, inDensity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BoxShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BoxShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BoxShapeSettings *JPH_BoxShapeSettings_Create(const JPH_Vec3 *halfExtent, float convexRadius)
     * }
     */
    public static FunctionDescriptor JPH_BoxShapeSettings_Create$descriptor() {
        return JPH_BoxShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BoxShapeSettings *JPH_BoxShapeSettings_Create(const JPH_Vec3 *halfExtent, float convexRadius)
     * }
     */
    public static MethodHandle JPH_BoxShapeSettings_Create$handle() {
        return JPH_BoxShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BoxShapeSettings *JPH_BoxShapeSettings_Create(const JPH_Vec3 *halfExtent, float convexRadius)
     * }
     */
    public static MemorySegment JPH_BoxShapeSettings_Create$address() {
        return JPH_BoxShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BoxShapeSettings *JPH_BoxShapeSettings_Create(const JPH_Vec3 *halfExtent, float convexRadius)
     * }
     */
    public static MemorySegment JPH_BoxShapeSettings_Create(MemorySegment halfExtent, float convexRadius) {
        var mh$ = JPH_BoxShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BoxShapeSettings_Create", halfExtent, convexRadius);
            }
            return (MemorySegment)mh$.invokeExact(halfExtent, convexRadius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BoxShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BoxShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BoxShape *JPH_BoxShapeSettings_CreateShape(const JPH_BoxShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BoxShapeSettings_CreateShape$descriptor() {
        return JPH_BoxShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BoxShape *JPH_BoxShapeSettings_CreateShape(const JPH_BoxShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_BoxShapeSettings_CreateShape$handle() {
        return JPH_BoxShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BoxShape *JPH_BoxShapeSettings_CreateShape(const JPH_BoxShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_BoxShapeSettings_CreateShape$address() {
        return JPH_BoxShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BoxShape *JPH_BoxShapeSettings_CreateShape(const JPH_BoxShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_BoxShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_BoxShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BoxShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BoxShape_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BoxShape_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BoxShape *JPH_BoxShape_Create(const JPH_Vec3 *halfExtent, float convexRadius)
     * }
     */
    public static FunctionDescriptor JPH_BoxShape_Create$descriptor() {
        return JPH_BoxShape_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BoxShape *JPH_BoxShape_Create(const JPH_Vec3 *halfExtent, float convexRadius)
     * }
     */
    public static MethodHandle JPH_BoxShape_Create$handle() {
        return JPH_BoxShape_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BoxShape *JPH_BoxShape_Create(const JPH_Vec3 *halfExtent, float convexRadius)
     * }
     */
    public static MemorySegment JPH_BoxShape_Create$address() {
        return JPH_BoxShape_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BoxShape *JPH_BoxShape_Create(const JPH_Vec3 *halfExtent, float convexRadius)
     * }
     */
    public static MemorySegment JPH_BoxShape_Create(MemorySegment halfExtent, float convexRadius) {
        var mh$ = JPH_BoxShape_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BoxShape_Create", halfExtent, convexRadius);
            }
            return (MemorySegment)mh$.invokeExact(halfExtent, convexRadius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BoxShape_GetHalfExtent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BoxShape_GetHalfExtent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BoxShape_GetHalfExtent(const JPH_BoxShape *shape, JPH_Vec3 *halfExtent)
     * }
     */
    public static FunctionDescriptor JPH_BoxShape_GetHalfExtent$descriptor() {
        return JPH_BoxShape_GetHalfExtent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BoxShape_GetHalfExtent(const JPH_BoxShape *shape, JPH_Vec3 *halfExtent)
     * }
     */
    public static MethodHandle JPH_BoxShape_GetHalfExtent$handle() {
        return JPH_BoxShape_GetHalfExtent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BoxShape_GetHalfExtent(const JPH_BoxShape *shape, JPH_Vec3 *halfExtent)
     * }
     */
    public static MemorySegment JPH_BoxShape_GetHalfExtent$address() {
        return JPH_BoxShape_GetHalfExtent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BoxShape_GetHalfExtent(const JPH_BoxShape *shape, JPH_Vec3 *halfExtent)
     * }
     */
    public static void JPH_BoxShape_GetHalfExtent(MemorySegment shape, MemorySegment halfExtent) {
        var mh$ = JPH_BoxShape_GetHalfExtent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BoxShape_GetHalfExtent", shape, halfExtent);
            }
            mh$.invokeExact(shape, halfExtent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BoxShape_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BoxShape_GetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_BoxShape_GetVolume(const JPH_BoxShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_BoxShape_GetVolume$descriptor() {
        return JPH_BoxShape_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_BoxShape_GetVolume(const JPH_BoxShape *shape)
     * }
     */
    public static MethodHandle JPH_BoxShape_GetVolume$handle() {
        return JPH_BoxShape_GetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_BoxShape_GetVolume(const JPH_BoxShape *shape)
     * }
     */
    public static MemorySegment JPH_BoxShape_GetVolume$address() {
        return JPH_BoxShape_GetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_BoxShape_GetVolume(const JPH_BoxShape *shape)
     * }
     */
    public static float JPH_BoxShape_GetVolume(MemorySegment shape) {
        var mh$ = JPH_BoxShape_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BoxShape_GetVolume", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BoxShape_GetConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BoxShape_GetConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_BoxShape_GetConvexRadius(const JPH_BoxShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_BoxShape_GetConvexRadius$descriptor() {
        return JPH_BoxShape_GetConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_BoxShape_GetConvexRadius(const JPH_BoxShape *shape)
     * }
     */
    public static MethodHandle JPH_BoxShape_GetConvexRadius$handle() {
        return JPH_BoxShape_GetConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_BoxShape_GetConvexRadius(const JPH_BoxShape *shape)
     * }
     */
    public static MemorySegment JPH_BoxShape_GetConvexRadius$address() {
        return JPH_BoxShape_GetConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_BoxShape_GetConvexRadius(const JPH_BoxShape *shape)
     * }
     */
    public static float JPH_BoxShape_GetConvexRadius(MemorySegment shape) {
        var mh$ = JPH_BoxShape_GetConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BoxShape_GetConvexRadius", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SphereShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SphereShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SphereShapeSettings *JPH_SphereShapeSettings_Create(float radius)
     * }
     */
    public static FunctionDescriptor JPH_SphereShapeSettings_Create$descriptor() {
        return JPH_SphereShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SphereShapeSettings *JPH_SphereShapeSettings_Create(float radius)
     * }
     */
    public static MethodHandle JPH_SphereShapeSettings_Create$handle() {
        return JPH_SphereShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SphereShapeSettings *JPH_SphereShapeSettings_Create(float radius)
     * }
     */
    public static MemorySegment JPH_SphereShapeSettings_Create$address() {
        return JPH_SphereShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SphereShapeSettings *JPH_SphereShapeSettings_Create(float radius)
     * }
     */
    public static MemorySegment JPH_SphereShapeSettings_Create(float radius) {
        var mh$ = JPH_SphereShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SphereShapeSettings_Create", radius);
            }
            return (MemorySegment)mh$.invokeExact(radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SphereShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SphereShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SphereShape *JPH_SphereShapeSettings_CreateShape(const JPH_SphereShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_SphereShapeSettings_CreateShape$descriptor() {
        return JPH_SphereShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SphereShape *JPH_SphereShapeSettings_CreateShape(const JPH_SphereShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_SphereShapeSettings_CreateShape$handle() {
        return JPH_SphereShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SphereShape *JPH_SphereShapeSettings_CreateShape(const JPH_SphereShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_SphereShapeSettings_CreateShape$address() {
        return JPH_SphereShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SphereShape *JPH_SphereShapeSettings_CreateShape(const JPH_SphereShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_SphereShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_SphereShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SphereShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SphereShapeSettings_GetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SphereShapeSettings_GetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SphereShapeSettings_GetRadius(const JPH_SphereShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_SphereShapeSettings_GetRadius$descriptor() {
        return JPH_SphereShapeSettings_GetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SphereShapeSettings_GetRadius(const JPH_SphereShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_SphereShapeSettings_GetRadius$handle() {
        return JPH_SphereShapeSettings_GetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SphereShapeSettings_GetRadius(const JPH_SphereShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_SphereShapeSettings_GetRadius$address() {
        return JPH_SphereShapeSettings_GetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SphereShapeSettings_GetRadius(const JPH_SphereShapeSettings *settings)
     * }
     */
    public static float JPH_SphereShapeSettings_GetRadius(MemorySegment settings) {
        var mh$ = JPH_SphereShapeSettings_GetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SphereShapeSettings_GetRadius", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SphereShapeSettings_SetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SphereShapeSettings_SetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SphereShapeSettings_SetRadius(JPH_SphereShapeSettings *settings, float radius)
     * }
     */
    public static FunctionDescriptor JPH_SphereShapeSettings_SetRadius$descriptor() {
        return JPH_SphereShapeSettings_SetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SphereShapeSettings_SetRadius(JPH_SphereShapeSettings *settings, float radius)
     * }
     */
    public static MethodHandle JPH_SphereShapeSettings_SetRadius$handle() {
        return JPH_SphereShapeSettings_SetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SphereShapeSettings_SetRadius(JPH_SphereShapeSettings *settings, float radius)
     * }
     */
    public static MemorySegment JPH_SphereShapeSettings_SetRadius$address() {
        return JPH_SphereShapeSettings_SetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SphereShapeSettings_SetRadius(JPH_SphereShapeSettings *settings, float radius)
     * }
     */
    public static void JPH_SphereShapeSettings_SetRadius(MemorySegment settings, float radius) {
        var mh$ = JPH_SphereShapeSettings_SetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SphereShapeSettings_SetRadius", settings, radius);
            }
            mh$.invokeExact(settings, radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SphereShape_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SphereShape_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SphereShape *JPH_SphereShape_Create(float radius)
     * }
     */
    public static FunctionDescriptor JPH_SphereShape_Create$descriptor() {
        return JPH_SphereShape_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SphereShape *JPH_SphereShape_Create(float radius)
     * }
     */
    public static MethodHandle JPH_SphereShape_Create$handle() {
        return JPH_SphereShape_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SphereShape *JPH_SphereShape_Create(float radius)
     * }
     */
    public static MemorySegment JPH_SphereShape_Create$address() {
        return JPH_SphereShape_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SphereShape *JPH_SphereShape_Create(float radius)
     * }
     */
    public static MemorySegment JPH_SphereShape_Create(float radius) {
        var mh$ = JPH_SphereShape_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SphereShape_Create", radius);
            }
            return (MemorySegment)mh$.invokeExact(radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SphereShape_GetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SphereShape_GetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SphereShape_GetRadius(const JPH_SphereShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_SphereShape_GetRadius$descriptor() {
        return JPH_SphereShape_GetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SphereShape_GetRadius(const JPH_SphereShape *shape)
     * }
     */
    public static MethodHandle JPH_SphereShape_GetRadius$handle() {
        return JPH_SphereShape_GetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SphereShape_GetRadius(const JPH_SphereShape *shape)
     * }
     */
    public static MemorySegment JPH_SphereShape_GetRadius$address() {
        return JPH_SphereShape_GetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SphereShape_GetRadius(const JPH_SphereShape *shape)
     * }
     */
    public static float JPH_SphereShape_GetRadius(MemorySegment shape) {
        var mh$ = JPH_SphereShape_GetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SphereShape_GetRadius", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TriangleShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TriangleShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_TriangleShapeSettings *JPH_TriangleShapeSettings_Create(const JPH_Vec3 *v1, const JPH_Vec3 *v2, const JPH_Vec3 *v3, float convexRadius)
     * }
     */
    public static FunctionDescriptor JPH_TriangleShapeSettings_Create$descriptor() {
        return JPH_TriangleShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_TriangleShapeSettings *JPH_TriangleShapeSettings_Create(const JPH_Vec3 *v1, const JPH_Vec3 *v2, const JPH_Vec3 *v3, float convexRadius)
     * }
     */
    public static MethodHandle JPH_TriangleShapeSettings_Create$handle() {
        return JPH_TriangleShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_TriangleShapeSettings *JPH_TriangleShapeSettings_Create(const JPH_Vec3 *v1, const JPH_Vec3 *v2, const JPH_Vec3 *v3, float convexRadius)
     * }
     */
    public static MemorySegment JPH_TriangleShapeSettings_Create$address() {
        return JPH_TriangleShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_TriangleShapeSettings *JPH_TriangleShapeSettings_Create(const JPH_Vec3 *v1, const JPH_Vec3 *v2, const JPH_Vec3 *v3, float convexRadius)
     * }
     */
    public static MemorySegment JPH_TriangleShapeSettings_Create(MemorySegment v1, MemorySegment v2, MemorySegment v3, float convexRadius) {
        var mh$ = JPH_TriangleShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TriangleShapeSettings_Create", v1, v2, v3, convexRadius);
            }
            return (MemorySegment)mh$.invokeExact(v1, v2, v3, convexRadius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TriangleShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TriangleShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_TriangleShape *JPH_TriangleShapeSettings_CreateShape(const JPH_TriangleShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_TriangleShapeSettings_CreateShape$descriptor() {
        return JPH_TriangleShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_TriangleShape *JPH_TriangleShapeSettings_CreateShape(const JPH_TriangleShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_TriangleShapeSettings_CreateShape$handle() {
        return JPH_TriangleShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_TriangleShape *JPH_TriangleShapeSettings_CreateShape(const JPH_TriangleShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_TriangleShapeSettings_CreateShape$address() {
        return JPH_TriangleShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_TriangleShape *JPH_TriangleShapeSettings_CreateShape(const JPH_TriangleShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_TriangleShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_TriangleShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TriangleShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TriangleShape_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TriangleShape_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_TriangleShape *JPH_TriangleShape_Create(const JPH_Vec3 *v1, const JPH_Vec3 *v2, const JPH_Vec3 *v3, float convexRadius)
     * }
     */
    public static FunctionDescriptor JPH_TriangleShape_Create$descriptor() {
        return JPH_TriangleShape_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_TriangleShape *JPH_TriangleShape_Create(const JPH_Vec3 *v1, const JPH_Vec3 *v2, const JPH_Vec3 *v3, float convexRadius)
     * }
     */
    public static MethodHandle JPH_TriangleShape_Create$handle() {
        return JPH_TriangleShape_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_TriangleShape *JPH_TriangleShape_Create(const JPH_Vec3 *v1, const JPH_Vec3 *v2, const JPH_Vec3 *v3, float convexRadius)
     * }
     */
    public static MemorySegment JPH_TriangleShape_Create$address() {
        return JPH_TriangleShape_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_TriangleShape *JPH_TriangleShape_Create(const JPH_Vec3 *v1, const JPH_Vec3 *v2, const JPH_Vec3 *v3, float convexRadius)
     * }
     */
    public static MemorySegment JPH_TriangleShape_Create(MemorySegment v1, MemorySegment v2, MemorySegment v3, float convexRadius) {
        var mh$ = JPH_TriangleShape_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TriangleShape_Create", v1, v2, v3, convexRadius);
            }
            return (MemorySegment)mh$.invokeExact(v1, v2, v3, convexRadius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TriangleShape_GetConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TriangleShape_GetConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_TriangleShape_GetConvexRadius(const JPH_TriangleShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_TriangleShape_GetConvexRadius$descriptor() {
        return JPH_TriangleShape_GetConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_TriangleShape_GetConvexRadius(const JPH_TriangleShape *shape)
     * }
     */
    public static MethodHandle JPH_TriangleShape_GetConvexRadius$handle() {
        return JPH_TriangleShape_GetConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_TriangleShape_GetConvexRadius(const JPH_TriangleShape *shape)
     * }
     */
    public static MemorySegment JPH_TriangleShape_GetConvexRadius$address() {
        return JPH_TriangleShape_GetConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_TriangleShape_GetConvexRadius(const JPH_TriangleShape *shape)
     * }
     */
    public static float JPH_TriangleShape_GetConvexRadius(MemorySegment shape) {
        var mh$ = JPH_TriangleShape_GetConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TriangleShape_GetConvexRadius", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CapsuleShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CapsuleShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_CapsuleShapeSettings *JPH_CapsuleShapeSettings_Create(float halfHeightOfCylinder, float radius)
     * }
     */
    public static FunctionDescriptor JPH_CapsuleShapeSettings_Create$descriptor() {
        return JPH_CapsuleShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_CapsuleShapeSettings *JPH_CapsuleShapeSettings_Create(float halfHeightOfCylinder, float radius)
     * }
     */
    public static MethodHandle JPH_CapsuleShapeSettings_Create$handle() {
        return JPH_CapsuleShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_CapsuleShapeSettings *JPH_CapsuleShapeSettings_Create(float halfHeightOfCylinder, float radius)
     * }
     */
    public static MemorySegment JPH_CapsuleShapeSettings_Create$address() {
        return JPH_CapsuleShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_CapsuleShapeSettings *JPH_CapsuleShapeSettings_Create(float halfHeightOfCylinder, float radius)
     * }
     */
    public static MemorySegment JPH_CapsuleShapeSettings_Create(float halfHeightOfCylinder, float radius) {
        var mh$ = JPH_CapsuleShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CapsuleShapeSettings_Create", halfHeightOfCylinder, radius);
            }
            return (MemorySegment)mh$.invokeExact(halfHeightOfCylinder, radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CapsuleShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CapsuleShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_CapsuleShape *JPH_CapsuleShapeSettings_CreateShape(const JPH_CapsuleShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CapsuleShapeSettings_CreateShape$descriptor() {
        return JPH_CapsuleShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_CapsuleShape *JPH_CapsuleShapeSettings_CreateShape(const JPH_CapsuleShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_CapsuleShapeSettings_CreateShape$handle() {
        return JPH_CapsuleShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_CapsuleShape *JPH_CapsuleShapeSettings_CreateShape(const JPH_CapsuleShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_CapsuleShapeSettings_CreateShape$address() {
        return JPH_CapsuleShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_CapsuleShape *JPH_CapsuleShapeSettings_CreateShape(const JPH_CapsuleShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_CapsuleShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_CapsuleShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CapsuleShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CapsuleShape_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CapsuleShape_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_CapsuleShape *JPH_CapsuleShape_Create(float halfHeightOfCylinder, float radius)
     * }
     */
    public static FunctionDescriptor JPH_CapsuleShape_Create$descriptor() {
        return JPH_CapsuleShape_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_CapsuleShape *JPH_CapsuleShape_Create(float halfHeightOfCylinder, float radius)
     * }
     */
    public static MethodHandle JPH_CapsuleShape_Create$handle() {
        return JPH_CapsuleShape_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_CapsuleShape *JPH_CapsuleShape_Create(float halfHeightOfCylinder, float radius)
     * }
     */
    public static MemorySegment JPH_CapsuleShape_Create$address() {
        return JPH_CapsuleShape_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_CapsuleShape *JPH_CapsuleShape_Create(float halfHeightOfCylinder, float radius)
     * }
     */
    public static MemorySegment JPH_CapsuleShape_Create(float halfHeightOfCylinder, float radius) {
        var mh$ = JPH_CapsuleShape_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CapsuleShape_Create", halfHeightOfCylinder, radius);
            }
            return (MemorySegment)mh$.invokeExact(halfHeightOfCylinder, radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CapsuleShape_GetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CapsuleShape_GetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CapsuleShape_GetRadius(const JPH_CapsuleShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_CapsuleShape_GetRadius$descriptor() {
        return JPH_CapsuleShape_GetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CapsuleShape_GetRadius(const JPH_CapsuleShape *shape)
     * }
     */
    public static MethodHandle JPH_CapsuleShape_GetRadius$handle() {
        return JPH_CapsuleShape_GetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CapsuleShape_GetRadius(const JPH_CapsuleShape *shape)
     * }
     */
    public static MemorySegment JPH_CapsuleShape_GetRadius$address() {
        return JPH_CapsuleShape_GetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CapsuleShape_GetRadius(const JPH_CapsuleShape *shape)
     * }
     */
    public static float JPH_CapsuleShape_GetRadius(MemorySegment shape) {
        var mh$ = JPH_CapsuleShape_GetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CapsuleShape_GetRadius", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CapsuleShape_GetHalfHeightOfCylinder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CapsuleShape_GetHalfHeightOfCylinder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CapsuleShape_GetHalfHeightOfCylinder(const JPH_CapsuleShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_CapsuleShape_GetHalfHeightOfCylinder$descriptor() {
        return JPH_CapsuleShape_GetHalfHeightOfCylinder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CapsuleShape_GetHalfHeightOfCylinder(const JPH_CapsuleShape *shape)
     * }
     */
    public static MethodHandle JPH_CapsuleShape_GetHalfHeightOfCylinder$handle() {
        return JPH_CapsuleShape_GetHalfHeightOfCylinder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CapsuleShape_GetHalfHeightOfCylinder(const JPH_CapsuleShape *shape)
     * }
     */
    public static MemorySegment JPH_CapsuleShape_GetHalfHeightOfCylinder$address() {
        return JPH_CapsuleShape_GetHalfHeightOfCylinder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CapsuleShape_GetHalfHeightOfCylinder(const JPH_CapsuleShape *shape)
     * }
     */
    public static float JPH_CapsuleShape_GetHalfHeightOfCylinder(MemorySegment shape) {
        var mh$ = JPH_CapsuleShape_GetHalfHeightOfCylinder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CapsuleShape_GetHalfHeightOfCylinder", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CylinderShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CylinderShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_CylinderShapeSettings *JPH_CylinderShapeSettings_Create(float halfHeight, float radius, float convexRadius)
     * }
     */
    public static FunctionDescriptor JPH_CylinderShapeSettings_Create$descriptor() {
        return JPH_CylinderShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_CylinderShapeSettings *JPH_CylinderShapeSettings_Create(float halfHeight, float radius, float convexRadius)
     * }
     */
    public static MethodHandle JPH_CylinderShapeSettings_Create$handle() {
        return JPH_CylinderShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_CylinderShapeSettings *JPH_CylinderShapeSettings_Create(float halfHeight, float radius, float convexRadius)
     * }
     */
    public static MemorySegment JPH_CylinderShapeSettings_Create$address() {
        return JPH_CylinderShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_CylinderShapeSettings *JPH_CylinderShapeSettings_Create(float halfHeight, float radius, float convexRadius)
     * }
     */
    public static MemorySegment JPH_CylinderShapeSettings_Create(float halfHeight, float radius, float convexRadius) {
        var mh$ = JPH_CylinderShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CylinderShapeSettings_Create", halfHeight, radius, convexRadius);
            }
            return (MemorySegment)mh$.invokeExact(halfHeight, radius, convexRadius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CylinderShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CylinderShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_CylinderShape *JPH_CylinderShapeSettings_CreateShape(const JPH_CylinderShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CylinderShapeSettings_CreateShape$descriptor() {
        return JPH_CylinderShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_CylinderShape *JPH_CylinderShapeSettings_CreateShape(const JPH_CylinderShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_CylinderShapeSettings_CreateShape$handle() {
        return JPH_CylinderShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_CylinderShape *JPH_CylinderShapeSettings_CreateShape(const JPH_CylinderShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_CylinderShapeSettings_CreateShape$address() {
        return JPH_CylinderShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_CylinderShape *JPH_CylinderShapeSettings_CreateShape(const JPH_CylinderShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_CylinderShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_CylinderShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CylinderShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CylinderShape_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CylinderShape_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_CylinderShape *JPH_CylinderShape_Create(float halfHeight, float radius)
     * }
     */
    public static FunctionDescriptor JPH_CylinderShape_Create$descriptor() {
        return JPH_CylinderShape_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_CylinderShape *JPH_CylinderShape_Create(float halfHeight, float radius)
     * }
     */
    public static MethodHandle JPH_CylinderShape_Create$handle() {
        return JPH_CylinderShape_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_CylinderShape *JPH_CylinderShape_Create(float halfHeight, float radius)
     * }
     */
    public static MemorySegment JPH_CylinderShape_Create$address() {
        return JPH_CylinderShape_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_CylinderShape *JPH_CylinderShape_Create(float halfHeight, float radius)
     * }
     */
    public static MemorySegment JPH_CylinderShape_Create(float halfHeight, float radius) {
        var mh$ = JPH_CylinderShape_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CylinderShape_Create", halfHeight, radius);
            }
            return (MemorySegment)mh$.invokeExact(halfHeight, radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CylinderShape_GetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CylinderShape_GetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CylinderShape_GetRadius(const JPH_CylinderShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_CylinderShape_GetRadius$descriptor() {
        return JPH_CylinderShape_GetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CylinderShape_GetRadius(const JPH_CylinderShape *shape)
     * }
     */
    public static MethodHandle JPH_CylinderShape_GetRadius$handle() {
        return JPH_CylinderShape_GetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CylinderShape_GetRadius(const JPH_CylinderShape *shape)
     * }
     */
    public static MemorySegment JPH_CylinderShape_GetRadius$address() {
        return JPH_CylinderShape_GetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CylinderShape_GetRadius(const JPH_CylinderShape *shape)
     * }
     */
    public static float JPH_CylinderShape_GetRadius(MemorySegment shape) {
        var mh$ = JPH_CylinderShape_GetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CylinderShape_GetRadius", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CylinderShape_GetHalfHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CylinderShape_GetHalfHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CylinderShape_GetHalfHeight(const JPH_CylinderShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_CylinderShape_GetHalfHeight$descriptor() {
        return JPH_CylinderShape_GetHalfHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CylinderShape_GetHalfHeight(const JPH_CylinderShape *shape)
     * }
     */
    public static MethodHandle JPH_CylinderShape_GetHalfHeight$handle() {
        return JPH_CylinderShape_GetHalfHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CylinderShape_GetHalfHeight(const JPH_CylinderShape *shape)
     * }
     */
    public static MemorySegment JPH_CylinderShape_GetHalfHeight$address() {
        return JPH_CylinderShape_GetHalfHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CylinderShape_GetHalfHeight(const JPH_CylinderShape *shape)
     * }
     */
    public static float JPH_CylinderShape_GetHalfHeight(MemorySegment shape) {
        var mh$ = JPH_CylinderShape_GetHalfHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CylinderShape_GetHalfHeight", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexHullShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexHullShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConvexHullShapeSettings *JPH_ConvexHullShapeSettings_Create(const JPH_Vec3 *points, uint32_t pointsCount, float maxConvexRadius)
     * }
     */
    public static FunctionDescriptor JPH_ConvexHullShapeSettings_Create$descriptor() {
        return JPH_ConvexHullShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConvexHullShapeSettings *JPH_ConvexHullShapeSettings_Create(const JPH_Vec3 *points, uint32_t pointsCount, float maxConvexRadius)
     * }
     */
    public static MethodHandle JPH_ConvexHullShapeSettings_Create$handle() {
        return JPH_ConvexHullShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConvexHullShapeSettings *JPH_ConvexHullShapeSettings_Create(const JPH_Vec3 *points, uint32_t pointsCount, float maxConvexRadius)
     * }
     */
    public static MemorySegment JPH_ConvexHullShapeSettings_Create$address() {
        return JPH_ConvexHullShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConvexHullShapeSettings *JPH_ConvexHullShapeSettings_Create(const JPH_Vec3 *points, uint32_t pointsCount, float maxConvexRadius)
     * }
     */
    public static MemorySegment JPH_ConvexHullShapeSettings_Create(MemorySegment points, int pointsCount, float maxConvexRadius) {
        var mh$ = JPH_ConvexHullShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexHullShapeSettings_Create", points, pointsCount, maxConvexRadius);
            }
            return (MemorySegment)mh$.invokeExact(points, pointsCount, maxConvexRadius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexHullShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexHullShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConvexHullShape *JPH_ConvexHullShapeSettings_CreateShape(const JPH_ConvexHullShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ConvexHullShapeSettings_CreateShape$descriptor() {
        return JPH_ConvexHullShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConvexHullShape *JPH_ConvexHullShapeSettings_CreateShape(const JPH_ConvexHullShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_ConvexHullShapeSettings_CreateShape$handle() {
        return JPH_ConvexHullShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConvexHullShape *JPH_ConvexHullShapeSettings_CreateShape(const JPH_ConvexHullShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConvexHullShapeSettings_CreateShape$address() {
        return JPH_ConvexHullShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConvexHullShape *JPH_ConvexHullShapeSettings_CreateShape(const JPH_ConvexHullShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConvexHullShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_ConvexHullShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexHullShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexHullShape_GetNumPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexHullShape_GetNumPoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumPoints(const JPH_ConvexHullShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_ConvexHullShape_GetNumPoints$descriptor() {
        return JPH_ConvexHullShape_GetNumPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumPoints(const JPH_ConvexHullShape *shape)
     * }
     */
    public static MethodHandle JPH_ConvexHullShape_GetNumPoints$handle() {
        return JPH_ConvexHullShape_GetNumPoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumPoints(const JPH_ConvexHullShape *shape)
     * }
     */
    public static MemorySegment JPH_ConvexHullShape_GetNumPoints$address() {
        return JPH_ConvexHullShape_GetNumPoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumPoints(const JPH_ConvexHullShape *shape)
     * }
     */
    public static int JPH_ConvexHullShape_GetNumPoints(MemorySegment shape) {
        var mh$ = JPH_ConvexHullShape_GetNumPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexHullShape_GetNumPoints", shape);
            }
            return (int)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexHullShape_GetPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexHullShape_GetPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConvexHullShape_GetPoint(const JPH_ConvexHullShape *shape, uint32_t index, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ConvexHullShape_GetPoint$descriptor() {
        return JPH_ConvexHullShape_GetPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConvexHullShape_GetPoint(const JPH_ConvexHullShape *shape, uint32_t index, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_ConvexHullShape_GetPoint$handle() {
        return JPH_ConvexHullShape_GetPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConvexHullShape_GetPoint(const JPH_ConvexHullShape *shape, uint32_t index, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_ConvexHullShape_GetPoint$address() {
        return JPH_ConvexHullShape_GetPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConvexHullShape_GetPoint(const JPH_ConvexHullShape *shape, uint32_t index, JPH_Vec3 *result)
     * }
     */
    public static void JPH_ConvexHullShape_GetPoint(MemorySegment shape, int index, MemorySegment result) {
        var mh$ = JPH_ConvexHullShape_GetPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexHullShape_GetPoint", shape, index, result);
            }
            mh$.invokeExact(shape, index, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexHullShape_GetNumFaces {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexHullShape_GetNumFaces");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumFaces(const JPH_ConvexHullShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_ConvexHullShape_GetNumFaces$descriptor() {
        return JPH_ConvexHullShape_GetNumFaces.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumFaces(const JPH_ConvexHullShape *shape)
     * }
     */
    public static MethodHandle JPH_ConvexHullShape_GetNumFaces$handle() {
        return JPH_ConvexHullShape_GetNumFaces.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumFaces(const JPH_ConvexHullShape *shape)
     * }
     */
    public static MemorySegment JPH_ConvexHullShape_GetNumFaces$address() {
        return JPH_ConvexHullShape_GetNumFaces.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumFaces(const JPH_ConvexHullShape *shape)
     * }
     */
    public static int JPH_ConvexHullShape_GetNumFaces(MemorySegment shape) {
        var mh$ = JPH_ConvexHullShape_GetNumFaces.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexHullShape_GetNumFaces", shape);
            }
            return (int)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexHullShape_GetNumVerticesInFace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexHullShape_GetNumVerticesInFace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumVerticesInFace(const JPH_ConvexHullShape *shape, uint32_t faceIndex)
     * }
     */
    public static FunctionDescriptor JPH_ConvexHullShape_GetNumVerticesInFace$descriptor() {
        return JPH_ConvexHullShape_GetNumVerticesInFace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumVerticesInFace(const JPH_ConvexHullShape *shape, uint32_t faceIndex)
     * }
     */
    public static MethodHandle JPH_ConvexHullShape_GetNumVerticesInFace$handle() {
        return JPH_ConvexHullShape_GetNumVerticesInFace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumVerticesInFace(const JPH_ConvexHullShape *shape, uint32_t faceIndex)
     * }
     */
    public static MemorySegment JPH_ConvexHullShape_GetNumVerticesInFace$address() {
        return JPH_ConvexHullShape_GetNumVerticesInFace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetNumVerticesInFace(const JPH_ConvexHullShape *shape, uint32_t faceIndex)
     * }
     */
    public static int JPH_ConvexHullShape_GetNumVerticesInFace(MemorySegment shape, int faceIndex) {
        var mh$ = JPH_ConvexHullShape_GetNumVerticesInFace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexHullShape_GetNumVerticesInFace", shape, faceIndex);
            }
            return (int)mh$.invokeExact(shape, faceIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConvexHullShape_GetFaceVertices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConvexHullShape_GetFaceVertices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetFaceVertices(const JPH_ConvexHullShape *shape, uint32_t faceIndex, uint32_t maxVertices, uint32_t *vertices)
     * }
     */
    public static FunctionDescriptor JPH_ConvexHullShape_GetFaceVertices$descriptor() {
        return JPH_ConvexHullShape_GetFaceVertices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetFaceVertices(const JPH_ConvexHullShape *shape, uint32_t faceIndex, uint32_t maxVertices, uint32_t *vertices)
     * }
     */
    public static MethodHandle JPH_ConvexHullShape_GetFaceVertices$handle() {
        return JPH_ConvexHullShape_GetFaceVertices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetFaceVertices(const JPH_ConvexHullShape *shape, uint32_t faceIndex, uint32_t maxVertices, uint32_t *vertices)
     * }
     */
    public static MemorySegment JPH_ConvexHullShape_GetFaceVertices$address() {
        return JPH_ConvexHullShape_GetFaceVertices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ConvexHullShape_GetFaceVertices(const JPH_ConvexHullShape *shape, uint32_t faceIndex, uint32_t maxVertices, uint32_t *vertices)
     * }
     */
    public static int JPH_ConvexHullShape_GetFaceVertices(MemorySegment shape, int faceIndex, int maxVertices, MemorySegment vertices) {
        var mh$ = JPH_ConvexHullShape_GetFaceVertices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConvexHullShape_GetFaceVertices", shape, faceIndex, maxVertices, vertices);
            }
            return (int)mh$.invokeExact(shape, faceIndex, maxVertices, vertices);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MeshShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MeshShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MeshShapeSettings *JPH_MeshShapeSettings_Create(const JPH_Triangle *triangles, uint32_t triangleCount)
     * }
     */
    public static FunctionDescriptor JPH_MeshShapeSettings_Create$descriptor() {
        return JPH_MeshShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MeshShapeSettings *JPH_MeshShapeSettings_Create(const JPH_Triangle *triangles, uint32_t triangleCount)
     * }
     */
    public static MethodHandle JPH_MeshShapeSettings_Create$handle() {
        return JPH_MeshShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MeshShapeSettings *JPH_MeshShapeSettings_Create(const JPH_Triangle *triangles, uint32_t triangleCount)
     * }
     */
    public static MemorySegment JPH_MeshShapeSettings_Create$address() {
        return JPH_MeshShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MeshShapeSettings *JPH_MeshShapeSettings_Create(const JPH_Triangle *triangles, uint32_t triangleCount)
     * }
     */
    public static MemorySegment JPH_MeshShapeSettings_Create(MemorySegment triangles, int triangleCount) {
        var mh$ = JPH_MeshShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MeshShapeSettings_Create", triangles, triangleCount);
            }
            return (MemorySegment)mh$.invokeExact(triangles, triangleCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MeshShapeSettings_Create2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MeshShapeSettings_Create2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MeshShapeSettings *JPH_MeshShapeSettings_Create2(const JPH_Vec3 *vertices, uint32_t verticesCount, const JPH_IndexedTriangle *triangles, uint32_t triangleCount)
     * }
     */
    public static FunctionDescriptor JPH_MeshShapeSettings_Create2$descriptor() {
        return JPH_MeshShapeSettings_Create2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MeshShapeSettings *JPH_MeshShapeSettings_Create2(const JPH_Vec3 *vertices, uint32_t verticesCount, const JPH_IndexedTriangle *triangles, uint32_t triangleCount)
     * }
     */
    public static MethodHandle JPH_MeshShapeSettings_Create2$handle() {
        return JPH_MeshShapeSettings_Create2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MeshShapeSettings *JPH_MeshShapeSettings_Create2(const JPH_Vec3 *vertices, uint32_t verticesCount, const JPH_IndexedTriangle *triangles, uint32_t triangleCount)
     * }
     */
    public static MemorySegment JPH_MeshShapeSettings_Create2$address() {
        return JPH_MeshShapeSettings_Create2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MeshShapeSettings *JPH_MeshShapeSettings_Create2(const JPH_Vec3 *vertices, uint32_t verticesCount, const JPH_IndexedTriangle *triangles, uint32_t triangleCount)
     * }
     */
    public static MemorySegment JPH_MeshShapeSettings_Create2(MemorySegment vertices, int verticesCount, MemorySegment triangles, int triangleCount) {
        var mh$ = JPH_MeshShapeSettings_Create2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MeshShapeSettings_Create2", vertices, verticesCount, triangles, triangleCount);
            }
            return (MemorySegment)mh$.invokeExact(vertices, verticesCount, triangles, triangleCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MeshShapeSettings_Sanitize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MeshShapeSettings_Sanitize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MeshShapeSettings_Sanitize(JPH_MeshShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_MeshShapeSettings_Sanitize$descriptor() {
        return JPH_MeshShapeSettings_Sanitize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MeshShapeSettings_Sanitize(JPH_MeshShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_MeshShapeSettings_Sanitize$handle() {
        return JPH_MeshShapeSettings_Sanitize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MeshShapeSettings_Sanitize(JPH_MeshShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_MeshShapeSettings_Sanitize$address() {
        return JPH_MeshShapeSettings_Sanitize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MeshShapeSettings_Sanitize(JPH_MeshShapeSettings *settings)
     * }
     */
    public static void JPH_MeshShapeSettings_Sanitize(MemorySegment settings) {
        var mh$ = JPH_MeshShapeSettings_Sanitize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MeshShapeSettings_Sanitize", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MeshShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MeshShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MeshShape *JPH_MeshShapeSettings_CreateShape(const JPH_MeshShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_MeshShapeSettings_CreateShape$descriptor() {
        return JPH_MeshShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MeshShape *JPH_MeshShapeSettings_CreateShape(const JPH_MeshShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_MeshShapeSettings_CreateShape$handle() {
        return JPH_MeshShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MeshShape *JPH_MeshShapeSettings_CreateShape(const JPH_MeshShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_MeshShapeSettings_CreateShape$address() {
        return JPH_MeshShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MeshShape *JPH_MeshShapeSettings_CreateShape(const JPH_MeshShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_MeshShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_MeshShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MeshShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HeightFieldShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HeightFieldShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_HeightFieldShapeSettings *JPH_HeightFieldShapeSettings_Create(const float *samples, const JPH_Vec3 *offset, const JPH_Vec3 *scale, uint32_t sampleCount)
     * }
     */
    public static FunctionDescriptor JPH_HeightFieldShapeSettings_Create$descriptor() {
        return JPH_HeightFieldShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_HeightFieldShapeSettings *JPH_HeightFieldShapeSettings_Create(const float *samples, const JPH_Vec3 *offset, const JPH_Vec3 *scale, uint32_t sampleCount)
     * }
     */
    public static MethodHandle JPH_HeightFieldShapeSettings_Create$handle() {
        return JPH_HeightFieldShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_HeightFieldShapeSettings *JPH_HeightFieldShapeSettings_Create(const float *samples, const JPH_Vec3 *offset, const JPH_Vec3 *scale, uint32_t sampleCount)
     * }
     */
    public static MemorySegment JPH_HeightFieldShapeSettings_Create$address() {
        return JPH_HeightFieldShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_HeightFieldShapeSettings *JPH_HeightFieldShapeSettings_Create(const float *samples, const JPH_Vec3 *offset, const JPH_Vec3 *scale, uint32_t sampleCount)
     * }
     */
    public static MemorySegment JPH_HeightFieldShapeSettings_Create(MemorySegment samples, MemorySegment offset, MemorySegment scale, int sampleCount) {
        var mh$ = JPH_HeightFieldShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HeightFieldShapeSettings_Create", samples, offset, scale, sampleCount);
            }
            return (MemorySegment)mh$.invokeExact(samples, offset, scale, sampleCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HeightFieldShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HeightFieldShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_HeightFieldShape *JPH_HeightFieldShapeSettings_CreateShape(JPH_HeightFieldShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_HeightFieldShapeSettings_CreateShape$descriptor() {
        return JPH_HeightFieldShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_HeightFieldShape *JPH_HeightFieldShapeSettings_CreateShape(JPH_HeightFieldShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_HeightFieldShapeSettings_CreateShape$handle() {
        return JPH_HeightFieldShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_HeightFieldShape *JPH_HeightFieldShapeSettings_CreateShape(JPH_HeightFieldShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_HeightFieldShapeSettings_CreateShape$address() {
        return JPH_HeightFieldShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_HeightFieldShape *JPH_HeightFieldShapeSettings_CreateShape(JPH_HeightFieldShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_HeightFieldShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_HeightFieldShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HeightFieldShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample(const JPH_HeightFieldShapeSettings *settings, float *pOutMinValue, float *pOutMaxValue, float *pOutQuantizationScale)
     * }
     */
    public static FunctionDescriptor JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample$descriptor() {
        return JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample(const JPH_HeightFieldShapeSettings *settings, float *pOutMinValue, float *pOutMaxValue, float *pOutQuantizationScale)
     * }
     */
    public static MethodHandle JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample$handle() {
        return JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample(const JPH_HeightFieldShapeSettings *settings, float *pOutMinValue, float *pOutMaxValue, float *pOutQuantizationScale)
     * }
     */
    public static MemorySegment JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample$address() {
        return JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample(const JPH_HeightFieldShapeSettings *settings, float *pOutMinValue, float *pOutMaxValue, float *pOutQuantizationScale)
     * }
     */
    public static void JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample(MemorySegment settings, MemorySegment pOutMinValue, MemorySegment pOutMaxValue, MemorySegment pOutQuantizationScale) {
        var mh$ = JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HeightFieldShapeSettings_DetermineMinAndMaxSample", settings, pOutMinValue, pOutMaxValue, pOutQuantizationScale);
            }
            mh$.invokeExact(settings, pOutMinValue, pOutMaxValue, pOutQuantizationScale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError(const JPH_HeightFieldShapeSettings *settings, float maxError)
     * }
     */
    public static FunctionDescriptor JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError$descriptor() {
        return JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError(const JPH_HeightFieldShapeSettings *settings, float maxError)
     * }
     */
    public static MethodHandle JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError$handle() {
        return JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError(const JPH_HeightFieldShapeSettings *settings, float maxError)
     * }
     */
    public static MemorySegment JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError$address() {
        return JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError(const JPH_HeightFieldShapeSettings *settings, float maxError)
     * }
     */
    public static int JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError(MemorySegment settings, float maxError) {
        var mh$ = JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HeightFieldShapeSettings_CalculateBitsPerSampleForError", settings, maxError);
            }
            return (int)mh$.invokeExact(settings, maxError);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TaperedCapsuleShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TaperedCapsuleShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_TaperedCapsuleShapeSettings *JPH_TaperedCapsuleShapeSettings_Create(float halfHeightOfTaperedCylinder, float topRadius, float bottomRadius)
     * }
     */
    public static FunctionDescriptor JPH_TaperedCapsuleShapeSettings_Create$descriptor() {
        return JPH_TaperedCapsuleShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_TaperedCapsuleShapeSettings *JPH_TaperedCapsuleShapeSettings_Create(float halfHeightOfTaperedCylinder, float topRadius, float bottomRadius)
     * }
     */
    public static MethodHandle JPH_TaperedCapsuleShapeSettings_Create$handle() {
        return JPH_TaperedCapsuleShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_TaperedCapsuleShapeSettings *JPH_TaperedCapsuleShapeSettings_Create(float halfHeightOfTaperedCylinder, float topRadius, float bottomRadius)
     * }
     */
    public static MemorySegment JPH_TaperedCapsuleShapeSettings_Create$address() {
        return JPH_TaperedCapsuleShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_TaperedCapsuleShapeSettings *JPH_TaperedCapsuleShapeSettings_Create(float halfHeightOfTaperedCylinder, float topRadius, float bottomRadius)
     * }
     */
    public static MemorySegment JPH_TaperedCapsuleShapeSettings_Create(float halfHeightOfTaperedCylinder, float topRadius, float bottomRadius) {
        var mh$ = JPH_TaperedCapsuleShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TaperedCapsuleShapeSettings_Create", halfHeightOfTaperedCylinder, topRadius, bottomRadius);
            }
            return (MemorySegment)mh$.invokeExact(halfHeightOfTaperedCylinder, topRadius, bottomRadius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TaperedCapsuleShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TaperedCapsuleShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_TaperedCapsuleShape *JPH_TaperedCapsuleShapeSettings_CreateShape(JPH_TaperedCapsuleShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_TaperedCapsuleShapeSettings_CreateShape$descriptor() {
        return JPH_TaperedCapsuleShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_TaperedCapsuleShape *JPH_TaperedCapsuleShapeSettings_CreateShape(JPH_TaperedCapsuleShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_TaperedCapsuleShapeSettings_CreateShape$handle() {
        return JPH_TaperedCapsuleShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_TaperedCapsuleShape *JPH_TaperedCapsuleShapeSettings_CreateShape(JPH_TaperedCapsuleShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_TaperedCapsuleShapeSettings_CreateShape$address() {
        return JPH_TaperedCapsuleShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_TaperedCapsuleShape *JPH_TaperedCapsuleShapeSettings_CreateShape(JPH_TaperedCapsuleShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_TaperedCapsuleShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_TaperedCapsuleShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TaperedCapsuleShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CompoundShapeSettings_AddShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CompoundShapeSettings_AddShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CompoundShapeSettings_AddShape(JPH_CompoundShapeSettings *settings, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_ShapeSettings *shape, uint32_t userData)
     * }
     */
    public static FunctionDescriptor JPH_CompoundShapeSettings_AddShape$descriptor() {
        return JPH_CompoundShapeSettings_AddShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CompoundShapeSettings_AddShape(JPH_CompoundShapeSettings *settings, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_ShapeSettings *shape, uint32_t userData)
     * }
     */
    public static MethodHandle JPH_CompoundShapeSettings_AddShape$handle() {
        return JPH_CompoundShapeSettings_AddShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CompoundShapeSettings_AddShape(JPH_CompoundShapeSettings *settings, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_ShapeSettings *shape, uint32_t userData)
     * }
     */
    public static MemorySegment JPH_CompoundShapeSettings_AddShape$address() {
        return JPH_CompoundShapeSettings_AddShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CompoundShapeSettings_AddShape(JPH_CompoundShapeSettings *settings, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_ShapeSettings *shape, uint32_t userData)
     * }
     */
    public static void JPH_CompoundShapeSettings_AddShape(MemorySegment settings, MemorySegment position, MemorySegment rotation, MemorySegment shape, int userData) {
        var mh$ = JPH_CompoundShapeSettings_AddShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CompoundShapeSettings_AddShape", settings, position, rotation, shape, userData);
            }
            mh$.invokeExact(settings, position, rotation, shape, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CompoundShapeSettings_AddShape2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CompoundShapeSettings_AddShape2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CompoundShapeSettings_AddShape2(JPH_CompoundShapeSettings *settings, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape, uint32_t userData)
     * }
     */
    public static FunctionDescriptor JPH_CompoundShapeSettings_AddShape2$descriptor() {
        return JPH_CompoundShapeSettings_AddShape2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CompoundShapeSettings_AddShape2(JPH_CompoundShapeSettings *settings, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape, uint32_t userData)
     * }
     */
    public static MethodHandle JPH_CompoundShapeSettings_AddShape2$handle() {
        return JPH_CompoundShapeSettings_AddShape2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CompoundShapeSettings_AddShape2(JPH_CompoundShapeSettings *settings, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape, uint32_t userData)
     * }
     */
    public static MemorySegment JPH_CompoundShapeSettings_AddShape2$address() {
        return JPH_CompoundShapeSettings_AddShape2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CompoundShapeSettings_AddShape2(JPH_CompoundShapeSettings *settings, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape, uint32_t userData)
     * }
     */
    public static void JPH_CompoundShapeSettings_AddShape2(MemorySegment settings, MemorySegment position, MemorySegment rotation, MemorySegment shape, int userData) {
        var mh$ = JPH_CompoundShapeSettings_AddShape2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CompoundShapeSettings_AddShape2", settings, position, rotation, shape, userData);
            }
            mh$.invokeExact(settings, position, rotation, shape, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CompoundShape_GetNumSubShapes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CompoundShape_GetNumSubShapes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CompoundShape_GetNumSubShapes(const JPH_CompoundShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_CompoundShape_GetNumSubShapes$descriptor() {
        return JPH_CompoundShape_GetNumSubShapes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CompoundShape_GetNumSubShapes(const JPH_CompoundShape *shape)
     * }
     */
    public static MethodHandle JPH_CompoundShape_GetNumSubShapes$handle() {
        return JPH_CompoundShape_GetNumSubShapes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CompoundShape_GetNumSubShapes(const JPH_CompoundShape *shape)
     * }
     */
    public static MemorySegment JPH_CompoundShape_GetNumSubShapes$address() {
        return JPH_CompoundShape_GetNumSubShapes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_CompoundShape_GetNumSubShapes(const JPH_CompoundShape *shape)
     * }
     */
    public static int JPH_CompoundShape_GetNumSubShapes(MemorySegment shape) {
        var mh$ = JPH_CompoundShape_GetNumSubShapes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CompoundShape_GetNumSubShapes", shape);
            }
            return (int)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CompoundShape_GetSubShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CompoundShape_GetSubShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CompoundShape_GetSubShape(const JPH_CompoundShape *shape, uint32_t index, const JPH_Shape **subShape, JPH_Vec3 *positionCOM, JPH_Quat *rotation, uint32_t *userData)
     * }
     */
    public static FunctionDescriptor JPH_CompoundShape_GetSubShape$descriptor() {
        return JPH_CompoundShape_GetSubShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CompoundShape_GetSubShape(const JPH_CompoundShape *shape, uint32_t index, const JPH_Shape **subShape, JPH_Vec3 *positionCOM, JPH_Quat *rotation, uint32_t *userData)
     * }
     */
    public static MethodHandle JPH_CompoundShape_GetSubShape$handle() {
        return JPH_CompoundShape_GetSubShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CompoundShape_GetSubShape(const JPH_CompoundShape *shape, uint32_t index, const JPH_Shape **subShape, JPH_Vec3 *positionCOM, JPH_Quat *rotation, uint32_t *userData)
     * }
     */
    public static MemorySegment JPH_CompoundShape_GetSubShape$address() {
        return JPH_CompoundShape_GetSubShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CompoundShape_GetSubShape(const JPH_CompoundShape *shape, uint32_t index, const JPH_Shape **subShape, JPH_Vec3 *positionCOM, JPH_Quat *rotation, uint32_t *userData)
     * }
     */
    public static void JPH_CompoundShape_GetSubShape(MemorySegment shape, int index, MemorySegment subShape, MemorySegment positionCOM, MemorySegment rotation, MemorySegment userData) {
        var mh$ = JPH_CompoundShape_GetSubShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CompoundShape_GetSubShape", shape, index, subShape, positionCOM, rotation, userData);
            }
            mh$.invokeExact(shape, index, subShape, positionCOM, rotation, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CompoundShape_GetSubShapeIndexFromID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CompoundShape_GetSubShapeIndexFromID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CompoundShape_GetSubShapeIndexFromID(const JPH_CompoundShape *shape, JPH_SubShapeID id, JPH_SubShapeID *remainder)
     * }
     */
    public static FunctionDescriptor JPH_CompoundShape_GetSubShapeIndexFromID$descriptor() {
        return JPH_CompoundShape_GetSubShapeIndexFromID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CompoundShape_GetSubShapeIndexFromID(const JPH_CompoundShape *shape, JPH_SubShapeID id, JPH_SubShapeID *remainder)
     * }
     */
    public static MethodHandle JPH_CompoundShape_GetSubShapeIndexFromID$handle() {
        return JPH_CompoundShape_GetSubShapeIndexFromID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CompoundShape_GetSubShapeIndexFromID(const JPH_CompoundShape *shape, JPH_SubShapeID id, JPH_SubShapeID *remainder)
     * }
     */
    public static MemorySegment JPH_CompoundShape_GetSubShapeIndexFromID$address() {
        return JPH_CompoundShape_GetSubShapeIndexFromID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_CompoundShape_GetSubShapeIndexFromID(const JPH_CompoundShape *shape, JPH_SubShapeID id, JPH_SubShapeID *remainder)
     * }
     */
    public static int JPH_CompoundShape_GetSubShapeIndexFromID(MemorySegment shape, int id, MemorySegment remainder) {
        var mh$ = JPH_CompoundShape_GetSubShapeIndexFromID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CompoundShape_GetSubShapeIndexFromID", shape, id, remainder);
            }
            return (int)mh$.invokeExact(shape, id, remainder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_StaticCompoundShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_StaticCompoundShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_StaticCompoundShapeSettings *JPH_StaticCompoundShapeSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_StaticCompoundShapeSettings_Create$descriptor() {
        return JPH_StaticCompoundShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_StaticCompoundShapeSettings *JPH_StaticCompoundShapeSettings_Create()
     * }
     */
    public static MethodHandle JPH_StaticCompoundShapeSettings_Create$handle() {
        return JPH_StaticCompoundShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_StaticCompoundShapeSettings *JPH_StaticCompoundShapeSettings_Create()
     * }
     */
    public static MemorySegment JPH_StaticCompoundShapeSettings_Create$address() {
        return JPH_StaticCompoundShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_StaticCompoundShapeSettings *JPH_StaticCompoundShapeSettings_Create()
     * }
     */
    public static MemorySegment JPH_StaticCompoundShapeSettings_Create() {
        var mh$ = JPH_StaticCompoundShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_StaticCompoundShapeSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_StaticCompoundShape_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_StaticCompoundShape_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_StaticCompoundShape *JPH_StaticCompoundShape_Create(const JPH_StaticCompoundShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_StaticCompoundShape_Create$descriptor() {
        return JPH_StaticCompoundShape_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_StaticCompoundShape *JPH_StaticCompoundShape_Create(const JPH_StaticCompoundShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_StaticCompoundShape_Create$handle() {
        return JPH_StaticCompoundShape_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_StaticCompoundShape *JPH_StaticCompoundShape_Create(const JPH_StaticCompoundShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_StaticCompoundShape_Create$address() {
        return JPH_StaticCompoundShape_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_StaticCompoundShape *JPH_StaticCompoundShape_Create(const JPH_StaticCompoundShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_StaticCompoundShape_Create(MemorySegment settings) {
        var mh$ = JPH_StaticCompoundShape_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_StaticCompoundShape_Create", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MutableCompoundShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MutableCompoundShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MutableCompoundShapeSettings *JPH_MutableCompoundShapeSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_MutableCompoundShapeSettings_Create$descriptor() {
        return JPH_MutableCompoundShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MutableCompoundShapeSettings *JPH_MutableCompoundShapeSettings_Create()
     * }
     */
    public static MethodHandle JPH_MutableCompoundShapeSettings_Create$handle() {
        return JPH_MutableCompoundShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MutableCompoundShapeSettings *JPH_MutableCompoundShapeSettings_Create()
     * }
     */
    public static MemorySegment JPH_MutableCompoundShapeSettings_Create$address() {
        return JPH_MutableCompoundShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MutableCompoundShapeSettings *JPH_MutableCompoundShapeSettings_Create()
     * }
     */
    public static MemorySegment JPH_MutableCompoundShapeSettings_Create() {
        var mh$ = JPH_MutableCompoundShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MutableCompoundShapeSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MutableCompoundShape_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MutableCompoundShape_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MutableCompoundShape *JPH_MutableCompoundShape_Create(const JPH_MutableCompoundShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_MutableCompoundShape_Create$descriptor() {
        return JPH_MutableCompoundShape_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MutableCompoundShape *JPH_MutableCompoundShape_Create(const JPH_MutableCompoundShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_MutableCompoundShape_Create$handle() {
        return JPH_MutableCompoundShape_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MutableCompoundShape *JPH_MutableCompoundShape_Create(const JPH_MutableCompoundShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_MutableCompoundShape_Create$address() {
        return JPH_MutableCompoundShape_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MutableCompoundShape *JPH_MutableCompoundShape_Create(const JPH_MutableCompoundShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_MutableCompoundShape_Create(MemorySegment settings) {
        var mh$ = JPH_MutableCompoundShape_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MutableCompoundShape_Create", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MutableCompoundShape_AddShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MutableCompoundShape_AddShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_MutableCompoundShape_AddShape(JPH_MutableCompoundShape *shape, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *child, uint32_t userData)
     * }
     */
    public static FunctionDescriptor JPH_MutableCompoundShape_AddShape$descriptor() {
        return JPH_MutableCompoundShape_AddShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_MutableCompoundShape_AddShape(JPH_MutableCompoundShape *shape, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *child, uint32_t userData)
     * }
     */
    public static MethodHandle JPH_MutableCompoundShape_AddShape$handle() {
        return JPH_MutableCompoundShape_AddShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_MutableCompoundShape_AddShape(JPH_MutableCompoundShape *shape, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *child, uint32_t userData)
     * }
     */
    public static MemorySegment JPH_MutableCompoundShape_AddShape$address() {
        return JPH_MutableCompoundShape_AddShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_MutableCompoundShape_AddShape(JPH_MutableCompoundShape *shape, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *child, uint32_t userData)
     * }
     */
    public static int JPH_MutableCompoundShape_AddShape(MemorySegment shape, MemorySegment position, MemorySegment rotation, MemorySegment child, int userData) {
        var mh$ = JPH_MutableCompoundShape_AddShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MutableCompoundShape_AddShape", shape, position, rotation, child, userData);
            }
            return (int)mh$.invokeExact(shape, position, rotation, child, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MutableCompoundShape_RemoveShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MutableCompoundShape_RemoveShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_RemoveShape(JPH_MutableCompoundShape *shape, uint32_t index)
     * }
     */
    public static FunctionDescriptor JPH_MutableCompoundShape_RemoveShape$descriptor() {
        return JPH_MutableCompoundShape_RemoveShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_RemoveShape(JPH_MutableCompoundShape *shape, uint32_t index)
     * }
     */
    public static MethodHandle JPH_MutableCompoundShape_RemoveShape$handle() {
        return JPH_MutableCompoundShape_RemoveShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_RemoveShape(JPH_MutableCompoundShape *shape, uint32_t index)
     * }
     */
    public static MemorySegment JPH_MutableCompoundShape_RemoveShape$address() {
        return JPH_MutableCompoundShape_RemoveShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_RemoveShape(JPH_MutableCompoundShape *shape, uint32_t index)
     * }
     */
    public static void JPH_MutableCompoundShape_RemoveShape(MemorySegment shape, int index) {
        var mh$ = JPH_MutableCompoundShape_RemoveShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MutableCompoundShape_RemoveShape", shape, index);
            }
            mh$.invokeExact(shape, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MutableCompoundShape_ModifyShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MutableCompoundShape_ModifyShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_ModifyShape(JPH_MutableCompoundShape *shape, uint32_t index, const JPH_Vec3 *position, const JPH_Quat *rotation)
     * }
     */
    public static FunctionDescriptor JPH_MutableCompoundShape_ModifyShape$descriptor() {
        return JPH_MutableCompoundShape_ModifyShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_ModifyShape(JPH_MutableCompoundShape *shape, uint32_t index, const JPH_Vec3 *position, const JPH_Quat *rotation)
     * }
     */
    public static MethodHandle JPH_MutableCompoundShape_ModifyShape$handle() {
        return JPH_MutableCompoundShape_ModifyShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_ModifyShape(JPH_MutableCompoundShape *shape, uint32_t index, const JPH_Vec3 *position, const JPH_Quat *rotation)
     * }
     */
    public static MemorySegment JPH_MutableCompoundShape_ModifyShape$address() {
        return JPH_MutableCompoundShape_ModifyShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_ModifyShape(JPH_MutableCompoundShape *shape, uint32_t index, const JPH_Vec3 *position, const JPH_Quat *rotation)
     * }
     */
    public static void JPH_MutableCompoundShape_ModifyShape(MemorySegment shape, int index, MemorySegment position, MemorySegment rotation) {
        var mh$ = JPH_MutableCompoundShape_ModifyShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MutableCompoundShape_ModifyShape", shape, index, position, rotation);
            }
            mh$.invokeExact(shape, index, position, rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MutableCompoundShape_ModifyShape2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MutableCompoundShape_ModifyShape2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_ModifyShape2(JPH_MutableCompoundShape *shape, uint32_t index, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *newShape)
     * }
     */
    public static FunctionDescriptor JPH_MutableCompoundShape_ModifyShape2$descriptor() {
        return JPH_MutableCompoundShape_ModifyShape2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_ModifyShape2(JPH_MutableCompoundShape *shape, uint32_t index, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *newShape)
     * }
     */
    public static MethodHandle JPH_MutableCompoundShape_ModifyShape2$handle() {
        return JPH_MutableCompoundShape_ModifyShape2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_ModifyShape2(JPH_MutableCompoundShape *shape, uint32_t index, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *newShape)
     * }
     */
    public static MemorySegment JPH_MutableCompoundShape_ModifyShape2$address() {
        return JPH_MutableCompoundShape_ModifyShape2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_ModifyShape2(JPH_MutableCompoundShape *shape, uint32_t index, const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *newShape)
     * }
     */
    public static void JPH_MutableCompoundShape_ModifyShape2(MemorySegment shape, int index, MemorySegment position, MemorySegment rotation, MemorySegment newShape) {
        var mh$ = JPH_MutableCompoundShape_ModifyShape2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MutableCompoundShape_ModifyShape2", shape, index, position, rotation, newShape);
            }
            mh$.invokeExact(shape, index, position, rotation, newShape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MutableCompoundShape_AdjustCenterOfMass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MutableCompoundShape_AdjustCenterOfMass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_AdjustCenterOfMass(JPH_MutableCompoundShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_MutableCompoundShape_AdjustCenterOfMass$descriptor() {
        return JPH_MutableCompoundShape_AdjustCenterOfMass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_AdjustCenterOfMass(JPH_MutableCompoundShape *shape)
     * }
     */
    public static MethodHandle JPH_MutableCompoundShape_AdjustCenterOfMass$handle() {
        return JPH_MutableCompoundShape_AdjustCenterOfMass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_AdjustCenterOfMass(JPH_MutableCompoundShape *shape)
     * }
     */
    public static MemorySegment JPH_MutableCompoundShape_AdjustCenterOfMass$address() {
        return JPH_MutableCompoundShape_AdjustCenterOfMass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MutableCompoundShape_AdjustCenterOfMass(JPH_MutableCompoundShape *shape)
     * }
     */
    public static void JPH_MutableCompoundShape_AdjustCenterOfMass(MemorySegment shape) {
        var mh$ = JPH_MutableCompoundShape_AdjustCenterOfMass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MutableCompoundShape_AdjustCenterOfMass", shape);
            }
            mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DecoratedShape_GetInnerShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DecoratedShape_GetInnerShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_DecoratedShape_GetInnerShape(const JPH_DecoratedShape *shape)
     * }
     */
    public static FunctionDescriptor JPH_DecoratedShape_GetInnerShape$descriptor() {
        return JPH_DecoratedShape_GetInnerShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_DecoratedShape_GetInnerShape(const JPH_DecoratedShape *shape)
     * }
     */
    public static MethodHandle JPH_DecoratedShape_GetInnerShape$handle() {
        return JPH_DecoratedShape_GetInnerShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_DecoratedShape_GetInnerShape(const JPH_DecoratedShape *shape)
     * }
     */
    public static MemorySegment JPH_DecoratedShape_GetInnerShape$address() {
        return JPH_DecoratedShape_GetInnerShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_DecoratedShape_GetInnerShape(const JPH_DecoratedShape *shape)
     * }
     */
    public static MemorySegment JPH_DecoratedShape_GetInnerShape(MemorySegment shape) {
        var mh$ = JPH_DecoratedShape_GetInnerShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DecoratedShape_GetInnerShape", shape);
            }
            return (MemorySegment)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_RotatedTranslatedShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_RotatedTranslatedShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShapeSettings *JPH_RotatedTranslatedShapeSettings_Create(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_ShapeSettings *shapeSettings)
     * }
     */
    public static FunctionDescriptor JPH_RotatedTranslatedShapeSettings_Create$descriptor() {
        return JPH_RotatedTranslatedShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShapeSettings *JPH_RotatedTranslatedShapeSettings_Create(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_ShapeSettings *shapeSettings)
     * }
     */
    public static MethodHandle JPH_RotatedTranslatedShapeSettings_Create$handle() {
        return JPH_RotatedTranslatedShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShapeSettings *JPH_RotatedTranslatedShapeSettings_Create(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_ShapeSettings *shapeSettings)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShapeSettings_Create$address() {
        return JPH_RotatedTranslatedShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShapeSettings *JPH_RotatedTranslatedShapeSettings_Create(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_ShapeSettings *shapeSettings)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShapeSettings_Create(MemorySegment position, MemorySegment rotation, MemorySegment shapeSettings) {
        var mh$ = JPH_RotatedTranslatedShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_RotatedTranslatedShapeSettings_Create", position, rotation, shapeSettings);
            }
            return (MemorySegment)mh$.invokeExact(position, rotation, shapeSettings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_RotatedTranslatedShapeSettings_Create2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_RotatedTranslatedShapeSettings_Create2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShapeSettings *JPH_RotatedTranslatedShapeSettings_Create2(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_RotatedTranslatedShapeSettings_Create2$descriptor() {
        return JPH_RotatedTranslatedShapeSettings_Create2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShapeSettings *JPH_RotatedTranslatedShapeSettings_Create2(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_RotatedTranslatedShapeSettings_Create2$handle() {
        return JPH_RotatedTranslatedShapeSettings_Create2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShapeSettings *JPH_RotatedTranslatedShapeSettings_Create2(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShapeSettings_Create2$address() {
        return JPH_RotatedTranslatedShapeSettings_Create2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShapeSettings *JPH_RotatedTranslatedShapeSettings_Create2(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShapeSettings_Create2(MemorySegment position, MemorySegment rotation, MemorySegment shape) {
        var mh$ = JPH_RotatedTranslatedShapeSettings_Create2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_RotatedTranslatedShapeSettings_Create2", position, rotation, shape);
            }
            return (MemorySegment)mh$.invokeExact(position, rotation, shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_RotatedTranslatedShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_RotatedTranslatedShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShape *JPH_RotatedTranslatedShapeSettings_CreateShape(const JPH_RotatedTranslatedShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_RotatedTranslatedShapeSettings_CreateShape$descriptor() {
        return JPH_RotatedTranslatedShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShape *JPH_RotatedTranslatedShapeSettings_CreateShape(const JPH_RotatedTranslatedShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_RotatedTranslatedShapeSettings_CreateShape$handle() {
        return JPH_RotatedTranslatedShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShape *JPH_RotatedTranslatedShapeSettings_CreateShape(const JPH_RotatedTranslatedShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShapeSettings_CreateShape$address() {
        return JPH_RotatedTranslatedShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShape *JPH_RotatedTranslatedShapeSettings_CreateShape(const JPH_RotatedTranslatedShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_RotatedTranslatedShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_RotatedTranslatedShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_RotatedTranslatedShape_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_RotatedTranslatedShape_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShape *JPH_RotatedTranslatedShape_Create(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_RotatedTranslatedShape_Create$descriptor() {
        return JPH_RotatedTranslatedShape_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShape *JPH_RotatedTranslatedShape_Create(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_RotatedTranslatedShape_Create$handle() {
        return JPH_RotatedTranslatedShape_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShape *JPH_RotatedTranslatedShape_Create(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShape_Create$address() {
        return JPH_RotatedTranslatedShape_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_RotatedTranslatedShape *JPH_RotatedTranslatedShape_Create(const JPH_Vec3 *position, const JPH_Quat *rotation, const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShape_Create(MemorySegment position, MemorySegment rotation, MemorySegment shape) {
        var mh$ = JPH_RotatedTranslatedShape_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_RotatedTranslatedShape_Create", position, rotation, shape);
            }
            return (MemorySegment)mh$.invokeExact(position, rotation, shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_RotatedTranslatedShape_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_RotatedTranslatedShape_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_RotatedTranslatedShape_GetPosition(const JPH_RotatedTranslatedShape *shape, JPH_Vec3 *position)
     * }
     */
    public static FunctionDescriptor JPH_RotatedTranslatedShape_GetPosition$descriptor() {
        return JPH_RotatedTranslatedShape_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_RotatedTranslatedShape_GetPosition(const JPH_RotatedTranslatedShape *shape, JPH_Vec3 *position)
     * }
     */
    public static MethodHandle JPH_RotatedTranslatedShape_GetPosition$handle() {
        return JPH_RotatedTranslatedShape_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_RotatedTranslatedShape_GetPosition(const JPH_RotatedTranslatedShape *shape, JPH_Vec3 *position)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShape_GetPosition$address() {
        return JPH_RotatedTranslatedShape_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_RotatedTranslatedShape_GetPosition(const JPH_RotatedTranslatedShape *shape, JPH_Vec3 *position)
     * }
     */
    public static void JPH_RotatedTranslatedShape_GetPosition(MemorySegment shape, MemorySegment position) {
        var mh$ = JPH_RotatedTranslatedShape_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_RotatedTranslatedShape_GetPosition", shape, position);
            }
            mh$.invokeExact(shape, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_RotatedTranslatedShape_GetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_RotatedTranslatedShape_GetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_RotatedTranslatedShape_GetRotation(const JPH_RotatedTranslatedShape *shape, JPH_Quat *rotation)
     * }
     */
    public static FunctionDescriptor JPH_RotatedTranslatedShape_GetRotation$descriptor() {
        return JPH_RotatedTranslatedShape_GetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_RotatedTranslatedShape_GetRotation(const JPH_RotatedTranslatedShape *shape, JPH_Quat *rotation)
     * }
     */
    public static MethodHandle JPH_RotatedTranslatedShape_GetRotation$handle() {
        return JPH_RotatedTranslatedShape_GetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_RotatedTranslatedShape_GetRotation(const JPH_RotatedTranslatedShape *shape, JPH_Quat *rotation)
     * }
     */
    public static MemorySegment JPH_RotatedTranslatedShape_GetRotation$address() {
        return JPH_RotatedTranslatedShape_GetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_RotatedTranslatedShape_GetRotation(const JPH_RotatedTranslatedShape *shape, JPH_Quat *rotation)
     * }
     */
    public static void JPH_RotatedTranslatedShape_GetRotation(MemorySegment shape, MemorySegment rotation) {
        var mh$ = JPH_RotatedTranslatedShape_GetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_RotatedTranslatedShape_GetRotation", shape, rotation);
            }
            mh$.invokeExact(shape, rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_OffsetCenterOfMassShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_OffsetCenterOfMassShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShapeSettings *JPH_OffsetCenterOfMassShapeSettings_Create(const JPH_Vec3 *offset, const JPH_ShapeSettings *shapeSettings)
     * }
     */
    public static FunctionDescriptor JPH_OffsetCenterOfMassShapeSettings_Create$descriptor() {
        return JPH_OffsetCenterOfMassShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShapeSettings *JPH_OffsetCenterOfMassShapeSettings_Create(const JPH_Vec3 *offset, const JPH_ShapeSettings *shapeSettings)
     * }
     */
    public static MethodHandle JPH_OffsetCenterOfMassShapeSettings_Create$handle() {
        return JPH_OffsetCenterOfMassShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShapeSettings *JPH_OffsetCenterOfMassShapeSettings_Create(const JPH_Vec3 *offset, const JPH_ShapeSettings *shapeSettings)
     * }
     */
    public static MemorySegment JPH_OffsetCenterOfMassShapeSettings_Create$address() {
        return JPH_OffsetCenterOfMassShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShapeSettings *JPH_OffsetCenterOfMassShapeSettings_Create(const JPH_Vec3 *offset, const JPH_ShapeSettings *shapeSettings)
     * }
     */
    public static MemorySegment JPH_OffsetCenterOfMassShapeSettings_Create(MemorySegment offset, MemorySegment shapeSettings) {
        var mh$ = JPH_OffsetCenterOfMassShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_OffsetCenterOfMassShapeSettings_Create", offset, shapeSettings);
            }
            return (MemorySegment)mh$.invokeExact(offset, shapeSettings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_OffsetCenterOfMassShapeSettings_Create2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_OffsetCenterOfMassShapeSettings_Create2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShapeSettings *JPH_OffsetCenterOfMassShapeSettings_Create2(const JPH_Vec3 *offset, const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_OffsetCenterOfMassShapeSettings_Create2$descriptor() {
        return JPH_OffsetCenterOfMassShapeSettings_Create2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShapeSettings *JPH_OffsetCenterOfMassShapeSettings_Create2(const JPH_Vec3 *offset, const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_OffsetCenterOfMassShapeSettings_Create2$handle() {
        return JPH_OffsetCenterOfMassShapeSettings_Create2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShapeSettings *JPH_OffsetCenterOfMassShapeSettings_Create2(const JPH_Vec3 *offset, const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_OffsetCenterOfMassShapeSettings_Create2$address() {
        return JPH_OffsetCenterOfMassShapeSettings_Create2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShapeSettings *JPH_OffsetCenterOfMassShapeSettings_Create2(const JPH_Vec3 *offset, const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_OffsetCenterOfMassShapeSettings_Create2(MemorySegment offset, MemorySegment shape) {
        var mh$ = JPH_OffsetCenterOfMassShapeSettings_Create2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_OffsetCenterOfMassShapeSettings_Create2", offset, shape);
            }
            return (MemorySegment)mh$.invokeExact(offset, shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_OffsetCenterOfMassShapeSettings_CreateShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_OffsetCenterOfMassShapeSettings_CreateShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShape *JPH_OffsetCenterOfMassShapeSettings_CreateShape(const JPH_OffsetCenterOfMassShapeSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_OffsetCenterOfMassShapeSettings_CreateShape$descriptor() {
        return JPH_OffsetCenterOfMassShapeSettings_CreateShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShape *JPH_OffsetCenterOfMassShapeSettings_CreateShape(const JPH_OffsetCenterOfMassShapeSettings *settings)
     * }
     */
    public static MethodHandle JPH_OffsetCenterOfMassShapeSettings_CreateShape$handle() {
        return JPH_OffsetCenterOfMassShapeSettings_CreateShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShape *JPH_OffsetCenterOfMassShapeSettings_CreateShape(const JPH_OffsetCenterOfMassShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_OffsetCenterOfMassShapeSettings_CreateShape$address() {
        return JPH_OffsetCenterOfMassShapeSettings_CreateShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShape *JPH_OffsetCenterOfMassShapeSettings_CreateShape(const JPH_OffsetCenterOfMassShapeSettings *settings)
     * }
     */
    public static MemorySegment JPH_OffsetCenterOfMassShapeSettings_CreateShape(MemorySegment settings) {
        var mh$ = JPH_OffsetCenterOfMassShapeSettings_CreateShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_OffsetCenterOfMassShapeSettings_CreateShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_OffsetCenterOfMassShape_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_OffsetCenterOfMassShape_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShape *JPH_OffsetCenterOfMassShape_Create(JPH_Vec3 *offset, JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_OffsetCenterOfMassShape_Create$descriptor() {
        return JPH_OffsetCenterOfMassShape_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShape *JPH_OffsetCenterOfMassShape_Create(JPH_Vec3 *offset, JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_OffsetCenterOfMassShape_Create$handle() {
        return JPH_OffsetCenterOfMassShape_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShape *JPH_OffsetCenterOfMassShape_Create(JPH_Vec3 *offset, JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_OffsetCenterOfMassShape_Create$address() {
        return JPH_OffsetCenterOfMassShape_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_OffsetCenterOfMassShape *JPH_OffsetCenterOfMassShape_Create(JPH_Vec3 *offset, JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_OffsetCenterOfMassShape_Create(MemorySegment offset, MemorySegment shape) {
        var mh$ = JPH_OffsetCenterOfMassShape_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_OffsetCenterOfMassShape_Create", offset, shape);
            }
            return (MemorySegment)mh$.invokeExact(offset, shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_OffsetCenterOfMassShape_GetOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_OffsetCenterOfMassShape_GetOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_OffsetCenterOfMassShape_GetOffset(const JPH_OffsetCenterOfMassShape *shape, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_OffsetCenterOfMassShape_GetOffset$descriptor() {
        return JPH_OffsetCenterOfMassShape_GetOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_OffsetCenterOfMassShape_GetOffset(const JPH_OffsetCenterOfMassShape *shape, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_OffsetCenterOfMassShape_GetOffset$handle() {
        return JPH_OffsetCenterOfMassShape_GetOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_OffsetCenterOfMassShape_GetOffset(const JPH_OffsetCenterOfMassShape *shape, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_OffsetCenterOfMassShape_GetOffset$address() {
        return JPH_OffsetCenterOfMassShape_GetOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_OffsetCenterOfMassShape_GetOffset(const JPH_OffsetCenterOfMassShape *shape, JPH_Vec3 *result)
     * }
     */
    public static void JPH_OffsetCenterOfMassShape_GetOffset(MemorySegment shape, MemorySegment result) {
        var mh$ = JPH_OffsetCenterOfMassShape_GetOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_OffsetCenterOfMassShape_GetOffset", shape, result);
            }
            mh$.invokeExact(shape, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Shape_Destroy(JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_Shape_Destroy$descriptor() {
        return JPH_Shape_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Shape_Destroy(JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_Shape_Destroy$handle() {
        return JPH_Shape_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Shape_Destroy(JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_Shape_Destroy$address() {
        return JPH_Shape_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Shape_Destroy(JPH_Shape *shape)
     * }
     */
    public static void JPH_Shape_Destroy(MemorySegment shape) {
        var mh$ = JPH_Shape_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_Destroy", shape);
            }
            mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ShapeType JPH_Shape_GetType(const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetType$descriptor() {
        return JPH_Shape_GetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ShapeType JPH_Shape_GetType(const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_Shape_GetType$handle() {
        return JPH_Shape_GetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ShapeType JPH_Shape_GetType(const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_Shape_GetType$address() {
        return JPH_Shape_GetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ShapeType JPH_Shape_GetType(const JPH_Shape *shape)
     * }
     */
    public static int JPH_Shape_GetType(MemorySegment shape) {
        var mh$ = JPH_Shape_GetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetType", shape);
            }
            return (int)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetSubType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetSubType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ShapeSubType JPH_Shape_GetSubType(const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetSubType$descriptor() {
        return JPH_Shape_GetSubType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ShapeSubType JPH_Shape_GetSubType(const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_Shape_GetSubType$handle() {
        return JPH_Shape_GetSubType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ShapeSubType JPH_Shape_GetSubType(const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_Shape_GetSubType$address() {
        return JPH_Shape_GetSubType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ShapeSubType JPH_Shape_GetSubType(const JPH_Shape *shape)
     * }
     */
    public static int JPH_Shape_GetSubType(MemorySegment shape) {
        var mh$ = JPH_Shape_GetSubType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetSubType", shape);
            }
            return (int)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_LONG_LONG,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPH_Shape_GetUserData(const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetUserData$descriptor() {
        return JPH_Shape_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPH_Shape_GetUserData(const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_Shape_GetUserData$handle() {
        return JPH_Shape_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPH_Shape_GetUserData(const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_Shape_GetUserData$address() {
        return JPH_Shape_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPH_Shape_GetUserData(const JPH_Shape *shape)
     * }
     */
    public static long JPH_Shape_GetUserData(MemorySegment shape) {
        var mh$ = JPH_Shape_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetUserData", shape);
            }
            return (long)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Shape_SetUserData(JPH_Shape *shape, uint64_t userData)
     * }
     */
    public static FunctionDescriptor JPH_Shape_SetUserData$descriptor() {
        return JPH_Shape_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Shape_SetUserData(JPH_Shape *shape, uint64_t userData)
     * }
     */
    public static MethodHandle JPH_Shape_SetUserData$handle() {
        return JPH_Shape_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Shape_SetUserData(JPH_Shape *shape, uint64_t userData)
     * }
     */
    public static MemorySegment JPH_Shape_SetUserData$address() {
        return JPH_Shape_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Shape_SetUserData(JPH_Shape *shape, uint64_t userData)
     * }
     */
    public static void JPH_Shape_SetUserData(MemorySegment shape, long userData) {
        var mh$ = JPH_Shape_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_SetUserData", shape, userData);
            }
            mh$.invokeExact(shape, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_MustBeStatic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_MustBeStatic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Shape_MustBeStatic(const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_Shape_MustBeStatic$descriptor() {
        return JPH_Shape_MustBeStatic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Shape_MustBeStatic(const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_Shape_MustBeStatic$handle() {
        return JPH_Shape_MustBeStatic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Shape_MustBeStatic(const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_Shape_MustBeStatic$address() {
        return JPH_Shape_MustBeStatic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Shape_MustBeStatic(const JPH_Shape *shape)
     * }
     */
    public static int JPH_Shape_MustBeStatic(MemorySegment shape) {
        var mh$ = JPH_Shape_MustBeStatic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_MustBeStatic", shape);
            }
            return (int)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetCenterOfMass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetCenterOfMass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetCenterOfMass(const JPH_Shape *shape, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetCenterOfMass$descriptor() {
        return JPH_Shape_GetCenterOfMass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetCenterOfMass(const JPH_Shape *shape, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_Shape_GetCenterOfMass$handle() {
        return JPH_Shape_GetCenterOfMass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetCenterOfMass(const JPH_Shape *shape, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_Shape_GetCenterOfMass$address() {
        return JPH_Shape_GetCenterOfMass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Shape_GetCenterOfMass(const JPH_Shape *shape, JPH_Vec3 *result)
     * }
     */
    public static void JPH_Shape_GetCenterOfMass(MemorySegment shape, MemorySegment result) {
        var mh$ = JPH_Shape_GetCenterOfMass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetCenterOfMass", shape, result);
            }
            mh$.invokeExact(shape, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetLocalBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetLocalBounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetLocalBounds(const JPH_Shape *shape, JPH_AABox *result)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetLocalBounds$descriptor() {
        return JPH_Shape_GetLocalBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetLocalBounds(const JPH_Shape *shape, JPH_AABox *result)
     * }
     */
    public static MethodHandle JPH_Shape_GetLocalBounds$handle() {
        return JPH_Shape_GetLocalBounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetLocalBounds(const JPH_Shape *shape, JPH_AABox *result)
     * }
     */
    public static MemorySegment JPH_Shape_GetLocalBounds$address() {
        return JPH_Shape_GetLocalBounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Shape_GetLocalBounds(const JPH_Shape *shape, JPH_AABox *result)
     * }
     */
    public static void JPH_Shape_GetLocalBounds(MemorySegment shape, MemorySegment result) {
        var mh$ = JPH_Shape_GetLocalBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetLocalBounds", shape, result);
            }
            mh$.invokeExact(shape, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetWorldSpaceBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetWorldSpaceBounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetWorldSpaceBounds(const JPH_Shape *shape, JPH_RMatrix4x4 *centerOfMassTransform, JPH_Vec3 *scale, JPH_AABox *result)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetWorldSpaceBounds$descriptor() {
        return JPH_Shape_GetWorldSpaceBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetWorldSpaceBounds(const JPH_Shape *shape, JPH_RMatrix4x4 *centerOfMassTransform, JPH_Vec3 *scale, JPH_AABox *result)
     * }
     */
    public static MethodHandle JPH_Shape_GetWorldSpaceBounds$handle() {
        return JPH_Shape_GetWorldSpaceBounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetWorldSpaceBounds(const JPH_Shape *shape, JPH_RMatrix4x4 *centerOfMassTransform, JPH_Vec3 *scale, JPH_AABox *result)
     * }
     */
    public static MemorySegment JPH_Shape_GetWorldSpaceBounds$address() {
        return JPH_Shape_GetWorldSpaceBounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Shape_GetWorldSpaceBounds(const JPH_Shape *shape, JPH_RMatrix4x4 *centerOfMassTransform, JPH_Vec3 *scale, JPH_AABox *result)
     * }
     */
    public static void JPH_Shape_GetWorldSpaceBounds(MemorySegment shape, MemorySegment centerOfMassTransform, MemorySegment scale, MemorySegment result) {
        var mh$ = JPH_Shape_GetWorldSpaceBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetWorldSpaceBounds", shape, centerOfMassTransform, scale, result);
            }
            mh$.invokeExact(shape, centerOfMassTransform, scale, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetInnerRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetInnerRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_Shape_GetInnerRadius(const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetInnerRadius$descriptor() {
        return JPH_Shape_GetInnerRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_Shape_GetInnerRadius(const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_Shape_GetInnerRadius$handle() {
        return JPH_Shape_GetInnerRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_Shape_GetInnerRadius(const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_Shape_GetInnerRadius$address() {
        return JPH_Shape_GetInnerRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_Shape_GetInnerRadius(const JPH_Shape *shape)
     * }
     */
    public static float JPH_Shape_GetInnerRadius(MemorySegment shape) {
        var mh$ = JPH_Shape_GetInnerRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetInnerRadius", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetMassProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetMassProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetMassProperties(const JPH_Shape *shape, JPH_MassProperties *result)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetMassProperties$descriptor() {
        return JPH_Shape_GetMassProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetMassProperties(const JPH_Shape *shape, JPH_MassProperties *result)
     * }
     */
    public static MethodHandle JPH_Shape_GetMassProperties$handle() {
        return JPH_Shape_GetMassProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetMassProperties(const JPH_Shape *shape, JPH_MassProperties *result)
     * }
     */
    public static MemorySegment JPH_Shape_GetMassProperties$address() {
        return JPH_Shape_GetMassProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Shape_GetMassProperties(const JPH_Shape *shape, JPH_MassProperties *result)
     * }
     */
    public static void JPH_Shape_GetMassProperties(MemorySegment shape, MemorySegment result) {
        var mh$ = JPH_Shape_GetMassProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetMassProperties", shape, result);
            }
            mh$.invokeExact(shape, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetSurfaceNormal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetSurfaceNormal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetSurfaceNormal(const JPH_Shape *shape, JPH_SubShapeID subShapeID, JPH_Vec3 *localPosition, JPH_Vec3 *normal)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetSurfaceNormal$descriptor() {
        return JPH_Shape_GetSurfaceNormal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetSurfaceNormal(const JPH_Shape *shape, JPH_SubShapeID subShapeID, JPH_Vec3 *localPosition, JPH_Vec3 *normal)
     * }
     */
    public static MethodHandle JPH_Shape_GetSurfaceNormal$handle() {
        return JPH_Shape_GetSurfaceNormal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Shape_GetSurfaceNormal(const JPH_Shape *shape, JPH_SubShapeID subShapeID, JPH_Vec3 *localPosition, JPH_Vec3 *normal)
     * }
     */
    public static MemorySegment JPH_Shape_GetSurfaceNormal$address() {
        return JPH_Shape_GetSurfaceNormal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Shape_GetSurfaceNormal(const JPH_Shape *shape, JPH_SubShapeID subShapeID, JPH_Vec3 *localPosition, JPH_Vec3 *normal)
     * }
     */
    public static void JPH_Shape_GetSurfaceNormal(MemorySegment shape, int subShapeID, MemorySegment localPosition, MemorySegment normal) {
        var mh$ = JPH_Shape_GetSurfaceNormal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetSurfaceNormal", shape, subShapeID, localPosition, normal);
            }
            mh$.invokeExact(shape, subShapeID, localPosition, normal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Shape_GetVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Shape_GetVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_Shape_GetVolume(const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_Shape_GetVolume$descriptor() {
        return JPH_Shape_GetVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_Shape_GetVolume(const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_Shape_GetVolume$handle() {
        return JPH_Shape_GetVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_Shape_GetVolume(const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_Shape_GetVolume$address() {
        return JPH_Shape_GetVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_Shape_GetVolume(const JPH_Shape *shape)
     * }
     */
    public static float JPH_Shape_GetVolume(MemorySegment shape) {
        var mh$ = JPH_Shape_GetVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Shape_GetVolume", shape);
            }
            return (float)mh$.invokeExact(shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_Create$descriptor() {
        return JPH_BodyCreationSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create()
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_Create$handle() {
        return JPH_BodyCreationSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create()
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_Create$address() {
        return JPH_BodyCreationSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create()
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_Create() {
        var mh$ = JPH_BodyCreationSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_Create2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_SHORT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_Create2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create2(JPH_ShapeSettings *settings, const JPH_RVec3 *position, const JPH_Quat *rotation, JPH_MotionType motionType, JPH_ObjectLayer objectLayer)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_Create2$descriptor() {
        return JPH_BodyCreationSettings_Create2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create2(JPH_ShapeSettings *settings, const JPH_RVec3 *position, const JPH_Quat *rotation, JPH_MotionType motionType, JPH_ObjectLayer objectLayer)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_Create2$handle() {
        return JPH_BodyCreationSettings_Create2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create2(JPH_ShapeSettings *settings, const JPH_RVec3 *position, const JPH_Quat *rotation, JPH_MotionType motionType, JPH_ObjectLayer objectLayer)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_Create2$address() {
        return JPH_BodyCreationSettings_Create2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create2(JPH_ShapeSettings *settings, const JPH_RVec3 *position, const JPH_Quat *rotation, JPH_MotionType motionType, JPH_ObjectLayer objectLayer)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_Create2(MemorySegment settings, MemorySegment position, MemorySegment rotation, int motionType, short objectLayer) {
        var mh$ = JPH_BodyCreationSettings_Create2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_Create2", settings, position, rotation, motionType, objectLayer);
            }
            return (MemorySegment)mh$.invokeExact(settings, position, rotation, motionType, objectLayer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_Create3 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_SHORT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_Create3");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create3(const JPH_Shape *shape, const JPH_RVec3 *position, const JPH_Quat *rotation, JPH_MotionType motionType, JPH_ObjectLayer objectLayer)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_Create3$descriptor() {
        return JPH_BodyCreationSettings_Create3.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create3(const JPH_Shape *shape, const JPH_RVec3 *position, const JPH_Quat *rotation, JPH_MotionType motionType, JPH_ObjectLayer objectLayer)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_Create3$handle() {
        return JPH_BodyCreationSettings_Create3.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create3(const JPH_Shape *shape, const JPH_RVec3 *position, const JPH_Quat *rotation, JPH_MotionType motionType, JPH_ObjectLayer objectLayer)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_Create3$address() {
        return JPH_BodyCreationSettings_Create3.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyCreationSettings *JPH_BodyCreationSettings_Create3(const JPH_Shape *shape, const JPH_RVec3 *position, const JPH_Quat *rotation, JPH_MotionType motionType, JPH_ObjectLayer objectLayer)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_Create3(MemorySegment shape, MemorySegment position, MemorySegment rotation, int motionType, short objectLayer) {
        var mh$ = JPH_BodyCreationSettings_Create3.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_Create3", shape, position, rotation, motionType, objectLayer);
            }
            return (MemorySegment)mh$.invokeExact(shape, position, rotation, motionType, objectLayer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_Destroy(JPH_BodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_Destroy$descriptor() {
        return JPH_BodyCreationSettings_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_Destroy(JPH_BodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_Destroy$handle() {
        return JPH_BodyCreationSettings_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_Destroy(JPH_BodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_Destroy$address() {
        return JPH_BodyCreationSettings_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_Destroy(JPH_BodyCreationSettings *settings)
     * }
     */
    public static void JPH_BodyCreationSettings_Destroy(MemorySegment settings) {
        var mh$ = JPH_BodyCreationSettings_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_Destroy", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_GetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_GetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_GetLinearVelocity(JPH_BodyCreationSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_GetLinearVelocity$descriptor() {
        return JPH_BodyCreationSettings_GetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_GetLinearVelocity(JPH_BodyCreationSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_GetLinearVelocity$handle() {
        return JPH_BodyCreationSettings_GetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_GetLinearVelocity(JPH_BodyCreationSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_GetLinearVelocity$address() {
        return JPH_BodyCreationSettings_GetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_GetLinearVelocity(JPH_BodyCreationSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_BodyCreationSettings_GetLinearVelocity(MemorySegment settings, MemorySegment velocity) {
        var mh$ = JPH_BodyCreationSettings_GetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_GetLinearVelocity", settings, velocity);
            }
            mh$.invokeExact(settings, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_SetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_SetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetLinearVelocity(JPH_BodyCreationSettings *settings, const JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_SetLinearVelocity$descriptor() {
        return JPH_BodyCreationSettings_SetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetLinearVelocity(JPH_BodyCreationSettings *settings, const JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_SetLinearVelocity$handle() {
        return JPH_BodyCreationSettings_SetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetLinearVelocity(JPH_BodyCreationSettings *settings, const JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_SetLinearVelocity$address() {
        return JPH_BodyCreationSettings_SetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetLinearVelocity(JPH_BodyCreationSettings *settings, const JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_BodyCreationSettings_SetLinearVelocity(MemorySegment settings, MemorySegment velocity) {
        var mh$ = JPH_BodyCreationSettings_SetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_SetLinearVelocity", settings, velocity);
            }
            mh$.invokeExact(settings, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_GetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_GetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_GetAngularVelocity(JPH_BodyCreationSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_GetAngularVelocity$descriptor() {
        return JPH_BodyCreationSettings_GetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_GetAngularVelocity(JPH_BodyCreationSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_GetAngularVelocity$handle() {
        return JPH_BodyCreationSettings_GetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_GetAngularVelocity(JPH_BodyCreationSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_GetAngularVelocity$address() {
        return JPH_BodyCreationSettings_GetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_GetAngularVelocity(JPH_BodyCreationSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_BodyCreationSettings_GetAngularVelocity(MemorySegment settings, MemorySegment velocity) {
        var mh$ = JPH_BodyCreationSettings_GetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_GetAngularVelocity", settings, velocity);
            }
            mh$.invokeExact(settings, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_SetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_SetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetAngularVelocity(JPH_BodyCreationSettings *settings, const JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_SetAngularVelocity$descriptor() {
        return JPH_BodyCreationSettings_SetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetAngularVelocity(JPH_BodyCreationSettings *settings, const JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_SetAngularVelocity$handle() {
        return JPH_BodyCreationSettings_SetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetAngularVelocity(JPH_BodyCreationSettings *settings, const JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_SetAngularVelocity$address() {
        return JPH_BodyCreationSettings_SetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetAngularVelocity(JPH_BodyCreationSettings *settings, const JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_BodyCreationSettings_SetAngularVelocity(MemorySegment settings, MemorySegment velocity) {
        var mh$ = JPH_BodyCreationSettings_SetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_SetAngularVelocity", settings, velocity);
            }
            mh$.invokeExact(settings, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_GetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_GetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_BodyCreationSettings_GetMotionType(JPH_BodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_GetMotionType$descriptor() {
        return JPH_BodyCreationSettings_GetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_BodyCreationSettings_GetMotionType(JPH_BodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_GetMotionType$handle() {
        return JPH_BodyCreationSettings_GetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_BodyCreationSettings_GetMotionType(JPH_BodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_GetMotionType$address() {
        return JPH_BodyCreationSettings_GetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_BodyCreationSettings_GetMotionType(JPH_BodyCreationSettings *settings)
     * }
     */
    public static int JPH_BodyCreationSettings_GetMotionType(MemorySegment settings) {
        var mh$ = JPH_BodyCreationSettings_GetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_GetMotionType", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_SetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_SetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetMotionType(JPH_BodyCreationSettings *settings, JPH_MotionType value)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_SetMotionType$descriptor() {
        return JPH_BodyCreationSettings_SetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetMotionType(JPH_BodyCreationSettings *settings, JPH_MotionType value)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_SetMotionType$handle() {
        return JPH_BodyCreationSettings_SetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetMotionType(JPH_BodyCreationSettings *settings, JPH_MotionType value)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_SetMotionType$address() {
        return JPH_BodyCreationSettings_SetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetMotionType(JPH_BodyCreationSettings *settings, JPH_MotionType value)
     * }
     */
    public static void JPH_BodyCreationSettings_SetMotionType(MemorySegment settings, int value) {
        var mh$ = JPH_BodyCreationSettings_SetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_SetMotionType", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_GetAllowedDOFs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_GetAllowedDOFs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_AllowedDOFs JPH_BodyCreationSettings_GetAllowedDOFs(JPH_BodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_GetAllowedDOFs$descriptor() {
        return JPH_BodyCreationSettings_GetAllowedDOFs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_AllowedDOFs JPH_BodyCreationSettings_GetAllowedDOFs(JPH_BodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_GetAllowedDOFs$handle() {
        return JPH_BodyCreationSettings_GetAllowedDOFs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_AllowedDOFs JPH_BodyCreationSettings_GetAllowedDOFs(JPH_BodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_GetAllowedDOFs$address() {
        return JPH_BodyCreationSettings_GetAllowedDOFs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_AllowedDOFs JPH_BodyCreationSettings_GetAllowedDOFs(JPH_BodyCreationSettings *settings)
     * }
     */
    public static int JPH_BodyCreationSettings_GetAllowedDOFs(MemorySegment settings) {
        var mh$ = JPH_BodyCreationSettings_GetAllowedDOFs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_GetAllowedDOFs", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyCreationSettings_SetAllowedDOFs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyCreationSettings_SetAllowedDOFs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetAllowedDOFs(JPH_BodyCreationSettings *settings, JPH_AllowedDOFs value)
     * }
     */
    public static FunctionDescriptor JPH_BodyCreationSettings_SetAllowedDOFs$descriptor() {
        return JPH_BodyCreationSettings_SetAllowedDOFs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetAllowedDOFs(JPH_BodyCreationSettings *settings, JPH_AllowedDOFs value)
     * }
     */
    public static MethodHandle JPH_BodyCreationSettings_SetAllowedDOFs$handle() {
        return JPH_BodyCreationSettings_SetAllowedDOFs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetAllowedDOFs(JPH_BodyCreationSettings *settings, JPH_AllowedDOFs value)
     * }
     */
    public static MemorySegment JPH_BodyCreationSettings_SetAllowedDOFs$address() {
        return JPH_BodyCreationSettings_SetAllowedDOFs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyCreationSettings_SetAllowedDOFs(JPH_BodyCreationSettings *settings, JPH_AllowedDOFs value)
     * }
     */
    public static void JPH_BodyCreationSettings_SetAllowedDOFs(MemorySegment settings, int value) {
        var mh$ = JPH_BodyCreationSettings_SetAllowedDOFs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyCreationSettings_SetAllowedDOFs", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SoftBodyCreationSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SoftBodyCreationSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SoftBodyCreationSettings *JPH_SoftBodyCreationSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_SoftBodyCreationSettings_Create$descriptor() {
        return JPH_SoftBodyCreationSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SoftBodyCreationSettings *JPH_SoftBodyCreationSettings_Create()
     * }
     */
    public static MethodHandle JPH_SoftBodyCreationSettings_Create$handle() {
        return JPH_SoftBodyCreationSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SoftBodyCreationSettings *JPH_SoftBodyCreationSettings_Create()
     * }
     */
    public static MemorySegment JPH_SoftBodyCreationSettings_Create$address() {
        return JPH_SoftBodyCreationSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SoftBodyCreationSettings *JPH_SoftBodyCreationSettings_Create()
     * }
     */
    public static MemorySegment JPH_SoftBodyCreationSettings_Create() {
        var mh$ = JPH_SoftBodyCreationSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SoftBodyCreationSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SoftBodyCreationSettings_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SoftBodyCreationSettings_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SoftBodyCreationSettings_Destroy(JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_SoftBodyCreationSettings_Destroy$descriptor() {
        return JPH_SoftBodyCreationSettings_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SoftBodyCreationSettings_Destroy(JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_SoftBodyCreationSettings_Destroy$handle() {
        return JPH_SoftBodyCreationSettings_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SoftBodyCreationSettings_Destroy(JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_SoftBodyCreationSettings_Destroy$address() {
        return JPH_SoftBodyCreationSettings_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SoftBodyCreationSettings_Destroy(JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static void JPH_SoftBodyCreationSettings_Destroy(MemorySegment settings) {
        var mh$ = JPH_SoftBodyCreationSettings_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SoftBodyCreationSettings_Destroy", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_Destroy(JPH_ConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_Destroy$descriptor() {
        return JPH_ConstraintSettings_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_Destroy(JPH_ConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_Destroy$handle() {
        return JPH_ConstraintSettings_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_Destroy(JPH_ConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_Destroy$address() {
        return JPH_ConstraintSettings_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_Destroy(JPH_ConstraintSettings *settings)
     * }
     */
    public static void JPH_ConstraintSettings_Destroy(MemorySegment settings) {
        var mh$ = JPH_ConstraintSettings_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_Destroy", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_GetEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_GetEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ConstraintSettings_GetEnabled(JPH_ConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_GetEnabled$descriptor() {
        return JPH_ConstraintSettings_GetEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ConstraintSettings_GetEnabled(JPH_ConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_GetEnabled$handle() {
        return JPH_ConstraintSettings_GetEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ConstraintSettings_GetEnabled(JPH_ConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_GetEnabled$address() {
        return JPH_ConstraintSettings_GetEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ConstraintSettings_GetEnabled(JPH_ConstraintSettings *settings)
     * }
     */
    public static int JPH_ConstraintSettings_GetEnabled(MemorySegment settings) {
        var mh$ = JPH_ConstraintSettings_GetEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_GetEnabled", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetEnabled(JPH_ConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetEnabled$descriptor() {
        return JPH_FixedConstraintSettings_SetEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetEnabled(JPH_ConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetEnabled$handle() {
        return JPH_FixedConstraintSettings_SetEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetEnabled(JPH_ConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetEnabled$address() {
        return JPH_FixedConstraintSettings_SetEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetEnabled(JPH_ConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetEnabled(MemorySegment settings, int value) {
        var mh$ = JPH_FixedConstraintSettings_SetEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetEnabled", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_GetConstraintPriority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_GetConstraintPriority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetConstraintPriority(JPH_ConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_GetConstraintPriority$descriptor() {
        return JPH_ConstraintSettings_GetConstraintPriority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetConstraintPriority(JPH_ConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_GetConstraintPriority$handle() {
        return JPH_ConstraintSettings_GetConstraintPriority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetConstraintPriority(JPH_ConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_GetConstraintPriority$address() {
        return JPH_ConstraintSettings_GetConstraintPriority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetConstraintPriority(JPH_ConstraintSettings *settings)
     * }
     */
    public static int JPH_ConstraintSettings_GetConstraintPriority(MemorySegment settings) {
        var mh$ = JPH_ConstraintSettings_GetConstraintPriority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_GetConstraintPriority", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetConstraintPriority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetConstraintPriority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetConstraintPriority(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetConstraintPriority$descriptor() {
        return JPH_FixedConstraintSettings_SetConstraintPriority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetConstraintPriority(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetConstraintPriority$handle() {
        return JPH_FixedConstraintSettings_SetConstraintPriority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetConstraintPriority(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetConstraintPriority$address() {
        return JPH_FixedConstraintSettings_SetConstraintPriority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetConstraintPriority(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetConstraintPriority(MemorySegment settings, int value) {
        var mh$ = JPH_FixedConstraintSettings_SetConstraintPriority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetConstraintPriority", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_GetNumVelocityStepsOverride {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_GetNumVelocityStepsOverride");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetNumVelocityStepsOverride(JPH_ConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_GetNumVelocityStepsOverride$descriptor() {
        return JPH_ConstraintSettings_GetNumVelocityStepsOverride.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetNumVelocityStepsOverride(JPH_ConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_GetNumVelocityStepsOverride$handle() {
        return JPH_ConstraintSettings_GetNumVelocityStepsOverride.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetNumVelocityStepsOverride(JPH_ConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_GetNumVelocityStepsOverride$address() {
        return JPH_ConstraintSettings_GetNumVelocityStepsOverride.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetNumVelocityStepsOverride(JPH_ConstraintSettings *settings)
     * }
     */
    public static int JPH_ConstraintSettings_GetNumVelocityStepsOverride(MemorySegment settings) {
        var mh$ = JPH_ConstraintSettings_GetNumVelocityStepsOverride.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_GetNumVelocityStepsOverride", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_SetNumVelocityStepsOverride {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_SetNumVelocityStepsOverride");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetNumVelocityStepsOverride(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_SetNumVelocityStepsOverride$descriptor() {
        return JPH_ConstraintSettings_SetNumVelocityStepsOverride.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetNumVelocityStepsOverride(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_SetNumVelocityStepsOverride$handle() {
        return JPH_ConstraintSettings_SetNumVelocityStepsOverride.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetNumVelocityStepsOverride(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_SetNumVelocityStepsOverride$address() {
        return JPH_ConstraintSettings_SetNumVelocityStepsOverride.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetNumVelocityStepsOverride(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static void JPH_ConstraintSettings_SetNumVelocityStepsOverride(MemorySegment settings, int value) {
        var mh$ = JPH_ConstraintSettings_SetNumVelocityStepsOverride.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_SetNumVelocityStepsOverride", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_GetNumPositionStepsOverride {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_GetNumPositionStepsOverride");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetNumPositionStepsOverride(JPH_ConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_GetNumPositionStepsOverride$descriptor() {
        return JPH_ConstraintSettings_GetNumPositionStepsOverride.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetNumPositionStepsOverride(JPH_ConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_GetNumPositionStepsOverride$handle() {
        return JPH_ConstraintSettings_GetNumPositionStepsOverride.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetNumPositionStepsOverride(JPH_ConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_GetNumPositionStepsOverride$address() {
        return JPH_ConstraintSettings_GetNumPositionStepsOverride.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ConstraintSettings_GetNumPositionStepsOverride(JPH_ConstraintSettings *settings)
     * }
     */
    public static int JPH_ConstraintSettings_GetNumPositionStepsOverride(MemorySegment settings) {
        var mh$ = JPH_ConstraintSettings_GetNumPositionStepsOverride.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_GetNumPositionStepsOverride", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_SetNumPositionStepsOverride {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_SetNumPositionStepsOverride");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetNumPositionStepsOverride(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_SetNumPositionStepsOverride$descriptor() {
        return JPH_ConstraintSettings_SetNumPositionStepsOverride.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetNumPositionStepsOverride(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_SetNumPositionStepsOverride$handle() {
        return JPH_ConstraintSettings_SetNumPositionStepsOverride.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetNumPositionStepsOverride(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_SetNumPositionStepsOverride$address() {
        return JPH_ConstraintSettings_SetNumPositionStepsOverride.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetNumPositionStepsOverride(JPH_ConstraintSettings *settings, uint32_t value)
     * }
     */
    public static void JPH_ConstraintSettings_SetNumPositionStepsOverride(MemorySegment settings, int value) {
        var mh$ = JPH_ConstraintSettings_SetNumPositionStepsOverride.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_SetNumPositionStepsOverride", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_GetDrawConstraintSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_GetDrawConstraintSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ConstraintSettings_GetDrawConstraintSize(JPH_ConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_GetDrawConstraintSize$descriptor() {
        return JPH_ConstraintSettings_GetDrawConstraintSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ConstraintSettings_GetDrawConstraintSize(JPH_ConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_GetDrawConstraintSize$handle() {
        return JPH_ConstraintSettings_GetDrawConstraintSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ConstraintSettings_GetDrawConstraintSize(JPH_ConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_GetDrawConstraintSize$address() {
        return JPH_ConstraintSettings_GetDrawConstraintSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ConstraintSettings_GetDrawConstraintSize(JPH_ConstraintSettings *settings)
     * }
     */
    public static float JPH_ConstraintSettings_GetDrawConstraintSize(MemorySegment settings) {
        var mh$ = JPH_ConstraintSettings_GetDrawConstraintSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_GetDrawConstraintSize", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_SetDrawConstraintSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_SetDrawConstraintSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetDrawConstraintSize(JPH_ConstraintSettings *settings, float value)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_SetDrawConstraintSize$descriptor() {
        return JPH_ConstraintSettings_SetDrawConstraintSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetDrawConstraintSize(JPH_ConstraintSettings *settings, float value)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_SetDrawConstraintSize$handle() {
        return JPH_ConstraintSettings_SetDrawConstraintSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetDrawConstraintSize(JPH_ConstraintSettings *settings, float value)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_SetDrawConstraintSize$address() {
        return JPH_ConstraintSettings_SetDrawConstraintSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetDrawConstraintSize(JPH_ConstraintSettings *settings, float value)
     * }
     */
    public static void JPH_ConstraintSettings_SetDrawConstraintSize(MemorySegment settings, float value) {
        var mh$ = JPH_ConstraintSettings_SetDrawConstraintSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_SetDrawConstraintSize", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_LONG_LONG,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPH_ConstraintSettings_GetUserData(JPH_ConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_GetUserData$descriptor() {
        return JPH_ConstraintSettings_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPH_ConstraintSettings_GetUserData(JPH_ConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_GetUserData$handle() {
        return JPH_ConstraintSettings_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPH_ConstraintSettings_GetUserData(JPH_ConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_GetUserData$address() {
        return JPH_ConstraintSettings_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPH_ConstraintSettings_GetUserData(JPH_ConstraintSettings *settings)
     * }
     */
    public static long JPH_ConstraintSettings_GetUserData(MemorySegment settings) {
        var mh$ = JPH_ConstraintSettings_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_GetUserData", settings);
            }
            return (long)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConstraintSettings_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConstraintSettings_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetUserData(JPH_ConstraintSettings *settings, uint64_t value)
     * }
     */
    public static FunctionDescriptor JPH_ConstraintSettings_SetUserData$descriptor() {
        return JPH_ConstraintSettings_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetUserData(JPH_ConstraintSettings *settings, uint64_t value)
     * }
     */
    public static MethodHandle JPH_ConstraintSettings_SetUserData$handle() {
        return JPH_ConstraintSettings_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetUserData(JPH_ConstraintSettings *settings, uint64_t value)
     * }
     */
    public static MemorySegment JPH_ConstraintSettings_SetUserData$address() {
        return JPH_ConstraintSettings_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConstraintSettings_SetUserData(JPH_ConstraintSettings *settings, uint64_t value)
     * }
     */
    public static void JPH_ConstraintSettings_SetUserData(MemorySegment settings, long value) {
        var mh$ = JPH_ConstraintSettings_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConstraintSettings_SetUserData", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_GetConstraintSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_GetConstraintSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSettings *JPH_Constraint_GetConstraintSettings(JPH_Constraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_GetConstraintSettings$descriptor() {
        return JPH_Constraint_GetConstraintSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSettings *JPH_Constraint_GetConstraintSettings(JPH_Constraint *constraint)
     * }
     */
    public static MethodHandle JPH_Constraint_GetConstraintSettings$handle() {
        return JPH_Constraint_GetConstraintSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSettings *JPH_Constraint_GetConstraintSettings(JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_Constraint_GetConstraintSettings$address() {
        return JPH_Constraint_GetConstraintSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConstraintSettings *JPH_Constraint_GetConstraintSettings(JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_Constraint_GetConstraintSettings(MemorySegment constraint) {
        var mh$ = JPH_Constraint_GetConstraintSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_GetConstraintSettings", constraint);
            }
            return (MemorySegment)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_GetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_GetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConstraintType JPH_Constraint_GetType(const JPH_Constraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_GetType$descriptor() {
        return JPH_Constraint_GetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConstraintType JPH_Constraint_GetType(const JPH_Constraint *constraint)
     * }
     */
    public static MethodHandle JPH_Constraint_GetType$handle() {
        return JPH_Constraint_GetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConstraintType JPH_Constraint_GetType(const JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_Constraint_GetType$address() {
        return JPH_Constraint_GetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConstraintType JPH_Constraint_GetType(const JPH_Constraint *constraint)
     * }
     */
    public static int JPH_Constraint_GetType(MemorySegment constraint) {
        var mh$ = JPH_Constraint_GetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_GetType", constraint);
            }
            return (int)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_GetSubType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_GetSubType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSubType JPH_Constraint_GetSubType(const JPH_Constraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_GetSubType$descriptor() {
        return JPH_Constraint_GetSubType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSubType JPH_Constraint_GetSubType(const JPH_Constraint *constraint)
     * }
     */
    public static MethodHandle JPH_Constraint_GetSubType$handle() {
        return JPH_Constraint_GetSubType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSubType JPH_Constraint_GetSubType(const JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_Constraint_GetSubType$address() {
        return JPH_Constraint_GetSubType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConstraintSubType JPH_Constraint_GetSubType(const JPH_Constraint *constraint)
     * }
     */
    public static int JPH_Constraint_GetSubType(MemorySegment constraint) {
        var mh$ = JPH_Constraint_GetSubType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_GetSubType", constraint);
            }
            return (int)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_GetConstraintPriority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_GetConstraintPriority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_Constraint_GetConstraintPriority(const JPH_Constraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_GetConstraintPriority$descriptor() {
        return JPH_Constraint_GetConstraintPriority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_Constraint_GetConstraintPriority(const JPH_Constraint *constraint)
     * }
     */
    public static MethodHandle JPH_Constraint_GetConstraintPriority$handle() {
        return JPH_Constraint_GetConstraintPriority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_Constraint_GetConstraintPriority(const JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_Constraint_GetConstraintPriority$address() {
        return JPH_Constraint_GetConstraintPriority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_Constraint_GetConstraintPriority(const JPH_Constraint *constraint)
     * }
     */
    public static int JPH_Constraint_GetConstraintPriority(MemorySegment constraint) {
        var mh$ = JPH_Constraint_GetConstraintPriority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_GetConstraintPriority", constraint);
            }
            return (int)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_SetConstraintPriority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_SetConstraintPriority");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetConstraintPriority(JPH_Constraint *constraint, uint32_t priority)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_SetConstraintPriority$descriptor() {
        return JPH_Constraint_SetConstraintPriority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetConstraintPriority(JPH_Constraint *constraint, uint32_t priority)
     * }
     */
    public static MethodHandle JPH_Constraint_SetConstraintPriority$handle() {
        return JPH_Constraint_SetConstraintPriority.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetConstraintPriority(JPH_Constraint *constraint, uint32_t priority)
     * }
     */
    public static MemorySegment JPH_Constraint_SetConstraintPriority$address() {
        return JPH_Constraint_SetConstraintPriority.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetConstraintPriority(JPH_Constraint *constraint, uint32_t priority)
     * }
     */
    public static void JPH_Constraint_SetConstraintPriority(MemorySegment constraint, int priority) {
        var mh$ = JPH_Constraint_SetConstraintPriority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_SetConstraintPriority", constraint, priority);
            }
            mh$.invokeExact(constraint, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_GetEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_GetEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Constraint_GetEnabled(JPH_Constraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_GetEnabled$descriptor() {
        return JPH_Constraint_GetEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Constraint_GetEnabled(JPH_Constraint *constraint)
     * }
     */
    public static MethodHandle JPH_Constraint_GetEnabled$handle() {
        return JPH_Constraint_GetEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Constraint_GetEnabled(JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_Constraint_GetEnabled$address() {
        return JPH_Constraint_GetEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Constraint_GetEnabled(JPH_Constraint *constraint)
     * }
     */
    public static int JPH_Constraint_GetEnabled(MemorySegment constraint) {
        var mh$ = JPH_Constraint_GetEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_GetEnabled", constraint);
            }
            return (int)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_SetEnabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_SetEnabled");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetEnabled(JPH_Constraint *constraint, JPH_Bool32 enabled)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_SetEnabled$descriptor() {
        return JPH_Constraint_SetEnabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetEnabled(JPH_Constraint *constraint, JPH_Bool32 enabled)
     * }
     */
    public static MethodHandle JPH_Constraint_SetEnabled$handle() {
        return JPH_Constraint_SetEnabled.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetEnabled(JPH_Constraint *constraint, JPH_Bool32 enabled)
     * }
     */
    public static MemorySegment JPH_Constraint_SetEnabled$address() {
        return JPH_Constraint_SetEnabled.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetEnabled(JPH_Constraint *constraint, JPH_Bool32 enabled)
     * }
     */
    public static void JPH_Constraint_SetEnabled(MemorySegment constraint, int enabled) {
        var mh$ = JPH_Constraint_SetEnabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_SetEnabled", constraint, enabled);
            }
            mh$.invokeExact(constraint, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_LONG_LONG,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPH_Constraint_GetUserData(const JPH_Constraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_GetUserData$descriptor() {
        return JPH_Constraint_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPH_Constraint_GetUserData(const JPH_Constraint *constraint)
     * }
     */
    public static MethodHandle JPH_Constraint_GetUserData$handle() {
        return JPH_Constraint_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPH_Constraint_GetUserData(const JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_Constraint_GetUserData$address() {
        return JPH_Constraint_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPH_Constraint_GetUserData(const JPH_Constraint *constraint)
     * }
     */
    public static long JPH_Constraint_GetUserData(MemorySegment constraint) {
        var mh$ = JPH_Constraint_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_GetUserData", constraint);
            }
            return (long)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetUserData(JPH_Constraint *constraint, uint64_t userData)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_SetUserData$descriptor() {
        return JPH_Constraint_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetUserData(JPH_Constraint *constraint, uint64_t userData)
     * }
     */
    public static MethodHandle JPH_Constraint_SetUserData$handle() {
        return JPH_Constraint_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetUserData(JPH_Constraint *constraint, uint64_t userData)
     * }
     */
    public static MemorySegment JPH_Constraint_SetUserData$address() {
        return JPH_Constraint_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Constraint_SetUserData(JPH_Constraint *constraint, uint64_t userData)
     * }
     */
    public static void JPH_Constraint_SetUserData(MemorySegment constraint, long userData) {
        var mh$ = JPH_Constraint_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_SetUserData", constraint, userData);
            }
            mh$.invokeExact(constraint, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_NotifyShapeChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_NotifyShapeChanged");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_NotifyShapeChanged(JPH_Constraint *constraint, JPH_BodyID bodyID, JPH_Vec3 *deltaCOM)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_NotifyShapeChanged$descriptor() {
        return JPH_Constraint_NotifyShapeChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_NotifyShapeChanged(JPH_Constraint *constraint, JPH_BodyID bodyID, JPH_Vec3 *deltaCOM)
     * }
     */
    public static MethodHandle JPH_Constraint_NotifyShapeChanged$handle() {
        return JPH_Constraint_NotifyShapeChanged.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_NotifyShapeChanged(JPH_Constraint *constraint, JPH_BodyID bodyID, JPH_Vec3 *deltaCOM)
     * }
     */
    public static MemorySegment JPH_Constraint_NotifyShapeChanged$address() {
        return JPH_Constraint_NotifyShapeChanged.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Constraint_NotifyShapeChanged(JPH_Constraint *constraint, JPH_BodyID bodyID, JPH_Vec3 *deltaCOM)
     * }
     */
    public static void JPH_Constraint_NotifyShapeChanged(MemorySegment constraint, int bodyID, MemorySegment deltaCOM) {
        var mh$ = JPH_Constraint_NotifyShapeChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_NotifyShapeChanged", constraint, bodyID, deltaCOM);
            }
            mh$.invokeExact(constraint, bodyID, deltaCOM);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Constraint_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Constraint_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_Destroy(JPH_Constraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_Constraint_Destroy$descriptor() {
        return JPH_Constraint_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_Destroy(JPH_Constraint *constraint)
     * }
     */
    public static MethodHandle JPH_Constraint_Destroy$handle() {
        return JPH_Constraint_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Constraint_Destroy(JPH_Constraint *constraint)
     * }
     */
    public static MemorySegment JPH_Constraint_Destroy$address() {
        return JPH_Constraint_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Constraint_Destroy(JPH_Constraint *constraint)
     * }
     */
    public static void JPH_Constraint_Destroy(MemorySegment constraint) {
        var mh$ = JPH_Constraint_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Constraint_Destroy", constraint);
            }
            mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_FixedConstraintSettings *JPH_FixedConstraintSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_Create$descriptor() {
        return JPH_FixedConstraintSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_FixedConstraintSettings *JPH_FixedConstraintSettings_Create()
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_Create$handle() {
        return JPH_FixedConstraintSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_FixedConstraintSettings *JPH_FixedConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_Create$address() {
        return JPH_FixedConstraintSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_FixedConstraintSettings *JPH_FixedConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_Create() {
        var mh$ = JPH_FixedConstraintSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_GetSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_GetSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_FixedConstraintSettings_GetSpace(JPH_FixedConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_GetSpace$descriptor() {
        return JPH_FixedConstraintSettings_GetSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_FixedConstraintSettings_GetSpace(JPH_FixedConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_GetSpace$handle() {
        return JPH_FixedConstraintSettings_GetSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_FixedConstraintSettings_GetSpace(JPH_FixedConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_GetSpace$address() {
        return JPH_FixedConstraintSettings_GetSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_FixedConstraintSettings_GetSpace(JPH_FixedConstraintSettings *settings)
     * }
     */
    public static int JPH_FixedConstraintSettings_GetSpace(MemorySegment settings) {
        var mh$ = JPH_FixedConstraintSettings_GetSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_GetSpace", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetSpace(JPH_FixedConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetSpace$descriptor() {
        return JPH_FixedConstraintSettings_SetSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetSpace(JPH_FixedConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetSpace$handle() {
        return JPH_FixedConstraintSettings_SetSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetSpace(JPH_FixedConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetSpace$address() {
        return JPH_FixedConstraintSettings_SetSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetSpace(JPH_FixedConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetSpace(MemorySegment settings, int space) {
        var mh$ = JPH_FixedConstraintSettings_SetSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetSpace", settings, space);
            }
            mh$.invokeExact(settings, space);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_GetAutoDetectPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_GetAutoDetectPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_FixedConstraintSettings_GetAutoDetectPoint(JPH_FixedConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_GetAutoDetectPoint$descriptor() {
        return JPH_FixedConstraintSettings_GetAutoDetectPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_FixedConstraintSettings_GetAutoDetectPoint(JPH_FixedConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_GetAutoDetectPoint$handle() {
        return JPH_FixedConstraintSettings_GetAutoDetectPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_FixedConstraintSettings_GetAutoDetectPoint(JPH_FixedConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_GetAutoDetectPoint$address() {
        return JPH_FixedConstraintSettings_GetAutoDetectPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_FixedConstraintSettings_GetAutoDetectPoint(JPH_FixedConstraintSettings *settings)
     * }
     */
    public static int JPH_FixedConstraintSettings_GetAutoDetectPoint(MemorySegment settings) {
        var mh$ = JPH_FixedConstraintSettings_GetAutoDetectPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_GetAutoDetectPoint", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetAutoDetectPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetAutoDetectPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAutoDetectPoint(JPH_FixedConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetAutoDetectPoint$descriptor() {
        return JPH_FixedConstraintSettings_SetAutoDetectPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAutoDetectPoint(JPH_FixedConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetAutoDetectPoint$handle() {
        return JPH_FixedConstraintSettings_SetAutoDetectPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAutoDetectPoint(JPH_FixedConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetAutoDetectPoint$address() {
        return JPH_FixedConstraintSettings_SetAutoDetectPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAutoDetectPoint(JPH_FixedConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetAutoDetectPoint(MemorySegment settings, int value) {
        var mh$ = JPH_FixedConstraintSettings_SetAutoDetectPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetAutoDetectPoint", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_GetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_GetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetPoint1(JPH_FixedConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_GetPoint1$descriptor() {
        return JPH_FixedConstraintSettings_GetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetPoint1(JPH_FixedConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_GetPoint1$handle() {
        return JPH_FixedConstraintSettings_GetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetPoint1(JPH_FixedConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_GetPoint1$address() {
        return JPH_FixedConstraintSettings_GetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetPoint1(JPH_FixedConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_FixedConstraintSettings_GetPoint1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_FixedConstraintSettings_GetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_GetPoint1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetPoint1(JPH_FixedConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetPoint1$descriptor() {
        return JPH_FixedConstraintSettings_SetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetPoint1(JPH_FixedConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetPoint1$handle() {
        return JPH_FixedConstraintSettings_SetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetPoint1(JPH_FixedConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetPoint1$address() {
        return JPH_FixedConstraintSettings_SetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetPoint1(JPH_FixedConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetPoint1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_FixedConstraintSettings_SetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetPoint1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_GetAxisX1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_GetAxisX1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisX1(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_GetAxisX1$descriptor() {
        return JPH_FixedConstraintSettings_GetAxisX1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisX1(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_GetAxisX1$handle() {
        return JPH_FixedConstraintSettings_GetAxisX1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisX1(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_GetAxisX1$address() {
        return JPH_FixedConstraintSettings_GetAxisX1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisX1(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_FixedConstraintSettings_GetAxisX1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_FixedConstraintSettings_GetAxisX1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_GetAxisX1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetAxisX1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetAxisX1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisX1(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetAxisX1$descriptor() {
        return JPH_FixedConstraintSettings_SetAxisX1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisX1(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetAxisX1$handle() {
        return JPH_FixedConstraintSettings_SetAxisX1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisX1(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetAxisX1$address() {
        return JPH_FixedConstraintSettings_SetAxisX1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisX1(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetAxisX1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_FixedConstraintSettings_SetAxisX1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetAxisX1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_GetAxisY1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_GetAxisY1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisY1(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_GetAxisY1$descriptor() {
        return JPH_FixedConstraintSettings_GetAxisY1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisY1(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_GetAxisY1$handle() {
        return JPH_FixedConstraintSettings_GetAxisY1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisY1(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_GetAxisY1$address() {
        return JPH_FixedConstraintSettings_GetAxisY1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisY1(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_FixedConstraintSettings_GetAxisY1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_FixedConstraintSettings_GetAxisY1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_GetAxisY1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetAxisY1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetAxisY1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisY1(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetAxisY1$descriptor() {
        return JPH_FixedConstraintSettings_SetAxisY1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisY1(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetAxisY1$handle() {
        return JPH_FixedConstraintSettings_SetAxisY1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisY1(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetAxisY1$address() {
        return JPH_FixedConstraintSettings_SetAxisY1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisY1(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetAxisY1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_FixedConstraintSettings_SetAxisY1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetAxisY1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_GetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_GetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetPoint2(JPH_FixedConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_GetPoint2$descriptor() {
        return JPH_FixedConstraintSettings_GetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetPoint2(JPH_FixedConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_GetPoint2$handle() {
        return JPH_FixedConstraintSettings_GetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetPoint2(JPH_FixedConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_GetPoint2$address() {
        return JPH_FixedConstraintSettings_GetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetPoint2(JPH_FixedConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_FixedConstraintSettings_GetPoint2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_FixedConstraintSettings_GetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_GetPoint2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetPoint2(JPH_FixedConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetPoint2$descriptor() {
        return JPH_FixedConstraintSettings_SetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetPoint2(JPH_FixedConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetPoint2$handle() {
        return JPH_FixedConstraintSettings_SetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetPoint2(JPH_FixedConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetPoint2$address() {
        return JPH_FixedConstraintSettings_SetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetPoint2(JPH_FixedConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetPoint2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_FixedConstraintSettings_SetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetPoint2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_GetAxisX2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_GetAxisX2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisX2(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_GetAxisX2$descriptor() {
        return JPH_FixedConstraintSettings_GetAxisX2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisX2(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_GetAxisX2$handle() {
        return JPH_FixedConstraintSettings_GetAxisX2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisX2(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_GetAxisX2$address() {
        return JPH_FixedConstraintSettings_GetAxisX2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisX2(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_FixedConstraintSettings_GetAxisX2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_FixedConstraintSettings_GetAxisX2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_GetAxisX2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetAxisX2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetAxisX2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisX2(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetAxisX2$descriptor() {
        return JPH_FixedConstraintSettings_SetAxisX2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisX2(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetAxisX2$handle() {
        return JPH_FixedConstraintSettings_SetAxisX2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisX2(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetAxisX2$address() {
        return JPH_FixedConstraintSettings_SetAxisX2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisX2(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetAxisX2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_FixedConstraintSettings_SetAxisX2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetAxisX2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_GetAxisY2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_GetAxisY2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisY2(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_GetAxisY2$descriptor() {
        return JPH_FixedConstraintSettings_GetAxisY2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisY2(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_GetAxisY2$handle() {
        return JPH_FixedConstraintSettings_GetAxisY2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisY2(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_GetAxisY2$address() {
        return JPH_FixedConstraintSettings_GetAxisY2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_GetAxisY2(JPH_FixedConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_FixedConstraintSettings_GetAxisY2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_FixedConstraintSettings_GetAxisY2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_GetAxisY2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_SetAxisY2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_SetAxisY2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisY2(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_SetAxisY2$descriptor() {
        return JPH_FixedConstraintSettings_SetAxisY2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisY2(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_SetAxisY2$handle() {
        return JPH_FixedConstraintSettings_SetAxisY2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisY2(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_SetAxisY2$address() {
        return JPH_FixedConstraintSettings_SetAxisY2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraintSettings_SetAxisY2(JPH_FixedConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_FixedConstraintSettings_SetAxisY2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_FixedConstraintSettings_SetAxisY2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_SetAxisY2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraintSettings_CreateConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraintSettings_CreateConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_FixedConstraint *JPH_FixedConstraintSettings_CreateConstraint(JPH_FixedConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraintSettings_CreateConstraint$descriptor() {
        return JPH_FixedConstraintSettings_CreateConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_FixedConstraint *JPH_FixedConstraintSettings_CreateConstraint(JPH_FixedConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MethodHandle JPH_FixedConstraintSettings_CreateConstraint$handle() {
        return JPH_FixedConstraintSettings_CreateConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_FixedConstraint *JPH_FixedConstraintSettings_CreateConstraint(JPH_FixedConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_CreateConstraint$address() {
        return JPH_FixedConstraintSettings_CreateConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_FixedConstraint *JPH_FixedConstraintSettings_CreateConstraint(JPH_FixedConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_FixedConstraintSettings_CreateConstraint(MemorySegment settings, MemorySegment body1, MemorySegment body2) {
        var mh$ = JPH_FixedConstraintSettings_CreateConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraintSettings_CreateConstraint", settings, body1, body2);
            }
            return (MemorySegment)mh$.invokeExact(settings, body1, body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraint_GetTotalLambdaPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraint_GetTotalLambdaPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraint_GetTotalLambdaPosition(const JPH_FixedConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraint_GetTotalLambdaPosition$descriptor() {
        return JPH_FixedConstraint_GetTotalLambdaPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraint_GetTotalLambdaPosition(const JPH_FixedConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_FixedConstraint_GetTotalLambdaPosition$handle() {
        return JPH_FixedConstraint_GetTotalLambdaPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraint_GetTotalLambdaPosition(const JPH_FixedConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_FixedConstraint_GetTotalLambdaPosition$address() {
        return JPH_FixedConstraint_GetTotalLambdaPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraint_GetTotalLambdaPosition(const JPH_FixedConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_FixedConstraint_GetTotalLambdaPosition(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_FixedConstraint_GetTotalLambdaPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraint_GetTotalLambdaPosition", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_FixedConstraint_GetTotalLambdaRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_FixedConstraint_GetTotalLambdaRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraint_GetTotalLambdaRotation(const JPH_FixedConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_FixedConstraint_GetTotalLambdaRotation$descriptor() {
        return JPH_FixedConstraint_GetTotalLambdaRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraint_GetTotalLambdaRotation(const JPH_FixedConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_FixedConstraint_GetTotalLambdaRotation$handle() {
        return JPH_FixedConstraint_GetTotalLambdaRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_FixedConstraint_GetTotalLambdaRotation(const JPH_FixedConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_FixedConstraint_GetTotalLambdaRotation$address() {
        return JPH_FixedConstraint_GetTotalLambdaRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_FixedConstraint_GetTotalLambdaRotation(const JPH_FixedConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_FixedConstraint_GetTotalLambdaRotation(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_FixedConstraint_GetTotalLambdaRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_FixedConstraint_GetTotalLambdaRotation", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraintSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraintSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_DistanceConstraintSettings *JPH_DistanceConstraintSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraintSettings_Create$descriptor() {
        return JPH_DistanceConstraintSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_DistanceConstraintSettings *JPH_DistanceConstraintSettings_Create()
     * }
     */
    public static MethodHandle JPH_DistanceConstraintSettings_Create$handle() {
        return JPH_DistanceConstraintSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_DistanceConstraintSettings *JPH_DistanceConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_Create$address() {
        return JPH_DistanceConstraintSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_DistanceConstraintSettings *JPH_DistanceConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_Create() {
        var mh$ = JPH_DistanceConstraintSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraintSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraintSettings_GetSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraintSettings_GetSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_DistanceConstraintSettings_GetSpace(JPH_DistanceConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraintSettings_GetSpace$descriptor() {
        return JPH_DistanceConstraintSettings_GetSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_DistanceConstraintSettings_GetSpace(JPH_DistanceConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_DistanceConstraintSettings_GetSpace$handle() {
        return JPH_DistanceConstraintSettings_GetSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_DistanceConstraintSettings_GetSpace(JPH_DistanceConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_GetSpace$address() {
        return JPH_DistanceConstraintSettings_GetSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_DistanceConstraintSettings_GetSpace(JPH_DistanceConstraintSettings *settings)
     * }
     */
    public static int JPH_DistanceConstraintSettings_GetSpace(MemorySegment settings) {
        var mh$ = JPH_DistanceConstraintSettings_GetSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraintSettings_GetSpace", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraintSettings_SetSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraintSettings_SetSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetSpace(JPH_DistanceConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraintSettings_SetSpace$descriptor() {
        return JPH_DistanceConstraintSettings_SetSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetSpace(JPH_DistanceConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static MethodHandle JPH_DistanceConstraintSettings_SetSpace$handle() {
        return JPH_DistanceConstraintSettings_SetSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetSpace(JPH_DistanceConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_SetSpace$address() {
        return JPH_DistanceConstraintSettings_SetSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetSpace(JPH_DistanceConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static void JPH_DistanceConstraintSettings_SetSpace(MemorySegment settings, int space) {
        var mh$ = JPH_DistanceConstraintSettings_SetSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraintSettings_SetSpace", settings, space);
            }
            mh$.invokeExact(settings, space);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraintSettings_GetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraintSettings_GetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_GetPoint1(JPH_DistanceConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraintSettings_GetPoint1$descriptor() {
        return JPH_DistanceConstraintSettings_GetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_GetPoint1(JPH_DistanceConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_DistanceConstraintSettings_GetPoint1$handle() {
        return JPH_DistanceConstraintSettings_GetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_GetPoint1(JPH_DistanceConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_GetPoint1$address() {
        return JPH_DistanceConstraintSettings_GetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_GetPoint1(JPH_DistanceConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_DistanceConstraintSettings_GetPoint1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_DistanceConstraintSettings_GetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraintSettings_GetPoint1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraintSettings_SetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraintSettings_SetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetPoint1(JPH_DistanceConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraintSettings_SetPoint1$descriptor() {
        return JPH_DistanceConstraintSettings_SetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetPoint1(JPH_DistanceConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_DistanceConstraintSettings_SetPoint1$handle() {
        return JPH_DistanceConstraintSettings_SetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetPoint1(JPH_DistanceConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_SetPoint1$address() {
        return JPH_DistanceConstraintSettings_SetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetPoint1(JPH_DistanceConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_DistanceConstraintSettings_SetPoint1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_DistanceConstraintSettings_SetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraintSettings_SetPoint1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraintSettings_GetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraintSettings_GetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_GetPoint2(JPH_DistanceConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraintSettings_GetPoint2$descriptor() {
        return JPH_DistanceConstraintSettings_GetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_GetPoint2(JPH_DistanceConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_DistanceConstraintSettings_GetPoint2$handle() {
        return JPH_DistanceConstraintSettings_GetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_GetPoint2(JPH_DistanceConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_GetPoint2$address() {
        return JPH_DistanceConstraintSettings_GetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_GetPoint2(JPH_DistanceConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_DistanceConstraintSettings_GetPoint2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_DistanceConstraintSettings_GetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraintSettings_GetPoint2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraintSettings_SetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraintSettings_SetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetPoint2(JPH_DistanceConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraintSettings_SetPoint2$descriptor() {
        return JPH_DistanceConstraintSettings_SetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetPoint2(JPH_DistanceConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_DistanceConstraintSettings_SetPoint2$handle() {
        return JPH_DistanceConstraintSettings_SetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetPoint2(JPH_DistanceConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_SetPoint2$address() {
        return JPH_DistanceConstraintSettings_SetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraintSettings_SetPoint2(JPH_DistanceConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_DistanceConstraintSettings_SetPoint2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_DistanceConstraintSettings_SetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraintSettings_SetPoint2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraintSettings_CreateConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraintSettings_CreateConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_DistanceConstraint *JPH_DistanceConstraintSettings_CreateConstraint(JPH_DistanceConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraintSettings_CreateConstraint$descriptor() {
        return JPH_DistanceConstraintSettings_CreateConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_DistanceConstraint *JPH_DistanceConstraintSettings_CreateConstraint(JPH_DistanceConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MethodHandle JPH_DistanceConstraintSettings_CreateConstraint$handle() {
        return JPH_DistanceConstraintSettings_CreateConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_DistanceConstraint *JPH_DistanceConstraintSettings_CreateConstraint(JPH_DistanceConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_CreateConstraint$address() {
        return JPH_DistanceConstraintSettings_CreateConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_DistanceConstraint *JPH_DistanceConstraintSettings_CreateConstraint(JPH_DistanceConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_DistanceConstraintSettings_CreateConstraint(MemorySegment settings, MemorySegment body1, MemorySegment body2) {
        var mh$ = JPH_DistanceConstraintSettings_CreateConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraintSettings_CreateConstraint", settings, body1, body2);
            }
            return (MemorySegment)mh$.invokeExact(settings, body1, body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraint_SetDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraint_SetDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_SetDistance(JPH_DistanceConstraint *constraint, float minDistance, float maxDistance)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraint_SetDistance$descriptor() {
        return JPH_DistanceConstraint_SetDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_SetDistance(JPH_DistanceConstraint *constraint, float minDistance, float maxDistance)
     * }
     */
    public static MethodHandle JPH_DistanceConstraint_SetDistance$handle() {
        return JPH_DistanceConstraint_SetDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_SetDistance(JPH_DistanceConstraint *constraint, float minDistance, float maxDistance)
     * }
     */
    public static MemorySegment JPH_DistanceConstraint_SetDistance$address() {
        return JPH_DistanceConstraint_SetDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_SetDistance(JPH_DistanceConstraint *constraint, float minDistance, float maxDistance)
     * }
     */
    public static void JPH_DistanceConstraint_SetDistance(MemorySegment constraint, float minDistance, float maxDistance) {
        var mh$ = JPH_DistanceConstraint_SetDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraint_SetDistance", constraint, minDistance, maxDistance);
            }
            mh$.invokeExact(constraint, minDistance, maxDistance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraint_GetMinDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraint_GetMinDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetMinDistance(JPH_DistanceConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraint_GetMinDistance$descriptor() {
        return JPH_DistanceConstraint_GetMinDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetMinDistance(JPH_DistanceConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_DistanceConstraint_GetMinDistance$handle() {
        return JPH_DistanceConstraint_GetMinDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetMinDistance(JPH_DistanceConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_DistanceConstraint_GetMinDistance$address() {
        return JPH_DistanceConstraint_GetMinDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetMinDistance(JPH_DistanceConstraint *constraint)
     * }
     */
    public static float JPH_DistanceConstraint_GetMinDistance(MemorySegment constraint) {
        var mh$ = JPH_DistanceConstraint_GetMinDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraint_GetMinDistance", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraint_GetMaxDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraint_GetMaxDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetMaxDistance(JPH_DistanceConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraint_GetMaxDistance$descriptor() {
        return JPH_DistanceConstraint_GetMaxDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetMaxDistance(JPH_DistanceConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_DistanceConstraint_GetMaxDistance$handle() {
        return JPH_DistanceConstraint_GetMaxDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetMaxDistance(JPH_DistanceConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_DistanceConstraint_GetMaxDistance$address() {
        return JPH_DistanceConstraint_GetMaxDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetMaxDistance(JPH_DistanceConstraint *constraint)
     * }
     */
    public static float JPH_DistanceConstraint_GetMaxDistance(MemorySegment constraint) {
        var mh$ = JPH_DistanceConstraint_GetMaxDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraint_GetMaxDistance", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraint_GetLimitsSpringSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraint_GetLimitsSpringSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_GetLimitsSpringSettings(JPH_DistanceConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraint_GetLimitsSpringSettings$descriptor() {
        return JPH_DistanceConstraint_GetLimitsSpringSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_GetLimitsSpringSettings(JPH_DistanceConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static MethodHandle JPH_DistanceConstraint_GetLimitsSpringSettings$handle() {
        return JPH_DistanceConstraint_GetLimitsSpringSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_GetLimitsSpringSettings(JPH_DistanceConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static MemorySegment JPH_DistanceConstraint_GetLimitsSpringSettings$address() {
        return JPH_DistanceConstraint_GetLimitsSpringSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_GetLimitsSpringSettings(JPH_DistanceConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static void JPH_DistanceConstraint_GetLimitsSpringSettings(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_DistanceConstraint_GetLimitsSpringSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraint_GetLimitsSpringSettings", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraint_SetLimitsSpringSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraint_SetLimitsSpringSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_SetLimitsSpringSettings(JPH_DistanceConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraint_SetLimitsSpringSettings$descriptor() {
        return JPH_DistanceConstraint_SetLimitsSpringSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_SetLimitsSpringSettings(JPH_DistanceConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static MethodHandle JPH_DistanceConstraint_SetLimitsSpringSettings$handle() {
        return JPH_DistanceConstraint_SetLimitsSpringSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_SetLimitsSpringSettings(JPH_DistanceConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static MemorySegment JPH_DistanceConstraint_SetLimitsSpringSettings$address() {
        return JPH_DistanceConstraint_SetLimitsSpringSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_DistanceConstraint_SetLimitsSpringSettings(JPH_DistanceConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static void JPH_DistanceConstraint_SetLimitsSpringSettings(MemorySegment constraint, MemorySegment settings) {
        var mh$ = JPH_DistanceConstraint_SetLimitsSpringSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraint_SetLimitsSpringSettings", constraint, settings);
            }
            mh$.invokeExact(constraint, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_DistanceConstraint_GetTotalLambdaPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_DistanceConstraint_GetTotalLambdaPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetTotalLambdaPosition(const JPH_DistanceConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_DistanceConstraint_GetTotalLambdaPosition$descriptor() {
        return JPH_DistanceConstraint_GetTotalLambdaPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetTotalLambdaPosition(const JPH_DistanceConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_DistanceConstraint_GetTotalLambdaPosition$handle() {
        return JPH_DistanceConstraint_GetTotalLambdaPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetTotalLambdaPosition(const JPH_DistanceConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_DistanceConstraint_GetTotalLambdaPosition$address() {
        return JPH_DistanceConstraint_GetTotalLambdaPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_DistanceConstraint_GetTotalLambdaPosition(const JPH_DistanceConstraint *constraint)
     * }
     */
    public static float JPH_DistanceConstraint_GetTotalLambdaPosition(MemorySegment constraint) {
        var mh$ = JPH_DistanceConstraint_GetTotalLambdaPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_DistanceConstraint_GetTotalLambdaPosition", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraintSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraintSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_PointConstraintSettings *JPH_PointConstraintSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_PointConstraintSettings_Create$descriptor() {
        return JPH_PointConstraintSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_PointConstraintSettings *JPH_PointConstraintSettings_Create()
     * }
     */
    public static MethodHandle JPH_PointConstraintSettings_Create$handle() {
        return JPH_PointConstraintSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_PointConstraintSettings *JPH_PointConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_Create$address() {
        return JPH_PointConstraintSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_PointConstraintSettings *JPH_PointConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_Create() {
        var mh$ = JPH_PointConstraintSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraintSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraintSettings_GetSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraintSettings_GetSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_PointConstraintSettings_GetSpace(JPH_PointConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraintSettings_GetSpace$descriptor() {
        return JPH_PointConstraintSettings_GetSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_PointConstraintSettings_GetSpace(JPH_PointConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_PointConstraintSettings_GetSpace$handle() {
        return JPH_PointConstraintSettings_GetSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_PointConstraintSettings_GetSpace(JPH_PointConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_GetSpace$address() {
        return JPH_PointConstraintSettings_GetSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConstraintSpace JPH_PointConstraintSettings_GetSpace(JPH_PointConstraintSettings *settings)
     * }
     */
    public static int JPH_PointConstraintSettings_GetSpace(MemorySegment settings) {
        var mh$ = JPH_PointConstraintSettings_GetSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraintSettings_GetSpace", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraintSettings_SetSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraintSettings_SetSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetSpace(JPH_PointConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraintSettings_SetSpace$descriptor() {
        return JPH_PointConstraintSettings_SetSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetSpace(JPH_PointConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static MethodHandle JPH_PointConstraintSettings_SetSpace$handle() {
        return JPH_PointConstraintSettings_SetSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetSpace(JPH_PointConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_SetSpace$address() {
        return JPH_PointConstraintSettings_SetSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetSpace(JPH_PointConstraintSettings *settings, JPH_ConstraintSpace space)
     * }
     */
    public static void JPH_PointConstraintSettings_SetSpace(MemorySegment settings, int space) {
        var mh$ = JPH_PointConstraintSettings_SetSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraintSettings_SetSpace", settings, space);
            }
            mh$.invokeExact(settings, space);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraintSettings_GetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraintSettings_GetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_GetPoint1(JPH_PointConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraintSettings_GetPoint1$descriptor() {
        return JPH_PointConstraintSettings_GetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_GetPoint1(JPH_PointConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_PointConstraintSettings_GetPoint1$handle() {
        return JPH_PointConstraintSettings_GetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_GetPoint1(JPH_PointConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_GetPoint1$address() {
        return JPH_PointConstraintSettings_GetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_GetPoint1(JPH_PointConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_PointConstraintSettings_GetPoint1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_PointConstraintSettings_GetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraintSettings_GetPoint1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraintSettings_SetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraintSettings_SetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetPoint1(JPH_PointConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraintSettings_SetPoint1$descriptor() {
        return JPH_PointConstraintSettings_SetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetPoint1(JPH_PointConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_PointConstraintSettings_SetPoint1$handle() {
        return JPH_PointConstraintSettings_SetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetPoint1(JPH_PointConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_SetPoint1$address() {
        return JPH_PointConstraintSettings_SetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetPoint1(JPH_PointConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_PointConstraintSettings_SetPoint1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_PointConstraintSettings_SetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraintSettings_SetPoint1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraintSettings_GetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraintSettings_GetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_GetPoint2(JPH_PointConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraintSettings_GetPoint2$descriptor() {
        return JPH_PointConstraintSettings_GetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_GetPoint2(JPH_PointConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_PointConstraintSettings_GetPoint2$handle() {
        return JPH_PointConstraintSettings_GetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_GetPoint2(JPH_PointConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_GetPoint2$address() {
        return JPH_PointConstraintSettings_GetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_GetPoint2(JPH_PointConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_PointConstraintSettings_GetPoint2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_PointConstraintSettings_GetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraintSettings_GetPoint2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraintSettings_SetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraintSettings_SetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetPoint2(JPH_PointConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraintSettings_SetPoint2$descriptor() {
        return JPH_PointConstraintSettings_SetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetPoint2(JPH_PointConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_PointConstraintSettings_SetPoint2$handle() {
        return JPH_PointConstraintSettings_SetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetPoint2(JPH_PointConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_SetPoint2$address() {
        return JPH_PointConstraintSettings_SetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PointConstraintSettings_SetPoint2(JPH_PointConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_PointConstraintSettings_SetPoint2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_PointConstraintSettings_SetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraintSettings_SetPoint2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraintSettings_CreateConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraintSettings_CreateConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_PointConstraint *JPH_PointConstraintSettings_CreateConstraint(JPH_PointConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraintSettings_CreateConstraint$descriptor() {
        return JPH_PointConstraintSettings_CreateConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_PointConstraint *JPH_PointConstraintSettings_CreateConstraint(JPH_PointConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MethodHandle JPH_PointConstraintSettings_CreateConstraint$handle() {
        return JPH_PointConstraintSettings_CreateConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_PointConstraint *JPH_PointConstraintSettings_CreateConstraint(JPH_PointConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_CreateConstraint$address() {
        return JPH_PointConstraintSettings_CreateConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_PointConstraint *JPH_PointConstraintSettings_CreateConstraint(JPH_PointConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_PointConstraintSettings_CreateConstraint(MemorySegment settings, MemorySegment body1, MemorySegment body2) {
        var mh$ = JPH_PointConstraintSettings_CreateConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraintSettings_CreateConstraint", settings, body1, body2);
            }
            return (MemorySegment)mh$.invokeExact(settings, body1, body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraint_SetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraint_SetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_SetPoint1(JPH_PointConstraint *constraint, JPH_ConstraintSpace space, JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraint_SetPoint1$descriptor() {
        return JPH_PointConstraint_SetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_SetPoint1(JPH_PointConstraint *constraint, JPH_ConstraintSpace space, JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_PointConstraint_SetPoint1$handle() {
        return JPH_PointConstraint_SetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_SetPoint1(JPH_PointConstraint *constraint, JPH_ConstraintSpace space, JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_PointConstraint_SetPoint1$address() {
        return JPH_PointConstraint_SetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_SetPoint1(JPH_PointConstraint *constraint, JPH_ConstraintSpace space, JPH_RVec3 *value)
     * }
     */
    public static void JPH_PointConstraint_SetPoint1(MemorySegment constraint, int space, MemorySegment value) {
        var mh$ = JPH_PointConstraint_SetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraint_SetPoint1", constraint, space, value);
            }
            mh$.invokeExact(constraint, space, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraint_SetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraint_SetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_SetPoint2(JPH_PointConstraint *constraint, JPH_ConstraintSpace space, JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraint_SetPoint2$descriptor() {
        return JPH_PointConstraint_SetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_SetPoint2(JPH_PointConstraint *constraint, JPH_ConstraintSpace space, JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_PointConstraint_SetPoint2$handle() {
        return JPH_PointConstraint_SetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_SetPoint2(JPH_PointConstraint *constraint, JPH_ConstraintSpace space, JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_PointConstraint_SetPoint2$address() {
        return JPH_PointConstraint_SetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_SetPoint2(JPH_PointConstraint *constraint, JPH_ConstraintSpace space, JPH_RVec3 *value)
     * }
     */
    public static void JPH_PointConstraint_SetPoint2(MemorySegment constraint, int space, MemorySegment value) {
        var mh$ = JPH_PointConstraint_SetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraint_SetPoint2", constraint, space, value);
            }
            mh$.invokeExact(constraint, space, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_PointConstraint_GetTotalLambdaPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_PointConstraint_GetTotalLambdaPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_GetTotalLambdaPosition(const JPH_PointConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_PointConstraint_GetTotalLambdaPosition$descriptor() {
        return JPH_PointConstraint_GetTotalLambdaPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_GetTotalLambdaPosition(const JPH_PointConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_PointConstraint_GetTotalLambdaPosition$handle() {
        return JPH_PointConstraint_GetTotalLambdaPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_GetTotalLambdaPosition(const JPH_PointConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_PointConstraint_GetTotalLambdaPosition$address() {
        return JPH_PointConstraint_GetTotalLambdaPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_PointConstraint_GetTotalLambdaPosition(const JPH_PointConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_PointConstraint_GetTotalLambdaPosition(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_PointConstraint_GetTotalLambdaPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_PointConstraint_GetTotalLambdaPosition", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_HingeConstraintSettings *JPH_HingeConstraintSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_Create$descriptor() {
        return JPH_HingeConstraintSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_HingeConstraintSettings *JPH_HingeConstraintSettings_Create()
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_Create$handle() {
        return JPH_HingeConstraintSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_HingeConstraintSettings *JPH_HingeConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_Create$address() {
        return JPH_HingeConstraintSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_HingeConstraintSettings *JPH_HingeConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_Create() {
        var mh$ = JPH_HingeConstraintSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_GetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_GetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetPoint1(JPH_HingeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_GetPoint1$descriptor() {
        return JPH_HingeConstraintSettings_GetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetPoint1(JPH_HingeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_GetPoint1$handle() {
        return JPH_HingeConstraintSettings_GetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetPoint1(JPH_HingeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_GetPoint1$address() {
        return JPH_HingeConstraintSettings_GetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetPoint1(JPH_HingeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_HingeConstraintSettings_GetPoint1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_HingeConstraintSettings_GetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_GetPoint1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_SetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_SetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetPoint1(JPH_HingeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_SetPoint1$descriptor() {
        return JPH_HingeConstraintSettings_SetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetPoint1(JPH_HingeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_SetPoint1$handle() {
        return JPH_HingeConstraintSettings_SetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetPoint1(JPH_HingeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_SetPoint1$address() {
        return JPH_HingeConstraintSettings_SetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetPoint1(JPH_HingeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_HingeConstraintSettings_SetPoint1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_HingeConstraintSettings_SetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_SetPoint1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_GetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_GetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetPoint2(JPH_HingeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_GetPoint2$descriptor() {
        return JPH_HingeConstraintSettings_GetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetPoint2(JPH_HingeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_GetPoint2$handle() {
        return JPH_HingeConstraintSettings_GetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetPoint2(JPH_HingeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_GetPoint2$address() {
        return JPH_HingeConstraintSettings_GetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetPoint2(JPH_HingeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_HingeConstraintSettings_GetPoint2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_HingeConstraintSettings_GetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_GetPoint2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_SetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_SetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetPoint2(JPH_HingeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_SetPoint2$descriptor() {
        return JPH_HingeConstraintSettings_SetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetPoint2(JPH_HingeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_SetPoint2$handle() {
        return JPH_HingeConstraintSettings_SetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetPoint2(JPH_HingeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_SetPoint2$address() {
        return JPH_HingeConstraintSettings_SetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetPoint2(JPH_HingeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_HingeConstraintSettings_SetPoint2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_HingeConstraintSettings_SetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_SetPoint2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_SetHingeAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_SetHingeAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetHingeAxis1(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_SetHingeAxis1$descriptor() {
        return JPH_HingeConstraintSettings_SetHingeAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetHingeAxis1(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_SetHingeAxis1$handle() {
        return JPH_HingeConstraintSettings_SetHingeAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetHingeAxis1(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_SetHingeAxis1$address() {
        return JPH_HingeConstraintSettings_SetHingeAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetHingeAxis1(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_HingeConstraintSettings_SetHingeAxis1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_HingeConstraintSettings_SetHingeAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_SetHingeAxis1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_GetHingeAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_GetHingeAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetHingeAxis1(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_GetHingeAxis1$descriptor() {
        return JPH_HingeConstraintSettings_GetHingeAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetHingeAxis1(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_GetHingeAxis1$handle() {
        return JPH_HingeConstraintSettings_GetHingeAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetHingeAxis1(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_GetHingeAxis1$address() {
        return JPH_HingeConstraintSettings_GetHingeAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetHingeAxis1(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_HingeConstraintSettings_GetHingeAxis1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_HingeConstraintSettings_GetHingeAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_GetHingeAxis1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_SetNormalAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_SetNormalAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetNormalAxis1(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_SetNormalAxis1$descriptor() {
        return JPH_HingeConstraintSettings_SetNormalAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetNormalAxis1(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_SetNormalAxis1$handle() {
        return JPH_HingeConstraintSettings_SetNormalAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetNormalAxis1(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_SetNormalAxis1$address() {
        return JPH_HingeConstraintSettings_SetNormalAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetNormalAxis1(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_HingeConstraintSettings_SetNormalAxis1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_HingeConstraintSettings_SetNormalAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_SetNormalAxis1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_GetNormalAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_GetNormalAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetNormalAxis1(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_GetNormalAxis1$descriptor() {
        return JPH_HingeConstraintSettings_GetNormalAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetNormalAxis1(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_GetNormalAxis1$handle() {
        return JPH_HingeConstraintSettings_GetNormalAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetNormalAxis1(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_GetNormalAxis1$address() {
        return JPH_HingeConstraintSettings_GetNormalAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetNormalAxis1(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_HingeConstraintSettings_GetNormalAxis1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_HingeConstraintSettings_GetNormalAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_GetNormalAxis1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_SetHingeAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_SetHingeAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetHingeAxis2(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_SetHingeAxis2$descriptor() {
        return JPH_HingeConstraintSettings_SetHingeAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetHingeAxis2(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_SetHingeAxis2$handle() {
        return JPH_HingeConstraintSettings_SetHingeAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetHingeAxis2(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_SetHingeAxis2$address() {
        return JPH_HingeConstraintSettings_SetHingeAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetHingeAxis2(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_HingeConstraintSettings_SetHingeAxis2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_HingeConstraintSettings_SetHingeAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_SetHingeAxis2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_GetHingeAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_GetHingeAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetHingeAxis2(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_GetHingeAxis2$descriptor() {
        return JPH_HingeConstraintSettings_GetHingeAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetHingeAxis2(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_GetHingeAxis2$handle() {
        return JPH_HingeConstraintSettings_GetHingeAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetHingeAxis2(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_GetHingeAxis2$address() {
        return JPH_HingeConstraintSettings_GetHingeAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetHingeAxis2(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_HingeConstraintSettings_GetHingeAxis2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_HingeConstraintSettings_GetHingeAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_GetHingeAxis2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_SetNormalAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_SetNormalAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetNormalAxis2(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_SetNormalAxis2$descriptor() {
        return JPH_HingeConstraintSettings_SetNormalAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetNormalAxis2(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_SetNormalAxis2$handle() {
        return JPH_HingeConstraintSettings_SetNormalAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetNormalAxis2(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_SetNormalAxis2$address() {
        return JPH_HingeConstraintSettings_SetNormalAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_SetNormalAxis2(JPH_HingeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_HingeConstraintSettings_SetNormalAxis2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_HingeConstraintSettings_SetNormalAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_SetNormalAxis2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_GetNormalAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_GetNormalAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetNormalAxis2(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_GetNormalAxis2$descriptor() {
        return JPH_HingeConstraintSettings_GetNormalAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetNormalAxis2(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_GetNormalAxis2$handle() {
        return JPH_HingeConstraintSettings_GetNormalAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetNormalAxis2(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_GetNormalAxis2$address() {
        return JPH_HingeConstraintSettings_GetNormalAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraintSettings_GetNormalAxis2(JPH_HingeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_HingeConstraintSettings_GetNormalAxis2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_HingeConstraintSettings_GetNormalAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_GetNormalAxis2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraintSettings_CreateConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraintSettings_CreateConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_HingeConstraint *JPH_HingeConstraintSettings_CreateConstraint(JPH_HingeConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraintSettings_CreateConstraint$descriptor() {
        return JPH_HingeConstraintSettings_CreateConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_HingeConstraint *JPH_HingeConstraintSettings_CreateConstraint(JPH_HingeConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MethodHandle JPH_HingeConstraintSettings_CreateConstraint$handle() {
        return JPH_HingeConstraintSettings_CreateConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_HingeConstraint *JPH_HingeConstraintSettings_CreateConstraint(JPH_HingeConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_CreateConstraint$address() {
        return JPH_HingeConstraintSettings_CreateConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_HingeConstraint *JPH_HingeConstraintSettings_CreateConstraint(JPH_HingeConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_HingeConstraintSettings_CreateConstraint(MemorySegment settings, MemorySegment body1, MemorySegment body2) {
        var mh$ = JPH_HingeConstraintSettings_CreateConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraintSettings_CreateConstraint", settings, body1, body2);
            }
            return (MemorySegment)mh$.invokeExact(settings, body1, body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_HingeConstraintSettings *JPH_HingeConstraint_GetSettings(JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetSettings$descriptor() {
        return JPH_HingeConstraint_GetSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_HingeConstraintSettings *JPH_HingeConstraint_GetSettings(JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetSettings$handle() {
        return JPH_HingeConstraint_GetSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_HingeConstraintSettings *JPH_HingeConstraint_GetSettings(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetSettings$address() {
        return JPH_HingeConstraint_GetSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_HingeConstraintSettings *JPH_HingeConstraint_GetSettings(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetSettings(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetSettings", constraint);
            }
            return (MemorySegment)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetCurrentAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetCurrentAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetCurrentAngle(JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetCurrentAngle$descriptor() {
        return JPH_HingeConstraint_GetCurrentAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetCurrentAngle(JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetCurrentAngle$handle() {
        return JPH_HingeConstraint_GetCurrentAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetCurrentAngle(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetCurrentAngle$address() {
        return JPH_HingeConstraint_GetCurrentAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetCurrentAngle(JPH_HingeConstraint *constraint)
     * }
     */
    public static float JPH_HingeConstraint_GetCurrentAngle(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetCurrentAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetCurrentAngle", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_SetMaxFrictionTorque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_SetMaxFrictionTorque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMaxFrictionTorque(JPH_HingeConstraint *constraint, float frictionTorque)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_SetMaxFrictionTorque$descriptor() {
        return JPH_HingeConstraint_SetMaxFrictionTorque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMaxFrictionTorque(JPH_HingeConstraint *constraint, float frictionTorque)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_SetMaxFrictionTorque$handle() {
        return JPH_HingeConstraint_SetMaxFrictionTorque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMaxFrictionTorque(JPH_HingeConstraint *constraint, float frictionTorque)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_SetMaxFrictionTorque$address() {
        return JPH_HingeConstraint_SetMaxFrictionTorque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMaxFrictionTorque(JPH_HingeConstraint *constraint, float frictionTorque)
     * }
     */
    public static void JPH_HingeConstraint_SetMaxFrictionTorque(MemorySegment constraint, float frictionTorque) {
        var mh$ = JPH_HingeConstraint_SetMaxFrictionTorque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_SetMaxFrictionTorque", constraint, frictionTorque);
            }
            mh$.invokeExact(constraint, frictionTorque);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetMaxFrictionTorque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetMaxFrictionTorque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetMaxFrictionTorque(JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetMaxFrictionTorque$descriptor() {
        return JPH_HingeConstraint_GetMaxFrictionTorque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetMaxFrictionTorque(JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetMaxFrictionTorque$handle() {
        return JPH_HingeConstraint_GetMaxFrictionTorque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetMaxFrictionTorque(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetMaxFrictionTorque$address() {
        return JPH_HingeConstraint_GetMaxFrictionTorque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetMaxFrictionTorque(JPH_HingeConstraint *constraint)
     * }
     */
    public static float JPH_HingeConstraint_GetMaxFrictionTorque(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetMaxFrictionTorque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetMaxFrictionTorque", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_SetMotorSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_SetMotorSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMotorSettings(JPH_HingeConstraint *constraint, JPH_MotorSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_SetMotorSettings$descriptor() {
        return JPH_HingeConstraint_SetMotorSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMotorSettings(JPH_HingeConstraint *constraint, JPH_MotorSettings *settings)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_SetMotorSettings$handle() {
        return JPH_HingeConstraint_SetMotorSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMotorSettings(JPH_HingeConstraint *constraint, JPH_MotorSettings *settings)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_SetMotorSettings$address() {
        return JPH_HingeConstraint_SetMotorSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMotorSettings(JPH_HingeConstraint *constraint, JPH_MotorSettings *settings)
     * }
     */
    public static void JPH_HingeConstraint_SetMotorSettings(MemorySegment constraint, MemorySegment settings) {
        var mh$ = JPH_HingeConstraint_SetMotorSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_SetMotorSettings", constraint, settings);
            }
            mh$.invokeExact(constraint, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetMotorSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetMotorSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetMotorSettings(JPH_HingeConstraint *constraint, JPH_MotorSettings *result)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetMotorSettings$descriptor() {
        return JPH_HingeConstraint_GetMotorSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetMotorSettings(JPH_HingeConstraint *constraint, JPH_MotorSettings *result)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetMotorSettings$handle() {
        return JPH_HingeConstraint_GetMotorSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetMotorSettings(JPH_HingeConstraint *constraint, JPH_MotorSettings *result)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetMotorSettings$address() {
        return JPH_HingeConstraint_GetMotorSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetMotorSettings(JPH_HingeConstraint *constraint, JPH_MotorSettings *result)
     * }
     */
    public static void JPH_HingeConstraint_GetMotorSettings(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_HingeConstraint_GetMotorSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetMotorSettings", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_SetMotorState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_SetMotorState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMotorState(JPH_HingeConstraint *constraint, JPH_MotorState state)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_SetMotorState$descriptor() {
        return JPH_HingeConstraint_SetMotorState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMotorState(JPH_HingeConstraint *constraint, JPH_MotorState state)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_SetMotorState$handle() {
        return JPH_HingeConstraint_SetMotorState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMotorState(JPH_HingeConstraint *constraint, JPH_MotorState state)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_SetMotorState$address() {
        return JPH_HingeConstraint_SetMotorState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetMotorState(JPH_HingeConstraint *constraint, JPH_MotorState state)
     * }
     */
    public static void JPH_HingeConstraint_SetMotorState(MemorySegment constraint, int state) {
        var mh$ = JPH_HingeConstraint_SetMotorState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_SetMotorState", constraint, state);
            }
            mh$.invokeExact(constraint, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetMotorState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetMotorState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MotorState JPH_HingeConstraint_GetMotorState(JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetMotorState$descriptor() {
        return JPH_HingeConstraint_GetMotorState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MotorState JPH_HingeConstraint_GetMotorState(JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetMotorState$handle() {
        return JPH_HingeConstraint_GetMotorState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MotorState JPH_HingeConstraint_GetMotorState(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetMotorState$address() {
        return JPH_HingeConstraint_GetMotorState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MotorState JPH_HingeConstraint_GetMotorState(JPH_HingeConstraint *constraint)
     * }
     */
    public static int JPH_HingeConstraint_GetMotorState(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetMotorState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetMotorState", constraint);
            }
            return (int)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_SetTargetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_SetTargetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetTargetAngularVelocity(JPH_HingeConstraint *constraint, float angularVelocity)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_SetTargetAngularVelocity$descriptor() {
        return JPH_HingeConstraint_SetTargetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetTargetAngularVelocity(JPH_HingeConstraint *constraint, float angularVelocity)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_SetTargetAngularVelocity$handle() {
        return JPH_HingeConstraint_SetTargetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetTargetAngularVelocity(JPH_HingeConstraint *constraint, float angularVelocity)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_SetTargetAngularVelocity$address() {
        return JPH_HingeConstraint_SetTargetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetTargetAngularVelocity(JPH_HingeConstraint *constraint, float angularVelocity)
     * }
     */
    public static void JPH_HingeConstraint_SetTargetAngularVelocity(MemorySegment constraint, float angularVelocity) {
        var mh$ = JPH_HingeConstraint_SetTargetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_SetTargetAngularVelocity", constraint, angularVelocity);
            }
            mh$.invokeExact(constraint, angularVelocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetTargetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetTargetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTargetAngularVelocity(JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetTargetAngularVelocity$descriptor() {
        return JPH_HingeConstraint_GetTargetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTargetAngularVelocity(JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetTargetAngularVelocity$handle() {
        return JPH_HingeConstraint_GetTargetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTargetAngularVelocity(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetTargetAngularVelocity$address() {
        return JPH_HingeConstraint_GetTargetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTargetAngularVelocity(JPH_HingeConstraint *constraint)
     * }
     */
    public static float JPH_HingeConstraint_GetTargetAngularVelocity(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetTargetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetTargetAngularVelocity", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_SetTargetAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_SetTargetAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetTargetAngle(JPH_HingeConstraint *constraint, float angle)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_SetTargetAngle$descriptor() {
        return JPH_HingeConstraint_SetTargetAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetTargetAngle(JPH_HingeConstraint *constraint, float angle)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_SetTargetAngle$handle() {
        return JPH_HingeConstraint_SetTargetAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetTargetAngle(JPH_HingeConstraint *constraint, float angle)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_SetTargetAngle$address() {
        return JPH_HingeConstraint_SetTargetAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetTargetAngle(JPH_HingeConstraint *constraint, float angle)
     * }
     */
    public static void JPH_HingeConstraint_SetTargetAngle(MemorySegment constraint, float angle) {
        var mh$ = JPH_HingeConstraint_SetTargetAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_SetTargetAngle", constraint, angle);
            }
            mh$.invokeExact(constraint, angle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetTargetAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetTargetAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTargetAngle(JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetTargetAngle$descriptor() {
        return JPH_HingeConstraint_GetTargetAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTargetAngle(JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetTargetAngle$handle() {
        return JPH_HingeConstraint_GetTargetAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTargetAngle(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetTargetAngle$address() {
        return JPH_HingeConstraint_GetTargetAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTargetAngle(JPH_HingeConstraint *constraint)
     * }
     */
    public static float JPH_HingeConstraint_GetTargetAngle(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetTargetAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetTargetAngle", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_SetLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_SetLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetLimits(JPH_HingeConstraint *constraint, float inLimitsMin, float inLimitsMax)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_SetLimits$descriptor() {
        return JPH_HingeConstraint_SetLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetLimits(JPH_HingeConstraint *constraint, float inLimitsMin, float inLimitsMax)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_SetLimits$handle() {
        return JPH_HingeConstraint_SetLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetLimits(JPH_HingeConstraint *constraint, float inLimitsMin, float inLimitsMax)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_SetLimits$address() {
        return JPH_HingeConstraint_SetLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetLimits(JPH_HingeConstraint *constraint, float inLimitsMin, float inLimitsMax)
     * }
     */
    public static void JPH_HingeConstraint_SetLimits(MemorySegment constraint, float inLimitsMin, float inLimitsMax) {
        var mh$ = JPH_HingeConstraint_SetLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_SetLimits", constraint, inLimitsMin, inLimitsMax);
            }
            mh$.invokeExact(constraint, inLimitsMin, inLimitsMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetLimitsMin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetLimitsMin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetLimitsMin(JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetLimitsMin$descriptor() {
        return JPH_HingeConstraint_GetLimitsMin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetLimitsMin(JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetLimitsMin$handle() {
        return JPH_HingeConstraint_GetLimitsMin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetLimitsMin(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetLimitsMin$address() {
        return JPH_HingeConstraint_GetLimitsMin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetLimitsMin(JPH_HingeConstraint *constraint)
     * }
     */
    public static float JPH_HingeConstraint_GetLimitsMin(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetLimitsMin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetLimitsMin", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetLimitsMax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetLimitsMax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetLimitsMax(JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetLimitsMax$descriptor() {
        return JPH_HingeConstraint_GetLimitsMax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetLimitsMax(JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetLimitsMax$handle() {
        return JPH_HingeConstraint_GetLimitsMax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetLimitsMax(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetLimitsMax$address() {
        return JPH_HingeConstraint_GetLimitsMax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetLimitsMax(JPH_HingeConstraint *constraint)
     * }
     */
    public static float JPH_HingeConstraint_GetLimitsMax(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetLimitsMax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetLimitsMax", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_HasLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_HasLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_HingeConstraint_HasLimits(JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_HasLimits$descriptor() {
        return JPH_HingeConstraint_HasLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_HingeConstraint_HasLimits(JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_HasLimits$handle() {
        return JPH_HingeConstraint_HasLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_HingeConstraint_HasLimits(JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_HasLimits$address() {
        return JPH_HingeConstraint_HasLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_HingeConstraint_HasLimits(JPH_HingeConstraint *constraint)
     * }
     */
    public static int JPH_HingeConstraint_HasLimits(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_HasLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_HasLimits", constraint);
            }
            return (int)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetLimitsSpringSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetLimitsSpringSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetLimitsSpringSettings(JPH_HingeConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetLimitsSpringSettings$descriptor() {
        return JPH_HingeConstraint_GetLimitsSpringSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetLimitsSpringSettings(JPH_HingeConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetLimitsSpringSettings$handle() {
        return JPH_HingeConstraint_GetLimitsSpringSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetLimitsSpringSettings(JPH_HingeConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetLimitsSpringSettings$address() {
        return JPH_HingeConstraint_GetLimitsSpringSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetLimitsSpringSettings(JPH_HingeConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static void JPH_HingeConstraint_GetLimitsSpringSettings(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_HingeConstraint_GetLimitsSpringSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetLimitsSpringSettings", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_SetLimitsSpringSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_SetLimitsSpringSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetLimitsSpringSettings(JPH_HingeConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_SetLimitsSpringSettings$descriptor() {
        return JPH_HingeConstraint_SetLimitsSpringSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetLimitsSpringSettings(JPH_HingeConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_SetLimitsSpringSettings$handle() {
        return JPH_HingeConstraint_SetLimitsSpringSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetLimitsSpringSettings(JPH_HingeConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_SetLimitsSpringSettings$address() {
        return JPH_HingeConstraint_SetLimitsSpringSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_SetLimitsSpringSettings(JPH_HingeConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static void JPH_HingeConstraint_SetLimitsSpringSettings(MemorySegment constraint, MemorySegment settings) {
        var mh$ = JPH_HingeConstraint_SetLimitsSpringSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_SetLimitsSpringSettings", constraint, settings);
            }
            mh$.invokeExact(constraint, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetTotalLambdaPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetTotalLambdaPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetTotalLambdaPosition(const JPH_HingeConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetTotalLambdaPosition$descriptor() {
        return JPH_HingeConstraint_GetTotalLambdaPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetTotalLambdaPosition(const JPH_HingeConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetTotalLambdaPosition$handle() {
        return JPH_HingeConstraint_GetTotalLambdaPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetTotalLambdaPosition(const JPH_HingeConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetTotalLambdaPosition$address() {
        return JPH_HingeConstraint_GetTotalLambdaPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetTotalLambdaPosition(const JPH_HingeConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_HingeConstraint_GetTotalLambdaPosition(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_HingeConstraint_GetTotalLambdaPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetTotalLambdaPosition", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetTotalLambdaRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetTotalLambdaRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetTotalLambdaRotation(const JPH_HingeConstraint *constraint, float *x, float *y)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetTotalLambdaRotation$descriptor() {
        return JPH_HingeConstraint_GetTotalLambdaRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetTotalLambdaRotation(const JPH_HingeConstraint *constraint, float *x, float *y)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetTotalLambdaRotation$handle() {
        return JPH_HingeConstraint_GetTotalLambdaRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetTotalLambdaRotation(const JPH_HingeConstraint *constraint, float *x, float *y)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetTotalLambdaRotation$address() {
        return JPH_HingeConstraint_GetTotalLambdaRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_HingeConstraint_GetTotalLambdaRotation(const JPH_HingeConstraint *constraint, float *x, float *y)
     * }
     */
    public static void JPH_HingeConstraint_GetTotalLambdaRotation(MemorySegment constraint, MemorySegment x, MemorySegment y) {
        var mh$ = JPH_HingeConstraint_GetTotalLambdaRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetTotalLambdaRotation", constraint, x, y);
            }
            mh$.invokeExact(constraint, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetTotalLambdaRotationLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetTotalLambdaRotationLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTotalLambdaRotationLimits(const JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetTotalLambdaRotationLimits$descriptor() {
        return JPH_HingeConstraint_GetTotalLambdaRotationLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTotalLambdaRotationLimits(const JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetTotalLambdaRotationLimits$handle() {
        return JPH_HingeConstraint_GetTotalLambdaRotationLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTotalLambdaRotationLimits(const JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetTotalLambdaRotationLimits$address() {
        return JPH_HingeConstraint_GetTotalLambdaRotationLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTotalLambdaRotationLimits(const JPH_HingeConstraint *constraint)
     * }
     */
    public static float JPH_HingeConstraint_GetTotalLambdaRotationLimits(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetTotalLambdaRotationLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetTotalLambdaRotationLimits", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_HingeConstraint_GetTotalLambdaMotor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_HingeConstraint_GetTotalLambdaMotor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTotalLambdaMotor(const JPH_HingeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_HingeConstraint_GetTotalLambdaMotor$descriptor() {
        return JPH_HingeConstraint_GetTotalLambdaMotor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTotalLambdaMotor(const JPH_HingeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_HingeConstraint_GetTotalLambdaMotor$handle() {
        return JPH_HingeConstraint_GetTotalLambdaMotor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTotalLambdaMotor(const JPH_HingeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_HingeConstraint_GetTotalLambdaMotor$address() {
        return JPH_HingeConstraint_GetTotalLambdaMotor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_HingeConstraint_GetTotalLambdaMotor(const JPH_HingeConstraint *constraint)
     * }
     */
    public static float JPH_HingeConstraint_GetTotalLambdaMotor(MemorySegment constraint) {
        var mh$ = JPH_HingeConstraint_GetTotalLambdaMotor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_HingeConstraint_GetTotalLambdaMotor", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SliderConstraintSettings *JPH_SliderConstraintSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_Create$descriptor() {
        return JPH_SliderConstraintSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SliderConstraintSettings *JPH_SliderConstraintSettings_Create()
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_Create$handle() {
        return JPH_SliderConstraintSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SliderConstraintSettings *JPH_SliderConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_Create$address() {
        return JPH_SliderConstraintSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SliderConstraintSettings *JPH_SliderConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_Create() {
        var mh$ = JPH_SliderConstraintSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_SetSliderAxis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_SetSliderAxis");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *axis)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_SetSliderAxis$descriptor() {
        return JPH_SliderConstraintSettings_SetSliderAxis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *axis)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_SetSliderAxis$handle() {
        return JPH_SliderConstraintSettings_SetSliderAxis.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *axis)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_SetSliderAxis$address() {
        return JPH_SliderConstraintSettings_SetSliderAxis.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *axis)
     * }
     */
    public static void JPH_SliderConstraintSettings_SetSliderAxis(MemorySegment settings, MemorySegment axis) {
        var mh$ = JPH_SliderConstraintSettings_SetSliderAxis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_SetSliderAxis", settings, axis);
            }
            mh$.invokeExact(settings, axis);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_GetAutoDetectPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_GetAutoDetectPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_SliderConstraintSettings_GetAutoDetectPoint(JPH_SliderConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_GetAutoDetectPoint$descriptor() {
        return JPH_SliderConstraintSettings_GetAutoDetectPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_SliderConstraintSettings_GetAutoDetectPoint(JPH_SliderConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_GetAutoDetectPoint$handle() {
        return JPH_SliderConstraintSettings_GetAutoDetectPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_SliderConstraintSettings_GetAutoDetectPoint(JPH_SliderConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_GetAutoDetectPoint$address() {
        return JPH_SliderConstraintSettings_GetAutoDetectPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_SliderConstraintSettings_GetAutoDetectPoint(JPH_SliderConstraintSettings *settings)
     * }
     */
    public static int JPH_SliderConstraintSettings_GetAutoDetectPoint(MemorySegment settings) {
        var mh$ = JPH_SliderConstraintSettings_GetAutoDetectPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_GetAutoDetectPoint", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_SetAutoDetectPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_SetAutoDetectPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetAutoDetectPoint(JPH_SliderConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_SetAutoDetectPoint$descriptor() {
        return JPH_SliderConstraintSettings_SetAutoDetectPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetAutoDetectPoint(JPH_SliderConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_SetAutoDetectPoint$handle() {
        return JPH_SliderConstraintSettings_SetAutoDetectPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetAutoDetectPoint(JPH_SliderConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_SetAutoDetectPoint$address() {
        return JPH_SliderConstraintSettings_SetAutoDetectPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetAutoDetectPoint(JPH_SliderConstraintSettings *settings, JPH_Bool32 value)
     * }
     */
    public static void JPH_SliderConstraintSettings_SetAutoDetectPoint(MemorySegment settings, int value) {
        var mh$ = JPH_SliderConstraintSettings_SetAutoDetectPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_SetAutoDetectPoint", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_GetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_GetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetPoint1(JPH_SliderConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_GetPoint1$descriptor() {
        return JPH_SliderConstraintSettings_GetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetPoint1(JPH_SliderConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_GetPoint1$handle() {
        return JPH_SliderConstraintSettings_GetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetPoint1(JPH_SliderConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_GetPoint1$address() {
        return JPH_SliderConstraintSettings_GetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetPoint1(JPH_SliderConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_SliderConstraintSettings_GetPoint1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_SliderConstraintSettings_GetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_GetPoint1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_SetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_SetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetPoint1(JPH_SliderConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_SetPoint1$descriptor() {
        return JPH_SliderConstraintSettings_SetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetPoint1(JPH_SliderConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_SetPoint1$handle() {
        return JPH_SliderConstraintSettings_SetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetPoint1(JPH_SliderConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_SetPoint1$address() {
        return JPH_SliderConstraintSettings_SetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetPoint1(JPH_SliderConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_SliderConstraintSettings_SetPoint1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_SliderConstraintSettings_SetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_SetPoint1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_GetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_GetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetPoint2(JPH_SliderConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_GetPoint2$descriptor() {
        return JPH_SliderConstraintSettings_GetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetPoint2(JPH_SliderConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_GetPoint2$handle() {
        return JPH_SliderConstraintSettings_GetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetPoint2(JPH_SliderConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_GetPoint2$address() {
        return JPH_SliderConstraintSettings_GetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetPoint2(JPH_SliderConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_SliderConstraintSettings_GetPoint2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_SliderConstraintSettings_GetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_GetPoint2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_SetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_SetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetPoint2(JPH_SliderConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_SetPoint2$descriptor() {
        return JPH_SliderConstraintSettings_SetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetPoint2(JPH_SliderConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_SetPoint2$handle() {
        return JPH_SliderConstraintSettings_SetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetPoint2(JPH_SliderConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_SetPoint2$address() {
        return JPH_SliderConstraintSettings_SetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetPoint2(JPH_SliderConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_SliderConstraintSettings_SetPoint2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_SliderConstraintSettings_SetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_SetPoint2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_SetSliderAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_SetSliderAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis1(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_SetSliderAxis1$descriptor() {
        return JPH_SliderConstraintSettings_SetSliderAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis1(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_SetSliderAxis1$handle() {
        return JPH_SliderConstraintSettings_SetSliderAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis1(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_SetSliderAxis1$address() {
        return JPH_SliderConstraintSettings_SetSliderAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis1(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_SliderConstraintSettings_SetSliderAxis1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_SliderConstraintSettings_SetSliderAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_SetSliderAxis1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_GetSliderAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_GetSliderAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetSliderAxis1(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_GetSliderAxis1$descriptor() {
        return JPH_SliderConstraintSettings_GetSliderAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetSliderAxis1(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_GetSliderAxis1$handle() {
        return JPH_SliderConstraintSettings_GetSliderAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetSliderAxis1(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_GetSliderAxis1$address() {
        return JPH_SliderConstraintSettings_GetSliderAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetSliderAxis1(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SliderConstraintSettings_GetSliderAxis1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_SliderConstraintSettings_GetSliderAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_GetSliderAxis1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_SetNormalAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_SetNormalAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetNormalAxis1(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_SetNormalAxis1$descriptor() {
        return JPH_SliderConstraintSettings_SetNormalAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetNormalAxis1(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_SetNormalAxis1$handle() {
        return JPH_SliderConstraintSettings_SetNormalAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetNormalAxis1(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_SetNormalAxis1$address() {
        return JPH_SliderConstraintSettings_SetNormalAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetNormalAxis1(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_SliderConstraintSettings_SetNormalAxis1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_SliderConstraintSettings_SetNormalAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_SetNormalAxis1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_GetNormalAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_GetNormalAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetNormalAxis1(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_GetNormalAxis1$descriptor() {
        return JPH_SliderConstraintSettings_GetNormalAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetNormalAxis1(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_GetNormalAxis1$handle() {
        return JPH_SliderConstraintSettings_GetNormalAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetNormalAxis1(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_GetNormalAxis1$address() {
        return JPH_SliderConstraintSettings_GetNormalAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetNormalAxis1(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SliderConstraintSettings_GetNormalAxis1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_SliderConstraintSettings_GetNormalAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_GetNormalAxis1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_SetSliderAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_SetSliderAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis2(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_SetSliderAxis2$descriptor() {
        return JPH_SliderConstraintSettings_SetSliderAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis2(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_SetSliderAxis2$handle() {
        return JPH_SliderConstraintSettings_SetSliderAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis2(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_SetSliderAxis2$address() {
        return JPH_SliderConstraintSettings_SetSliderAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetSliderAxis2(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_SliderConstraintSettings_SetSliderAxis2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_SliderConstraintSettings_SetSliderAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_SetSliderAxis2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_GetSliderAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_GetSliderAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetSliderAxis2(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_GetSliderAxis2$descriptor() {
        return JPH_SliderConstraintSettings_GetSliderAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetSliderAxis2(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_GetSliderAxis2$handle() {
        return JPH_SliderConstraintSettings_GetSliderAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetSliderAxis2(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_GetSliderAxis2$address() {
        return JPH_SliderConstraintSettings_GetSliderAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetSliderAxis2(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SliderConstraintSettings_GetSliderAxis2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_SliderConstraintSettings_GetSliderAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_GetSliderAxis2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_SetNormalAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_SetNormalAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetNormalAxis2(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_SetNormalAxis2$descriptor() {
        return JPH_SliderConstraintSettings_SetNormalAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetNormalAxis2(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_SetNormalAxis2$handle() {
        return JPH_SliderConstraintSettings_SetNormalAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetNormalAxis2(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_SetNormalAxis2$address() {
        return JPH_SliderConstraintSettings_SetNormalAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_SetNormalAxis2(JPH_SliderConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_SliderConstraintSettings_SetNormalAxis2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_SliderConstraintSettings_SetNormalAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_SetNormalAxis2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_GetNormalAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_GetNormalAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetNormalAxis2(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_GetNormalAxis2$descriptor() {
        return JPH_SliderConstraintSettings_GetNormalAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetNormalAxis2(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_GetNormalAxis2$handle() {
        return JPH_SliderConstraintSettings_GetNormalAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetNormalAxis2(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_GetNormalAxis2$address() {
        return JPH_SliderConstraintSettings_GetNormalAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraintSettings_GetNormalAxis2(JPH_SliderConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SliderConstraintSettings_GetNormalAxis2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_SliderConstraintSettings_GetNormalAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_GetNormalAxis2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraintSettings_CreateConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraintSettings_CreateConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SliderConstraint *JPH_SliderConstraintSettings_CreateConstraint(JPH_SliderConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraintSettings_CreateConstraint$descriptor() {
        return JPH_SliderConstraintSettings_CreateConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SliderConstraint *JPH_SliderConstraintSettings_CreateConstraint(JPH_SliderConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MethodHandle JPH_SliderConstraintSettings_CreateConstraint$handle() {
        return JPH_SliderConstraintSettings_CreateConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SliderConstraint *JPH_SliderConstraintSettings_CreateConstraint(JPH_SliderConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_CreateConstraint$address() {
        return JPH_SliderConstraintSettings_CreateConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SliderConstraint *JPH_SliderConstraintSettings_CreateConstraint(JPH_SliderConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_SliderConstraintSettings_CreateConstraint(MemorySegment settings, MemorySegment body1, MemorySegment body2) {
        var mh$ = JPH_SliderConstraintSettings_CreateConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraintSettings_CreateConstraint", settings, body1, body2);
            }
            return (MemorySegment)mh$.invokeExact(settings, body1, body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SliderConstraintSettings *JPH_SliderConstraint_GetSettings(JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetSettings$descriptor() {
        return JPH_SliderConstraint_GetSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SliderConstraintSettings *JPH_SliderConstraint_GetSettings(JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetSettings$handle() {
        return JPH_SliderConstraint_GetSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SliderConstraintSettings *JPH_SliderConstraint_GetSettings(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetSettings$address() {
        return JPH_SliderConstraint_GetSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SliderConstraintSettings *JPH_SliderConstraint_GetSettings(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetSettings(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetSettings", constraint);
            }
            return (MemorySegment)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetCurrentPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetCurrentPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetCurrentPosition(JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetCurrentPosition$descriptor() {
        return JPH_SliderConstraint_GetCurrentPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetCurrentPosition(JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetCurrentPosition$handle() {
        return JPH_SliderConstraint_GetCurrentPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetCurrentPosition(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetCurrentPosition$address() {
        return JPH_SliderConstraint_GetCurrentPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetCurrentPosition(JPH_SliderConstraint *constraint)
     * }
     */
    public static float JPH_SliderConstraint_GetCurrentPosition(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetCurrentPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetCurrentPosition", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_SetMaxFrictionForce {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_SetMaxFrictionForce");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMaxFrictionForce(JPH_SliderConstraint *constraint, float frictionForce)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_SetMaxFrictionForce$descriptor() {
        return JPH_SliderConstraint_SetMaxFrictionForce.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMaxFrictionForce(JPH_SliderConstraint *constraint, float frictionForce)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_SetMaxFrictionForce$handle() {
        return JPH_SliderConstraint_SetMaxFrictionForce.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMaxFrictionForce(JPH_SliderConstraint *constraint, float frictionForce)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_SetMaxFrictionForce$address() {
        return JPH_SliderConstraint_SetMaxFrictionForce.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMaxFrictionForce(JPH_SliderConstraint *constraint, float frictionForce)
     * }
     */
    public static void JPH_SliderConstraint_SetMaxFrictionForce(MemorySegment constraint, float frictionForce) {
        var mh$ = JPH_SliderConstraint_SetMaxFrictionForce.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_SetMaxFrictionForce", constraint, frictionForce);
            }
            mh$.invokeExact(constraint, frictionForce);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetMaxFrictionForce {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetMaxFrictionForce");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetMaxFrictionForce(JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetMaxFrictionForce$descriptor() {
        return JPH_SliderConstraint_GetMaxFrictionForce.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetMaxFrictionForce(JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetMaxFrictionForce$handle() {
        return JPH_SliderConstraint_GetMaxFrictionForce.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetMaxFrictionForce(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetMaxFrictionForce$address() {
        return JPH_SliderConstraint_GetMaxFrictionForce.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetMaxFrictionForce(JPH_SliderConstraint *constraint)
     * }
     */
    public static float JPH_SliderConstraint_GetMaxFrictionForce(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetMaxFrictionForce.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetMaxFrictionForce", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_SetMotorSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_SetMotorSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMotorSettings(JPH_SliderConstraint *constraint, JPH_MotorSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_SetMotorSettings$descriptor() {
        return JPH_SliderConstraint_SetMotorSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMotorSettings(JPH_SliderConstraint *constraint, JPH_MotorSettings *settings)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_SetMotorSettings$handle() {
        return JPH_SliderConstraint_SetMotorSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMotorSettings(JPH_SliderConstraint *constraint, JPH_MotorSettings *settings)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_SetMotorSettings$address() {
        return JPH_SliderConstraint_SetMotorSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMotorSettings(JPH_SliderConstraint *constraint, JPH_MotorSettings *settings)
     * }
     */
    public static void JPH_SliderConstraint_SetMotorSettings(MemorySegment constraint, MemorySegment settings) {
        var mh$ = JPH_SliderConstraint_SetMotorSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_SetMotorSettings", constraint, settings);
            }
            mh$.invokeExact(constraint, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetMotorSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetMotorSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetMotorSettings(JPH_SliderConstraint *constraint, JPH_MotorSettings *result)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetMotorSettings$descriptor() {
        return JPH_SliderConstraint_GetMotorSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetMotorSettings(JPH_SliderConstraint *constraint, JPH_MotorSettings *result)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetMotorSettings$handle() {
        return JPH_SliderConstraint_GetMotorSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetMotorSettings(JPH_SliderConstraint *constraint, JPH_MotorSettings *result)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetMotorSettings$address() {
        return JPH_SliderConstraint_GetMotorSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetMotorSettings(JPH_SliderConstraint *constraint, JPH_MotorSettings *result)
     * }
     */
    public static void JPH_SliderConstraint_GetMotorSettings(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_SliderConstraint_GetMotorSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetMotorSettings", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_SetMotorState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_SetMotorState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMotorState(JPH_SliderConstraint *constraint, JPH_MotorState state)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_SetMotorState$descriptor() {
        return JPH_SliderConstraint_SetMotorState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMotorState(JPH_SliderConstraint *constraint, JPH_MotorState state)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_SetMotorState$handle() {
        return JPH_SliderConstraint_SetMotorState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMotorState(JPH_SliderConstraint *constraint, JPH_MotorState state)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_SetMotorState$address() {
        return JPH_SliderConstraint_SetMotorState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetMotorState(JPH_SliderConstraint *constraint, JPH_MotorState state)
     * }
     */
    public static void JPH_SliderConstraint_SetMotorState(MemorySegment constraint, int state) {
        var mh$ = JPH_SliderConstraint_SetMotorState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_SetMotorState", constraint, state);
            }
            mh$.invokeExact(constraint, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetMotorState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetMotorState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MotorState JPH_SliderConstraint_GetMotorState(JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetMotorState$descriptor() {
        return JPH_SliderConstraint_GetMotorState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MotorState JPH_SliderConstraint_GetMotorState(JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetMotorState$handle() {
        return JPH_SliderConstraint_GetMotorState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MotorState JPH_SliderConstraint_GetMotorState(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetMotorState$address() {
        return JPH_SliderConstraint_GetMotorState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MotorState JPH_SliderConstraint_GetMotorState(JPH_SliderConstraint *constraint)
     * }
     */
    public static int JPH_SliderConstraint_GetMotorState(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetMotorState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetMotorState", constraint);
            }
            return (int)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_SetTargetVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_SetTargetVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetTargetVelocity(JPH_SliderConstraint *constraint, float velocity)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_SetTargetVelocity$descriptor() {
        return JPH_SliderConstraint_SetTargetVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetTargetVelocity(JPH_SliderConstraint *constraint, float velocity)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_SetTargetVelocity$handle() {
        return JPH_SliderConstraint_SetTargetVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetTargetVelocity(JPH_SliderConstraint *constraint, float velocity)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_SetTargetVelocity$address() {
        return JPH_SliderConstraint_SetTargetVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetTargetVelocity(JPH_SliderConstraint *constraint, float velocity)
     * }
     */
    public static void JPH_SliderConstraint_SetTargetVelocity(MemorySegment constraint, float velocity) {
        var mh$ = JPH_SliderConstraint_SetTargetVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_SetTargetVelocity", constraint, velocity);
            }
            mh$.invokeExact(constraint, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetTargetVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetTargetVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTargetVelocity(JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetTargetVelocity$descriptor() {
        return JPH_SliderConstraint_GetTargetVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTargetVelocity(JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetTargetVelocity$handle() {
        return JPH_SliderConstraint_GetTargetVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTargetVelocity(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetTargetVelocity$address() {
        return JPH_SliderConstraint_GetTargetVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTargetVelocity(JPH_SliderConstraint *constraint)
     * }
     */
    public static float JPH_SliderConstraint_GetTargetVelocity(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetTargetVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetTargetVelocity", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_SetTargetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_SetTargetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetTargetPosition(JPH_SliderConstraint *constraint, float position)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_SetTargetPosition$descriptor() {
        return JPH_SliderConstraint_SetTargetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetTargetPosition(JPH_SliderConstraint *constraint, float position)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_SetTargetPosition$handle() {
        return JPH_SliderConstraint_SetTargetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetTargetPosition(JPH_SliderConstraint *constraint, float position)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_SetTargetPosition$address() {
        return JPH_SliderConstraint_SetTargetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetTargetPosition(JPH_SliderConstraint *constraint, float position)
     * }
     */
    public static void JPH_SliderConstraint_SetTargetPosition(MemorySegment constraint, float position) {
        var mh$ = JPH_SliderConstraint_SetTargetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_SetTargetPosition", constraint, position);
            }
            mh$.invokeExact(constraint, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetTargetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetTargetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTargetPosition(JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetTargetPosition$descriptor() {
        return JPH_SliderConstraint_GetTargetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTargetPosition(JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetTargetPosition$handle() {
        return JPH_SliderConstraint_GetTargetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTargetPosition(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetTargetPosition$address() {
        return JPH_SliderConstraint_GetTargetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTargetPosition(JPH_SliderConstraint *constraint)
     * }
     */
    public static float JPH_SliderConstraint_GetTargetPosition(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetTargetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetTargetPosition", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_SetLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_SetLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetLimits(JPH_SliderConstraint *constraint, float inLimitsMin, float inLimitsMax)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_SetLimits$descriptor() {
        return JPH_SliderConstraint_SetLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetLimits(JPH_SliderConstraint *constraint, float inLimitsMin, float inLimitsMax)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_SetLimits$handle() {
        return JPH_SliderConstraint_SetLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetLimits(JPH_SliderConstraint *constraint, float inLimitsMin, float inLimitsMax)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_SetLimits$address() {
        return JPH_SliderConstraint_SetLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetLimits(JPH_SliderConstraint *constraint, float inLimitsMin, float inLimitsMax)
     * }
     */
    public static void JPH_SliderConstraint_SetLimits(MemorySegment constraint, float inLimitsMin, float inLimitsMax) {
        var mh$ = JPH_SliderConstraint_SetLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_SetLimits", constraint, inLimitsMin, inLimitsMax);
            }
            mh$.invokeExact(constraint, inLimitsMin, inLimitsMax);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetLimitsMin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetLimitsMin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetLimitsMin(JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetLimitsMin$descriptor() {
        return JPH_SliderConstraint_GetLimitsMin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetLimitsMin(JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetLimitsMin$handle() {
        return JPH_SliderConstraint_GetLimitsMin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetLimitsMin(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetLimitsMin$address() {
        return JPH_SliderConstraint_GetLimitsMin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetLimitsMin(JPH_SliderConstraint *constraint)
     * }
     */
    public static float JPH_SliderConstraint_GetLimitsMin(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetLimitsMin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetLimitsMin", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetLimitsMax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetLimitsMax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetLimitsMax(JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetLimitsMax$descriptor() {
        return JPH_SliderConstraint_GetLimitsMax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetLimitsMax(JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetLimitsMax$handle() {
        return JPH_SliderConstraint_GetLimitsMax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetLimitsMax(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetLimitsMax$address() {
        return JPH_SliderConstraint_GetLimitsMax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetLimitsMax(JPH_SliderConstraint *constraint)
     * }
     */
    public static float JPH_SliderConstraint_GetLimitsMax(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetLimitsMax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetLimitsMax", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_HasLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_HasLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_SliderConstraint_HasLimits(JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_HasLimits$descriptor() {
        return JPH_SliderConstraint_HasLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_SliderConstraint_HasLimits(JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_HasLimits$handle() {
        return JPH_SliderConstraint_HasLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_SliderConstraint_HasLimits(JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_HasLimits$address() {
        return JPH_SliderConstraint_HasLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_SliderConstraint_HasLimits(JPH_SliderConstraint *constraint)
     * }
     */
    public static int JPH_SliderConstraint_HasLimits(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_HasLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_HasLimits", constraint);
            }
            return (int)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetLimitsSpringSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetLimitsSpringSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetLimitsSpringSettings(JPH_SliderConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetLimitsSpringSettings$descriptor() {
        return JPH_SliderConstraint_GetLimitsSpringSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetLimitsSpringSettings(JPH_SliderConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetLimitsSpringSettings$handle() {
        return JPH_SliderConstraint_GetLimitsSpringSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetLimitsSpringSettings(JPH_SliderConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetLimitsSpringSettings$address() {
        return JPH_SliderConstraint_GetLimitsSpringSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetLimitsSpringSettings(JPH_SliderConstraint *constraint, JPH_SpringSettings *result)
     * }
     */
    public static void JPH_SliderConstraint_GetLimitsSpringSettings(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_SliderConstraint_GetLimitsSpringSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetLimitsSpringSettings", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_SetLimitsSpringSettings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_SetLimitsSpringSettings");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetLimitsSpringSettings(JPH_SliderConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_SetLimitsSpringSettings$descriptor() {
        return JPH_SliderConstraint_SetLimitsSpringSettings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetLimitsSpringSettings(JPH_SliderConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_SetLimitsSpringSettings$handle() {
        return JPH_SliderConstraint_SetLimitsSpringSettings.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetLimitsSpringSettings(JPH_SliderConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_SetLimitsSpringSettings$address() {
        return JPH_SliderConstraint_SetLimitsSpringSettings.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_SetLimitsSpringSettings(JPH_SliderConstraint *constraint, JPH_SpringSettings *settings)
     * }
     */
    public static void JPH_SliderConstraint_SetLimitsSpringSettings(MemorySegment constraint, MemorySegment settings) {
        var mh$ = JPH_SliderConstraint_SetLimitsSpringSettings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_SetLimitsSpringSettings", constraint, settings);
            }
            mh$.invokeExact(constraint, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetTotalLambdaPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetTotalLambdaPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetTotalLambdaPosition(const JPH_SliderConstraint *constraint, float *x, float *y)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetTotalLambdaPosition$descriptor() {
        return JPH_SliderConstraint_GetTotalLambdaPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetTotalLambdaPosition(const JPH_SliderConstraint *constraint, float *x, float *y)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetTotalLambdaPosition$handle() {
        return JPH_SliderConstraint_GetTotalLambdaPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetTotalLambdaPosition(const JPH_SliderConstraint *constraint, float *x, float *y)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetTotalLambdaPosition$address() {
        return JPH_SliderConstraint_GetTotalLambdaPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetTotalLambdaPosition(const JPH_SliderConstraint *constraint, float *x, float *y)
     * }
     */
    public static void JPH_SliderConstraint_GetTotalLambdaPosition(MemorySegment constraint, MemorySegment x, MemorySegment y) {
        var mh$ = JPH_SliderConstraint_GetTotalLambdaPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetTotalLambdaPosition", constraint, x, y);
            }
            mh$.invokeExact(constraint, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetTotalLambdaPositionLimits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetTotalLambdaPositionLimits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTotalLambdaPositionLimits(const JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetTotalLambdaPositionLimits$descriptor() {
        return JPH_SliderConstraint_GetTotalLambdaPositionLimits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTotalLambdaPositionLimits(const JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetTotalLambdaPositionLimits$handle() {
        return JPH_SliderConstraint_GetTotalLambdaPositionLimits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTotalLambdaPositionLimits(const JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetTotalLambdaPositionLimits$address() {
        return JPH_SliderConstraint_GetTotalLambdaPositionLimits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTotalLambdaPositionLimits(const JPH_SliderConstraint *constraint)
     * }
     */
    public static float JPH_SliderConstraint_GetTotalLambdaPositionLimits(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetTotalLambdaPositionLimits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetTotalLambdaPositionLimits", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetTotalLambdaRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetTotalLambdaRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetTotalLambdaRotation(const JPH_SliderConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetTotalLambdaRotation$descriptor() {
        return JPH_SliderConstraint_GetTotalLambdaRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetTotalLambdaRotation(const JPH_SliderConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetTotalLambdaRotation$handle() {
        return JPH_SliderConstraint_GetTotalLambdaRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetTotalLambdaRotation(const JPH_SliderConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetTotalLambdaRotation$address() {
        return JPH_SliderConstraint_GetTotalLambdaRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SliderConstraint_GetTotalLambdaRotation(const JPH_SliderConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SliderConstraint_GetTotalLambdaRotation(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_SliderConstraint_GetTotalLambdaRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetTotalLambdaRotation", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SliderConstraint_GetTotalLambdaMotor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SliderConstraint_GetTotalLambdaMotor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTotalLambdaMotor(const JPH_SliderConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SliderConstraint_GetTotalLambdaMotor$descriptor() {
        return JPH_SliderConstraint_GetTotalLambdaMotor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTotalLambdaMotor(const JPH_SliderConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SliderConstraint_GetTotalLambdaMotor$handle() {
        return JPH_SliderConstraint_GetTotalLambdaMotor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTotalLambdaMotor(const JPH_SliderConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SliderConstraint_GetTotalLambdaMotor$address() {
        return JPH_SliderConstraint_GetTotalLambdaMotor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SliderConstraint_GetTotalLambdaMotor(const JPH_SliderConstraint *constraint)
     * }
     */
    public static float JPH_SliderConstraint_GetTotalLambdaMotor(MemorySegment constraint) {
        var mh$ = JPH_SliderConstraint_GetTotalLambdaMotor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SliderConstraint_GetTotalLambdaMotor", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConeConstraintSettings *JPH_ConeConstraintSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_Create$descriptor() {
        return JPH_ConeConstraintSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConeConstraintSettings *JPH_ConeConstraintSettings_Create()
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_Create$handle() {
        return JPH_ConeConstraintSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConeConstraintSettings *JPH_ConeConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_Create$address() {
        return JPH_ConeConstraintSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConeConstraintSettings *JPH_ConeConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_Create() {
        var mh$ = JPH_ConeConstraintSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_GetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_GetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetPoint1(JPH_ConeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_GetPoint1$descriptor() {
        return JPH_ConeConstraintSettings_GetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetPoint1(JPH_ConeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_GetPoint1$handle() {
        return JPH_ConeConstraintSettings_GetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetPoint1(JPH_ConeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_GetPoint1$address() {
        return JPH_ConeConstraintSettings_GetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetPoint1(JPH_ConeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_ConeConstraintSettings_GetPoint1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_ConeConstraintSettings_GetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_GetPoint1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_SetPoint1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_SetPoint1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetPoint1(JPH_ConeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_SetPoint1$descriptor() {
        return JPH_ConeConstraintSettings_SetPoint1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetPoint1(JPH_ConeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_SetPoint1$handle() {
        return JPH_ConeConstraintSettings_SetPoint1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetPoint1(JPH_ConeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_SetPoint1$address() {
        return JPH_ConeConstraintSettings_SetPoint1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetPoint1(JPH_ConeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_ConeConstraintSettings_SetPoint1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_ConeConstraintSettings_SetPoint1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_SetPoint1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_GetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_GetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetPoint2(JPH_ConeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_GetPoint2$descriptor() {
        return JPH_ConeConstraintSettings_GetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetPoint2(JPH_ConeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_GetPoint2$handle() {
        return JPH_ConeConstraintSettings_GetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetPoint2(JPH_ConeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_GetPoint2$address() {
        return JPH_ConeConstraintSettings_GetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetPoint2(JPH_ConeConstraintSettings *settings, JPH_RVec3 *result)
     * }
     */
    public static void JPH_ConeConstraintSettings_GetPoint2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_ConeConstraintSettings_GetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_GetPoint2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_SetPoint2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_SetPoint2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetPoint2(JPH_ConeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_SetPoint2$descriptor() {
        return JPH_ConeConstraintSettings_SetPoint2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetPoint2(JPH_ConeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_SetPoint2$handle() {
        return JPH_ConeConstraintSettings_SetPoint2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetPoint2(JPH_ConeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_SetPoint2$address() {
        return JPH_ConeConstraintSettings_SetPoint2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetPoint2(JPH_ConeConstraintSettings *settings, const JPH_RVec3 *value)
     * }
     */
    public static void JPH_ConeConstraintSettings_SetPoint2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_ConeConstraintSettings_SetPoint2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_SetPoint2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_SetTwistAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_SetTwistAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetTwistAxis1(JPH_ConeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_SetTwistAxis1$descriptor() {
        return JPH_ConeConstraintSettings_SetTwistAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetTwistAxis1(JPH_ConeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_SetTwistAxis1$handle() {
        return JPH_ConeConstraintSettings_SetTwistAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetTwistAxis1(JPH_ConeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_SetTwistAxis1$address() {
        return JPH_ConeConstraintSettings_SetTwistAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetTwistAxis1(JPH_ConeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_ConeConstraintSettings_SetTwistAxis1(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_ConeConstraintSettings_SetTwistAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_SetTwistAxis1", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_GetTwistAxis1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_GetTwistAxis1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetTwistAxis1(JPH_ConeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_GetTwistAxis1$descriptor() {
        return JPH_ConeConstraintSettings_GetTwistAxis1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetTwistAxis1(JPH_ConeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_GetTwistAxis1$handle() {
        return JPH_ConeConstraintSettings_GetTwistAxis1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetTwistAxis1(JPH_ConeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_GetTwistAxis1$address() {
        return JPH_ConeConstraintSettings_GetTwistAxis1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetTwistAxis1(JPH_ConeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_ConeConstraintSettings_GetTwistAxis1(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_ConeConstraintSettings_GetTwistAxis1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_GetTwistAxis1", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_SetTwistAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_SetTwistAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetTwistAxis2(JPH_ConeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_SetTwistAxis2$descriptor() {
        return JPH_ConeConstraintSettings_SetTwistAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetTwistAxis2(JPH_ConeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_SetTwistAxis2$handle() {
        return JPH_ConeConstraintSettings_SetTwistAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetTwistAxis2(JPH_ConeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_SetTwistAxis2$address() {
        return JPH_ConeConstraintSettings_SetTwistAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetTwistAxis2(JPH_ConeConstraintSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_ConeConstraintSettings_SetTwistAxis2(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_ConeConstraintSettings_SetTwistAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_SetTwistAxis2", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_GetTwistAxis2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_GetTwistAxis2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetTwistAxis2(JPH_ConeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_GetTwistAxis2$descriptor() {
        return JPH_ConeConstraintSettings_GetTwistAxis2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetTwistAxis2(JPH_ConeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_GetTwistAxis2$handle() {
        return JPH_ConeConstraintSettings_GetTwistAxis2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetTwistAxis2(JPH_ConeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_GetTwistAxis2$address() {
        return JPH_ConeConstraintSettings_GetTwistAxis2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_GetTwistAxis2(JPH_ConeConstraintSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_ConeConstraintSettings_GetTwistAxis2(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_ConeConstraintSettings_GetTwistAxis2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_GetTwistAxis2", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_SetHalfConeAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_SetHalfConeAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetHalfConeAngle(JPH_ConeConstraintSettings *settings, float halfConeAngle)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_SetHalfConeAngle$descriptor() {
        return JPH_ConeConstraintSettings_SetHalfConeAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetHalfConeAngle(JPH_ConeConstraintSettings *settings, float halfConeAngle)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_SetHalfConeAngle$handle() {
        return JPH_ConeConstraintSettings_SetHalfConeAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetHalfConeAngle(JPH_ConeConstraintSettings *settings, float halfConeAngle)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_SetHalfConeAngle$address() {
        return JPH_ConeConstraintSettings_SetHalfConeAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraintSettings_SetHalfConeAngle(JPH_ConeConstraintSettings *settings, float halfConeAngle)
     * }
     */
    public static void JPH_ConeConstraintSettings_SetHalfConeAngle(MemorySegment settings, float halfConeAngle) {
        var mh$ = JPH_ConeConstraintSettings_SetHalfConeAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_SetHalfConeAngle", settings, halfConeAngle);
            }
            mh$.invokeExact(settings, halfConeAngle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_GetHalfConeAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_GetHalfConeAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ConeConstraintSettings_GetHalfConeAngle(JPH_ConeConstraintSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_GetHalfConeAngle$descriptor() {
        return JPH_ConeConstraintSettings_GetHalfConeAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ConeConstraintSettings_GetHalfConeAngle(JPH_ConeConstraintSettings *settings)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_GetHalfConeAngle$handle() {
        return JPH_ConeConstraintSettings_GetHalfConeAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ConeConstraintSettings_GetHalfConeAngle(JPH_ConeConstraintSettings *settings)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_GetHalfConeAngle$address() {
        return JPH_ConeConstraintSettings_GetHalfConeAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ConeConstraintSettings_GetHalfConeAngle(JPH_ConeConstraintSettings *settings)
     * }
     */
    public static float JPH_ConeConstraintSettings_GetHalfConeAngle(MemorySegment settings) {
        var mh$ = JPH_ConeConstraintSettings_GetHalfConeAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_GetHalfConeAngle", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraintSettings_CreateConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraintSettings_CreateConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ConeConstraint *JPH_ConeConstraintSettings_CreateConstraint(JPH_ConeConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraintSettings_CreateConstraint$descriptor() {
        return JPH_ConeConstraintSettings_CreateConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ConeConstraint *JPH_ConeConstraintSettings_CreateConstraint(JPH_ConeConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MethodHandle JPH_ConeConstraintSettings_CreateConstraint$handle() {
        return JPH_ConeConstraintSettings_CreateConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ConeConstraint *JPH_ConeConstraintSettings_CreateConstraint(JPH_ConeConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_CreateConstraint$address() {
        return JPH_ConeConstraintSettings_CreateConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ConeConstraint *JPH_ConeConstraintSettings_CreateConstraint(JPH_ConeConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_ConeConstraintSettings_CreateConstraint(MemorySegment settings, MemorySegment body1, MemorySegment body2) {
        var mh$ = JPH_ConeConstraintSettings_CreateConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraintSettings_CreateConstraint", settings, body1, body2);
            }
            return (MemorySegment)mh$.invokeExact(settings, body1, body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraint_SetHalfConeAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraint_SetHalfConeAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraint_SetHalfConeAngle(JPH_ConeConstraint *constraint, float halfConeAngle)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraint_SetHalfConeAngle$descriptor() {
        return JPH_ConeConstraint_SetHalfConeAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraint_SetHalfConeAngle(JPH_ConeConstraint *constraint, float halfConeAngle)
     * }
     */
    public static MethodHandle JPH_ConeConstraint_SetHalfConeAngle$handle() {
        return JPH_ConeConstraint_SetHalfConeAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraint_SetHalfConeAngle(JPH_ConeConstraint *constraint, float halfConeAngle)
     * }
     */
    public static MemorySegment JPH_ConeConstraint_SetHalfConeAngle$address() {
        return JPH_ConeConstraint_SetHalfConeAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraint_SetHalfConeAngle(JPH_ConeConstraint *constraint, float halfConeAngle)
     * }
     */
    public static void JPH_ConeConstraint_SetHalfConeAngle(MemorySegment constraint, float halfConeAngle) {
        var mh$ = JPH_ConeConstraint_SetHalfConeAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraint_SetHalfConeAngle", constraint, halfConeAngle);
            }
            mh$.invokeExact(constraint, halfConeAngle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraint_GetCosHalfConeAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraint_GetCosHalfConeAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ConeConstraint_GetCosHalfConeAngle(const JPH_ConeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraint_GetCosHalfConeAngle$descriptor() {
        return JPH_ConeConstraint_GetCosHalfConeAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ConeConstraint_GetCosHalfConeAngle(const JPH_ConeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_ConeConstraint_GetCosHalfConeAngle$handle() {
        return JPH_ConeConstraint_GetCosHalfConeAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ConeConstraint_GetCosHalfConeAngle(const JPH_ConeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_ConeConstraint_GetCosHalfConeAngle$address() {
        return JPH_ConeConstraint_GetCosHalfConeAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ConeConstraint_GetCosHalfConeAngle(const JPH_ConeConstraint *constraint)
     * }
     */
    public static float JPH_ConeConstraint_GetCosHalfConeAngle(MemorySegment constraint) {
        var mh$ = JPH_ConeConstraint_GetCosHalfConeAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraint_GetCosHalfConeAngle", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraint_GetTotalLambdaPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraint_GetTotalLambdaPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraint_GetTotalLambdaPosition(const JPH_ConeConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraint_GetTotalLambdaPosition$descriptor() {
        return JPH_ConeConstraint_GetTotalLambdaPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraint_GetTotalLambdaPosition(const JPH_ConeConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_ConeConstraint_GetTotalLambdaPosition$handle() {
        return JPH_ConeConstraint_GetTotalLambdaPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ConeConstraint_GetTotalLambdaPosition(const JPH_ConeConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_ConeConstraint_GetTotalLambdaPosition$address() {
        return JPH_ConeConstraint_GetTotalLambdaPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ConeConstraint_GetTotalLambdaPosition(const JPH_ConeConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_ConeConstraint_GetTotalLambdaPosition(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_ConeConstraint_GetTotalLambdaPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraint_GetTotalLambdaPosition", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ConeConstraint_GetTotalLambdaRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ConeConstraint_GetTotalLambdaRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ConeConstraint_GetTotalLambdaRotation(const JPH_ConeConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_ConeConstraint_GetTotalLambdaRotation$descriptor() {
        return JPH_ConeConstraint_GetTotalLambdaRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ConeConstraint_GetTotalLambdaRotation(const JPH_ConeConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_ConeConstraint_GetTotalLambdaRotation$handle() {
        return JPH_ConeConstraint_GetTotalLambdaRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ConeConstraint_GetTotalLambdaRotation(const JPH_ConeConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_ConeConstraint_GetTotalLambdaRotation$address() {
        return JPH_ConeConstraint_GetTotalLambdaRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ConeConstraint_GetTotalLambdaRotation(const JPH_ConeConstraint *constraint)
     * }
     */
    public static float JPH_ConeConstraint_GetTotalLambdaRotation(MemorySegment constraint) {
        var mh$ = JPH_ConeConstraint_GetTotalLambdaRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ConeConstraint_GetTotalLambdaRotation", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SwingTwistConstraintSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SwingTwistConstraintSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SwingTwistConstraintSettings *JPH_SwingTwistConstraintSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_SwingTwistConstraintSettings_Create$descriptor() {
        return JPH_SwingTwistConstraintSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SwingTwistConstraintSettings *JPH_SwingTwistConstraintSettings_Create()
     * }
     */
    public static MethodHandle JPH_SwingTwistConstraintSettings_Create$handle() {
        return JPH_SwingTwistConstraintSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SwingTwistConstraintSettings *JPH_SwingTwistConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraintSettings_Create$address() {
        return JPH_SwingTwistConstraintSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SwingTwistConstraintSettings *JPH_SwingTwistConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraintSettings_Create() {
        var mh$ = JPH_SwingTwistConstraintSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SwingTwistConstraintSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SwingTwistConstraintSettings_CreateConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SwingTwistConstraintSettings_CreateConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SwingTwistConstraint *JPH_SwingTwistConstraintSettings_CreateConstraint(JPH_SwingTwistConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static FunctionDescriptor JPH_SwingTwistConstraintSettings_CreateConstraint$descriptor() {
        return JPH_SwingTwistConstraintSettings_CreateConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SwingTwistConstraint *JPH_SwingTwistConstraintSettings_CreateConstraint(JPH_SwingTwistConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MethodHandle JPH_SwingTwistConstraintSettings_CreateConstraint$handle() {
        return JPH_SwingTwistConstraintSettings_CreateConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SwingTwistConstraint *JPH_SwingTwistConstraintSettings_CreateConstraint(JPH_SwingTwistConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraintSettings_CreateConstraint$address() {
        return JPH_SwingTwistConstraintSettings_CreateConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SwingTwistConstraint *JPH_SwingTwistConstraintSettings_CreateConstraint(JPH_SwingTwistConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraintSettings_CreateConstraint(MemorySegment settings, MemorySegment body1, MemorySegment body2) {
        var mh$ = JPH_SwingTwistConstraintSettings_CreateConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SwingTwistConstraintSettings_CreateConstraint", settings, body1, body2);
            }
            return (MemorySegment)mh$.invokeExact(settings, body1, body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SwingTwistConstraint_GetNormalHalfConeAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SwingTwistConstraint_GetNormalHalfConeAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetNormalHalfConeAngle(JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SwingTwistConstraint_GetNormalHalfConeAngle$descriptor() {
        return JPH_SwingTwistConstraint_GetNormalHalfConeAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetNormalHalfConeAngle(JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SwingTwistConstraint_GetNormalHalfConeAngle$handle() {
        return JPH_SwingTwistConstraint_GetNormalHalfConeAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetNormalHalfConeAngle(JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraint_GetNormalHalfConeAngle$address() {
        return JPH_SwingTwistConstraint_GetNormalHalfConeAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetNormalHalfConeAngle(JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static float JPH_SwingTwistConstraint_GetNormalHalfConeAngle(MemorySegment constraint) {
        var mh$ = JPH_SwingTwistConstraint_GetNormalHalfConeAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SwingTwistConstraint_GetNormalHalfConeAngle", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SwingTwistConstraint_GetTotalLambdaPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SwingTwistConstraint_GetTotalLambdaPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SwingTwistConstraint_GetTotalLambdaPosition(const JPH_SwingTwistConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SwingTwistConstraint_GetTotalLambdaPosition$descriptor() {
        return JPH_SwingTwistConstraint_GetTotalLambdaPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SwingTwistConstraint_GetTotalLambdaPosition(const JPH_SwingTwistConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SwingTwistConstraint_GetTotalLambdaPosition$handle() {
        return JPH_SwingTwistConstraint_GetTotalLambdaPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SwingTwistConstraint_GetTotalLambdaPosition(const JPH_SwingTwistConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraint_GetTotalLambdaPosition$address() {
        return JPH_SwingTwistConstraint_GetTotalLambdaPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SwingTwistConstraint_GetTotalLambdaPosition(const JPH_SwingTwistConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SwingTwistConstraint_GetTotalLambdaPosition(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_SwingTwistConstraint_GetTotalLambdaPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SwingTwistConstraint_GetTotalLambdaPosition", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SwingTwistConstraint_GetTotalLambdaTwist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SwingTwistConstraint_GetTotalLambdaTwist");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaTwist(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SwingTwistConstraint_GetTotalLambdaTwist$descriptor() {
        return JPH_SwingTwistConstraint_GetTotalLambdaTwist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaTwist(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SwingTwistConstraint_GetTotalLambdaTwist$handle() {
        return JPH_SwingTwistConstraint_GetTotalLambdaTwist.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaTwist(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraint_GetTotalLambdaTwist$address() {
        return JPH_SwingTwistConstraint_GetTotalLambdaTwist.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaTwist(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static float JPH_SwingTwistConstraint_GetTotalLambdaTwist(MemorySegment constraint) {
        var mh$ = JPH_SwingTwistConstraint_GetTotalLambdaTwist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SwingTwistConstraint_GetTotalLambdaTwist", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SwingTwistConstraint_GetTotalLambdaSwingY {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SwingTwistConstraint_GetTotalLambdaSwingY");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaSwingY(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SwingTwistConstraint_GetTotalLambdaSwingY$descriptor() {
        return JPH_SwingTwistConstraint_GetTotalLambdaSwingY.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaSwingY(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SwingTwistConstraint_GetTotalLambdaSwingY$handle() {
        return JPH_SwingTwistConstraint_GetTotalLambdaSwingY.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaSwingY(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraint_GetTotalLambdaSwingY$address() {
        return JPH_SwingTwistConstraint_GetTotalLambdaSwingY.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaSwingY(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static float JPH_SwingTwistConstraint_GetTotalLambdaSwingY(MemorySegment constraint) {
        var mh$ = JPH_SwingTwistConstraint_GetTotalLambdaSwingY.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SwingTwistConstraint_GetTotalLambdaSwingY", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SwingTwistConstraint_GetTotalLambdaSwingZ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SwingTwistConstraint_GetTotalLambdaSwingZ");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaSwingZ(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_SwingTwistConstraint_GetTotalLambdaSwingZ$descriptor() {
        return JPH_SwingTwistConstraint_GetTotalLambdaSwingZ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaSwingZ(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_SwingTwistConstraint_GetTotalLambdaSwingZ$handle() {
        return JPH_SwingTwistConstraint_GetTotalLambdaSwingZ.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaSwingZ(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraint_GetTotalLambdaSwingZ$address() {
        return JPH_SwingTwistConstraint_GetTotalLambdaSwingZ.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SwingTwistConstraint_GetTotalLambdaSwingZ(const JPH_SwingTwistConstraint *constraint)
     * }
     */
    public static float JPH_SwingTwistConstraint_GetTotalLambdaSwingZ(MemorySegment constraint) {
        var mh$ = JPH_SwingTwistConstraint_GetTotalLambdaSwingZ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SwingTwistConstraint_GetTotalLambdaSwingZ", constraint);
            }
            return (float)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SwingTwistConstraint_GetTotalLambdaMotor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SwingTwistConstraint_GetTotalLambdaMotor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SwingTwistConstraint_GetTotalLambdaMotor(const JPH_SwingTwistConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SwingTwistConstraint_GetTotalLambdaMotor$descriptor() {
        return JPH_SwingTwistConstraint_GetTotalLambdaMotor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SwingTwistConstraint_GetTotalLambdaMotor(const JPH_SwingTwistConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SwingTwistConstraint_GetTotalLambdaMotor$handle() {
        return JPH_SwingTwistConstraint_GetTotalLambdaMotor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SwingTwistConstraint_GetTotalLambdaMotor(const JPH_SwingTwistConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SwingTwistConstraint_GetTotalLambdaMotor$address() {
        return JPH_SwingTwistConstraint_GetTotalLambdaMotor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SwingTwistConstraint_GetTotalLambdaMotor(const JPH_SwingTwistConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SwingTwistConstraint_GetTotalLambdaMotor(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_SwingTwistConstraint_GetTotalLambdaMotor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SwingTwistConstraint_GetTotalLambdaMotor", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SixDOFConstraintSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SixDOFConstraintSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SixDOFConstraintSettings *JPH_SixDOFConstraintSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_SixDOFConstraintSettings_Create$descriptor() {
        return JPH_SixDOFConstraintSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SixDOFConstraintSettings *JPH_SixDOFConstraintSettings_Create()
     * }
     */
    public static MethodHandle JPH_SixDOFConstraintSettings_Create$handle() {
        return JPH_SixDOFConstraintSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SixDOFConstraintSettings *JPH_SixDOFConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_SixDOFConstraintSettings_Create$address() {
        return JPH_SixDOFConstraintSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SixDOFConstraintSettings *JPH_SixDOFConstraintSettings_Create()
     * }
     */
    public static MemorySegment JPH_SixDOFConstraintSettings_Create() {
        var mh$ = JPH_SixDOFConstraintSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SixDOFConstraintSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SixDOFConstraintSettings_CreateConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SixDOFConstraintSettings_CreateConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SixDOFConstraint *JPH_SixDOFConstraintSettings_CreateConstraint(JPH_SixDOFConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static FunctionDescriptor JPH_SixDOFConstraintSettings_CreateConstraint$descriptor() {
        return JPH_SixDOFConstraintSettings_CreateConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SixDOFConstraint *JPH_SixDOFConstraintSettings_CreateConstraint(JPH_SixDOFConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MethodHandle JPH_SixDOFConstraintSettings_CreateConstraint$handle() {
        return JPH_SixDOFConstraintSettings_CreateConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SixDOFConstraint *JPH_SixDOFConstraintSettings_CreateConstraint(JPH_SixDOFConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_SixDOFConstraintSettings_CreateConstraint$address() {
        return JPH_SixDOFConstraintSettings_CreateConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SixDOFConstraint *JPH_SixDOFConstraintSettings_CreateConstraint(JPH_SixDOFConstraintSettings *settings, JPH_Body *body1, JPH_Body *body2)
     * }
     */
    public static MemorySegment JPH_SixDOFConstraintSettings_CreateConstraint(MemorySegment settings, MemorySegment body1, MemorySegment body2) {
        var mh$ = JPH_SixDOFConstraintSettings_CreateConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SixDOFConstraintSettings_CreateConstraint", settings, body1, body2);
            }
            return (MemorySegment)mh$.invokeExact(settings, body1, body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SixDOFConstraint_GetLimitsMin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SixDOFConstraint_GetLimitsMin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SixDOFConstraint_GetLimitsMin(JPH_SixDOFConstraint *constraint, JPH_SixDOFConstraintAxis axis)
     * }
     */
    public static FunctionDescriptor JPH_SixDOFConstraint_GetLimitsMin$descriptor() {
        return JPH_SixDOFConstraint_GetLimitsMin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SixDOFConstraint_GetLimitsMin(JPH_SixDOFConstraint *constraint, JPH_SixDOFConstraintAxis axis)
     * }
     */
    public static MethodHandle JPH_SixDOFConstraint_GetLimitsMin$handle() {
        return JPH_SixDOFConstraint_GetLimitsMin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SixDOFConstraint_GetLimitsMin(JPH_SixDOFConstraint *constraint, JPH_SixDOFConstraintAxis axis)
     * }
     */
    public static MemorySegment JPH_SixDOFConstraint_GetLimitsMin$address() {
        return JPH_SixDOFConstraint_GetLimitsMin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SixDOFConstraint_GetLimitsMin(JPH_SixDOFConstraint *constraint, JPH_SixDOFConstraintAxis axis)
     * }
     */
    public static float JPH_SixDOFConstraint_GetLimitsMin(MemorySegment constraint, int axis) {
        var mh$ = JPH_SixDOFConstraint_GetLimitsMin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SixDOFConstraint_GetLimitsMin", constraint, axis);
            }
            return (float)mh$.invokeExact(constraint, axis);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SixDOFConstraint_GetLimitsMax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SixDOFConstraint_GetLimitsMax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_SixDOFConstraint_GetLimitsMax(JPH_SixDOFConstraint *constraint, JPH_SixDOFConstraintAxis axis)
     * }
     */
    public static FunctionDescriptor JPH_SixDOFConstraint_GetLimitsMax$descriptor() {
        return JPH_SixDOFConstraint_GetLimitsMax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_SixDOFConstraint_GetLimitsMax(JPH_SixDOFConstraint *constraint, JPH_SixDOFConstraintAxis axis)
     * }
     */
    public static MethodHandle JPH_SixDOFConstraint_GetLimitsMax$handle() {
        return JPH_SixDOFConstraint_GetLimitsMax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_SixDOFConstraint_GetLimitsMax(JPH_SixDOFConstraint *constraint, JPH_SixDOFConstraintAxis axis)
     * }
     */
    public static MemorySegment JPH_SixDOFConstraint_GetLimitsMax$address() {
        return JPH_SixDOFConstraint_GetLimitsMax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_SixDOFConstraint_GetLimitsMax(JPH_SixDOFConstraint *constraint, JPH_SixDOFConstraintAxis axis)
     * }
     */
    public static float JPH_SixDOFConstraint_GetLimitsMax(MemorySegment constraint, int axis) {
        var mh$ = JPH_SixDOFConstraint_GetLimitsMax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SixDOFConstraint_GetLimitsMax", constraint, axis);
            }
            return (float)mh$.invokeExact(constraint, axis);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SixDOFConstraint_GetTotalLambdaPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SixDOFConstraint_GetTotalLambdaPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaPosition(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SixDOFConstraint_GetTotalLambdaPosition$descriptor() {
        return JPH_SixDOFConstraint_GetTotalLambdaPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaPosition(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SixDOFConstraint_GetTotalLambdaPosition$handle() {
        return JPH_SixDOFConstraint_GetTotalLambdaPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaPosition(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SixDOFConstraint_GetTotalLambdaPosition$address() {
        return JPH_SixDOFConstraint_GetTotalLambdaPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaPosition(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SixDOFConstraint_GetTotalLambdaPosition(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_SixDOFConstraint_GetTotalLambdaPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SixDOFConstraint_GetTotalLambdaPosition", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SixDOFConstraint_GetTotalLambdaRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SixDOFConstraint_GetTotalLambdaRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaRotation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SixDOFConstraint_GetTotalLambdaRotation$descriptor() {
        return JPH_SixDOFConstraint_GetTotalLambdaRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaRotation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SixDOFConstraint_GetTotalLambdaRotation$handle() {
        return JPH_SixDOFConstraint_GetTotalLambdaRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaRotation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SixDOFConstraint_GetTotalLambdaRotation$address() {
        return JPH_SixDOFConstraint_GetTotalLambdaRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaRotation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SixDOFConstraint_GetTotalLambdaRotation(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_SixDOFConstraint_GetTotalLambdaRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SixDOFConstraint_GetTotalLambdaRotation", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation$descriptor() {
        return JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation$handle() {
        return JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation$address() {
        return JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SixDOFConstraint_GetTotalLambdaMotorTranslation", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_SixDOFConstraint_GetTotalLambdaMotorRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_SixDOFConstraint_GetTotalLambdaMotorRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaMotorRotation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_SixDOFConstraint_GetTotalLambdaMotorRotation$descriptor() {
        return JPH_SixDOFConstraint_GetTotalLambdaMotorRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaMotorRotation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_SixDOFConstraint_GetTotalLambdaMotorRotation$handle() {
        return JPH_SixDOFConstraint_GetTotalLambdaMotorRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaMotorRotation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_SixDOFConstraint_GetTotalLambdaMotorRotation$address() {
        return JPH_SixDOFConstraint_GetTotalLambdaMotorRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_SixDOFConstraint_GetTotalLambdaMotorRotation(const JPH_SixDOFConstraint *constraint, JPH_Vec3 *result)
     * }
     */
    public static void JPH_SixDOFConstraint_GetTotalLambdaMotorRotation(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_SixDOFConstraint_GetTotalLambdaMotorRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_SixDOFConstraint_GetTotalLambdaMotorRotation", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TwoBodyConstraint_GetBody1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TwoBodyConstraint_GetBody1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_TwoBodyConstraint_GetBody1(JPH_TwoBodyConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_TwoBodyConstraint_GetBody1$descriptor() {
        return JPH_TwoBodyConstraint_GetBody1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_TwoBodyConstraint_GetBody1(JPH_TwoBodyConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_TwoBodyConstraint_GetBody1$handle() {
        return JPH_TwoBodyConstraint_GetBody1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_TwoBodyConstraint_GetBody1(JPH_TwoBodyConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_TwoBodyConstraint_GetBody1$address() {
        return JPH_TwoBodyConstraint_GetBody1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_TwoBodyConstraint_GetBody1(JPH_TwoBodyConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_TwoBodyConstraint_GetBody1(MemorySegment constraint) {
        var mh$ = JPH_TwoBodyConstraint_GetBody1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TwoBodyConstraint_GetBody1", constraint);
            }
            return (MemorySegment)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TwoBodyConstraint_GetBody2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TwoBodyConstraint_GetBody2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_TwoBodyConstraint_GetBody2(JPH_TwoBodyConstraint *constraint)
     * }
     */
    public static FunctionDescriptor JPH_TwoBodyConstraint_GetBody2$descriptor() {
        return JPH_TwoBodyConstraint_GetBody2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_TwoBodyConstraint_GetBody2(JPH_TwoBodyConstraint *constraint)
     * }
     */
    public static MethodHandle JPH_TwoBodyConstraint_GetBody2$handle() {
        return JPH_TwoBodyConstraint_GetBody2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_TwoBodyConstraint_GetBody2(JPH_TwoBodyConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_TwoBodyConstraint_GetBody2$address() {
        return JPH_TwoBodyConstraint_GetBody2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_TwoBodyConstraint_GetBody2(JPH_TwoBodyConstraint *constraint)
     * }
     */
    public static MemorySegment JPH_TwoBodyConstraint_GetBody2(MemorySegment constraint) {
        var mh$ = JPH_TwoBodyConstraint_GetBody2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TwoBodyConstraint_GetBody2", constraint);
            }
            return (MemorySegment)mh$.invokeExact(constraint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TwoBodyConstraint_GetConstraintToBody1Matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TwoBodyConstraint_GetConstraintToBody1Matrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_TwoBodyConstraint_GetConstraintToBody1Matrix(JPH_TwoBodyConstraint *constraint, JPH_Matrix4x4 *result)
     * }
     */
    public static FunctionDescriptor JPH_TwoBodyConstraint_GetConstraintToBody1Matrix$descriptor() {
        return JPH_TwoBodyConstraint_GetConstraintToBody1Matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_TwoBodyConstraint_GetConstraintToBody1Matrix(JPH_TwoBodyConstraint *constraint, JPH_Matrix4x4 *result)
     * }
     */
    public static MethodHandle JPH_TwoBodyConstraint_GetConstraintToBody1Matrix$handle() {
        return JPH_TwoBodyConstraint_GetConstraintToBody1Matrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_TwoBodyConstraint_GetConstraintToBody1Matrix(JPH_TwoBodyConstraint *constraint, JPH_Matrix4x4 *result)
     * }
     */
    public static MemorySegment JPH_TwoBodyConstraint_GetConstraintToBody1Matrix$address() {
        return JPH_TwoBodyConstraint_GetConstraintToBody1Matrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_TwoBodyConstraint_GetConstraintToBody1Matrix(JPH_TwoBodyConstraint *constraint, JPH_Matrix4x4 *result)
     * }
     */
    public static void JPH_TwoBodyConstraint_GetConstraintToBody1Matrix(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_TwoBodyConstraint_GetConstraintToBody1Matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TwoBodyConstraint_GetConstraintToBody1Matrix", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_TwoBodyConstraint_GetConstraintToBody2Matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_TwoBodyConstraint_GetConstraintToBody2Matrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_TwoBodyConstraint_GetConstraintToBody2Matrix(JPH_TwoBodyConstraint *constraint, JPH_Matrix4x4 *result)
     * }
     */
    public static FunctionDescriptor JPH_TwoBodyConstraint_GetConstraintToBody2Matrix$descriptor() {
        return JPH_TwoBodyConstraint_GetConstraintToBody2Matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_TwoBodyConstraint_GetConstraintToBody2Matrix(JPH_TwoBodyConstraint *constraint, JPH_Matrix4x4 *result)
     * }
     */
    public static MethodHandle JPH_TwoBodyConstraint_GetConstraintToBody2Matrix$handle() {
        return JPH_TwoBodyConstraint_GetConstraintToBody2Matrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_TwoBodyConstraint_GetConstraintToBody2Matrix(JPH_TwoBodyConstraint *constraint, JPH_Matrix4x4 *result)
     * }
     */
    public static MemorySegment JPH_TwoBodyConstraint_GetConstraintToBody2Matrix$address() {
        return JPH_TwoBodyConstraint_GetConstraintToBody2Matrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_TwoBodyConstraint_GetConstraintToBody2Matrix(JPH_TwoBodyConstraint *constraint, JPH_Matrix4x4 *result)
     * }
     */
    public static void JPH_TwoBodyConstraint_GetConstraintToBody2Matrix(MemorySegment constraint, MemorySegment result) {
        var mh$ = JPH_TwoBodyConstraint_GetConstraintToBody2Matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_TwoBodyConstraint_GetConstraintToBody2Matrix", constraint, result);
            }
            mh$.invokeExact(constraint, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_DestroyBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_DestroyBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DestroyBody(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_DestroyBody$descriptor() {
        return JPH_BodyInterface_DestroyBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DestroyBody(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_DestroyBody$handle() {
        return JPH_BodyInterface_DestroyBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DestroyBody(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_DestroyBody$address() {
        return JPH_BodyInterface_DestroyBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DestroyBody(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static void JPH_BodyInterface_DestroyBody(MemorySegment interface_, int bodyID) {
        var mh$ = JPH_BodyInterface_DestroyBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_DestroyBody", interface_, bodyID);
            }
            mh$.invokeExact(interface_, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_CreateAndAddBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_CreateAndAddBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_BodyInterface_CreateAndAddBody(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_CreateAndAddBody$descriptor() {
        return JPH_BodyInterface_CreateAndAddBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_BodyInterface_CreateAndAddBody(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_CreateAndAddBody$handle() {
        return JPH_BodyInterface_CreateAndAddBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_BodyInterface_CreateAndAddBody(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateAndAddBody$address() {
        return JPH_BodyInterface_CreateAndAddBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_BodyInterface_CreateAndAddBody(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings, JPH_Activation activationMode)
     * }
     */
    public static int JPH_BodyInterface_CreateAndAddBody(MemorySegment interface_, MemorySegment settings, int activationMode) {
        var mh$ = JPH_BodyInterface_CreateAndAddBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_CreateAndAddBody", interface_, settings, activationMode);
            }
            return (int)mh$.invokeExact(interface_, settings, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_CreateBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_CreateBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBody(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_CreateBody$descriptor() {
        return JPH_BodyInterface_CreateBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBody(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_BodyInterface_CreateBody$handle() {
        return JPH_BodyInterface_CreateBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBody(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateBody$address() {
        return JPH_BodyInterface_CreateBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBody(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateBody(MemorySegment interface_, MemorySegment settings) {
        var mh$ = JPH_BodyInterface_CreateBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_CreateBody", interface_, settings);
            }
            return (MemorySegment)mh$.invokeExact(interface_, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_CreateBodyWithID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_CreateBodyWithID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBodyWithID(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_BodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_CreateBodyWithID$descriptor() {
        return JPH_BodyInterface_CreateBodyWithID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBodyWithID(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_BodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_BodyInterface_CreateBodyWithID$handle() {
        return JPH_BodyInterface_CreateBodyWithID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBodyWithID(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_BodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateBodyWithID$address() {
        return JPH_BodyInterface_CreateBodyWithID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBodyWithID(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_BodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateBodyWithID(MemorySegment interface_, int bodyID, MemorySegment settings) {
        var mh$ = JPH_BodyInterface_CreateBodyWithID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_CreateBodyWithID", interface_, bodyID, settings);
            }
            return (MemorySegment)mh$.invokeExact(interface_, bodyID, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_CreateBodyWithoutID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_CreateBodyWithoutID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBodyWithoutID(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_CreateBodyWithoutID$descriptor() {
        return JPH_BodyInterface_CreateBodyWithoutID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBodyWithoutID(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_BodyInterface_CreateBodyWithoutID$handle() {
        return JPH_BodyInterface_CreateBodyWithoutID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBodyWithoutID(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateBodyWithoutID$address() {
        return JPH_BodyInterface_CreateBodyWithoutID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateBodyWithoutID(JPH_BodyInterface *interface, JPH_BodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateBodyWithoutID(MemorySegment interface_, MemorySegment settings) {
        var mh$ = JPH_BodyInterface_CreateBodyWithoutID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_CreateBodyWithoutID", interface_, settings);
            }
            return (MemorySegment)mh$.invokeExact(interface_, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_DestroyBodyWithoutID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_DestroyBodyWithoutID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DestroyBodyWithoutID(JPH_BodyInterface *interface, JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_DestroyBodyWithoutID$descriptor() {
        return JPH_BodyInterface_DestroyBodyWithoutID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DestroyBodyWithoutID(JPH_BodyInterface *interface, JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_BodyInterface_DestroyBodyWithoutID$handle() {
        return JPH_BodyInterface_DestroyBodyWithoutID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DestroyBodyWithoutID(JPH_BodyInterface *interface, JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_BodyInterface_DestroyBodyWithoutID$address() {
        return JPH_BodyInterface_DestroyBodyWithoutID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DestroyBodyWithoutID(JPH_BodyInterface *interface, JPH_Body *body)
     * }
     */
    public static void JPH_BodyInterface_DestroyBodyWithoutID(MemorySegment interface_, MemorySegment body) {
        var mh$ = JPH_BodyInterface_DestroyBodyWithoutID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_DestroyBodyWithoutID", interface_, body);
            }
            mh$.invokeExact(interface_, body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AssignBodyID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AssignBodyID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_AssignBodyID(JPH_BodyInterface *interface, JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AssignBodyID$descriptor() {
        return JPH_BodyInterface_AssignBodyID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_AssignBodyID(JPH_BodyInterface *interface, JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AssignBodyID$handle() {
        return JPH_BodyInterface_AssignBodyID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_AssignBodyID(JPH_BodyInterface *interface, JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AssignBodyID$address() {
        return JPH_BodyInterface_AssignBodyID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_AssignBodyID(JPH_BodyInterface *interface, JPH_Body *body)
     * }
     */
    public static int JPH_BodyInterface_AssignBodyID(MemorySegment interface_, MemorySegment body) {
        var mh$ = JPH_BodyInterface_AssignBodyID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AssignBodyID", interface_, body);
            }
            return (int)mh$.invokeExact(interface_, body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AssignBodyID2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AssignBodyID2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_AssignBodyID2(JPH_BodyInterface *interface, JPH_Body *body, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AssignBodyID2$descriptor() {
        return JPH_BodyInterface_AssignBodyID2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_AssignBodyID2(JPH_BodyInterface *interface, JPH_Body *body, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AssignBodyID2$handle() {
        return JPH_BodyInterface_AssignBodyID2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_AssignBodyID2(JPH_BodyInterface *interface, JPH_Body *body, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AssignBodyID2$address() {
        return JPH_BodyInterface_AssignBodyID2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_AssignBodyID2(JPH_BodyInterface *interface, JPH_Body *body, JPH_BodyID bodyID)
     * }
     */
    public static int JPH_BodyInterface_AssignBodyID2(MemorySegment interface_, MemorySegment body, int bodyID) {
        var mh$ = JPH_BodyInterface_AssignBodyID2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AssignBodyID2", interface_, body, bodyID);
            }
            return (int)mh$.invokeExact(interface_, body, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_UnassignBodyID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_UnassignBodyID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_UnassignBodyID(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_UnassignBodyID$descriptor() {
        return JPH_BodyInterface_UnassignBodyID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_UnassignBodyID(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_UnassignBodyID$handle() {
        return JPH_BodyInterface_UnassignBodyID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_UnassignBodyID(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_UnassignBodyID$address() {
        return JPH_BodyInterface_UnassignBodyID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_UnassignBodyID(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_UnassignBodyID(MemorySegment interface_, int bodyID) {
        var mh$ = JPH_BodyInterface_UnassignBodyID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_UnassignBodyID", interface_, bodyID);
            }
            return (MemorySegment)mh$.invokeExact(interface_, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_CreateSoftBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_CreateSoftBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBody(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_CreateSoftBody$descriptor() {
        return JPH_BodyInterface_CreateSoftBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBody(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_BodyInterface_CreateSoftBody$handle() {
        return JPH_BodyInterface_CreateSoftBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBody(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateSoftBody$address() {
        return JPH_BodyInterface_CreateSoftBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBody(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateSoftBody(MemorySegment interface_, MemorySegment settings) {
        var mh$ = JPH_BodyInterface_CreateSoftBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_CreateSoftBody", interface_, settings);
            }
            return (MemorySegment)mh$.invokeExact(interface_, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_CreateSoftBodyWithID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_CreateSoftBodyWithID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBodyWithID(JPH_BodyInterface *interface, JPH_BodyID bodyID, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_CreateSoftBodyWithID$descriptor() {
        return JPH_BodyInterface_CreateSoftBodyWithID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBodyWithID(JPH_BodyInterface *interface, JPH_BodyID bodyID, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_BodyInterface_CreateSoftBodyWithID$handle() {
        return JPH_BodyInterface_CreateSoftBodyWithID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBodyWithID(JPH_BodyInterface *interface, JPH_BodyID bodyID, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateSoftBodyWithID$address() {
        return JPH_BodyInterface_CreateSoftBodyWithID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBodyWithID(JPH_BodyInterface *interface, JPH_BodyID bodyID, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateSoftBodyWithID(MemorySegment interface_, int bodyID, MemorySegment settings) {
        var mh$ = JPH_BodyInterface_CreateSoftBodyWithID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_CreateSoftBodyWithID", interface_, bodyID, settings);
            }
            return (MemorySegment)mh$.invokeExact(interface_, bodyID, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_CreateSoftBodyWithoutID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_CreateSoftBodyWithoutID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBodyWithoutID(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_CreateSoftBodyWithoutID$descriptor() {
        return JPH_BodyInterface_CreateSoftBodyWithoutID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBodyWithoutID(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MethodHandle JPH_BodyInterface_CreateSoftBodyWithoutID$handle() {
        return JPH_BodyInterface_CreateSoftBodyWithoutID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBodyWithoutID(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateSoftBodyWithoutID$address() {
        return JPH_BodyInterface_CreateSoftBodyWithoutID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_BodyInterface_CreateSoftBodyWithoutID(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateSoftBodyWithoutID(MemorySegment interface_, MemorySegment settings) {
        var mh$ = JPH_BodyInterface_CreateSoftBodyWithoutID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_CreateSoftBodyWithoutID", interface_, settings);
            }
            return (MemorySegment)mh$.invokeExact(interface_, settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_CreateAndAddSoftBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_CreateAndAddSoftBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_BodyInterface_CreateAndAddSoftBody(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_CreateAndAddSoftBody$descriptor() {
        return JPH_BodyInterface_CreateAndAddSoftBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_BodyInterface_CreateAndAddSoftBody(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_CreateAndAddSoftBody$handle() {
        return JPH_BodyInterface_CreateAndAddSoftBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_BodyInterface_CreateAndAddSoftBody(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_CreateAndAddSoftBody$address() {
        return JPH_BodyInterface_CreateAndAddSoftBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_BodyInterface_CreateAndAddSoftBody(JPH_BodyInterface *interface, const JPH_SoftBodyCreationSettings *settings, JPH_Activation activationMode)
     * }
     */
    public static int JPH_BodyInterface_CreateAndAddSoftBody(MemorySegment interface_, MemorySegment settings, int activationMode) {
        var mh$ = JPH_BodyInterface_CreateAndAddSoftBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_CreateAndAddSoftBody", interface_, settings, activationMode);
            }
            return (int)mh$.invokeExact(interface_, settings, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddBody(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddBody$descriptor() {
        return JPH_BodyInterface_AddBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddBody(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddBody$handle() {
        return JPH_BodyInterface_AddBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddBody(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddBody$address() {
        return JPH_BodyInterface_AddBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddBody(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_Activation activationMode)
     * }
     */
    public static void JPH_BodyInterface_AddBody(MemorySegment interface_, int bodyID, int activationMode) {
        var mh$ = JPH_BodyInterface_AddBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddBody", interface_, bodyID, activationMode);
            }
            mh$.invokeExact(interface_, bodyID, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_RemoveBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_RemoveBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_RemoveBody(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_RemoveBody$descriptor() {
        return JPH_BodyInterface_RemoveBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_RemoveBody(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_RemoveBody$handle() {
        return JPH_BodyInterface_RemoveBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_RemoveBody(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_RemoveBody$address() {
        return JPH_BodyInterface_RemoveBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_RemoveBody(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static void JPH_BodyInterface_RemoveBody(MemorySegment interface_, int bodyID) {
        var mh$ = JPH_BodyInterface_RemoveBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_RemoveBody", interface_, bodyID);
            }
            mh$.invokeExact(interface_, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_IsActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_IsActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_IsActive(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_IsActive$descriptor() {
        return JPH_BodyInterface_IsActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_IsActive(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_IsActive$handle() {
        return JPH_BodyInterface_IsActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_IsActive(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_IsActive$address() {
        return JPH_BodyInterface_IsActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_IsActive(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static int JPH_BodyInterface_IsActive(MemorySegment interface_, int bodyID) {
        var mh$ = JPH_BodyInterface_IsActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_IsActive", interface_, bodyID);
            }
            return (int)mh$.invokeExact(interface_, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_IsAdded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_IsAdded");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_IsAdded(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_IsAdded$descriptor() {
        return JPH_BodyInterface_IsAdded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_IsAdded(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_IsAdded$handle() {
        return JPH_BodyInterface_IsAdded.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_IsAdded(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_IsAdded$address() {
        return JPH_BodyInterface_IsAdded.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BodyInterface_IsAdded(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static int JPH_BodyInterface_IsAdded(MemorySegment interface_, int bodyID) {
        var mh$ = JPH_BodyInterface_IsAdded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_IsAdded", interface_, bodyID);
            }
            return (int)mh$.invokeExact(interface_, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetBodyType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetBodyType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyType JPH_BodyInterface_GetBodyType(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetBodyType$descriptor() {
        return JPH_BodyInterface_GetBodyType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyType JPH_BodyInterface_GetBodyType(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetBodyType$handle() {
        return JPH_BodyInterface_GetBodyType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyType JPH_BodyInterface_GetBodyType(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetBodyType$address() {
        return JPH_BodyInterface_GetBodyType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyType JPH_BodyInterface_GetBodyType(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static int JPH_BodyInterface_GetBodyType(MemorySegment interface_, int bodyID) {
        var mh$ = JPH_BodyInterface_GetBodyType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetBodyType", interface_, bodyID);
            }
            return (int)mh$.invokeExact(interface_, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyID, const JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetLinearVelocity$descriptor() {
        return JPH_BodyInterface_SetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyID, const JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetLinearVelocity$handle() {
        return JPH_BodyInterface_SetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyID, const JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetLinearVelocity$address() {
        return JPH_BodyInterface_SetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyID, const JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_BodyInterface_SetLinearVelocity(MemorySegment interface_, int bodyID, MemorySegment velocity) {
        var mh$ = JPH_BodyInterface_SetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetLinearVelocity", interface_, bodyID, velocity);
            }
            mh$.invokeExact(interface_, bodyID, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetLinearVelocity$descriptor() {
        return JPH_BodyInterface_GetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetLinearVelocity$handle() {
        return JPH_BodyInterface_GetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetLinearVelocity$address() {
        return JPH_BodyInterface_GetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_BodyInterface_GetLinearVelocity(MemorySegment interface_, int bodyID, MemorySegment velocity) {
        var mh$ = JPH_BodyInterface_GetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetLinearVelocity", interface_, bodyID, velocity);
            }
            mh$.invokeExact(interface_, bodyID, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetCenterOfMassPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetCenterOfMassPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetCenterOfMassPosition(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_RVec3 *position)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetCenterOfMassPosition$descriptor() {
        return JPH_BodyInterface_GetCenterOfMassPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetCenterOfMassPosition(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_RVec3 *position)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetCenterOfMassPosition$handle() {
        return JPH_BodyInterface_GetCenterOfMassPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetCenterOfMassPosition(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_RVec3 *position)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetCenterOfMassPosition$address() {
        return JPH_BodyInterface_GetCenterOfMassPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetCenterOfMassPosition(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_RVec3 *position)
     * }
     */
    public static void JPH_BodyInterface_GetCenterOfMassPosition(MemorySegment interface_, int bodyID, MemorySegment position) {
        var mh$ = JPH_BodyInterface_GetCenterOfMassPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetCenterOfMassPosition", interface_, bodyID, position);
            }
            mh$.invokeExact(interface_, bodyID, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_BodyInterface_GetMotionType(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetMotionType$descriptor() {
        return JPH_BodyInterface_GetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_BodyInterface_GetMotionType(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetMotionType$handle() {
        return JPH_BodyInterface_GetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_BodyInterface_GetMotionType(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetMotionType$address() {
        return JPH_BodyInterface_GetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_BodyInterface_GetMotionType(JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static int JPH_BodyInterface_GetMotionType(MemorySegment interface_, int bodyID) {
        var mh$ = JPH_BodyInterface_GetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetMotionType", interface_, bodyID);
            }
            return (int)mh$.invokeExact(interface_, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetMotionType(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_MotionType motionType, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetMotionType$descriptor() {
        return JPH_BodyInterface_SetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetMotionType(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_MotionType motionType, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetMotionType$handle() {
        return JPH_BodyInterface_SetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetMotionType(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_MotionType motionType, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetMotionType$address() {
        return JPH_BodyInterface_SetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetMotionType(JPH_BodyInterface *interface, JPH_BodyID bodyID, JPH_MotionType motionType, JPH_Activation activationMode)
     * }
     */
    public static void JPH_BodyInterface_SetMotionType(MemorySegment interface_, int bodyID, int motionType, int activationMode) {
        var mh$ = JPH_BodyInterface_SetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetMotionType", interface_, bodyID, motionType, activationMode);
            }
            mh$.invokeExact(interface_, bodyID, motionType, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetRestitution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetRestitution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetRestitution(const JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetRestitution$descriptor() {
        return JPH_BodyInterface_GetRestitution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetRestitution(const JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetRestitution$handle() {
        return JPH_BodyInterface_GetRestitution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetRestitution(const JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetRestitution$address() {
        return JPH_BodyInterface_GetRestitution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetRestitution(const JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static float JPH_BodyInterface_GetRestitution(MemorySegment interface_, int bodyID) {
        var mh$ = JPH_BodyInterface_GetRestitution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetRestitution", interface_, bodyID);
            }
            return (float)mh$.invokeExact(interface_, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetRestitution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetRestitution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetRestitution(JPH_BodyInterface *interface, JPH_BodyID bodyID, float restitution)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetRestitution$descriptor() {
        return JPH_BodyInterface_SetRestitution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetRestitution(JPH_BodyInterface *interface, JPH_BodyID bodyID, float restitution)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetRestitution$handle() {
        return JPH_BodyInterface_SetRestitution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetRestitution(JPH_BodyInterface *interface, JPH_BodyID bodyID, float restitution)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetRestitution$address() {
        return JPH_BodyInterface_SetRestitution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetRestitution(JPH_BodyInterface *interface, JPH_BodyID bodyID, float restitution)
     * }
     */
    public static void JPH_BodyInterface_SetRestitution(MemorySegment interface_, int bodyID, float restitution) {
        var mh$ = JPH_BodyInterface_SetRestitution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetRestitution", interface_, bodyID, restitution);
            }
            mh$.invokeExact(interface_, bodyID, restitution);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetFriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetFriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetFriction(const JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetFriction$descriptor() {
        return JPH_BodyInterface_GetFriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetFriction(const JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetFriction$handle() {
        return JPH_BodyInterface_GetFriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetFriction(const JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetFriction$address() {
        return JPH_BodyInterface_GetFriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetFriction(const JPH_BodyInterface *interface, JPH_BodyID bodyID)
     * }
     */
    public static float JPH_BodyInterface_GetFriction(MemorySegment interface_, int bodyID) {
        var mh$ = JPH_BodyInterface_GetFriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetFriction", interface_, bodyID);
            }
            return (float)mh$.invokeExact(interface_, bodyID);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetFriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetFriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetFriction(JPH_BodyInterface *interface, JPH_BodyID bodyID, float friction)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetFriction$descriptor() {
        return JPH_BodyInterface_SetFriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetFriction(JPH_BodyInterface *interface, JPH_BodyID bodyID, float friction)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetFriction$handle() {
        return JPH_BodyInterface_SetFriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetFriction(JPH_BodyInterface *interface, JPH_BodyID bodyID, float friction)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetFriction$address() {
        return JPH_BodyInterface_SetFriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetFriction(JPH_BodyInterface *interface, JPH_BodyID bodyID, float friction)
     * }
     */
    public static void JPH_BodyInterface_SetFriction(MemorySegment interface_, int bodyID, float friction) {
        var mh$ = JPH_BodyInterface_SetFriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetFriction", interface_, bodyID, friction);
            }
            mh$.invokeExact(interface_, bodyID, friction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPosition(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetPosition$descriptor() {
        return JPH_BodyInterface_SetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPosition(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetPosition$handle() {
        return JPH_BodyInterface_SetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPosition(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetPosition$address() {
        return JPH_BodyInterface_SetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPosition(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Activation activationMode)
     * }
     */
    public static void JPH_BodyInterface_SetPosition(MemorySegment interface_, int bodyId, MemorySegment position, int activationMode) {
        var mh$ = JPH_BodyInterface_SetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetPosition", interface_, bodyId, position, activationMode);
            }
            mh$.invokeExact(interface_, bodyId, position, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPosition(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetPosition$descriptor() {
        return JPH_BodyInterface_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPosition(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetPosition$handle() {
        return JPH_BodyInterface_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPosition(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetPosition$address() {
        return JPH_BodyInterface_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPosition(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *result)
     * }
     */
    public static void JPH_BodyInterface_GetPosition(MemorySegment interface_, int bodyId, MemorySegment result) {
        var mh$ = JPH_BodyInterface_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetPosition", interface_, bodyId, result);
            }
            mh$.invokeExact(interface_, bodyId, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetRotation$descriptor() {
        return JPH_BodyInterface_SetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetRotation$handle() {
        return JPH_BodyInterface_SetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetRotation$address() {
        return JPH_BodyInterface_SetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static void JPH_BodyInterface_SetRotation(MemorySegment interface_, int bodyId, MemorySegment rotation, int activationMode) {
        var mh$ = JPH_BodyInterface_SetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetRotation", interface_, bodyId, rotation, activationMode);
            }
            mh$.invokeExact(interface_, bodyId, rotation, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Quat *result)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetRotation$descriptor() {
        return JPH_BodyInterface_GetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Quat *result)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetRotation$handle() {
        return JPH_BodyInterface_GetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Quat *result)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetRotation$address() {
        return JPH_BodyInterface_GetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Quat *result)
     * }
     */
    public static void JPH_BodyInterface_GetRotation(MemorySegment interface_, int bodyId, MemorySegment result) {
        var mh$ = JPH_BodyInterface_GetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetRotation", interface_, bodyId, result);
            }
            mh$.invokeExact(interface_, bodyId, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetPositionAndRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetPositionAndRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionAndRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetPositionAndRotation$descriptor() {
        return JPH_BodyInterface_SetPositionAndRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionAndRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetPositionAndRotation$handle() {
        return JPH_BodyInterface_SetPositionAndRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionAndRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetPositionAndRotation$address() {
        return JPH_BodyInterface_SetPositionAndRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionAndRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static void JPH_BodyInterface_SetPositionAndRotation(MemorySegment interface_, int bodyId, MemorySegment position, MemorySegment rotation, int activationMode) {
        var mh$ = JPH_BodyInterface_SetPositionAndRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetPositionAndRotation", interface_, bodyId, position, rotation, activationMode);
            }
            mh$.invokeExact(interface_, bodyId, position, rotation, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetPositionAndRotationWhenChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetPositionAndRotationWhenChanged");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionAndRotationWhenChanged(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetPositionAndRotationWhenChanged$descriptor() {
        return JPH_BodyInterface_SetPositionAndRotationWhenChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionAndRotationWhenChanged(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetPositionAndRotationWhenChanged$handle() {
        return JPH_BodyInterface_SetPositionAndRotationWhenChanged.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionAndRotationWhenChanged(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetPositionAndRotationWhenChanged$address() {
        return JPH_BodyInterface_SetPositionAndRotationWhenChanged.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionAndRotationWhenChanged(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Activation activationMode)
     * }
     */
    public static void JPH_BodyInterface_SetPositionAndRotationWhenChanged(MemorySegment interface_, int bodyId, MemorySegment position, MemorySegment rotation, int activationMode) {
        var mh$ = JPH_BodyInterface_SetPositionAndRotationWhenChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetPositionAndRotationWhenChanged", interface_, bodyId, position, rotation, activationMode);
            }
            mh$.invokeExact(interface_, bodyId, position, rotation, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetPositionAndRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetPositionAndRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPositionAndRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetPositionAndRotation$descriptor() {
        return JPH_BodyInterface_GetPositionAndRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPositionAndRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetPositionAndRotation$handle() {
        return JPH_BodyInterface_GetPositionAndRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPositionAndRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetPositionAndRotation$address() {
        return JPH_BodyInterface_GetPositionAndRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPositionAndRotation(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation)
     * }
     */
    public static void JPH_BodyInterface_GetPositionAndRotation(MemorySegment interface_, int bodyId, MemorySegment position, MemorySegment rotation) {
        var mh$ = JPH_BodyInterface_GetPositionAndRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetPositionAndRotation", interface_, bodyId, position, rotation);
            }
            mh$.invokeExact(interface_, bodyId, position, rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetPositionRotationAndVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetPositionRotationAndVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionRotationAndVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetPositionRotationAndVelocity$descriptor() {
        return JPH_BodyInterface_SetPositionRotationAndVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionRotationAndVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetPositionRotationAndVelocity$handle() {
        return JPH_BodyInterface_SetPositionRotationAndVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionRotationAndVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetPositionRotationAndVelocity$address() {
        return JPH_BodyInterface_SetPositionRotationAndVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetPositionRotationAndVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *position, JPH_Quat *rotation, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static void JPH_BodyInterface_SetPositionRotationAndVelocity(MemorySegment interface_, int bodyId, MemorySegment position, MemorySegment rotation, MemorySegment linearVelocity, MemorySegment angularVelocity) {
        var mh$ = JPH_BodyInterface_SetPositionRotationAndVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetPositionRotationAndVelocity", interface_, bodyId, position, rotation, linearVelocity, angularVelocity);
            }
            mh$.invokeExact(interface_, bodyId, position, rotation, linearVelocity, angularVelocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_BodyInterface_GetShape(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetShape$descriptor() {
        return JPH_BodyInterface_GetShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_BodyInterface_GetShape(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetShape$handle() {
        return JPH_BodyInterface_GetShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_BodyInterface_GetShape(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetShape$address() {
        return JPH_BodyInterface_GetShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_BodyInterface_GetShape(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetShape(MemorySegment interface_, int bodyId) {
        var mh$ = JPH_BodyInterface_GetShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetShape", interface_, bodyId);
            }
            return (MemorySegment)mh$.invokeExact(interface_, bodyId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetShape(JPH_BodyInterface *interface, JPH_BodyID bodyId, const JPH_Shape *shape, JPH_Bool32 updateMassProperties, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetShape$descriptor() {
        return JPH_BodyInterface_SetShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetShape(JPH_BodyInterface *interface, JPH_BodyID bodyId, const JPH_Shape *shape, JPH_Bool32 updateMassProperties, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetShape$handle() {
        return JPH_BodyInterface_SetShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetShape(JPH_BodyInterface *interface, JPH_BodyID bodyId, const JPH_Shape *shape, JPH_Bool32 updateMassProperties, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetShape$address() {
        return JPH_BodyInterface_SetShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetShape(JPH_BodyInterface *interface, JPH_BodyID bodyId, const JPH_Shape *shape, JPH_Bool32 updateMassProperties, JPH_Activation activationMode)
     * }
     */
    public static void JPH_BodyInterface_SetShape(MemorySegment interface_, int bodyId, MemorySegment shape, int updateMassProperties, int activationMode) {
        var mh$ = JPH_BodyInterface_SetShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetShape", interface_, bodyId, shape, updateMassProperties, activationMode);
            }
            mh$.invokeExact(interface_, bodyId, shape, updateMassProperties, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_NotifyShapeChanged {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_NotifyShapeChanged");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_NotifyShapeChanged(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *previousCenterOfMass, JPH_Bool32 updateMassProperties, JPH_Activation activationMode)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_NotifyShapeChanged$descriptor() {
        return JPH_BodyInterface_NotifyShapeChanged.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_NotifyShapeChanged(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *previousCenterOfMass, JPH_Bool32 updateMassProperties, JPH_Activation activationMode)
     * }
     */
    public static MethodHandle JPH_BodyInterface_NotifyShapeChanged$handle() {
        return JPH_BodyInterface_NotifyShapeChanged.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_NotifyShapeChanged(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *previousCenterOfMass, JPH_Bool32 updateMassProperties, JPH_Activation activationMode)
     * }
     */
    public static MemorySegment JPH_BodyInterface_NotifyShapeChanged$address() {
        return JPH_BodyInterface_NotifyShapeChanged.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_NotifyShapeChanged(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *previousCenterOfMass, JPH_Bool32 updateMassProperties, JPH_Activation activationMode)
     * }
     */
    public static void JPH_BodyInterface_NotifyShapeChanged(MemorySegment interface_, int bodyId, MemorySegment previousCenterOfMass, int updateMassProperties, int activationMode) {
        var mh$ = JPH_BodyInterface_NotifyShapeChanged.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_NotifyShapeChanged", interface_, bodyId, previousCenterOfMass, updateMassProperties, activationMode);
            }
            mh$.invokeExact(interface_, bodyId, previousCenterOfMass, updateMassProperties, activationMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_ActivateBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_ActivateBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_ActivateBody(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_ActivateBody$descriptor() {
        return JPH_BodyInterface_ActivateBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_ActivateBody(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MethodHandle JPH_BodyInterface_ActivateBody$handle() {
        return JPH_BodyInterface_ActivateBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_ActivateBody(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MemorySegment JPH_BodyInterface_ActivateBody$address() {
        return JPH_BodyInterface_ActivateBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_ActivateBody(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static void JPH_BodyInterface_ActivateBody(MemorySegment interface_, int bodyId) {
        var mh$ = JPH_BodyInterface_ActivateBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_ActivateBody", interface_, bodyId);
            }
            mh$.invokeExact(interface_, bodyId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_DeactivateBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_DeactivateBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DeactivateBody(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_DeactivateBody$descriptor() {
        return JPH_BodyInterface_DeactivateBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DeactivateBody(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MethodHandle JPH_BodyInterface_DeactivateBody$handle() {
        return JPH_BodyInterface_DeactivateBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DeactivateBody(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MemorySegment JPH_BodyInterface_DeactivateBody$address() {
        return JPH_BodyInterface_DeactivateBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_DeactivateBody(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static void JPH_BodyInterface_DeactivateBody(MemorySegment interface_, int bodyId) {
        var mh$ = JPH_BodyInterface_DeactivateBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_DeactivateBody", interface_, bodyId);
            }
            mh$.invokeExact(interface_, bodyId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetObjectLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_SHORT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetObjectLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetObjectLayer(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_ObjectLayer layer)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetObjectLayer$descriptor() {
        return JPH_BodyInterface_SetObjectLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetObjectLayer(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_ObjectLayer layer)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetObjectLayer$handle() {
        return JPH_BodyInterface_SetObjectLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetObjectLayer(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_ObjectLayer layer)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetObjectLayer$address() {
        return JPH_BodyInterface_SetObjectLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetObjectLayer(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_ObjectLayer layer)
     * }
     */
    public static void JPH_BodyInterface_SetObjectLayer(MemorySegment interface_, int bodyId, short layer) {
        var mh$ = JPH_BodyInterface_SetObjectLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetObjectLayer", interface_, bodyId, layer);
            }
            mh$.invokeExact(interface_, bodyId, layer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetObjectLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_SHORT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetObjectLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayer JPH_BodyInterface_GetObjectLayer(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetObjectLayer$descriptor() {
        return JPH_BodyInterface_GetObjectLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayer JPH_BodyInterface_GetObjectLayer(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetObjectLayer$handle() {
        return JPH_BodyInterface_GetObjectLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayer JPH_BodyInterface_GetObjectLayer(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetObjectLayer$address() {
        return JPH_BodyInterface_GetObjectLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ObjectLayer JPH_BodyInterface_GetObjectLayer(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static short JPH_BodyInterface_GetObjectLayer(MemorySegment interface_, int bodyId) {
        var mh$ = JPH_BodyInterface_GetObjectLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetObjectLayer", interface_, bodyId);
            }
            return (short)mh$.invokeExact(interface_, bodyId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetWorldTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetWorldTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetWorldTransform(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RMatrix4x4 *result)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetWorldTransform$descriptor() {
        return JPH_BodyInterface_GetWorldTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetWorldTransform(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RMatrix4x4 *result)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetWorldTransform$handle() {
        return JPH_BodyInterface_GetWorldTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetWorldTransform(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RMatrix4x4 *result)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetWorldTransform$address() {
        return JPH_BodyInterface_GetWorldTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetWorldTransform(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RMatrix4x4 *result)
     * }
     */
    public static void JPH_BodyInterface_GetWorldTransform(MemorySegment interface_, int bodyId, MemorySegment result) {
        var mh$ = JPH_BodyInterface_GetWorldTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetWorldTransform", interface_, bodyId, result);
            }
            mh$.invokeExact(interface_, bodyId, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetCenterOfMassTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetCenterOfMassTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetCenterOfMassTransform(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RMatrix4x4 *resutlt)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetCenterOfMassTransform$descriptor() {
        return JPH_BodyInterface_GetCenterOfMassTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetCenterOfMassTransform(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RMatrix4x4 *resutlt)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetCenterOfMassTransform$handle() {
        return JPH_BodyInterface_GetCenterOfMassTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetCenterOfMassTransform(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RMatrix4x4 *resutlt)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetCenterOfMassTransform$address() {
        return JPH_BodyInterface_GetCenterOfMassTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetCenterOfMassTransform(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RMatrix4x4 *resutlt)
     * }
     */
    public static void JPH_BodyInterface_GetCenterOfMassTransform(MemorySegment interface_, int bodyId, MemorySegment resutlt) {
        var mh$ = JPH_BodyInterface_GetCenterOfMassTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetCenterOfMassTransform", interface_, bodyId, resutlt);
            }
            mh$.invokeExact(interface_, bodyId, resutlt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_MoveKinematic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_MoveKinematic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_MoveKinematic(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *targetPosition, JPH_Quat *targetRotation, float deltaTime)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_MoveKinematic$descriptor() {
        return JPH_BodyInterface_MoveKinematic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_MoveKinematic(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *targetPosition, JPH_Quat *targetRotation, float deltaTime)
     * }
     */
    public static MethodHandle JPH_BodyInterface_MoveKinematic$handle() {
        return JPH_BodyInterface_MoveKinematic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_MoveKinematic(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *targetPosition, JPH_Quat *targetRotation, float deltaTime)
     * }
     */
    public static MemorySegment JPH_BodyInterface_MoveKinematic$address() {
        return JPH_BodyInterface_MoveKinematic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_MoveKinematic(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *targetPosition, JPH_Quat *targetRotation, float deltaTime)
     * }
     */
    public static void JPH_BodyInterface_MoveKinematic(MemorySegment interface_, int bodyId, MemorySegment targetPosition, MemorySegment targetRotation, float deltaTime) {
        var mh$ = JPH_BodyInterface_MoveKinematic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_MoveKinematic", interface_, bodyId, targetPosition, targetRotation, deltaTime);
            }
            mh$.invokeExact(interface_, bodyId, targetPosition, targetRotation, deltaTime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetLinearAndAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetLinearAndAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetLinearAndAngularVelocity$descriptor() {
        return JPH_BodyInterface_SetLinearAndAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetLinearAndAngularVelocity$handle() {
        return JPH_BodyInterface_SetLinearAndAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetLinearAndAngularVelocity$address() {
        return JPH_BodyInterface_SetLinearAndAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static void JPH_BodyInterface_SetLinearAndAngularVelocity(MemorySegment interface_, int bodyId, MemorySegment linearVelocity, MemorySegment angularVelocity) {
        var mh$ = JPH_BodyInterface_SetLinearAndAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetLinearAndAngularVelocity", interface_, bodyId, linearVelocity, angularVelocity);
            }
            mh$.invokeExact(interface_, bodyId, linearVelocity, angularVelocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetLinearAndAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetLinearAndAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetLinearAndAngularVelocity$descriptor() {
        return JPH_BodyInterface_GetLinearAndAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetLinearAndAngularVelocity$handle() {
        return JPH_BodyInterface_GetLinearAndAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetLinearAndAngularVelocity$address() {
        return JPH_BodyInterface_GetLinearAndAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static void JPH_BodyInterface_GetLinearAndAngularVelocity(MemorySegment interface_, int bodyId, MemorySegment linearVelocity, MemorySegment angularVelocity) {
        var mh$ = JPH_BodyInterface_GetLinearAndAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetLinearAndAngularVelocity", interface_, bodyId, linearVelocity, angularVelocity);
            }
            mh$.invokeExact(interface_, bodyId, linearVelocity, angularVelocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddLinearVelocity$descriptor() {
        return JPH_BodyInterface_AddLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddLinearVelocity$handle() {
        return JPH_BodyInterface_AddLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddLinearVelocity$address() {
        return JPH_BodyInterface_AddLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddLinearVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity)
     * }
     */
    public static void JPH_BodyInterface_AddLinearVelocity(MemorySegment interface_, int bodyId, MemorySegment linearVelocity) {
        var mh$ = JPH_BodyInterface_AddLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddLinearVelocity", interface_, bodyId, linearVelocity);
            }
            mh$.invokeExact(interface_, bodyId, linearVelocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddLinearAndAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddLinearAndAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddLinearAndAngularVelocity$descriptor() {
        return JPH_BodyInterface_AddLinearAndAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddLinearAndAngularVelocity$handle() {
        return JPH_BodyInterface_AddLinearAndAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddLinearAndAngularVelocity$address() {
        return JPH_BodyInterface_AddLinearAndAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddLinearAndAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *linearVelocity, JPH_Vec3 *angularVelocity)
     * }
     */
    public static void JPH_BodyInterface_AddLinearAndAngularVelocity(MemorySegment interface_, int bodyId, MemorySegment linearVelocity, MemorySegment angularVelocity) {
        var mh$ = JPH_BodyInterface_AddLinearAndAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddLinearAndAngularVelocity", interface_, bodyId, linearVelocity, angularVelocity);
            }
            mh$.invokeExact(interface_, bodyId, linearVelocity, angularVelocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularVelocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetAngularVelocity$descriptor() {
        return JPH_BodyInterface_SetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetAngularVelocity$handle() {
        return JPH_BodyInterface_SetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetAngularVelocity$address() {
        return JPH_BodyInterface_SetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularVelocity)
     * }
     */
    public static void JPH_BodyInterface_SetAngularVelocity(MemorySegment interface_, int bodyId, MemorySegment angularVelocity) {
        var mh$ = JPH_BodyInterface_SetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetAngularVelocity", interface_, bodyId, angularVelocity);
            }
            mh$.invokeExact(interface_, bodyId, angularVelocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularVelocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetAngularVelocity$descriptor() {
        return JPH_BodyInterface_GetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetAngularVelocity$handle() {
        return JPH_BodyInterface_GetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularVelocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetAngularVelocity$address() {
        return JPH_BodyInterface_GetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetAngularVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularVelocity)
     * }
     */
    public static void JPH_BodyInterface_GetAngularVelocity(MemorySegment interface_, int bodyId, MemorySegment angularVelocity) {
        var mh$ = JPH_BodyInterface_GetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetAngularVelocity", interface_, bodyId, angularVelocity);
            }
            mh$.invokeExact(interface_, bodyId, angularVelocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetPointVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetPointVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPointVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *point, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetPointVelocity$descriptor() {
        return JPH_BodyInterface_GetPointVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPointVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *point, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetPointVelocity$handle() {
        return JPH_BodyInterface_GetPointVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPointVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *point, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetPointVelocity$address() {
        return JPH_BodyInterface_GetPointVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetPointVelocity(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_RVec3 *point, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_BodyInterface_GetPointVelocity(MemorySegment interface_, int bodyId, MemorySegment point, MemorySegment velocity) {
        var mh$ = JPH_BodyInterface_GetPointVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetPointVelocity", interface_, bodyId, point, velocity);
            }
            mh$.invokeExact(interface_, bodyId, point, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddForce {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddForce");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForce(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddForce$descriptor() {
        return JPH_BodyInterface_AddForce.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForce(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddForce$handle() {
        return JPH_BodyInterface_AddForce.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForce(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddForce$address() {
        return JPH_BodyInterface_AddForce.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForce(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force)
     * }
     */
    public static void JPH_BodyInterface_AddForce(MemorySegment interface_, int bodyId, MemorySegment force) {
        var mh$ = JPH_BodyInterface_AddForce.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddForce", interface_, bodyId, force);
            }
            mh$.invokeExact(interface_, bodyId, force);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddForce2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddForce2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForce2(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force, JPH_RVec3 *point)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddForce2$descriptor() {
        return JPH_BodyInterface_AddForce2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForce2(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force, JPH_RVec3 *point)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddForce2$handle() {
        return JPH_BodyInterface_AddForce2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForce2(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force, JPH_RVec3 *point)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddForce2$address() {
        return JPH_BodyInterface_AddForce2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForce2(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force, JPH_RVec3 *point)
     * }
     */
    public static void JPH_BodyInterface_AddForce2(MemorySegment interface_, int bodyId, MemorySegment force, MemorySegment point) {
        var mh$ = JPH_BodyInterface_AddForce2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddForce2", interface_, bodyId, force, point);
            }
            mh$.invokeExact(interface_, bodyId, force, point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddTorque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddTorque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddTorque(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *torque)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddTorque$descriptor() {
        return JPH_BodyInterface_AddTorque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddTorque(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *torque)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddTorque$handle() {
        return JPH_BodyInterface_AddTorque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddTorque(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *torque)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddTorque$address() {
        return JPH_BodyInterface_AddTorque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddTorque(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *torque)
     * }
     */
    public static void JPH_BodyInterface_AddTorque(MemorySegment interface_, int bodyId, MemorySegment torque) {
        var mh$ = JPH_BodyInterface_AddTorque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddTorque", interface_, bodyId, torque);
            }
            mh$.invokeExact(interface_, bodyId, torque);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddForceAndTorque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddForceAndTorque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForceAndTorque(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force, JPH_Vec3 *torque)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddForceAndTorque$descriptor() {
        return JPH_BodyInterface_AddForceAndTorque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForceAndTorque(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force, JPH_Vec3 *torque)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddForceAndTorque$handle() {
        return JPH_BodyInterface_AddForceAndTorque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForceAndTorque(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force, JPH_Vec3 *torque)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddForceAndTorque$address() {
        return JPH_BodyInterface_AddForceAndTorque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddForceAndTorque(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *force, JPH_Vec3 *torque)
     * }
     */
    public static void JPH_BodyInterface_AddForceAndTorque(MemorySegment interface_, int bodyId, MemorySegment force, MemorySegment torque) {
        var mh$ = JPH_BodyInterface_AddForceAndTorque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddForceAndTorque", interface_, bodyId, force, torque);
            }
            mh$.invokeExact(interface_, bodyId, force, torque);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddImpulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddImpulse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddImpulse(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *impulse)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddImpulse$descriptor() {
        return JPH_BodyInterface_AddImpulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddImpulse(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *impulse)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddImpulse$handle() {
        return JPH_BodyInterface_AddImpulse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddImpulse(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *impulse)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddImpulse$address() {
        return JPH_BodyInterface_AddImpulse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddImpulse(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *impulse)
     * }
     */
    public static void JPH_BodyInterface_AddImpulse(MemorySegment interface_, int bodyId, MemorySegment impulse) {
        var mh$ = JPH_BodyInterface_AddImpulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddImpulse", interface_, bodyId, impulse);
            }
            mh$.invokeExact(interface_, bodyId, impulse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddImpulse2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddImpulse2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddImpulse2(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *impulse, JPH_RVec3 *point)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddImpulse2$descriptor() {
        return JPH_BodyInterface_AddImpulse2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddImpulse2(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *impulse, JPH_RVec3 *point)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddImpulse2$handle() {
        return JPH_BodyInterface_AddImpulse2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddImpulse2(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *impulse, JPH_RVec3 *point)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddImpulse2$address() {
        return JPH_BodyInterface_AddImpulse2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddImpulse2(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *impulse, JPH_RVec3 *point)
     * }
     */
    public static void JPH_BodyInterface_AddImpulse2(MemorySegment interface_, int bodyId, MemorySegment impulse, MemorySegment point) {
        var mh$ = JPH_BodyInterface_AddImpulse2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddImpulse2", interface_, bodyId, impulse, point);
            }
            mh$.invokeExact(interface_, bodyId, impulse, point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_AddAngularImpulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_AddAngularImpulse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddAngularImpulse(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularImpulse)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_AddAngularImpulse$descriptor() {
        return JPH_BodyInterface_AddAngularImpulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddAngularImpulse(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularImpulse)
     * }
     */
    public static MethodHandle JPH_BodyInterface_AddAngularImpulse$handle() {
        return JPH_BodyInterface_AddAngularImpulse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddAngularImpulse(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularImpulse)
     * }
     */
    public static MemorySegment JPH_BodyInterface_AddAngularImpulse$address() {
        return JPH_BodyInterface_AddAngularImpulse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_AddAngularImpulse(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Vec3 *angularImpulse)
     * }
     */
    public static void JPH_BodyInterface_AddAngularImpulse(MemorySegment interface_, int bodyId, MemorySegment angularImpulse) {
        var mh$ = JPH_BodyInterface_AddAngularImpulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_AddAngularImpulse", interface_, bodyId, angularImpulse);
            }
            mh$.invokeExact(interface_, bodyId, angularImpulse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetMotionQuality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetMotionQuality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetMotionQuality(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_MotionQuality quality)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetMotionQuality$descriptor() {
        return JPH_BodyInterface_SetMotionQuality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetMotionQuality(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_MotionQuality quality)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetMotionQuality$handle() {
        return JPH_BodyInterface_SetMotionQuality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetMotionQuality(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_MotionQuality quality)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetMotionQuality$address() {
        return JPH_BodyInterface_SetMotionQuality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetMotionQuality(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_MotionQuality quality)
     * }
     */
    public static void JPH_BodyInterface_SetMotionQuality(MemorySegment interface_, int bodyId, int quality) {
        var mh$ = JPH_BodyInterface_SetMotionQuality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetMotionQuality", interface_, bodyId, quality);
            }
            mh$.invokeExact(interface_, bodyId, quality);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetMotionQuality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetMotionQuality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MotionQuality JPH_BodyInterface_GetMotionQuality(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetMotionQuality$descriptor() {
        return JPH_BodyInterface_GetMotionQuality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MotionQuality JPH_BodyInterface_GetMotionQuality(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetMotionQuality$handle() {
        return JPH_BodyInterface_GetMotionQuality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MotionQuality JPH_BodyInterface_GetMotionQuality(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetMotionQuality$address() {
        return JPH_BodyInterface_GetMotionQuality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MotionQuality JPH_BodyInterface_GetMotionQuality(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static int JPH_BodyInterface_GetMotionQuality(MemorySegment interface_, int bodyId) {
        var mh$ = JPH_BodyInterface_GetMotionQuality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetMotionQuality", interface_, bodyId);
            }
            return (int)mh$.invokeExact(interface_, bodyId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetInverseInertia {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetInverseInertia");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetInverseInertia(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Matrix4x4 *result)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetInverseInertia$descriptor() {
        return JPH_BodyInterface_GetInverseInertia.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetInverseInertia(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Matrix4x4 *result)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetInverseInertia$handle() {
        return JPH_BodyInterface_GetInverseInertia.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetInverseInertia(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Matrix4x4 *result)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetInverseInertia$address() {
        return JPH_BodyInterface_GetInverseInertia.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_GetInverseInertia(JPH_BodyInterface *interface, JPH_BodyID bodyId, JPH_Matrix4x4 *result)
     * }
     */
    public static void JPH_BodyInterface_GetInverseInertia(MemorySegment interface_, int bodyId, MemorySegment result) {
        var mh$ = JPH_BodyInterface_GetInverseInertia.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetInverseInertia", interface_, bodyId, result);
            }
            mh$.invokeExact(interface_, bodyId, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetGravityFactor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetGravityFactor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetGravityFactor(JPH_BodyInterface *interface, JPH_BodyID bodyId, float gravityFactor)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetGravityFactor$descriptor() {
        return JPH_BodyInterface_SetGravityFactor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetGravityFactor(JPH_BodyInterface *interface, JPH_BodyID bodyId, float gravityFactor)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetGravityFactor$handle() {
        return JPH_BodyInterface_SetGravityFactor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetGravityFactor(JPH_BodyInterface *interface, JPH_BodyID bodyId, float gravityFactor)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetGravityFactor$address() {
        return JPH_BodyInterface_SetGravityFactor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetGravityFactor(JPH_BodyInterface *interface, JPH_BodyID bodyId, float gravityFactor)
     * }
     */
    public static void JPH_BodyInterface_SetGravityFactor(MemorySegment interface_, int bodyId, float gravityFactor) {
        var mh$ = JPH_BodyInterface_SetGravityFactor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetGravityFactor", interface_, bodyId, gravityFactor);
            }
            mh$.invokeExact(interface_, bodyId, gravityFactor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetGravityFactor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetGravityFactor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetGravityFactor(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetGravityFactor$descriptor() {
        return JPH_BodyInterface_GetGravityFactor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetGravityFactor(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetGravityFactor$handle() {
        return JPH_BodyInterface_GetGravityFactor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetGravityFactor(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetGravityFactor$address() {
        return JPH_BodyInterface_GetGravityFactor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_BodyInterface_GetGravityFactor(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static float JPH_BodyInterface_GetGravityFactor(MemorySegment interface_, int bodyId) {
        var mh$ = JPH_BodyInterface_GetGravityFactor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetGravityFactor", interface_, bodyId);
            }
            return (float)mh$.invokeExact(interface_, bodyId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_InvalidateContactCache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_InvalidateContactCache");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_InvalidateContactCache(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_InvalidateContactCache$descriptor() {
        return JPH_BodyInterface_InvalidateContactCache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_InvalidateContactCache(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MethodHandle JPH_BodyInterface_InvalidateContactCache$handle() {
        return JPH_BodyInterface_InvalidateContactCache.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_InvalidateContactCache(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MemorySegment JPH_BodyInterface_InvalidateContactCache$address() {
        return JPH_BodyInterface_InvalidateContactCache.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_InvalidateContactCache(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static void JPH_BodyInterface_InvalidateContactCache(MemorySegment interface_, int bodyId) {
        var mh$ = JPH_BodyInterface_InvalidateContactCache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_InvalidateContactCache", interface_, bodyId);
            }
            mh$.invokeExact(interface_, bodyId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetUserData(JPH_BodyInterface *interface, JPH_BodyID bodyId, uint64_t inUserData)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_SetUserData$descriptor() {
        return JPH_BodyInterface_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetUserData(JPH_BodyInterface *interface, JPH_BodyID bodyId, uint64_t inUserData)
     * }
     */
    public static MethodHandle JPH_BodyInterface_SetUserData$handle() {
        return JPH_BodyInterface_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetUserData(JPH_BodyInterface *interface, JPH_BodyID bodyId, uint64_t inUserData)
     * }
     */
    public static MemorySegment JPH_BodyInterface_SetUserData$address() {
        return JPH_BodyInterface_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyInterface_SetUserData(JPH_BodyInterface *interface, JPH_BodyID bodyId, uint64_t inUserData)
     * }
     */
    public static void JPH_BodyInterface_SetUserData(MemorySegment interface_, int bodyId, long inUserData) {
        var mh$ = JPH_BodyInterface_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_SetUserData", interface_, bodyId, inUserData);
            }
            mh$.invokeExact(interface_, bodyId, inUserData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyInterface_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_LONG_LONG,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyInterface_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPH_BodyInterface_GetUserData(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static FunctionDescriptor JPH_BodyInterface_GetUserData$descriptor() {
        return JPH_BodyInterface_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPH_BodyInterface_GetUserData(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MethodHandle JPH_BodyInterface_GetUserData$handle() {
        return JPH_BodyInterface_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPH_BodyInterface_GetUserData(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static MemorySegment JPH_BodyInterface_GetUserData$address() {
        return JPH_BodyInterface_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPH_BodyInterface_GetUserData(JPH_BodyInterface *interface, JPH_BodyID bodyId)
     * }
     */
    public static long JPH_BodyInterface_GetUserData(MemorySegment interface_, int bodyId) {
        var mh$ = JPH_BodyInterface_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyInterface_GetUserData", interface_, bodyId);
            }
            return (long)mh$.invokeExact(interface_, bodyId);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyLockInterface_LockRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyLockInterface_LockRead");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_LockRead(const JPH_BodyLockInterface *lockInterface, JPH_BodyID bodyID, JPH_BodyLockRead *outLock)
     * }
     */
    public static FunctionDescriptor JPH_BodyLockInterface_LockRead$descriptor() {
        return JPH_BodyLockInterface_LockRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_LockRead(const JPH_BodyLockInterface *lockInterface, JPH_BodyID bodyID, JPH_BodyLockRead *outLock)
     * }
     */
    public static MethodHandle JPH_BodyLockInterface_LockRead$handle() {
        return JPH_BodyLockInterface_LockRead.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_LockRead(const JPH_BodyLockInterface *lockInterface, JPH_BodyID bodyID, JPH_BodyLockRead *outLock)
     * }
     */
    public static MemorySegment JPH_BodyLockInterface_LockRead$address() {
        return JPH_BodyLockInterface_LockRead.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_LockRead(const JPH_BodyLockInterface *lockInterface, JPH_BodyID bodyID, JPH_BodyLockRead *outLock)
     * }
     */
    public static void JPH_BodyLockInterface_LockRead(MemorySegment lockInterface, int bodyID, MemorySegment outLock) {
        var mh$ = JPH_BodyLockInterface_LockRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyLockInterface_LockRead", lockInterface, bodyID, outLock);
            }
            mh$.invokeExact(lockInterface, bodyID, outLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyLockInterface_UnlockRead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyLockInterface_UnlockRead");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_UnlockRead(const JPH_BodyLockInterface *lockInterface, JPH_BodyLockRead *ioLock)
     * }
     */
    public static FunctionDescriptor JPH_BodyLockInterface_UnlockRead$descriptor() {
        return JPH_BodyLockInterface_UnlockRead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_UnlockRead(const JPH_BodyLockInterface *lockInterface, JPH_BodyLockRead *ioLock)
     * }
     */
    public static MethodHandle JPH_BodyLockInterface_UnlockRead$handle() {
        return JPH_BodyLockInterface_UnlockRead.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_UnlockRead(const JPH_BodyLockInterface *lockInterface, JPH_BodyLockRead *ioLock)
     * }
     */
    public static MemorySegment JPH_BodyLockInterface_UnlockRead$address() {
        return JPH_BodyLockInterface_UnlockRead.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_UnlockRead(const JPH_BodyLockInterface *lockInterface, JPH_BodyLockRead *ioLock)
     * }
     */
    public static void JPH_BodyLockInterface_UnlockRead(MemorySegment lockInterface, MemorySegment ioLock) {
        var mh$ = JPH_BodyLockInterface_UnlockRead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyLockInterface_UnlockRead", lockInterface, ioLock);
            }
            mh$.invokeExact(lockInterface, ioLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyLockInterface_LockWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyLockInterface_LockWrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_LockWrite(const JPH_BodyLockInterface *lockInterface, JPH_BodyID bodyID, JPH_BodyLockWrite *outLock)
     * }
     */
    public static FunctionDescriptor JPH_BodyLockInterface_LockWrite$descriptor() {
        return JPH_BodyLockInterface_LockWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_LockWrite(const JPH_BodyLockInterface *lockInterface, JPH_BodyID bodyID, JPH_BodyLockWrite *outLock)
     * }
     */
    public static MethodHandle JPH_BodyLockInterface_LockWrite$handle() {
        return JPH_BodyLockInterface_LockWrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_LockWrite(const JPH_BodyLockInterface *lockInterface, JPH_BodyID bodyID, JPH_BodyLockWrite *outLock)
     * }
     */
    public static MemorySegment JPH_BodyLockInterface_LockWrite$address() {
        return JPH_BodyLockInterface_LockWrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_LockWrite(const JPH_BodyLockInterface *lockInterface, JPH_BodyID bodyID, JPH_BodyLockWrite *outLock)
     * }
     */
    public static void JPH_BodyLockInterface_LockWrite(MemorySegment lockInterface, int bodyID, MemorySegment outLock) {
        var mh$ = JPH_BodyLockInterface_LockWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyLockInterface_LockWrite", lockInterface, bodyID, outLock);
            }
            mh$.invokeExact(lockInterface, bodyID, outLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyLockInterface_UnlockWrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyLockInterface_UnlockWrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_UnlockWrite(const JPH_BodyLockInterface *lockInterface, JPH_BodyLockWrite *ioLock)
     * }
     */
    public static FunctionDescriptor JPH_BodyLockInterface_UnlockWrite$descriptor() {
        return JPH_BodyLockInterface_UnlockWrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_UnlockWrite(const JPH_BodyLockInterface *lockInterface, JPH_BodyLockWrite *ioLock)
     * }
     */
    public static MethodHandle JPH_BodyLockInterface_UnlockWrite$handle() {
        return JPH_BodyLockInterface_UnlockWrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_UnlockWrite(const JPH_BodyLockInterface *lockInterface, JPH_BodyLockWrite *ioLock)
     * }
     */
    public static MemorySegment JPH_BodyLockInterface_UnlockWrite$address() {
        return JPH_BodyLockInterface_UnlockWrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyLockInterface_UnlockWrite(const JPH_BodyLockInterface *lockInterface, JPH_BodyLockWrite *ioLock)
     * }
     */
    public static void JPH_BodyLockInterface_UnlockWrite(MemorySegment lockInterface, MemorySegment ioLock) {
        var mh$ = JPH_BodyLockInterface_UnlockWrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyLockInterface_UnlockWrite", lockInterface, ioLock);
            }
            mh$.invokeExact(lockInterface, ioLock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_GetAllowedDOFs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_GetAllowedDOFs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_AllowedDOFs JPH_MotionProperties_GetAllowedDOFs(const JPH_MotionProperties *properties)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_GetAllowedDOFs$descriptor() {
        return JPH_MotionProperties_GetAllowedDOFs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_AllowedDOFs JPH_MotionProperties_GetAllowedDOFs(const JPH_MotionProperties *properties)
     * }
     */
    public static MethodHandle JPH_MotionProperties_GetAllowedDOFs$handle() {
        return JPH_MotionProperties_GetAllowedDOFs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_AllowedDOFs JPH_MotionProperties_GetAllowedDOFs(const JPH_MotionProperties *properties)
     * }
     */
    public static MemorySegment JPH_MotionProperties_GetAllowedDOFs$address() {
        return JPH_MotionProperties_GetAllowedDOFs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_AllowedDOFs JPH_MotionProperties_GetAllowedDOFs(const JPH_MotionProperties *properties)
     * }
     */
    public static int JPH_MotionProperties_GetAllowedDOFs(MemorySegment properties) {
        var mh$ = JPH_MotionProperties_GetAllowedDOFs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_GetAllowedDOFs", properties);
            }
            return (int)mh$.invokeExact(properties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_SetLinearDamping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_SetLinearDamping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetLinearDamping(JPH_MotionProperties *properties, float damping)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_SetLinearDamping$descriptor() {
        return JPH_MotionProperties_SetLinearDamping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetLinearDamping(JPH_MotionProperties *properties, float damping)
     * }
     */
    public static MethodHandle JPH_MotionProperties_SetLinearDamping$handle() {
        return JPH_MotionProperties_SetLinearDamping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetLinearDamping(JPH_MotionProperties *properties, float damping)
     * }
     */
    public static MemorySegment JPH_MotionProperties_SetLinearDamping$address() {
        return JPH_MotionProperties_SetLinearDamping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetLinearDamping(JPH_MotionProperties *properties, float damping)
     * }
     */
    public static void JPH_MotionProperties_SetLinearDamping(MemorySegment properties, float damping) {
        var mh$ = JPH_MotionProperties_SetLinearDamping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_SetLinearDamping", properties, damping);
            }
            mh$.invokeExact(properties, damping);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_GetLinearDamping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_GetLinearDamping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetLinearDamping(const JPH_MotionProperties *properties)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_GetLinearDamping$descriptor() {
        return JPH_MotionProperties_GetLinearDamping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetLinearDamping(const JPH_MotionProperties *properties)
     * }
     */
    public static MethodHandle JPH_MotionProperties_GetLinearDamping$handle() {
        return JPH_MotionProperties_GetLinearDamping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetLinearDamping(const JPH_MotionProperties *properties)
     * }
     */
    public static MemorySegment JPH_MotionProperties_GetLinearDamping$address() {
        return JPH_MotionProperties_GetLinearDamping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetLinearDamping(const JPH_MotionProperties *properties)
     * }
     */
    public static float JPH_MotionProperties_GetLinearDamping(MemorySegment properties) {
        var mh$ = JPH_MotionProperties_GetLinearDamping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_GetLinearDamping", properties);
            }
            return (float)mh$.invokeExact(properties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_SetAngularDamping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_SetAngularDamping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetAngularDamping(JPH_MotionProperties *properties, float damping)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_SetAngularDamping$descriptor() {
        return JPH_MotionProperties_SetAngularDamping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetAngularDamping(JPH_MotionProperties *properties, float damping)
     * }
     */
    public static MethodHandle JPH_MotionProperties_SetAngularDamping$handle() {
        return JPH_MotionProperties_SetAngularDamping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetAngularDamping(JPH_MotionProperties *properties, float damping)
     * }
     */
    public static MemorySegment JPH_MotionProperties_SetAngularDamping$address() {
        return JPH_MotionProperties_SetAngularDamping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetAngularDamping(JPH_MotionProperties *properties, float damping)
     * }
     */
    public static void JPH_MotionProperties_SetAngularDamping(MemorySegment properties, float damping) {
        var mh$ = JPH_MotionProperties_SetAngularDamping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_SetAngularDamping", properties, damping);
            }
            mh$.invokeExact(properties, damping);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_GetAngularDamping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_GetAngularDamping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetAngularDamping(const JPH_MotionProperties *properties)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_GetAngularDamping$descriptor() {
        return JPH_MotionProperties_GetAngularDamping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetAngularDamping(const JPH_MotionProperties *properties)
     * }
     */
    public static MethodHandle JPH_MotionProperties_GetAngularDamping$handle() {
        return JPH_MotionProperties_GetAngularDamping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetAngularDamping(const JPH_MotionProperties *properties)
     * }
     */
    public static MemorySegment JPH_MotionProperties_GetAngularDamping$address() {
        return JPH_MotionProperties_GetAngularDamping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetAngularDamping(const JPH_MotionProperties *properties)
     * }
     */
    public static float JPH_MotionProperties_GetAngularDamping(MemorySegment properties) {
        var mh$ = JPH_MotionProperties_GetAngularDamping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_GetAngularDamping", properties);
            }
            return (float)mh$.invokeExact(properties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_SetMassProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_SetMassProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetMassProperties(JPH_MotionProperties *properties, JPH_AllowedDOFs allowedDOFs, const JPH_MassProperties *massProperties)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_SetMassProperties$descriptor() {
        return JPH_MotionProperties_SetMassProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetMassProperties(JPH_MotionProperties *properties, JPH_AllowedDOFs allowedDOFs, const JPH_MassProperties *massProperties)
     * }
     */
    public static MethodHandle JPH_MotionProperties_SetMassProperties$handle() {
        return JPH_MotionProperties_SetMassProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetMassProperties(JPH_MotionProperties *properties, JPH_AllowedDOFs allowedDOFs, const JPH_MassProperties *massProperties)
     * }
     */
    public static MemorySegment JPH_MotionProperties_SetMassProperties$address() {
        return JPH_MotionProperties_SetMassProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetMassProperties(JPH_MotionProperties *properties, JPH_AllowedDOFs allowedDOFs, const JPH_MassProperties *massProperties)
     * }
     */
    public static void JPH_MotionProperties_SetMassProperties(MemorySegment properties, int allowedDOFs, MemorySegment massProperties) {
        var mh$ = JPH_MotionProperties_SetMassProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_SetMassProperties", properties, allowedDOFs, massProperties);
            }
            mh$.invokeExact(properties, allowedDOFs, massProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_GetInverseMassUnchecked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_GetInverseMassUnchecked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetInverseMassUnchecked(JPH_MotionProperties *properties)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_GetInverseMassUnchecked$descriptor() {
        return JPH_MotionProperties_GetInverseMassUnchecked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetInverseMassUnchecked(JPH_MotionProperties *properties)
     * }
     */
    public static MethodHandle JPH_MotionProperties_GetInverseMassUnchecked$handle() {
        return JPH_MotionProperties_GetInverseMassUnchecked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetInverseMassUnchecked(JPH_MotionProperties *properties)
     * }
     */
    public static MemorySegment JPH_MotionProperties_GetInverseMassUnchecked$address() {
        return JPH_MotionProperties_GetInverseMassUnchecked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_MotionProperties_GetInverseMassUnchecked(JPH_MotionProperties *properties)
     * }
     */
    public static float JPH_MotionProperties_GetInverseMassUnchecked(MemorySegment properties) {
        var mh$ = JPH_MotionProperties_GetInverseMassUnchecked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_GetInverseMassUnchecked", properties);
            }
            return (float)mh$.invokeExact(properties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_SetInverseMass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_SetInverseMass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetInverseMass(JPH_MotionProperties *properties, float inverseMass)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_SetInverseMass$descriptor() {
        return JPH_MotionProperties_SetInverseMass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetInverseMass(JPH_MotionProperties *properties, float inverseMass)
     * }
     */
    public static MethodHandle JPH_MotionProperties_SetInverseMass$handle() {
        return JPH_MotionProperties_SetInverseMass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetInverseMass(JPH_MotionProperties *properties, float inverseMass)
     * }
     */
    public static MemorySegment JPH_MotionProperties_SetInverseMass$address() {
        return JPH_MotionProperties_SetInverseMass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetInverseMass(JPH_MotionProperties *properties, float inverseMass)
     * }
     */
    public static void JPH_MotionProperties_SetInverseMass(MemorySegment properties, float inverseMass) {
        var mh$ = JPH_MotionProperties_SetInverseMass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_SetInverseMass", properties, inverseMass);
            }
            mh$.invokeExact(properties, inverseMass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_GetInverseInertiaDiagonal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_GetInverseInertiaDiagonal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_GetInverseInertiaDiagonal(JPH_MotionProperties *properties, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_GetInverseInertiaDiagonal$descriptor() {
        return JPH_MotionProperties_GetInverseInertiaDiagonal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_GetInverseInertiaDiagonal(JPH_MotionProperties *properties, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_MotionProperties_GetInverseInertiaDiagonal$handle() {
        return JPH_MotionProperties_GetInverseInertiaDiagonal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_GetInverseInertiaDiagonal(JPH_MotionProperties *properties, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_MotionProperties_GetInverseInertiaDiagonal$address() {
        return JPH_MotionProperties_GetInverseInertiaDiagonal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_GetInverseInertiaDiagonal(JPH_MotionProperties *properties, JPH_Vec3 *result)
     * }
     */
    public static void JPH_MotionProperties_GetInverseInertiaDiagonal(MemorySegment properties, MemorySegment result) {
        var mh$ = JPH_MotionProperties_GetInverseInertiaDiagonal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_GetInverseInertiaDiagonal", properties, result);
            }
            mh$.invokeExact(properties, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_GetInertiaRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_GetInertiaRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_GetInertiaRotation(JPH_MotionProperties *properties, JPH_Quat *result)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_GetInertiaRotation$descriptor() {
        return JPH_MotionProperties_GetInertiaRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_GetInertiaRotation(JPH_MotionProperties *properties, JPH_Quat *result)
     * }
     */
    public static MethodHandle JPH_MotionProperties_GetInertiaRotation$handle() {
        return JPH_MotionProperties_GetInertiaRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_GetInertiaRotation(JPH_MotionProperties *properties, JPH_Quat *result)
     * }
     */
    public static MemorySegment JPH_MotionProperties_GetInertiaRotation$address() {
        return JPH_MotionProperties_GetInertiaRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_GetInertiaRotation(JPH_MotionProperties *properties, JPH_Quat *result)
     * }
     */
    public static void JPH_MotionProperties_GetInertiaRotation(MemorySegment properties, MemorySegment result) {
        var mh$ = JPH_MotionProperties_GetInertiaRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_GetInertiaRotation", properties, result);
            }
            mh$.invokeExact(properties, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MotionProperties_SetInverseInertia {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MotionProperties_SetInverseInertia");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetInverseInertia(JPH_MotionProperties *properties, JPH_Vec3 *diagonal, JPH_Quat *rot)
     * }
     */
    public static FunctionDescriptor JPH_MotionProperties_SetInverseInertia$descriptor() {
        return JPH_MotionProperties_SetInverseInertia.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetInverseInertia(JPH_MotionProperties *properties, JPH_Vec3 *diagonal, JPH_Quat *rot)
     * }
     */
    public static MethodHandle JPH_MotionProperties_SetInverseInertia$handle() {
        return JPH_MotionProperties_SetInverseInertia.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetInverseInertia(JPH_MotionProperties *properties, JPH_Vec3 *diagonal, JPH_Quat *rot)
     * }
     */
    public static MemorySegment JPH_MotionProperties_SetInverseInertia$address() {
        return JPH_MotionProperties_SetInverseInertia.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MotionProperties_SetInverseInertia(JPH_MotionProperties *properties, JPH_Vec3 *diagonal, JPH_Quat *rot)
     * }
     */
    public static void JPH_MotionProperties_SetInverseInertia(MemorySegment properties, MemorySegment diagonal, MemorySegment rot) {
        var mh$ = JPH_MotionProperties_SetInverseInertia.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MotionProperties_SetInverseInertia", properties, diagonal, rot);
            }
            mh$.invokeExact(properties, diagonal, rot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MassProperties_DecomposePrincipalMomentsOfInertia {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MassProperties_DecomposePrincipalMomentsOfInertia");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MassProperties_DecomposePrincipalMomentsOfInertia(JPH_MassProperties *properties, JPH_Matrix4x4 *rotation, JPH_Vec3 *diagonal)
     * }
     */
    public static FunctionDescriptor JPH_MassProperties_DecomposePrincipalMomentsOfInertia$descriptor() {
        return JPH_MassProperties_DecomposePrincipalMomentsOfInertia.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MassProperties_DecomposePrincipalMomentsOfInertia(JPH_MassProperties *properties, JPH_Matrix4x4 *rotation, JPH_Vec3 *diagonal)
     * }
     */
    public static MethodHandle JPH_MassProperties_DecomposePrincipalMomentsOfInertia$handle() {
        return JPH_MassProperties_DecomposePrincipalMomentsOfInertia.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MassProperties_DecomposePrincipalMomentsOfInertia(JPH_MassProperties *properties, JPH_Matrix4x4 *rotation, JPH_Vec3 *diagonal)
     * }
     */
    public static MemorySegment JPH_MassProperties_DecomposePrincipalMomentsOfInertia$address() {
        return JPH_MassProperties_DecomposePrincipalMomentsOfInertia.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MassProperties_DecomposePrincipalMomentsOfInertia(JPH_MassProperties *properties, JPH_Matrix4x4 *rotation, JPH_Vec3 *diagonal)
     * }
     */
    public static void JPH_MassProperties_DecomposePrincipalMomentsOfInertia(MemorySegment properties, MemorySegment rotation, MemorySegment diagonal) {
        var mh$ = JPH_MassProperties_DecomposePrincipalMomentsOfInertia.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MassProperties_DecomposePrincipalMomentsOfInertia", properties, rotation, diagonal);
            }
            mh$.invokeExact(properties, rotation, diagonal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_MassProperties_ScaleToMass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_MassProperties_ScaleToMass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_MassProperties_ScaleToMass(JPH_MassProperties *properties, float mass)
     * }
     */
    public static FunctionDescriptor JPH_MassProperties_ScaleToMass$descriptor() {
        return JPH_MassProperties_ScaleToMass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_MassProperties_ScaleToMass(JPH_MassProperties *properties, float mass)
     * }
     */
    public static MethodHandle JPH_MassProperties_ScaleToMass$handle() {
        return JPH_MassProperties_ScaleToMass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_MassProperties_ScaleToMass(JPH_MassProperties *properties, float mass)
     * }
     */
    public static MemorySegment JPH_MassProperties_ScaleToMass$address() {
        return JPH_MassProperties_ScaleToMass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_MassProperties_ScaleToMass(JPH_MassProperties *properties, float mass)
     * }
     */
    public static void JPH_MassProperties_ScaleToMass(MemorySegment properties, float mass) {
        var mh$ = JPH_MassProperties_ScaleToMass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_MassProperties_ScaleToMass", properties, mass);
            }
            mh$.invokeExact(properties, mass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseQuery_CastRay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseQuery_CastRay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CastRay(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *origin, const JPH_Vec3 *direction, JPH_RayCastBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseQuery_CastRay$descriptor() {
        return JPH_BroadPhaseQuery_CastRay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CastRay(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *origin, const JPH_Vec3 *direction, JPH_RayCastBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static MethodHandle JPH_BroadPhaseQuery_CastRay$handle() {
        return JPH_BroadPhaseQuery_CastRay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CastRay(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *origin, const JPH_Vec3 *direction, JPH_RayCastBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static MemorySegment JPH_BroadPhaseQuery_CastRay$address() {
        return JPH_BroadPhaseQuery_CastRay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CastRay(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *origin, const JPH_Vec3 *direction, JPH_RayCastBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static int JPH_BroadPhaseQuery_CastRay(MemorySegment query, MemorySegment origin, MemorySegment direction, MemorySegment callback, MemorySegment userData, MemorySegment broadPhaseLayerFilter, MemorySegment objectLayerFilter) {
        var mh$ = JPH_BroadPhaseQuery_CastRay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseQuery_CastRay", query, origin, direction, callback, userData, broadPhaseLayerFilter, objectLayerFilter);
            }
            return (int)mh$.invokeExact(query, origin, direction, callback, userData, broadPhaseLayerFilter, objectLayerFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseQuery_CollideAABox {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseQuery_CollideAABox");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollideAABox(const JPH_BroadPhaseQuery *query, const JPH_AABox *box, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseQuery_CollideAABox$descriptor() {
        return JPH_BroadPhaseQuery_CollideAABox.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollideAABox(const JPH_BroadPhaseQuery *query, const JPH_AABox *box, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static MethodHandle JPH_BroadPhaseQuery_CollideAABox$handle() {
        return JPH_BroadPhaseQuery_CollideAABox.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollideAABox(const JPH_BroadPhaseQuery *query, const JPH_AABox *box, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static MemorySegment JPH_BroadPhaseQuery_CollideAABox$address() {
        return JPH_BroadPhaseQuery_CollideAABox.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollideAABox(const JPH_BroadPhaseQuery *query, const JPH_AABox *box, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static int JPH_BroadPhaseQuery_CollideAABox(MemorySegment query, MemorySegment box, MemorySegment callback, MemorySegment userData, MemorySegment broadPhaseLayerFilter, MemorySegment objectLayerFilter) {
        var mh$ = JPH_BroadPhaseQuery_CollideAABox.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseQuery_CollideAABox", query, box, callback, userData, broadPhaseLayerFilter, objectLayerFilter);
            }
            return (int)mh$.invokeExact(query, box, callback, userData, broadPhaseLayerFilter, objectLayerFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseQuery_CollideSphere {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseQuery_CollideSphere");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollideSphere(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *center, float radius, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseQuery_CollideSphere$descriptor() {
        return JPH_BroadPhaseQuery_CollideSphere.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollideSphere(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *center, float radius, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static MethodHandle JPH_BroadPhaseQuery_CollideSphere$handle() {
        return JPH_BroadPhaseQuery_CollideSphere.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollideSphere(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *center, float radius, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static MemorySegment JPH_BroadPhaseQuery_CollideSphere$address() {
        return JPH_BroadPhaseQuery_CollideSphere.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollideSphere(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *center, float radius, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static int JPH_BroadPhaseQuery_CollideSphere(MemorySegment query, MemorySegment center, float radius, MemorySegment callback, MemorySegment userData, MemorySegment broadPhaseLayerFilter, MemorySegment objectLayerFilter) {
        var mh$ = JPH_BroadPhaseQuery_CollideSphere.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseQuery_CollideSphere", query, center, radius, callback, userData, broadPhaseLayerFilter, objectLayerFilter);
            }
            return (int)mh$.invokeExact(query, center, radius, callback, userData, broadPhaseLayerFilter, objectLayerFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseQuery_CollidePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseQuery_CollidePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollidePoint(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *point, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseQuery_CollidePoint$descriptor() {
        return JPH_BroadPhaseQuery_CollidePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollidePoint(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *point, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static MethodHandle JPH_BroadPhaseQuery_CollidePoint$handle() {
        return JPH_BroadPhaseQuery_CollidePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollidePoint(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *point, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static MemorySegment JPH_BroadPhaseQuery_CollidePoint$address() {
        return JPH_BroadPhaseQuery_CollidePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_BroadPhaseQuery_CollidePoint(const JPH_BroadPhaseQuery *query, const JPH_Vec3 *point, JPH_CollideShapeBodyCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter)
     * }
     */
    public static int JPH_BroadPhaseQuery_CollidePoint(MemorySegment query, MemorySegment point, MemorySegment callback, MemorySegment userData, MemorySegment broadPhaseLayerFilter, MemorySegment objectLayerFilter) {
        var mh$ = JPH_BroadPhaseQuery_CollidePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseQuery_CollidePoint", query, point, callback, userData, broadPhaseLayerFilter, objectLayerFilter);
            }
            return (int)mh$.invokeExact(query, point, callback, userData, broadPhaseLayerFilter, objectLayerFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_NarrowPhaseQuery_CastRay {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_NarrowPhaseQuery_CastRay");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastRay(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *origin, const JPH_Vec3 *direction, JPH_RayCastResult *hit, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static FunctionDescriptor JPH_NarrowPhaseQuery_CastRay$descriptor() {
        return JPH_NarrowPhaseQuery_CastRay.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastRay(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *origin, const JPH_Vec3 *direction, JPH_RayCastResult *hit, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MethodHandle JPH_NarrowPhaseQuery_CastRay$handle() {
        return JPH_NarrowPhaseQuery_CastRay.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastRay(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *origin, const JPH_Vec3 *direction, JPH_RayCastResult *hit, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MemorySegment JPH_NarrowPhaseQuery_CastRay$address() {
        return JPH_NarrowPhaseQuery_CastRay.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastRay(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *origin, const JPH_Vec3 *direction, JPH_RayCastResult *hit, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static int JPH_NarrowPhaseQuery_CastRay(MemorySegment query, MemorySegment origin, MemorySegment direction, MemorySegment hit, MemorySegment broadPhaseLayerFilter, MemorySegment objectLayerFilter, MemorySegment bodyFilter) {
        var mh$ = JPH_NarrowPhaseQuery_CastRay.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_NarrowPhaseQuery_CastRay", query, origin, direction, hit, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
            }
            return (int)mh$.invokeExact(query, origin, direction, hit, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_NarrowPhaseQuery_CastRay2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_NarrowPhaseQuery_CastRay2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastRay2(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *origin, const JPH_Vec3 *direction, JPH_CastRayCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static FunctionDescriptor JPH_NarrowPhaseQuery_CastRay2$descriptor() {
        return JPH_NarrowPhaseQuery_CastRay2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastRay2(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *origin, const JPH_Vec3 *direction, JPH_CastRayCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MethodHandle JPH_NarrowPhaseQuery_CastRay2$handle() {
        return JPH_NarrowPhaseQuery_CastRay2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastRay2(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *origin, const JPH_Vec3 *direction, JPH_CastRayCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MemorySegment JPH_NarrowPhaseQuery_CastRay2$address() {
        return JPH_NarrowPhaseQuery_CastRay2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastRay2(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *origin, const JPH_Vec3 *direction, JPH_CastRayCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static int JPH_NarrowPhaseQuery_CastRay2(MemorySegment query, MemorySegment origin, MemorySegment direction, MemorySegment callback, MemorySegment userData, MemorySegment broadPhaseLayerFilter, MemorySegment objectLayerFilter, MemorySegment bodyFilter) {
        var mh$ = JPH_NarrowPhaseQuery_CastRay2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_NarrowPhaseQuery_CastRay2", query, origin, direction, callback, userData, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
            }
            return (int)mh$.invokeExact(query, origin, direction, callback, userData, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_NarrowPhaseQuery_CollidePoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_NarrowPhaseQuery_CollidePoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CollidePoint(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *point, JPH_CollidePointCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static FunctionDescriptor JPH_NarrowPhaseQuery_CollidePoint$descriptor() {
        return JPH_NarrowPhaseQuery_CollidePoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CollidePoint(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *point, JPH_CollidePointCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MethodHandle JPH_NarrowPhaseQuery_CollidePoint$handle() {
        return JPH_NarrowPhaseQuery_CollidePoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CollidePoint(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *point, JPH_CollidePointCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MemorySegment JPH_NarrowPhaseQuery_CollidePoint$address() {
        return JPH_NarrowPhaseQuery_CollidePoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CollidePoint(const JPH_NarrowPhaseQuery *query, const JPH_RVec3 *point, JPH_CollidePointCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static int JPH_NarrowPhaseQuery_CollidePoint(MemorySegment query, MemorySegment point, MemorySegment callback, MemorySegment userData, MemorySegment broadPhaseLayerFilter, MemorySegment objectLayerFilter, MemorySegment bodyFilter) {
        var mh$ = JPH_NarrowPhaseQuery_CollidePoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_NarrowPhaseQuery_CollidePoint", query, point, callback, userData, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
            }
            return (int)mh$.invokeExact(query, point, callback, userData, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_NarrowPhaseQuery_CollideShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_NarrowPhaseQuery_CollideShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CollideShape(const JPH_NarrowPhaseQuery *query, const JPH_Shape *shape, const JPH_Vec3 *scale, const JPH_RMatrix4x4 *centerOfMassTransform, JPH_RVec3 *baseOffset, JPH_CollideShapeCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static FunctionDescriptor JPH_NarrowPhaseQuery_CollideShape$descriptor() {
        return JPH_NarrowPhaseQuery_CollideShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CollideShape(const JPH_NarrowPhaseQuery *query, const JPH_Shape *shape, const JPH_Vec3 *scale, const JPH_RMatrix4x4 *centerOfMassTransform, JPH_RVec3 *baseOffset, JPH_CollideShapeCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MethodHandle JPH_NarrowPhaseQuery_CollideShape$handle() {
        return JPH_NarrowPhaseQuery_CollideShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CollideShape(const JPH_NarrowPhaseQuery *query, const JPH_Shape *shape, const JPH_Vec3 *scale, const JPH_RMatrix4x4 *centerOfMassTransform, JPH_RVec3 *baseOffset, JPH_CollideShapeCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MemorySegment JPH_NarrowPhaseQuery_CollideShape$address() {
        return JPH_NarrowPhaseQuery_CollideShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CollideShape(const JPH_NarrowPhaseQuery *query, const JPH_Shape *shape, const JPH_Vec3 *scale, const JPH_RMatrix4x4 *centerOfMassTransform, JPH_RVec3 *baseOffset, JPH_CollideShapeCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static int JPH_NarrowPhaseQuery_CollideShape(MemorySegment query, MemorySegment shape, MemorySegment scale, MemorySegment centerOfMassTransform, MemorySegment baseOffset, MemorySegment callback, MemorySegment userData, MemorySegment broadPhaseLayerFilter, MemorySegment objectLayerFilter, MemorySegment bodyFilter) {
        var mh$ = JPH_NarrowPhaseQuery_CollideShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_NarrowPhaseQuery_CollideShape", query, shape, scale, centerOfMassTransform, baseOffset, callback, userData, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
            }
            return (int)mh$.invokeExact(query, shape, scale, centerOfMassTransform, baseOffset, callback, userData, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_NarrowPhaseQuery_CastShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_NarrowPhaseQuery_CastShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastShape(const JPH_NarrowPhaseQuery *query, const JPH_Shape *shape, const JPH_RMatrix4x4 *centerOfMassTransform, const JPH_Vec3 *direction, JPH_RVec3 *baseOffset, JPH_CastShapeCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static FunctionDescriptor JPH_NarrowPhaseQuery_CastShape$descriptor() {
        return JPH_NarrowPhaseQuery_CastShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastShape(const JPH_NarrowPhaseQuery *query, const JPH_Shape *shape, const JPH_RMatrix4x4 *centerOfMassTransform, const JPH_Vec3 *direction, JPH_RVec3 *baseOffset, JPH_CastShapeCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MethodHandle JPH_NarrowPhaseQuery_CastShape$handle() {
        return JPH_NarrowPhaseQuery_CastShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastShape(const JPH_NarrowPhaseQuery *query, const JPH_Shape *shape, const JPH_RMatrix4x4 *centerOfMassTransform, const JPH_Vec3 *direction, JPH_RVec3 *baseOffset, JPH_CastShapeCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static MemorySegment JPH_NarrowPhaseQuery_CastShape$address() {
        return JPH_NarrowPhaseQuery_CastShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_NarrowPhaseQuery_CastShape(const JPH_NarrowPhaseQuery *query, const JPH_Shape *shape, const JPH_RMatrix4x4 *centerOfMassTransform, const JPH_Vec3 *direction, JPH_RVec3 *baseOffset, JPH_CastShapeCollector *callback, void *userData, JPH_BroadPhaseLayerFilter *broadPhaseLayerFilter, JPH_ObjectLayerFilter *objectLayerFilter, JPH_BodyFilter *bodyFilter)
     * }
     */
    public static int JPH_NarrowPhaseQuery_CastShape(MemorySegment query, MemorySegment shape, MemorySegment centerOfMassTransform, MemorySegment direction, MemorySegment baseOffset, MemorySegment callback, MemorySegment userData, MemorySegment broadPhaseLayerFilter, MemorySegment objectLayerFilter, MemorySegment bodyFilter) {
        var mh$ = JPH_NarrowPhaseQuery_CastShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_NarrowPhaseQuery_CastShape", query, shape, centerOfMassTransform, direction, baseOffset, callback, userData, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
            }
            return (int)mh$.invokeExact(query, shape, centerOfMassTransform, direction, baseOffset, callback, userData, broadPhaseLayerFilter, objectLayerFilter, bodyFilter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_Body_GetID(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetID$descriptor() {
        return JPH_Body_GetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_Body_GetID(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetID$handle() {
        return JPH_Body_GetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_Body_GetID(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetID$address() {
        return JPH_Body_GetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_Body_GetID(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_GetID(MemorySegment body) {
        var mh$ = JPH_Body_GetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetID", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetBodyType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetBodyType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyType JPH_Body_GetBodyType(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetBodyType$descriptor() {
        return JPH_Body_GetBodyType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyType JPH_Body_GetBodyType(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetBodyType$handle() {
        return JPH_Body_GetBodyType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyType JPH_Body_GetBodyType(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetBodyType$address() {
        return JPH_Body_GetBodyType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyType JPH_Body_GetBodyType(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_GetBodyType(MemorySegment body) {
        var mh$ = JPH_Body_GetBodyType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetBodyType", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetWorldSpaceBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetWorldSpaceBounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldSpaceBounds(const JPH_Body *body, JPH_AABox *result)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetWorldSpaceBounds$descriptor() {
        return JPH_Body_GetWorldSpaceBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldSpaceBounds(const JPH_Body *body, JPH_AABox *result)
     * }
     */
    public static MethodHandle JPH_Body_GetWorldSpaceBounds$handle() {
        return JPH_Body_GetWorldSpaceBounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldSpaceBounds(const JPH_Body *body, JPH_AABox *result)
     * }
     */
    public static MemorySegment JPH_Body_GetWorldSpaceBounds$address() {
        return JPH_Body_GetWorldSpaceBounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldSpaceBounds(const JPH_Body *body, JPH_AABox *result)
     * }
     */
    public static void JPH_Body_GetWorldSpaceBounds(MemorySegment body, MemorySegment result) {
        var mh$ = JPH_Body_GetWorldSpaceBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetWorldSpaceBounds", body, result);
            }
            mh$.invokeExact(body, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetWorldSpaceSurfaceNormal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetWorldSpaceSurfaceNormal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldSpaceSurfaceNormal(const JPH_Body *body, JPH_SubShapeID subShapeID, const JPH_RVec3 *position, JPH_Vec3 *normal)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetWorldSpaceSurfaceNormal$descriptor() {
        return JPH_Body_GetWorldSpaceSurfaceNormal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldSpaceSurfaceNormal(const JPH_Body *body, JPH_SubShapeID subShapeID, const JPH_RVec3 *position, JPH_Vec3 *normal)
     * }
     */
    public static MethodHandle JPH_Body_GetWorldSpaceSurfaceNormal$handle() {
        return JPH_Body_GetWorldSpaceSurfaceNormal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldSpaceSurfaceNormal(const JPH_Body *body, JPH_SubShapeID subShapeID, const JPH_RVec3 *position, JPH_Vec3 *normal)
     * }
     */
    public static MemorySegment JPH_Body_GetWorldSpaceSurfaceNormal$address() {
        return JPH_Body_GetWorldSpaceSurfaceNormal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldSpaceSurfaceNormal(const JPH_Body *body, JPH_SubShapeID subShapeID, const JPH_RVec3 *position, JPH_Vec3 *normal)
     * }
     */
    public static void JPH_Body_GetWorldSpaceSurfaceNormal(MemorySegment body, int subShapeID, MemorySegment position, MemorySegment normal) {
        var mh$ = JPH_Body_GetWorldSpaceSurfaceNormal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetWorldSpaceSurfaceNormal", body, subShapeID, position, normal);
            }
            mh$.invokeExact(body, subShapeID, position, normal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_IsActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_IsActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsActive(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_IsActive$descriptor() {
        return JPH_Body_IsActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsActive(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_IsActive$handle() {
        return JPH_Body_IsActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsActive(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_IsActive$address() {
        return JPH_Body_IsActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsActive(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_IsActive(MemorySegment body) {
        var mh$ = JPH_Body_IsActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_IsActive", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_IsStatic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_IsStatic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsStatic(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_IsStatic$descriptor() {
        return JPH_Body_IsStatic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsStatic(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_IsStatic$handle() {
        return JPH_Body_IsStatic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsStatic(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_IsStatic$address() {
        return JPH_Body_IsStatic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsStatic(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_IsStatic(MemorySegment body) {
        var mh$ = JPH_Body_IsStatic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_IsStatic", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_IsKinematic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_IsKinematic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsKinematic(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_IsKinematic$descriptor() {
        return JPH_Body_IsKinematic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsKinematic(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_IsKinematic$handle() {
        return JPH_Body_IsKinematic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsKinematic(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_IsKinematic$address() {
        return JPH_Body_IsKinematic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsKinematic(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_IsKinematic(MemorySegment body) {
        var mh$ = JPH_Body_IsKinematic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_IsKinematic", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_IsDynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_IsDynamic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsDynamic(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_IsDynamic$descriptor() {
        return JPH_Body_IsDynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsDynamic(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_IsDynamic$handle() {
        return JPH_Body_IsDynamic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsDynamic(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_IsDynamic$address() {
        return JPH_Body_IsDynamic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsDynamic(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_IsDynamic(MemorySegment body) {
        var mh$ = JPH_Body_IsDynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_IsDynamic", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_IsSensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_IsSensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsSensor(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_IsSensor$descriptor() {
        return JPH_Body_IsSensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsSensor(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_IsSensor$handle() {
        return JPH_Body_IsSensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsSensor(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_IsSensor$address() {
        return JPH_Body_IsSensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_IsSensor(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_IsSensor(MemorySegment body) {
        var mh$ = JPH_Body_IsSensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_IsSensor", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetIsSensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetIsSensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetIsSensor(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetIsSensor$descriptor() {
        return JPH_Body_SetIsSensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetIsSensor(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static MethodHandle JPH_Body_SetIsSensor$handle() {
        return JPH_Body_SetIsSensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetIsSensor(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static MemorySegment JPH_Body_SetIsSensor$address() {
        return JPH_Body_SetIsSensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetIsSensor(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static void JPH_Body_SetIsSensor(MemorySegment body, int value) {
        var mh$ = JPH_Body_SetIsSensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetIsSensor", body, value);
            }
            mh$.invokeExact(body, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetCollideKinematicVsNonDynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetCollideKinematicVsNonDynamic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetCollideKinematicVsNonDynamic(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetCollideKinematicVsNonDynamic$descriptor() {
        return JPH_Body_SetCollideKinematicVsNonDynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetCollideKinematicVsNonDynamic(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static MethodHandle JPH_Body_SetCollideKinematicVsNonDynamic$handle() {
        return JPH_Body_SetCollideKinematicVsNonDynamic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetCollideKinematicVsNonDynamic(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static MemorySegment JPH_Body_SetCollideKinematicVsNonDynamic$address() {
        return JPH_Body_SetCollideKinematicVsNonDynamic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetCollideKinematicVsNonDynamic(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static void JPH_Body_SetCollideKinematicVsNonDynamic(MemorySegment body, int value) {
        var mh$ = JPH_Body_SetCollideKinematicVsNonDynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetCollideKinematicVsNonDynamic", body, value);
            }
            mh$.invokeExact(body, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetCollideKinematicVsNonDynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetCollideKinematicVsNonDynamic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetCollideKinematicVsNonDynamic(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetCollideKinematicVsNonDynamic$descriptor() {
        return JPH_Body_GetCollideKinematicVsNonDynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetCollideKinematicVsNonDynamic(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetCollideKinematicVsNonDynamic$handle() {
        return JPH_Body_GetCollideKinematicVsNonDynamic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetCollideKinematicVsNonDynamic(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetCollideKinematicVsNonDynamic$address() {
        return JPH_Body_GetCollideKinematicVsNonDynamic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetCollideKinematicVsNonDynamic(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_GetCollideKinematicVsNonDynamic(MemorySegment body) {
        var mh$ = JPH_Body_GetCollideKinematicVsNonDynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetCollideKinematicVsNonDynamic", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetUseManifoldReduction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetUseManifoldReduction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetUseManifoldReduction(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetUseManifoldReduction$descriptor() {
        return JPH_Body_SetUseManifoldReduction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetUseManifoldReduction(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static MethodHandle JPH_Body_SetUseManifoldReduction$handle() {
        return JPH_Body_SetUseManifoldReduction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetUseManifoldReduction(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static MemorySegment JPH_Body_SetUseManifoldReduction$address() {
        return JPH_Body_SetUseManifoldReduction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetUseManifoldReduction(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static void JPH_Body_SetUseManifoldReduction(MemorySegment body, int value) {
        var mh$ = JPH_Body_SetUseManifoldReduction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetUseManifoldReduction", body, value);
            }
            mh$.invokeExact(body, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetUseManifoldReduction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetUseManifoldReduction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetUseManifoldReduction(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetUseManifoldReduction$descriptor() {
        return JPH_Body_GetUseManifoldReduction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetUseManifoldReduction(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetUseManifoldReduction$handle() {
        return JPH_Body_GetUseManifoldReduction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetUseManifoldReduction(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetUseManifoldReduction$address() {
        return JPH_Body_GetUseManifoldReduction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetUseManifoldReduction(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_GetUseManifoldReduction(MemorySegment body) {
        var mh$ = JPH_Body_GetUseManifoldReduction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetUseManifoldReduction", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetUseManifoldReductionWithBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetUseManifoldReductionWithBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetUseManifoldReductionWithBody(const JPH_Body *body, const JPH_Body *other)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetUseManifoldReductionWithBody$descriptor() {
        return JPH_Body_GetUseManifoldReductionWithBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetUseManifoldReductionWithBody(const JPH_Body *body, const JPH_Body *other)
     * }
     */
    public static MethodHandle JPH_Body_GetUseManifoldReductionWithBody$handle() {
        return JPH_Body_GetUseManifoldReductionWithBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetUseManifoldReductionWithBody(const JPH_Body *body, const JPH_Body *other)
     * }
     */
    public static MemorySegment JPH_Body_GetUseManifoldReductionWithBody$address() {
        return JPH_Body_GetUseManifoldReductionWithBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetUseManifoldReductionWithBody(const JPH_Body *body, const JPH_Body *other)
     * }
     */
    public static int JPH_Body_GetUseManifoldReductionWithBody(MemorySegment body, MemorySegment other) {
        var mh$ = JPH_Body_GetUseManifoldReductionWithBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetUseManifoldReductionWithBody", body, other);
            }
            return (int)mh$.invokeExact(body, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetApplyGyroscopicForce {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetApplyGyroscopicForce");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetApplyGyroscopicForce(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetApplyGyroscopicForce$descriptor() {
        return JPH_Body_SetApplyGyroscopicForce.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetApplyGyroscopicForce(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static MethodHandle JPH_Body_SetApplyGyroscopicForce$handle() {
        return JPH_Body_SetApplyGyroscopicForce.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetApplyGyroscopicForce(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static MemorySegment JPH_Body_SetApplyGyroscopicForce$address() {
        return JPH_Body_SetApplyGyroscopicForce.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetApplyGyroscopicForce(JPH_Body *body, JPH_Bool32 value)
     * }
     */
    public static void JPH_Body_SetApplyGyroscopicForce(MemorySegment body, int value) {
        var mh$ = JPH_Body_SetApplyGyroscopicForce.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetApplyGyroscopicForce", body, value);
            }
            mh$.invokeExact(body, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetApplyGyroscopicForce {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetApplyGyroscopicForce");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetApplyGyroscopicForce(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetApplyGyroscopicForce$descriptor() {
        return JPH_Body_GetApplyGyroscopicForce.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetApplyGyroscopicForce(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetApplyGyroscopicForce$handle() {
        return JPH_Body_GetApplyGyroscopicForce.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetApplyGyroscopicForce(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetApplyGyroscopicForce$address() {
        return JPH_Body_GetApplyGyroscopicForce.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetApplyGyroscopicForce(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_GetApplyGyroscopicForce(MemorySegment body) {
        var mh$ = JPH_Body_GetApplyGyroscopicForce.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetApplyGyroscopicForce", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetMotionProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetMotionProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MotionProperties *JPH_Body_GetMotionProperties(JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetMotionProperties$descriptor() {
        return JPH_Body_GetMotionProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MotionProperties *JPH_Body_GetMotionProperties(JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetMotionProperties$handle() {
        return JPH_Body_GetMotionProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MotionProperties *JPH_Body_GetMotionProperties(JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetMotionProperties$address() {
        return JPH_Body_GetMotionProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MotionProperties *JPH_Body_GetMotionProperties(JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetMotionProperties(MemorySegment body) {
        var mh$ = JPH_Body_GetMotionProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetMotionProperties", body);
            }
            return (MemorySegment)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_Body_GetMotionType(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetMotionType$descriptor() {
        return JPH_Body_GetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_Body_GetMotionType(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetMotionType$handle() {
        return JPH_Body_GetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_Body_GetMotionType(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetMotionType$address() {
        return JPH_Body_GetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_MotionType JPH_Body_GetMotionType(const JPH_Body *body)
     * }
     */
    public static int JPH_Body_GetMotionType(MemorySegment body) {
        var mh$ = JPH_Body_GetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetMotionType", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetMotionType(JPH_Body *body, JPH_MotionType motionType)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetMotionType$descriptor() {
        return JPH_Body_SetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetMotionType(JPH_Body *body, JPH_MotionType motionType)
     * }
     */
    public static MethodHandle JPH_Body_SetMotionType$handle() {
        return JPH_Body_SetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetMotionType(JPH_Body *body, JPH_MotionType motionType)
     * }
     */
    public static MemorySegment JPH_Body_SetMotionType$address() {
        return JPH_Body_SetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetMotionType(JPH_Body *body, JPH_MotionType motionType)
     * }
     */
    public static void JPH_Body_SetMotionType(MemorySegment body, int motionType) {
        var mh$ = JPH_Body_SetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetMotionType", body, motionType);
            }
            mh$.invokeExact(body, motionType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetAllowSleeping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetAllowSleeping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetAllowSleeping(JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetAllowSleeping$descriptor() {
        return JPH_Body_GetAllowSleeping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetAllowSleeping(JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetAllowSleeping$handle() {
        return JPH_Body_GetAllowSleeping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetAllowSleeping(JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetAllowSleeping$address() {
        return JPH_Body_GetAllowSleeping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_Body_GetAllowSleeping(JPH_Body *body)
     * }
     */
    public static int JPH_Body_GetAllowSleeping(MemorySegment body) {
        var mh$ = JPH_Body_GetAllowSleeping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetAllowSleeping", body);
            }
            return (int)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetAllowSleeping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetAllowSleeping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetAllowSleeping(JPH_Body *body, JPH_Bool32 allowSleeping)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetAllowSleeping$descriptor() {
        return JPH_Body_SetAllowSleeping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetAllowSleeping(JPH_Body *body, JPH_Bool32 allowSleeping)
     * }
     */
    public static MethodHandle JPH_Body_SetAllowSleeping$handle() {
        return JPH_Body_SetAllowSleeping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetAllowSleeping(JPH_Body *body, JPH_Bool32 allowSleeping)
     * }
     */
    public static MemorySegment JPH_Body_SetAllowSleeping$address() {
        return JPH_Body_SetAllowSleeping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetAllowSleeping(JPH_Body *body, JPH_Bool32 allowSleeping)
     * }
     */
    public static void JPH_Body_SetAllowSleeping(MemorySegment body, int allowSleeping) {
        var mh$ = JPH_Body_SetAllowSleeping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetAllowSleeping", body, allowSleeping);
            }
            mh$.invokeExact(body, allowSleeping);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_ResetSleepTimer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_ResetSleepTimer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_ResetSleepTimer(JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_ResetSleepTimer$descriptor() {
        return JPH_Body_ResetSleepTimer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_ResetSleepTimer(JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_ResetSleepTimer$handle() {
        return JPH_Body_ResetSleepTimer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_ResetSleepTimer(JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_ResetSleepTimer$address() {
        return JPH_Body_ResetSleepTimer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_ResetSleepTimer(JPH_Body *body)
     * }
     */
    public static void JPH_Body_ResetSleepTimer(MemorySegment body) {
        var mh$ = JPH_Body_ResetSleepTimer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_ResetSleepTimer", body);
            }
            mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetFriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetFriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_Body_GetFriction(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetFriction$descriptor() {
        return JPH_Body_GetFriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_Body_GetFriction(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetFriction$handle() {
        return JPH_Body_GetFriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_Body_GetFriction(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetFriction$address() {
        return JPH_Body_GetFriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_Body_GetFriction(const JPH_Body *body)
     * }
     */
    public static float JPH_Body_GetFriction(MemorySegment body) {
        var mh$ = JPH_Body_GetFriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetFriction", body);
            }
            return (float)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetFriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetFriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetFriction(JPH_Body *body, float friction)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetFriction$descriptor() {
        return JPH_Body_SetFriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetFriction(JPH_Body *body, float friction)
     * }
     */
    public static MethodHandle JPH_Body_SetFriction$handle() {
        return JPH_Body_SetFriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetFriction(JPH_Body *body, float friction)
     * }
     */
    public static MemorySegment JPH_Body_SetFriction$address() {
        return JPH_Body_SetFriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetFriction(JPH_Body *body, float friction)
     * }
     */
    public static void JPH_Body_SetFriction(MemorySegment body, float friction) {
        var mh$ = JPH_Body_SetFriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetFriction", body, friction);
            }
            mh$.invokeExact(body, friction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetRestitution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetRestitution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_Body_GetRestitution(const JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetRestitution$descriptor() {
        return JPH_Body_GetRestitution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_Body_GetRestitution(const JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetRestitution$handle() {
        return JPH_Body_GetRestitution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_Body_GetRestitution(const JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetRestitution$address() {
        return JPH_Body_GetRestitution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_Body_GetRestitution(const JPH_Body *body)
     * }
     */
    public static float JPH_Body_GetRestitution(MemorySegment body) {
        var mh$ = JPH_Body_GetRestitution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetRestitution", body);
            }
            return (float)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetRestitution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetRestitution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetRestitution(JPH_Body *body, float restitution)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetRestitution$descriptor() {
        return JPH_Body_SetRestitution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetRestitution(JPH_Body *body, float restitution)
     * }
     */
    public static MethodHandle JPH_Body_SetRestitution$handle() {
        return JPH_Body_SetRestitution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetRestitution(JPH_Body *body, float restitution)
     * }
     */
    public static MemorySegment JPH_Body_SetRestitution$address() {
        return JPH_Body_SetRestitution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetRestitution(JPH_Body *body, float restitution)
     * }
     */
    public static void JPH_Body_SetRestitution(MemorySegment body, float restitution) {
        var mh$ = JPH_Body_SetRestitution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetRestitution", body, restitution);
            }
            mh$.invokeExact(body, restitution);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetLinearVelocity(JPH_Body *body, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetLinearVelocity$descriptor() {
        return JPH_Body_GetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetLinearVelocity(JPH_Body *body, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_Body_GetLinearVelocity$handle() {
        return JPH_Body_GetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetLinearVelocity(JPH_Body *body, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_Body_GetLinearVelocity$address() {
        return JPH_Body_GetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetLinearVelocity(JPH_Body *body, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_Body_GetLinearVelocity(MemorySegment body, MemorySegment velocity) {
        var mh$ = JPH_Body_GetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetLinearVelocity", body, velocity);
            }
            mh$.invokeExact(body, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetLinearVelocity(JPH_Body *body, const JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetLinearVelocity$descriptor() {
        return JPH_Body_SetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetLinearVelocity(JPH_Body *body, const JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_Body_SetLinearVelocity$handle() {
        return JPH_Body_SetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetLinearVelocity(JPH_Body *body, const JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_Body_SetLinearVelocity$address() {
        return JPH_Body_SetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetLinearVelocity(JPH_Body *body, const JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_Body_SetLinearVelocity(MemorySegment body, MemorySegment velocity) {
        var mh$ = JPH_Body_SetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetLinearVelocity", body, velocity);
            }
            mh$.invokeExact(body, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetAngularVelocity(JPH_Body *body, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetAngularVelocity$descriptor() {
        return JPH_Body_GetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetAngularVelocity(JPH_Body *body, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_Body_GetAngularVelocity$handle() {
        return JPH_Body_GetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetAngularVelocity(JPH_Body *body, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_Body_GetAngularVelocity$address() {
        return JPH_Body_GetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetAngularVelocity(JPH_Body *body, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_Body_GetAngularVelocity(MemorySegment body, MemorySegment velocity) {
        var mh$ = JPH_Body_GetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetAngularVelocity", body, velocity);
            }
            mh$.invokeExact(body, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetAngularVelocity(JPH_Body *body, const JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetAngularVelocity$descriptor() {
        return JPH_Body_SetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetAngularVelocity(JPH_Body *body, const JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_Body_SetAngularVelocity$handle() {
        return JPH_Body_SetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetAngularVelocity(JPH_Body *body, const JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_Body_SetAngularVelocity$address() {
        return JPH_Body_SetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetAngularVelocity(JPH_Body *body, const JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_Body_SetAngularVelocity(MemorySegment body, MemorySegment velocity) {
        var mh$ = JPH_Body_SetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetAngularVelocity", body, velocity);
            }
            mh$.invokeExact(body, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_AddForce {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_AddForce");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddForce(JPH_Body *body, const JPH_Vec3 *force)
     * }
     */
    public static FunctionDescriptor JPH_Body_AddForce$descriptor() {
        return JPH_Body_AddForce.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddForce(JPH_Body *body, const JPH_Vec3 *force)
     * }
     */
    public static MethodHandle JPH_Body_AddForce$handle() {
        return JPH_Body_AddForce.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddForce(JPH_Body *body, const JPH_Vec3 *force)
     * }
     */
    public static MemorySegment JPH_Body_AddForce$address() {
        return JPH_Body_AddForce.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_AddForce(JPH_Body *body, const JPH_Vec3 *force)
     * }
     */
    public static void JPH_Body_AddForce(MemorySegment body, MemorySegment force) {
        var mh$ = JPH_Body_AddForce.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_AddForce", body, force);
            }
            mh$.invokeExact(body, force);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_AddForceAtPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_AddForceAtPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddForceAtPosition(JPH_Body *body, const JPH_Vec3 *force, const JPH_RVec3 *position)
     * }
     */
    public static FunctionDescriptor JPH_Body_AddForceAtPosition$descriptor() {
        return JPH_Body_AddForceAtPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddForceAtPosition(JPH_Body *body, const JPH_Vec3 *force, const JPH_RVec3 *position)
     * }
     */
    public static MethodHandle JPH_Body_AddForceAtPosition$handle() {
        return JPH_Body_AddForceAtPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddForceAtPosition(JPH_Body *body, const JPH_Vec3 *force, const JPH_RVec3 *position)
     * }
     */
    public static MemorySegment JPH_Body_AddForceAtPosition$address() {
        return JPH_Body_AddForceAtPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_AddForceAtPosition(JPH_Body *body, const JPH_Vec3 *force, const JPH_RVec3 *position)
     * }
     */
    public static void JPH_Body_AddForceAtPosition(MemorySegment body, MemorySegment force, MemorySegment position) {
        var mh$ = JPH_Body_AddForceAtPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_AddForceAtPosition", body, force, position);
            }
            mh$.invokeExact(body, force, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_AddTorque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_AddTorque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddTorque(JPH_Body *body, const JPH_Vec3 *force)
     * }
     */
    public static FunctionDescriptor JPH_Body_AddTorque$descriptor() {
        return JPH_Body_AddTorque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddTorque(JPH_Body *body, const JPH_Vec3 *force)
     * }
     */
    public static MethodHandle JPH_Body_AddTorque$handle() {
        return JPH_Body_AddTorque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddTorque(JPH_Body *body, const JPH_Vec3 *force)
     * }
     */
    public static MemorySegment JPH_Body_AddTorque$address() {
        return JPH_Body_AddTorque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_AddTorque(JPH_Body *body, const JPH_Vec3 *force)
     * }
     */
    public static void JPH_Body_AddTorque(MemorySegment body, MemorySegment force) {
        var mh$ = JPH_Body_AddTorque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_AddTorque", body, force);
            }
            mh$.invokeExact(body, force);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetAccumulatedForce {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetAccumulatedForce");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetAccumulatedForce(JPH_Body *body, JPH_Vec3 *force)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetAccumulatedForce$descriptor() {
        return JPH_Body_GetAccumulatedForce.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetAccumulatedForce(JPH_Body *body, JPH_Vec3 *force)
     * }
     */
    public static MethodHandle JPH_Body_GetAccumulatedForce$handle() {
        return JPH_Body_GetAccumulatedForce.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetAccumulatedForce(JPH_Body *body, JPH_Vec3 *force)
     * }
     */
    public static MemorySegment JPH_Body_GetAccumulatedForce$address() {
        return JPH_Body_GetAccumulatedForce.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetAccumulatedForce(JPH_Body *body, JPH_Vec3 *force)
     * }
     */
    public static void JPH_Body_GetAccumulatedForce(MemorySegment body, MemorySegment force) {
        var mh$ = JPH_Body_GetAccumulatedForce.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetAccumulatedForce", body, force);
            }
            mh$.invokeExact(body, force);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetAccumulatedTorque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetAccumulatedTorque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetAccumulatedTorque(JPH_Body *body, JPH_Vec3 *force)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetAccumulatedTorque$descriptor() {
        return JPH_Body_GetAccumulatedTorque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetAccumulatedTorque(JPH_Body *body, JPH_Vec3 *force)
     * }
     */
    public static MethodHandle JPH_Body_GetAccumulatedTorque$handle() {
        return JPH_Body_GetAccumulatedTorque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetAccumulatedTorque(JPH_Body *body, JPH_Vec3 *force)
     * }
     */
    public static MemorySegment JPH_Body_GetAccumulatedTorque$address() {
        return JPH_Body_GetAccumulatedTorque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetAccumulatedTorque(JPH_Body *body, JPH_Vec3 *force)
     * }
     */
    public static void JPH_Body_GetAccumulatedTorque(MemorySegment body, MemorySegment force) {
        var mh$ = JPH_Body_GetAccumulatedTorque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetAccumulatedTorque", body, force);
            }
            mh$.invokeExact(body, force);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_AddImpulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_AddImpulse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddImpulse(JPH_Body *body, const JPH_Vec3 *impulse)
     * }
     */
    public static FunctionDescriptor JPH_Body_AddImpulse$descriptor() {
        return JPH_Body_AddImpulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddImpulse(JPH_Body *body, const JPH_Vec3 *impulse)
     * }
     */
    public static MethodHandle JPH_Body_AddImpulse$handle() {
        return JPH_Body_AddImpulse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddImpulse(JPH_Body *body, const JPH_Vec3 *impulse)
     * }
     */
    public static MemorySegment JPH_Body_AddImpulse$address() {
        return JPH_Body_AddImpulse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_AddImpulse(JPH_Body *body, const JPH_Vec3 *impulse)
     * }
     */
    public static void JPH_Body_AddImpulse(MemorySegment body, MemorySegment impulse) {
        var mh$ = JPH_Body_AddImpulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_AddImpulse", body, impulse);
            }
            mh$.invokeExact(body, impulse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_AddImpulseAtPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_AddImpulseAtPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddImpulseAtPosition(JPH_Body *body, const JPH_Vec3 *impulse, const JPH_RVec3 *position)
     * }
     */
    public static FunctionDescriptor JPH_Body_AddImpulseAtPosition$descriptor() {
        return JPH_Body_AddImpulseAtPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddImpulseAtPosition(JPH_Body *body, const JPH_Vec3 *impulse, const JPH_RVec3 *position)
     * }
     */
    public static MethodHandle JPH_Body_AddImpulseAtPosition$handle() {
        return JPH_Body_AddImpulseAtPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddImpulseAtPosition(JPH_Body *body, const JPH_Vec3 *impulse, const JPH_RVec3 *position)
     * }
     */
    public static MemorySegment JPH_Body_AddImpulseAtPosition$address() {
        return JPH_Body_AddImpulseAtPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_AddImpulseAtPosition(JPH_Body *body, const JPH_Vec3 *impulse, const JPH_RVec3 *position)
     * }
     */
    public static void JPH_Body_AddImpulseAtPosition(MemorySegment body, MemorySegment impulse, MemorySegment position) {
        var mh$ = JPH_Body_AddImpulseAtPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_AddImpulseAtPosition", body, impulse, position);
            }
            mh$.invokeExact(body, impulse, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_AddAngularImpulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_AddAngularImpulse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddAngularImpulse(JPH_Body *body, const JPH_Vec3 *angularImpulse)
     * }
     */
    public static FunctionDescriptor JPH_Body_AddAngularImpulse$descriptor() {
        return JPH_Body_AddAngularImpulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddAngularImpulse(JPH_Body *body, const JPH_Vec3 *angularImpulse)
     * }
     */
    public static MethodHandle JPH_Body_AddAngularImpulse$handle() {
        return JPH_Body_AddAngularImpulse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_AddAngularImpulse(JPH_Body *body, const JPH_Vec3 *angularImpulse)
     * }
     */
    public static MemorySegment JPH_Body_AddAngularImpulse$address() {
        return JPH_Body_AddAngularImpulse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_AddAngularImpulse(JPH_Body *body, const JPH_Vec3 *angularImpulse)
     * }
     */
    public static void JPH_Body_AddAngularImpulse(MemorySegment body, MemorySegment angularImpulse) {
        var mh$ = JPH_Body_AddAngularImpulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_AddAngularImpulse", body, angularImpulse);
            }
            mh$.invokeExact(body, angularImpulse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetPosition(const JPH_Body *body, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetPosition$descriptor() {
        return JPH_Body_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetPosition(const JPH_Body *body, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_Body_GetPosition$handle() {
        return JPH_Body_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetPosition(const JPH_Body *body, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_Body_GetPosition$address() {
        return JPH_Body_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetPosition(const JPH_Body *body, JPH_RVec3 *result)
     * }
     */
    public static void JPH_Body_GetPosition(MemorySegment body, MemorySegment result) {
        var mh$ = JPH_Body_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetPosition", body, result);
            }
            mh$.invokeExact(body, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetRotation(const JPH_Body *body, JPH_Quat *result)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetRotation$descriptor() {
        return JPH_Body_GetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetRotation(const JPH_Body *body, JPH_Quat *result)
     * }
     */
    public static MethodHandle JPH_Body_GetRotation$handle() {
        return JPH_Body_GetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetRotation(const JPH_Body *body, JPH_Quat *result)
     * }
     */
    public static MemorySegment JPH_Body_GetRotation$address() {
        return JPH_Body_GetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetRotation(const JPH_Body *body, JPH_Quat *result)
     * }
     */
    public static void JPH_Body_GetRotation(MemorySegment body, MemorySegment result) {
        var mh$ = JPH_Body_GetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetRotation", body, result);
            }
            mh$.invokeExact(body, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetCenterOfMassPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetCenterOfMassPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetCenterOfMassPosition(const JPH_Body *body, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetCenterOfMassPosition$descriptor() {
        return JPH_Body_GetCenterOfMassPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetCenterOfMassPosition(const JPH_Body *body, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_Body_GetCenterOfMassPosition$handle() {
        return JPH_Body_GetCenterOfMassPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetCenterOfMassPosition(const JPH_Body *body, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_Body_GetCenterOfMassPosition$address() {
        return JPH_Body_GetCenterOfMassPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetCenterOfMassPosition(const JPH_Body *body, JPH_RVec3 *result)
     * }
     */
    public static void JPH_Body_GetCenterOfMassPosition(MemorySegment body, MemorySegment result) {
        var mh$ = JPH_Body_GetCenterOfMassPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetCenterOfMassPosition", body, result);
            }
            mh$.invokeExact(body, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetWorldTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetWorldTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldTransform(const JPH_Body *body, JPH_RMatrix4x4 *result)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetWorldTransform$descriptor() {
        return JPH_Body_GetWorldTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldTransform(const JPH_Body *body, JPH_RMatrix4x4 *result)
     * }
     */
    public static MethodHandle JPH_Body_GetWorldTransform$handle() {
        return JPH_Body_GetWorldTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldTransform(const JPH_Body *body, JPH_RMatrix4x4 *result)
     * }
     */
    public static MemorySegment JPH_Body_GetWorldTransform$address() {
        return JPH_Body_GetWorldTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetWorldTransform(const JPH_Body *body, JPH_RMatrix4x4 *result)
     * }
     */
    public static void JPH_Body_GetWorldTransform(MemorySegment body, MemorySegment result) {
        var mh$ = JPH_Body_GetWorldTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetWorldTransform", body, result);
            }
            mh$.invokeExact(body, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetCenterOfMassTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetCenterOfMassTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetCenterOfMassTransform(const JPH_Body *body, JPH_RMatrix4x4 *result)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetCenterOfMassTransform$descriptor() {
        return JPH_Body_GetCenterOfMassTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetCenterOfMassTransform(const JPH_Body *body, JPH_RMatrix4x4 *result)
     * }
     */
    public static MethodHandle JPH_Body_GetCenterOfMassTransform$handle() {
        return JPH_Body_GetCenterOfMassTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_GetCenterOfMassTransform(const JPH_Body *body, JPH_RMatrix4x4 *result)
     * }
     */
    public static MemorySegment JPH_Body_GetCenterOfMassTransform$address() {
        return JPH_Body_GetCenterOfMassTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_GetCenterOfMassTransform(const JPH_Body *body, JPH_RMatrix4x4 *result)
     * }
     */
    public static void JPH_Body_GetCenterOfMassTransform(MemorySegment body, MemorySegment result) {
        var mh$ = JPH_Body_GetCenterOfMassTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetCenterOfMassTransform", body, result);
            }
            mh$.invokeExact(body, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetUserData(JPH_Body *body, uint64_t userData)
     * }
     */
    public static FunctionDescriptor JPH_Body_SetUserData$descriptor() {
        return JPH_Body_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetUserData(JPH_Body *body, uint64_t userData)
     * }
     */
    public static MethodHandle JPH_Body_SetUserData$handle() {
        return JPH_Body_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_Body_SetUserData(JPH_Body *body, uint64_t userData)
     * }
     */
    public static MemorySegment JPH_Body_SetUserData$address() {
        return JPH_Body_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_Body_SetUserData(JPH_Body *body, uint64_t userData)
     * }
     */
    public static void JPH_Body_SetUserData(MemorySegment body, long userData) {
        var mh$ = JPH_Body_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_SetUserData", body, userData);
            }
            mh$.invokeExact(body, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_LONG_LONG,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPH_Body_GetUserData(JPH_Body *body)
     * }
     */
    public static FunctionDescriptor JPH_Body_GetUserData$descriptor() {
        return JPH_Body_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPH_Body_GetUserData(JPH_Body *body)
     * }
     */
    public static MethodHandle JPH_Body_GetUserData$handle() {
        return JPH_Body_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPH_Body_GetUserData(JPH_Body *body)
     * }
     */
    public static MemorySegment JPH_Body_GetUserData$address() {
        return JPH_Body_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPH_Body_GetUserData(JPH_Body *body)
     * }
     */
    public static long JPH_Body_GetUserData(MemorySegment body) {
        var mh$ = JPH_Body_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetUserData", body);
            }
            return (long)mh$.invokeExact(body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_Body_GetFixedToWorldBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_Body_GetFixedToWorldBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_Body_GetFixedToWorldBody()
     * }
     */
    public static FunctionDescriptor JPH_Body_GetFixedToWorldBody$descriptor() {
        return JPH_Body_GetFixedToWorldBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_Body_GetFixedToWorldBody()
     * }
     */
    public static MethodHandle JPH_Body_GetFixedToWorldBody$handle() {
        return JPH_Body_GetFixedToWorldBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Body *JPH_Body_GetFixedToWorldBody()
     * }
     */
    public static MemorySegment JPH_Body_GetFixedToWorldBody$address() {
        return JPH_Body_GetFixedToWorldBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Body *JPH_Body_GetFixedToWorldBody()
     * }
     */
    public static MemorySegment JPH_Body_GetFixedToWorldBody() {
        var mh$ = JPH_Body_GetFixedToWorldBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_Body_GetFixedToWorldBody");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseLayerFilter_SetProcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            JPH_BroadPhaseLayerFilter_Procs.layout(),
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseLayerFilter_SetProcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerFilter_SetProcs(JPH_BroadPhaseLayerFilter *filter, JPH_BroadPhaseLayerFilter_Procs procs, void *userData)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseLayerFilter_SetProcs$descriptor() {
        return JPH_BroadPhaseLayerFilter_SetProcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerFilter_SetProcs(JPH_BroadPhaseLayerFilter *filter, JPH_BroadPhaseLayerFilter_Procs procs, void *userData)
     * }
     */
    public static MethodHandle JPH_BroadPhaseLayerFilter_SetProcs$handle() {
        return JPH_BroadPhaseLayerFilter_SetProcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerFilter_SetProcs(JPH_BroadPhaseLayerFilter *filter, JPH_BroadPhaseLayerFilter_Procs procs, void *userData)
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerFilter_SetProcs$address() {
        return JPH_BroadPhaseLayerFilter_SetProcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerFilter_SetProcs(JPH_BroadPhaseLayerFilter *filter, JPH_BroadPhaseLayerFilter_Procs procs, void *userData)
     * }
     */
    public static void JPH_BroadPhaseLayerFilter_SetProcs(MemorySegment filter, MemorySegment procs, MemorySegment userData) {
        var mh$ = JPH_BroadPhaseLayerFilter_SetProcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseLayerFilter_SetProcs", filter, procs, userData);
            }
            mh$.invokeExact(filter, procs, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseLayerFilter_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseLayerFilter_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerFilter *JPH_BroadPhaseLayerFilter_Create()
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseLayerFilter_Create$descriptor() {
        return JPH_BroadPhaseLayerFilter_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerFilter *JPH_BroadPhaseLayerFilter_Create()
     * }
     */
    public static MethodHandle JPH_BroadPhaseLayerFilter_Create$handle() {
        return JPH_BroadPhaseLayerFilter_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerFilter *JPH_BroadPhaseLayerFilter_Create()
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerFilter_Create$address() {
        return JPH_BroadPhaseLayerFilter_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BroadPhaseLayerFilter *JPH_BroadPhaseLayerFilter_Create()
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerFilter_Create() {
        var mh$ = JPH_BroadPhaseLayerFilter_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseLayerFilter_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BroadPhaseLayerFilter_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BroadPhaseLayerFilter_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerFilter_Destroy(JPH_BroadPhaseLayerFilter *filter)
     * }
     */
    public static FunctionDescriptor JPH_BroadPhaseLayerFilter_Destroy$descriptor() {
        return JPH_BroadPhaseLayerFilter_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerFilter_Destroy(JPH_BroadPhaseLayerFilter *filter)
     * }
     */
    public static MethodHandle JPH_BroadPhaseLayerFilter_Destroy$handle() {
        return JPH_BroadPhaseLayerFilter_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerFilter_Destroy(JPH_BroadPhaseLayerFilter *filter)
     * }
     */
    public static MemorySegment JPH_BroadPhaseLayerFilter_Destroy$address() {
        return JPH_BroadPhaseLayerFilter_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BroadPhaseLayerFilter_Destroy(JPH_BroadPhaseLayerFilter *filter)
     * }
     */
    public static void JPH_BroadPhaseLayerFilter_Destroy(MemorySegment filter) {
        var mh$ = JPH_BroadPhaseLayerFilter_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BroadPhaseLayerFilter_Destroy", filter);
            }
            mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerFilter_SetProcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            JPH_ObjectLayerFilter_Procs.layout(),
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerFilter_SetProcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerFilter_SetProcs(JPH_ObjectLayerFilter *filter, JPH_ObjectLayerFilter_Procs procs, void *userData)
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerFilter_SetProcs$descriptor() {
        return JPH_ObjectLayerFilter_SetProcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerFilter_SetProcs(JPH_ObjectLayerFilter *filter, JPH_ObjectLayerFilter_Procs procs, void *userData)
     * }
     */
    public static MethodHandle JPH_ObjectLayerFilter_SetProcs$handle() {
        return JPH_ObjectLayerFilter_SetProcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerFilter_SetProcs(JPH_ObjectLayerFilter *filter, JPH_ObjectLayerFilter_Procs procs, void *userData)
     * }
     */
    public static MemorySegment JPH_ObjectLayerFilter_SetProcs$address() {
        return JPH_ObjectLayerFilter_SetProcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerFilter_SetProcs(JPH_ObjectLayerFilter *filter, JPH_ObjectLayerFilter_Procs procs, void *userData)
     * }
     */
    public static void JPH_ObjectLayerFilter_SetProcs(MemorySegment filter, MemorySegment procs, MemorySegment userData) {
        var mh$ = JPH_ObjectLayerFilter_SetProcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerFilter_SetProcs", filter, procs, userData);
            }
            mh$.invokeExact(filter, procs, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerFilter_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerFilter_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayerFilter *JPH_ObjectLayerFilter_Create()
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerFilter_Create$descriptor() {
        return JPH_ObjectLayerFilter_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayerFilter *JPH_ObjectLayerFilter_Create()
     * }
     */
    public static MethodHandle JPH_ObjectLayerFilter_Create$handle() {
        return JPH_ObjectLayerFilter_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ObjectLayerFilter *JPH_ObjectLayerFilter_Create()
     * }
     */
    public static MemorySegment JPH_ObjectLayerFilter_Create$address() {
        return JPH_ObjectLayerFilter_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ObjectLayerFilter *JPH_ObjectLayerFilter_Create()
     * }
     */
    public static MemorySegment JPH_ObjectLayerFilter_Create() {
        var mh$ = JPH_ObjectLayerFilter_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerFilter_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ObjectLayerFilter_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ObjectLayerFilter_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerFilter_Destroy(JPH_ObjectLayerFilter *filter)
     * }
     */
    public static FunctionDescriptor JPH_ObjectLayerFilter_Destroy$descriptor() {
        return JPH_ObjectLayerFilter_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerFilter_Destroy(JPH_ObjectLayerFilter *filter)
     * }
     */
    public static MethodHandle JPH_ObjectLayerFilter_Destroy$handle() {
        return JPH_ObjectLayerFilter_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerFilter_Destroy(JPH_ObjectLayerFilter *filter)
     * }
     */
    public static MemorySegment JPH_ObjectLayerFilter_Destroy$address() {
        return JPH_ObjectLayerFilter_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ObjectLayerFilter_Destroy(JPH_ObjectLayerFilter *filter)
     * }
     */
    public static void JPH_ObjectLayerFilter_Destroy(MemorySegment filter) {
        var mh$ = JPH_ObjectLayerFilter_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ObjectLayerFilter_Destroy", filter);
            }
            mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyFilter_SetProcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            JPH_BodyFilter_Procs.layout(),
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyFilter_SetProcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyFilter_SetProcs(JPH_BodyFilter *filter, JPH_BodyFilter_Procs procs, void *userData)
     * }
     */
    public static FunctionDescriptor JPH_BodyFilter_SetProcs$descriptor() {
        return JPH_BodyFilter_SetProcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyFilter_SetProcs(JPH_BodyFilter *filter, JPH_BodyFilter_Procs procs, void *userData)
     * }
     */
    public static MethodHandle JPH_BodyFilter_SetProcs$handle() {
        return JPH_BodyFilter_SetProcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyFilter_SetProcs(JPH_BodyFilter *filter, JPH_BodyFilter_Procs procs, void *userData)
     * }
     */
    public static MemorySegment JPH_BodyFilter_SetProcs$address() {
        return JPH_BodyFilter_SetProcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyFilter_SetProcs(JPH_BodyFilter *filter, JPH_BodyFilter_Procs procs, void *userData)
     * }
     */
    public static void JPH_BodyFilter_SetProcs(MemorySegment filter, MemorySegment procs, MemorySegment userData) {
        var mh$ = JPH_BodyFilter_SetProcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyFilter_SetProcs", filter, procs, userData);
            }
            mh$.invokeExact(filter, procs, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyFilter_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyFilter_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyFilter *JPH_BodyFilter_Create()
     * }
     */
    public static FunctionDescriptor JPH_BodyFilter_Create$descriptor() {
        return JPH_BodyFilter_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyFilter *JPH_BodyFilter_Create()
     * }
     */
    public static MethodHandle JPH_BodyFilter_Create$handle() {
        return JPH_BodyFilter_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyFilter *JPH_BodyFilter_Create()
     * }
     */
    public static MemorySegment JPH_BodyFilter_Create$address() {
        return JPH_BodyFilter_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyFilter *JPH_BodyFilter_Create()
     * }
     */
    public static MemorySegment JPH_BodyFilter_Create() {
        var mh$ = JPH_BodyFilter_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyFilter_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyFilter_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyFilter_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyFilter_Destroy(JPH_BodyFilter *filter)
     * }
     */
    public static FunctionDescriptor JPH_BodyFilter_Destroy$descriptor() {
        return JPH_BodyFilter_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyFilter_Destroy(JPH_BodyFilter *filter)
     * }
     */
    public static MethodHandle JPH_BodyFilter_Destroy$handle() {
        return JPH_BodyFilter_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyFilter_Destroy(JPH_BodyFilter *filter)
     * }
     */
    public static MemorySegment JPH_BodyFilter_Destroy$address() {
        return JPH_BodyFilter_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyFilter_Destroy(JPH_BodyFilter *filter)
     * }
     */
    public static void JPH_BodyFilter_Destroy(MemorySegment filter) {
        var mh$ = JPH_BodyFilter_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyFilter_Destroy", filter);
            }
            mh$.invokeExact(filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactListener_SetProcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            JPH_ContactListener_Procs.layout(),
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactListener_SetProcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactListener_SetProcs(JPH_ContactListener *listener, JPH_ContactListener_Procs procs, void *userData)
     * }
     */
    public static FunctionDescriptor JPH_ContactListener_SetProcs$descriptor() {
        return JPH_ContactListener_SetProcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactListener_SetProcs(JPH_ContactListener *listener, JPH_ContactListener_Procs procs, void *userData)
     * }
     */
    public static MethodHandle JPH_ContactListener_SetProcs$handle() {
        return JPH_ContactListener_SetProcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactListener_SetProcs(JPH_ContactListener *listener, JPH_ContactListener_Procs procs, void *userData)
     * }
     */
    public static MemorySegment JPH_ContactListener_SetProcs$address() {
        return JPH_ContactListener_SetProcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactListener_SetProcs(JPH_ContactListener *listener, JPH_ContactListener_Procs procs, void *userData)
     * }
     */
    public static void JPH_ContactListener_SetProcs(MemorySegment listener, MemorySegment procs, MemorySegment userData) {
        var mh$ = JPH_ContactListener_SetProcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactListener_SetProcs", listener, procs, userData);
            }
            mh$.invokeExact(listener, procs, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactListener_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactListener_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_ContactListener *JPH_ContactListener_Create()
     * }
     */
    public static FunctionDescriptor JPH_ContactListener_Create$descriptor() {
        return JPH_ContactListener_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_ContactListener *JPH_ContactListener_Create()
     * }
     */
    public static MethodHandle JPH_ContactListener_Create$handle() {
        return JPH_ContactListener_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_ContactListener *JPH_ContactListener_Create()
     * }
     */
    public static MemorySegment JPH_ContactListener_Create$address() {
        return JPH_ContactListener_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_ContactListener *JPH_ContactListener_Create()
     * }
     */
    public static MemorySegment JPH_ContactListener_Create() {
        var mh$ = JPH_ContactListener_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactListener_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactListener_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactListener_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactListener_Destroy(JPH_ContactListener *listener)
     * }
     */
    public static FunctionDescriptor JPH_ContactListener_Destroy$descriptor() {
        return JPH_ContactListener_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactListener_Destroy(JPH_ContactListener *listener)
     * }
     */
    public static MethodHandle JPH_ContactListener_Destroy$handle() {
        return JPH_ContactListener_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactListener_Destroy(JPH_ContactListener *listener)
     * }
     */
    public static MemorySegment JPH_ContactListener_Destroy$address() {
        return JPH_ContactListener_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactListener_Destroy(JPH_ContactListener *listener)
     * }
     */
    public static void JPH_ContactListener_Destroy(MemorySegment listener) {
        var mh$ = JPH_ContactListener_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactListener_Destroy", listener);
            }
            mh$.invokeExact(listener);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyActivationListener_SetProcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            JPH_BodyActivationListener_Procs.layout(),
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyActivationListener_SetProcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyActivationListener_SetProcs(JPH_BodyActivationListener *listener, JPH_BodyActivationListener_Procs procs, void *userData)
     * }
     */
    public static FunctionDescriptor JPH_BodyActivationListener_SetProcs$descriptor() {
        return JPH_BodyActivationListener_SetProcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyActivationListener_SetProcs(JPH_BodyActivationListener *listener, JPH_BodyActivationListener_Procs procs, void *userData)
     * }
     */
    public static MethodHandle JPH_BodyActivationListener_SetProcs$handle() {
        return JPH_BodyActivationListener_SetProcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyActivationListener_SetProcs(JPH_BodyActivationListener *listener, JPH_BodyActivationListener_Procs procs, void *userData)
     * }
     */
    public static MemorySegment JPH_BodyActivationListener_SetProcs$address() {
        return JPH_BodyActivationListener_SetProcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyActivationListener_SetProcs(JPH_BodyActivationListener *listener, JPH_BodyActivationListener_Procs procs, void *userData)
     * }
     */
    public static void JPH_BodyActivationListener_SetProcs(MemorySegment listener, MemorySegment procs, MemorySegment userData) {
        var mh$ = JPH_BodyActivationListener_SetProcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyActivationListener_SetProcs", listener, procs, userData);
            }
            mh$.invokeExact(listener, procs, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyActivationListener_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyActivationListener_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyActivationListener *JPH_BodyActivationListener_Create()
     * }
     */
    public static FunctionDescriptor JPH_BodyActivationListener_Create$descriptor() {
        return JPH_BodyActivationListener_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyActivationListener *JPH_BodyActivationListener_Create()
     * }
     */
    public static MethodHandle JPH_BodyActivationListener_Create$handle() {
        return JPH_BodyActivationListener_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyActivationListener *JPH_BodyActivationListener_Create()
     * }
     */
    public static MemorySegment JPH_BodyActivationListener_Create$address() {
        return JPH_BodyActivationListener_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyActivationListener *JPH_BodyActivationListener_Create()
     * }
     */
    public static MemorySegment JPH_BodyActivationListener_Create() {
        var mh$ = JPH_BodyActivationListener_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyActivationListener_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_BodyActivationListener_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_BodyActivationListener_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_BodyActivationListener_Destroy(JPH_BodyActivationListener *listener)
     * }
     */
    public static FunctionDescriptor JPH_BodyActivationListener_Destroy$descriptor() {
        return JPH_BodyActivationListener_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_BodyActivationListener_Destroy(JPH_BodyActivationListener *listener)
     * }
     */
    public static MethodHandle JPH_BodyActivationListener_Destroy$handle() {
        return JPH_BodyActivationListener_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_BodyActivationListener_Destroy(JPH_BodyActivationListener *listener)
     * }
     */
    public static MemorySegment JPH_BodyActivationListener_Destroy$address() {
        return JPH_BodyActivationListener_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_BodyActivationListener_Destroy(JPH_BodyActivationListener *listener)
     * }
     */
    public static void JPH_BodyActivationListener_Destroy(MemorySegment listener) {
        var mh$ = JPH_BodyActivationListener_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_BodyActivationListener_Destroy", listener);
            }
            mh$.invokeExact(listener);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactManifold_GetWorldSpaceNormal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactManifold_GetWorldSpaceNormal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceNormal(const JPH_ContactManifold *manifold, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ContactManifold_GetWorldSpaceNormal$descriptor() {
        return JPH_ContactManifold_GetWorldSpaceNormal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceNormal(const JPH_ContactManifold *manifold, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_ContactManifold_GetWorldSpaceNormal$handle() {
        return JPH_ContactManifold_GetWorldSpaceNormal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceNormal(const JPH_ContactManifold *manifold, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_ContactManifold_GetWorldSpaceNormal$address() {
        return JPH_ContactManifold_GetWorldSpaceNormal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceNormal(const JPH_ContactManifold *manifold, JPH_Vec3 *result)
     * }
     */
    public static void JPH_ContactManifold_GetWorldSpaceNormal(MemorySegment manifold, MemorySegment result) {
        var mh$ = JPH_ContactManifold_GetWorldSpaceNormal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactManifold_GetWorldSpaceNormal", manifold, result);
            }
            mh$.invokeExact(manifold, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactManifold_GetPenetrationDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactManifold_GetPenetrationDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ContactManifold_GetPenetrationDepth(const JPH_ContactManifold *manifold)
     * }
     */
    public static FunctionDescriptor JPH_ContactManifold_GetPenetrationDepth$descriptor() {
        return JPH_ContactManifold_GetPenetrationDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ContactManifold_GetPenetrationDepth(const JPH_ContactManifold *manifold)
     * }
     */
    public static MethodHandle JPH_ContactManifold_GetPenetrationDepth$handle() {
        return JPH_ContactManifold_GetPenetrationDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ContactManifold_GetPenetrationDepth(const JPH_ContactManifold *manifold)
     * }
     */
    public static MemorySegment JPH_ContactManifold_GetPenetrationDepth$address() {
        return JPH_ContactManifold_GetPenetrationDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ContactManifold_GetPenetrationDepth(const JPH_ContactManifold *manifold)
     * }
     */
    public static float JPH_ContactManifold_GetPenetrationDepth(MemorySegment manifold) {
        var mh$ = JPH_ContactManifold_GetPenetrationDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactManifold_GetPenetrationDepth", manifold);
            }
            return (float)mh$.invokeExact(manifold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactManifold_GetSubShapeID1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactManifold_GetSubShapeID1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_ContactManifold_GetSubShapeID1(const JPH_ContactManifold *manifold)
     * }
     */
    public static FunctionDescriptor JPH_ContactManifold_GetSubShapeID1$descriptor() {
        return JPH_ContactManifold_GetSubShapeID1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_ContactManifold_GetSubShapeID1(const JPH_ContactManifold *manifold)
     * }
     */
    public static MethodHandle JPH_ContactManifold_GetSubShapeID1$handle() {
        return JPH_ContactManifold_GetSubShapeID1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_ContactManifold_GetSubShapeID1(const JPH_ContactManifold *manifold)
     * }
     */
    public static MemorySegment JPH_ContactManifold_GetSubShapeID1$address() {
        return JPH_ContactManifold_GetSubShapeID1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_ContactManifold_GetSubShapeID1(const JPH_ContactManifold *manifold)
     * }
     */
    public static int JPH_ContactManifold_GetSubShapeID1(MemorySegment manifold) {
        var mh$ = JPH_ContactManifold_GetSubShapeID1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactManifold_GetSubShapeID1", manifold);
            }
            return (int)mh$.invokeExact(manifold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactManifold_GetSubShapeID2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactManifold_GetSubShapeID2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_ContactManifold_GetSubShapeID2(const JPH_ContactManifold *manifold)
     * }
     */
    public static FunctionDescriptor JPH_ContactManifold_GetSubShapeID2$descriptor() {
        return JPH_ContactManifold_GetSubShapeID2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_ContactManifold_GetSubShapeID2(const JPH_ContactManifold *manifold)
     * }
     */
    public static MethodHandle JPH_ContactManifold_GetSubShapeID2$handle() {
        return JPH_ContactManifold_GetSubShapeID2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_ContactManifold_GetSubShapeID2(const JPH_ContactManifold *manifold)
     * }
     */
    public static MemorySegment JPH_ContactManifold_GetSubShapeID2$address() {
        return JPH_ContactManifold_GetSubShapeID2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_ContactManifold_GetSubShapeID2(const JPH_ContactManifold *manifold)
     * }
     */
    public static int JPH_ContactManifold_GetSubShapeID2(MemorySegment manifold) {
        var mh$ = JPH_ContactManifold_GetSubShapeID2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactManifold_GetSubShapeID2", manifold);
            }
            return (int)mh$.invokeExact(manifold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactManifold_GetPointCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactManifold_GetPointCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ContactManifold_GetPointCount(const JPH_ContactManifold *manifold)
     * }
     */
    public static FunctionDescriptor JPH_ContactManifold_GetPointCount$descriptor() {
        return JPH_ContactManifold_GetPointCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ContactManifold_GetPointCount(const JPH_ContactManifold *manifold)
     * }
     */
    public static MethodHandle JPH_ContactManifold_GetPointCount$handle() {
        return JPH_ContactManifold_GetPointCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_ContactManifold_GetPointCount(const JPH_ContactManifold *manifold)
     * }
     */
    public static MemorySegment JPH_ContactManifold_GetPointCount$address() {
        return JPH_ContactManifold_GetPointCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_ContactManifold_GetPointCount(const JPH_ContactManifold *manifold)
     * }
     */
    public static int JPH_ContactManifold_GetPointCount(MemorySegment manifold) {
        var mh$ = JPH_ContactManifold_GetPointCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactManifold_GetPointCount", manifold);
            }
            return (int)mh$.invokeExact(manifold);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactManifold_GetWorldSpaceContactPointOn1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactManifold_GetWorldSpaceContactPointOn1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceContactPointOn1(const JPH_ContactManifold *manifold, uint32_t index, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ContactManifold_GetWorldSpaceContactPointOn1$descriptor() {
        return JPH_ContactManifold_GetWorldSpaceContactPointOn1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceContactPointOn1(const JPH_ContactManifold *manifold, uint32_t index, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_ContactManifold_GetWorldSpaceContactPointOn1$handle() {
        return JPH_ContactManifold_GetWorldSpaceContactPointOn1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceContactPointOn1(const JPH_ContactManifold *manifold, uint32_t index, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_ContactManifold_GetWorldSpaceContactPointOn1$address() {
        return JPH_ContactManifold_GetWorldSpaceContactPointOn1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceContactPointOn1(const JPH_ContactManifold *manifold, uint32_t index, JPH_RVec3 *result)
     * }
     */
    public static void JPH_ContactManifold_GetWorldSpaceContactPointOn1(MemorySegment manifold, int index, MemorySegment result) {
        var mh$ = JPH_ContactManifold_GetWorldSpaceContactPointOn1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactManifold_GetWorldSpaceContactPointOn1", manifold, index, result);
            }
            mh$.invokeExact(manifold, index, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactManifold_GetWorldSpaceContactPointOn2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactManifold_GetWorldSpaceContactPointOn2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceContactPointOn2(const JPH_ContactManifold *manifold, uint32_t index, JPH_RVec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ContactManifold_GetWorldSpaceContactPointOn2$descriptor() {
        return JPH_ContactManifold_GetWorldSpaceContactPointOn2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceContactPointOn2(const JPH_ContactManifold *manifold, uint32_t index, JPH_RVec3 *result)
     * }
     */
    public static MethodHandle JPH_ContactManifold_GetWorldSpaceContactPointOn2$handle() {
        return JPH_ContactManifold_GetWorldSpaceContactPointOn2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceContactPointOn2(const JPH_ContactManifold *manifold, uint32_t index, JPH_RVec3 *result)
     * }
     */
    public static MemorySegment JPH_ContactManifold_GetWorldSpaceContactPointOn2$address() {
        return JPH_ContactManifold_GetWorldSpaceContactPointOn2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactManifold_GetWorldSpaceContactPointOn2(const JPH_ContactManifold *manifold, uint32_t index, JPH_RVec3 *result)
     * }
     */
    public static void JPH_ContactManifold_GetWorldSpaceContactPointOn2(MemorySegment manifold, int index, MemorySegment result) {
        var mh$ = JPH_ContactManifold_GetWorldSpaceContactPointOn2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactManifold_GetWorldSpaceContactPointOn2", manifold, index, result);
            }
            mh$.invokeExact(manifold, index, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_GetFriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_GetFriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetFriction(JPH_ContactSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_GetFriction$descriptor() {
        return JPH_ContactSettings_GetFriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetFriction(JPH_ContactSettings *settings)
     * }
     */
    public static MethodHandle JPH_ContactSettings_GetFriction$handle() {
        return JPH_ContactSettings_GetFriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetFriction(JPH_ContactSettings *settings)
     * }
     */
    public static MemorySegment JPH_ContactSettings_GetFriction$address() {
        return JPH_ContactSettings_GetFriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetFriction(JPH_ContactSettings *settings)
     * }
     */
    public static float JPH_ContactSettings_GetFriction(MemorySegment settings) {
        var mh$ = JPH_ContactSettings_GetFriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_GetFriction", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_SetFriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_SetFriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetFriction(JPH_ContactSettings *settings, float friction)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_SetFriction$descriptor() {
        return JPH_ContactSettings_SetFriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetFriction(JPH_ContactSettings *settings, float friction)
     * }
     */
    public static MethodHandle JPH_ContactSettings_SetFriction$handle() {
        return JPH_ContactSettings_SetFriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetFriction(JPH_ContactSettings *settings, float friction)
     * }
     */
    public static MemorySegment JPH_ContactSettings_SetFriction$address() {
        return JPH_ContactSettings_SetFriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetFriction(JPH_ContactSettings *settings, float friction)
     * }
     */
    public static void JPH_ContactSettings_SetFriction(MemorySegment settings, float friction) {
        var mh$ = JPH_ContactSettings_SetFriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_SetFriction", settings, friction);
            }
            mh$.invokeExact(settings, friction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_GetRestitution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_GetRestitution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetRestitution(JPH_ContactSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_GetRestitution$descriptor() {
        return JPH_ContactSettings_GetRestitution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetRestitution(JPH_ContactSettings *settings)
     * }
     */
    public static MethodHandle JPH_ContactSettings_GetRestitution$handle() {
        return JPH_ContactSettings_GetRestitution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetRestitution(JPH_ContactSettings *settings)
     * }
     */
    public static MemorySegment JPH_ContactSettings_GetRestitution$address() {
        return JPH_ContactSettings_GetRestitution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetRestitution(JPH_ContactSettings *settings)
     * }
     */
    public static float JPH_ContactSettings_GetRestitution(MemorySegment settings) {
        var mh$ = JPH_ContactSettings_GetRestitution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_GetRestitution", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_SetRestitution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_SetRestitution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRestitution(JPH_ContactSettings *settings, float restitution)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_SetRestitution$descriptor() {
        return JPH_ContactSettings_SetRestitution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRestitution(JPH_ContactSettings *settings, float restitution)
     * }
     */
    public static MethodHandle JPH_ContactSettings_SetRestitution$handle() {
        return JPH_ContactSettings_SetRestitution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRestitution(JPH_ContactSettings *settings, float restitution)
     * }
     */
    public static MemorySegment JPH_ContactSettings_SetRestitution$address() {
        return JPH_ContactSettings_SetRestitution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRestitution(JPH_ContactSettings *settings, float restitution)
     * }
     */
    public static void JPH_ContactSettings_SetRestitution(MemorySegment settings, float restitution) {
        var mh$ = JPH_ContactSettings_SetRestitution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_SetRestitution", settings, restitution);
            }
            mh$.invokeExact(settings, restitution);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_GetInvMassScale1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_GetInvMassScale1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvMassScale1(JPH_ContactSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_GetInvMassScale1$descriptor() {
        return JPH_ContactSettings_GetInvMassScale1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvMassScale1(JPH_ContactSettings *settings)
     * }
     */
    public static MethodHandle JPH_ContactSettings_GetInvMassScale1$handle() {
        return JPH_ContactSettings_GetInvMassScale1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvMassScale1(JPH_ContactSettings *settings)
     * }
     */
    public static MemorySegment JPH_ContactSettings_GetInvMassScale1$address() {
        return JPH_ContactSettings_GetInvMassScale1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvMassScale1(JPH_ContactSettings *settings)
     * }
     */
    public static float JPH_ContactSettings_GetInvMassScale1(MemorySegment settings) {
        var mh$ = JPH_ContactSettings_GetInvMassScale1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_GetInvMassScale1", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_SetInvMassScale1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_SetInvMassScale1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvMassScale1(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_SetInvMassScale1$descriptor() {
        return JPH_ContactSettings_SetInvMassScale1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvMassScale1(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static MethodHandle JPH_ContactSettings_SetInvMassScale1$handle() {
        return JPH_ContactSettings_SetInvMassScale1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvMassScale1(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static MemorySegment JPH_ContactSettings_SetInvMassScale1$address() {
        return JPH_ContactSettings_SetInvMassScale1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvMassScale1(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static void JPH_ContactSettings_SetInvMassScale1(MemorySegment settings, float scale) {
        var mh$ = JPH_ContactSettings_SetInvMassScale1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_SetInvMassScale1", settings, scale);
            }
            mh$.invokeExact(settings, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_GetInvInertiaScale1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_GetInvInertiaScale1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvInertiaScale1(JPH_ContactSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_GetInvInertiaScale1$descriptor() {
        return JPH_ContactSettings_GetInvInertiaScale1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvInertiaScale1(JPH_ContactSettings *settings)
     * }
     */
    public static MethodHandle JPH_ContactSettings_GetInvInertiaScale1$handle() {
        return JPH_ContactSettings_GetInvInertiaScale1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvInertiaScale1(JPH_ContactSettings *settings)
     * }
     */
    public static MemorySegment JPH_ContactSettings_GetInvInertiaScale1$address() {
        return JPH_ContactSettings_GetInvInertiaScale1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvInertiaScale1(JPH_ContactSettings *settings)
     * }
     */
    public static float JPH_ContactSettings_GetInvInertiaScale1(MemorySegment settings) {
        var mh$ = JPH_ContactSettings_GetInvInertiaScale1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_GetInvInertiaScale1", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_SetInvInertiaScale1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_SetInvInertiaScale1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvInertiaScale1(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_SetInvInertiaScale1$descriptor() {
        return JPH_ContactSettings_SetInvInertiaScale1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvInertiaScale1(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static MethodHandle JPH_ContactSettings_SetInvInertiaScale1$handle() {
        return JPH_ContactSettings_SetInvInertiaScale1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvInertiaScale1(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static MemorySegment JPH_ContactSettings_SetInvInertiaScale1$address() {
        return JPH_ContactSettings_SetInvInertiaScale1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvInertiaScale1(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static void JPH_ContactSettings_SetInvInertiaScale1(MemorySegment settings, float scale) {
        var mh$ = JPH_ContactSettings_SetInvInertiaScale1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_SetInvInertiaScale1", settings, scale);
            }
            mh$.invokeExact(settings, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_GetInvMassScale2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_GetInvMassScale2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvMassScale2(JPH_ContactSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_GetInvMassScale2$descriptor() {
        return JPH_ContactSettings_GetInvMassScale2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvMassScale2(JPH_ContactSettings *settings)
     * }
     */
    public static MethodHandle JPH_ContactSettings_GetInvMassScale2$handle() {
        return JPH_ContactSettings_GetInvMassScale2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvMassScale2(JPH_ContactSettings *settings)
     * }
     */
    public static MemorySegment JPH_ContactSettings_GetInvMassScale2$address() {
        return JPH_ContactSettings_GetInvMassScale2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvMassScale2(JPH_ContactSettings *settings)
     * }
     */
    public static float JPH_ContactSettings_GetInvMassScale2(MemorySegment settings) {
        var mh$ = JPH_ContactSettings_GetInvMassScale2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_GetInvMassScale2", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_SetInvMassScale2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_SetInvMassScale2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvMassScale2(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_SetInvMassScale2$descriptor() {
        return JPH_ContactSettings_SetInvMassScale2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvMassScale2(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static MethodHandle JPH_ContactSettings_SetInvMassScale2$handle() {
        return JPH_ContactSettings_SetInvMassScale2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvMassScale2(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static MemorySegment JPH_ContactSettings_SetInvMassScale2$address() {
        return JPH_ContactSettings_SetInvMassScale2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvMassScale2(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static void JPH_ContactSettings_SetInvMassScale2(MemorySegment settings, float scale) {
        var mh$ = JPH_ContactSettings_SetInvMassScale2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_SetInvMassScale2", settings, scale);
            }
            mh$.invokeExact(settings, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_GetInvInertiaScale2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_GetInvInertiaScale2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvInertiaScale2(JPH_ContactSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_GetInvInertiaScale2$descriptor() {
        return JPH_ContactSettings_GetInvInertiaScale2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvInertiaScale2(JPH_ContactSettings *settings)
     * }
     */
    public static MethodHandle JPH_ContactSettings_GetInvInertiaScale2$handle() {
        return JPH_ContactSettings_GetInvInertiaScale2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvInertiaScale2(JPH_ContactSettings *settings)
     * }
     */
    public static MemorySegment JPH_ContactSettings_GetInvInertiaScale2$address() {
        return JPH_ContactSettings_GetInvInertiaScale2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_ContactSettings_GetInvInertiaScale2(JPH_ContactSettings *settings)
     * }
     */
    public static float JPH_ContactSettings_GetInvInertiaScale2(MemorySegment settings) {
        var mh$ = JPH_ContactSettings_GetInvInertiaScale2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_GetInvInertiaScale2", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_SetInvInertiaScale2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_SetInvInertiaScale2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvInertiaScale2(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_SetInvInertiaScale2$descriptor() {
        return JPH_ContactSettings_SetInvInertiaScale2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvInertiaScale2(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static MethodHandle JPH_ContactSettings_SetInvInertiaScale2$handle() {
        return JPH_ContactSettings_SetInvInertiaScale2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvInertiaScale2(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static MemorySegment JPH_ContactSettings_SetInvInertiaScale2$address() {
        return JPH_ContactSettings_SetInvInertiaScale2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetInvInertiaScale2(JPH_ContactSettings *settings, float scale)
     * }
     */
    public static void JPH_ContactSettings_SetInvInertiaScale2(MemorySegment settings, float scale) {
        var mh$ = JPH_ContactSettings_SetInvInertiaScale2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_SetInvInertiaScale2", settings, scale);
            }
            mh$.invokeExact(settings, scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_GetIsSensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_GetIsSensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ContactSettings_GetIsSensor(JPH_ContactSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_GetIsSensor$descriptor() {
        return JPH_ContactSettings_GetIsSensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ContactSettings_GetIsSensor(JPH_ContactSettings *settings)
     * }
     */
    public static MethodHandle JPH_ContactSettings_GetIsSensor$handle() {
        return JPH_ContactSettings_GetIsSensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ContactSettings_GetIsSensor(JPH_ContactSettings *settings)
     * }
     */
    public static MemorySegment JPH_ContactSettings_GetIsSensor$address() {
        return JPH_ContactSettings_GetIsSensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_ContactSettings_GetIsSensor(JPH_ContactSettings *settings)
     * }
     */
    public static int JPH_ContactSettings_GetIsSensor(MemorySegment settings) {
        var mh$ = JPH_ContactSettings_GetIsSensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_GetIsSensor", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_SetIsSensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_SetIsSensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetIsSensor(JPH_ContactSettings *settings, JPH_Bool32 sensor)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_SetIsSensor$descriptor() {
        return JPH_ContactSettings_SetIsSensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetIsSensor(JPH_ContactSettings *settings, JPH_Bool32 sensor)
     * }
     */
    public static MethodHandle JPH_ContactSettings_SetIsSensor$handle() {
        return JPH_ContactSettings_SetIsSensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetIsSensor(JPH_ContactSettings *settings, JPH_Bool32 sensor)
     * }
     */
    public static MemorySegment JPH_ContactSettings_SetIsSensor$address() {
        return JPH_ContactSettings_SetIsSensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetIsSensor(JPH_ContactSettings *settings, JPH_Bool32 sensor)
     * }
     */
    public static void JPH_ContactSettings_SetIsSensor(MemorySegment settings, int sensor) {
        var mh$ = JPH_ContactSettings_SetIsSensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_SetIsSensor", settings, sensor);
            }
            mh$.invokeExact(settings, sensor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_GetRelativeLinearSurfaceVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_GetRelativeLinearSurfaceVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_GetRelativeLinearSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_GetRelativeLinearSurfaceVelocity$descriptor() {
        return JPH_ContactSettings_GetRelativeLinearSurfaceVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_GetRelativeLinearSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_ContactSettings_GetRelativeLinearSurfaceVelocity$handle() {
        return JPH_ContactSettings_GetRelativeLinearSurfaceVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_GetRelativeLinearSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_ContactSettings_GetRelativeLinearSurfaceVelocity$address() {
        return JPH_ContactSettings_GetRelativeLinearSurfaceVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_GetRelativeLinearSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_ContactSettings_GetRelativeLinearSurfaceVelocity(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_ContactSettings_GetRelativeLinearSurfaceVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_GetRelativeLinearSurfaceVelocity", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_SetRelativeLinearSurfaceVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_SetRelativeLinearSurfaceVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRelativeLinearSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_SetRelativeLinearSurfaceVelocity$descriptor() {
        return JPH_ContactSettings_SetRelativeLinearSurfaceVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRelativeLinearSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_ContactSettings_SetRelativeLinearSurfaceVelocity$handle() {
        return JPH_ContactSettings_SetRelativeLinearSurfaceVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRelativeLinearSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_ContactSettings_SetRelativeLinearSurfaceVelocity$address() {
        return JPH_ContactSettings_SetRelativeLinearSurfaceVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRelativeLinearSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_ContactSettings_SetRelativeLinearSurfaceVelocity(MemorySegment settings, MemorySegment velocity) {
        var mh$ = JPH_ContactSettings_SetRelativeLinearSurfaceVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_SetRelativeLinearSurfaceVelocity", settings, velocity);
            }
            mh$.invokeExact(settings, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_GetRelativeAngularSurfaceVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_GetRelativeAngularSurfaceVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_GetRelativeAngularSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_GetRelativeAngularSurfaceVelocity$descriptor() {
        return JPH_ContactSettings_GetRelativeAngularSurfaceVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_GetRelativeAngularSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_ContactSettings_GetRelativeAngularSurfaceVelocity$handle() {
        return JPH_ContactSettings_GetRelativeAngularSurfaceVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_GetRelativeAngularSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_ContactSettings_GetRelativeAngularSurfaceVelocity$address() {
        return JPH_ContactSettings_GetRelativeAngularSurfaceVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_GetRelativeAngularSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_ContactSettings_GetRelativeAngularSurfaceVelocity(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_ContactSettings_GetRelativeAngularSurfaceVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_GetRelativeAngularSurfaceVelocity", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_ContactSettings_SetRelativeAngularSurfaceVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_ContactSettings_SetRelativeAngularSurfaceVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRelativeAngularSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_ContactSettings_SetRelativeAngularSurfaceVelocity$descriptor() {
        return JPH_ContactSettings_SetRelativeAngularSurfaceVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRelativeAngularSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_ContactSettings_SetRelativeAngularSurfaceVelocity$handle() {
        return JPH_ContactSettings_SetRelativeAngularSurfaceVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRelativeAngularSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_ContactSettings_SetRelativeAngularSurfaceVelocity$address() {
        return JPH_ContactSettings_SetRelativeAngularSurfaceVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_ContactSettings_SetRelativeAngularSurfaceVelocity(JPH_ContactSettings *settings, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_ContactSettings_SetRelativeAngularSurfaceVelocity(MemorySegment settings, MemorySegment velocity) {
        var mh$ = JPH_ContactSettings_SetRelativeAngularSurfaceVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_ContactSettings_SetRelativeAngularSurfaceVelocity", settings, velocity);
            }
            mh$.invokeExact(settings, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_Destroy(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_Destroy$descriptor() {
        return JPH_CharacterBaseSettings_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_Destroy(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_Destroy$handle() {
        return JPH_CharacterBaseSettings_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_Destroy(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_Destroy$address() {
        return JPH_CharacterBaseSettings_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_Destroy(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static void JPH_CharacterBaseSettings_Destroy(MemorySegment settings) {
        var mh$ = JPH_CharacterBaseSettings_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_Destroy", settings);
            }
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_GetUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_GetUp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_GetUp(JPH_CharacterBaseSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_GetUp$descriptor() {
        return JPH_CharacterBaseSettings_GetUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_GetUp(JPH_CharacterBaseSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_GetUp$handle() {
        return JPH_CharacterBaseSettings_GetUp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_GetUp(JPH_CharacterBaseSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_GetUp$address() {
        return JPH_CharacterBaseSettings_GetUp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_GetUp(JPH_CharacterBaseSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_CharacterBaseSettings_GetUp(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_CharacterBaseSettings_GetUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_GetUp", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_SetUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_SetUp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetUp(JPH_CharacterBaseSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_SetUp$descriptor() {
        return JPH_CharacterBaseSettings_SetUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetUp(JPH_CharacterBaseSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_SetUp$handle() {
        return JPH_CharacterBaseSettings_SetUp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetUp(JPH_CharacterBaseSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_SetUp$address() {
        return JPH_CharacterBaseSettings_SetUp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetUp(JPH_CharacterBaseSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_CharacterBaseSettings_SetUp(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_CharacterBaseSettings_SetUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_SetUp", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_GetSupportingVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_GetSupportingVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_GetSupportingVolume(JPH_CharacterBaseSettings *settings, JPH_Plane *result)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_GetSupportingVolume$descriptor() {
        return JPH_CharacterBaseSettings_GetSupportingVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_GetSupportingVolume(JPH_CharacterBaseSettings *settings, JPH_Plane *result)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_GetSupportingVolume$handle() {
        return JPH_CharacterBaseSettings_GetSupportingVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_GetSupportingVolume(JPH_CharacterBaseSettings *settings, JPH_Plane *result)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_GetSupportingVolume$address() {
        return JPH_CharacterBaseSettings_GetSupportingVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_GetSupportingVolume(JPH_CharacterBaseSettings *settings, JPH_Plane *result)
     * }
     */
    public static void JPH_CharacterBaseSettings_GetSupportingVolume(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_CharacterBaseSettings_GetSupportingVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_GetSupportingVolume", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_SetSupportingVolume {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_SetSupportingVolume");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetSupportingVolume(JPH_CharacterBaseSettings *settings, const JPH_Plane *value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_SetSupportingVolume$descriptor() {
        return JPH_CharacterBaseSettings_SetSupportingVolume.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetSupportingVolume(JPH_CharacterBaseSettings *settings, const JPH_Plane *value)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_SetSupportingVolume$handle() {
        return JPH_CharacterBaseSettings_SetSupportingVolume.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetSupportingVolume(JPH_CharacterBaseSettings *settings, const JPH_Plane *value)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_SetSupportingVolume$address() {
        return JPH_CharacterBaseSettings_SetSupportingVolume.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetSupportingVolume(JPH_CharacterBaseSettings *settings, const JPH_Plane *value)
     * }
     */
    public static void JPH_CharacterBaseSettings_SetSupportingVolume(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_CharacterBaseSettings_SetSupportingVolume.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_SetSupportingVolume", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_GetMaxSlopeAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_GetMaxSlopeAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterBaseSettings_GetMaxSlopeAngle(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_GetMaxSlopeAngle$descriptor() {
        return JPH_CharacterBaseSettings_GetMaxSlopeAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterBaseSettings_GetMaxSlopeAngle(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_GetMaxSlopeAngle$handle() {
        return JPH_CharacterBaseSettings_GetMaxSlopeAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterBaseSettings_GetMaxSlopeAngle(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_GetMaxSlopeAngle$address() {
        return JPH_CharacterBaseSettings_GetMaxSlopeAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterBaseSettings_GetMaxSlopeAngle(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static float JPH_CharacterBaseSettings_GetMaxSlopeAngle(MemorySegment settings) {
        var mh$ = JPH_CharacterBaseSettings_GetMaxSlopeAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_GetMaxSlopeAngle", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_SetMaxSlopeAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_SetMaxSlopeAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetMaxSlopeAngle(JPH_CharacterBaseSettings *settings, float maxSlopeAngle)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_SetMaxSlopeAngle$descriptor() {
        return JPH_CharacterBaseSettings_SetMaxSlopeAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetMaxSlopeAngle(JPH_CharacterBaseSettings *settings, float maxSlopeAngle)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_SetMaxSlopeAngle$handle() {
        return JPH_CharacterBaseSettings_SetMaxSlopeAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetMaxSlopeAngle(JPH_CharacterBaseSettings *settings, float maxSlopeAngle)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_SetMaxSlopeAngle$address() {
        return JPH_CharacterBaseSettings_SetMaxSlopeAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetMaxSlopeAngle(JPH_CharacterBaseSettings *settings, float maxSlopeAngle)
     * }
     */
    public static void JPH_CharacterBaseSettings_SetMaxSlopeAngle(MemorySegment settings, float maxSlopeAngle) {
        var mh$ = JPH_CharacterBaseSettings_SetMaxSlopeAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_SetMaxSlopeAngle", settings, maxSlopeAngle);
            }
            mh$.invokeExact(settings, maxSlopeAngle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval$descriptor() {
        return JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval$handle() {
        return JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval$address() {
        return JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static int JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval(MemorySegment settings) {
        var mh$ = JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_GetEnhancedInternalEdgeRemoval", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval(JPH_CharacterBaseSettings *settings, JPH_Bool32 value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval$descriptor() {
        return JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval(JPH_CharacterBaseSettings *settings, JPH_Bool32 value)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval$handle() {
        return JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval(JPH_CharacterBaseSettings *settings, JPH_Bool32 value)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval$address() {
        return JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval(JPH_CharacterBaseSettings *settings, JPH_Bool32 value)
     * }
     */
    public static void JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval(MemorySegment settings, int value) {
        var mh$ = JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_SetEnhancedInternalEdgeRemoval", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_GetShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_GetShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_CharacterBaseSettings_GetShape(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_GetShape$descriptor() {
        return JPH_CharacterBaseSettings_GetShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_CharacterBaseSettings_GetShape(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_GetShape$handle() {
        return JPH_CharacterBaseSettings_GetShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_CharacterBaseSettings_GetShape(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_GetShape$address() {
        return JPH_CharacterBaseSettings_GetShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_CharacterBaseSettings_GetShape(JPH_CharacterBaseSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_GetShape(MemorySegment settings) {
        var mh$ = JPH_CharacterBaseSettings_GetShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_GetShape", settings);
            }
            return (MemorySegment)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBaseSettings_SetShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBaseSettings_SetShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetShape(JPH_CharacterBaseSettings *settings, const JPH_Shape *shape)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBaseSettings_SetShape$descriptor() {
        return JPH_CharacterBaseSettings_SetShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetShape(JPH_CharacterBaseSettings *settings, const JPH_Shape *shape)
     * }
     */
    public static MethodHandle JPH_CharacterBaseSettings_SetShape$handle() {
        return JPH_CharacterBaseSettings_SetShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetShape(JPH_CharacterBaseSettings *settings, const JPH_Shape *shape)
     * }
     */
    public static MemorySegment JPH_CharacterBaseSettings_SetShape$address() {
        return JPH_CharacterBaseSettings_SetShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBaseSettings_SetShape(JPH_CharacterBaseSettings *settings, const JPH_Shape *shape)
     * }
     */
    public static void JPH_CharacterBaseSettings_SetShape(MemorySegment settings, MemorySegment shape) {
        var mh$ = JPH_CharacterBaseSettings_SetShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBaseSettings_SetShape", settings, shape);
            }
            mh$.invokeExact(settings, shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_Destroy(JPH_CharacterBase *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_Destroy$descriptor() {
        return JPH_CharacterBase_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_Destroy(JPH_CharacterBase *character)
     * }
     */
    public static MethodHandle JPH_CharacterBase_Destroy$handle() {
        return JPH_CharacterBase_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_Destroy(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_Destroy$address() {
        return JPH_CharacterBase_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_Destroy(JPH_CharacterBase *character)
     * }
     */
    public static void JPH_CharacterBase_Destroy(MemorySegment character) {
        var mh$ = JPH_CharacterBase_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_Destroy", character);
            }
            mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetCosMaxSlopeAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetCosMaxSlopeAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterBase_GetCosMaxSlopeAngle(JPH_CharacterBase *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetCosMaxSlopeAngle$descriptor() {
        return JPH_CharacterBase_GetCosMaxSlopeAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterBase_GetCosMaxSlopeAngle(JPH_CharacterBase *character)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetCosMaxSlopeAngle$handle() {
        return JPH_CharacterBase_GetCosMaxSlopeAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterBase_GetCosMaxSlopeAngle(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetCosMaxSlopeAngle$address() {
        return JPH_CharacterBase_GetCosMaxSlopeAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterBase_GetCosMaxSlopeAngle(JPH_CharacterBase *character)
     * }
     */
    public static float JPH_CharacterBase_GetCosMaxSlopeAngle(MemorySegment character) {
        var mh$ = JPH_CharacterBase_GetCosMaxSlopeAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetCosMaxSlopeAngle", character);
            }
            return (float)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_SetMaxSlopeAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_SetMaxSlopeAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_SetMaxSlopeAngle(JPH_CharacterBase *character, float maxSlopeAngle)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_SetMaxSlopeAngle$descriptor() {
        return JPH_CharacterBase_SetMaxSlopeAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_SetMaxSlopeAngle(JPH_CharacterBase *character, float maxSlopeAngle)
     * }
     */
    public static MethodHandle JPH_CharacterBase_SetMaxSlopeAngle$handle() {
        return JPH_CharacterBase_SetMaxSlopeAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_SetMaxSlopeAngle(JPH_CharacterBase *character, float maxSlopeAngle)
     * }
     */
    public static MemorySegment JPH_CharacterBase_SetMaxSlopeAngle$address() {
        return JPH_CharacterBase_SetMaxSlopeAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_SetMaxSlopeAngle(JPH_CharacterBase *character, float maxSlopeAngle)
     * }
     */
    public static void JPH_CharacterBase_SetMaxSlopeAngle(MemorySegment character, float maxSlopeAngle) {
        var mh$ = JPH_CharacterBase_SetMaxSlopeAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_SetMaxSlopeAngle", character, maxSlopeAngle);
            }
            mh$.invokeExact(character, maxSlopeAngle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetUp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetUp(JPH_CharacterBase *character, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetUp$descriptor() {
        return JPH_CharacterBase_GetUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetUp(JPH_CharacterBase *character, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetUp$handle() {
        return JPH_CharacterBase_GetUp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetUp(JPH_CharacterBase *character, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetUp$address() {
        return JPH_CharacterBase_GetUp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetUp(JPH_CharacterBase *character, JPH_Vec3 *result)
     * }
     */
    public static void JPH_CharacterBase_GetUp(MemorySegment character, MemorySegment result) {
        var mh$ = JPH_CharacterBase_GetUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetUp", character, result);
            }
            mh$.invokeExact(character, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_SetUp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_SetUp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_SetUp(JPH_CharacterBase *character, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_SetUp$descriptor() {
        return JPH_CharacterBase_SetUp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_SetUp(JPH_CharacterBase *character, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_CharacterBase_SetUp$handle() {
        return JPH_CharacterBase_SetUp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_SetUp(JPH_CharacterBase *character, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_CharacterBase_SetUp$address() {
        return JPH_CharacterBase_SetUp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_SetUp(JPH_CharacterBase *character, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_CharacterBase_SetUp(MemorySegment character, MemorySegment value) {
        var mh$ = JPH_CharacterBase_SetUp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_SetUp", character, value);
            }
            mh$.invokeExact(character, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_IsSlopeTooSteep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_IsSlopeTooSteep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBase_IsSlopeTooSteep(JPH_CharacterBase *character, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_IsSlopeTooSteep$descriptor() {
        return JPH_CharacterBase_IsSlopeTooSteep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBase_IsSlopeTooSteep(JPH_CharacterBase *character, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_CharacterBase_IsSlopeTooSteep$handle() {
        return JPH_CharacterBase_IsSlopeTooSteep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBase_IsSlopeTooSteep(JPH_CharacterBase *character, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_CharacterBase_IsSlopeTooSteep$address() {
        return JPH_CharacterBase_IsSlopeTooSteep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBase_IsSlopeTooSteep(JPH_CharacterBase *character, const JPH_Vec3 *value)
     * }
     */
    public static int JPH_CharacterBase_IsSlopeTooSteep(MemorySegment character, MemorySegment value) {
        var mh$ = JPH_CharacterBase_IsSlopeTooSteep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_IsSlopeTooSteep", character, value);
            }
            return (int)mh$.invokeExact(character, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_CharacterBase_GetShape(JPH_CharacterBase *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetShape$descriptor() {
        return JPH_CharacterBase_GetShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_CharacterBase_GetShape(JPH_CharacterBase *character)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetShape$handle() {
        return JPH_CharacterBase_GetShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_CharacterBase_GetShape(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetShape$address() {
        return JPH_CharacterBase_GetShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_Shape *JPH_CharacterBase_GetShape(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetShape(MemorySegment character) {
        var mh$ = JPH_CharacterBase_GetShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetShape", character);
            }
            return (MemorySegment)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetGroundState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetGroundState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_GroundState JPH_CharacterBase_GetGroundState(JPH_CharacterBase *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetGroundState$descriptor() {
        return JPH_CharacterBase_GetGroundState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_GroundState JPH_CharacterBase_GetGroundState(JPH_CharacterBase *character)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetGroundState$handle() {
        return JPH_CharacterBase_GetGroundState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_GroundState JPH_CharacterBase_GetGroundState(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetGroundState$address() {
        return JPH_CharacterBase_GetGroundState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_GroundState JPH_CharacterBase_GetGroundState(JPH_CharacterBase *character)
     * }
     */
    public static int JPH_CharacterBase_GetGroundState(MemorySegment character) {
        var mh$ = JPH_CharacterBase_GetGroundState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetGroundState", character);
            }
            return (int)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_IsSupported {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_IsSupported");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBase_IsSupported(JPH_CharacterBase *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_IsSupported$descriptor() {
        return JPH_CharacterBase_IsSupported.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBase_IsSupported(JPH_CharacterBase *character)
     * }
     */
    public static MethodHandle JPH_CharacterBase_IsSupported$handle() {
        return JPH_CharacterBase_IsSupported.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBase_IsSupported(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_IsSupported$address() {
        return JPH_CharacterBase_IsSupported.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterBase_IsSupported(JPH_CharacterBase *character)
     * }
     */
    public static int JPH_CharacterBase_IsSupported(MemorySegment character) {
        var mh$ = JPH_CharacterBase_IsSupported.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_IsSupported", character);
            }
            return (int)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetGroundPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetGroundPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundPosition(JPH_CharacterBase *character, JPH_RVec3 *position)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetGroundPosition$descriptor() {
        return JPH_CharacterBase_GetGroundPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundPosition(JPH_CharacterBase *character, JPH_RVec3 *position)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetGroundPosition$handle() {
        return JPH_CharacterBase_GetGroundPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundPosition(JPH_CharacterBase *character, JPH_RVec3 *position)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetGroundPosition$address() {
        return JPH_CharacterBase_GetGroundPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundPosition(JPH_CharacterBase *character, JPH_RVec3 *position)
     * }
     */
    public static void JPH_CharacterBase_GetGroundPosition(MemorySegment character, MemorySegment position) {
        var mh$ = JPH_CharacterBase_GetGroundPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetGroundPosition", character, position);
            }
            mh$.invokeExact(character, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetGroundNormal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetGroundNormal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundNormal(JPH_CharacterBase *character, JPH_Vec3 *normal)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetGroundNormal$descriptor() {
        return JPH_CharacterBase_GetGroundNormal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundNormal(JPH_CharacterBase *character, JPH_Vec3 *normal)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetGroundNormal$handle() {
        return JPH_CharacterBase_GetGroundNormal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundNormal(JPH_CharacterBase *character, JPH_Vec3 *normal)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetGroundNormal$address() {
        return JPH_CharacterBase_GetGroundNormal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundNormal(JPH_CharacterBase *character, JPH_Vec3 *normal)
     * }
     */
    public static void JPH_CharacterBase_GetGroundNormal(MemorySegment character, MemorySegment normal) {
        var mh$ = JPH_CharacterBase_GetGroundNormal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetGroundNormal", character, normal);
            }
            mh$.invokeExact(character, normal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetGroundVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetGroundVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundVelocity(JPH_CharacterBase *character, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetGroundVelocity$descriptor() {
        return JPH_CharacterBase_GetGroundVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundVelocity(JPH_CharacterBase *character, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetGroundVelocity$handle() {
        return JPH_CharacterBase_GetGroundVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundVelocity(JPH_CharacterBase *character, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetGroundVelocity$address() {
        return JPH_CharacterBase_GetGroundVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterBase_GetGroundVelocity(JPH_CharacterBase *character, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_CharacterBase_GetGroundVelocity(MemorySegment character, MemorySegment velocity) {
        var mh$ = JPH_CharacterBase_GetGroundVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetGroundVelocity", character, velocity);
            }
            mh$.invokeExact(character, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetGroundMaterial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetGroundMaterial");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPH_PhysicsMaterial *JPH_CharacterBase_GetGroundMaterial(JPH_CharacterBase *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetGroundMaterial$descriptor() {
        return JPH_CharacterBase_GetGroundMaterial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPH_PhysicsMaterial *JPH_CharacterBase_GetGroundMaterial(JPH_CharacterBase *character)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetGroundMaterial$handle() {
        return JPH_CharacterBase_GetGroundMaterial.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPH_PhysicsMaterial *JPH_CharacterBase_GetGroundMaterial(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetGroundMaterial$address() {
        return JPH_CharacterBase_GetGroundMaterial.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPH_PhysicsMaterial *JPH_CharacterBase_GetGroundMaterial(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetGroundMaterial(MemorySegment character) {
        var mh$ = JPH_CharacterBase_GetGroundMaterial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetGroundMaterial", character);
            }
            return (MemorySegment)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetGroundBodyId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetGroundBodyId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_CharacterBase_GetGroundBodyId(JPH_CharacterBase *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetGroundBodyId$descriptor() {
        return JPH_CharacterBase_GetGroundBodyId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_CharacterBase_GetGroundBodyId(JPH_CharacterBase *character)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetGroundBodyId$handle() {
        return JPH_CharacterBase_GetGroundBodyId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_CharacterBase_GetGroundBodyId(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetGroundBodyId$address() {
        return JPH_CharacterBase_GetGroundBodyId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BodyID JPH_CharacterBase_GetGroundBodyId(JPH_CharacterBase *character)
     * }
     */
    public static int JPH_CharacterBase_GetGroundBodyId(MemorySegment character) {
        var mh$ = JPH_CharacterBase_GetGroundBodyId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetGroundBodyId", character);
            }
            return (int)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetGroundSubShapeId {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetGroundSubShapeId");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_CharacterBase_GetGroundSubShapeId(JPH_CharacterBase *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetGroundSubShapeId$descriptor() {
        return JPH_CharacterBase_GetGroundSubShapeId.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_CharacterBase_GetGroundSubShapeId(JPH_CharacterBase *character)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetGroundSubShapeId$handle() {
        return JPH_CharacterBase_GetGroundSubShapeId.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_CharacterBase_GetGroundSubShapeId(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetGroundSubShapeId$address() {
        return JPH_CharacterBase_GetGroundSubShapeId.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_SubShapeID JPH_CharacterBase_GetGroundSubShapeId(JPH_CharacterBase *character)
     * }
     */
    public static int JPH_CharacterBase_GetGroundSubShapeId(MemorySegment character) {
        var mh$ = JPH_CharacterBase_GetGroundSubShapeId.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetGroundSubShapeId", character);
            }
            return (int)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterBase_GetGroundUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_LONG_LONG,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterBase_GetGroundUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPH_CharacterBase_GetGroundUserData(JPH_CharacterBase *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterBase_GetGroundUserData$descriptor() {
        return JPH_CharacterBase_GetGroundUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPH_CharacterBase_GetGroundUserData(JPH_CharacterBase *character)
     * }
     */
    public static MethodHandle JPH_CharacterBase_GetGroundUserData$handle() {
        return JPH_CharacterBase_GetGroundUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPH_CharacterBase_GetGroundUserData(JPH_CharacterBase *character)
     * }
     */
    public static MemorySegment JPH_CharacterBase_GetGroundUserData$address() {
        return JPH_CharacterBase_GetGroundUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPH_CharacterBase_GetGroundUserData(JPH_CharacterBase *character)
     * }
     */
    public static long JPH_CharacterBase_GetGroundUserData(MemorySegment character) {
        var mh$ = JPH_CharacterBase_GetGroundUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterBase_GetGroundUserData", character);
            }
            return (long)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER    );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_CharacterVirtualSettings *JPH_CharacterVirtualSettings_Create()
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_Create$descriptor() {
        return JPH_CharacterVirtualSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_CharacterVirtualSettings *JPH_CharacterVirtualSettings_Create()
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_Create$handle() {
        return JPH_CharacterVirtualSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_CharacterVirtualSettings *JPH_CharacterVirtualSettings_Create()
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_Create$address() {
        return JPH_CharacterVirtualSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_CharacterVirtualSettings *JPH_CharacterVirtualSettings_Create()
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_Create() {
        var mh$ = JPH_CharacterVirtualSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_Create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetMass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetMass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMass(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetMass$descriptor() {
        return JPH_CharacterVirtualSettings_GetMass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMass(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetMass$handle() {
        return JPH_CharacterVirtualSettings_GetMass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMass(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetMass$address() {
        return JPH_CharacterVirtualSettings_GetMass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMass(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static float JPH_CharacterVirtualSettings_GetMass(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetMass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetMass", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetMass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetMass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMass(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetMass$descriptor() {
        return JPH_CharacterVirtualSettings_SetMass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMass(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetMass$handle() {
        return JPH_CharacterVirtualSettings_SetMass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMass(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetMass$address() {
        return JPH_CharacterVirtualSettings_SetMass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMass(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetMass(MemorySegment settings, float value) {
        var mh$ = JPH_CharacterVirtualSettings_SetMass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetMass", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetMaxStrength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetMaxStrength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMaxStrength(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetMaxStrength$descriptor() {
        return JPH_CharacterVirtualSettings_GetMaxStrength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMaxStrength(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetMaxStrength$handle() {
        return JPH_CharacterVirtualSettings_GetMaxStrength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMaxStrength(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetMaxStrength$address() {
        return JPH_CharacterVirtualSettings_GetMaxStrength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMaxStrength(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static float JPH_CharacterVirtualSettings_GetMaxStrength(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetMaxStrength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetMaxStrength", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetMaxStrength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetMaxStrength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxStrength(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetMaxStrength$descriptor() {
        return JPH_CharacterVirtualSettings_SetMaxStrength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxStrength(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetMaxStrength$handle() {
        return JPH_CharacterVirtualSettings_SetMaxStrength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxStrength(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetMaxStrength$address() {
        return JPH_CharacterVirtualSettings_SetMaxStrength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxStrength(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetMaxStrength(MemorySegment settings, float value) {
        var mh$ = JPH_CharacterVirtualSettings_SetMaxStrength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetMaxStrength", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetShapeOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetShapeOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_GetShapeOffset(JPH_CharacterVirtualSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetShapeOffset$descriptor() {
        return JPH_CharacterVirtualSettings_GetShapeOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_GetShapeOffset(JPH_CharacterVirtualSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetShapeOffset$handle() {
        return JPH_CharacterVirtualSettings_GetShapeOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_GetShapeOffset(JPH_CharacterVirtualSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetShapeOffset$address() {
        return JPH_CharacterVirtualSettings_GetShapeOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_GetShapeOffset(JPH_CharacterVirtualSettings *settings, JPH_Vec3 *result)
     * }
     */
    public static void JPH_CharacterVirtualSettings_GetShapeOffset(MemorySegment settings, MemorySegment result) {
        var mh$ = JPH_CharacterVirtualSettings_GetShapeOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetShapeOffset", settings, result);
            }
            mh$.invokeExact(settings, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetShapeOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetShapeOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetShapeOffset(JPH_CharacterVirtualSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetShapeOffset$descriptor() {
        return JPH_CharacterVirtualSettings_SetShapeOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetShapeOffset(JPH_CharacterVirtualSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetShapeOffset$handle() {
        return JPH_CharacterVirtualSettings_SetShapeOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetShapeOffset(JPH_CharacterVirtualSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetShapeOffset$address() {
        return JPH_CharacterVirtualSettings_SetShapeOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetShapeOffset(JPH_CharacterVirtualSettings *settings, const JPH_Vec3 *value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetShapeOffset(MemorySegment settings, MemorySegment value) {
        var mh$ = JPH_CharacterVirtualSettings_SetShapeOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetShapeOffset", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetBackFaceMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetBackFaceMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_BackFaceMode JPH_CharacterVirtualSettings_GetBackFaceMode(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetBackFaceMode$descriptor() {
        return JPH_CharacterVirtualSettings_GetBackFaceMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_BackFaceMode JPH_CharacterVirtualSettings_GetBackFaceMode(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetBackFaceMode$handle() {
        return JPH_CharacterVirtualSettings_GetBackFaceMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_BackFaceMode JPH_CharacterVirtualSettings_GetBackFaceMode(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetBackFaceMode$address() {
        return JPH_CharacterVirtualSettings_GetBackFaceMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_BackFaceMode JPH_CharacterVirtualSettings_GetBackFaceMode(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static int JPH_CharacterVirtualSettings_GetBackFaceMode(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetBackFaceMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetBackFaceMode", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetBackFaceMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetBackFaceMode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetBackFaceMode(JPH_CharacterVirtualSettings *settings, JPH_BackFaceMode value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetBackFaceMode$descriptor() {
        return JPH_CharacterVirtualSettings_SetBackFaceMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetBackFaceMode(JPH_CharacterVirtualSettings *settings, JPH_BackFaceMode value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetBackFaceMode$handle() {
        return JPH_CharacterVirtualSettings_SetBackFaceMode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetBackFaceMode(JPH_CharacterVirtualSettings *settings, JPH_BackFaceMode value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetBackFaceMode$address() {
        return JPH_CharacterVirtualSettings_SetBackFaceMode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetBackFaceMode(JPH_CharacterVirtualSettings *settings, JPH_BackFaceMode value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetBackFaceMode(MemorySegment settings, int value) {
        var mh$ = JPH_CharacterVirtualSettings_SetBackFaceMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetBackFaceMode", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetPredictiveContactDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetPredictiveContactDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetPredictiveContactDistance(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetPredictiveContactDistance$descriptor() {
        return JPH_CharacterVirtualSettings_GetPredictiveContactDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetPredictiveContactDistance(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetPredictiveContactDistance$handle() {
        return JPH_CharacterVirtualSettings_GetPredictiveContactDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetPredictiveContactDistance(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetPredictiveContactDistance$address() {
        return JPH_CharacterVirtualSettings_GetPredictiveContactDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetPredictiveContactDistance(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static float JPH_CharacterVirtualSettings_GetPredictiveContactDistance(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetPredictiveContactDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetPredictiveContactDistance", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetPredictiveContactDistance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetPredictiveContactDistance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetPredictiveContactDistance(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetPredictiveContactDistance$descriptor() {
        return JPH_CharacterVirtualSettings_SetPredictiveContactDistance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetPredictiveContactDistance(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetPredictiveContactDistance$handle() {
        return JPH_CharacterVirtualSettings_SetPredictiveContactDistance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetPredictiveContactDistance(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetPredictiveContactDistance$address() {
        return JPH_CharacterVirtualSettings_SetPredictiveContactDistance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetPredictiveContactDistance(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetPredictiveContactDistance(MemorySegment settings, float value) {
        var mh$ = JPH_CharacterVirtualSettings_SetPredictiveContactDistance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetPredictiveContactDistance", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetMaxCollisionIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetMaxCollisionIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxCollisionIterations(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetMaxCollisionIterations$descriptor() {
        return JPH_CharacterVirtualSettings_GetMaxCollisionIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxCollisionIterations(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetMaxCollisionIterations$handle() {
        return JPH_CharacterVirtualSettings_GetMaxCollisionIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxCollisionIterations(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetMaxCollisionIterations$address() {
        return JPH_CharacterVirtualSettings_GetMaxCollisionIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxCollisionIterations(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static int JPH_CharacterVirtualSettings_GetMaxCollisionIterations(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetMaxCollisionIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetMaxCollisionIterations", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetMaxCollisionIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetMaxCollisionIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxCollisionIterations(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetMaxCollisionIterations$descriptor() {
        return JPH_CharacterVirtualSettings_SetMaxCollisionIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxCollisionIterations(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetMaxCollisionIterations$handle() {
        return JPH_CharacterVirtualSettings_SetMaxCollisionIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxCollisionIterations(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetMaxCollisionIterations$address() {
        return JPH_CharacterVirtualSettings_SetMaxCollisionIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxCollisionIterations(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetMaxCollisionIterations(MemorySegment settings, int value) {
        var mh$ = JPH_CharacterVirtualSettings_SetMaxCollisionIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetMaxCollisionIterations", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetMaxConstraintIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetMaxConstraintIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxConstraintIterations(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetMaxConstraintIterations$descriptor() {
        return JPH_CharacterVirtualSettings_GetMaxConstraintIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxConstraintIterations(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetMaxConstraintIterations$handle() {
        return JPH_CharacterVirtualSettings_GetMaxConstraintIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxConstraintIterations(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetMaxConstraintIterations$address() {
        return JPH_CharacterVirtualSettings_GetMaxConstraintIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxConstraintIterations(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static int JPH_CharacterVirtualSettings_GetMaxConstraintIterations(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetMaxConstraintIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetMaxConstraintIterations", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetMaxConstraintIterations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetMaxConstraintIterations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxConstraintIterations(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetMaxConstraintIterations$descriptor() {
        return JPH_CharacterVirtualSettings_SetMaxConstraintIterations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxConstraintIterations(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetMaxConstraintIterations$handle() {
        return JPH_CharacterVirtualSettings_SetMaxConstraintIterations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxConstraintIterations(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetMaxConstraintIterations$address() {
        return JPH_CharacterVirtualSettings_SetMaxConstraintIterations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxConstraintIterations(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetMaxConstraintIterations(MemorySegment settings, int value) {
        var mh$ = JPH_CharacterVirtualSettings_SetMaxConstraintIterations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetMaxConstraintIterations", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetMinTimeRemaining {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetMinTimeRemaining");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMinTimeRemaining(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetMinTimeRemaining$descriptor() {
        return JPH_CharacterVirtualSettings_GetMinTimeRemaining.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMinTimeRemaining(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetMinTimeRemaining$handle() {
        return JPH_CharacterVirtualSettings_GetMinTimeRemaining.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMinTimeRemaining(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetMinTimeRemaining$address() {
        return JPH_CharacterVirtualSettings_GetMinTimeRemaining.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetMinTimeRemaining(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static float JPH_CharacterVirtualSettings_GetMinTimeRemaining(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetMinTimeRemaining.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetMinTimeRemaining", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetMinTimeRemaining {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetMinTimeRemaining");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMinTimeRemaining(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetMinTimeRemaining$descriptor() {
        return JPH_CharacterVirtualSettings_SetMinTimeRemaining.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMinTimeRemaining(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetMinTimeRemaining$handle() {
        return JPH_CharacterVirtualSettings_SetMinTimeRemaining.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMinTimeRemaining(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetMinTimeRemaining$address() {
        return JPH_CharacterVirtualSettings_SetMinTimeRemaining.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMinTimeRemaining(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetMinTimeRemaining(MemorySegment settings, float value) {
        var mh$ = JPH_CharacterVirtualSettings_SetMinTimeRemaining.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetMinTimeRemaining", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetCollisionTolerance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetCollisionTolerance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetCollisionTolerance(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetCollisionTolerance$descriptor() {
        return JPH_CharacterVirtualSettings_GetCollisionTolerance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetCollisionTolerance(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetCollisionTolerance$handle() {
        return JPH_CharacterVirtualSettings_GetCollisionTolerance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetCollisionTolerance(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetCollisionTolerance$address() {
        return JPH_CharacterVirtualSettings_GetCollisionTolerance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetCollisionTolerance(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static float JPH_CharacterVirtualSettings_GetCollisionTolerance(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetCollisionTolerance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetCollisionTolerance", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetCollisionTolerance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetCollisionTolerance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetCollisionTolerance(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetCollisionTolerance$descriptor() {
        return JPH_CharacterVirtualSettings_SetCollisionTolerance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetCollisionTolerance(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetCollisionTolerance$handle() {
        return JPH_CharacterVirtualSettings_SetCollisionTolerance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetCollisionTolerance(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetCollisionTolerance$address() {
        return JPH_CharacterVirtualSettings_SetCollisionTolerance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetCollisionTolerance(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetCollisionTolerance(MemorySegment settings, float value) {
        var mh$ = JPH_CharacterVirtualSettings_SetCollisionTolerance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetCollisionTolerance", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetCharacterPadding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetCharacterPadding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetCharacterPadding(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetCharacterPadding$descriptor() {
        return JPH_CharacterVirtualSettings_GetCharacterPadding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetCharacterPadding(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetCharacterPadding$handle() {
        return JPH_CharacterVirtualSettings_GetCharacterPadding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetCharacterPadding(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetCharacterPadding$address() {
        return JPH_CharacterVirtualSettings_GetCharacterPadding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetCharacterPadding(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static float JPH_CharacterVirtualSettings_GetCharacterPadding(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetCharacterPadding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetCharacterPadding", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetCharacterPadding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetCharacterPadding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetCharacterPadding(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetCharacterPadding$descriptor() {
        return JPH_CharacterVirtualSettings_SetCharacterPadding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetCharacterPadding(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetCharacterPadding$handle() {
        return JPH_CharacterVirtualSettings_SetCharacterPadding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetCharacterPadding(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetCharacterPadding$address() {
        return JPH_CharacterVirtualSettings_SetCharacterPadding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetCharacterPadding(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetCharacterPadding(MemorySegment settings, float value) {
        var mh$ = JPH_CharacterVirtualSettings_SetCharacterPadding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetCharacterPadding", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetMaxNumHits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetMaxNumHits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxNumHits(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetMaxNumHits$descriptor() {
        return JPH_CharacterVirtualSettings_GetMaxNumHits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxNumHits(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetMaxNumHits$handle() {
        return JPH_CharacterVirtualSettings_GetMaxNumHits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxNumHits(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetMaxNumHits$address() {
        return JPH_CharacterVirtualSettings_GetMaxNumHits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtualSettings_GetMaxNumHits(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static int JPH_CharacterVirtualSettings_GetMaxNumHits(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetMaxNumHits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetMaxNumHits", settings);
            }
            return (int)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetMaxNumHits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetMaxNumHits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxNumHits(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetMaxNumHits$descriptor() {
        return JPH_CharacterVirtualSettings_SetMaxNumHits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxNumHits(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetMaxNumHits$handle() {
        return JPH_CharacterVirtualSettings_SetMaxNumHits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxNumHits(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetMaxNumHits$address() {
        return JPH_CharacterVirtualSettings_SetMaxNumHits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetMaxNumHits(JPH_CharacterVirtualSettings *settings, uint32_t value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetMaxNumHits(MemorySegment settings, int value) {
        var mh$ = JPH_CharacterVirtualSettings_SetMaxNumHits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetMaxNumHits", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle$descriptor() {
        return JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle$handle() {
        return JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle$address() {
        return JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static float JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetHitReductionCosMaxAngle", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle$descriptor() {
        return JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle$handle() {
        return JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle$address() {
        return JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle(MemorySegment settings, float value) {
        var mh$ = JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetHitReductionCosMaxAngle", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed$descriptor() {
        return JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed$handle() {
        return JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed$address() {
        return JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed(JPH_CharacterVirtualSettings *settings)
     * }
     */
    public static float JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed(MemorySegment settings) {
        var mh$ = JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_GetPenetrationRecoverySpeed", settings);
            }
            return (float)mh$.invokeExact(settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed$descriptor() {
        return JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed$handle() {
        return JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed$address() {
        return JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed(JPH_CharacterVirtualSettings *settings, float value)
     * }
     */
    public static void JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed(MemorySegment settings, float value) {
        var mh$ = JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtualSettings_SetPenetrationRecoverySpeed", settings, value);
            }
            mh$.invokeExact(settings, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_LONG_LONG,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_CharacterVirtual *JPH_CharacterVirtual_Create(const JPH_CharacterVirtualSettings *settings, const JPH_RVec3 *position, const JPH_Quat *rotation, uint64_t userData, JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_Create$descriptor() {
        return JPH_CharacterVirtual_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_CharacterVirtual *JPH_CharacterVirtual_Create(const JPH_CharacterVirtualSettings *settings, const JPH_RVec3 *position, const JPH_Quat *rotation, uint64_t userData, JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_Create$handle() {
        return JPH_CharacterVirtual_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_CharacterVirtual *JPH_CharacterVirtual_Create(const JPH_CharacterVirtualSettings *settings, const JPH_RVec3 *position, const JPH_Quat *rotation, uint64_t userData, JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_Create$address() {
        return JPH_CharacterVirtual_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_CharacterVirtual *JPH_CharacterVirtual_Create(const JPH_CharacterVirtualSettings *settings, const JPH_RVec3 *position, const JPH_Quat *rotation, uint64_t userData, JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_Create(MemorySegment settings, MemorySegment position, MemorySegment rotation, long userData, MemorySegment system) {
        var mh$ = JPH_CharacterVirtual_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_Create", settings, position, rotation, userData, system);
            }
            return (MemorySegment)mh$.invokeExact(settings, position, rotation, userData, system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetListener {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetListener");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetListener(JPH_CharacterVirtual *character, JPH_CharacterContactListener *listener)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetListener$descriptor() {
        return JPH_CharacterVirtual_SetListener.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetListener(JPH_CharacterVirtual *character, JPH_CharacterContactListener *listener)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetListener$handle() {
        return JPH_CharacterVirtual_SetListener.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetListener(JPH_CharacterVirtual *character, JPH_CharacterContactListener *listener)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetListener$address() {
        return JPH_CharacterVirtual_SetListener.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetListener(JPH_CharacterVirtual *character, JPH_CharacterContactListener *listener)
     * }
     */
    public static void JPH_CharacterVirtual_SetListener(MemorySegment character, MemorySegment listener) {
        var mh$ = JPH_CharacterVirtual_SetListener.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetListener", character, listener);
            }
            mh$.invokeExact(character, listener);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetLinearVelocity(JPH_CharacterVirtual *character, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetLinearVelocity$descriptor() {
        return JPH_CharacterVirtual_GetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetLinearVelocity(JPH_CharacterVirtual *character, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetLinearVelocity$handle() {
        return JPH_CharacterVirtual_GetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetLinearVelocity(JPH_CharacterVirtual *character, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetLinearVelocity$address() {
        return JPH_CharacterVirtual_GetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetLinearVelocity(JPH_CharacterVirtual *character, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_CharacterVirtual_GetLinearVelocity(MemorySegment character, MemorySegment velocity) {
        var mh$ = JPH_CharacterVirtual_GetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetLinearVelocity", character, velocity);
            }
            mh$.invokeExact(character, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetLinearVelocity(JPH_CharacterVirtual *character, const JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetLinearVelocity$descriptor() {
        return JPH_CharacterVirtual_SetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetLinearVelocity(JPH_CharacterVirtual *character, const JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetLinearVelocity$handle() {
        return JPH_CharacterVirtual_SetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetLinearVelocity(JPH_CharacterVirtual *character, const JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetLinearVelocity$address() {
        return JPH_CharacterVirtual_SetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetLinearVelocity(JPH_CharacterVirtual *character, const JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_CharacterVirtual_SetLinearVelocity(MemorySegment character, MemorySegment velocity) {
        var mh$ = JPH_CharacterVirtual_SetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetLinearVelocity", character, velocity);
            }
            mh$.invokeExact(character, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetPosition(JPH_CharacterVirtual *character, JPH_RVec3 *position)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetPosition$descriptor() {
        return JPH_CharacterVirtual_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetPosition(JPH_CharacterVirtual *character, JPH_RVec3 *position)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetPosition$handle() {
        return JPH_CharacterVirtual_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetPosition(JPH_CharacterVirtual *character, JPH_RVec3 *position)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetPosition$address() {
        return JPH_CharacterVirtual_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetPosition(JPH_CharacterVirtual *character, JPH_RVec3 *position)
     * }
     */
    public static void JPH_CharacterVirtual_GetPosition(MemorySegment character, MemorySegment position) {
        var mh$ = JPH_CharacterVirtual_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetPosition", character, position);
            }
            mh$.invokeExact(character, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetPosition(JPH_CharacterVirtual *character, const JPH_RVec3 *position)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetPosition$descriptor() {
        return JPH_CharacterVirtual_SetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetPosition(JPH_CharacterVirtual *character, const JPH_RVec3 *position)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetPosition$handle() {
        return JPH_CharacterVirtual_SetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetPosition(JPH_CharacterVirtual *character, const JPH_RVec3 *position)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetPosition$address() {
        return JPH_CharacterVirtual_SetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetPosition(JPH_CharacterVirtual *character, const JPH_RVec3 *position)
     * }
     */
    public static void JPH_CharacterVirtual_SetPosition(MemorySegment character, MemorySegment position) {
        var mh$ = JPH_CharacterVirtual_SetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetPosition", character, position);
            }
            mh$.invokeExact(character, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetRotation(JPH_CharacterVirtual *character, JPH_Quat *rotation)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetRotation$descriptor() {
        return JPH_CharacterVirtual_GetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetRotation(JPH_CharacterVirtual *character, JPH_Quat *rotation)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetRotation$handle() {
        return JPH_CharacterVirtual_GetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetRotation(JPH_CharacterVirtual *character, JPH_Quat *rotation)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetRotation$address() {
        return JPH_CharacterVirtual_GetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetRotation(JPH_CharacterVirtual *character, JPH_Quat *rotation)
     * }
     */
    public static void JPH_CharacterVirtual_GetRotation(MemorySegment character, MemorySegment rotation) {
        var mh$ = JPH_CharacterVirtual_GetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetRotation", character, rotation);
            }
            mh$.invokeExact(character, rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetRotation(JPH_CharacterVirtual *character, const JPH_Quat *rotation)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetRotation$descriptor() {
        return JPH_CharacterVirtual_SetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetRotation(JPH_CharacterVirtual *character, const JPH_Quat *rotation)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetRotation$handle() {
        return JPH_CharacterVirtual_SetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetRotation(JPH_CharacterVirtual *character, const JPH_Quat *rotation)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetRotation$address() {
        return JPH_CharacterVirtual_SetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetRotation(JPH_CharacterVirtual *character, const JPH_Quat *rotation)
     * }
     */
    public static void JPH_CharacterVirtual_SetRotation(MemorySegment character, MemorySegment rotation) {
        var mh$ = JPH_CharacterVirtual_SetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetRotation", character, rotation);
            }
            mh$.invokeExact(character, rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetWorldTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetWorldTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetWorldTransform(JPH_CharacterVirtual *character, JPH_RMatrix4x4 *result)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetWorldTransform$descriptor() {
        return JPH_CharacterVirtual_GetWorldTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetWorldTransform(JPH_CharacterVirtual *character, JPH_RMatrix4x4 *result)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetWorldTransform$handle() {
        return JPH_CharacterVirtual_GetWorldTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetWorldTransform(JPH_CharacterVirtual *character, JPH_RMatrix4x4 *result)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetWorldTransform$address() {
        return JPH_CharacterVirtual_GetWorldTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetWorldTransform(JPH_CharacterVirtual *character, JPH_RMatrix4x4 *result)
     * }
     */
    public static void JPH_CharacterVirtual_GetWorldTransform(MemorySegment character, MemorySegment result) {
        var mh$ = JPH_CharacterVirtual_GetWorldTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetWorldTransform", character, result);
            }
            mh$.invokeExact(character, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetCenterOfMassTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetCenterOfMassTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetCenterOfMassTransform(JPH_CharacterVirtual *character, JPH_RMatrix4x4 *result)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetCenterOfMassTransform$descriptor() {
        return JPH_CharacterVirtual_GetCenterOfMassTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetCenterOfMassTransform(JPH_CharacterVirtual *character, JPH_RMatrix4x4 *result)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetCenterOfMassTransform$handle() {
        return JPH_CharacterVirtual_GetCenterOfMassTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetCenterOfMassTransform(JPH_CharacterVirtual *character, JPH_RMatrix4x4 *result)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetCenterOfMassTransform$address() {
        return JPH_CharacterVirtual_GetCenterOfMassTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_GetCenterOfMassTransform(JPH_CharacterVirtual *character, JPH_RMatrix4x4 *result)
     * }
     */
    public static void JPH_CharacterVirtual_GetCenterOfMassTransform(MemorySegment character, MemorySegment result) {
        var mh$ = JPH_CharacterVirtual_GetCenterOfMassTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetCenterOfMassTransform", character, result);
            }
            mh$.invokeExact(character, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetMass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetMass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetMass(JPH_CharacterVirtual *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetMass$descriptor() {
        return JPH_CharacterVirtual_GetMass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetMass(JPH_CharacterVirtual *character)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetMass$handle() {
        return JPH_CharacterVirtual_GetMass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetMass(JPH_CharacterVirtual *character)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetMass$address() {
        return JPH_CharacterVirtual_GetMass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetMass(JPH_CharacterVirtual *character)
     * }
     */
    public static float JPH_CharacterVirtual_GetMass(MemorySegment character) {
        var mh$ = JPH_CharacterVirtual_GetMass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetMass", character);
            }
            return (float)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetMass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetMass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMass(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetMass$descriptor() {
        return JPH_CharacterVirtual_SetMass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMass(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetMass$handle() {
        return JPH_CharacterVirtual_SetMass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMass(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetMass$address() {
        return JPH_CharacterVirtual_SetMass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMass(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static void JPH_CharacterVirtual_SetMass(MemorySegment character, float value) {
        var mh$ = JPH_CharacterVirtual_SetMass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetMass", character, value);
            }
            mh$.invokeExact(character, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetMaxStrength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetMaxStrength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetMaxStrength(JPH_CharacterVirtual *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetMaxStrength$descriptor() {
        return JPH_CharacterVirtual_GetMaxStrength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetMaxStrength(JPH_CharacterVirtual *character)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetMaxStrength$handle() {
        return JPH_CharacterVirtual_GetMaxStrength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetMaxStrength(JPH_CharacterVirtual *character)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetMaxStrength$address() {
        return JPH_CharacterVirtual_GetMaxStrength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetMaxStrength(JPH_CharacterVirtual *character)
     * }
     */
    public static float JPH_CharacterVirtual_GetMaxStrength(MemorySegment character) {
        var mh$ = JPH_CharacterVirtual_GetMaxStrength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetMaxStrength", character);
            }
            return (float)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetMaxStrength {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetMaxStrength");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMaxStrength(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetMaxStrength$descriptor() {
        return JPH_CharacterVirtual_SetMaxStrength.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMaxStrength(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetMaxStrength$handle() {
        return JPH_CharacterVirtual_SetMaxStrength.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMaxStrength(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetMaxStrength$address() {
        return JPH_CharacterVirtual_SetMaxStrength.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMaxStrength(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static void JPH_CharacterVirtual_SetMaxStrength(MemorySegment character, float value) {
        var mh$ = JPH_CharacterVirtual_SetMaxStrength.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetMaxStrength", character, value);
            }
            mh$.invokeExact(character, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetPenetrationRecoverySpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetPenetrationRecoverySpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetPenetrationRecoverySpeed(JPH_CharacterVirtual *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetPenetrationRecoverySpeed$descriptor() {
        return JPH_CharacterVirtual_GetPenetrationRecoverySpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetPenetrationRecoverySpeed(JPH_CharacterVirtual *character)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetPenetrationRecoverySpeed$handle() {
        return JPH_CharacterVirtual_GetPenetrationRecoverySpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetPenetrationRecoverySpeed(JPH_CharacterVirtual *character)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetPenetrationRecoverySpeed$address() {
        return JPH_CharacterVirtual_GetPenetrationRecoverySpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetPenetrationRecoverySpeed(JPH_CharacterVirtual *character)
     * }
     */
    public static float JPH_CharacterVirtual_GetPenetrationRecoverySpeed(MemorySegment character) {
        var mh$ = JPH_CharacterVirtual_GetPenetrationRecoverySpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetPenetrationRecoverySpeed", character);
            }
            return (float)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetPenetrationRecoverySpeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetPenetrationRecoverySpeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetPenetrationRecoverySpeed(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetPenetrationRecoverySpeed$descriptor() {
        return JPH_CharacterVirtual_SetPenetrationRecoverySpeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetPenetrationRecoverySpeed(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetPenetrationRecoverySpeed$handle() {
        return JPH_CharacterVirtual_SetPenetrationRecoverySpeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetPenetrationRecoverySpeed(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetPenetrationRecoverySpeed$address() {
        return JPH_CharacterVirtual_SetPenetrationRecoverySpeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetPenetrationRecoverySpeed(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static void JPH_CharacterVirtual_SetPenetrationRecoverySpeed(MemorySegment character, float value) {
        var mh$ = JPH_CharacterVirtual_SetPenetrationRecoverySpeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetPenetrationRecoverySpeed", character, value);
            }
            mh$.invokeExact(character, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval(JPH_CharacterVirtual *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval$descriptor() {
        return JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval(JPH_CharacterVirtual *character)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval$handle() {
        return JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval(JPH_CharacterVirtual *character)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval$address() {
        return JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval(JPH_CharacterVirtual *character)
     * }
     */
    public static int JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval(MemorySegment character) {
        var mh$ = JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetEnhancedInternalEdgeRemoval", character);
            }
            return (int)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval(JPH_CharacterVirtual *character, JPH_Bool32 value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval$descriptor() {
        return JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval(JPH_CharacterVirtual *character, JPH_Bool32 value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval$handle() {
        return JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval(JPH_CharacterVirtual *character, JPH_Bool32 value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval$address() {
        return JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval(JPH_CharacterVirtual *character, JPH_Bool32 value)
     * }
     */
    public static void JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval(MemorySegment character, int value) {
        var mh$ = JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetEnhancedInternalEdgeRemoval", character, value);
            }
            mh$.invokeExact(character, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetCharacterPadding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetCharacterPadding");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetCharacterPadding(JPH_CharacterVirtual *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetCharacterPadding$descriptor() {
        return JPH_CharacterVirtual_GetCharacterPadding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetCharacterPadding(JPH_CharacterVirtual *character)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetCharacterPadding$handle() {
        return JPH_CharacterVirtual_GetCharacterPadding.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetCharacterPadding(JPH_CharacterVirtual *character)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetCharacterPadding$address() {
        return JPH_CharacterVirtual_GetCharacterPadding.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetCharacterPadding(JPH_CharacterVirtual *character)
     * }
     */
    public static float JPH_CharacterVirtual_GetCharacterPadding(MemorySegment character) {
        var mh$ = JPH_CharacterVirtual_GetCharacterPadding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetCharacterPadding", character);
            }
            return (float)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetMaxNumHits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetMaxNumHits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtual_GetMaxNumHits(JPH_CharacterVirtual *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetMaxNumHits$descriptor() {
        return JPH_CharacterVirtual_GetMaxNumHits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtual_GetMaxNumHits(JPH_CharacterVirtual *character)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetMaxNumHits$handle() {
        return JPH_CharacterVirtual_GetMaxNumHits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtual_GetMaxNumHits(JPH_CharacterVirtual *character)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetMaxNumHits$address() {
        return JPH_CharacterVirtual_GetMaxNumHits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPH_CharacterVirtual_GetMaxNumHits(JPH_CharacterVirtual *character)
     * }
     */
    public static int JPH_CharacterVirtual_GetMaxNumHits(MemorySegment character) {
        var mh$ = JPH_CharacterVirtual_GetMaxNumHits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetMaxNumHits", character);
            }
            return (int)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetMaxNumHits {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_INT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetMaxNumHits");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMaxNumHits(JPH_CharacterVirtual *character, uint32_t value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetMaxNumHits$descriptor() {
        return JPH_CharacterVirtual_SetMaxNumHits.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMaxNumHits(JPH_CharacterVirtual *character, uint32_t value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetMaxNumHits$handle() {
        return JPH_CharacterVirtual_SetMaxNumHits.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMaxNumHits(JPH_CharacterVirtual *character, uint32_t value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetMaxNumHits$address() {
        return JPH_CharacterVirtual_SetMaxNumHits.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetMaxNumHits(JPH_CharacterVirtual *character, uint32_t value)
     * }
     */
    public static void JPH_CharacterVirtual_SetMaxNumHits(MemorySegment character, int value) {
        var mh$ = JPH_CharacterVirtual_SetMaxNumHits.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetMaxNumHits", character, value);
            }
            mh$.invokeExact(character, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetHitReductionCosMaxAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetHitReductionCosMaxAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetHitReductionCosMaxAngle(JPH_CharacterVirtual *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetHitReductionCosMaxAngle$descriptor() {
        return JPH_CharacterVirtual_GetHitReductionCosMaxAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetHitReductionCosMaxAngle(JPH_CharacterVirtual *character)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetHitReductionCosMaxAngle$handle() {
        return JPH_CharacterVirtual_GetHitReductionCosMaxAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetHitReductionCosMaxAngle(JPH_CharacterVirtual *character)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetHitReductionCosMaxAngle$address() {
        return JPH_CharacterVirtual_GetHitReductionCosMaxAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPH_CharacterVirtual_GetHitReductionCosMaxAngle(JPH_CharacterVirtual *character)
     * }
     */
    public static float JPH_CharacterVirtual_GetHitReductionCosMaxAngle(MemorySegment character) {
        var mh$ = JPH_CharacterVirtual_GetHitReductionCosMaxAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetHitReductionCosMaxAngle", character);
            }
            return (float)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetHitReductionCosMaxAngle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetHitReductionCosMaxAngle");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetHitReductionCosMaxAngle(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetHitReductionCosMaxAngle$descriptor() {
        return JPH_CharacterVirtual_SetHitReductionCosMaxAngle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetHitReductionCosMaxAngle(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetHitReductionCosMaxAngle$handle() {
        return JPH_CharacterVirtual_SetHitReductionCosMaxAngle.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetHitReductionCosMaxAngle(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetHitReductionCosMaxAngle$address() {
        return JPH_CharacterVirtual_SetHitReductionCosMaxAngle.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetHitReductionCosMaxAngle(JPH_CharacterVirtual *character, float value)
     * }
     */
    public static void JPH_CharacterVirtual_SetHitReductionCosMaxAngle(MemorySegment character, float value) {
        var mh$ = JPH_CharacterVirtual_SetHitReductionCosMaxAngle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetHitReductionCosMaxAngle", character, value);
            }
            mh$.invokeExact(character, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetMaxHitsExceeded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetMaxHitsExceeded");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterVirtual_GetMaxHitsExceeded(JPH_CharacterVirtual *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetMaxHitsExceeded$descriptor() {
        return JPH_CharacterVirtual_GetMaxHitsExceeded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterVirtual_GetMaxHitsExceeded(JPH_CharacterVirtual *character)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetMaxHitsExceeded$handle() {
        return JPH_CharacterVirtual_GetMaxHitsExceeded.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterVirtual_GetMaxHitsExceeded(JPH_CharacterVirtual *character)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetMaxHitsExceeded$address() {
        return JPH_CharacterVirtual_GetMaxHitsExceeded.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_Bool32 JPH_CharacterVirtual_GetMaxHitsExceeded(JPH_CharacterVirtual *character)
     * }
     */
    public static int JPH_CharacterVirtual_GetMaxHitsExceeded(MemorySegment character) {
        var mh$ = JPH_CharacterVirtual_GetMaxHitsExceeded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetMaxHitsExceeded", character);
            }
            return (int)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_LONG_LONG,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPH_CharacterVirtual_GetUserData(JPH_CharacterVirtual *character)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_GetUserData$descriptor() {
        return JPH_CharacterVirtual_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPH_CharacterVirtual_GetUserData(JPH_CharacterVirtual *character)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_GetUserData$handle() {
        return JPH_CharacterVirtual_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPH_CharacterVirtual_GetUserData(JPH_CharacterVirtual *character)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_GetUserData$address() {
        return JPH_CharacterVirtual_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPH_CharacterVirtual_GetUserData(JPH_CharacterVirtual *character)
     * }
     */
    public static long JPH_CharacterVirtual_GetUserData(MemorySegment character) {
        var mh$ = JPH_CharacterVirtual_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_GetUserData", character);
            }
            return (long)mh$.invokeExact(character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetUserData(JPH_CharacterVirtual *character, uint64_t value)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_SetUserData$descriptor() {
        return JPH_CharacterVirtual_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetUserData(JPH_CharacterVirtual *character, uint64_t value)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_SetUserData$handle() {
        return JPH_CharacterVirtual_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetUserData(JPH_CharacterVirtual *character, uint64_t value)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_SetUserData$address() {
        return JPH_CharacterVirtual_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_SetUserData(JPH_CharacterVirtual *character, uint64_t value)
     * }
     */
    public static void JPH_CharacterVirtual_SetUserData(MemorySegment character, long value) {
        var mh$ = JPH_CharacterVirtual_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_SetUserData", character, value);
            }
            mh$.invokeExact(character, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes(JPH_CharacterVirtual *character, const JPH_Vec3 *desiredVelocity, JPH_Vec3 *velocity)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes$descriptor() {
        return JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes(JPH_CharacterVirtual *character, const JPH_Vec3 *desiredVelocity, JPH_Vec3 *velocity)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes$handle() {
        return JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes(JPH_CharacterVirtual *character, const JPH_Vec3 *desiredVelocity, JPH_Vec3 *velocity)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes$address() {
        return JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes(JPH_CharacterVirtual *character, const JPH_Vec3 *desiredVelocity, JPH_Vec3 *velocity)
     * }
     */
    public static void JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes(MemorySegment character, MemorySegment desiredVelocity, MemorySegment velocity) {
        var mh$ = JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_CancelVelocityTowardsSteepSlopes", character, desiredVelocity, velocity);
            }
            mh$.invokeExact(character, desiredVelocity, velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_Update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_SHORT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_Update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_Update(JPH_CharacterVirtual *character, float deltaTime, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_Update$descriptor() {
        return JPH_CharacterVirtual_Update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_Update(JPH_CharacterVirtual *character, float deltaTime, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_Update$handle() {
        return JPH_CharacterVirtual_Update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_Update(JPH_CharacterVirtual *character, float deltaTime, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_Update$address() {
        return JPH_CharacterVirtual_Update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_Update(JPH_CharacterVirtual *character, float deltaTime, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static void JPH_CharacterVirtual_Update(MemorySegment character, float deltaTime, short layer, MemorySegment system) {
        var mh$ = JPH_CharacterVirtual_Update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_Update", character, deltaTime, layer, system);
            }
            mh$.invokeExact(character, deltaTime, layer, system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_ExtendedUpdate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_FLOAT,
            jolt_cs.C_POINTER,
            jolt_cs.C_SHORT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_ExtendedUpdate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_ExtendedUpdate(JPH_CharacterVirtual *character, float deltaTime, const JPH_ExtendedUpdateSettings *settings, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_ExtendedUpdate$descriptor() {
        return JPH_CharacterVirtual_ExtendedUpdate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_ExtendedUpdate(JPH_CharacterVirtual *character, float deltaTime, const JPH_ExtendedUpdateSettings *settings, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_ExtendedUpdate$handle() {
        return JPH_CharacterVirtual_ExtendedUpdate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_ExtendedUpdate(JPH_CharacterVirtual *character, float deltaTime, const JPH_ExtendedUpdateSettings *settings, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_ExtendedUpdate$address() {
        return JPH_CharacterVirtual_ExtendedUpdate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_ExtendedUpdate(JPH_CharacterVirtual *character, float deltaTime, const JPH_ExtendedUpdateSettings *settings, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static void JPH_CharacterVirtual_ExtendedUpdate(MemorySegment character, float deltaTime, MemorySegment settings, short layer, MemorySegment system) {
        var mh$ = JPH_CharacterVirtual_ExtendedUpdate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_ExtendedUpdate", character, deltaTime, settings, layer, system);
            }
            mh$.invokeExact(character, deltaTime, settings, layer, system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterVirtual_RefreshContacts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_SHORT,
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterVirtual_RefreshContacts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_RefreshContacts(JPH_CharacterVirtual *character, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static FunctionDescriptor JPH_CharacterVirtual_RefreshContacts$descriptor() {
        return JPH_CharacterVirtual_RefreshContacts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_RefreshContacts(JPH_CharacterVirtual *character, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static MethodHandle JPH_CharacterVirtual_RefreshContacts$handle() {
        return JPH_CharacterVirtual_RefreshContacts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_RefreshContacts(JPH_CharacterVirtual *character, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static MemorySegment JPH_CharacterVirtual_RefreshContacts$address() {
        return JPH_CharacterVirtual_RefreshContacts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterVirtual_RefreshContacts(JPH_CharacterVirtual *character, JPH_ObjectLayer layer, JPH_PhysicsSystem *system)
     * }
     */
    public static void JPH_CharacterVirtual_RefreshContacts(MemorySegment character, short layer, MemorySegment system) {
        var mh$ = JPH_CharacterVirtual_RefreshContacts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterVirtual_RefreshContacts", character, layer, system);
            }
            mh$.invokeExact(character, layer, system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterContactListener_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt_cs.C_POINTER,
            JPH_CharacterContactListener_Procs.layout(),
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterContactListener_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPH_CharacterContactListener *JPH_CharacterContactListener_Create(JPH_CharacterContactListener_Procs procs, void *userData)
     * }
     */
    public static FunctionDescriptor JPH_CharacterContactListener_Create$descriptor() {
        return JPH_CharacterContactListener_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPH_CharacterContactListener *JPH_CharacterContactListener_Create(JPH_CharacterContactListener_Procs procs, void *userData)
     * }
     */
    public static MethodHandle JPH_CharacterContactListener_Create$handle() {
        return JPH_CharacterContactListener_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPH_CharacterContactListener *JPH_CharacterContactListener_Create(JPH_CharacterContactListener_Procs procs, void *userData)
     * }
     */
    public static MemorySegment JPH_CharacterContactListener_Create$address() {
        return JPH_CharacterContactListener_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPH_CharacterContactListener *JPH_CharacterContactListener_Create(JPH_CharacterContactListener_Procs procs, void *userData)
     * }
     */
    public static MemorySegment JPH_CharacterContactListener_Create(MemorySegment procs, MemorySegment userData) {
        var mh$ = JPH_CharacterContactListener_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterContactListener_Create", procs, userData);
            }
            return (MemorySegment)mh$.invokeExact(procs, userData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPH_CharacterContactListener_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER
        );

        public static final MemorySegment ADDR = jolt_cs.findOrThrow("JPH_CharacterContactListener_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPH_CharacterContactListener_Destroy(JPH_CharacterContactListener *listener)
     * }
     */
    public static FunctionDescriptor JPH_CharacterContactListener_Destroy$descriptor() {
        return JPH_CharacterContactListener_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPH_CharacterContactListener_Destroy(JPH_CharacterContactListener *listener)
     * }
     */
    public static MethodHandle JPH_CharacterContactListener_Destroy$handle() {
        return JPH_CharacterContactListener_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPH_CharacterContactListener_Destroy(JPH_CharacterContactListener *listener)
     * }
     */
    public static MemorySegment JPH_CharacterContactListener_Destroy$address() {
        return JPH_CharacterContactListener_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPH_CharacterContactListener_Destroy(JPH_CharacterContactListener *listener)
     * }
     */
    public static void JPH_CharacterContactListener_Destroy(MemorySegment listener) {
        var mh$ = JPH_CharacterContactListener_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPH_CharacterContactListener_Destroy", listener);
            }
            mh$.invokeExact(listener);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = jolt_cs.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final long USER_ADDR_NULL = 0L;
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return USER_ADDR_NULL;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
}

