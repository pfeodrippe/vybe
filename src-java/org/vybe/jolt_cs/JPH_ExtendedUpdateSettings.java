// Generated by jextract

package org.vybe.jolt_cs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPH_ExtendedUpdateSettings {
 *     JPH_Vec3 stickToFloorStepDown;
 *     JPH_Vec3 walkStairsStepUp;
 *     float walkStairsMinStepForward;
 *     float walkStairsStepForwardTest;
 *     float walkStairsCosAngleForwardContact;
 *     JPH_Vec3 walkStairsStepDownExtra;
 * }
 * }
 */
public class JPH_ExtendedUpdateSettings {

    JPH_ExtendedUpdateSettings() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        JPH_Vec3.layout().withName("stickToFloorStepDown"),
        JPH_Vec3.layout().withName("walkStairsStepUp"),
        jolt_cs.C_FLOAT.withName("walkStairsMinStepForward"),
        jolt_cs.C_FLOAT.withName("walkStairsStepForwardTest"),
        jolt_cs.C_FLOAT.withName("walkStairsCosAngleForwardContact"),
        JPH_Vec3.layout().withName("walkStairsStepDownExtra")
    ).withName("JPH_ExtendedUpdateSettings");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout stickToFloorStepDown$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("stickToFloorStepDown"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Vec3 stickToFloorStepDown
     * }
     */
    public static final GroupLayout stickToFloorStepDown$layout() {
        return stickToFloorStepDown$LAYOUT;
    }

    private static final long stickToFloorStepDown$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Vec3 stickToFloorStepDown
     * }
     */
    public static final long stickToFloorStepDown$offset() {
        return stickToFloorStepDown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Vec3 stickToFloorStepDown
     * }
     */
    public static MemorySegment stickToFloorStepDown(MemorySegment struct) {
        return struct.asSlice(stickToFloorStepDown$OFFSET, stickToFloorStepDown$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Vec3 stickToFloorStepDown
     * }
     */
    public static void stickToFloorStepDown(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stickToFloorStepDown$OFFSET, stickToFloorStepDown$LAYOUT.byteSize());
    }

    private static final GroupLayout walkStairsStepUp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("walkStairsStepUp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Vec3 walkStairsStepUp
     * }
     */
    public static final GroupLayout walkStairsStepUp$layout() {
        return walkStairsStepUp$LAYOUT;
    }

    private static final long walkStairsStepUp$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Vec3 walkStairsStepUp
     * }
     */
    public static final long walkStairsStepUp$offset() {
        return walkStairsStepUp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Vec3 walkStairsStepUp
     * }
     */
    public static MemorySegment walkStairsStepUp(MemorySegment struct) {
        return struct.asSlice(walkStairsStepUp$OFFSET, walkStairsStepUp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Vec3 walkStairsStepUp
     * }
     */
    public static void walkStairsStepUp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, walkStairsStepUp$OFFSET, walkStairsStepUp$LAYOUT.byteSize());
    }

    private static final OfFloat walkStairsMinStepForward$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("walkStairsMinStepForward"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float walkStairsMinStepForward
     * }
     */
    public static final OfFloat walkStairsMinStepForward$layout() {
        return walkStairsMinStepForward$LAYOUT;
    }

    private static final long walkStairsMinStepForward$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float walkStairsMinStepForward
     * }
     */
    public static final long walkStairsMinStepForward$offset() {
        return walkStairsMinStepForward$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float walkStairsMinStepForward
     * }
     */
    public static float walkStairsMinStepForward(MemorySegment struct) {
        return struct.get(walkStairsMinStepForward$LAYOUT, walkStairsMinStepForward$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float walkStairsMinStepForward
     * }
     */
    public static void walkStairsMinStepForward(MemorySegment struct, float fieldValue) {
        struct.set(walkStairsMinStepForward$LAYOUT, walkStairsMinStepForward$OFFSET, fieldValue);
    }

    private static final OfFloat walkStairsStepForwardTest$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("walkStairsStepForwardTest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float walkStairsStepForwardTest
     * }
     */
    public static final OfFloat walkStairsStepForwardTest$layout() {
        return walkStairsStepForwardTest$LAYOUT;
    }

    private static final long walkStairsStepForwardTest$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float walkStairsStepForwardTest
     * }
     */
    public static final long walkStairsStepForwardTest$offset() {
        return walkStairsStepForwardTest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float walkStairsStepForwardTest
     * }
     */
    public static float walkStairsStepForwardTest(MemorySegment struct) {
        return struct.get(walkStairsStepForwardTest$LAYOUT, walkStairsStepForwardTest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float walkStairsStepForwardTest
     * }
     */
    public static void walkStairsStepForwardTest(MemorySegment struct, float fieldValue) {
        struct.set(walkStairsStepForwardTest$LAYOUT, walkStairsStepForwardTest$OFFSET, fieldValue);
    }

    private static final OfFloat walkStairsCosAngleForwardContact$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("walkStairsCosAngleForwardContact"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float walkStairsCosAngleForwardContact
     * }
     */
    public static final OfFloat walkStairsCosAngleForwardContact$layout() {
        return walkStairsCosAngleForwardContact$LAYOUT;
    }

    private static final long walkStairsCosAngleForwardContact$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float walkStairsCosAngleForwardContact
     * }
     */
    public static final long walkStairsCosAngleForwardContact$offset() {
        return walkStairsCosAngleForwardContact$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float walkStairsCosAngleForwardContact
     * }
     */
    public static float walkStairsCosAngleForwardContact(MemorySegment struct) {
        return struct.get(walkStairsCosAngleForwardContact$LAYOUT, walkStairsCosAngleForwardContact$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float walkStairsCosAngleForwardContact
     * }
     */
    public static void walkStairsCosAngleForwardContact(MemorySegment struct, float fieldValue) {
        struct.set(walkStairsCosAngleForwardContact$LAYOUT, walkStairsCosAngleForwardContact$OFFSET, fieldValue);
    }

    private static final GroupLayout walkStairsStepDownExtra$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("walkStairsStepDownExtra"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Vec3 walkStairsStepDownExtra
     * }
     */
    public static final GroupLayout walkStairsStepDownExtra$layout() {
        return walkStairsStepDownExtra$LAYOUT;
    }

    private static final long walkStairsStepDownExtra$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Vec3 walkStairsStepDownExtra
     * }
     */
    public static final long walkStairsStepDownExtra$offset() {
        return walkStairsStepDownExtra$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Vec3 walkStairsStepDownExtra
     * }
     */
    public static MemorySegment walkStairsStepDownExtra(MemorySegment struct) {
        return struct.asSlice(walkStairsStepDownExtra$OFFSET, walkStairsStepDownExtra$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Vec3 walkStairsStepDownExtra
     * }
     */
    public static void walkStairsStepDownExtra(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, walkStairsStepDownExtra$OFFSET, walkStairsStepDownExtra$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

