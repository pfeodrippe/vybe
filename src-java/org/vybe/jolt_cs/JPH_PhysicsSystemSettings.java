// Generated by jextract

package org.vybe.jolt_cs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPH_PhysicsSystemSettings {
 *     uint32_t maxBodies;
 *     uint32_t maxBodyPairs;
 *     uint32_t maxContactConstraints;
 *     uint32_t _padding;
 *     JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface;
 *     JPH_ObjectLayerPairFilter *objectLayerPairFilter;
 *     JPH_ObjectVsBroadPhaseLayerFilter *objectVsBroadPhaseLayerFilter;
 * }
 * }
 */
public class JPH_PhysicsSystemSettings {

    JPH_PhysicsSystemSettings() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        jolt_cs.C_INT.withName("maxBodies"),
        jolt_cs.C_INT.withName("maxBodyPairs"),
        jolt_cs.C_INT.withName("maxContactConstraints"),
        jolt_cs.C_INT.withName("_padding"),
        jolt_cs.C_POINTER.withName("broadPhaseLayerInterface"),
        jolt_cs.C_POINTER.withName("objectLayerPairFilter"),
        jolt_cs.C_POINTER.withName("objectVsBroadPhaseLayerFilter")
    ).withName("JPH_PhysicsSystemSettings");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt maxBodies$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxBodies"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxBodies
     * }
     */
    public static final OfInt maxBodies$layout() {
        return maxBodies$LAYOUT;
    }

    private static final long maxBodies$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxBodies
     * }
     */
    public static final long maxBodies$offset() {
        return maxBodies$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxBodies
     * }
     */
    public static int maxBodies(MemorySegment struct) {
        return struct.get(maxBodies$LAYOUT, maxBodies$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxBodies
     * }
     */
    public static void maxBodies(MemorySegment struct, int fieldValue) {
        struct.set(maxBodies$LAYOUT, maxBodies$OFFSET, fieldValue);
    }

    private static final OfInt maxBodyPairs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxBodyPairs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxBodyPairs
     * }
     */
    public static final OfInt maxBodyPairs$layout() {
        return maxBodyPairs$LAYOUT;
    }

    private static final long maxBodyPairs$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxBodyPairs
     * }
     */
    public static final long maxBodyPairs$offset() {
        return maxBodyPairs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxBodyPairs
     * }
     */
    public static int maxBodyPairs(MemorySegment struct) {
        return struct.get(maxBodyPairs$LAYOUT, maxBodyPairs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxBodyPairs
     * }
     */
    public static void maxBodyPairs(MemorySegment struct, int fieldValue) {
        struct.set(maxBodyPairs$LAYOUT, maxBodyPairs$OFFSET, fieldValue);
    }

    private static final OfInt maxContactConstraints$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxContactConstraints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxContactConstraints
     * }
     */
    public static final OfInt maxContactConstraints$layout() {
        return maxContactConstraints$LAYOUT;
    }

    private static final long maxContactConstraints$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxContactConstraints
     * }
     */
    public static final long maxContactConstraints$offset() {
        return maxContactConstraints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxContactConstraints
     * }
     */
    public static int maxContactConstraints(MemorySegment struct) {
        return struct.get(maxContactConstraints$LAYOUT, maxContactConstraints$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxContactConstraints
     * }
     */
    public static void maxContactConstraints(MemorySegment struct, int fieldValue) {
        struct.set(maxContactConstraints$LAYOUT, maxContactConstraints$OFFSET, fieldValue);
    }

    private static final OfInt _padding$LAYOUT = (OfInt)$LAYOUT.select(groupElement("_padding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t _padding
     * }
     */
    public static final OfInt _padding$layout() {
        return _padding$LAYOUT;
    }

    private static final long _padding$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t _padding
     * }
     */
    public static final long _padding$offset() {
        return _padding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t _padding
     * }
     */
    public static int _padding(MemorySegment struct) {
        return struct.get(_padding$LAYOUT, _padding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t _padding
     * }
     */
    public static void _padding(MemorySegment struct, int fieldValue) {
        struct.set(_padding$LAYOUT, _padding$OFFSET, fieldValue);
    }

    private static final AddressLayout broadPhaseLayerInterface$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("broadPhaseLayerInterface"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface
     * }
     */
    public static final AddressLayout broadPhaseLayerInterface$layout() {
        return broadPhaseLayerInterface$LAYOUT;
    }

    private static final long broadPhaseLayerInterface$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface
     * }
     */
    public static final long broadPhaseLayerInterface$offset() {
        return broadPhaseLayerInterface$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface
     * }
     */
    public static MemorySegment broadPhaseLayerInterface(MemorySegment struct) {
        return struct.get(broadPhaseLayerInterface$LAYOUT, broadPhaseLayerInterface$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_BroadPhaseLayerInterface *broadPhaseLayerInterface
     * }
     */
    public static void broadPhaseLayerInterface(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(broadPhaseLayerInterface$LAYOUT, broadPhaseLayerInterface$OFFSET, fieldValue);
    }

    private static final AddressLayout objectLayerPairFilter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("objectLayerPairFilter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_ObjectLayerPairFilter *objectLayerPairFilter
     * }
     */
    public static final AddressLayout objectLayerPairFilter$layout() {
        return objectLayerPairFilter$LAYOUT;
    }

    private static final long objectLayerPairFilter$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_ObjectLayerPairFilter *objectLayerPairFilter
     * }
     */
    public static final long objectLayerPairFilter$offset() {
        return objectLayerPairFilter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_ObjectLayerPairFilter *objectLayerPairFilter
     * }
     */
    public static MemorySegment objectLayerPairFilter(MemorySegment struct) {
        return struct.get(objectLayerPairFilter$LAYOUT, objectLayerPairFilter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_ObjectLayerPairFilter *objectLayerPairFilter
     * }
     */
    public static void objectLayerPairFilter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(objectLayerPairFilter$LAYOUT, objectLayerPairFilter$OFFSET, fieldValue);
    }

    private static final AddressLayout objectVsBroadPhaseLayerFilter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("objectVsBroadPhaseLayerFilter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_ObjectVsBroadPhaseLayerFilter *objectVsBroadPhaseLayerFilter
     * }
     */
    public static final AddressLayout objectVsBroadPhaseLayerFilter$layout() {
        return objectVsBroadPhaseLayerFilter$LAYOUT;
    }

    private static final long objectVsBroadPhaseLayerFilter$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_ObjectVsBroadPhaseLayerFilter *objectVsBroadPhaseLayerFilter
     * }
     */
    public static final long objectVsBroadPhaseLayerFilter$offset() {
        return objectVsBroadPhaseLayerFilter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_ObjectVsBroadPhaseLayerFilter *objectVsBroadPhaseLayerFilter
     * }
     */
    public static MemorySegment objectVsBroadPhaseLayerFilter(MemorySegment struct) {
        return struct.get(objectVsBroadPhaseLayerFilter$LAYOUT, objectVsBroadPhaseLayerFilter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_ObjectVsBroadPhaseLayerFilter *objectVsBroadPhaseLayerFilter
     * }
     */
    public static void objectVsBroadPhaseLayerFilter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(objectVsBroadPhaseLayerFilter$LAYOUT, objectVsBroadPhaseLayerFilter$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

