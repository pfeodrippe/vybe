// Generated by jextract

package org.vybe.jolt_cs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPH_ShapeCastResult {
 *     JPH_Vec3 contactPointOn1;
 *     JPH_Vec3 contactPointOn2;
 *     JPH_Vec3 penetrationAxis;
 *     float penetrationDepth;
 *     JPH_SubShapeID subShapeID1;
 *     JPH_SubShapeID subShapeID2;
 *     JPH_BodyID bodyID2;
 *     float fraction;
 *     JPH_Bool32 isBackFaceHit;
 * }
 * }
 */
public class JPH_ShapeCastResult {

    JPH_ShapeCastResult() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        JPH_Vec3.layout().withName("contactPointOn1"),
        JPH_Vec3.layout().withName("contactPointOn2"),
        JPH_Vec3.layout().withName("penetrationAxis"),
        jolt_cs.C_FLOAT.withName("penetrationDepth"),
        jolt_cs.C_INT.withName("subShapeID1"),
        jolt_cs.C_INT.withName("subShapeID2"),
        jolt_cs.C_INT.withName("bodyID2"),
        jolt_cs.C_FLOAT.withName("fraction"),
        jolt_cs.C_INT.withName("isBackFaceHit")
    ).withName("JPH_ShapeCastResult");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout contactPointOn1$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("contactPointOn1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Vec3 contactPointOn1
     * }
     */
    public static final GroupLayout contactPointOn1$layout() {
        return contactPointOn1$LAYOUT;
    }

    private static final long contactPointOn1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Vec3 contactPointOn1
     * }
     */
    public static final long contactPointOn1$offset() {
        return contactPointOn1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Vec3 contactPointOn1
     * }
     */
    public static MemorySegment contactPointOn1(MemorySegment struct) {
        return struct.asSlice(contactPointOn1$OFFSET, contactPointOn1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Vec3 contactPointOn1
     * }
     */
    public static void contactPointOn1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, contactPointOn1$OFFSET, contactPointOn1$LAYOUT.byteSize());
    }

    private static final GroupLayout contactPointOn2$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("contactPointOn2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Vec3 contactPointOn2
     * }
     */
    public static final GroupLayout contactPointOn2$layout() {
        return contactPointOn2$LAYOUT;
    }

    private static final long contactPointOn2$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Vec3 contactPointOn2
     * }
     */
    public static final long contactPointOn2$offset() {
        return contactPointOn2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Vec3 contactPointOn2
     * }
     */
    public static MemorySegment contactPointOn2(MemorySegment struct) {
        return struct.asSlice(contactPointOn2$OFFSET, contactPointOn2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Vec3 contactPointOn2
     * }
     */
    public static void contactPointOn2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, contactPointOn2$OFFSET, contactPointOn2$LAYOUT.byteSize());
    }

    private static final GroupLayout penetrationAxis$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("penetrationAxis"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Vec3 penetrationAxis
     * }
     */
    public static final GroupLayout penetrationAxis$layout() {
        return penetrationAxis$LAYOUT;
    }

    private static final long penetrationAxis$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Vec3 penetrationAxis
     * }
     */
    public static final long penetrationAxis$offset() {
        return penetrationAxis$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Vec3 penetrationAxis
     * }
     */
    public static MemorySegment penetrationAxis(MemorySegment struct) {
        return struct.asSlice(penetrationAxis$OFFSET, penetrationAxis$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Vec3 penetrationAxis
     * }
     */
    public static void penetrationAxis(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, penetrationAxis$OFFSET, penetrationAxis$LAYOUT.byteSize());
    }

    private static final OfFloat penetrationDepth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("penetrationDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float penetrationDepth
     * }
     */
    public static final OfFloat penetrationDepth$layout() {
        return penetrationDepth$LAYOUT;
    }

    private static final long penetrationDepth$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float penetrationDepth
     * }
     */
    public static final long penetrationDepth$offset() {
        return penetrationDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float penetrationDepth
     * }
     */
    public static float penetrationDepth(MemorySegment struct) {
        return struct.get(penetrationDepth$LAYOUT, penetrationDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float penetrationDepth
     * }
     */
    public static void penetrationDepth(MemorySegment struct, float fieldValue) {
        struct.set(penetrationDepth$LAYOUT, penetrationDepth$OFFSET, fieldValue);
    }

    private static final OfInt subShapeID1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subShapeID1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID1
     * }
     */
    public static final OfInt subShapeID1$layout() {
        return subShapeID1$LAYOUT;
    }

    private static final long subShapeID1$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID1
     * }
     */
    public static final long subShapeID1$offset() {
        return subShapeID1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID1
     * }
     */
    public static int subShapeID1(MemorySegment struct) {
        return struct.get(subShapeID1$LAYOUT, subShapeID1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID1
     * }
     */
    public static void subShapeID1(MemorySegment struct, int fieldValue) {
        struct.set(subShapeID1$LAYOUT, subShapeID1$OFFSET, fieldValue);
    }

    private static final OfInt subShapeID2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subShapeID2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID2
     * }
     */
    public static final OfInt subShapeID2$layout() {
        return subShapeID2$LAYOUT;
    }

    private static final long subShapeID2$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID2
     * }
     */
    public static final long subShapeID2$offset() {
        return subShapeID2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID2
     * }
     */
    public static int subShapeID2(MemorySegment struct) {
        return struct.get(subShapeID2$LAYOUT, subShapeID2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_SubShapeID subShapeID2
     * }
     */
    public static void subShapeID2(MemorySegment struct, int fieldValue) {
        struct.set(subShapeID2$LAYOUT, subShapeID2$OFFSET, fieldValue);
    }

    private static final OfInt bodyID2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bodyID2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_BodyID bodyID2
     * }
     */
    public static final OfInt bodyID2$layout() {
        return bodyID2$LAYOUT;
    }

    private static final long bodyID2$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_BodyID bodyID2
     * }
     */
    public static final long bodyID2$offset() {
        return bodyID2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_BodyID bodyID2
     * }
     */
    public static int bodyID2(MemorySegment struct) {
        return struct.get(bodyID2$LAYOUT, bodyID2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_BodyID bodyID2
     * }
     */
    public static void bodyID2(MemorySegment struct, int fieldValue) {
        struct.set(bodyID2$LAYOUT, bodyID2$OFFSET, fieldValue);
    }

    private static final OfFloat fraction$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("fraction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float fraction
     * }
     */
    public static final OfFloat fraction$layout() {
        return fraction$LAYOUT;
    }

    private static final long fraction$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float fraction
     * }
     */
    public static final long fraction$offset() {
        return fraction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float fraction
     * }
     */
    public static float fraction(MemorySegment struct) {
        return struct.get(fraction$LAYOUT, fraction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float fraction
     * }
     */
    public static void fraction(MemorySegment struct, float fieldValue) {
        struct.set(fraction$LAYOUT, fraction$OFFSET, fieldValue);
    }

    private static final OfInt isBackFaceHit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("isBackFaceHit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Bool32 isBackFaceHit
     * }
     */
    public static final OfInt isBackFaceHit$layout() {
        return isBackFaceHit$LAYOUT;
    }

    private static final long isBackFaceHit$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Bool32 isBackFaceHit
     * }
     */
    public static final long isBackFaceHit$offset() {
        return isBackFaceHit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Bool32 isBackFaceHit
     * }
     */
    public static int isBackFaceHit(MemorySegment struct) {
        return struct.get(isBackFaceHit$LAYOUT, isBackFaceHit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Bool32 isBackFaceHit
     * }
     */
    public static void isBackFaceHit(MemorySegment struct, int fieldValue) {
        struct.set(isBackFaceHit$LAYOUT, isBackFaceHit$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

