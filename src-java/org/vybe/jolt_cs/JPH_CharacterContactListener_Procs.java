// Generated by jextract

package org.vybe.jolt_cs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPH_CharacterContactListener_Procs {
 *     void (*OnAdjustBodyVelocity)(void *, const JPH_CharacterVirtual *, const JPH_Body *, const JPH_Vec3 *, const JPH_Vec3 *);
 *     JPH_Bool32 (*OnContactValidate)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID);
 *     void (*OnContactAdded)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, JPH_CharacterContactSettings *);
 *     void (*OnContactSolve)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, const JPH_Vec3 *, const JPH_PhysicsMaterial *, const JPH_Vec3 *, JPH_Vec3 *);
 * }
 * }
 */
public class JPH_CharacterContactListener_Procs {

    JPH_CharacterContactListener_Procs() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        jolt_cs.C_POINTER.withName("OnAdjustBodyVelocity"),
        jolt_cs.C_POINTER.withName("OnContactValidate"),
        jolt_cs.C_POINTER.withName("OnContactAdded"),
        jolt_cs.C_POINTER.withName("OnContactSolve")
    ).withName("JPH_CharacterContactListener_Procs");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * void (*OnAdjustBodyVelocity)(void *, const JPH_CharacterVirtual *, const JPH_Body *, const JPH_Vec3 *, const JPH_Vec3 *)
     * }
     */
    public static class OnAdjustBodyVelocity {

        OnAdjustBodyVelocity() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = jolt_cs.upcallHandle(OnAdjustBodyVelocity.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnAdjustBodyVelocity.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnAdjustBodyVelocity$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnAdjustBodyVelocity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*OnAdjustBodyVelocity)(void *, const JPH_CharacterVirtual *, const JPH_Body *, const JPH_Vec3 *, const JPH_Vec3 *)
     * }
     */
    public static final AddressLayout OnAdjustBodyVelocity$layout() {
        return OnAdjustBodyVelocity$LAYOUT;
    }

    private static final long OnAdjustBodyVelocity$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*OnAdjustBodyVelocity)(void *, const JPH_CharacterVirtual *, const JPH_Body *, const JPH_Vec3 *, const JPH_Vec3 *)
     * }
     */
    public static final long OnAdjustBodyVelocity$offset() {
        return OnAdjustBodyVelocity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*OnAdjustBodyVelocity)(void *, const JPH_CharacterVirtual *, const JPH_Body *, const JPH_Vec3 *, const JPH_Vec3 *)
     * }
     */
    public static MemorySegment OnAdjustBodyVelocity(MemorySegment struct) {
        return struct.get(OnAdjustBodyVelocity$LAYOUT, OnAdjustBodyVelocity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*OnAdjustBodyVelocity)(void *, const JPH_CharacterVirtual *, const JPH_Body *, const JPH_Vec3 *, const JPH_Vec3 *)
     * }
     */
    public static void OnAdjustBodyVelocity(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnAdjustBodyVelocity$LAYOUT, OnAdjustBodyVelocity$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * JPH_Bool32 (*OnContactValidate)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID)
     * }
     */
    public static class OnContactValidate {

        OnContactValidate() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = jolt_cs.upcallHandle(OnContactValidate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnContactValidate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnContactValidate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnContactValidate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Bool32 (*OnContactValidate)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID)
     * }
     */
    public static final AddressLayout OnContactValidate$layout() {
        return OnContactValidate$LAYOUT;
    }

    private static final long OnContactValidate$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Bool32 (*OnContactValidate)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID)
     * }
     */
    public static final long OnContactValidate$offset() {
        return OnContactValidate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Bool32 (*OnContactValidate)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID)
     * }
     */
    public static MemorySegment OnContactValidate(MemorySegment struct) {
        return struct.get(OnContactValidate$LAYOUT, OnContactValidate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Bool32 (*OnContactValidate)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID)
     * }
     */
    public static void OnContactValidate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnContactValidate$LAYOUT, OnContactValidate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*OnContactAdded)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, JPH_CharacterContactSettings *)
     * }
     */
    public static class OnContactAdded {

        OnContactAdded() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = jolt_cs.upcallHandle(OnContactAdded.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnContactAdded.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnContactAdded$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnContactAdded"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*OnContactAdded)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, JPH_CharacterContactSettings *)
     * }
     */
    public static final AddressLayout OnContactAdded$layout() {
        return OnContactAdded$LAYOUT;
    }

    private static final long OnContactAdded$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*OnContactAdded)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, JPH_CharacterContactSettings *)
     * }
     */
    public static final long OnContactAdded$offset() {
        return OnContactAdded$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*OnContactAdded)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, JPH_CharacterContactSettings *)
     * }
     */
    public static MemorySegment OnContactAdded(MemorySegment struct) {
        return struct.get(OnContactAdded$LAYOUT, OnContactAdded$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*OnContactAdded)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, JPH_CharacterContactSettings *)
     * }
     */
    public static void OnContactAdded(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnContactAdded$LAYOUT, OnContactAdded$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*OnContactSolve)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, const JPH_Vec3 *, const JPH_PhysicsMaterial *, const JPH_Vec3 *, JPH_Vec3 *)
     * }
     */
    public static class OnContactSolve {

        OnContactSolve() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, MemorySegment _x8, MemorySegment _x9);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_INT,
            jolt_cs.C_INT,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER,
            jolt_cs.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = jolt_cs.upcallHandle(OnContactSolve.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(OnContactSolve.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, int _x2, int _x3, MemorySegment _x4, MemorySegment _x5, MemorySegment _x6, MemorySegment _x7, MemorySegment _x8, MemorySegment _x9) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout OnContactSolve$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("OnContactSolve"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*OnContactSolve)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, const JPH_Vec3 *, const JPH_PhysicsMaterial *, const JPH_Vec3 *, JPH_Vec3 *)
     * }
     */
    public static final AddressLayout OnContactSolve$layout() {
        return OnContactSolve$LAYOUT;
    }

    private static final long OnContactSolve$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*OnContactSolve)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, const JPH_Vec3 *, const JPH_PhysicsMaterial *, const JPH_Vec3 *, JPH_Vec3 *)
     * }
     */
    public static final long OnContactSolve$offset() {
        return OnContactSolve$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*OnContactSolve)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, const JPH_Vec3 *, const JPH_PhysicsMaterial *, const JPH_Vec3 *, JPH_Vec3 *)
     * }
     */
    public static MemorySegment OnContactSolve(MemorySegment struct) {
        return struct.get(OnContactSolve$LAYOUT, OnContactSolve$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*OnContactSolve)(void *, const JPH_CharacterVirtual *, const JPH_BodyID, const JPH_SubShapeID, const JPH_RVec3 *, const JPH_Vec3 *, const JPH_Vec3 *, const JPH_PhysicsMaterial *, const JPH_Vec3 *, JPH_Vec3 *)
     * }
     */
    public static void OnContactSolve(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(OnContactSolve$LAYOUT, OnContactSolve$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

