// Generated by jextract

package org.vybe.jolt_cs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPH_MotorSettings {
 *     JPH_SpringSettings springSettings;
 *     float minForceLimit;
 *     float maxForceLimit;
 *     float minTorqueLimit;
 *     float maxTorqueLimit;
 * }
 * }
 */
public class JPH_MotorSettings {

    JPH_MotorSettings() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        JPH_SpringSettings.layout().withName("springSettings"),
        jolt_cs.C_FLOAT.withName("minForceLimit"),
        jolt_cs.C_FLOAT.withName("maxForceLimit"),
        jolt_cs.C_FLOAT.withName("minTorqueLimit"),
        jolt_cs.C_FLOAT.withName("maxTorqueLimit")
    ).withName("JPH_MotorSettings");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout springSettings$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("springSettings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_SpringSettings springSettings
     * }
     */
    public static final GroupLayout springSettings$layout() {
        return springSettings$LAYOUT;
    }

    private static final long springSettings$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_SpringSettings springSettings
     * }
     */
    public static final long springSettings$offset() {
        return springSettings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_SpringSettings springSettings
     * }
     */
    public static MemorySegment springSettings(MemorySegment struct) {
        return struct.asSlice(springSettings$OFFSET, springSettings$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_SpringSettings springSettings
     * }
     */
    public static void springSettings(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, springSettings$OFFSET, springSettings$LAYOUT.byteSize());
    }

    private static final OfFloat minForceLimit$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("minForceLimit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float minForceLimit
     * }
     */
    public static final OfFloat minForceLimit$layout() {
        return minForceLimit$LAYOUT;
    }

    private static final long minForceLimit$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float minForceLimit
     * }
     */
    public static final long minForceLimit$offset() {
        return minForceLimit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float minForceLimit
     * }
     */
    public static float minForceLimit(MemorySegment struct) {
        return struct.get(minForceLimit$LAYOUT, minForceLimit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float minForceLimit
     * }
     */
    public static void minForceLimit(MemorySegment struct, float fieldValue) {
        struct.set(minForceLimit$LAYOUT, minForceLimit$OFFSET, fieldValue);
    }

    private static final OfFloat maxForceLimit$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxForceLimit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxForceLimit
     * }
     */
    public static final OfFloat maxForceLimit$layout() {
        return maxForceLimit$LAYOUT;
    }

    private static final long maxForceLimit$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxForceLimit
     * }
     */
    public static final long maxForceLimit$offset() {
        return maxForceLimit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxForceLimit
     * }
     */
    public static float maxForceLimit(MemorySegment struct) {
        return struct.get(maxForceLimit$LAYOUT, maxForceLimit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxForceLimit
     * }
     */
    public static void maxForceLimit(MemorySegment struct, float fieldValue) {
        struct.set(maxForceLimit$LAYOUT, maxForceLimit$OFFSET, fieldValue);
    }

    private static final OfFloat minTorqueLimit$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("minTorqueLimit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float minTorqueLimit
     * }
     */
    public static final OfFloat minTorqueLimit$layout() {
        return minTorqueLimit$LAYOUT;
    }

    private static final long minTorqueLimit$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float minTorqueLimit
     * }
     */
    public static final long minTorqueLimit$offset() {
        return minTorqueLimit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float minTorqueLimit
     * }
     */
    public static float minTorqueLimit(MemorySegment struct) {
        return struct.get(minTorqueLimit$LAYOUT, minTorqueLimit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float minTorqueLimit
     * }
     */
    public static void minTorqueLimit(MemorySegment struct, float fieldValue) {
        struct.set(minTorqueLimit$LAYOUT, minTorqueLimit$OFFSET, fieldValue);
    }

    private static final OfFloat maxTorqueLimit$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxTorqueLimit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxTorqueLimit
     * }
     */
    public static final OfFloat maxTorqueLimit$layout() {
        return maxTorqueLimit$LAYOUT;
    }

    private static final long maxTorqueLimit$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxTorqueLimit
     * }
     */
    public static final long maxTorqueLimit$offset() {
        return maxTorqueLimit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxTorqueLimit
     * }
     */
    public static float maxTorqueLimit(MemorySegment struct) {
        return struct.get(maxTorqueLimit$LAYOUT, maxTorqueLimit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxTorqueLimit
     * }
     */
    public static void maxTorqueLimit(MemorySegment struct, float fieldValue) {
        struct.set(maxTorqueLimit$LAYOUT, maxTorqueLimit$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

