// Generated by jextract

package org.vybe.jolt_cs;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPH_Triangle {
 *     JPH_Vec3 v1;
 *     JPH_Vec3 v2;
 *     JPH_Vec3 v3;
 *     uint32_t materialIndex;
 * }
 * }
 */
public class JPH_Triangle {

    JPH_Triangle() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        JPH_Vec3.layout().withName("v1"),
        JPH_Vec3.layout().withName("v2"),
        JPH_Vec3.layout().withName("v3"),
        jolt_cs.C_INT.withName("materialIndex")
    ).withName("JPH_Triangle");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout v1$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("v1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Vec3 v1
     * }
     */
    public static final GroupLayout v1$layout() {
        return v1$LAYOUT;
    }

    private static final long v1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Vec3 v1
     * }
     */
    public static final long v1$offset() {
        return v1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Vec3 v1
     * }
     */
    public static MemorySegment v1(MemorySegment struct) {
        return struct.asSlice(v1$OFFSET, v1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Vec3 v1
     * }
     */
    public static void v1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, v1$OFFSET, v1$LAYOUT.byteSize());
    }

    private static final GroupLayout v2$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("v2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Vec3 v2
     * }
     */
    public static final GroupLayout v2$layout() {
        return v2$LAYOUT;
    }

    private static final long v2$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Vec3 v2
     * }
     */
    public static final long v2$offset() {
        return v2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Vec3 v2
     * }
     */
    public static MemorySegment v2(MemorySegment struct) {
        return struct.asSlice(v2$OFFSET, v2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Vec3 v2
     * }
     */
    public static void v2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, v2$OFFSET, v2$LAYOUT.byteSize());
    }

    private static final GroupLayout v3$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("v3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * JPH_Vec3 v3
     * }
     */
    public static final GroupLayout v3$layout() {
        return v3$LAYOUT;
    }

    private static final long v3$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * JPH_Vec3 v3
     * }
     */
    public static final long v3$offset() {
        return v3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * JPH_Vec3 v3
     * }
     */
    public static MemorySegment v3(MemorySegment struct) {
        return struct.asSlice(v3$OFFSET, v3$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * JPH_Vec3 v3
     * }
     */
    public static void v3(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, v3$OFFSET, v3$LAYOUT.byteSize());
    }

    private static final OfInt materialIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("materialIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t materialIndex
     * }
     */
    public static final OfInt materialIndex$layout() {
        return materialIndex$LAYOUT;
    }

    private static final long materialIndex$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t materialIndex
     * }
     */
    public static final long materialIndex$offset() {
        return materialIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t materialIndex
     * }
     */
    public static int materialIndex(MemorySegment struct) {
        return struct.get(materialIndex$LAYOUT, materialIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t materialIndex
     * }
     */
    public static void materialIndex(MemorySegment struct, int fieldValue) {
        struct.set(materialIndex$LAYOUT, materialIndex$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

