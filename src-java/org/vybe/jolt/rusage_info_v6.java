// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct rusage_info_v6 {
 *     uint8_t ri_uuid[16];
 *     uint64_t ri_user_time;
 *     uint64_t ri_system_time;
 *     uint64_t ri_pkg_idle_wkups;
 *     uint64_t ri_interrupt_wkups;
 *     uint64_t ri_pageins;
 *     uint64_t ri_wired_size;
 *     uint64_t ri_resident_size;
 *     uint64_t ri_phys_footprint;
 *     uint64_t ri_proc_start_abstime;
 *     uint64_t ri_proc_exit_abstime;
 *     uint64_t ri_child_user_time;
 *     uint64_t ri_child_system_time;
 *     uint64_t ri_child_pkg_idle_wkups;
 *     uint64_t ri_child_interrupt_wkups;
 *     uint64_t ri_child_pageins;
 *     uint64_t ri_child_elapsed_abstime;
 *     uint64_t ri_diskio_bytesread;
 *     uint64_t ri_diskio_byteswritten;
 *     uint64_t ri_cpu_time_qos_default;
 *     uint64_t ri_cpu_time_qos_maintenance;
 *     uint64_t ri_cpu_time_qos_background;
 *     uint64_t ri_cpu_time_qos_utility;
 *     uint64_t ri_cpu_time_qos_legacy;
 *     uint64_t ri_cpu_time_qos_user_initiated;
 *     uint64_t ri_cpu_time_qos_user_interactive;
 *     uint64_t ri_billed_system_time;
 *     uint64_t ri_serviced_system_time;
 *     uint64_t ri_logical_writes;
 *     uint64_t ri_lifetime_max_phys_footprint;
 *     uint64_t ri_instructions;
 *     uint64_t ri_cycles;
 *     uint64_t ri_billed_energy;
 *     uint64_t ri_serviced_energy;
 *     uint64_t ri_interval_max_phys_footprint;
 *     uint64_t ri_runnable_time;
 *     uint64_t ri_flags;
 *     uint64_t ri_user_ptime;
 *     uint64_t ri_system_ptime;
 *     uint64_t ri_pinstructions;
 *     uint64_t ri_pcycles;
 *     uint64_t ri_energy_nj;
 *     uint64_t ri_penergy_nj;
 *     uint64_t ri_secure_time_in_system;
 *     uint64_t ri_secure_ptime_in_system;
 *     uint64_t ri_neural_footprint;
 *     uint64_t ri_lifetime_max_neural_footprint;
 *     uint64_t ri_interval_max_neural_footprint;
 *     uint64_t ri_reserved[9];
 * }
 * }
 */
public class rusage_info_v6 {

    rusage_info_v6() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, jolt.C_CHAR).withName("ri_uuid"),
        jolt.C_LONG_LONG.withName("ri_user_time"),
        jolt.C_LONG_LONG.withName("ri_system_time"),
        jolt.C_LONG_LONG.withName("ri_pkg_idle_wkups"),
        jolt.C_LONG_LONG.withName("ri_interrupt_wkups"),
        jolt.C_LONG_LONG.withName("ri_pageins"),
        jolt.C_LONG_LONG.withName("ri_wired_size"),
        jolt.C_LONG_LONG.withName("ri_resident_size"),
        jolt.C_LONG_LONG.withName("ri_phys_footprint"),
        jolt.C_LONG_LONG.withName("ri_proc_start_abstime"),
        jolt.C_LONG_LONG.withName("ri_proc_exit_abstime"),
        jolt.C_LONG_LONG.withName("ri_child_user_time"),
        jolt.C_LONG_LONG.withName("ri_child_system_time"),
        jolt.C_LONG_LONG.withName("ri_child_pkg_idle_wkups"),
        jolt.C_LONG_LONG.withName("ri_child_interrupt_wkups"),
        jolt.C_LONG_LONG.withName("ri_child_pageins"),
        jolt.C_LONG_LONG.withName("ri_child_elapsed_abstime"),
        jolt.C_LONG_LONG.withName("ri_diskio_bytesread"),
        jolt.C_LONG_LONG.withName("ri_diskio_byteswritten"),
        jolt.C_LONG_LONG.withName("ri_cpu_time_qos_default"),
        jolt.C_LONG_LONG.withName("ri_cpu_time_qos_maintenance"),
        jolt.C_LONG_LONG.withName("ri_cpu_time_qos_background"),
        jolt.C_LONG_LONG.withName("ri_cpu_time_qos_utility"),
        jolt.C_LONG_LONG.withName("ri_cpu_time_qos_legacy"),
        jolt.C_LONG_LONG.withName("ri_cpu_time_qos_user_initiated"),
        jolt.C_LONG_LONG.withName("ri_cpu_time_qos_user_interactive"),
        jolt.C_LONG_LONG.withName("ri_billed_system_time"),
        jolt.C_LONG_LONG.withName("ri_serviced_system_time"),
        jolt.C_LONG_LONG.withName("ri_logical_writes"),
        jolt.C_LONG_LONG.withName("ri_lifetime_max_phys_footprint"),
        jolt.C_LONG_LONG.withName("ri_instructions"),
        jolt.C_LONG_LONG.withName("ri_cycles"),
        jolt.C_LONG_LONG.withName("ri_billed_energy"),
        jolt.C_LONG_LONG.withName("ri_serviced_energy"),
        jolt.C_LONG_LONG.withName("ri_interval_max_phys_footprint"),
        jolt.C_LONG_LONG.withName("ri_runnable_time"),
        jolt.C_LONG_LONG.withName("ri_flags"),
        jolt.C_LONG_LONG.withName("ri_user_ptime"),
        jolt.C_LONG_LONG.withName("ri_system_ptime"),
        jolt.C_LONG_LONG.withName("ri_pinstructions"),
        jolt.C_LONG_LONG.withName("ri_pcycles"),
        jolt.C_LONG_LONG.withName("ri_energy_nj"),
        jolt.C_LONG_LONG.withName("ri_penergy_nj"),
        jolt.C_LONG_LONG.withName("ri_secure_time_in_system"),
        jolt.C_LONG_LONG.withName("ri_secure_ptime_in_system"),
        jolt.C_LONG_LONG.withName("ri_neural_footprint"),
        jolt.C_LONG_LONG.withName("ri_lifetime_max_neural_footprint"),
        jolt.C_LONG_LONG.withName("ri_interval_max_neural_footprint"),
        MemoryLayout.sequenceLayout(9, jolt.C_LONG_LONG).withName("ri_reserved")
    ).withName("rusage_info_v6");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout ri_uuid$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ri_uuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t ri_uuid[16]
     * }
     */
    public static final SequenceLayout ri_uuid$layout() {
        return ri_uuid$LAYOUT;
    }

    private static final long ri_uuid$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t ri_uuid[16]
     * }
     */
    public static final long ri_uuid$offset() {
        return ri_uuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t ri_uuid[16]
     * }
     */
    public static MemorySegment ri_uuid(MemorySegment struct) {
        return struct.asSlice(ri_uuid$OFFSET, ri_uuid$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t ri_uuid[16]
     * }
     */
    public static void ri_uuid(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ri_uuid$OFFSET, ri_uuid$LAYOUT.byteSize());
    }

    private static long[] ri_uuid$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t ri_uuid[16]
     * }
     */
    public static long[] ri_uuid$dimensions() {
        return ri_uuid$DIMS;
    }
    private static final VarHandle ri_uuid$ELEM_HANDLE = ri_uuid$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t ri_uuid[16]
     * }
     */
    public static byte ri_uuid(MemorySegment struct, long index0) {
        return (byte)ri_uuid$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t ri_uuid[16]
     * }
     */
    public static void ri_uuid(MemorySegment struct, long index0, byte fieldValue) {
        ri_uuid$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong ri_user_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_user_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_user_time
     * }
     */
    public static final OfLong ri_user_time$layout() {
        return ri_user_time$LAYOUT;
    }

    private static final long ri_user_time$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_user_time
     * }
     */
    public static final long ri_user_time$offset() {
        return ri_user_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_user_time
     * }
     */
    public static long ri_user_time(MemorySegment struct) {
        return struct.get(ri_user_time$LAYOUT, ri_user_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_user_time
     * }
     */
    public static void ri_user_time(MemorySegment struct, long fieldValue) {
        struct.set(ri_user_time$LAYOUT, ri_user_time$OFFSET, fieldValue);
    }

    private static final OfLong ri_system_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_system_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_system_time
     * }
     */
    public static final OfLong ri_system_time$layout() {
        return ri_system_time$LAYOUT;
    }

    private static final long ri_system_time$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_system_time
     * }
     */
    public static final long ri_system_time$offset() {
        return ri_system_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_system_time
     * }
     */
    public static long ri_system_time(MemorySegment struct) {
        return struct.get(ri_system_time$LAYOUT, ri_system_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_system_time
     * }
     */
    public static void ri_system_time(MemorySegment struct, long fieldValue) {
        struct.set(ri_system_time$LAYOUT, ri_system_time$OFFSET, fieldValue);
    }

    private static final OfLong ri_pkg_idle_wkups$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_pkg_idle_wkups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_pkg_idle_wkups
     * }
     */
    public static final OfLong ri_pkg_idle_wkups$layout() {
        return ri_pkg_idle_wkups$LAYOUT;
    }

    private static final long ri_pkg_idle_wkups$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_pkg_idle_wkups
     * }
     */
    public static final long ri_pkg_idle_wkups$offset() {
        return ri_pkg_idle_wkups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_pkg_idle_wkups
     * }
     */
    public static long ri_pkg_idle_wkups(MemorySegment struct) {
        return struct.get(ri_pkg_idle_wkups$LAYOUT, ri_pkg_idle_wkups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_pkg_idle_wkups
     * }
     */
    public static void ri_pkg_idle_wkups(MemorySegment struct, long fieldValue) {
        struct.set(ri_pkg_idle_wkups$LAYOUT, ri_pkg_idle_wkups$OFFSET, fieldValue);
    }

    private static final OfLong ri_interrupt_wkups$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_interrupt_wkups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_interrupt_wkups
     * }
     */
    public static final OfLong ri_interrupt_wkups$layout() {
        return ri_interrupt_wkups$LAYOUT;
    }

    private static final long ri_interrupt_wkups$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_interrupt_wkups
     * }
     */
    public static final long ri_interrupt_wkups$offset() {
        return ri_interrupt_wkups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_interrupt_wkups
     * }
     */
    public static long ri_interrupt_wkups(MemorySegment struct) {
        return struct.get(ri_interrupt_wkups$LAYOUT, ri_interrupt_wkups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_interrupt_wkups
     * }
     */
    public static void ri_interrupt_wkups(MemorySegment struct, long fieldValue) {
        struct.set(ri_interrupt_wkups$LAYOUT, ri_interrupt_wkups$OFFSET, fieldValue);
    }

    private static final OfLong ri_pageins$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_pageins"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_pageins
     * }
     */
    public static final OfLong ri_pageins$layout() {
        return ri_pageins$LAYOUT;
    }

    private static final long ri_pageins$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_pageins
     * }
     */
    public static final long ri_pageins$offset() {
        return ri_pageins$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_pageins
     * }
     */
    public static long ri_pageins(MemorySegment struct) {
        return struct.get(ri_pageins$LAYOUT, ri_pageins$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_pageins
     * }
     */
    public static void ri_pageins(MemorySegment struct, long fieldValue) {
        struct.set(ri_pageins$LAYOUT, ri_pageins$OFFSET, fieldValue);
    }

    private static final OfLong ri_wired_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_wired_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_wired_size
     * }
     */
    public static final OfLong ri_wired_size$layout() {
        return ri_wired_size$LAYOUT;
    }

    private static final long ri_wired_size$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_wired_size
     * }
     */
    public static final long ri_wired_size$offset() {
        return ri_wired_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_wired_size
     * }
     */
    public static long ri_wired_size(MemorySegment struct) {
        return struct.get(ri_wired_size$LAYOUT, ri_wired_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_wired_size
     * }
     */
    public static void ri_wired_size(MemorySegment struct, long fieldValue) {
        struct.set(ri_wired_size$LAYOUT, ri_wired_size$OFFSET, fieldValue);
    }

    private static final OfLong ri_resident_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_resident_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_resident_size
     * }
     */
    public static final OfLong ri_resident_size$layout() {
        return ri_resident_size$LAYOUT;
    }

    private static final long ri_resident_size$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_resident_size
     * }
     */
    public static final long ri_resident_size$offset() {
        return ri_resident_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_resident_size
     * }
     */
    public static long ri_resident_size(MemorySegment struct) {
        return struct.get(ri_resident_size$LAYOUT, ri_resident_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_resident_size
     * }
     */
    public static void ri_resident_size(MemorySegment struct, long fieldValue) {
        struct.set(ri_resident_size$LAYOUT, ri_resident_size$OFFSET, fieldValue);
    }

    private static final OfLong ri_phys_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_phys_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_phys_footprint
     * }
     */
    public static final OfLong ri_phys_footprint$layout() {
        return ri_phys_footprint$LAYOUT;
    }

    private static final long ri_phys_footprint$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_phys_footprint
     * }
     */
    public static final long ri_phys_footprint$offset() {
        return ri_phys_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_phys_footprint
     * }
     */
    public static long ri_phys_footprint(MemorySegment struct) {
        return struct.get(ri_phys_footprint$LAYOUT, ri_phys_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_phys_footprint
     * }
     */
    public static void ri_phys_footprint(MemorySegment struct, long fieldValue) {
        struct.set(ri_phys_footprint$LAYOUT, ri_phys_footprint$OFFSET, fieldValue);
    }

    private static final OfLong ri_proc_start_abstime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_proc_start_abstime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_proc_start_abstime
     * }
     */
    public static final OfLong ri_proc_start_abstime$layout() {
        return ri_proc_start_abstime$LAYOUT;
    }

    private static final long ri_proc_start_abstime$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_proc_start_abstime
     * }
     */
    public static final long ri_proc_start_abstime$offset() {
        return ri_proc_start_abstime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_proc_start_abstime
     * }
     */
    public static long ri_proc_start_abstime(MemorySegment struct) {
        return struct.get(ri_proc_start_abstime$LAYOUT, ri_proc_start_abstime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_proc_start_abstime
     * }
     */
    public static void ri_proc_start_abstime(MemorySegment struct, long fieldValue) {
        struct.set(ri_proc_start_abstime$LAYOUT, ri_proc_start_abstime$OFFSET, fieldValue);
    }

    private static final OfLong ri_proc_exit_abstime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_proc_exit_abstime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_proc_exit_abstime
     * }
     */
    public static final OfLong ri_proc_exit_abstime$layout() {
        return ri_proc_exit_abstime$LAYOUT;
    }

    private static final long ri_proc_exit_abstime$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_proc_exit_abstime
     * }
     */
    public static final long ri_proc_exit_abstime$offset() {
        return ri_proc_exit_abstime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_proc_exit_abstime
     * }
     */
    public static long ri_proc_exit_abstime(MemorySegment struct) {
        return struct.get(ri_proc_exit_abstime$LAYOUT, ri_proc_exit_abstime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_proc_exit_abstime
     * }
     */
    public static void ri_proc_exit_abstime(MemorySegment struct, long fieldValue) {
        struct.set(ri_proc_exit_abstime$LAYOUT, ri_proc_exit_abstime$OFFSET, fieldValue);
    }

    private static final OfLong ri_child_user_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_child_user_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_child_user_time
     * }
     */
    public static final OfLong ri_child_user_time$layout() {
        return ri_child_user_time$LAYOUT;
    }

    private static final long ri_child_user_time$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_child_user_time
     * }
     */
    public static final long ri_child_user_time$offset() {
        return ri_child_user_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_user_time
     * }
     */
    public static long ri_child_user_time(MemorySegment struct) {
        return struct.get(ri_child_user_time$LAYOUT, ri_child_user_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_user_time
     * }
     */
    public static void ri_child_user_time(MemorySegment struct, long fieldValue) {
        struct.set(ri_child_user_time$LAYOUT, ri_child_user_time$OFFSET, fieldValue);
    }

    private static final OfLong ri_child_system_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_child_system_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_child_system_time
     * }
     */
    public static final OfLong ri_child_system_time$layout() {
        return ri_child_system_time$LAYOUT;
    }

    private static final long ri_child_system_time$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_child_system_time
     * }
     */
    public static final long ri_child_system_time$offset() {
        return ri_child_system_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_system_time
     * }
     */
    public static long ri_child_system_time(MemorySegment struct) {
        return struct.get(ri_child_system_time$LAYOUT, ri_child_system_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_system_time
     * }
     */
    public static void ri_child_system_time(MemorySegment struct, long fieldValue) {
        struct.set(ri_child_system_time$LAYOUT, ri_child_system_time$OFFSET, fieldValue);
    }

    private static final OfLong ri_child_pkg_idle_wkups$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_child_pkg_idle_wkups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_child_pkg_idle_wkups
     * }
     */
    public static final OfLong ri_child_pkg_idle_wkups$layout() {
        return ri_child_pkg_idle_wkups$LAYOUT;
    }

    private static final long ri_child_pkg_idle_wkups$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_child_pkg_idle_wkups
     * }
     */
    public static final long ri_child_pkg_idle_wkups$offset() {
        return ri_child_pkg_idle_wkups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_pkg_idle_wkups
     * }
     */
    public static long ri_child_pkg_idle_wkups(MemorySegment struct) {
        return struct.get(ri_child_pkg_idle_wkups$LAYOUT, ri_child_pkg_idle_wkups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_pkg_idle_wkups
     * }
     */
    public static void ri_child_pkg_idle_wkups(MemorySegment struct, long fieldValue) {
        struct.set(ri_child_pkg_idle_wkups$LAYOUT, ri_child_pkg_idle_wkups$OFFSET, fieldValue);
    }

    private static final OfLong ri_child_interrupt_wkups$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_child_interrupt_wkups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_child_interrupt_wkups
     * }
     */
    public static final OfLong ri_child_interrupt_wkups$layout() {
        return ri_child_interrupt_wkups$LAYOUT;
    }

    private static final long ri_child_interrupt_wkups$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_child_interrupt_wkups
     * }
     */
    public static final long ri_child_interrupt_wkups$offset() {
        return ri_child_interrupt_wkups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_interrupt_wkups
     * }
     */
    public static long ri_child_interrupt_wkups(MemorySegment struct) {
        return struct.get(ri_child_interrupt_wkups$LAYOUT, ri_child_interrupt_wkups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_interrupt_wkups
     * }
     */
    public static void ri_child_interrupt_wkups(MemorySegment struct, long fieldValue) {
        struct.set(ri_child_interrupt_wkups$LAYOUT, ri_child_interrupt_wkups$OFFSET, fieldValue);
    }

    private static final OfLong ri_child_pageins$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_child_pageins"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_child_pageins
     * }
     */
    public static final OfLong ri_child_pageins$layout() {
        return ri_child_pageins$LAYOUT;
    }

    private static final long ri_child_pageins$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_child_pageins
     * }
     */
    public static final long ri_child_pageins$offset() {
        return ri_child_pageins$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_pageins
     * }
     */
    public static long ri_child_pageins(MemorySegment struct) {
        return struct.get(ri_child_pageins$LAYOUT, ri_child_pageins$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_pageins
     * }
     */
    public static void ri_child_pageins(MemorySegment struct, long fieldValue) {
        struct.set(ri_child_pageins$LAYOUT, ri_child_pageins$OFFSET, fieldValue);
    }

    private static final OfLong ri_child_elapsed_abstime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_child_elapsed_abstime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_child_elapsed_abstime
     * }
     */
    public static final OfLong ri_child_elapsed_abstime$layout() {
        return ri_child_elapsed_abstime$LAYOUT;
    }

    private static final long ri_child_elapsed_abstime$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_child_elapsed_abstime
     * }
     */
    public static final long ri_child_elapsed_abstime$offset() {
        return ri_child_elapsed_abstime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_elapsed_abstime
     * }
     */
    public static long ri_child_elapsed_abstime(MemorySegment struct) {
        return struct.get(ri_child_elapsed_abstime$LAYOUT, ri_child_elapsed_abstime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_child_elapsed_abstime
     * }
     */
    public static void ri_child_elapsed_abstime(MemorySegment struct, long fieldValue) {
        struct.set(ri_child_elapsed_abstime$LAYOUT, ri_child_elapsed_abstime$OFFSET, fieldValue);
    }

    private static final OfLong ri_diskio_bytesread$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_diskio_bytesread"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_diskio_bytesread
     * }
     */
    public static final OfLong ri_diskio_bytesread$layout() {
        return ri_diskio_bytesread$LAYOUT;
    }

    private static final long ri_diskio_bytesread$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_diskio_bytesread
     * }
     */
    public static final long ri_diskio_bytesread$offset() {
        return ri_diskio_bytesread$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_diskio_bytesread
     * }
     */
    public static long ri_diskio_bytesread(MemorySegment struct) {
        return struct.get(ri_diskio_bytesread$LAYOUT, ri_diskio_bytesread$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_diskio_bytesread
     * }
     */
    public static void ri_diskio_bytesread(MemorySegment struct, long fieldValue) {
        struct.set(ri_diskio_bytesread$LAYOUT, ri_diskio_bytesread$OFFSET, fieldValue);
    }

    private static final OfLong ri_diskio_byteswritten$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_diskio_byteswritten"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_diskio_byteswritten
     * }
     */
    public static final OfLong ri_diskio_byteswritten$layout() {
        return ri_diskio_byteswritten$LAYOUT;
    }

    private static final long ri_diskio_byteswritten$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_diskio_byteswritten
     * }
     */
    public static final long ri_diskio_byteswritten$offset() {
        return ri_diskio_byteswritten$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_diskio_byteswritten
     * }
     */
    public static long ri_diskio_byteswritten(MemorySegment struct) {
        return struct.get(ri_diskio_byteswritten$LAYOUT, ri_diskio_byteswritten$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_diskio_byteswritten
     * }
     */
    public static void ri_diskio_byteswritten(MemorySegment struct, long fieldValue) {
        struct.set(ri_diskio_byteswritten$LAYOUT, ri_diskio_byteswritten$OFFSET, fieldValue);
    }

    private static final OfLong ri_cpu_time_qos_default$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_cpu_time_qos_default"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_default
     * }
     */
    public static final OfLong ri_cpu_time_qos_default$layout() {
        return ri_cpu_time_qos_default$LAYOUT;
    }

    private static final long ri_cpu_time_qos_default$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_default
     * }
     */
    public static final long ri_cpu_time_qos_default$offset() {
        return ri_cpu_time_qos_default$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_default
     * }
     */
    public static long ri_cpu_time_qos_default(MemorySegment struct) {
        return struct.get(ri_cpu_time_qos_default$LAYOUT, ri_cpu_time_qos_default$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_default
     * }
     */
    public static void ri_cpu_time_qos_default(MemorySegment struct, long fieldValue) {
        struct.set(ri_cpu_time_qos_default$LAYOUT, ri_cpu_time_qos_default$OFFSET, fieldValue);
    }

    private static final OfLong ri_cpu_time_qos_maintenance$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_cpu_time_qos_maintenance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_maintenance
     * }
     */
    public static final OfLong ri_cpu_time_qos_maintenance$layout() {
        return ri_cpu_time_qos_maintenance$LAYOUT;
    }

    private static final long ri_cpu_time_qos_maintenance$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_maintenance
     * }
     */
    public static final long ri_cpu_time_qos_maintenance$offset() {
        return ri_cpu_time_qos_maintenance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_maintenance
     * }
     */
    public static long ri_cpu_time_qos_maintenance(MemorySegment struct) {
        return struct.get(ri_cpu_time_qos_maintenance$LAYOUT, ri_cpu_time_qos_maintenance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_maintenance
     * }
     */
    public static void ri_cpu_time_qos_maintenance(MemorySegment struct, long fieldValue) {
        struct.set(ri_cpu_time_qos_maintenance$LAYOUT, ri_cpu_time_qos_maintenance$OFFSET, fieldValue);
    }

    private static final OfLong ri_cpu_time_qos_background$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_cpu_time_qos_background"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_background
     * }
     */
    public static final OfLong ri_cpu_time_qos_background$layout() {
        return ri_cpu_time_qos_background$LAYOUT;
    }

    private static final long ri_cpu_time_qos_background$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_background
     * }
     */
    public static final long ri_cpu_time_qos_background$offset() {
        return ri_cpu_time_qos_background$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_background
     * }
     */
    public static long ri_cpu_time_qos_background(MemorySegment struct) {
        return struct.get(ri_cpu_time_qos_background$LAYOUT, ri_cpu_time_qos_background$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_background
     * }
     */
    public static void ri_cpu_time_qos_background(MemorySegment struct, long fieldValue) {
        struct.set(ri_cpu_time_qos_background$LAYOUT, ri_cpu_time_qos_background$OFFSET, fieldValue);
    }

    private static final OfLong ri_cpu_time_qos_utility$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_cpu_time_qos_utility"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_utility
     * }
     */
    public static final OfLong ri_cpu_time_qos_utility$layout() {
        return ri_cpu_time_qos_utility$LAYOUT;
    }

    private static final long ri_cpu_time_qos_utility$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_utility
     * }
     */
    public static final long ri_cpu_time_qos_utility$offset() {
        return ri_cpu_time_qos_utility$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_utility
     * }
     */
    public static long ri_cpu_time_qos_utility(MemorySegment struct) {
        return struct.get(ri_cpu_time_qos_utility$LAYOUT, ri_cpu_time_qos_utility$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_utility
     * }
     */
    public static void ri_cpu_time_qos_utility(MemorySegment struct, long fieldValue) {
        struct.set(ri_cpu_time_qos_utility$LAYOUT, ri_cpu_time_qos_utility$OFFSET, fieldValue);
    }

    private static final OfLong ri_cpu_time_qos_legacy$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_cpu_time_qos_legacy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_legacy
     * }
     */
    public static final OfLong ri_cpu_time_qos_legacy$layout() {
        return ri_cpu_time_qos_legacy$LAYOUT;
    }

    private static final long ri_cpu_time_qos_legacy$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_legacy
     * }
     */
    public static final long ri_cpu_time_qos_legacy$offset() {
        return ri_cpu_time_qos_legacy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_legacy
     * }
     */
    public static long ri_cpu_time_qos_legacy(MemorySegment struct) {
        return struct.get(ri_cpu_time_qos_legacy$LAYOUT, ri_cpu_time_qos_legacy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_legacy
     * }
     */
    public static void ri_cpu_time_qos_legacy(MemorySegment struct, long fieldValue) {
        struct.set(ri_cpu_time_qos_legacy$LAYOUT, ri_cpu_time_qos_legacy$OFFSET, fieldValue);
    }

    private static final OfLong ri_cpu_time_qos_user_initiated$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_cpu_time_qos_user_initiated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_user_initiated
     * }
     */
    public static final OfLong ri_cpu_time_qos_user_initiated$layout() {
        return ri_cpu_time_qos_user_initiated$LAYOUT;
    }

    private static final long ri_cpu_time_qos_user_initiated$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_user_initiated
     * }
     */
    public static final long ri_cpu_time_qos_user_initiated$offset() {
        return ri_cpu_time_qos_user_initiated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_user_initiated
     * }
     */
    public static long ri_cpu_time_qos_user_initiated(MemorySegment struct) {
        return struct.get(ri_cpu_time_qos_user_initiated$LAYOUT, ri_cpu_time_qos_user_initiated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_user_initiated
     * }
     */
    public static void ri_cpu_time_qos_user_initiated(MemorySegment struct, long fieldValue) {
        struct.set(ri_cpu_time_qos_user_initiated$LAYOUT, ri_cpu_time_qos_user_initiated$OFFSET, fieldValue);
    }

    private static final OfLong ri_cpu_time_qos_user_interactive$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_cpu_time_qos_user_interactive"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_user_interactive
     * }
     */
    public static final OfLong ri_cpu_time_qos_user_interactive$layout() {
        return ri_cpu_time_qos_user_interactive$LAYOUT;
    }

    private static final long ri_cpu_time_qos_user_interactive$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_user_interactive
     * }
     */
    public static final long ri_cpu_time_qos_user_interactive$offset() {
        return ri_cpu_time_qos_user_interactive$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_user_interactive
     * }
     */
    public static long ri_cpu_time_qos_user_interactive(MemorySegment struct) {
        return struct.get(ri_cpu_time_qos_user_interactive$LAYOUT, ri_cpu_time_qos_user_interactive$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_cpu_time_qos_user_interactive
     * }
     */
    public static void ri_cpu_time_qos_user_interactive(MemorySegment struct, long fieldValue) {
        struct.set(ri_cpu_time_qos_user_interactive$LAYOUT, ri_cpu_time_qos_user_interactive$OFFSET, fieldValue);
    }

    private static final OfLong ri_billed_system_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_billed_system_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_billed_system_time
     * }
     */
    public static final OfLong ri_billed_system_time$layout() {
        return ri_billed_system_time$LAYOUT;
    }

    private static final long ri_billed_system_time$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_billed_system_time
     * }
     */
    public static final long ri_billed_system_time$offset() {
        return ri_billed_system_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_billed_system_time
     * }
     */
    public static long ri_billed_system_time(MemorySegment struct) {
        return struct.get(ri_billed_system_time$LAYOUT, ri_billed_system_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_billed_system_time
     * }
     */
    public static void ri_billed_system_time(MemorySegment struct, long fieldValue) {
        struct.set(ri_billed_system_time$LAYOUT, ri_billed_system_time$OFFSET, fieldValue);
    }

    private static final OfLong ri_serviced_system_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_serviced_system_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_serviced_system_time
     * }
     */
    public static final OfLong ri_serviced_system_time$layout() {
        return ri_serviced_system_time$LAYOUT;
    }

    private static final long ri_serviced_system_time$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_serviced_system_time
     * }
     */
    public static final long ri_serviced_system_time$offset() {
        return ri_serviced_system_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_serviced_system_time
     * }
     */
    public static long ri_serviced_system_time(MemorySegment struct) {
        return struct.get(ri_serviced_system_time$LAYOUT, ri_serviced_system_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_serviced_system_time
     * }
     */
    public static void ri_serviced_system_time(MemorySegment struct, long fieldValue) {
        struct.set(ri_serviced_system_time$LAYOUT, ri_serviced_system_time$OFFSET, fieldValue);
    }

    private static final OfLong ri_logical_writes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_logical_writes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_logical_writes
     * }
     */
    public static final OfLong ri_logical_writes$layout() {
        return ri_logical_writes$LAYOUT;
    }

    private static final long ri_logical_writes$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_logical_writes
     * }
     */
    public static final long ri_logical_writes$offset() {
        return ri_logical_writes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_logical_writes
     * }
     */
    public static long ri_logical_writes(MemorySegment struct) {
        return struct.get(ri_logical_writes$LAYOUT, ri_logical_writes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_logical_writes
     * }
     */
    public static void ri_logical_writes(MemorySegment struct, long fieldValue) {
        struct.set(ri_logical_writes$LAYOUT, ri_logical_writes$OFFSET, fieldValue);
    }

    private static final OfLong ri_lifetime_max_phys_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_lifetime_max_phys_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_lifetime_max_phys_footprint
     * }
     */
    public static final OfLong ri_lifetime_max_phys_footprint$layout() {
        return ri_lifetime_max_phys_footprint$LAYOUT;
    }

    private static final long ri_lifetime_max_phys_footprint$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_lifetime_max_phys_footprint
     * }
     */
    public static final long ri_lifetime_max_phys_footprint$offset() {
        return ri_lifetime_max_phys_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_lifetime_max_phys_footprint
     * }
     */
    public static long ri_lifetime_max_phys_footprint(MemorySegment struct) {
        return struct.get(ri_lifetime_max_phys_footprint$LAYOUT, ri_lifetime_max_phys_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_lifetime_max_phys_footprint
     * }
     */
    public static void ri_lifetime_max_phys_footprint(MemorySegment struct, long fieldValue) {
        struct.set(ri_lifetime_max_phys_footprint$LAYOUT, ri_lifetime_max_phys_footprint$OFFSET, fieldValue);
    }

    private static final OfLong ri_instructions$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_instructions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_instructions
     * }
     */
    public static final OfLong ri_instructions$layout() {
        return ri_instructions$LAYOUT;
    }

    private static final long ri_instructions$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_instructions
     * }
     */
    public static final long ri_instructions$offset() {
        return ri_instructions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_instructions
     * }
     */
    public static long ri_instructions(MemorySegment struct) {
        return struct.get(ri_instructions$LAYOUT, ri_instructions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_instructions
     * }
     */
    public static void ri_instructions(MemorySegment struct, long fieldValue) {
        struct.set(ri_instructions$LAYOUT, ri_instructions$OFFSET, fieldValue);
    }

    private static final OfLong ri_cycles$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_cycles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_cycles
     * }
     */
    public static final OfLong ri_cycles$layout() {
        return ri_cycles$LAYOUT;
    }

    private static final long ri_cycles$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_cycles
     * }
     */
    public static final long ri_cycles$offset() {
        return ri_cycles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_cycles
     * }
     */
    public static long ri_cycles(MemorySegment struct) {
        return struct.get(ri_cycles$LAYOUT, ri_cycles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_cycles
     * }
     */
    public static void ri_cycles(MemorySegment struct, long fieldValue) {
        struct.set(ri_cycles$LAYOUT, ri_cycles$OFFSET, fieldValue);
    }

    private static final OfLong ri_billed_energy$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_billed_energy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_billed_energy
     * }
     */
    public static final OfLong ri_billed_energy$layout() {
        return ri_billed_energy$LAYOUT;
    }

    private static final long ri_billed_energy$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_billed_energy
     * }
     */
    public static final long ri_billed_energy$offset() {
        return ri_billed_energy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_billed_energy
     * }
     */
    public static long ri_billed_energy(MemorySegment struct) {
        return struct.get(ri_billed_energy$LAYOUT, ri_billed_energy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_billed_energy
     * }
     */
    public static void ri_billed_energy(MemorySegment struct, long fieldValue) {
        struct.set(ri_billed_energy$LAYOUT, ri_billed_energy$OFFSET, fieldValue);
    }

    private static final OfLong ri_serviced_energy$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_serviced_energy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_serviced_energy
     * }
     */
    public static final OfLong ri_serviced_energy$layout() {
        return ri_serviced_energy$LAYOUT;
    }

    private static final long ri_serviced_energy$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_serviced_energy
     * }
     */
    public static final long ri_serviced_energy$offset() {
        return ri_serviced_energy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_serviced_energy
     * }
     */
    public static long ri_serviced_energy(MemorySegment struct) {
        return struct.get(ri_serviced_energy$LAYOUT, ri_serviced_energy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_serviced_energy
     * }
     */
    public static void ri_serviced_energy(MemorySegment struct, long fieldValue) {
        struct.set(ri_serviced_energy$LAYOUT, ri_serviced_energy$OFFSET, fieldValue);
    }

    private static final OfLong ri_interval_max_phys_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_interval_max_phys_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_interval_max_phys_footprint
     * }
     */
    public static final OfLong ri_interval_max_phys_footprint$layout() {
        return ri_interval_max_phys_footprint$LAYOUT;
    }

    private static final long ri_interval_max_phys_footprint$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_interval_max_phys_footprint
     * }
     */
    public static final long ri_interval_max_phys_footprint$offset() {
        return ri_interval_max_phys_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_interval_max_phys_footprint
     * }
     */
    public static long ri_interval_max_phys_footprint(MemorySegment struct) {
        return struct.get(ri_interval_max_phys_footprint$LAYOUT, ri_interval_max_phys_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_interval_max_phys_footprint
     * }
     */
    public static void ri_interval_max_phys_footprint(MemorySegment struct, long fieldValue) {
        struct.set(ri_interval_max_phys_footprint$LAYOUT, ri_interval_max_phys_footprint$OFFSET, fieldValue);
    }

    private static final OfLong ri_runnable_time$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_runnable_time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_runnable_time
     * }
     */
    public static final OfLong ri_runnable_time$layout() {
        return ri_runnable_time$LAYOUT;
    }

    private static final long ri_runnable_time$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_runnable_time
     * }
     */
    public static final long ri_runnable_time$offset() {
        return ri_runnable_time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_runnable_time
     * }
     */
    public static long ri_runnable_time(MemorySegment struct) {
        return struct.get(ri_runnable_time$LAYOUT, ri_runnable_time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_runnable_time
     * }
     */
    public static void ri_runnable_time(MemorySegment struct, long fieldValue) {
        struct.set(ri_runnable_time$LAYOUT, ri_runnable_time$OFFSET, fieldValue);
    }

    private static final OfLong ri_flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_flags
     * }
     */
    public static final OfLong ri_flags$layout() {
        return ri_flags$LAYOUT;
    }

    private static final long ri_flags$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_flags
     * }
     */
    public static final long ri_flags$offset() {
        return ri_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_flags
     * }
     */
    public static long ri_flags(MemorySegment struct) {
        return struct.get(ri_flags$LAYOUT, ri_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_flags
     * }
     */
    public static void ri_flags(MemorySegment struct, long fieldValue) {
        struct.set(ri_flags$LAYOUT, ri_flags$OFFSET, fieldValue);
    }

    private static final OfLong ri_user_ptime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_user_ptime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_user_ptime
     * }
     */
    public static final OfLong ri_user_ptime$layout() {
        return ri_user_ptime$LAYOUT;
    }

    private static final long ri_user_ptime$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_user_ptime
     * }
     */
    public static final long ri_user_ptime$offset() {
        return ri_user_ptime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_user_ptime
     * }
     */
    public static long ri_user_ptime(MemorySegment struct) {
        return struct.get(ri_user_ptime$LAYOUT, ri_user_ptime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_user_ptime
     * }
     */
    public static void ri_user_ptime(MemorySegment struct, long fieldValue) {
        struct.set(ri_user_ptime$LAYOUT, ri_user_ptime$OFFSET, fieldValue);
    }

    private static final OfLong ri_system_ptime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_system_ptime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_system_ptime
     * }
     */
    public static final OfLong ri_system_ptime$layout() {
        return ri_system_ptime$LAYOUT;
    }

    private static final long ri_system_ptime$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_system_ptime
     * }
     */
    public static final long ri_system_ptime$offset() {
        return ri_system_ptime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_system_ptime
     * }
     */
    public static long ri_system_ptime(MemorySegment struct) {
        return struct.get(ri_system_ptime$LAYOUT, ri_system_ptime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_system_ptime
     * }
     */
    public static void ri_system_ptime(MemorySegment struct, long fieldValue) {
        struct.set(ri_system_ptime$LAYOUT, ri_system_ptime$OFFSET, fieldValue);
    }

    private static final OfLong ri_pinstructions$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_pinstructions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_pinstructions
     * }
     */
    public static final OfLong ri_pinstructions$layout() {
        return ri_pinstructions$LAYOUT;
    }

    private static final long ri_pinstructions$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_pinstructions
     * }
     */
    public static final long ri_pinstructions$offset() {
        return ri_pinstructions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_pinstructions
     * }
     */
    public static long ri_pinstructions(MemorySegment struct) {
        return struct.get(ri_pinstructions$LAYOUT, ri_pinstructions$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_pinstructions
     * }
     */
    public static void ri_pinstructions(MemorySegment struct, long fieldValue) {
        struct.set(ri_pinstructions$LAYOUT, ri_pinstructions$OFFSET, fieldValue);
    }

    private static final OfLong ri_pcycles$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_pcycles"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_pcycles
     * }
     */
    public static final OfLong ri_pcycles$layout() {
        return ri_pcycles$LAYOUT;
    }

    private static final long ri_pcycles$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_pcycles
     * }
     */
    public static final long ri_pcycles$offset() {
        return ri_pcycles$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_pcycles
     * }
     */
    public static long ri_pcycles(MemorySegment struct) {
        return struct.get(ri_pcycles$LAYOUT, ri_pcycles$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_pcycles
     * }
     */
    public static void ri_pcycles(MemorySegment struct, long fieldValue) {
        struct.set(ri_pcycles$LAYOUT, ri_pcycles$OFFSET, fieldValue);
    }

    private static final OfLong ri_energy_nj$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_energy_nj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_energy_nj
     * }
     */
    public static final OfLong ri_energy_nj$layout() {
        return ri_energy_nj$LAYOUT;
    }

    private static final long ri_energy_nj$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_energy_nj
     * }
     */
    public static final long ri_energy_nj$offset() {
        return ri_energy_nj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_energy_nj
     * }
     */
    public static long ri_energy_nj(MemorySegment struct) {
        return struct.get(ri_energy_nj$LAYOUT, ri_energy_nj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_energy_nj
     * }
     */
    public static void ri_energy_nj(MemorySegment struct, long fieldValue) {
        struct.set(ri_energy_nj$LAYOUT, ri_energy_nj$OFFSET, fieldValue);
    }

    private static final OfLong ri_penergy_nj$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_penergy_nj"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_penergy_nj
     * }
     */
    public static final OfLong ri_penergy_nj$layout() {
        return ri_penergy_nj$LAYOUT;
    }

    private static final long ri_penergy_nj$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_penergy_nj
     * }
     */
    public static final long ri_penergy_nj$offset() {
        return ri_penergy_nj$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_penergy_nj
     * }
     */
    public static long ri_penergy_nj(MemorySegment struct) {
        return struct.get(ri_penergy_nj$LAYOUT, ri_penergy_nj$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_penergy_nj
     * }
     */
    public static void ri_penergy_nj(MemorySegment struct, long fieldValue) {
        struct.set(ri_penergy_nj$LAYOUT, ri_penergy_nj$OFFSET, fieldValue);
    }

    private static final OfLong ri_secure_time_in_system$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_secure_time_in_system"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_secure_time_in_system
     * }
     */
    public static final OfLong ri_secure_time_in_system$layout() {
        return ri_secure_time_in_system$LAYOUT;
    }

    private static final long ri_secure_time_in_system$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_secure_time_in_system
     * }
     */
    public static final long ri_secure_time_in_system$offset() {
        return ri_secure_time_in_system$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_secure_time_in_system
     * }
     */
    public static long ri_secure_time_in_system(MemorySegment struct) {
        return struct.get(ri_secure_time_in_system$LAYOUT, ri_secure_time_in_system$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_secure_time_in_system
     * }
     */
    public static void ri_secure_time_in_system(MemorySegment struct, long fieldValue) {
        struct.set(ri_secure_time_in_system$LAYOUT, ri_secure_time_in_system$OFFSET, fieldValue);
    }

    private static final OfLong ri_secure_ptime_in_system$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_secure_ptime_in_system"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_secure_ptime_in_system
     * }
     */
    public static final OfLong ri_secure_ptime_in_system$layout() {
        return ri_secure_ptime_in_system$LAYOUT;
    }

    private static final long ri_secure_ptime_in_system$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_secure_ptime_in_system
     * }
     */
    public static final long ri_secure_ptime_in_system$offset() {
        return ri_secure_ptime_in_system$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_secure_ptime_in_system
     * }
     */
    public static long ri_secure_ptime_in_system(MemorySegment struct) {
        return struct.get(ri_secure_ptime_in_system$LAYOUT, ri_secure_ptime_in_system$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_secure_ptime_in_system
     * }
     */
    public static void ri_secure_ptime_in_system(MemorySegment struct, long fieldValue) {
        struct.set(ri_secure_ptime_in_system$LAYOUT, ri_secure_ptime_in_system$OFFSET, fieldValue);
    }

    private static final OfLong ri_neural_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_neural_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_neural_footprint
     * }
     */
    public static final OfLong ri_neural_footprint$layout() {
        return ri_neural_footprint$LAYOUT;
    }

    private static final long ri_neural_footprint$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_neural_footprint
     * }
     */
    public static final long ri_neural_footprint$offset() {
        return ri_neural_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_neural_footprint
     * }
     */
    public static long ri_neural_footprint(MemorySegment struct) {
        return struct.get(ri_neural_footprint$LAYOUT, ri_neural_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_neural_footprint
     * }
     */
    public static void ri_neural_footprint(MemorySegment struct, long fieldValue) {
        struct.set(ri_neural_footprint$LAYOUT, ri_neural_footprint$OFFSET, fieldValue);
    }

    private static final OfLong ri_lifetime_max_neural_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_lifetime_max_neural_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_lifetime_max_neural_footprint
     * }
     */
    public static final OfLong ri_lifetime_max_neural_footprint$layout() {
        return ri_lifetime_max_neural_footprint$LAYOUT;
    }

    private static final long ri_lifetime_max_neural_footprint$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_lifetime_max_neural_footprint
     * }
     */
    public static final long ri_lifetime_max_neural_footprint$offset() {
        return ri_lifetime_max_neural_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_lifetime_max_neural_footprint
     * }
     */
    public static long ri_lifetime_max_neural_footprint(MemorySegment struct) {
        return struct.get(ri_lifetime_max_neural_footprint$LAYOUT, ri_lifetime_max_neural_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_lifetime_max_neural_footprint
     * }
     */
    public static void ri_lifetime_max_neural_footprint(MemorySegment struct, long fieldValue) {
        struct.set(ri_lifetime_max_neural_footprint$LAYOUT, ri_lifetime_max_neural_footprint$OFFSET, fieldValue);
    }

    private static final OfLong ri_interval_max_neural_footprint$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ri_interval_max_neural_footprint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_interval_max_neural_footprint
     * }
     */
    public static final OfLong ri_interval_max_neural_footprint$layout() {
        return ri_interval_max_neural_footprint$LAYOUT;
    }

    private static final long ri_interval_max_neural_footprint$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_interval_max_neural_footprint
     * }
     */
    public static final long ri_interval_max_neural_footprint$offset() {
        return ri_interval_max_neural_footprint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_interval_max_neural_footprint
     * }
     */
    public static long ri_interval_max_neural_footprint(MemorySegment struct) {
        return struct.get(ri_interval_max_neural_footprint$LAYOUT, ri_interval_max_neural_footprint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_interval_max_neural_footprint
     * }
     */
    public static void ri_interval_max_neural_footprint(MemorySegment struct, long fieldValue) {
        struct.set(ri_interval_max_neural_footprint$LAYOUT, ri_interval_max_neural_footprint$OFFSET, fieldValue);
    }

    private static final SequenceLayout ri_reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ri_reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t ri_reserved[9]
     * }
     */
    public static final SequenceLayout ri_reserved$layout() {
        return ri_reserved$LAYOUT;
    }

    private static final long ri_reserved$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t ri_reserved[9]
     * }
     */
    public static final long ri_reserved$offset() {
        return ri_reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t ri_reserved[9]
     * }
     */
    public static MemorySegment ri_reserved(MemorySegment struct) {
        return struct.asSlice(ri_reserved$OFFSET, ri_reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t ri_reserved[9]
     * }
     */
    public static void ri_reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ri_reserved$OFFSET, ri_reserved$LAYOUT.byteSize());
    }

    private static long[] ri_reserved$DIMS = { 9 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint64_t ri_reserved[9]
     * }
     */
    public static long[] ri_reserved$dimensions() {
        return ri_reserved$DIMS;
    }
    private static final VarHandle ri_reserved$ELEM_HANDLE = ri_reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint64_t ri_reserved[9]
     * }
     */
    public static long ri_reserved(MemorySegment struct, long index0) {
        return (long)ri_reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint64_t ri_reserved[9]
     * }
     */
    public static void ri_reserved(MemorySegment struct, long index0, long fieldValue) {
        ri_reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

