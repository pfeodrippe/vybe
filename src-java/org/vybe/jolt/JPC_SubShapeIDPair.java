// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct JPC_SubShapeIDPair {
 *     struct {
 *         JPC_BodyID body_id;
 *         JPC_SubShapeID sub_shape_id;
 *     } first;
 *     struct {
 *         JPC_BodyID body_id;
 *         JPC_SubShapeID sub_shape_id;
 *     } second;
 * }
 * }
 */
public class JPC_SubShapeIDPair {

    JPC_SubShapeIDPair() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        JPC_SubShapeIDPair.first.layout().withName("first"),
        JPC_SubShapeIDPair.second.layout().withName("second")
    ).withName("JPC_SubShapeIDPair");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * }
     * }
     */
    public static class first {

        first() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            jolt.C_INT.withName("body_id"),
            jolt.C_INT.withName("sub_shape_id")
        ).withName("$anon$514:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt body_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("body_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * JPC_BodyID body_id
         * }
         */
        public static final OfInt body_id$layout() {
            return body_id$LAYOUT;
        }

        private static final long body_id$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * JPC_BodyID body_id
         * }
         */
        public static final long body_id$offset() {
            return body_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * JPC_BodyID body_id
         * }
         */
        public static int body_id(MemorySegment struct) {
            return struct.get(body_id$LAYOUT, body_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * JPC_BodyID body_id
         * }
         */
        public static void body_id(MemorySegment struct, int fieldValue) {
            struct.set(body_id$LAYOUT, body_id$OFFSET, fieldValue);
        }

        private static final OfInt sub_shape_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sub_shape_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * JPC_SubShapeID sub_shape_id
         * }
         */
        public static final OfInt sub_shape_id$layout() {
            return sub_shape_id$LAYOUT;
        }

        private static final long sub_shape_id$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * JPC_SubShapeID sub_shape_id
         * }
         */
        public static final long sub_shape_id$offset() {
            return sub_shape_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * JPC_SubShapeID sub_shape_id
         * }
         */
        public static int sub_shape_id(MemorySegment struct) {
            return struct.get(sub_shape_id$LAYOUT, sub_shape_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * JPC_SubShapeID sub_shape_id
         * }
         */
        public static void sub_shape_id(MemorySegment struct, int fieldValue) {
            struct.set(sub_shape_id$LAYOUT, sub_shape_id$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout first$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("first"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * } first
     * }
     */
    public static final GroupLayout first$layout() {
        return first$LAYOUT;
    }

    private static final long first$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * } first
     * }
     */
    public static final long first$offset() {
        return first$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * } first
     * }
     */
    public static MemorySegment first(MemorySegment struct) {
        return struct.asSlice(first$OFFSET, first$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * } first
     * }
     */
    public static void first(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, first$OFFSET, first$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * }
     * }
     */
    public static class second {

        second() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            jolt.C_INT.withName("body_id"),
            jolt.C_INT.withName("sub_shape_id")
        ).withName("$anon$518:5");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfInt body_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("body_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * JPC_BodyID body_id
         * }
         */
        public static final OfInt body_id$layout() {
            return body_id$LAYOUT;
        }

        private static final long body_id$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * JPC_BodyID body_id
         * }
         */
        public static final long body_id$offset() {
            return body_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * JPC_BodyID body_id
         * }
         */
        public static int body_id(MemorySegment struct) {
            return struct.get(body_id$LAYOUT, body_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * JPC_BodyID body_id
         * }
         */
        public static void body_id(MemorySegment struct, int fieldValue) {
            struct.set(body_id$LAYOUT, body_id$OFFSET, fieldValue);
        }

        private static final OfInt sub_shape_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sub_shape_id"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * JPC_SubShapeID sub_shape_id
         * }
         */
        public static final OfInt sub_shape_id$layout() {
            return sub_shape_id$LAYOUT;
        }

        private static final long sub_shape_id$OFFSET = 4;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * JPC_SubShapeID sub_shape_id
         * }
         */
        public static final long sub_shape_id$offset() {
            return sub_shape_id$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * JPC_SubShapeID sub_shape_id
         * }
         */
        public static int sub_shape_id(MemorySegment struct) {
            return struct.get(sub_shape_id$LAYOUT, sub_shape_id$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * JPC_SubShapeID sub_shape_id
         * }
         */
        public static void sub_shape_id(MemorySegment struct, int fieldValue) {
            struct.set(sub_shape_id$LAYOUT, sub_shape_id$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout second$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("second"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * } second
     * }
     */
    public static final GroupLayout second$layout() {
        return second$LAYOUT;
    }

    private static final long second$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * } second
     * }
     */
    public static final long second$offset() {
        return second$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * } second
     * }
     */
    public static MemorySegment second(MemorySegment struct) {
        return struct.asSlice(second$OFFSET, second$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     JPC_BodyID body_id;
     *     JPC_SubShapeID sub_shape_id;
     * } second
     * }
     */
    public static void second(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, second$OFFSET, second$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

