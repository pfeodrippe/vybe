// Generated by jextract

package org.vybe.jolt;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class jolt extends jolt_1 {

    jolt() {
        // Should not be called directly
    }

    private static class JPC_SphereShapeSettings_SetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_SphereShapeSettings_SetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_SphereShapeSettings_SetRadius(JPC_SphereShapeSettings *in_settings, float in_radius)
     * }
     */
    public static FunctionDescriptor JPC_SphereShapeSettings_SetRadius$descriptor() {
        return JPC_SphereShapeSettings_SetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_SphereShapeSettings_SetRadius(JPC_SphereShapeSettings *in_settings, float in_radius)
     * }
     */
    public static MethodHandle JPC_SphereShapeSettings_SetRadius$handle() {
        return JPC_SphereShapeSettings_SetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_SphereShapeSettings_SetRadius(JPC_SphereShapeSettings *in_settings, float in_radius)
     * }
     */
    public static MemorySegment JPC_SphereShapeSettings_SetRadius$address() {
        return JPC_SphereShapeSettings_SetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_SphereShapeSettings_SetRadius(JPC_SphereShapeSettings *in_settings, float in_radius)
     * }
     */
    public static void JPC_SphereShapeSettings_SetRadius(MemorySegment in_settings, float in_radius) {
        var mh$ = JPC_SphereShapeSettings_SetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_SphereShapeSettings_SetRadius", in_settings, in_radius);
            }
            mh$.invokeExact(in_settings, in_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TriangleShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TriangleShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_TriangleShapeSettings *JPC_TriangleShapeSettings_Create(const float in_v1[3], const float in_v2[3], const float in_v3[3])
     * }
     */
    public static FunctionDescriptor JPC_TriangleShapeSettings_Create$descriptor() {
        return JPC_TriangleShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_TriangleShapeSettings *JPC_TriangleShapeSettings_Create(const float in_v1[3], const float in_v2[3], const float in_v3[3])
     * }
     */
    public static MethodHandle JPC_TriangleShapeSettings_Create$handle() {
        return JPC_TriangleShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_TriangleShapeSettings *JPC_TriangleShapeSettings_Create(const float in_v1[3], const float in_v2[3], const float in_v3[3])
     * }
     */
    public static MemorySegment JPC_TriangleShapeSettings_Create$address() {
        return JPC_TriangleShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_TriangleShapeSettings *JPC_TriangleShapeSettings_Create(const float in_v1[3], const float in_v2[3], const float in_v3[3])
     * }
     */
    public static MemorySegment JPC_TriangleShapeSettings_Create(MemorySegment in_v1, MemorySegment in_v2, MemorySegment in_v3) {
        var mh$ = JPC_TriangleShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TriangleShapeSettings_Create", in_v1, in_v2, in_v3);
            }
            return (MemorySegment)mh$.invokeExact(in_v1, in_v2, in_v3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TriangleShapeSettings_SetVertices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TriangleShapeSettings_SetVertices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_SetVertices(JPC_TriangleShapeSettings *in_settings, const float in_v1[3], const float in_v2[3], const float in_v3[3])
     * }
     */
    public static FunctionDescriptor JPC_TriangleShapeSettings_SetVertices$descriptor() {
        return JPC_TriangleShapeSettings_SetVertices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_SetVertices(JPC_TriangleShapeSettings *in_settings, const float in_v1[3], const float in_v2[3], const float in_v3[3])
     * }
     */
    public static MethodHandle JPC_TriangleShapeSettings_SetVertices$handle() {
        return JPC_TriangleShapeSettings_SetVertices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_SetVertices(JPC_TriangleShapeSettings *in_settings, const float in_v1[3], const float in_v2[3], const float in_v3[3])
     * }
     */
    public static MemorySegment JPC_TriangleShapeSettings_SetVertices$address() {
        return JPC_TriangleShapeSettings_SetVertices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_SetVertices(JPC_TriangleShapeSettings *in_settings, const float in_v1[3], const float in_v2[3], const float in_v3[3])
     * }
     */
    public static void JPC_TriangleShapeSettings_SetVertices(MemorySegment in_settings, MemorySegment in_v1, MemorySegment in_v2, MemorySegment in_v3) {
        var mh$ = JPC_TriangleShapeSettings_SetVertices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TriangleShapeSettings_SetVertices", in_settings, in_v1, in_v2, in_v3);
            }
            mh$.invokeExact(in_settings, in_v1, in_v2, in_v3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TriangleShapeSettings_GetVertices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TriangleShapeSettings_GetVertices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_GetVertices(const JPC_TriangleShapeSettings *in_settings, float out_v1[3], float out_v2[3], float out_v3[3])
     * }
     */
    public static FunctionDescriptor JPC_TriangleShapeSettings_GetVertices$descriptor() {
        return JPC_TriangleShapeSettings_GetVertices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_GetVertices(const JPC_TriangleShapeSettings *in_settings, float out_v1[3], float out_v2[3], float out_v3[3])
     * }
     */
    public static MethodHandle JPC_TriangleShapeSettings_GetVertices$handle() {
        return JPC_TriangleShapeSettings_GetVertices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_GetVertices(const JPC_TriangleShapeSettings *in_settings, float out_v1[3], float out_v2[3], float out_v3[3])
     * }
     */
    public static MemorySegment JPC_TriangleShapeSettings_GetVertices$address() {
        return JPC_TriangleShapeSettings_GetVertices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_GetVertices(const JPC_TriangleShapeSettings *in_settings, float out_v1[3], float out_v2[3], float out_v3[3])
     * }
     */
    public static void JPC_TriangleShapeSettings_GetVertices(MemorySegment in_settings, MemorySegment out_v1, MemorySegment out_v2, MemorySegment out_v3) {
        var mh$ = JPC_TriangleShapeSettings_GetVertices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TriangleShapeSettings_GetVertices", in_settings, out_v1, out_v2, out_v3);
            }
            mh$.invokeExact(in_settings, out_v1, out_v2, out_v3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TriangleShapeSettings_GetConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TriangleShapeSettings_GetConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_TriangleShapeSettings_GetConvexRadius(const JPC_TriangleShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_TriangleShapeSettings_GetConvexRadius$descriptor() {
        return JPC_TriangleShapeSettings_GetConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_TriangleShapeSettings_GetConvexRadius(const JPC_TriangleShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_TriangleShapeSettings_GetConvexRadius$handle() {
        return JPC_TriangleShapeSettings_GetConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_TriangleShapeSettings_GetConvexRadius(const JPC_TriangleShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_TriangleShapeSettings_GetConvexRadius$address() {
        return JPC_TriangleShapeSettings_GetConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_TriangleShapeSettings_GetConvexRadius(const JPC_TriangleShapeSettings *in_settings)
     * }
     */
    public static float JPC_TriangleShapeSettings_GetConvexRadius(MemorySegment in_settings) {
        var mh$ = JPC_TriangleShapeSettings_GetConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TriangleShapeSettings_GetConvexRadius", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TriangleShapeSettings_SetConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TriangleShapeSettings_SetConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_SetConvexRadius(JPC_TriangleShapeSettings *in_settings, float in_convex_radius)
     * }
     */
    public static FunctionDescriptor JPC_TriangleShapeSettings_SetConvexRadius$descriptor() {
        return JPC_TriangleShapeSettings_SetConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_SetConvexRadius(JPC_TriangleShapeSettings *in_settings, float in_convex_radius)
     * }
     */
    public static MethodHandle JPC_TriangleShapeSettings_SetConvexRadius$handle() {
        return JPC_TriangleShapeSettings_SetConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_SetConvexRadius(JPC_TriangleShapeSettings *in_settings, float in_convex_radius)
     * }
     */
    public static MemorySegment JPC_TriangleShapeSettings_SetConvexRadius$address() {
        return JPC_TriangleShapeSettings_SetConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_TriangleShapeSettings_SetConvexRadius(JPC_TriangleShapeSettings *in_settings, float in_convex_radius)
     * }
     */
    public static void JPC_TriangleShapeSettings_SetConvexRadius(MemorySegment in_settings, float in_convex_radius) {
        var mh$ = JPC_TriangleShapeSettings_SetConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TriangleShapeSettings_SetConvexRadius", in_settings, in_convex_radius);
            }
            mh$.invokeExact(in_settings, in_convex_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CapsuleShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_FLOAT,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CapsuleShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_CapsuleShapeSettings *JPC_CapsuleShapeSettings_Create(float in_half_height_of_cylinder, float in_radius)
     * }
     */
    public static FunctionDescriptor JPC_CapsuleShapeSettings_Create$descriptor() {
        return JPC_CapsuleShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_CapsuleShapeSettings *JPC_CapsuleShapeSettings_Create(float in_half_height_of_cylinder, float in_radius)
     * }
     */
    public static MethodHandle JPC_CapsuleShapeSettings_Create$handle() {
        return JPC_CapsuleShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_CapsuleShapeSettings *JPC_CapsuleShapeSettings_Create(float in_half_height_of_cylinder, float in_radius)
     * }
     */
    public static MemorySegment JPC_CapsuleShapeSettings_Create$address() {
        return JPC_CapsuleShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_CapsuleShapeSettings *JPC_CapsuleShapeSettings_Create(float in_half_height_of_cylinder, float in_radius)
     * }
     */
    public static MemorySegment JPC_CapsuleShapeSettings_Create(float in_half_height_of_cylinder, float in_radius) {
        var mh$ = JPC_CapsuleShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CapsuleShapeSettings_Create", in_half_height_of_cylinder, in_radius);
            }
            return (MemorySegment)mh$.invokeExact(in_half_height_of_cylinder, in_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CapsuleShapeSettings_GetHalfHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CapsuleShapeSettings_GetHalfHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_CapsuleShapeSettings_GetHalfHeight(const JPC_CapsuleShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_CapsuleShapeSettings_GetHalfHeight$descriptor() {
        return JPC_CapsuleShapeSettings_GetHalfHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_CapsuleShapeSettings_GetHalfHeight(const JPC_CapsuleShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_CapsuleShapeSettings_GetHalfHeight$handle() {
        return JPC_CapsuleShapeSettings_GetHalfHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_CapsuleShapeSettings_GetHalfHeight(const JPC_CapsuleShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_CapsuleShapeSettings_GetHalfHeight$address() {
        return JPC_CapsuleShapeSettings_GetHalfHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_CapsuleShapeSettings_GetHalfHeight(const JPC_CapsuleShapeSettings *in_settings)
     * }
     */
    public static float JPC_CapsuleShapeSettings_GetHalfHeight(MemorySegment in_settings) {
        var mh$ = JPC_CapsuleShapeSettings_GetHalfHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CapsuleShapeSettings_GetHalfHeight", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CapsuleShapeSettings_SetHalfHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CapsuleShapeSettings_SetHalfHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CapsuleShapeSettings_SetHalfHeight(JPC_CapsuleShapeSettings *in_settings, float in_half_height_of_cylinder)
     * }
     */
    public static FunctionDescriptor JPC_CapsuleShapeSettings_SetHalfHeight$descriptor() {
        return JPC_CapsuleShapeSettings_SetHalfHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CapsuleShapeSettings_SetHalfHeight(JPC_CapsuleShapeSettings *in_settings, float in_half_height_of_cylinder)
     * }
     */
    public static MethodHandle JPC_CapsuleShapeSettings_SetHalfHeight$handle() {
        return JPC_CapsuleShapeSettings_SetHalfHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CapsuleShapeSettings_SetHalfHeight(JPC_CapsuleShapeSettings *in_settings, float in_half_height_of_cylinder)
     * }
     */
    public static MemorySegment JPC_CapsuleShapeSettings_SetHalfHeight$address() {
        return JPC_CapsuleShapeSettings_SetHalfHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CapsuleShapeSettings_SetHalfHeight(JPC_CapsuleShapeSettings *in_settings, float in_half_height_of_cylinder)
     * }
     */
    public static void JPC_CapsuleShapeSettings_SetHalfHeight(MemorySegment in_settings, float in_half_height_of_cylinder) {
        var mh$ = JPC_CapsuleShapeSettings_SetHalfHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CapsuleShapeSettings_SetHalfHeight", in_settings, in_half_height_of_cylinder);
            }
            mh$.invokeExact(in_settings, in_half_height_of_cylinder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CapsuleShapeSettings_GetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CapsuleShapeSettings_GetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_CapsuleShapeSettings_GetRadius(const JPC_CapsuleShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_CapsuleShapeSettings_GetRadius$descriptor() {
        return JPC_CapsuleShapeSettings_GetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_CapsuleShapeSettings_GetRadius(const JPC_CapsuleShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_CapsuleShapeSettings_GetRadius$handle() {
        return JPC_CapsuleShapeSettings_GetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_CapsuleShapeSettings_GetRadius(const JPC_CapsuleShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_CapsuleShapeSettings_GetRadius$address() {
        return JPC_CapsuleShapeSettings_GetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_CapsuleShapeSettings_GetRadius(const JPC_CapsuleShapeSettings *in_settings)
     * }
     */
    public static float JPC_CapsuleShapeSettings_GetRadius(MemorySegment in_settings) {
        var mh$ = JPC_CapsuleShapeSettings_GetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CapsuleShapeSettings_GetRadius", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CapsuleShapeSettings_SetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CapsuleShapeSettings_SetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CapsuleShapeSettings_SetRadius(JPC_CapsuleShapeSettings *in_settings, float in_radius)
     * }
     */
    public static FunctionDescriptor JPC_CapsuleShapeSettings_SetRadius$descriptor() {
        return JPC_CapsuleShapeSettings_SetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CapsuleShapeSettings_SetRadius(JPC_CapsuleShapeSettings *in_settings, float in_radius)
     * }
     */
    public static MethodHandle JPC_CapsuleShapeSettings_SetRadius$handle() {
        return JPC_CapsuleShapeSettings_SetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CapsuleShapeSettings_SetRadius(JPC_CapsuleShapeSettings *in_settings, float in_radius)
     * }
     */
    public static MemorySegment JPC_CapsuleShapeSettings_SetRadius$address() {
        return JPC_CapsuleShapeSettings_SetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CapsuleShapeSettings_SetRadius(JPC_CapsuleShapeSettings *in_settings, float in_radius)
     * }
     */
    public static void JPC_CapsuleShapeSettings_SetRadius(MemorySegment in_settings, float in_radius) {
        var mh$ = JPC_CapsuleShapeSettings_SetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CapsuleShapeSettings_SetRadius", in_settings, in_radius);
            }
            mh$.invokeExact(in_settings, in_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TaperedCapsuleShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_FLOAT,
            jolt.C_FLOAT,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TaperedCapsuleShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_TaperedCapsuleShapeSettings *JPC_TaperedCapsuleShapeSettings_Create(float in_half_height, float in_top_radius, float in_bottom_radius)
     * }
     */
    public static FunctionDescriptor JPC_TaperedCapsuleShapeSettings_Create$descriptor() {
        return JPC_TaperedCapsuleShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_TaperedCapsuleShapeSettings *JPC_TaperedCapsuleShapeSettings_Create(float in_half_height, float in_top_radius, float in_bottom_radius)
     * }
     */
    public static MethodHandle JPC_TaperedCapsuleShapeSettings_Create$handle() {
        return JPC_TaperedCapsuleShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_TaperedCapsuleShapeSettings *JPC_TaperedCapsuleShapeSettings_Create(float in_half_height, float in_top_radius, float in_bottom_radius)
     * }
     */
    public static MemorySegment JPC_TaperedCapsuleShapeSettings_Create$address() {
        return JPC_TaperedCapsuleShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_TaperedCapsuleShapeSettings *JPC_TaperedCapsuleShapeSettings_Create(float in_half_height, float in_top_radius, float in_bottom_radius)
     * }
     */
    public static MemorySegment JPC_TaperedCapsuleShapeSettings_Create(float in_half_height, float in_top_radius, float in_bottom_radius) {
        var mh$ = JPC_TaperedCapsuleShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TaperedCapsuleShapeSettings_Create", in_half_height, in_top_radius, in_bottom_radius);
            }
            return (MemorySegment)mh$.invokeExact(in_half_height, in_top_radius, in_bottom_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TaperedCapsuleShapeSettings_GetHalfHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TaperedCapsuleShapeSettings_GetHalfHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetHalfHeight(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_TaperedCapsuleShapeSettings_GetHalfHeight$descriptor() {
        return JPC_TaperedCapsuleShapeSettings_GetHalfHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetHalfHeight(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_TaperedCapsuleShapeSettings_GetHalfHeight$handle() {
        return JPC_TaperedCapsuleShapeSettings_GetHalfHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetHalfHeight(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_TaperedCapsuleShapeSettings_GetHalfHeight$address() {
        return JPC_TaperedCapsuleShapeSettings_GetHalfHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetHalfHeight(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static float JPC_TaperedCapsuleShapeSettings_GetHalfHeight(MemorySegment in_settings) {
        var mh$ = JPC_TaperedCapsuleShapeSettings_GetHalfHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TaperedCapsuleShapeSettings_GetHalfHeight", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TaperedCapsuleShapeSettings_SetHalfHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TaperedCapsuleShapeSettings_SetHalfHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetHalfHeight(JPC_TaperedCapsuleShapeSettings *in_settings, float in_half_height)
     * }
     */
    public static FunctionDescriptor JPC_TaperedCapsuleShapeSettings_SetHalfHeight$descriptor() {
        return JPC_TaperedCapsuleShapeSettings_SetHalfHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetHalfHeight(JPC_TaperedCapsuleShapeSettings *in_settings, float in_half_height)
     * }
     */
    public static MethodHandle JPC_TaperedCapsuleShapeSettings_SetHalfHeight$handle() {
        return JPC_TaperedCapsuleShapeSettings_SetHalfHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetHalfHeight(JPC_TaperedCapsuleShapeSettings *in_settings, float in_half_height)
     * }
     */
    public static MemorySegment JPC_TaperedCapsuleShapeSettings_SetHalfHeight$address() {
        return JPC_TaperedCapsuleShapeSettings_SetHalfHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetHalfHeight(JPC_TaperedCapsuleShapeSettings *in_settings, float in_half_height)
     * }
     */
    public static void JPC_TaperedCapsuleShapeSettings_SetHalfHeight(MemorySegment in_settings, float in_half_height) {
        var mh$ = JPC_TaperedCapsuleShapeSettings_SetHalfHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TaperedCapsuleShapeSettings_SetHalfHeight", in_settings, in_half_height);
            }
            mh$.invokeExact(in_settings, in_half_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TaperedCapsuleShapeSettings_GetTopRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TaperedCapsuleShapeSettings_GetTopRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetTopRadius(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_TaperedCapsuleShapeSettings_GetTopRadius$descriptor() {
        return JPC_TaperedCapsuleShapeSettings_GetTopRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetTopRadius(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_TaperedCapsuleShapeSettings_GetTopRadius$handle() {
        return JPC_TaperedCapsuleShapeSettings_GetTopRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetTopRadius(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_TaperedCapsuleShapeSettings_GetTopRadius$address() {
        return JPC_TaperedCapsuleShapeSettings_GetTopRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetTopRadius(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static float JPC_TaperedCapsuleShapeSettings_GetTopRadius(MemorySegment in_settings) {
        var mh$ = JPC_TaperedCapsuleShapeSettings_GetTopRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TaperedCapsuleShapeSettings_GetTopRadius", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TaperedCapsuleShapeSettings_SetTopRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TaperedCapsuleShapeSettings_SetTopRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetTopRadius(JPC_TaperedCapsuleShapeSettings *in_settings, float in_top_radius)
     * }
     */
    public static FunctionDescriptor JPC_TaperedCapsuleShapeSettings_SetTopRadius$descriptor() {
        return JPC_TaperedCapsuleShapeSettings_SetTopRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetTopRadius(JPC_TaperedCapsuleShapeSettings *in_settings, float in_top_radius)
     * }
     */
    public static MethodHandle JPC_TaperedCapsuleShapeSettings_SetTopRadius$handle() {
        return JPC_TaperedCapsuleShapeSettings_SetTopRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetTopRadius(JPC_TaperedCapsuleShapeSettings *in_settings, float in_top_radius)
     * }
     */
    public static MemorySegment JPC_TaperedCapsuleShapeSettings_SetTopRadius$address() {
        return JPC_TaperedCapsuleShapeSettings_SetTopRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetTopRadius(JPC_TaperedCapsuleShapeSettings *in_settings, float in_top_radius)
     * }
     */
    public static void JPC_TaperedCapsuleShapeSettings_SetTopRadius(MemorySegment in_settings, float in_top_radius) {
        var mh$ = JPC_TaperedCapsuleShapeSettings_SetTopRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TaperedCapsuleShapeSettings_SetTopRadius", in_settings, in_top_radius);
            }
            mh$.invokeExact(in_settings, in_top_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TaperedCapsuleShapeSettings_GetBottomRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TaperedCapsuleShapeSettings_GetBottomRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetBottomRadius(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_TaperedCapsuleShapeSettings_GetBottomRadius$descriptor() {
        return JPC_TaperedCapsuleShapeSettings_GetBottomRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetBottomRadius(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_TaperedCapsuleShapeSettings_GetBottomRadius$handle() {
        return JPC_TaperedCapsuleShapeSettings_GetBottomRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetBottomRadius(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_TaperedCapsuleShapeSettings_GetBottomRadius$address() {
        return JPC_TaperedCapsuleShapeSettings_GetBottomRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_TaperedCapsuleShapeSettings_GetBottomRadius(const JPC_TaperedCapsuleShapeSettings *in_settings)
     * }
     */
    public static float JPC_TaperedCapsuleShapeSettings_GetBottomRadius(MemorySegment in_settings) {
        var mh$ = JPC_TaperedCapsuleShapeSettings_GetBottomRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TaperedCapsuleShapeSettings_GetBottomRadius", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TaperedCapsuleShapeSettings_SetBottomRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TaperedCapsuleShapeSettings_SetBottomRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetBottomRadius(JPC_TaperedCapsuleShapeSettings *in_settings, float in_bottom_radius)
     * }
     */
    public static FunctionDescriptor JPC_TaperedCapsuleShapeSettings_SetBottomRadius$descriptor() {
        return JPC_TaperedCapsuleShapeSettings_SetBottomRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetBottomRadius(JPC_TaperedCapsuleShapeSettings *in_settings, float in_bottom_radius)
     * }
     */
    public static MethodHandle JPC_TaperedCapsuleShapeSettings_SetBottomRadius$handle() {
        return JPC_TaperedCapsuleShapeSettings_SetBottomRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetBottomRadius(JPC_TaperedCapsuleShapeSettings *in_settings, float in_bottom_radius)
     * }
     */
    public static MemorySegment JPC_TaperedCapsuleShapeSettings_SetBottomRadius$address() {
        return JPC_TaperedCapsuleShapeSettings_SetBottomRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_TaperedCapsuleShapeSettings_SetBottomRadius(JPC_TaperedCapsuleShapeSettings *in_settings, float in_bottom_radius)
     * }
     */
    public static void JPC_TaperedCapsuleShapeSettings_SetBottomRadius(MemorySegment in_settings, float in_bottom_radius) {
        var mh$ = JPC_TaperedCapsuleShapeSettings_SetBottomRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TaperedCapsuleShapeSettings_SetBottomRadius", in_settings, in_bottom_radius);
            }
            mh$.invokeExact(in_settings, in_bottom_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CylinderShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_FLOAT,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CylinderShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_CylinderShapeSettings *JPC_CylinderShapeSettings_Create(float in_half_height, float in_radius)
     * }
     */
    public static FunctionDescriptor JPC_CylinderShapeSettings_Create$descriptor() {
        return JPC_CylinderShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_CylinderShapeSettings *JPC_CylinderShapeSettings_Create(float in_half_height, float in_radius)
     * }
     */
    public static MethodHandle JPC_CylinderShapeSettings_Create$handle() {
        return JPC_CylinderShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_CylinderShapeSettings *JPC_CylinderShapeSettings_Create(float in_half_height, float in_radius)
     * }
     */
    public static MemorySegment JPC_CylinderShapeSettings_Create$address() {
        return JPC_CylinderShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_CylinderShapeSettings *JPC_CylinderShapeSettings_Create(float in_half_height, float in_radius)
     * }
     */
    public static MemorySegment JPC_CylinderShapeSettings_Create(float in_half_height, float in_radius) {
        var mh$ = JPC_CylinderShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CylinderShapeSettings_Create", in_half_height, in_radius);
            }
            return (MemorySegment)mh$.invokeExact(in_half_height, in_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CylinderShapeSettings_GetConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CylinderShapeSettings_GetConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetConvexRadius(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_CylinderShapeSettings_GetConvexRadius$descriptor() {
        return JPC_CylinderShapeSettings_GetConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetConvexRadius(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_CylinderShapeSettings_GetConvexRadius$handle() {
        return JPC_CylinderShapeSettings_GetConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetConvexRadius(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_CylinderShapeSettings_GetConvexRadius$address() {
        return JPC_CylinderShapeSettings_GetConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetConvexRadius(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static float JPC_CylinderShapeSettings_GetConvexRadius(MemorySegment in_settings) {
        var mh$ = JPC_CylinderShapeSettings_GetConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CylinderShapeSettings_GetConvexRadius", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CylinderShapeSettings_SetConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CylinderShapeSettings_SetConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetConvexRadius(JPC_CylinderShapeSettings *in_settings, float in_convex_radius)
     * }
     */
    public static FunctionDescriptor JPC_CylinderShapeSettings_SetConvexRadius$descriptor() {
        return JPC_CylinderShapeSettings_SetConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetConvexRadius(JPC_CylinderShapeSettings *in_settings, float in_convex_radius)
     * }
     */
    public static MethodHandle JPC_CylinderShapeSettings_SetConvexRadius$handle() {
        return JPC_CylinderShapeSettings_SetConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetConvexRadius(JPC_CylinderShapeSettings *in_settings, float in_convex_radius)
     * }
     */
    public static MemorySegment JPC_CylinderShapeSettings_SetConvexRadius$address() {
        return JPC_CylinderShapeSettings_SetConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetConvexRadius(JPC_CylinderShapeSettings *in_settings, float in_convex_radius)
     * }
     */
    public static void JPC_CylinderShapeSettings_SetConvexRadius(MemorySegment in_settings, float in_convex_radius) {
        var mh$ = JPC_CylinderShapeSettings_SetConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CylinderShapeSettings_SetConvexRadius", in_settings, in_convex_radius);
            }
            mh$.invokeExact(in_settings, in_convex_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CylinderShapeSettings_GetHalfHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CylinderShapeSettings_GetHalfHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetHalfHeight(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_CylinderShapeSettings_GetHalfHeight$descriptor() {
        return JPC_CylinderShapeSettings_GetHalfHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetHalfHeight(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_CylinderShapeSettings_GetHalfHeight$handle() {
        return JPC_CylinderShapeSettings_GetHalfHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetHalfHeight(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_CylinderShapeSettings_GetHalfHeight$address() {
        return JPC_CylinderShapeSettings_GetHalfHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetHalfHeight(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static float JPC_CylinderShapeSettings_GetHalfHeight(MemorySegment in_settings) {
        var mh$ = JPC_CylinderShapeSettings_GetHalfHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CylinderShapeSettings_GetHalfHeight", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CylinderShapeSettings_SetHalfHeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CylinderShapeSettings_SetHalfHeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetHalfHeight(JPC_CylinderShapeSettings *in_settings, float in_half_height)
     * }
     */
    public static FunctionDescriptor JPC_CylinderShapeSettings_SetHalfHeight$descriptor() {
        return JPC_CylinderShapeSettings_SetHalfHeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetHalfHeight(JPC_CylinderShapeSettings *in_settings, float in_half_height)
     * }
     */
    public static MethodHandle JPC_CylinderShapeSettings_SetHalfHeight$handle() {
        return JPC_CylinderShapeSettings_SetHalfHeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetHalfHeight(JPC_CylinderShapeSettings *in_settings, float in_half_height)
     * }
     */
    public static MemorySegment JPC_CylinderShapeSettings_SetHalfHeight$address() {
        return JPC_CylinderShapeSettings_SetHalfHeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetHalfHeight(JPC_CylinderShapeSettings *in_settings, float in_half_height)
     * }
     */
    public static void JPC_CylinderShapeSettings_SetHalfHeight(MemorySegment in_settings, float in_half_height) {
        var mh$ = JPC_CylinderShapeSettings_SetHalfHeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CylinderShapeSettings_SetHalfHeight", in_settings, in_half_height);
            }
            mh$.invokeExact(in_settings, in_half_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CylinderShapeSettings_GetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CylinderShapeSettings_GetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetRadius(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_CylinderShapeSettings_GetRadius$descriptor() {
        return JPC_CylinderShapeSettings_GetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetRadius(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_CylinderShapeSettings_GetRadius$handle() {
        return JPC_CylinderShapeSettings_GetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetRadius(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_CylinderShapeSettings_GetRadius$address() {
        return JPC_CylinderShapeSettings_GetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_CylinderShapeSettings_GetRadius(const JPC_CylinderShapeSettings *in_settings)
     * }
     */
    public static float JPC_CylinderShapeSettings_GetRadius(MemorySegment in_settings) {
        var mh$ = JPC_CylinderShapeSettings_GetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CylinderShapeSettings_GetRadius", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CylinderShapeSettings_SetRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CylinderShapeSettings_SetRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetRadius(JPC_CylinderShapeSettings *in_settings, float in_radius)
     * }
     */
    public static FunctionDescriptor JPC_CylinderShapeSettings_SetRadius$descriptor() {
        return JPC_CylinderShapeSettings_SetRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetRadius(JPC_CylinderShapeSettings *in_settings, float in_radius)
     * }
     */
    public static MethodHandle JPC_CylinderShapeSettings_SetRadius$handle() {
        return JPC_CylinderShapeSettings_SetRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetRadius(JPC_CylinderShapeSettings *in_settings, float in_radius)
     * }
     */
    public static MemorySegment JPC_CylinderShapeSettings_SetRadius$address() {
        return JPC_CylinderShapeSettings_SetRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CylinderShapeSettings_SetRadius(JPC_CylinderShapeSettings *in_settings, float in_radius)
     * }
     */
    public static void JPC_CylinderShapeSettings_SetRadius(MemorySegment in_settings, float in_radius) {
        var mh$ = JPC_CylinderShapeSettings_SetRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CylinderShapeSettings_SetRadius", in_settings, in_radius);
            }
            mh$.invokeExact(in_settings, in_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_ConvexHullShapeSettings *JPC_ConvexHullShapeSettings_Create(const void *in_vertices, uint32_t in_num_vertices, uint32_t in_vertex_size)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShapeSettings_Create$descriptor() {
        return JPC_ConvexHullShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_ConvexHullShapeSettings *JPC_ConvexHullShapeSettings_Create(const void *in_vertices, uint32_t in_num_vertices, uint32_t in_vertex_size)
     * }
     */
    public static MethodHandle JPC_ConvexHullShapeSettings_Create$handle() {
        return JPC_ConvexHullShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_ConvexHullShapeSettings *JPC_ConvexHullShapeSettings_Create(const void *in_vertices, uint32_t in_num_vertices, uint32_t in_vertex_size)
     * }
     */
    public static MemorySegment JPC_ConvexHullShapeSettings_Create$address() {
        return JPC_ConvexHullShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_ConvexHullShapeSettings *JPC_ConvexHullShapeSettings_Create(const void *in_vertices, uint32_t in_num_vertices, uint32_t in_vertex_size)
     * }
     */
    public static MemorySegment JPC_ConvexHullShapeSettings_Create(MemorySegment in_vertices, int in_num_vertices, int in_vertex_size) {
        var mh$ = JPC_ConvexHullShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShapeSettings_Create", in_vertices, in_num_vertices, in_vertex_size);
            }
            return (MemorySegment)mh$.invokeExact(in_vertices, in_num_vertices, in_vertex_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShapeSettings_GetMaxConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShapeSettings_GetMaxConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetMaxConvexRadius(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShapeSettings_GetMaxConvexRadius$descriptor() {
        return JPC_ConvexHullShapeSettings_GetMaxConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetMaxConvexRadius(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_ConvexHullShapeSettings_GetMaxConvexRadius$handle() {
        return JPC_ConvexHullShapeSettings_GetMaxConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetMaxConvexRadius(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_ConvexHullShapeSettings_GetMaxConvexRadius$address() {
        return JPC_ConvexHullShapeSettings_GetMaxConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetMaxConvexRadius(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static float JPC_ConvexHullShapeSettings_GetMaxConvexRadius(MemorySegment in_settings) {
        var mh$ = JPC_ConvexHullShapeSettings_GetMaxConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShapeSettings_GetMaxConvexRadius", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShapeSettings_SetMaxConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShapeSettings_SetMaxConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetMaxConvexRadius(JPC_ConvexHullShapeSettings *in_settings, float in_max_convex_radius)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShapeSettings_SetMaxConvexRadius$descriptor() {
        return JPC_ConvexHullShapeSettings_SetMaxConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetMaxConvexRadius(JPC_ConvexHullShapeSettings *in_settings, float in_max_convex_radius)
     * }
     */
    public static MethodHandle JPC_ConvexHullShapeSettings_SetMaxConvexRadius$handle() {
        return JPC_ConvexHullShapeSettings_SetMaxConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetMaxConvexRadius(JPC_ConvexHullShapeSettings *in_settings, float in_max_convex_radius)
     * }
     */
    public static MemorySegment JPC_ConvexHullShapeSettings_SetMaxConvexRadius$address() {
        return JPC_ConvexHullShapeSettings_SetMaxConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetMaxConvexRadius(JPC_ConvexHullShapeSettings *in_settings, float in_max_convex_radius)
     * }
     */
    public static void JPC_ConvexHullShapeSettings_SetMaxConvexRadius(MemorySegment in_settings, float in_max_convex_radius) {
        var mh$ = JPC_ConvexHullShapeSettings_SetMaxConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShapeSettings_SetMaxConvexRadius", in_settings, in_max_convex_radius);
            }
            mh$.invokeExact(in_settings, in_max_convex_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius$descriptor() {
        return JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius$handle() {
        return JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius$address() {
        return JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static float JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius(MemorySegment in_settings) {
        var mh$ = JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShapeSettings_GetMaxErrorConvexRadius", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius(JPC_ConvexHullShapeSettings *in_settings, float in_max_err_convex_radius)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius$descriptor() {
        return JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius(JPC_ConvexHullShapeSettings *in_settings, float in_max_err_convex_radius)
     * }
     */
    public static MethodHandle JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius$handle() {
        return JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius(JPC_ConvexHullShapeSettings *in_settings, float in_max_err_convex_radius)
     * }
     */
    public static MemorySegment JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius$address() {
        return JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius(JPC_ConvexHullShapeSettings *in_settings, float in_max_err_convex_radius)
     * }
     */
    public static void JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius(MemorySegment in_settings, float in_max_err_convex_radius) {
        var mh$ = JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShapeSettings_SetMaxErrorConvexRadius", in_settings, in_max_err_convex_radius);
            }
            mh$.invokeExact(in_settings, in_max_err_convex_radius);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShapeSettings_GetHullTolerance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShapeSettings_GetHullTolerance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetHullTolerance(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShapeSettings_GetHullTolerance$descriptor() {
        return JPC_ConvexHullShapeSettings_GetHullTolerance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetHullTolerance(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_ConvexHullShapeSettings_GetHullTolerance$handle() {
        return JPC_ConvexHullShapeSettings_GetHullTolerance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetHullTolerance(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_ConvexHullShapeSettings_GetHullTolerance$address() {
        return JPC_ConvexHullShapeSettings_GetHullTolerance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_ConvexHullShapeSettings_GetHullTolerance(const JPC_ConvexHullShapeSettings *in_settings)
     * }
     */
    public static float JPC_ConvexHullShapeSettings_GetHullTolerance(MemorySegment in_settings) {
        var mh$ = JPC_ConvexHullShapeSettings_GetHullTolerance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShapeSettings_GetHullTolerance", in_settings);
            }
            return (float)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShapeSettings_SetHullTolerance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShapeSettings_SetHullTolerance");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetHullTolerance(JPC_ConvexHullShapeSettings *in_settings, float in_hull_tolerance)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShapeSettings_SetHullTolerance$descriptor() {
        return JPC_ConvexHullShapeSettings_SetHullTolerance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetHullTolerance(JPC_ConvexHullShapeSettings *in_settings, float in_hull_tolerance)
     * }
     */
    public static MethodHandle JPC_ConvexHullShapeSettings_SetHullTolerance$handle() {
        return JPC_ConvexHullShapeSettings_SetHullTolerance.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetHullTolerance(JPC_ConvexHullShapeSettings *in_settings, float in_hull_tolerance)
     * }
     */
    public static MemorySegment JPC_ConvexHullShapeSettings_SetHullTolerance$address() {
        return JPC_ConvexHullShapeSettings_SetHullTolerance.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShapeSettings_SetHullTolerance(JPC_ConvexHullShapeSettings *in_settings, float in_hull_tolerance)
     * }
     */
    public static void JPC_ConvexHullShapeSettings_SetHullTolerance(MemorySegment in_settings, float in_hull_tolerance) {
        var mh$ = JPC_ConvexHullShapeSettings_SetHullTolerance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShapeSettings_SetHullTolerance", in_settings, in_hull_tolerance);
            }
            mh$.invokeExact(in_settings, in_hull_tolerance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_HeightFieldShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_HeightFieldShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_HeightFieldShapeSettings *JPC_HeightFieldShapeSettings_Create(const float *in_samples, uint32_t in_height_field_size)
     * }
     */
    public static FunctionDescriptor JPC_HeightFieldShapeSettings_Create$descriptor() {
        return JPC_HeightFieldShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_HeightFieldShapeSettings *JPC_HeightFieldShapeSettings_Create(const float *in_samples, uint32_t in_height_field_size)
     * }
     */
    public static MethodHandle JPC_HeightFieldShapeSettings_Create$handle() {
        return JPC_HeightFieldShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_HeightFieldShapeSettings *JPC_HeightFieldShapeSettings_Create(const float *in_samples, uint32_t in_height_field_size)
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_Create$address() {
        return JPC_HeightFieldShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_HeightFieldShapeSettings *JPC_HeightFieldShapeSettings_Create(const float *in_samples, uint32_t in_height_field_size)
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_Create(MemorySegment in_samples, int in_height_field_size) {
        var mh$ = JPC_HeightFieldShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_HeightFieldShapeSettings_Create", in_samples, in_height_field_size);
            }
            return (MemorySegment)mh$.invokeExact(in_samples, in_height_field_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_HeightFieldShapeSettings_GetOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_HeightFieldShapeSettings_GetOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_GetOffset(const JPC_HeightFieldShapeSettings *in_settings, float out_offset[3])
     * }
     */
    public static FunctionDescriptor JPC_HeightFieldShapeSettings_GetOffset$descriptor() {
        return JPC_HeightFieldShapeSettings_GetOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_GetOffset(const JPC_HeightFieldShapeSettings *in_settings, float out_offset[3])
     * }
     */
    public static MethodHandle JPC_HeightFieldShapeSettings_GetOffset$handle() {
        return JPC_HeightFieldShapeSettings_GetOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_GetOffset(const JPC_HeightFieldShapeSettings *in_settings, float out_offset[3])
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_GetOffset$address() {
        return JPC_HeightFieldShapeSettings_GetOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_GetOffset(const JPC_HeightFieldShapeSettings *in_settings, float out_offset[3])
     * }
     */
    public static void JPC_HeightFieldShapeSettings_GetOffset(MemorySegment in_settings, MemorySegment out_offset) {
        var mh$ = JPC_HeightFieldShapeSettings_GetOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_HeightFieldShapeSettings_GetOffset", in_settings, out_offset);
            }
            mh$.invokeExact(in_settings, out_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_HeightFieldShapeSettings_SetOffset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_HeightFieldShapeSettings_SetOffset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetOffset(JPC_HeightFieldShapeSettings *in_settings, const float in_offset[3])
     * }
     */
    public static FunctionDescriptor JPC_HeightFieldShapeSettings_SetOffset$descriptor() {
        return JPC_HeightFieldShapeSettings_SetOffset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetOffset(JPC_HeightFieldShapeSettings *in_settings, const float in_offset[3])
     * }
     */
    public static MethodHandle JPC_HeightFieldShapeSettings_SetOffset$handle() {
        return JPC_HeightFieldShapeSettings_SetOffset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetOffset(JPC_HeightFieldShapeSettings *in_settings, const float in_offset[3])
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_SetOffset$address() {
        return JPC_HeightFieldShapeSettings_SetOffset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetOffset(JPC_HeightFieldShapeSettings *in_settings, const float in_offset[3])
     * }
     */
    public static void JPC_HeightFieldShapeSettings_SetOffset(MemorySegment in_settings, MemorySegment in_offset) {
        var mh$ = JPC_HeightFieldShapeSettings_SetOffset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_HeightFieldShapeSettings_SetOffset", in_settings, in_offset);
            }
            mh$.invokeExact(in_settings, in_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_HeightFieldShapeSettings_GetScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_HeightFieldShapeSettings_GetScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_GetScale(const JPC_HeightFieldShapeSettings *in_settings, float out_scale[3])
     * }
     */
    public static FunctionDescriptor JPC_HeightFieldShapeSettings_GetScale$descriptor() {
        return JPC_HeightFieldShapeSettings_GetScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_GetScale(const JPC_HeightFieldShapeSettings *in_settings, float out_scale[3])
     * }
     */
    public static MethodHandle JPC_HeightFieldShapeSettings_GetScale$handle() {
        return JPC_HeightFieldShapeSettings_GetScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_GetScale(const JPC_HeightFieldShapeSettings *in_settings, float out_scale[3])
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_GetScale$address() {
        return JPC_HeightFieldShapeSettings_GetScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_GetScale(const JPC_HeightFieldShapeSettings *in_settings, float out_scale[3])
     * }
     */
    public static void JPC_HeightFieldShapeSettings_GetScale(MemorySegment in_settings, MemorySegment out_scale) {
        var mh$ = JPC_HeightFieldShapeSettings_GetScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_HeightFieldShapeSettings_GetScale", in_settings, out_scale);
            }
            mh$.invokeExact(in_settings, out_scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_HeightFieldShapeSettings_SetScale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_HeightFieldShapeSettings_SetScale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetScale(JPC_HeightFieldShapeSettings *in_settings, const float in_scale[3])
     * }
     */
    public static FunctionDescriptor JPC_HeightFieldShapeSettings_SetScale$descriptor() {
        return JPC_HeightFieldShapeSettings_SetScale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetScale(JPC_HeightFieldShapeSettings *in_settings, const float in_scale[3])
     * }
     */
    public static MethodHandle JPC_HeightFieldShapeSettings_SetScale$handle() {
        return JPC_HeightFieldShapeSettings_SetScale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetScale(JPC_HeightFieldShapeSettings *in_settings, const float in_scale[3])
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_SetScale$address() {
        return JPC_HeightFieldShapeSettings_SetScale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetScale(JPC_HeightFieldShapeSettings *in_settings, const float in_scale[3])
     * }
     */
    public static void JPC_HeightFieldShapeSettings_SetScale(MemorySegment in_settings, MemorySegment in_scale) {
        var mh$ = JPC_HeightFieldShapeSettings_SetScale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_HeightFieldShapeSettings_SetScale", in_settings, in_scale);
            }
            mh$.invokeExact(in_settings, in_scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_HeightFieldShapeSettings_GetBlockSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_HeightFieldShapeSettings_GetBlockSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_HeightFieldShapeSettings_GetBlockSize(const JPC_HeightFieldShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_HeightFieldShapeSettings_GetBlockSize$descriptor() {
        return JPC_HeightFieldShapeSettings_GetBlockSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_HeightFieldShapeSettings_GetBlockSize(const JPC_HeightFieldShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_HeightFieldShapeSettings_GetBlockSize$handle() {
        return JPC_HeightFieldShapeSettings_GetBlockSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_HeightFieldShapeSettings_GetBlockSize(const JPC_HeightFieldShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_GetBlockSize$address() {
        return JPC_HeightFieldShapeSettings_GetBlockSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_HeightFieldShapeSettings_GetBlockSize(const JPC_HeightFieldShapeSettings *in_settings)
     * }
     */
    public static int JPC_HeightFieldShapeSettings_GetBlockSize(MemorySegment in_settings) {
        var mh$ = JPC_HeightFieldShapeSettings_GetBlockSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_HeightFieldShapeSettings_GetBlockSize", in_settings);
            }
            return (int)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_HeightFieldShapeSettings_SetBlockSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_HeightFieldShapeSettings_SetBlockSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetBlockSize(JPC_HeightFieldShapeSettings *in_settings, uint32_t in_block_size)
     * }
     */
    public static FunctionDescriptor JPC_HeightFieldShapeSettings_SetBlockSize$descriptor() {
        return JPC_HeightFieldShapeSettings_SetBlockSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetBlockSize(JPC_HeightFieldShapeSettings *in_settings, uint32_t in_block_size)
     * }
     */
    public static MethodHandle JPC_HeightFieldShapeSettings_SetBlockSize$handle() {
        return JPC_HeightFieldShapeSettings_SetBlockSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetBlockSize(JPC_HeightFieldShapeSettings *in_settings, uint32_t in_block_size)
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_SetBlockSize$address() {
        return JPC_HeightFieldShapeSettings_SetBlockSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetBlockSize(JPC_HeightFieldShapeSettings *in_settings, uint32_t in_block_size)
     * }
     */
    public static void JPC_HeightFieldShapeSettings_SetBlockSize(MemorySegment in_settings, int in_block_size) {
        var mh$ = JPC_HeightFieldShapeSettings_SetBlockSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_HeightFieldShapeSettings_SetBlockSize", in_settings, in_block_size);
            }
            mh$.invokeExact(in_settings, in_block_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_HeightFieldShapeSettings_GetBitsPerSample {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_HeightFieldShapeSettings_GetBitsPerSample");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_HeightFieldShapeSettings_GetBitsPerSample(const JPC_HeightFieldShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_HeightFieldShapeSettings_GetBitsPerSample$descriptor() {
        return JPC_HeightFieldShapeSettings_GetBitsPerSample.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_HeightFieldShapeSettings_GetBitsPerSample(const JPC_HeightFieldShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_HeightFieldShapeSettings_GetBitsPerSample$handle() {
        return JPC_HeightFieldShapeSettings_GetBitsPerSample.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_HeightFieldShapeSettings_GetBitsPerSample(const JPC_HeightFieldShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_GetBitsPerSample$address() {
        return JPC_HeightFieldShapeSettings_GetBitsPerSample.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_HeightFieldShapeSettings_GetBitsPerSample(const JPC_HeightFieldShapeSettings *in_settings)
     * }
     */
    public static int JPC_HeightFieldShapeSettings_GetBitsPerSample(MemorySegment in_settings) {
        var mh$ = JPC_HeightFieldShapeSettings_GetBitsPerSample.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_HeightFieldShapeSettings_GetBitsPerSample", in_settings);
            }
            return (int)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_HeightFieldShapeSettings_SetBitsPerSample {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_HeightFieldShapeSettings_SetBitsPerSample");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetBitsPerSample(JPC_HeightFieldShapeSettings *in_settings, uint32_t in_num_bits)
     * }
     */
    public static FunctionDescriptor JPC_HeightFieldShapeSettings_SetBitsPerSample$descriptor() {
        return JPC_HeightFieldShapeSettings_SetBitsPerSample.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetBitsPerSample(JPC_HeightFieldShapeSettings *in_settings, uint32_t in_num_bits)
     * }
     */
    public static MethodHandle JPC_HeightFieldShapeSettings_SetBitsPerSample$handle() {
        return JPC_HeightFieldShapeSettings_SetBitsPerSample.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetBitsPerSample(JPC_HeightFieldShapeSettings *in_settings, uint32_t in_num_bits)
     * }
     */
    public static MemorySegment JPC_HeightFieldShapeSettings_SetBitsPerSample$address() {
        return JPC_HeightFieldShapeSettings_SetBitsPerSample.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_HeightFieldShapeSettings_SetBitsPerSample(JPC_HeightFieldShapeSettings *in_settings, uint32_t in_num_bits)
     * }
     */
    public static void JPC_HeightFieldShapeSettings_SetBitsPerSample(MemorySegment in_settings, int in_num_bits) {
        var mh$ = JPC_HeightFieldShapeSettings_SetBitsPerSample.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_HeightFieldShapeSettings_SetBitsPerSample", in_settings, in_num_bits);
            }
            mh$.invokeExact(in_settings, in_num_bits);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_MeshShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_MeshShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_MeshShapeSettings *JPC_MeshShapeSettings_Create(const void *in_vertices, uint32_t in_num_vertices, uint32_t in_vertex_size, const uint32_t *in_indices, uint32_t in_num_indices)
     * }
     */
    public static FunctionDescriptor JPC_MeshShapeSettings_Create$descriptor() {
        return JPC_MeshShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_MeshShapeSettings *JPC_MeshShapeSettings_Create(const void *in_vertices, uint32_t in_num_vertices, uint32_t in_vertex_size, const uint32_t *in_indices, uint32_t in_num_indices)
     * }
     */
    public static MethodHandle JPC_MeshShapeSettings_Create$handle() {
        return JPC_MeshShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_MeshShapeSettings *JPC_MeshShapeSettings_Create(const void *in_vertices, uint32_t in_num_vertices, uint32_t in_vertex_size, const uint32_t *in_indices, uint32_t in_num_indices)
     * }
     */
    public static MemorySegment JPC_MeshShapeSettings_Create$address() {
        return JPC_MeshShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_MeshShapeSettings *JPC_MeshShapeSettings_Create(const void *in_vertices, uint32_t in_num_vertices, uint32_t in_vertex_size, const uint32_t *in_indices, uint32_t in_num_indices)
     * }
     */
    public static MemorySegment JPC_MeshShapeSettings_Create(MemorySegment in_vertices, int in_num_vertices, int in_vertex_size, MemorySegment in_indices, int in_num_indices) {
        var mh$ = JPC_MeshShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_MeshShapeSettings_Create", in_vertices, in_num_vertices, in_vertex_size, in_indices, in_num_indices);
            }
            return (MemorySegment)mh$.invokeExact(in_vertices, in_num_vertices, in_vertex_size, in_indices, in_num_indices);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf(const JPC_MeshShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf$descriptor() {
        return JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf(const JPC_MeshShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf$handle() {
        return JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf(const JPC_MeshShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf$address() {
        return JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf(const JPC_MeshShapeSettings *in_settings)
     * }
     */
    public static int JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf(MemorySegment in_settings) {
        var mh$ = JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_MeshShapeSettings_GetMaxTrianglesPerLeaf", in_settings);
            }
            return (int)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf(JPC_MeshShapeSettings *in_settings, uint32_t in_max_triangles)
     * }
     */
    public static FunctionDescriptor JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf$descriptor() {
        return JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf(JPC_MeshShapeSettings *in_settings, uint32_t in_max_triangles)
     * }
     */
    public static MethodHandle JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf$handle() {
        return JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf(JPC_MeshShapeSettings *in_settings, uint32_t in_max_triangles)
     * }
     */
    public static MemorySegment JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf$address() {
        return JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf(JPC_MeshShapeSettings *in_settings, uint32_t in_max_triangles)
     * }
     */
    public static void JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf(MemorySegment in_settings, int in_max_triangles) {
        var mh$ = JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_MeshShapeSettings_SetMaxTrianglesPerLeaf", in_settings, in_max_triangles);
            }
            mh$.invokeExact(in_settings, in_max_triangles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_MeshShapeSettings_Sanitize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_MeshShapeSettings_Sanitize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_MeshShapeSettings_Sanitize(JPC_MeshShapeSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_MeshShapeSettings_Sanitize$descriptor() {
        return JPC_MeshShapeSettings_Sanitize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_MeshShapeSettings_Sanitize(JPC_MeshShapeSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_MeshShapeSettings_Sanitize$handle() {
        return JPC_MeshShapeSettings_Sanitize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_MeshShapeSettings_Sanitize(JPC_MeshShapeSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_MeshShapeSettings_Sanitize$address() {
        return JPC_MeshShapeSettings_Sanitize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_MeshShapeSettings_Sanitize(JPC_MeshShapeSettings *in_settings)
     * }
     */
    public static void JPC_MeshShapeSettings_Sanitize(MemorySegment in_settings) {
        var mh$ = JPC_MeshShapeSettings_Sanitize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_MeshShapeSettings_Sanitize", in_settings);
            }
            mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_RotatedTranslatedShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_RotatedTranslatedShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_RotatedTranslatedShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_rotated[4], const JPC_Real in_translated[3])
     * }
     */
    public static FunctionDescriptor JPC_RotatedTranslatedShapeSettings_Create$descriptor() {
        return JPC_RotatedTranslatedShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_RotatedTranslatedShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_rotated[4], const JPC_Real in_translated[3])
     * }
     */
    public static MethodHandle JPC_RotatedTranslatedShapeSettings_Create$handle() {
        return JPC_RotatedTranslatedShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_RotatedTranslatedShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_rotated[4], const JPC_Real in_translated[3])
     * }
     */
    public static MemorySegment JPC_RotatedTranslatedShapeSettings_Create$address() {
        return JPC_RotatedTranslatedShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_RotatedTranslatedShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_rotated[4], const JPC_Real in_translated[3])
     * }
     */
    public static MemorySegment JPC_RotatedTranslatedShapeSettings_Create(MemorySegment in_inner_shape_settings, MemorySegment in_rotated, MemorySegment in_translated) {
        var mh$ = JPC_RotatedTranslatedShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_RotatedTranslatedShapeSettings_Create", in_inner_shape_settings, in_rotated, in_translated);
            }
            return (MemorySegment)mh$.invokeExact(in_inner_shape_settings, in_rotated, in_translated);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ScaledShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ScaledShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_ScaledShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_scale[3])
     * }
     */
    public static FunctionDescriptor JPC_ScaledShapeSettings_Create$descriptor() {
        return JPC_ScaledShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_ScaledShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_scale[3])
     * }
     */
    public static MethodHandle JPC_ScaledShapeSettings_Create$handle() {
        return JPC_ScaledShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_ScaledShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_scale[3])
     * }
     */
    public static MemorySegment JPC_ScaledShapeSettings_Create$address() {
        return JPC_ScaledShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_ScaledShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_scale[3])
     * }
     */
    public static MemorySegment JPC_ScaledShapeSettings_Create(MemorySegment in_inner_shape_settings, MemorySegment in_scale) {
        var mh$ = JPC_ScaledShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ScaledShapeSettings_Create", in_inner_shape_settings, in_scale);
            }
            return (MemorySegment)mh$.invokeExact(in_inner_shape_settings, in_scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_OffsetCenterOfMassShapeSettings_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_OffsetCenterOfMassShapeSettings_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_OffsetCenterOfMassShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_center_of_mass[3])
     * }
     */
    public static FunctionDescriptor JPC_OffsetCenterOfMassShapeSettings_Create$descriptor() {
        return JPC_OffsetCenterOfMassShapeSettings_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_OffsetCenterOfMassShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_center_of_mass[3])
     * }
     */
    public static MethodHandle JPC_OffsetCenterOfMassShapeSettings_Create$handle() {
        return JPC_OffsetCenterOfMassShapeSettings_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_OffsetCenterOfMassShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_center_of_mass[3])
     * }
     */
    public static MemorySegment JPC_OffsetCenterOfMassShapeSettings_Create$address() {
        return JPC_OffsetCenterOfMassShapeSettings_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_DecoratedShapeSettings *JPC_OffsetCenterOfMassShapeSettings_Create(const JPC_ShapeSettings *in_inner_shape_settings, const JPC_Real in_center_of_mass[3])
     * }
     */
    public static MemorySegment JPC_OffsetCenterOfMassShapeSettings_Create(MemorySegment in_inner_shape_settings, MemorySegment in_center_of_mass) {
        var mh$ = JPC_OffsetCenterOfMassShapeSettings_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_OffsetCenterOfMassShapeSettings_Create", in_inner_shape_settings, in_center_of_mass);
            }
            return (MemorySegment)mh$.invokeExact(in_inner_shape_settings, in_center_of_mass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern JPC_CompoundShapeSettings *JPC_StaticCompoundShapeSettings_Create()
     * }
     */
    public static class JPC_StaticCompoundShapeSettings_Create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                jolt.C_POINTER        );
        private static final MemorySegment ADDR = jolt.findOrThrow("JPC_StaticCompoundShapeSettings_Create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private JPC_StaticCompoundShapeSettings_Create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern JPC_CompoundShapeSettings *JPC_StaticCompoundShapeSettings_Create()
         * }
         */
        public static JPC_StaticCompoundShapeSettings_Create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new JPC_StaticCompoundShapeSettings_Create(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("JPC_StaticCompoundShapeSettings_Create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern JPC_CompoundShapeSettings *JPC_MutableCompoundShapeSettings_Create()
     * }
     */
    public static class JPC_MutableCompoundShapeSettings_Create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                jolt.C_POINTER        );
        private static final MemorySegment ADDR = jolt.findOrThrow("JPC_MutableCompoundShapeSettings_Create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private JPC_MutableCompoundShapeSettings_Create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern JPC_CompoundShapeSettings *JPC_MutableCompoundShapeSettings_Create()
         * }
         */
        public static JPC_MutableCompoundShapeSettings_Create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new JPC_MutableCompoundShapeSettings_Create(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("JPC_MutableCompoundShapeSettings_Create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class JPC_CompoundShapeSettings_AddShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CompoundShapeSettings_AddShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CompoundShapeSettings_AddShape(JPC_CompoundShapeSettings *in_settings, const JPC_Real in_position[3], const JPC_Real in_rotation[4], const JPC_ShapeSettings *in_shape, const uint32_t in_user_data)
     * }
     */
    public static FunctionDescriptor JPC_CompoundShapeSettings_AddShape$descriptor() {
        return JPC_CompoundShapeSettings_AddShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CompoundShapeSettings_AddShape(JPC_CompoundShapeSettings *in_settings, const JPC_Real in_position[3], const JPC_Real in_rotation[4], const JPC_ShapeSettings *in_shape, const uint32_t in_user_data)
     * }
     */
    public static MethodHandle JPC_CompoundShapeSettings_AddShape$handle() {
        return JPC_CompoundShapeSettings_AddShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CompoundShapeSettings_AddShape(JPC_CompoundShapeSettings *in_settings, const JPC_Real in_position[3], const JPC_Real in_rotation[4], const JPC_ShapeSettings *in_shape, const uint32_t in_user_data)
     * }
     */
    public static MemorySegment JPC_CompoundShapeSettings_AddShape$address() {
        return JPC_CompoundShapeSettings_AddShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CompoundShapeSettings_AddShape(JPC_CompoundShapeSettings *in_settings, const JPC_Real in_position[3], const JPC_Real in_rotation[4], const JPC_ShapeSettings *in_shape, const uint32_t in_user_data)
     * }
     */
    public static void JPC_CompoundShapeSettings_AddShape(MemorySegment in_settings, MemorySegment in_position, MemorySegment in_rotation, MemorySegment in_shape, int in_user_data) {
        var mh$ = JPC_CompoundShapeSettings_AddShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CompoundShapeSettings_AddShape", in_settings, in_position, in_rotation, in_shape, in_user_data);
            }
            mh$.invokeExact(in_settings, in_position, in_rotation, in_shape, in_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_AddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_AddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Shape_AddRef(JPC_Shape *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Shape_AddRef$descriptor() {
        return JPC_Shape_AddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Shape_AddRef(JPC_Shape *in_shape)
     * }
     */
    public static MethodHandle JPC_Shape_AddRef$handle() {
        return JPC_Shape_AddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Shape_AddRef(JPC_Shape *in_shape)
     * }
     */
    public static MemorySegment JPC_Shape_AddRef$address() {
        return JPC_Shape_AddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Shape_AddRef(JPC_Shape *in_shape)
     * }
     */
    public static void JPC_Shape_AddRef(MemorySegment in_shape) {
        var mh$ = JPC_Shape_AddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_AddRef", in_shape);
            }
            mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Shape_Release(JPC_Shape *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Shape_Release$descriptor() {
        return JPC_Shape_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Shape_Release(JPC_Shape *in_shape)
     * }
     */
    public static MethodHandle JPC_Shape_Release$handle() {
        return JPC_Shape_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Shape_Release(JPC_Shape *in_shape)
     * }
     */
    public static MemorySegment JPC_Shape_Release$address() {
        return JPC_Shape_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Shape_Release(JPC_Shape *in_shape)
     * }
     */
    public static void JPC_Shape_Release(MemorySegment in_shape) {
        var mh$ = JPC_Shape_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_Release", in_shape);
            }
            mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_GetRefCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_GetRefCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_Shape_GetRefCount(const JPC_Shape *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Shape_GetRefCount$descriptor() {
        return JPC_Shape_GetRefCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_Shape_GetRefCount(const JPC_Shape *in_shape)
     * }
     */
    public static MethodHandle JPC_Shape_GetRefCount$handle() {
        return JPC_Shape_GetRefCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_Shape_GetRefCount(const JPC_Shape *in_shape)
     * }
     */
    public static MemorySegment JPC_Shape_GetRefCount$address() {
        return JPC_Shape_GetRefCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_Shape_GetRefCount(const JPC_Shape *in_shape)
     * }
     */
    public static int JPC_Shape_GetRefCount(MemorySegment in_shape) {
        var mh$ = JPC_Shape_GetRefCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_GetRefCount", in_shape);
            }
            return (int)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_GetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_CHAR,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_GetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_ShapeType JPC_Shape_GetType(const JPC_Shape *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Shape_GetType$descriptor() {
        return JPC_Shape_GetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_ShapeType JPC_Shape_GetType(const JPC_Shape *in_shape)
     * }
     */
    public static MethodHandle JPC_Shape_GetType$handle() {
        return JPC_Shape_GetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_ShapeType JPC_Shape_GetType(const JPC_Shape *in_shape)
     * }
     */
    public static MemorySegment JPC_Shape_GetType$address() {
        return JPC_Shape_GetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_ShapeType JPC_Shape_GetType(const JPC_Shape *in_shape)
     * }
     */
    public static byte JPC_Shape_GetType(MemorySegment in_shape) {
        var mh$ = JPC_Shape_GetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_GetType", in_shape);
            }
            return (byte)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_GetSubType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_CHAR,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_GetSubType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_ShapeSubType JPC_Shape_GetSubType(const JPC_Shape *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Shape_GetSubType$descriptor() {
        return JPC_Shape_GetSubType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_ShapeSubType JPC_Shape_GetSubType(const JPC_Shape *in_shape)
     * }
     */
    public static MethodHandle JPC_Shape_GetSubType$handle() {
        return JPC_Shape_GetSubType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_ShapeSubType JPC_Shape_GetSubType(const JPC_Shape *in_shape)
     * }
     */
    public static MemorySegment JPC_Shape_GetSubType$address() {
        return JPC_Shape_GetSubType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_ShapeSubType JPC_Shape_GetSubType(const JPC_Shape *in_shape)
     * }
     */
    public static byte JPC_Shape_GetSubType(MemorySegment in_shape) {
        var mh$ = JPC_Shape_GetSubType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_GetSubType", in_shape);
            }
            return (byte)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_LONG_LONG,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPC_Shape_GetUserData(const JPC_Shape *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Shape_GetUserData$descriptor() {
        return JPC_Shape_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPC_Shape_GetUserData(const JPC_Shape *in_shape)
     * }
     */
    public static MethodHandle JPC_Shape_GetUserData$handle() {
        return JPC_Shape_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPC_Shape_GetUserData(const JPC_Shape *in_shape)
     * }
     */
    public static MemorySegment JPC_Shape_GetUserData$address() {
        return JPC_Shape_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPC_Shape_GetUserData(const JPC_Shape *in_shape)
     * }
     */
    public static long JPC_Shape_GetUserData(MemorySegment in_shape) {
        var mh$ = JPC_Shape_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_GetUserData", in_shape);
            }
            return (long)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Shape_SetUserData(JPC_Shape *in_shape, uint64_t in_user_data)
     * }
     */
    public static FunctionDescriptor JPC_Shape_SetUserData$descriptor() {
        return JPC_Shape_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Shape_SetUserData(JPC_Shape *in_shape, uint64_t in_user_data)
     * }
     */
    public static MethodHandle JPC_Shape_SetUserData$handle() {
        return JPC_Shape_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Shape_SetUserData(JPC_Shape *in_shape, uint64_t in_user_data)
     * }
     */
    public static MemorySegment JPC_Shape_SetUserData$address() {
        return JPC_Shape_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Shape_SetUserData(JPC_Shape *in_shape, uint64_t in_user_data)
     * }
     */
    public static void JPC_Shape_SetUserData(MemorySegment in_shape, long in_user_data) {
        var mh$ = JPC_Shape_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_SetUserData", in_shape, in_user_data);
            }
            mh$.invokeExact(in_shape, in_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_GetCenterOfMass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_GetCenterOfMass");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Shape_GetCenterOfMass(const JPC_Shape *in_shape, JPC_Real out_position[3])
     * }
     */
    public static FunctionDescriptor JPC_Shape_GetCenterOfMass$descriptor() {
        return JPC_Shape_GetCenterOfMass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Shape_GetCenterOfMass(const JPC_Shape *in_shape, JPC_Real out_position[3])
     * }
     */
    public static MethodHandle JPC_Shape_GetCenterOfMass$handle() {
        return JPC_Shape_GetCenterOfMass.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Shape_GetCenterOfMass(const JPC_Shape *in_shape, JPC_Real out_position[3])
     * }
     */
    public static MemorySegment JPC_Shape_GetCenterOfMass$address() {
        return JPC_Shape_GetCenterOfMass.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Shape_GetCenterOfMass(const JPC_Shape *in_shape, JPC_Real out_position[3])
     * }
     */
    public static void JPC_Shape_GetCenterOfMass(MemorySegment in_shape, MemorySegment out_position) {
        var mh$ = JPC_Shape_GetCenterOfMass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_GetCenterOfMass", in_shape, out_position);
            }
            mh$.invokeExact(in_shape, out_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShape_GetNumPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShape_GetNumPoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumPoints(const JPC_ConvexHullShape *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShape_GetNumPoints$descriptor() {
        return JPC_ConvexHullShape_GetNumPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumPoints(const JPC_ConvexHullShape *in_shape)
     * }
     */
    public static MethodHandle JPC_ConvexHullShape_GetNumPoints$handle() {
        return JPC_ConvexHullShape_GetNumPoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumPoints(const JPC_ConvexHullShape *in_shape)
     * }
     */
    public static MemorySegment JPC_ConvexHullShape_GetNumPoints$address() {
        return JPC_ConvexHullShape_GetNumPoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumPoints(const JPC_ConvexHullShape *in_shape)
     * }
     */
    public static int JPC_ConvexHullShape_GetNumPoints(MemorySegment in_shape) {
        var mh$ = JPC_ConvexHullShape_GetNumPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShape_GetNumPoints", in_shape);
            }
            return (int)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShape_GetPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShape_GetPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShape_GetPoint(const JPC_ConvexHullShape *in_shape, uint32_t in_point_index, float out_point[3])
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShape_GetPoint$descriptor() {
        return JPC_ConvexHullShape_GetPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShape_GetPoint(const JPC_ConvexHullShape *in_shape, uint32_t in_point_index, float out_point[3])
     * }
     */
    public static MethodHandle JPC_ConvexHullShape_GetPoint$handle() {
        return JPC_ConvexHullShape_GetPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShape_GetPoint(const JPC_ConvexHullShape *in_shape, uint32_t in_point_index, float out_point[3])
     * }
     */
    public static MemorySegment JPC_ConvexHullShape_GetPoint$address() {
        return JPC_ConvexHullShape_GetPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_ConvexHullShape_GetPoint(const JPC_ConvexHullShape *in_shape, uint32_t in_point_index, float out_point[3])
     * }
     */
    public static void JPC_ConvexHullShape_GetPoint(MemorySegment in_shape, int in_point_index, MemorySegment out_point) {
        var mh$ = JPC_ConvexHullShape_GetPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShape_GetPoint", in_shape, in_point_index, out_point);
            }
            mh$.invokeExact(in_shape, in_point_index, out_point);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShape_GetNumFaces {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShape_GetNumFaces");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumFaces(const JPC_ConvexHullShape *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShape_GetNumFaces$descriptor() {
        return JPC_ConvexHullShape_GetNumFaces.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumFaces(const JPC_ConvexHullShape *in_shape)
     * }
     */
    public static MethodHandle JPC_ConvexHullShape_GetNumFaces$handle() {
        return JPC_ConvexHullShape_GetNumFaces.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumFaces(const JPC_ConvexHullShape *in_shape)
     * }
     */
    public static MemorySegment JPC_ConvexHullShape_GetNumFaces$address() {
        return JPC_ConvexHullShape_GetNumFaces.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumFaces(const JPC_ConvexHullShape *in_shape)
     * }
     */
    public static int JPC_ConvexHullShape_GetNumFaces(MemorySegment in_shape) {
        var mh$ = JPC_ConvexHullShape_GetNumFaces.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShape_GetNumFaces", in_shape);
            }
            return (int)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShape_GetNumVerticesInFace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShape_GetNumVerticesInFace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumVerticesInFace(const JPC_ConvexHullShape *in_shape, uint32_t in_face_index)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShape_GetNumVerticesInFace$descriptor() {
        return JPC_ConvexHullShape_GetNumVerticesInFace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumVerticesInFace(const JPC_ConvexHullShape *in_shape, uint32_t in_face_index)
     * }
     */
    public static MethodHandle JPC_ConvexHullShape_GetNumVerticesInFace$handle() {
        return JPC_ConvexHullShape_GetNumVerticesInFace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumVerticesInFace(const JPC_ConvexHullShape *in_shape, uint32_t in_face_index)
     * }
     */
    public static MemorySegment JPC_ConvexHullShape_GetNumVerticesInFace$address() {
        return JPC_ConvexHullShape_GetNumVerticesInFace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetNumVerticesInFace(const JPC_ConvexHullShape *in_shape, uint32_t in_face_index)
     * }
     */
    public static int JPC_ConvexHullShape_GetNumVerticesInFace(MemorySegment in_shape, int in_face_index) {
        var mh$ = JPC_ConvexHullShape_GetNumVerticesInFace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShape_GetNumVerticesInFace", in_shape, in_face_index);
            }
            return (int)mh$.invokeExact(in_shape, in_face_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConvexHullShape_GetFaceVertices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConvexHullShape_GetFaceVertices");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetFaceVertices(const JPC_ConvexHullShape *in_shape, uint32_t in_face_index, uint32_t in_max_vertices, uint32_t *out_vertices)
     * }
     */
    public static FunctionDescriptor JPC_ConvexHullShape_GetFaceVertices$descriptor() {
        return JPC_ConvexHullShape_GetFaceVertices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetFaceVertices(const JPC_ConvexHullShape *in_shape, uint32_t in_face_index, uint32_t in_max_vertices, uint32_t *out_vertices)
     * }
     */
    public static MethodHandle JPC_ConvexHullShape_GetFaceVertices$handle() {
        return JPC_ConvexHullShape_GetFaceVertices.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetFaceVertices(const JPC_ConvexHullShape *in_shape, uint32_t in_face_index, uint32_t in_max_vertices, uint32_t *out_vertices)
     * }
     */
    public static MemorySegment JPC_ConvexHullShape_GetFaceVertices$address() {
        return JPC_ConvexHullShape_GetFaceVertices.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_ConvexHullShape_GetFaceVertices(const JPC_ConvexHullShape *in_shape, uint32_t in_face_index, uint32_t in_max_vertices, uint32_t *out_vertices)
     * }
     */
    public static int JPC_ConvexHullShape_GetFaceVertices(MemorySegment in_shape, int in_face_index, int in_max_vertices, MemorySegment out_vertices) {
        var mh$ = JPC_ConvexHullShape_GetFaceVertices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConvexHullShape_GetFaceVertices", in_shape, in_face_index, in_max_vertices, out_vertices);
            }
            return (int)mh$.invokeExact(in_shape, in_face_index, in_max_vertices, out_vertices);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConstraintSettings_AddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConstraintSettings_AddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_AddRef(JPC_ConstraintSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_ConstraintSettings_AddRef$descriptor() {
        return JPC_ConstraintSettings_AddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_AddRef(JPC_ConstraintSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_ConstraintSettings_AddRef$handle() {
        return JPC_ConstraintSettings_AddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_AddRef(JPC_ConstraintSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_ConstraintSettings_AddRef$address() {
        return JPC_ConstraintSettings_AddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_AddRef(JPC_ConstraintSettings *in_settings)
     * }
     */
    public static void JPC_ConstraintSettings_AddRef(MemorySegment in_settings) {
        var mh$ = JPC_ConstraintSettings_AddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConstraintSettings_AddRef", in_settings);
            }
            mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConstraintSettings_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConstraintSettings_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_Release(JPC_ConstraintSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_ConstraintSettings_Release$descriptor() {
        return JPC_ConstraintSettings_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_Release(JPC_ConstraintSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_ConstraintSettings_Release$handle() {
        return JPC_ConstraintSettings_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_Release(JPC_ConstraintSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_ConstraintSettings_Release$address() {
        return JPC_ConstraintSettings_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_Release(JPC_ConstraintSettings *in_settings)
     * }
     */
    public static void JPC_ConstraintSettings_Release(MemorySegment in_settings) {
        var mh$ = JPC_ConstraintSettings_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConstraintSettings_Release", in_settings);
            }
            mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConstraintSettings_GetRefCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConstraintSettings_GetRefCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConstraintSettings_GetRefCount(const JPC_ConstraintSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_ConstraintSettings_GetRefCount$descriptor() {
        return JPC_ConstraintSettings_GetRefCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConstraintSettings_GetRefCount(const JPC_ConstraintSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_ConstraintSettings_GetRefCount$handle() {
        return JPC_ConstraintSettings_GetRefCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_ConstraintSettings_GetRefCount(const JPC_ConstraintSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_ConstraintSettings_GetRefCount$address() {
        return JPC_ConstraintSettings_GetRefCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_ConstraintSettings_GetRefCount(const JPC_ConstraintSettings *in_settings)
     * }
     */
    public static int JPC_ConstraintSettings_GetRefCount(MemorySegment in_settings) {
        var mh$ = JPC_ConstraintSettings_GetRefCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConstraintSettings_GetRefCount", in_settings);
            }
            return (int)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConstraintSettings_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_LONG_LONG,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConstraintSettings_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPC_ConstraintSettings_GetUserData(const JPC_ConstraintSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_ConstraintSettings_GetUserData$descriptor() {
        return JPC_ConstraintSettings_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPC_ConstraintSettings_GetUserData(const JPC_ConstraintSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_ConstraintSettings_GetUserData$handle() {
        return JPC_ConstraintSettings_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPC_ConstraintSettings_GetUserData(const JPC_ConstraintSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_ConstraintSettings_GetUserData$address() {
        return JPC_ConstraintSettings_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPC_ConstraintSettings_GetUserData(const JPC_ConstraintSettings *in_settings)
     * }
     */
    public static long JPC_ConstraintSettings_GetUserData(MemorySegment in_settings) {
        var mh$ = JPC_ConstraintSettings_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConstraintSettings_GetUserData", in_settings);
            }
            return (long)mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_ConstraintSettings_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_ConstraintSettings_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_SetUserData(JPC_ConstraintSettings *in_settings, uint64_t in_user_data)
     * }
     */
    public static FunctionDescriptor JPC_ConstraintSettings_SetUserData$descriptor() {
        return JPC_ConstraintSettings_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_SetUserData(JPC_ConstraintSettings *in_settings, uint64_t in_user_data)
     * }
     */
    public static MethodHandle JPC_ConstraintSettings_SetUserData$handle() {
        return JPC_ConstraintSettings_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_SetUserData(JPC_ConstraintSettings *in_settings, uint64_t in_user_data)
     * }
     */
    public static MemorySegment JPC_ConstraintSettings_SetUserData$address() {
        return JPC_ConstraintSettings_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_ConstraintSettings_SetUserData(JPC_ConstraintSettings *in_settings, uint64_t in_user_data)
     * }
     */
    public static void JPC_ConstraintSettings_SetUserData(MemorySegment in_settings, long in_user_data) {
        var mh$ = JPC_ConstraintSettings_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_ConstraintSettings_SetUserData", in_settings, in_user_data);
            }
            mh$.invokeExact(in_settings, in_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_TwoBodyConstraintSettings_CreateConstraint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_TwoBodyConstraintSettings_CreateConstraint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_Constraint *JPC_TwoBodyConstraintSettings_CreateConstraint(const JPC_TwoBodyConstraintSettings *in_settings, JPC_Body *in_body1, JPC_Body *in_body2)
     * }
     */
    public static FunctionDescriptor JPC_TwoBodyConstraintSettings_CreateConstraint$descriptor() {
        return JPC_TwoBodyConstraintSettings_CreateConstraint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_Constraint *JPC_TwoBodyConstraintSettings_CreateConstraint(const JPC_TwoBodyConstraintSettings *in_settings, JPC_Body *in_body1, JPC_Body *in_body2)
     * }
     */
    public static MethodHandle JPC_TwoBodyConstraintSettings_CreateConstraint$handle() {
        return JPC_TwoBodyConstraintSettings_CreateConstraint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_Constraint *JPC_TwoBodyConstraintSettings_CreateConstraint(const JPC_TwoBodyConstraintSettings *in_settings, JPC_Body *in_body1, JPC_Body *in_body2)
     * }
     */
    public static MemorySegment JPC_TwoBodyConstraintSettings_CreateConstraint$address() {
        return JPC_TwoBodyConstraintSettings_CreateConstraint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_Constraint *JPC_TwoBodyConstraintSettings_CreateConstraint(const JPC_TwoBodyConstraintSettings *in_settings, JPC_Body *in_body1, JPC_Body *in_body2)
     * }
     */
    public static MemorySegment JPC_TwoBodyConstraintSettings_CreateConstraint(MemorySegment in_settings, MemorySegment in_body1, MemorySegment in_body2) {
        var mh$ = JPC_TwoBodyConstraintSettings_CreateConstraint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_TwoBodyConstraintSettings_CreateConstraint", in_settings, in_body1, in_body2);
            }
            return (MemorySegment)mh$.invokeExact(in_settings, in_body1, in_body2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern JPC_FixedConstraintSettings *JPC_FixedConstraintSettings_Create()
     * }
     */
    public static class JPC_FixedConstraintSettings_Create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                jolt.C_POINTER        );
        private static final MemorySegment ADDR = jolt.findOrThrow("JPC_FixedConstraintSettings_Create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private JPC_FixedConstraintSettings_Create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern JPC_FixedConstraintSettings *JPC_FixedConstraintSettings_Create()
         * }
         */
        public static JPC_FixedConstraintSettings_Create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new JPC_FixedConstraintSettings_Create(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("JPC_FixedConstraintSettings_Create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class JPC_FixedConstraintSettings_SetSpace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_FixedConstraintSettings_SetSpace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_FixedConstraintSettings_SetSpace(JPC_FixedConstraintSettings *in_settings, JPC_ConstraintSpace in_space)
     * }
     */
    public static FunctionDescriptor JPC_FixedConstraintSettings_SetSpace$descriptor() {
        return JPC_FixedConstraintSettings_SetSpace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_FixedConstraintSettings_SetSpace(JPC_FixedConstraintSettings *in_settings, JPC_ConstraintSpace in_space)
     * }
     */
    public static MethodHandle JPC_FixedConstraintSettings_SetSpace$handle() {
        return JPC_FixedConstraintSettings_SetSpace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_FixedConstraintSettings_SetSpace(JPC_FixedConstraintSettings *in_settings, JPC_ConstraintSpace in_space)
     * }
     */
    public static MemorySegment JPC_FixedConstraintSettings_SetSpace$address() {
        return JPC_FixedConstraintSettings_SetSpace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_FixedConstraintSettings_SetSpace(JPC_FixedConstraintSettings *in_settings, JPC_ConstraintSpace in_space)
     * }
     */
    public static void JPC_FixedConstraintSettings_SetSpace(MemorySegment in_settings, int in_space) {
        var mh$ = JPC_FixedConstraintSettings_SetSpace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_FixedConstraintSettings_SetSpace", in_settings, in_space);
            }
            mh$.invokeExact(in_settings, in_space);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_FixedConstraintSettings_SetAutoDetectPoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_BOOL
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_FixedConstraintSettings_SetAutoDetectPoint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_FixedConstraintSettings_SetAutoDetectPoint(JPC_FixedConstraintSettings *in_settings, bool in_enabled)
     * }
     */
    public static FunctionDescriptor JPC_FixedConstraintSettings_SetAutoDetectPoint$descriptor() {
        return JPC_FixedConstraintSettings_SetAutoDetectPoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_FixedConstraintSettings_SetAutoDetectPoint(JPC_FixedConstraintSettings *in_settings, bool in_enabled)
     * }
     */
    public static MethodHandle JPC_FixedConstraintSettings_SetAutoDetectPoint$handle() {
        return JPC_FixedConstraintSettings_SetAutoDetectPoint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_FixedConstraintSettings_SetAutoDetectPoint(JPC_FixedConstraintSettings *in_settings, bool in_enabled)
     * }
     */
    public static MemorySegment JPC_FixedConstraintSettings_SetAutoDetectPoint$address() {
        return JPC_FixedConstraintSettings_SetAutoDetectPoint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_FixedConstraintSettings_SetAutoDetectPoint(JPC_FixedConstraintSettings *in_settings, bool in_enabled)
     * }
     */
    public static void JPC_FixedConstraintSettings_SetAutoDetectPoint(MemorySegment in_settings, boolean in_enabled) {
        var mh$ = JPC_FixedConstraintSettings_SetAutoDetectPoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_FixedConstraintSettings_SetAutoDetectPoint", in_settings, in_enabled);
            }
            mh$.invokeExact(in_settings, in_enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Constraint_AddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Constraint_AddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Constraint_AddRef(JPC_Constraint *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Constraint_AddRef$descriptor() {
        return JPC_Constraint_AddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Constraint_AddRef(JPC_Constraint *in_shape)
     * }
     */
    public static MethodHandle JPC_Constraint_AddRef$handle() {
        return JPC_Constraint_AddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Constraint_AddRef(JPC_Constraint *in_shape)
     * }
     */
    public static MemorySegment JPC_Constraint_AddRef$address() {
        return JPC_Constraint_AddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Constraint_AddRef(JPC_Constraint *in_shape)
     * }
     */
    public static void JPC_Constraint_AddRef(MemorySegment in_shape) {
        var mh$ = JPC_Constraint_AddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Constraint_AddRef", in_shape);
            }
            mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Constraint_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Constraint_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Constraint_Release(JPC_Constraint *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Constraint_Release$descriptor() {
        return JPC_Constraint_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Constraint_Release(JPC_Constraint *in_shape)
     * }
     */
    public static MethodHandle JPC_Constraint_Release$handle() {
        return JPC_Constraint_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Constraint_Release(JPC_Constraint *in_shape)
     * }
     */
    public static MemorySegment JPC_Constraint_Release$address() {
        return JPC_Constraint_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Constraint_Release(JPC_Constraint *in_shape)
     * }
     */
    public static void JPC_Constraint_Release(MemorySegment in_shape) {
        var mh$ = JPC_Constraint_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Constraint_Release", in_shape);
            }
            mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Constraint_GetRefCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Constraint_GetRefCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_Constraint_GetRefCount(const JPC_Constraint *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Constraint_GetRefCount$descriptor() {
        return JPC_Constraint_GetRefCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_Constraint_GetRefCount(const JPC_Constraint *in_shape)
     * }
     */
    public static MethodHandle JPC_Constraint_GetRefCount$handle() {
        return JPC_Constraint_GetRefCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_Constraint_GetRefCount(const JPC_Constraint *in_shape)
     * }
     */
    public static MemorySegment JPC_Constraint_GetRefCount$address() {
        return JPC_Constraint_GetRefCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_Constraint_GetRefCount(const JPC_Constraint *in_shape)
     * }
     */
    public static int JPC_Constraint_GetRefCount(MemorySegment in_shape) {
        var mh$ = JPC_Constraint_GetRefCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Constraint_GetRefCount", in_shape);
            }
            return (int)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Constraint_GetType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Constraint_GetType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_ConstraintType JPC_Constraint_GetType(const JPC_Constraint *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Constraint_GetType$descriptor() {
        return JPC_Constraint_GetType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_ConstraintType JPC_Constraint_GetType(const JPC_Constraint *in_shape)
     * }
     */
    public static MethodHandle JPC_Constraint_GetType$handle() {
        return JPC_Constraint_GetType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_ConstraintType JPC_Constraint_GetType(const JPC_Constraint *in_shape)
     * }
     */
    public static MemorySegment JPC_Constraint_GetType$address() {
        return JPC_Constraint_GetType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_ConstraintType JPC_Constraint_GetType(const JPC_Constraint *in_shape)
     * }
     */
    public static int JPC_Constraint_GetType(MemorySegment in_shape) {
        var mh$ = JPC_Constraint_GetType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Constraint_GetType", in_shape);
            }
            return (int)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Constraint_GetSubType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Constraint_GetSubType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_ConstraintSubType JPC_Constraint_GetSubType(const JPC_Constraint *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Constraint_GetSubType$descriptor() {
        return JPC_Constraint_GetSubType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_ConstraintSubType JPC_Constraint_GetSubType(const JPC_Constraint *in_shape)
     * }
     */
    public static MethodHandle JPC_Constraint_GetSubType$handle() {
        return JPC_Constraint_GetSubType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_ConstraintSubType JPC_Constraint_GetSubType(const JPC_Constraint *in_shape)
     * }
     */
    public static MemorySegment JPC_Constraint_GetSubType$address() {
        return JPC_Constraint_GetSubType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_ConstraintSubType JPC_Constraint_GetSubType(const JPC_Constraint *in_shape)
     * }
     */
    public static int JPC_Constraint_GetSubType(MemorySegment in_shape) {
        var mh$ = JPC_Constraint_GetSubType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Constraint_GetSubType", in_shape);
            }
            return (int)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Constraint_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_LONG_LONG,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Constraint_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPC_Constraint_GetUserData(const JPC_Constraint *in_shape)
     * }
     */
    public static FunctionDescriptor JPC_Constraint_GetUserData$descriptor() {
        return JPC_Constraint_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPC_Constraint_GetUserData(const JPC_Constraint *in_shape)
     * }
     */
    public static MethodHandle JPC_Constraint_GetUserData$handle() {
        return JPC_Constraint_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPC_Constraint_GetUserData(const JPC_Constraint *in_shape)
     * }
     */
    public static MemorySegment JPC_Constraint_GetUserData$address() {
        return JPC_Constraint_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPC_Constraint_GetUserData(const JPC_Constraint *in_shape)
     * }
     */
    public static long JPC_Constraint_GetUserData(MemorySegment in_shape) {
        var mh$ = JPC_Constraint_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Constraint_GetUserData", in_shape);
            }
            return (long)mh$.invokeExact(in_shape);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Constraint_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Constraint_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Constraint_SetUserData(JPC_Constraint *in_shape, uint64_t in_user_data)
     * }
     */
    public static FunctionDescriptor JPC_Constraint_SetUserData$descriptor() {
        return JPC_Constraint_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Constraint_SetUserData(JPC_Constraint *in_shape, uint64_t in_user_data)
     * }
     */
    public static MethodHandle JPC_Constraint_SetUserData$handle() {
        return JPC_Constraint_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Constraint_SetUserData(JPC_Constraint *in_shape, uint64_t in_user_data)
     * }
     */
    public static MemorySegment JPC_Constraint_SetUserData$address() {
        return JPC_Constraint_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Constraint_SetUserData(JPC_Constraint *in_shape, uint64_t in_user_data)
     * }
     */
    public static void JPC_Constraint_SetUserData(MemorySegment in_shape, long in_user_data) {
        var mh$ = JPC_Constraint_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Constraint_SetUserData", in_shape, in_user_data);
            }
            mh$.invokeExact(in_shape, in_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_CreateBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_CreateBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_Body *JPC_BodyInterface_CreateBody(JPC_BodyInterface *in_iface, const JPC_BodyCreationSettings *in_setting)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_CreateBody$descriptor() {
        return JPC_BodyInterface_CreateBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_Body *JPC_BodyInterface_CreateBody(JPC_BodyInterface *in_iface, const JPC_BodyCreationSettings *in_setting)
     * }
     */
    public static MethodHandle JPC_BodyInterface_CreateBody$handle() {
        return JPC_BodyInterface_CreateBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_Body *JPC_BodyInterface_CreateBody(JPC_BodyInterface *in_iface, const JPC_BodyCreationSettings *in_setting)
     * }
     */
    public static MemorySegment JPC_BodyInterface_CreateBody$address() {
        return JPC_BodyInterface_CreateBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_Body *JPC_BodyInterface_CreateBody(JPC_BodyInterface *in_iface, const JPC_BodyCreationSettings *in_setting)
     * }
     */
    public static MemorySegment JPC_BodyInterface_CreateBody(MemorySegment in_iface, MemorySegment in_setting) {
        var mh$ = JPC_BodyInterface_CreateBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_CreateBody", in_iface, in_setting);
            }
            return (MemorySegment)mh$.invokeExact(in_iface, in_setting);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_CreateBodyWithID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_CreateBodyWithID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_Body *JPC_BodyInterface_CreateBodyWithID(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_BodyCreationSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_CreateBodyWithID$descriptor() {
        return JPC_BodyInterface_CreateBodyWithID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_Body *JPC_BodyInterface_CreateBodyWithID(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_BodyCreationSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_BodyInterface_CreateBodyWithID$handle() {
        return JPC_BodyInterface_CreateBodyWithID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_Body *JPC_BodyInterface_CreateBodyWithID(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_BodyCreationSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_BodyInterface_CreateBodyWithID$address() {
        return JPC_BodyInterface_CreateBodyWithID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_Body *JPC_BodyInterface_CreateBodyWithID(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_BodyCreationSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_BodyInterface_CreateBodyWithID(MemorySegment in_iface, int in_body_id, MemorySegment in_settings) {
        var mh$ = JPC_BodyInterface_CreateBodyWithID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_CreateBodyWithID", in_iface, in_body_id, in_settings);
            }
            return (MemorySegment)mh$.invokeExact(in_iface, in_body_id, in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_DestroyBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_DestroyBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_DestroyBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_DestroyBody$descriptor() {
        return JPC_BodyInterface_DestroyBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_DestroyBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyInterface_DestroyBody$handle() {
        return JPC_BodyInterface_DestroyBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_DestroyBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_DestroyBody$address() {
        return JPC_BodyInterface_DestroyBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_DestroyBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static void JPC_BodyInterface_DestroyBody(MemorySegment in_iface, int in_body_id) {
        var mh$ = JPC_BodyInterface_DestroyBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_DestroyBody", in_iface, in_body_id);
            }
            mh$.invokeExact(in_iface, in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Activation in_mode)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddBody$descriptor() {
        return JPC_BodyInterface_AddBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Activation in_mode)
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddBody$handle() {
        return JPC_BodyInterface_AddBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Activation in_mode)
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddBody$address() {
        return JPC_BodyInterface_AddBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Activation in_mode)
     * }
     */
    public static void JPC_BodyInterface_AddBody(MemorySegment in_iface, int in_body_id, int in_mode) {
        var mh$ = JPC_BodyInterface_AddBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddBody", in_iface, in_body_id, in_mode);
            }
            mh$.invokeExact(in_iface, in_body_id, in_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_RemoveBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_RemoveBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_RemoveBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_RemoveBody$descriptor() {
        return JPC_BodyInterface_RemoveBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_RemoveBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyInterface_RemoveBody$handle() {
        return JPC_BodyInterface_RemoveBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_RemoveBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_RemoveBody$address() {
        return JPC_BodyInterface_RemoveBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_RemoveBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static void JPC_BodyInterface_RemoveBody(MemorySegment in_iface, int in_body_id) {
        var mh$ = JPC_BodyInterface_RemoveBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_RemoveBody", in_iface, in_body_id);
            }
            mh$.invokeExact(in_iface, in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_CreateAndAddBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_CreateAndAddBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_BodyID JPC_BodyInterface_CreateAndAddBody(JPC_BodyInterface *in_iface, const JPC_BodyCreationSettings *in_settings, JPC_Activation in_mode)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_CreateAndAddBody$descriptor() {
        return JPC_BodyInterface_CreateAndAddBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_BodyID JPC_BodyInterface_CreateAndAddBody(JPC_BodyInterface *in_iface, const JPC_BodyCreationSettings *in_settings, JPC_Activation in_mode)
     * }
     */
    public static MethodHandle JPC_BodyInterface_CreateAndAddBody$handle() {
        return JPC_BodyInterface_CreateAndAddBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_BodyID JPC_BodyInterface_CreateAndAddBody(JPC_BodyInterface *in_iface, const JPC_BodyCreationSettings *in_settings, JPC_Activation in_mode)
     * }
     */
    public static MemorySegment JPC_BodyInterface_CreateAndAddBody$address() {
        return JPC_BodyInterface_CreateAndAddBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_BodyID JPC_BodyInterface_CreateAndAddBody(JPC_BodyInterface *in_iface, const JPC_BodyCreationSettings *in_settings, JPC_Activation in_mode)
     * }
     */
    public static int JPC_BodyInterface_CreateAndAddBody(MemorySegment in_iface, MemorySegment in_settings, int in_mode) {
        var mh$ = JPC_BodyInterface_CreateAndAddBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_CreateAndAddBody", in_iface, in_settings, in_mode);
            }
            return (int)mh$.invokeExact(in_iface, in_settings, in_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_IsAdded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_IsAdded");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_BodyInterface_IsAdded(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_IsAdded$descriptor() {
        return JPC_BodyInterface_IsAdded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_BodyInterface_IsAdded(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyInterface_IsAdded$handle() {
        return JPC_BodyInterface_IsAdded.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_BodyInterface_IsAdded(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_IsAdded$address() {
        return JPC_BodyInterface_IsAdded.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_BodyInterface_IsAdded(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static boolean JPC_BodyInterface_IsAdded(MemorySegment in_iface, int in_body_id) {
        var mh$ = JPC_BodyInterface_IsAdded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_IsAdded", in_iface, in_body_id);
            }
            return (boolean)mh$.invokeExact(in_iface, in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_SetLinearAndAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_SetLinearAndAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetLinearAndAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_SetLinearAndAngularVelocity$descriptor() {
        return JPC_BodyInterface_SetLinearAndAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetLinearAndAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_SetLinearAndAngularVelocity$handle() {
        return JPC_BodyInterface_SetLinearAndAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetLinearAndAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_SetLinearAndAngularVelocity$address() {
        return JPC_BodyInterface_SetLinearAndAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetLinearAndAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_SetLinearAndAngularVelocity(MemorySegment in_iface, int in_body_id, MemorySegment in_linear_velocity, MemorySegment in_angular_velocity) {
        var mh$ = JPC_BodyInterface_SetLinearAndAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_SetLinearAndAngularVelocity", in_iface, in_body_id, in_linear_velocity, in_angular_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, in_linear_velocity, in_angular_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetLinearAndAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetLinearAndAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetLinearAndAngularVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_linear_velocity[3], float out_angular_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetLinearAndAngularVelocity$descriptor() {
        return JPC_BodyInterface_GetLinearAndAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetLinearAndAngularVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_linear_velocity[3], float out_angular_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetLinearAndAngularVelocity$handle() {
        return JPC_BodyInterface_GetLinearAndAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetLinearAndAngularVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_linear_velocity[3], float out_angular_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetLinearAndAngularVelocity$address() {
        return JPC_BodyInterface_GetLinearAndAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetLinearAndAngularVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_linear_velocity[3], float out_angular_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_GetLinearAndAngularVelocity(MemorySegment in_iface, int in_body_id, MemorySegment out_linear_velocity, MemorySegment out_angular_velocity) {
        var mh$ = JPC_BodyInterface_GetLinearAndAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetLinearAndAngularVelocity", in_iface, in_body_id, out_linear_velocity, out_angular_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, out_linear_velocity, out_angular_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_MoveKinematic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_MoveKinematic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_MoveKinematic(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_target_position[3], const float in_target_rotation[4], float in_delta_time)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_MoveKinematic$descriptor() {
        return JPC_BodyInterface_MoveKinematic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_MoveKinematic(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_target_position[3], const float in_target_rotation[4], float in_delta_time)
     * }
     */
    public static MethodHandle JPC_BodyInterface_MoveKinematic$handle() {
        return JPC_BodyInterface_MoveKinematic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_MoveKinematic(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_target_position[3], const float in_target_rotation[4], float in_delta_time)
     * }
     */
    public static MemorySegment JPC_BodyInterface_MoveKinematic$address() {
        return JPC_BodyInterface_MoveKinematic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_MoveKinematic(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_target_position[3], const float in_target_rotation[4], float in_delta_time)
     * }
     */
    public static void JPC_BodyInterface_MoveKinematic(MemorySegment in_iface, int in_body_id, MemorySegment in_target_position, MemorySegment in_target_rotation, float in_delta_time) {
        var mh$ = JPC_BodyInterface_MoveKinematic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_MoveKinematic", in_iface, in_body_id, in_target_position, in_target_rotation, in_delta_time);
            }
            mh$.invokeExact(in_iface, in_body_id, in_target_position, in_target_rotation, in_delta_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_SetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_SetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetLinearVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_SetLinearVelocity$descriptor() {
        return JPC_BodyInterface_SetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetLinearVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_SetLinearVelocity$handle() {
        return JPC_BodyInterface_SetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetLinearVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_SetLinearVelocity$address() {
        return JPC_BodyInterface_SetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetLinearVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_SetLinearVelocity(MemorySegment in_iface, int in_body_id, MemorySegment in_velocity) {
        var mh$ = JPC_BodyInterface_SetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_SetLinearVelocity", in_iface, in_body_id, in_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, in_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetLinearVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetLinearVelocity$descriptor() {
        return JPC_BodyInterface_GetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetLinearVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetLinearVelocity$handle() {
        return JPC_BodyInterface_GetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetLinearVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetLinearVelocity$address() {
        return JPC_BodyInterface_GetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetLinearVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_GetLinearVelocity(MemorySegment in_iface, int in_body_id, MemorySegment out_velocity) {
        var mh$ = JPC_BodyInterface_GetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetLinearVelocity", in_iface, in_body_id, out_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, out_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddLinearVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddLinearVelocity$descriptor() {
        return JPC_BodyInterface_AddLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddLinearVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddLinearVelocity$handle() {
        return JPC_BodyInterface_AddLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddLinearVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddLinearVelocity$address() {
        return JPC_BodyInterface_AddLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddLinearVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_AddLinearVelocity(MemorySegment in_iface, int in_body_id, MemorySegment in_velocity) {
        var mh$ = JPC_BodyInterface_AddLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddLinearVelocity", in_iface, in_body_id, in_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, in_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddLinearAndAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddLinearAndAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddLinearAndAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddLinearAndAngularVelocity$descriptor() {
        return JPC_BodyInterface_AddLinearAndAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddLinearAndAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddLinearAndAngularVelocity$handle() {
        return JPC_BodyInterface_AddLinearAndAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddLinearAndAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddLinearAndAngularVelocity$address() {
        return JPC_BodyInterface_AddLinearAndAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddLinearAndAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_AddLinearAndAngularVelocity(MemorySegment in_iface, int in_body_id, MemorySegment in_linear_velocity, MemorySegment in_angular_velocity) {
        var mh$ = JPC_BodyInterface_AddLinearAndAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddLinearAndAngularVelocity", in_iface, in_body_id, in_linear_velocity, in_angular_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, in_linear_velocity, in_angular_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_SetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_SetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_SetAngularVelocity$descriptor() {
        return JPC_BodyInterface_SetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_SetAngularVelocity$handle() {
        return JPC_BodyInterface_SetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_SetAngularVelocity$address() {
        return JPC_BodyInterface_SetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetAngularVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_SetAngularVelocity(MemorySegment in_iface, int in_body_id, MemorySegment in_velocity) {
        var mh$ = JPC_BodyInterface_SetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_SetAngularVelocity", in_iface, in_body_id, in_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, in_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetAngularVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetAngularVelocity$descriptor() {
        return JPC_BodyInterface_GetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetAngularVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetAngularVelocity$handle() {
        return JPC_BodyInterface_GetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetAngularVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetAngularVelocity$address() {
        return JPC_BodyInterface_GetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetAngularVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_GetAngularVelocity(MemorySegment in_iface, int in_body_id, MemorySegment out_velocity) {
        var mh$ = JPC_BodyInterface_GetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetAngularVelocity", in_iface, in_body_id, out_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, out_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetPointVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetPointVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetPointVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_point[3], float out_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetPointVelocity$descriptor() {
        return JPC_BodyInterface_GetPointVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetPointVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_point[3], float out_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetPointVelocity$handle() {
        return JPC_BodyInterface_GetPointVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetPointVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_point[3], float out_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetPointVelocity$address() {
        return JPC_BodyInterface_GetPointVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetPointVelocity(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_point[3], float out_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_GetPointVelocity(MemorySegment in_iface, int in_body_id, MemorySegment in_point, MemorySegment out_velocity) {
        var mh$ = JPC_BodyInterface_GetPointVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetPointVelocity", in_iface, in_body_id, in_point, out_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, in_point, out_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetPosition(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Real out_position[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetPosition$descriptor() {
        return JPC_BodyInterface_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetPosition(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Real out_position[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetPosition$handle() {
        return JPC_BodyInterface_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetPosition(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Real out_position[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetPosition$address() {
        return JPC_BodyInterface_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetPosition(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Real out_position[3])
     * }
     */
    public static void JPC_BodyInterface_GetPosition(MemorySegment in_iface, int in_body_id, MemorySegment out_position) {
        var mh$ = JPC_BodyInterface_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetPosition", in_iface, in_body_id, out_position);
            }
            mh$.invokeExact(in_iface, in_body_id, out_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_SetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_SetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_position[3], JPC_Activation in_activation)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_SetPosition$descriptor() {
        return JPC_BodyInterface_SetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_position[3], JPC_Activation in_activation)
     * }
     */
    public static MethodHandle JPC_BodyInterface_SetPosition$handle() {
        return JPC_BodyInterface_SetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_position[3], JPC_Activation in_activation)
     * }
     */
    public static MemorySegment JPC_BodyInterface_SetPosition$address() {
        return JPC_BodyInterface_SetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_position[3], JPC_Activation in_activation)
     * }
     */
    public static void JPC_BodyInterface_SetPosition(MemorySegment in_iface, int in_body_id, MemorySegment in_position, int in_activation) {
        var mh$ = JPC_BodyInterface_SetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_SetPosition", in_iface, in_body_id, in_position, in_activation);
            }
            mh$.invokeExact(in_iface, in_body_id, in_position, in_activation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetCenterOfMassPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetCenterOfMassPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetCenterOfMassPosition(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Real out_position[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetCenterOfMassPosition$descriptor() {
        return JPC_BodyInterface_GetCenterOfMassPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetCenterOfMassPosition(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Real out_position[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetCenterOfMassPosition$handle() {
        return JPC_BodyInterface_GetCenterOfMassPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetCenterOfMassPosition(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Real out_position[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetCenterOfMassPosition$address() {
        return JPC_BodyInterface_GetCenterOfMassPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetCenterOfMassPosition(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_Real out_position[3])
     * }
     */
    public static void JPC_BodyInterface_GetCenterOfMassPosition(MemorySegment in_iface, int in_body_id, MemorySegment out_position) {
        var mh$ = JPC_BodyInterface_GetCenterOfMassPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetCenterOfMassPosition", in_iface, in_body_id, out_position);
            }
            mh$.invokeExact(in_iface, in_body_id, out_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetRotation(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_rotation[4])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetRotation$descriptor() {
        return JPC_BodyInterface_GetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetRotation(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_rotation[4])
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetRotation$handle() {
        return JPC_BodyInterface_GetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetRotation(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_rotation[4])
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetRotation$address() {
        return JPC_BodyInterface_GetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetRotation(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, float out_rotation[4])
     * }
     */
    public static void JPC_BodyInterface_GetRotation(MemorySegment in_iface, int in_body_id, MemorySegment out_rotation) {
        var mh$ = JPC_BodyInterface_GetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetRotation", in_iface, in_body_id, out_rotation);
            }
            mh$.invokeExact(in_iface, in_body_id, out_rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_SetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_SetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetRotation(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_rotation[4], JPC_Activation in_activation)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_SetRotation$descriptor() {
        return JPC_BodyInterface_SetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetRotation(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_rotation[4], JPC_Activation in_activation)
     * }
     */
    public static MethodHandle JPC_BodyInterface_SetRotation$handle() {
        return JPC_BodyInterface_SetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetRotation(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_rotation[4], JPC_Activation in_activation)
     * }
     */
    public static MemorySegment JPC_BodyInterface_SetRotation$address() {
        return JPC_BodyInterface_SetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetRotation(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_rotation[4], JPC_Activation in_activation)
     * }
     */
    public static void JPC_BodyInterface_SetRotation(MemorySegment in_iface, int in_body_id, MemorySegment in_rotation, int in_activation) {
        var mh$ = JPC_BodyInterface_SetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_SetRotation", in_iface, in_body_id, in_rotation, in_activation);
            }
            mh$.invokeExact(in_iface, in_body_id, in_rotation, in_activation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_ActivateBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_ActivateBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_ActivateBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_ActivateBody$descriptor() {
        return JPC_BodyInterface_ActivateBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_ActivateBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyInterface_ActivateBody$handle() {
        return JPC_BodyInterface_ActivateBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_ActivateBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_ActivateBody$address() {
        return JPC_BodyInterface_ActivateBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_ActivateBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static void JPC_BodyInterface_ActivateBody(MemorySegment in_iface, int in_body_id) {
        var mh$ = JPC_BodyInterface_ActivateBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_ActivateBody", in_iface, in_body_id);
            }
            mh$.invokeExact(in_iface, in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_DeactivateBody {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_DeactivateBody");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_DeactivateBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_DeactivateBody$descriptor() {
        return JPC_BodyInterface_DeactivateBody.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_DeactivateBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyInterface_DeactivateBody$handle() {
        return JPC_BodyInterface_DeactivateBody.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_DeactivateBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_DeactivateBody$address() {
        return JPC_BodyInterface_DeactivateBody.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_DeactivateBody(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static void JPC_BodyInterface_DeactivateBody(MemorySegment in_iface, int in_body_id) {
        var mh$ = JPC_BodyInterface_DeactivateBody.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_DeactivateBody", in_iface, in_body_id);
            }
            mh$.invokeExact(in_iface, in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_IsActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_IsActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_BodyInterface_IsActive(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_IsActive$descriptor() {
        return JPC_BodyInterface_IsActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_BodyInterface_IsActive(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyInterface_IsActive$handle() {
        return JPC_BodyInterface_IsActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_BodyInterface_IsActive(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_IsActive$address() {
        return JPC_BodyInterface_IsActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_BodyInterface_IsActive(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static boolean JPC_BodyInterface_IsActive(MemorySegment in_iface, int in_body_id) {
        var mh$ = JPC_BodyInterface_IsActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_IsActive", in_iface, in_body_id);
            }
            return (boolean)mh$.invokeExact(in_iface, in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_SetPositionRotationAndVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_SetPositionRotationAndVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetPositionRotationAndVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_position[3], const float in_rotation[4], const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_SetPositionRotationAndVelocity$descriptor() {
        return JPC_BodyInterface_SetPositionRotationAndVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetPositionRotationAndVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_position[3], const float in_rotation[4], const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_SetPositionRotationAndVelocity$handle() {
        return JPC_BodyInterface_SetPositionRotationAndVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetPositionRotationAndVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_position[3], const float in_rotation[4], const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_SetPositionRotationAndVelocity$address() {
        return JPC_BodyInterface_SetPositionRotationAndVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetPositionRotationAndVelocity(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const JPC_Real in_position[3], const float in_rotation[4], const float in_linear_velocity[3], const float in_angular_velocity[3])
     * }
     */
    public static void JPC_BodyInterface_SetPositionRotationAndVelocity(MemorySegment in_iface, int in_body_id, MemorySegment in_position, MemorySegment in_rotation, MemorySegment in_linear_velocity, MemorySegment in_angular_velocity) {
        var mh$ = JPC_BodyInterface_SetPositionRotationAndVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_SetPositionRotationAndVelocity", in_iface, in_body_id, in_position, in_rotation, in_linear_velocity, in_angular_velocity);
            }
            mh$.invokeExact(in_iface, in_body_id, in_position, in_rotation, in_linear_velocity, in_angular_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddForce {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddForce");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForce(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddForce$descriptor() {
        return JPC_BodyInterface_AddForce.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForce(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddForce$handle() {
        return JPC_BodyInterface_AddForce.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForce(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddForce$address() {
        return JPC_BodyInterface_AddForce.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForce(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3])
     * }
     */
    public static void JPC_BodyInterface_AddForce(MemorySegment in_iface, int in_body_id, MemorySegment in_force) {
        var mh$ = JPC_BodyInterface_AddForce.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddForce", in_iface, in_body_id, in_force);
            }
            mh$.invokeExact(in_iface, in_body_id, in_force);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddForceAtPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddForceAtPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForceAtPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3], const JPC_Real in_position[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddForceAtPosition$descriptor() {
        return JPC_BodyInterface_AddForceAtPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForceAtPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3], const JPC_Real in_position[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddForceAtPosition$handle() {
        return JPC_BodyInterface_AddForceAtPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForceAtPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3], const JPC_Real in_position[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddForceAtPosition$address() {
        return JPC_BodyInterface_AddForceAtPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForceAtPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3], const JPC_Real in_position[3])
     * }
     */
    public static void JPC_BodyInterface_AddForceAtPosition(MemorySegment in_iface, int in_body_id, MemorySegment in_force, MemorySegment in_position) {
        var mh$ = JPC_BodyInterface_AddForceAtPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddForceAtPosition", in_iface, in_body_id, in_force, in_position);
            }
            mh$.invokeExact(in_iface, in_body_id, in_force, in_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddTorque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddTorque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddTorque(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_torque[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddTorque$descriptor() {
        return JPC_BodyInterface_AddTorque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddTorque(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_torque[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddTorque$handle() {
        return JPC_BodyInterface_AddTorque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddTorque(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_torque[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddTorque$address() {
        return JPC_BodyInterface_AddTorque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddTorque(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_torque[3])
     * }
     */
    public static void JPC_BodyInterface_AddTorque(MemorySegment in_iface, int in_body_id, MemorySegment in_torque) {
        var mh$ = JPC_BodyInterface_AddTorque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddTorque", in_iface, in_body_id, in_torque);
            }
            mh$.invokeExact(in_iface, in_body_id, in_torque);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddForceAndTorque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddForceAndTorque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForceAndTorque(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3], const float in_torque[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddForceAndTorque$descriptor() {
        return JPC_BodyInterface_AddForceAndTorque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForceAndTorque(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3], const float in_torque[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddForceAndTorque$handle() {
        return JPC_BodyInterface_AddForceAndTorque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForceAndTorque(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3], const float in_torque[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddForceAndTorque$address() {
        return JPC_BodyInterface_AddForceAndTorque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddForceAndTorque(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_force[3], const float in_torque[3])
     * }
     */
    public static void JPC_BodyInterface_AddForceAndTorque(MemorySegment in_iface, int in_body_id, MemorySegment in_force, MemorySegment in_torque) {
        var mh$ = JPC_BodyInterface_AddForceAndTorque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddForceAndTorque", in_iface, in_body_id, in_force, in_torque);
            }
            mh$.invokeExact(in_iface, in_body_id, in_force, in_torque);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddImpulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddImpulse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddImpulse(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddImpulse$descriptor() {
        return JPC_BodyInterface_AddImpulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddImpulse(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddImpulse$handle() {
        return JPC_BodyInterface_AddImpulse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddImpulse(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddImpulse$address() {
        return JPC_BodyInterface_AddImpulse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddImpulse(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3])
     * }
     */
    public static void JPC_BodyInterface_AddImpulse(MemorySegment in_iface, int in_body_id, MemorySegment in_impulse) {
        var mh$ = JPC_BodyInterface_AddImpulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddImpulse", in_iface, in_body_id, in_impulse);
            }
            mh$.invokeExact(in_iface, in_body_id, in_impulse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddImpulseAtPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddImpulseAtPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddImpulseAtPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3], const JPC_Real in_position[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddImpulseAtPosition$descriptor() {
        return JPC_BodyInterface_AddImpulseAtPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddImpulseAtPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3], const JPC_Real in_position[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddImpulseAtPosition$handle() {
        return JPC_BodyInterface_AddImpulseAtPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddImpulseAtPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3], const JPC_Real in_position[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddImpulseAtPosition$address() {
        return JPC_BodyInterface_AddImpulseAtPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddImpulseAtPosition(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3], const JPC_Real in_position[3])
     * }
     */
    public static void JPC_BodyInterface_AddImpulseAtPosition(MemorySegment in_iface, int in_body_id, MemorySegment in_impulse, MemorySegment in_position) {
        var mh$ = JPC_BodyInterface_AddImpulseAtPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddImpulseAtPosition", in_iface, in_body_id, in_impulse, in_position);
            }
            mh$.invokeExact(in_iface, in_body_id, in_impulse, in_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_AddAngularImpulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_AddAngularImpulse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddAngularImpulse(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_AddAngularImpulse$descriptor() {
        return JPC_BodyInterface_AddAngularImpulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddAngularImpulse(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3])
     * }
     */
    public static MethodHandle JPC_BodyInterface_AddAngularImpulse$handle() {
        return JPC_BodyInterface_AddAngularImpulse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddAngularImpulse(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3])
     * }
     */
    public static MemorySegment JPC_BodyInterface_AddAngularImpulse$address() {
        return JPC_BodyInterface_AddAngularImpulse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_AddAngularImpulse(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, const float in_impulse[3])
     * }
     */
    public static void JPC_BodyInterface_AddAngularImpulse(MemorySegment in_iface, int in_body_id, MemorySegment in_impulse) {
        var mh$ = JPC_BodyInterface_AddAngularImpulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_AddAngularImpulse", in_iface, in_body_id, in_impulse);
            }
            mh$.invokeExact(in_iface, in_body_id, in_impulse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_CHAR,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_MotionType JPC_BodyInterface_GetMotionType(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetMotionType$descriptor() {
        return JPC_BodyInterface_GetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_MotionType JPC_BodyInterface_GetMotionType(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetMotionType$handle() {
        return JPC_BodyInterface_GetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_MotionType JPC_BodyInterface_GetMotionType(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetMotionType$address() {
        return JPC_BodyInterface_GetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_MotionType JPC_BodyInterface_GetMotionType(const JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static byte JPC_BodyInterface_GetMotionType(MemorySegment in_iface, int in_body_id) {
        var mh$ = JPC_BodyInterface_GetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetMotionType", in_iface, in_body_id);
            }
            return (byte)mh$.invokeExact(in_iface, in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_SetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_CHAR,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_SetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetMotionType(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_MotionType motion_type, JPC_Activation activation)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_SetMotionType$descriptor() {
        return JPC_BodyInterface_SetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetMotionType(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_MotionType motion_type, JPC_Activation activation)
     * }
     */
    public static MethodHandle JPC_BodyInterface_SetMotionType$handle() {
        return JPC_BodyInterface_SetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetMotionType(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_MotionType motion_type, JPC_Activation activation)
     * }
     */
    public static MemorySegment JPC_BodyInterface_SetMotionType$address() {
        return JPC_BodyInterface_SetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetMotionType(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_MotionType motion_type, JPC_Activation activation)
     * }
     */
    public static void JPC_BodyInterface_SetMotionType(MemorySegment in_iface, int in_body_id, byte motion_type, int activation) {
        var mh$ = JPC_BodyInterface_SetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_SetMotionType", in_iface, in_body_id, motion_type, activation);
            }
            mh$.invokeExact(in_iface, in_body_id, motion_type, activation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetObjectLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_SHORT,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetObjectLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_ObjectLayer JPC_BodyInterface_GetObjectLayer(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetObjectLayer$descriptor() {
        return JPC_BodyInterface_GetObjectLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_ObjectLayer JPC_BodyInterface_GetObjectLayer(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetObjectLayer$handle() {
        return JPC_BodyInterface_GetObjectLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_ObjectLayer JPC_BodyInterface_GetObjectLayer(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetObjectLayer$address() {
        return JPC_BodyInterface_GetObjectLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_ObjectLayer JPC_BodyInterface_GetObjectLayer(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static short JPC_BodyInterface_GetObjectLayer(MemorySegment in_iface, int in_body_id) {
        var mh$ = JPC_BodyInterface_GetObjectLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetObjectLayer", in_iface, in_body_id);
            }
            return (short)mh$.invokeExact(in_iface, in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_SetObjectLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_SHORT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_SetObjectLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetObjectLayer(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_ObjectLayer in_layer)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_SetObjectLayer$descriptor() {
        return JPC_BodyInterface_SetObjectLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetObjectLayer(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_ObjectLayer in_layer)
     * }
     */
    public static MethodHandle JPC_BodyInterface_SetObjectLayer$handle() {
        return JPC_BodyInterface_SetObjectLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetObjectLayer(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_ObjectLayer in_layer)
     * }
     */
    public static MemorySegment JPC_BodyInterface_SetObjectLayer$address() {
        return JPC_BodyInterface_SetObjectLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_SetObjectLayer(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id, JPC_ObjectLayer in_layer)
     * }
     */
    public static void JPC_BodyInterface_SetObjectLayer(MemorySegment in_iface, int in_body_id, short in_layer) {
        var mh$ = JPC_BodyInterface_SetObjectLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_SetObjectLayer", in_iface, in_body_id, in_layer);
            }
            mh$.invokeExact(in_iface, in_body_id, in_layer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetID");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_BodyID JPC_Body_GetID(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetID$descriptor() {
        return JPC_Body_GetID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_BodyID JPC_Body_GetID(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetID$handle() {
        return JPC_Body_GetID.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_BodyID JPC_Body_GetID(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetID$address() {
        return JPC_Body_GetID.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_BodyID JPC_Body_GetID(const JPC_Body *in_body)
     * }
     */
    public static int JPC_Body_GetID(MemorySegment in_body) {
        var mh$ = JPC_Body_GetID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetID", in_body);
            }
            return (int)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_IsActive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_IsActive");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsActive(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_IsActive$descriptor() {
        return JPC_Body_IsActive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsActive(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_IsActive$handle() {
        return JPC_Body_IsActive.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsActive(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_IsActive$address() {
        return JPC_Body_IsActive.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_Body_IsActive(const JPC_Body *in_body)
     * }
     */
    public static boolean JPC_Body_IsActive(MemorySegment in_body) {
        var mh$ = JPC_Body_IsActive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_IsActive", in_body);
            }
            return (boolean)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_IsStatic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_IsStatic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsStatic(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_IsStatic$descriptor() {
        return JPC_Body_IsStatic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsStatic(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_IsStatic$handle() {
        return JPC_Body_IsStatic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsStatic(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_IsStatic$address() {
        return JPC_Body_IsStatic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_Body_IsStatic(const JPC_Body *in_body)
     * }
     */
    public static boolean JPC_Body_IsStatic(MemorySegment in_body) {
        var mh$ = JPC_Body_IsStatic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_IsStatic", in_body);
            }
            return (boolean)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_IsKinematic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_IsKinematic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsKinematic(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_IsKinematic$descriptor() {
        return JPC_Body_IsKinematic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsKinematic(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_IsKinematic$handle() {
        return JPC_Body_IsKinematic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsKinematic(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_IsKinematic$address() {
        return JPC_Body_IsKinematic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_Body_IsKinematic(const JPC_Body *in_body)
     * }
     */
    public static boolean JPC_Body_IsKinematic(MemorySegment in_body) {
        var mh$ = JPC_Body_IsKinematic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_IsKinematic", in_body);
            }
            return (boolean)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_IsDynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_IsDynamic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsDynamic(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_IsDynamic$descriptor() {
        return JPC_Body_IsDynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsDynamic(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_IsDynamic$handle() {
        return JPC_Body_IsDynamic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsDynamic(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_IsDynamic$address() {
        return JPC_Body_IsDynamic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_Body_IsDynamic(const JPC_Body *in_body)
     * }
     */
    public static boolean JPC_Body_IsDynamic(MemorySegment in_body) {
        var mh$ = JPC_Body_IsDynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_IsDynamic", in_body);
            }
            return (boolean)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_CanBeKinematicOrDynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_CanBeKinematicOrDynamic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_Body_CanBeKinematicOrDynamic(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_CanBeKinematicOrDynamic$descriptor() {
        return JPC_Body_CanBeKinematicOrDynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_Body_CanBeKinematicOrDynamic(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_CanBeKinematicOrDynamic$handle() {
        return JPC_Body_CanBeKinematicOrDynamic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_Body_CanBeKinematicOrDynamic(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_CanBeKinematicOrDynamic$address() {
        return JPC_Body_CanBeKinematicOrDynamic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_Body_CanBeKinematicOrDynamic(const JPC_Body *in_body)
     * }
     */
    public static boolean JPC_Body_CanBeKinematicOrDynamic(MemorySegment in_body) {
        var mh$ = JPC_Body_CanBeKinematicOrDynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_CanBeKinematicOrDynamic", in_body);
            }
            return (boolean)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetIsSensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_BOOL
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetIsSensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetIsSensor(JPC_Body *in_body, bool in_is_sensor)
     * }
     */
    public static FunctionDescriptor JPC_Body_SetIsSensor$descriptor() {
        return JPC_Body_SetIsSensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetIsSensor(JPC_Body *in_body, bool in_is_sensor)
     * }
     */
    public static MethodHandle JPC_Body_SetIsSensor$handle() {
        return JPC_Body_SetIsSensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetIsSensor(JPC_Body *in_body, bool in_is_sensor)
     * }
     */
    public static MemorySegment JPC_Body_SetIsSensor$address() {
        return JPC_Body_SetIsSensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetIsSensor(JPC_Body *in_body, bool in_is_sensor)
     * }
     */
    public static void JPC_Body_SetIsSensor(MemorySegment in_body, boolean in_is_sensor) {
        var mh$ = JPC_Body_SetIsSensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetIsSensor", in_body, in_is_sensor);
            }
            mh$.invokeExact(in_body, in_is_sensor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_IsSensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_IsSensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsSensor(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_IsSensor$descriptor() {
        return JPC_Body_IsSensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsSensor(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_IsSensor$handle() {
        return JPC_Body_IsSensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsSensor(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_IsSensor$address() {
        return JPC_Body_IsSensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_Body_IsSensor(const JPC_Body *in_body)
     * }
     */
    public static boolean JPC_Body_IsSensor(MemorySegment in_body) {
        var mh$ = JPC_Body_IsSensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_IsSensor", in_body);
            }
            return (boolean)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_CHAR,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_MotionType JPC_Body_GetMotionType(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetMotionType$descriptor() {
        return JPC_Body_GetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_MotionType JPC_Body_GetMotionType(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetMotionType$handle() {
        return JPC_Body_GetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_MotionType JPC_Body_GetMotionType(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetMotionType$address() {
        return JPC_Body_GetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_MotionType JPC_Body_GetMotionType(const JPC_Body *in_body)
     * }
     */
    public static byte JPC_Body_GetMotionType(MemorySegment in_body) {
        var mh$ = JPC_Body_GetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetMotionType", in_body);
            }
            return (byte)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetMotionType {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_CHAR
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetMotionType");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetMotionType(JPC_Body *in_body, JPC_MotionType in_motion_type)
     * }
     */
    public static FunctionDescriptor JPC_Body_SetMotionType$descriptor() {
        return JPC_Body_SetMotionType.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetMotionType(JPC_Body *in_body, JPC_MotionType in_motion_type)
     * }
     */
    public static MethodHandle JPC_Body_SetMotionType$handle() {
        return JPC_Body_SetMotionType.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetMotionType(JPC_Body *in_body, JPC_MotionType in_motion_type)
     * }
     */
    public static MemorySegment JPC_Body_SetMotionType$address() {
        return JPC_Body_SetMotionType.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetMotionType(JPC_Body *in_body, JPC_MotionType in_motion_type)
     * }
     */
    public static void JPC_Body_SetMotionType(MemorySegment in_body, byte in_motion_type) {
        var mh$ = JPC_Body_SetMotionType.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetMotionType", in_body, in_motion_type);
            }
            mh$.invokeExact(in_body, in_motion_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetBroadPhaseLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_CHAR,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetBroadPhaseLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_BroadPhaseLayer JPC_Body_GetBroadPhaseLayer(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetBroadPhaseLayer$descriptor() {
        return JPC_Body_GetBroadPhaseLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_BroadPhaseLayer JPC_Body_GetBroadPhaseLayer(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetBroadPhaseLayer$handle() {
        return JPC_Body_GetBroadPhaseLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_BroadPhaseLayer JPC_Body_GetBroadPhaseLayer(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetBroadPhaseLayer$address() {
        return JPC_Body_GetBroadPhaseLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_BroadPhaseLayer JPC_Body_GetBroadPhaseLayer(const JPC_Body *in_body)
     * }
     */
    public static byte JPC_Body_GetBroadPhaseLayer(MemorySegment in_body) {
        var mh$ = JPC_Body_GetBroadPhaseLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetBroadPhaseLayer", in_body);
            }
            return (byte)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetObjectLayer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_SHORT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetObjectLayer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_ObjectLayer JPC_Body_GetObjectLayer(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetObjectLayer$descriptor() {
        return JPC_Body_GetObjectLayer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_ObjectLayer JPC_Body_GetObjectLayer(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetObjectLayer$handle() {
        return JPC_Body_GetObjectLayer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_ObjectLayer JPC_Body_GetObjectLayer(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetObjectLayer$address() {
        return JPC_Body_GetObjectLayer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_ObjectLayer JPC_Body_GetObjectLayer(const JPC_Body *in_body)
     * }
     */
    public static short JPC_Body_GetObjectLayer(MemorySegment in_body) {
        var mh$ = JPC_Body_GetObjectLayer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetObjectLayer", in_body);
            }
            return (short)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetCollisionGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetCollisionGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_CollisionGroup *JPC_Body_GetCollisionGroup(JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetCollisionGroup$descriptor() {
        return JPC_Body_GetCollisionGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_CollisionGroup *JPC_Body_GetCollisionGroup(JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetCollisionGroup$handle() {
        return JPC_Body_GetCollisionGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_CollisionGroup *JPC_Body_GetCollisionGroup(JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetCollisionGroup$address() {
        return JPC_Body_GetCollisionGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_CollisionGroup *JPC_Body_GetCollisionGroup(JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetCollisionGroup(MemorySegment in_body) {
        var mh$ = JPC_Body_GetCollisionGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetCollisionGroup", in_body);
            }
            return (MemorySegment)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetCollisionGroup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetCollisionGroup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetCollisionGroup(JPC_Body *in_body, const JPC_CollisionGroup *in_group)
     * }
     */
    public static FunctionDescriptor JPC_Body_SetCollisionGroup$descriptor() {
        return JPC_Body_SetCollisionGroup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetCollisionGroup(JPC_Body *in_body, const JPC_CollisionGroup *in_group)
     * }
     */
    public static MethodHandle JPC_Body_SetCollisionGroup$handle() {
        return JPC_Body_SetCollisionGroup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetCollisionGroup(JPC_Body *in_body, const JPC_CollisionGroup *in_group)
     * }
     */
    public static MemorySegment JPC_Body_SetCollisionGroup$address() {
        return JPC_Body_SetCollisionGroup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetCollisionGroup(JPC_Body *in_body, const JPC_CollisionGroup *in_group)
     * }
     */
    public static void JPC_Body_SetCollisionGroup(MemorySegment in_body, MemorySegment in_group) {
        var mh$ = JPC_Body_SetCollisionGroup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetCollisionGroup", in_body, in_group);
            }
            mh$.invokeExact(in_body, in_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetAllowSleeping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetAllowSleeping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_Body_GetAllowSleeping(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetAllowSleeping$descriptor() {
        return JPC_Body_GetAllowSleeping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_Body_GetAllowSleeping(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetAllowSleeping$handle() {
        return JPC_Body_GetAllowSleeping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_Body_GetAllowSleeping(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetAllowSleeping$address() {
        return JPC_Body_GetAllowSleeping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_Body_GetAllowSleeping(const JPC_Body *in_body)
     * }
     */
    public static boolean JPC_Body_GetAllowSleeping(MemorySegment in_body) {
        var mh$ = JPC_Body_GetAllowSleeping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetAllowSleeping", in_body);
            }
            return (boolean)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetAllowSleeping {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_BOOL
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetAllowSleeping");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetAllowSleeping(JPC_Body *in_body, bool in_allow_sleeping)
     * }
     */
    public static FunctionDescriptor JPC_Body_SetAllowSleeping$descriptor() {
        return JPC_Body_SetAllowSleeping.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetAllowSleeping(JPC_Body *in_body, bool in_allow_sleeping)
     * }
     */
    public static MethodHandle JPC_Body_SetAllowSleeping$handle() {
        return JPC_Body_SetAllowSleeping.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetAllowSleeping(JPC_Body *in_body, bool in_allow_sleeping)
     * }
     */
    public static MemorySegment JPC_Body_SetAllowSleeping$address() {
        return JPC_Body_SetAllowSleeping.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetAllowSleeping(JPC_Body *in_body, bool in_allow_sleeping)
     * }
     */
    public static void JPC_Body_SetAllowSleeping(MemorySegment in_body, boolean in_allow_sleeping) {
        var mh$ = JPC_Body_SetAllowSleeping.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetAllowSleeping", in_body, in_allow_sleeping);
            }
            mh$.invokeExact(in_body, in_allow_sleeping);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetFriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetFriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_Body_GetFriction(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetFriction$descriptor() {
        return JPC_Body_GetFriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_Body_GetFriction(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetFriction$handle() {
        return JPC_Body_GetFriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_Body_GetFriction(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetFriction$address() {
        return JPC_Body_GetFriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_Body_GetFriction(const JPC_Body *in_body)
     * }
     */
    public static float JPC_Body_GetFriction(MemorySegment in_body) {
        var mh$ = JPC_Body_GetFriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetFriction", in_body);
            }
            return (float)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetFriction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetFriction");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetFriction(JPC_Body *in_body, float in_friction)
     * }
     */
    public static FunctionDescriptor JPC_Body_SetFriction$descriptor() {
        return JPC_Body_SetFriction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetFriction(JPC_Body *in_body, float in_friction)
     * }
     */
    public static MethodHandle JPC_Body_SetFriction$handle() {
        return JPC_Body_SetFriction.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetFriction(JPC_Body *in_body, float in_friction)
     * }
     */
    public static MemorySegment JPC_Body_SetFriction$address() {
        return JPC_Body_SetFriction.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetFriction(JPC_Body *in_body, float in_friction)
     * }
     */
    public static void JPC_Body_SetFriction(MemorySegment in_body, float in_friction) {
        var mh$ = JPC_Body_SetFriction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetFriction", in_body, in_friction);
            }
            mh$.invokeExact(in_body, in_friction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetRestitution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_FLOAT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetRestitution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float JPC_Body_GetRestitution(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetRestitution$descriptor() {
        return JPC_Body_GetRestitution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float JPC_Body_GetRestitution(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetRestitution$handle() {
        return JPC_Body_GetRestitution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float JPC_Body_GetRestitution(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetRestitution$address() {
        return JPC_Body_GetRestitution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float JPC_Body_GetRestitution(const JPC_Body *in_body)
     * }
     */
    public static float JPC_Body_GetRestitution(MemorySegment in_body) {
        var mh$ = JPC_Body_GetRestitution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetRestitution", in_body);
            }
            return (float)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetRestitution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetRestitution");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetRestitution(JPC_Body *in_body, float in_restitution)
     * }
     */
    public static FunctionDescriptor JPC_Body_SetRestitution$descriptor() {
        return JPC_Body_SetRestitution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetRestitution(JPC_Body *in_body, float in_restitution)
     * }
     */
    public static MethodHandle JPC_Body_SetRestitution$handle() {
        return JPC_Body_SetRestitution.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetRestitution(JPC_Body *in_body, float in_restitution)
     * }
     */
    public static MemorySegment JPC_Body_SetRestitution$address() {
        return JPC_Body_SetRestitution.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetRestitution(JPC_Body *in_body, float in_restitution)
     * }
     */
    public static void JPC_Body_SetRestitution(MemorySegment in_body, float in_restitution) {
        var mh$ = JPC_Body_SetRestitution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetRestitution", in_body, in_restitution);
            }
            mh$.invokeExact(in_body, in_restitution);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetLinearVelocity(const JPC_Body *in_body, float out_linear_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetLinearVelocity$descriptor() {
        return JPC_Body_GetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetLinearVelocity(const JPC_Body *in_body, float out_linear_velocity[3])
     * }
     */
    public static MethodHandle JPC_Body_GetLinearVelocity$handle() {
        return JPC_Body_GetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetLinearVelocity(const JPC_Body *in_body, float out_linear_velocity[3])
     * }
     */
    public static MemorySegment JPC_Body_GetLinearVelocity$address() {
        return JPC_Body_GetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetLinearVelocity(const JPC_Body *in_body, float out_linear_velocity[3])
     * }
     */
    public static void JPC_Body_GetLinearVelocity(MemorySegment in_body, MemorySegment out_linear_velocity) {
        var mh$ = JPC_Body_GetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetLinearVelocity", in_body, out_linear_velocity);
            }
            mh$.invokeExact(in_body, out_linear_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetLinearVelocity(JPC_Body *in_body, const float in_linear_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_SetLinearVelocity$descriptor() {
        return JPC_Body_SetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetLinearVelocity(JPC_Body *in_body, const float in_linear_velocity[3])
     * }
     */
    public static MethodHandle JPC_Body_SetLinearVelocity$handle() {
        return JPC_Body_SetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetLinearVelocity(JPC_Body *in_body, const float in_linear_velocity[3])
     * }
     */
    public static MemorySegment JPC_Body_SetLinearVelocity$address() {
        return JPC_Body_SetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetLinearVelocity(JPC_Body *in_body, const float in_linear_velocity[3])
     * }
     */
    public static void JPC_Body_SetLinearVelocity(MemorySegment in_body, MemorySegment in_linear_velocity) {
        var mh$ = JPC_Body_SetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetLinearVelocity", in_body, in_linear_velocity);
            }
            mh$.invokeExact(in_body, in_linear_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetLinearVelocityClamped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetLinearVelocityClamped");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetLinearVelocityClamped(JPC_Body *in_body, const float in_linear_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_SetLinearVelocityClamped$descriptor() {
        return JPC_Body_SetLinearVelocityClamped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetLinearVelocityClamped(JPC_Body *in_body, const float in_linear_velocity[3])
     * }
     */
    public static MethodHandle JPC_Body_SetLinearVelocityClamped$handle() {
        return JPC_Body_SetLinearVelocityClamped.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetLinearVelocityClamped(JPC_Body *in_body, const float in_linear_velocity[3])
     * }
     */
    public static MemorySegment JPC_Body_SetLinearVelocityClamped$address() {
        return JPC_Body_SetLinearVelocityClamped.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetLinearVelocityClamped(JPC_Body *in_body, const float in_linear_velocity[3])
     * }
     */
    public static void JPC_Body_SetLinearVelocityClamped(MemorySegment in_body, MemorySegment in_linear_velocity) {
        var mh$ = JPC_Body_SetLinearVelocityClamped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetLinearVelocityClamped", in_body, in_linear_velocity);
            }
            mh$.invokeExact(in_body, in_linear_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetAngularVelocity(const JPC_Body *in_body, float out_angular_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetAngularVelocity$descriptor() {
        return JPC_Body_GetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetAngularVelocity(const JPC_Body *in_body, float out_angular_velocity[3])
     * }
     */
    public static MethodHandle JPC_Body_GetAngularVelocity$handle() {
        return JPC_Body_GetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetAngularVelocity(const JPC_Body *in_body, float out_angular_velocity[3])
     * }
     */
    public static MemorySegment JPC_Body_GetAngularVelocity$address() {
        return JPC_Body_GetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetAngularVelocity(const JPC_Body *in_body, float out_angular_velocity[3])
     * }
     */
    public static void JPC_Body_GetAngularVelocity(MemorySegment in_body, MemorySegment out_angular_velocity) {
        var mh$ = JPC_Body_GetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetAngularVelocity", in_body, out_angular_velocity);
            }
            mh$.invokeExact(in_body, out_angular_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetAngularVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetAngularVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetAngularVelocity(JPC_Body *in_body, const float in_angular_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_SetAngularVelocity$descriptor() {
        return JPC_Body_SetAngularVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetAngularVelocity(JPC_Body *in_body, const float in_angular_velocity[3])
     * }
     */
    public static MethodHandle JPC_Body_SetAngularVelocity$handle() {
        return JPC_Body_SetAngularVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetAngularVelocity(JPC_Body *in_body, const float in_angular_velocity[3])
     * }
     */
    public static MemorySegment JPC_Body_SetAngularVelocity$address() {
        return JPC_Body_SetAngularVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetAngularVelocity(JPC_Body *in_body, const float in_angular_velocity[3])
     * }
     */
    public static void JPC_Body_SetAngularVelocity(MemorySegment in_body, MemorySegment in_angular_velocity) {
        var mh$ = JPC_Body_SetAngularVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetAngularVelocity", in_body, in_angular_velocity);
            }
            mh$.invokeExact(in_body, in_angular_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetAngularVelocityClamped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetAngularVelocityClamped");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetAngularVelocityClamped(JPC_Body *in_body, const float in_angular_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_SetAngularVelocityClamped$descriptor() {
        return JPC_Body_SetAngularVelocityClamped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetAngularVelocityClamped(JPC_Body *in_body, const float in_angular_velocity[3])
     * }
     */
    public static MethodHandle JPC_Body_SetAngularVelocityClamped$handle() {
        return JPC_Body_SetAngularVelocityClamped.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetAngularVelocityClamped(JPC_Body *in_body, const float in_angular_velocity[3])
     * }
     */
    public static MemorySegment JPC_Body_SetAngularVelocityClamped$address() {
        return JPC_Body_SetAngularVelocityClamped.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetAngularVelocityClamped(JPC_Body *in_body, const float in_angular_velocity[3])
     * }
     */
    public static void JPC_Body_SetAngularVelocityClamped(MemorySegment in_body, MemorySegment in_angular_velocity) {
        var mh$ = JPC_Body_SetAngularVelocityClamped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetAngularVelocityClamped", in_body, in_angular_velocity);
            }
            mh$.invokeExact(in_body, in_angular_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetPointVelocityCOM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetPointVelocityCOM");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetPointVelocityCOM(const JPC_Body *in_body, const float in_point_relative_to_com[3], float out_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetPointVelocityCOM$descriptor() {
        return JPC_Body_GetPointVelocityCOM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetPointVelocityCOM(const JPC_Body *in_body, const float in_point_relative_to_com[3], float out_velocity[3])
     * }
     */
    public static MethodHandle JPC_Body_GetPointVelocityCOM$handle() {
        return JPC_Body_GetPointVelocityCOM.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetPointVelocityCOM(const JPC_Body *in_body, const float in_point_relative_to_com[3], float out_velocity[3])
     * }
     */
    public static MemorySegment JPC_Body_GetPointVelocityCOM$address() {
        return JPC_Body_GetPointVelocityCOM.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetPointVelocityCOM(const JPC_Body *in_body, const float in_point_relative_to_com[3], float out_velocity[3])
     * }
     */
    public static void JPC_Body_GetPointVelocityCOM(MemorySegment in_body, MemorySegment in_point_relative_to_com, MemorySegment out_velocity) {
        var mh$ = JPC_Body_GetPointVelocityCOM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetPointVelocityCOM", in_body, in_point_relative_to_com, out_velocity);
            }
            mh$.invokeExact(in_body, in_point_relative_to_com, out_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetPointVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetPointVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetPointVelocity(const JPC_Body *in_body, const JPC_Real in_point[3], float out_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetPointVelocity$descriptor() {
        return JPC_Body_GetPointVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetPointVelocity(const JPC_Body *in_body, const JPC_Real in_point[3], float out_velocity[3])
     * }
     */
    public static MethodHandle JPC_Body_GetPointVelocity$handle() {
        return JPC_Body_GetPointVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetPointVelocity(const JPC_Body *in_body, const JPC_Real in_point[3], float out_velocity[3])
     * }
     */
    public static MemorySegment JPC_Body_GetPointVelocity$address() {
        return JPC_Body_GetPointVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetPointVelocity(const JPC_Body *in_body, const JPC_Real in_point[3], float out_velocity[3])
     * }
     */
    public static void JPC_Body_GetPointVelocity(MemorySegment in_body, MemorySegment in_point, MemorySegment out_velocity) {
        var mh$ = JPC_Body_GetPointVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetPointVelocity", in_body, in_point, out_velocity);
            }
            mh$.invokeExact(in_body, in_point, out_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_AddForce {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_AddForce");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddForce(JPC_Body *in_body, const float in_force[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_AddForce$descriptor() {
        return JPC_Body_AddForce.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddForce(JPC_Body *in_body, const float in_force[3])
     * }
     */
    public static MethodHandle JPC_Body_AddForce$handle() {
        return JPC_Body_AddForce.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddForce(JPC_Body *in_body, const float in_force[3])
     * }
     */
    public static MemorySegment JPC_Body_AddForce$address() {
        return JPC_Body_AddForce.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_AddForce(JPC_Body *in_body, const float in_force[3])
     * }
     */
    public static void JPC_Body_AddForce(MemorySegment in_body, MemorySegment in_force) {
        var mh$ = JPC_Body_AddForce.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_AddForce", in_body, in_force);
            }
            mh$.invokeExact(in_body, in_force);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_AddForceAtPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_AddForceAtPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddForceAtPosition(JPC_Body *in_body, const float in_force[3], const JPC_Real in_position[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_AddForceAtPosition$descriptor() {
        return JPC_Body_AddForceAtPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddForceAtPosition(JPC_Body *in_body, const float in_force[3], const JPC_Real in_position[3])
     * }
     */
    public static MethodHandle JPC_Body_AddForceAtPosition$handle() {
        return JPC_Body_AddForceAtPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddForceAtPosition(JPC_Body *in_body, const float in_force[3], const JPC_Real in_position[3])
     * }
     */
    public static MemorySegment JPC_Body_AddForceAtPosition$address() {
        return JPC_Body_AddForceAtPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_AddForceAtPosition(JPC_Body *in_body, const float in_force[3], const JPC_Real in_position[3])
     * }
     */
    public static void JPC_Body_AddForceAtPosition(MemorySegment in_body, MemorySegment in_force, MemorySegment in_position) {
        var mh$ = JPC_Body_AddForceAtPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_AddForceAtPosition", in_body, in_force, in_position);
            }
            mh$.invokeExact(in_body, in_force, in_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_AddTorque {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_AddTorque");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddTorque(JPC_Body *in_body, const float in_torque[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_AddTorque$descriptor() {
        return JPC_Body_AddTorque.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddTorque(JPC_Body *in_body, const float in_torque[3])
     * }
     */
    public static MethodHandle JPC_Body_AddTorque$handle() {
        return JPC_Body_AddTorque.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddTorque(JPC_Body *in_body, const float in_torque[3])
     * }
     */
    public static MemorySegment JPC_Body_AddTorque$address() {
        return JPC_Body_AddTorque.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_AddTorque(JPC_Body *in_body, const float in_torque[3])
     * }
     */
    public static void JPC_Body_AddTorque(MemorySegment in_body, MemorySegment in_torque) {
        var mh$ = JPC_Body_AddTorque.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_AddTorque", in_body, in_torque);
            }
            mh$.invokeExact(in_body, in_torque);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetInverseInertia {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetInverseInertia");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetInverseInertia(const JPC_Body *in_body, float out_inverse_inertia[16])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetInverseInertia$descriptor() {
        return JPC_Body_GetInverseInertia.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetInverseInertia(const JPC_Body *in_body, float out_inverse_inertia[16])
     * }
     */
    public static MethodHandle JPC_Body_GetInverseInertia$handle() {
        return JPC_Body_GetInverseInertia.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetInverseInertia(const JPC_Body *in_body, float out_inverse_inertia[16])
     * }
     */
    public static MemorySegment JPC_Body_GetInverseInertia$address() {
        return JPC_Body_GetInverseInertia.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetInverseInertia(const JPC_Body *in_body, float out_inverse_inertia[16])
     * }
     */
    public static void JPC_Body_GetInverseInertia(MemorySegment in_body, MemorySegment out_inverse_inertia) {
        var mh$ = JPC_Body_GetInverseInertia.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetInverseInertia", in_body, out_inverse_inertia);
            }
            mh$.invokeExact(in_body, out_inverse_inertia);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_AddImpulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_AddImpulse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddImpulse(JPC_Body *in_body, const float in_impulse[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_AddImpulse$descriptor() {
        return JPC_Body_AddImpulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddImpulse(JPC_Body *in_body, const float in_impulse[3])
     * }
     */
    public static MethodHandle JPC_Body_AddImpulse$handle() {
        return JPC_Body_AddImpulse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddImpulse(JPC_Body *in_body, const float in_impulse[3])
     * }
     */
    public static MemorySegment JPC_Body_AddImpulse$address() {
        return JPC_Body_AddImpulse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_AddImpulse(JPC_Body *in_body, const float in_impulse[3])
     * }
     */
    public static void JPC_Body_AddImpulse(MemorySegment in_body, MemorySegment in_impulse) {
        var mh$ = JPC_Body_AddImpulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_AddImpulse", in_body, in_impulse);
            }
            mh$.invokeExact(in_body, in_impulse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_AddImpulseAtPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_AddImpulseAtPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddImpulseAtPosition(JPC_Body *in_body, const float in_impulse[3], const JPC_Real in_position[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_AddImpulseAtPosition$descriptor() {
        return JPC_Body_AddImpulseAtPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddImpulseAtPosition(JPC_Body *in_body, const float in_impulse[3], const JPC_Real in_position[3])
     * }
     */
    public static MethodHandle JPC_Body_AddImpulseAtPosition$handle() {
        return JPC_Body_AddImpulseAtPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddImpulseAtPosition(JPC_Body *in_body, const float in_impulse[3], const JPC_Real in_position[3])
     * }
     */
    public static MemorySegment JPC_Body_AddImpulseAtPosition$address() {
        return JPC_Body_AddImpulseAtPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_AddImpulseAtPosition(JPC_Body *in_body, const float in_impulse[3], const JPC_Real in_position[3])
     * }
     */
    public static void JPC_Body_AddImpulseAtPosition(MemorySegment in_body, MemorySegment in_impulse, MemorySegment in_position) {
        var mh$ = JPC_Body_AddImpulseAtPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_AddImpulseAtPosition", in_body, in_impulse, in_position);
            }
            mh$.invokeExact(in_body, in_impulse, in_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_AddAngularImpulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_AddAngularImpulse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddAngularImpulse(JPC_Body *in_body, const float in_angular_impulse[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_AddAngularImpulse$descriptor() {
        return JPC_Body_AddAngularImpulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddAngularImpulse(JPC_Body *in_body, const float in_angular_impulse[3])
     * }
     */
    public static MethodHandle JPC_Body_AddAngularImpulse$handle() {
        return JPC_Body_AddAngularImpulse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_AddAngularImpulse(JPC_Body *in_body, const float in_angular_impulse[3])
     * }
     */
    public static MemorySegment JPC_Body_AddAngularImpulse$address() {
        return JPC_Body_AddAngularImpulse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_AddAngularImpulse(JPC_Body *in_body, const float in_angular_impulse[3])
     * }
     */
    public static void JPC_Body_AddAngularImpulse(MemorySegment in_body, MemorySegment in_angular_impulse) {
        var mh$ = JPC_Body_AddAngularImpulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_AddAngularImpulse", in_body, in_angular_impulse);
            }
            mh$.invokeExact(in_body, in_angular_impulse);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_MoveKinematic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_MoveKinematic");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_MoveKinematic(JPC_Body *in_body, const JPC_Real in_target_position[3], const float in_target_rotation[4], float in_delta_time)
     * }
     */
    public static FunctionDescriptor JPC_Body_MoveKinematic$descriptor() {
        return JPC_Body_MoveKinematic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_MoveKinematic(JPC_Body *in_body, const JPC_Real in_target_position[3], const float in_target_rotation[4], float in_delta_time)
     * }
     */
    public static MethodHandle JPC_Body_MoveKinematic$handle() {
        return JPC_Body_MoveKinematic.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_MoveKinematic(JPC_Body *in_body, const JPC_Real in_target_position[3], const float in_target_rotation[4], float in_delta_time)
     * }
     */
    public static MemorySegment JPC_Body_MoveKinematic$address() {
        return JPC_Body_MoveKinematic.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_MoveKinematic(JPC_Body *in_body, const JPC_Real in_target_position[3], const float in_target_rotation[4], float in_delta_time)
     * }
     */
    public static void JPC_Body_MoveKinematic(MemorySegment in_body, MemorySegment in_target_position, MemorySegment in_target_rotation, float in_delta_time) {
        var mh$ = JPC_Body_MoveKinematic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_MoveKinematic", in_body, in_target_position, in_target_rotation, in_delta_time);
            }
            mh$.invokeExact(in_body, in_target_position, in_target_rotation, in_delta_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_ApplyBuoyancyImpulse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_FLOAT,
            jolt.C_FLOAT,
            jolt.C_FLOAT,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_FLOAT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_ApplyBuoyancyImpulse");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_ApplyBuoyancyImpulse(JPC_Body *in_body, const JPC_Real in_surface_position[3], const float in_surface_normal[3], float in_buoyancy, float in_linear_drag, float in_angular_drag, const float in_fluid_velocity[3], const float in_gravity[3], float in_delta_time)
     * }
     */
    public static FunctionDescriptor JPC_Body_ApplyBuoyancyImpulse$descriptor() {
        return JPC_Body_ApplyBuoyancyImpulse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_ApplyBuoyancyImpulse(JPC_Body *in_body, const JPC_Real in_surface_position[3], const float in_surface_normal[3], float in_buoyancy, float in_linear_drag, float in_angular_drag, const float in_fluid_velocity[3], const float in_gravity[3], float in_delta_time)
     * }
     */
    public static MethodHandle JPC_Body_ApplyBuoyancyImpulse$handle() {
        return JPC_Body_ApplyBuoyancyImpulse.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_ApplyBuoyancyImpulse(JPC_Body *in_body, const JPC_Real in_surface_position[3], const float in_surface_normal[3], float in_buoyancy, float in_linear_drag, float in_angular_drag, const float in_fluid_velocity[3], const float in_gravity[3], float in_delta_time)
     * }
     */
    public static MemorySegment JPC_Body_ApplyBuoyancyImpulse$address() {
        return JPC_Body_ApplyBuoyancyImpulse.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_ApplyBuoyancyImpulse(JPC_Body *in_body, const JPC_Real in_surface_position[3], const float in_surface_normal[3], float in_buoyancy, float in_linear_drag, float in_angular_drag, const float in_fluid_velocity[3], const float in_gravity[3], float in_delta_time)
     * }
     */
    public static void JPC_Body_ApplyBuoyancyImpulse(MemorySegment in_body, MemorySegment in_surface_position, MemorySegment in_surface_normal, float in_buoyancy, float in_linear_drag, float in_angular_drag, MemorySegment in_fluid_velocity, MemorySegment in_gravity, float in_delta_time) {
        var mh$ = JPC_Body_ApplyBuoyancyImpulse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_ApplyBuoyancyImpulse", in_body, in_surface_position, in_surface_normal, in_buoyancy, in_linear_drag, in_angular_drag, in_fluid_velocity, in_gravity, in_delta_time);
            }
            mh$.invokeExact(in_body, in_surface_position, in_surface_normal, in_buoyancy, in_linear_drag, in_angular_drag, in_fluid_velocity, in_gravity, in_delta_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_IsInBroadPhase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_IsInBroadPhase");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsInBroadPhase(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_IsInBroadPhase$descriptor() {
        return JPC_Body_IsInBroadPhase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsInBroadPhase(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_IsInBroadPhase$handle() {
        return JPC_Body_IsInBroadPhase.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsInBroadPhase(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_IsInBroadPhase$address() {
        return JPC_Body_IsInBroadPhase.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_Body_IsInBroadPhase(const JPC_Body *in_body)
     * }
     */
    public static boolean JPC_Body_IsInBroadPhase(MemorySegment in_body) {
        var mh$ = JPC_Body_IsInBroadPhase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_IsInBroadPhase", in_body);
            }
            return (boolean)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_IsCollisionCacheInvalid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_IsCollisionCacheInvalid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsCollisionCacheInvalid(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_IsCollisionCacheInvalid$descriptor() {
        return JPC_Body_IsCollisionCacheInvalid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsCollisionCacheInvalid(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_IsCollisionCacheInvalid$handle() {
        return JPC_Body_IsCollisionCacheInvalid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_Body_IsCollisionCacheInvalid(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_IsCollisionCacheInvalid$address() {
        return JPC_Body_IsCollisionCacheInvalid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_Body_IsCollisionCacheInvalid(const JPC_Body *in_body)
     * }
     */
    public static boolean JPC_Body_IsCollisionCacheInvalid(MemorySegment in_body) {
        var mh$ = JPC_Body_IsCollisionCacheInvalid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_IsCollisionCacheInvalid", in_body);
            }
            return (boolean)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPC_Shape *JPC_Body_GetShape(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetShape$descriptor() {
        return JPC_Body_GetShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPC_Shape *JPC_Body_GetShape(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetShape$handle() {
        return JPC_Body_GetShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPC_Shape *JPC_Body_GetShape(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetShape$address() {
        return JPC_Body_GetShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPC_Shape *JPC_Body_GetShape(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetShape(MemorySegment in_body) {
        var mh$ = JPC_Body_GetShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetShape", in_body);
            }
            return (MemorySegment)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetPosition(const JPC_Body *in_body, JPC_Real out_position[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetPosition$descriptor() {
        return JPC_Body_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetPosition(const JPC_Body *in_body, JPC_Real out_position[3])
     * }
     */
    public static MethodHandle JPC_Body_GetPosition$handle() {
        return JPC_Body_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetPosition(const JPC_Body *in_body, JPC_Real out_position[3])
     * }
     */
    public static MemorySegment JPC_Body_GetPosition$address() {
        return JPC_Body_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetPosition(const JPC_Body *in_body, JPC_Real out_position[3])
     * }
     */
    public static void JPC_Body_GetPosition(MemorySegment in_body, MemorySegment out_position) {
        var mh$ = JPC_Body_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetPosition", in_body, out_position);
            }
            mh$.invokeExact(in_body, out_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetRotation(const JPC_Body *in_body, float out_rotation[4])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetRotation$descriptor() {
        return JPC_Body_GetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetRotation(const JPC_Body *in_body, float out_rotation[4])
     * }
     */
    public static MethodHandle JPC_Body_GetRotation$handle() {
        return JPC_Body_GetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetRotation(const JPC_Body *in_body, float out_rotation[4])
     * }
     */
    public static MemorySegment JPC_Body_GetRotation$address() {
        return JPC_Body_GetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetRotation(const JPC_Body *in_body, float out_rotation[4])
     * }
     */
    public static void JPC_Body_GetRotation(MemorySegment in_body, MemorySegment out_rotation) {
        var mh$ = JPC_Body_GetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetRotation", in_body, out_rotation);
            }
            mh$.invokeExact(in_body, out_rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetWorldTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetWorldTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetWorldTransform$descriptor() {
        return JPC_Body_GetWorldTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static MethodHandle JPC_Body_GetWorldTransform$handle() {
        return JPC_Body_GetWorldTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static MemorySegment JPC_Body_GetWorldTransform$address() {
        return JPC_Body_GetWorldTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static void JPC_Body_GetWorldTransform(MemorySegment in_body, MemorySegment out_rotation, MemorySegment out_translation) {
        var mh$ = JPC_Body_GetWorldTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetWorldTransform", in_body, out_rotation, out_translation);
            }
            mh$.invokeExact(in_body, out_rotation, out_translation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetCenterOfMassPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetCenterOfMassPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetCenterOfMassPosition(const JPC_Body *in_body, JPC_Real out_position[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetCenterOfMassPosition$descriptor() {
        return JPC_Body_GetCenterOfMassPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetCenterOfMassPosition(const JPC_Body *in_body, JPC_Real out_position[3])
     * }
     */
    public static MethodHandle JPC_Body_GetCenterOfMassPosition$handle() {
        return JPC_Body_GetCenterOfMassPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetCenterOfMassPosition(const JPC_Body *in_body, JPC_Real out_position[3])
     * }
     */
    public static MemorySegment JPC_Body_GetCenterOfMassPosition$address() {
        return JPC_Body_GetCenterOfMassPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetCenterOfMassPosition(const JPC_Body *in_body, JPC_Real out_position[3])
     * }
     */
    public static void JPC_Body_GetCenterOfMassPosition(MemorySegment in_body, MemorySegment out_position) {
        var mh$ = JPC_Body_GetCenterOfMassPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetCenterOfMassPosition", in_body, out_position);
            }
            mh$.invokeExact(in_body, out_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetCenterOfMassTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetCenterOfMassTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetCenterOfMassTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetCenterOfMassTransform$descriptor() {
        return JPC_Body_GetCenterOfMassTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetCenterOfMassTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static MethodHandle JPC_Body_GetCenterOfMassTransform$handle() {
        return JPC_Body_GetCenterOfMassTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetCenterOfMassTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static MemorySegment JPC_Body_GetCenterOfMassTransform$address() {
        return JPC_Body_GetCenterOfMassTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetCenterOfMassTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static void JPC_Body_GetCenterOfMassTransform(MemorySegment in_body, MemorySegment out_rotation, MemorySegment out_translation) {
        var mh$ = JPC_Body_GetCenterOfMassTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetCenterOfMassTransform", in_body, out_rotation, out_translation);
            }
            mh$.invokeExact(in_body, out_rotation, out_translation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetInverseCenterOfMassTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetInverseCenterOfMassTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetInverseCenterOfMassTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetInverseCenterOfMassTransform$descriptor() {
        return JPC_Body_GetInverseCenterOfMassTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetInverseCenterOfMassTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static MethodHandle JPC_Body_GetInverseCenterOfMassTransform$handle() {
        return JPC_Body_GetInverseCenterOfMassTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetInverseCenterOfMassTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static MemorySegment JPC_Body_GetInverseCenterOfMassTransform$address() {
        return JPC_Body_GetInverseCenterOfMassTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetInverseCenterOfMassTransform(const JPC_Body *in_body, float out_rotation[9], JPC_Real out_translation[3])
     * }
     */
    public static void JPC_Body_GetInverseCenterOfMassTransform(MemorySegment in_body, MemorySegment out_rotation, MemorySegment out_translation) {
        var mh$ = JPC_Body_GetInverseCenterOfMassTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetInverseCenterOfMassTransform", in_body, out_rotation, out_translation);
            }
            mh$.invokeExact(in_body, out_rotation, out_translation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetWorldSpaceBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetWorldSpaceBounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldSpaceBounds(const JPC_Body *in_body, float out_min[3], float out_max[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetWorldSpaceBounds$descriptor() {
        return JPC_Body_GetWorldSpaceBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldSpaceBounds(const JPC_Body *in_body, float out_min[3], float out_max[3])
     * }
     */
    public static MethodHandle JPC_Body_GetWorldSpaceBounds$handle() {
        return JPC_Body_GetWorldSpaceBounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldSpaceBounds(const JPC_Body *in_body, float out_min[3], float out_max[3])
     * }
     */
    public static MemorySegment JPC_Body_GetWorldSpaceBounds$address() {
        return JPC_Body_GetWorldSpaceBounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldSpaceBounds(const JPC_Body *in_body, float out_min[3], float out_max[3])
     * }
     */
    public static void JPC_Body_GetWorldSpaceBounds(MemorySegment in_body, MemorySegment out_min, MemorySegment out_max) {
        var mh$ = JPC_Body_GetWorldSpaceBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetWorldSpaceBounds", in_body, out_min, out_max);
            }
            mh$.invokeExact(in_body, out_min, out_max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetMotionProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetMotionProperties");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_MotionProperties *JPC_Body_GetMotionProperties(JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetMotionProperties$descriptor() {
        return JPC_Body_GetMotionProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_MotionProperties *JPC_Body_GetMotionProperties(JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetMotionProperties$handle() {
        return JPC_Body_GetMotionProperties.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_MotionProperties *JPC_Body_GetMotionProperties(JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetMotionProperties$address() {
        return JPC_Body_GetMotionProperties.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_MotionProperties *JPC_Body_GetMotionProperties(JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetMotionProperties(MemorySegment in_body) {
        var mh$ = JPC_Body_GetMotionProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetMotionProperties", in_body);
            }
            return (MemorySegment)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_LONG_LONG,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint64_t JPC_Body_GetUserData(const JPC_Body *in_body)
     * }
     */
    public static FunctionDescriptor JPC_Body_GetUserData$descriptor() {
        return JPC_Body_GetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint64_t JPC_Body_GetUserData(const JPC_Body *in_body)
     * }
     */
    public static MethodHandle JPC_Body_GetUserData$handle() {
        return JPC_Body_GetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint64_t JPC_Body_GetUserData(const JPC_Body *in_body)
     * }
     */
    public static MemorySegment JPC_Body_GetUserData$address() {
        return JPC_Body_GetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint64_t JPC_Body_GetUserData(const JPC_Body *in_body)
     * }
     */
    public static long JPC_Body_GetUserData(MemorySegment in_body) {
        var mh$ = JPC_Body_GetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetUserData", in_body);
            }
            return (long)mh$.invokeExact(in_body);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_SetUserData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_LONG_LONG
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_SetUserData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetUserData(JPC_Body *in_body, uint64_t in_user_data)
     * }
     */
    public static FunctionDescriptor JPC_Body_SetUserData$descriptor() {
        return JPC_Body_SetUserData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetUserData(JPC_Body *in_body, uint64_t in_user_data)
     * }
     */
    public static MethodHandle JPC_Body_SetUserData$handle() {
        return JPC_Body_SetUserData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_SetUserData(JPC_Body *in_body, uint64_t in_user_data)
     * }
     */
    public static MemorySegment JPC_Body_SetUserData$address() {
        return JPC_Body_SetUserData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_SetUserData(JPC_Body *in_body, uint64_t in_user_data)
     * }
     */
    public static void JPC_Body_SetUserData(MemorySegment in_body, long in_user_data) {
        var mh$ = JPC_Body_SetUserData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_SetUserData", in_body, in_user_data);
            }
            mh$.invokeExact(in_body, in_user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Body_GetWorldSpaceSurfaceNormal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Body_GetWorldSpaceSurfaceNormal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldSpaceSurfaceNormal(const JPC_Body *in_body, JPC_SubShapeID in_sub_shape_id, const JPC_Real in_position[3], float out_normal_vector[3])
     * }
     */
    public static FunctionDescriptor JPC_Body_GetWorldSpaceSurfaceNormal$descriptor() {
        return JPC_Body_GetWorldSpaceSurfaceNormal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldSpaceSurfaceNormal(const JPC_Body *in_body, JPC_SubShapeID in_sub_shape_id, const JPC_Real in_position[3], float out_normal_vector[3])
     * }
     */
    public static MethodHandle JPC_Body_GetWorldSpaceSurfaceNormal$handle() {
        return JPC_Body_GetWorldSpaceSurfaceNormal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldSpaceSurfaceNormal(const JPC_Body *in_body, JPC_SubShapeID in_sub_shape_id, const JPC_Real in_position[3], float out_normal_vector[3])
     * }
     */
    public static MemorySegment JPC_Body_GetWorldSpaceSurfaceNormal$address() {
        return JPC_Body_GetWorldSpaceSurfaceNormal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Body_GetWorldSpaceSurfaceNormal(const JPC_Body *in_body, JPC_SubShapeID in_sub_shape_id, const JPC_Real in_position[3], float out_normal_vector[3])
     * }
     */
    public static void JPC_Body_GetWorldSpaceSurfaceNormal(MemorySegment in_body, int in_sub_shape_id, MemorySegment in_position, MemorySegment out_normal_vector) {
        var mh$ = JPC_Body_GetWorldSpaceSurfaceNormal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Body_GetWorldSpaceSurfaceNormal", in_body, in_sub_shape_id, in_position, out_normal_vector);
            }
            mh$.invokeExact(in_body, in_sub_shape_id, in_position, out_normal_vector);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyID_GetIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyID_GetIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint32_t JPC_BodyID_GetIndex(JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyID_GetIndex$descriptor() {
        return JPC_BodyID_GetIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint32_t JPC_BodyID_GetIndex(JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyID_GetIndex$handle() {
        return JPC_BodyID_GetIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint32_t JPC_BodyID_GetIndex(JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyID_GetIndex$address() {
        return JPC_BodyID_GetIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint32_t JPC_BodyID_GetIndex(JPC_BodyID in_body_id)
     * }
     */
    public static int JPC_BodyID_GetIndex(int in_body_id) {
        var mh$ = JPC_BodyID_GetIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyID_GetIndex", in_body_id);
            }
            return (int)mh$.invokeExact(in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyID_GetSequenceNumber {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_CHAR,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyID_GetSequenceNumber");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern uint8_t JPC_BodyID_GetSequenceNumber(JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyID_GetSequenceNumber$descriptor() {
        return JPC_BodyID_GetSequenceNumber.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern uint8_t JPC_BodyID_GetSequenceNumber(JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyID_GetSequenceNumber$handle() {
        return JPC_BodyID_GetSequenceNumber.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern uint8_t JPC_BodyID_GetSequenceNumber(JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyID_GetSequenceNumber$address() {
        return JPC_BodyID_GetSequenceNumber.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern uint8_t JPC_BodyID_GetSequenceNumber(JPC_BodyID in_body_id)
     * }
     */
    public static byte JPC_BodyID_GetSequenceNumber(int in_body_id) {
        var mh$ = JPC_BodyID_GetSequenceNumber.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyID_GetSequenceNumber", in_body_id);
            }
            return (byte)mh$.invokeExact(in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyID_IsInvalid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_BOOL,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyID_IsInvalid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool JPC_BodyID_IsInvalid(JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyID_IsInvalid$descriptor() {
        return JPC_BodyID_IsInvalid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool JPC_BodyID_IsInvalid(JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyID_IsInvalid$handle() {
        return JPC_BodyID_IsInvalid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool JPC_BodyID_IsInvalid(JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyID_IsInvalid$address() {
        return JPC_BodyID_IsInvalid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool JPC_BodyID_IsInvalid(JPC_BodyID in_body_id)
     * }
     */
    public static boolean JPC_BodyID_IsInvalid(int in_body_id) {
        var mh$ = JPC_BodyID_IsInvalid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyID_IsInvalid", in_body_id);
            }
            return (boolean)mh$.invokeExact(in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern JPC_CharacterSettings *JPC_CharacterSettings_Create()
     * }
     */
    public static class JPC_CharacterSettings_Create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                jolt.C_POINTER        );
        private static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterSettings_Create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private JPC_CharacterSettings_Create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern JPC_CharacterSettings *JPC_CharacterSettings_Create()
         * }
         */
        public static JPC_CharacterSettings_Create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new JPC_CharacterSettings_Create(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("JPC_CharacterSettings_Create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class JPC_CharacterSettings_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterSettings_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterSettings_Release(JPC_CharacterSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_CharacterSettings_Release$descriptor() {
        return JPC_CharacterSettings_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterSettings_Release(JPC_CharacterSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_CharacterSettings_Release$handle() {
        return JPC_CharacterSettings_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterSettings_Release(JPC_CharacterSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_CharacterSettings_Release$address() {
        return JPC_CharacterSettings_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterSettings_Release(JPC_CharacterSettings *in_settings)
     * }
     */
    public static void JPC_CharacterSettings_Release(MemorySegment in_settings) {
        var mh$ = JPC_CharacterSettings_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterSettings_Release", in_settings);
            }
            mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterSettings_AddRef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterSettings_AddRef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterSettings_AddRef(JPC_CharacterSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_CharacterSettings_AddRef$descriptor() {
        return JPC_CharacterSettings_AddRef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterSettings_AddRef(JPC_CharacterSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_CharacterSettings_AddRef$handle() {
        return JPC_CharacterSettings_AddRef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterSettings_AddRef(JPC_CharacterSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_CharacterSettings_AddRef$address() {
        return JPC_CharacterSettings_AddRef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterSettings_AddRef(JPC_CharacterSettings *in_settings)
     * }
     */
    public static void JPC_CharacterSettings_AddRef(MemorySegment in_settings) {
        var mh$ = JPC_CharacterSettings_AddRef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterSettings_AddRef", in_settings);
            }
            mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Character_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_LONG_LONG,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Character_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_Character *JPC_Character_Create(const JPC_CharacterSettings *in_settings, const JPC_Real in_position[3], const float in_rotation[4], uint64_t in_user_data, JPC_PhysicsSystem *in_physics_system)
     * }
     */
    public static FunctionDescriptor JPC_Character_Create$descriptor() {
        return JPC_Character_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_Character *JPC_Character_Create(const JPC_CharacterSettings *in_settings, const JPC_Real in_position[3], const float in_rotation[4], uint64_t in_user_data, JPC_PhysicsSystem *in_physics_system)
     * }
     */
    public static MethodHandle JPC_Character_Create$handle() {
        return JPC_Character_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_Character *JPC_Character_Create(const JPC_CharacterSettings *in_settings, const JPC_Real in_position[3], const float in_rotation[4], uint64_t in_user_data, JPC_PhysicsSystem *in_physics_system)
     * }
     */
    public static MemorySegment JPC_Character_Create$address() {
        return JPC_Character_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_Character *JPC_Character_Create(const JPC_CharacterSettings *in_settings, const JPC_Real in_position[3], const float in_rotation[4], uint64_t in_user_data, JPC_PhysicsSystem *in_physics_system)
     * }
     */
    public static MemorySegment JPC_Character_Create(MemorySegment in_settings, MemorySegment in_position, MemorySegment in_rotation, long in_user_data, MemorySegment in_physics_system) {
        var mh$ = JPC_Character_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Character_Create", in_settings, in_position, in_rotation, in_user_data, in_physics_system);
            }
            return (MemorySegment)mh$.invokeExact(in_settings, in_position, in_rotation, in_user_data, in_physics_system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Character_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Character_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Character_Destroy(JPC_Character *in_character)
     * }
     */
    public static FunctionDescriptor JPC_Character_Destroy$descriptor() {
        return JPC_Character_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Character_Destroy(JPC_Character *in_character)
     * }
     */
    public static MethodHandle JPC_Character_Destroy$handle() {
        return JPC_Character_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Character_Destroy(JPC_Character *in_character)
     * }
     */
    public static MemorySegment JPC_Character_Destroy$address() {
        return JPC_Character_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Character_Destroy(JPC_Character *in_character)
     * }
     */
    public static void JPC_Character_Destroy(MemorySegment in_character) {
        var mh$ = JPC_Character_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Character_Destroy", in_character);
            }
            mh$.invokeExact(in_character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Character_AddToPhysicsSystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_BOOL
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Character_AddToPhysicsSystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Character_AddToPhysicsSystem(JPC_Character *in_character, JPC_Activation in_activation, bool in_lock_bodies)
     * }
     */
    public static FunctionDescriptor JPC_Character_AddToPhysicsSystem$descriptor() {
        return JPC_Character_AddToPhysicsSystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Character_AddToPhysicsSystem(JPC_Character *in_character, JPC_Activation in_activation, bool in_lock_bodies)
     * }
     */
    public static MethodHandle JPC_Character_AddToPhysicsSystem$handle() {
        return JPC_Character_AddToPhysicsSystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Character_AddToPhysicsSystem(JPC_Character *in_character, JPC_Activation in_activation, bool in_lock_bodies)
     * }
     */
    public static MemorySegment JPC_Character_AddToPhysicsSystem$address() {
        return JPC_Character_AddToPhysicsSystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Character_AddToPhysicsSystem(JPC_Character *in_character, JPC_Activation in_activation, bool in_lock_bodies)
     * }
     */
    public static void JPC_Character_AddToPhysicsSystem(MemorySegment in_character, int in_activation, boolean in_lock_bodies) {
        var mh$ = JPC_Character_AddToPhysicsSystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Character_AddToPhysicsSystem", in_character, in_activation, in_lock_bodies);
            }
            mh$.invokeExact(in_character, in_activation, in_lock_bodies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Character_RemoveFromPhysicsSystem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_BOOL
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Character_RemoveFromPhysicsSystem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Character_RemoveFromPhysicsSystem(JPC_Character *in_character, bool in_lock_bodies)
     * }
     */
    public static FunctionDescriptor JPC_Character_RemoveFromPhysicsSystem$descriptor() {
        return JPC_Character_RemoveFromPhysicsSystem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Character_RemoveFromPhysicsSystem(JPC_Character *in_character, bool in_lock_bodies)
     * }
     */
    public static MethodHandle JPC_Character_RemoveFromPhysicsSystem$handle() {
        return JPC_Character_RemoveFromPhysicsSystem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Character_RemoveFromPhysicsSystem(JPC_Character *in_character, bool in_lock_bodies)
     * }
     */
    public static MemorySegment JPC_Character_RemoveFromPhysicsSystem$address() {
        return JPC_Character_RemoveFromPhysicsSystem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Character_RemoveFromPhysicsSystem(JPC_Character *in_character, bool in_lock_bodies)
     * }
     */
    public static void JPC_Character_RemoveFromPhysicsSystem(MemorySegment in_character, boolean in_lock_bodies) {
        var mh$ = JPC_Character_RemoveFromPhysicsSystem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Character_RemoveFromPhysicsSystem", in_character, in_lock_bodies);
            }
            mh$.invokeExact(in_character, in_lock_bodies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Character_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Character_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Character_GetPosition(const JPC_Character *in_character, JPC_Real out_position[3])
     * }
     */
    public static FunctionDescriptor JPC_Character_GetPosition$descriptor() {
        return JPC_Character_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Character_GetPosition(const JPC_Character *in_character, JPC_Real out_position[3])
     * }
     */
    public static MethodHandle JPC_Character_GetPosition$handle() {
        return JPC_Character_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Character_GetPosition(const JPC_Character *in_character, JPC_Real out_position[3])
     * }
     */
    public static MemorySegment JPC_Character_GetPosition$address() {
        return JPC_Character_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Character_GetPosition(const JPC_Character *in_character, JPC_Real out_position[3])
     * }
     */
    public static void JPC_Character_GetPosition(MemorySegment in_character, MemorySegment out_position) {
        var mh$ = JPC_Character_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Character_GetPosition", in_character, out_position);
            }
            mh$.invokeExact(in_character, out_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Character_SetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Character_SetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Character_SetPosition(JPC_Character *in_character, const JPC_Real in_position[3])
     * }
     */
    public static FunctionDescriptor JPC_Character_SetPosition$descriptor() {
        return JPC_Character_SetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Character_SetPosition(JPC_Character *in_character, const JPC_Real in_position[3])
     * }
     */
    public static MethodHandle JPC_Character_SetPosition$handle() {
        return JPC_Character_SetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Character_SetPosition(JPC_Character *in_character, const JPC_Real in_position[3])
     * }
     */
    public static MemorySegment JPC_Character_SetPosition$address() {
        return JPC_Character_SetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Character_SetPosition(JPC_Character *in_character, const JPC_Real in_position[3])
     * }
     */
    public static void JPC_Character_SetPosition(MemorySegment in_character, MemorySegment in_position) {
        var mh$ = JPC_Character_SetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Character_SetPosition", in_character, in_position);
            }
            mh$.invokeExact(in_character, in_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Character_GetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Character_GetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Character_GetLinearVelocity(const JPC_Character *in_character, float out_linear_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Character_GetLinearVelocity$descriptor() {
        return JPC_Character_GetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Character_GetLinearVelocity(const JPC_Character *in_character, float out_linear_velocity[3])
     * }
     */
    public static MethodHandle JPC_Character_GetLinearVelocity$handle() {
        return JPC_Character_GetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Character_GetLinearVelocity(const JPC_Character *in_character, float out_linear_velocity[3])
     * }
     */
    public static MemorySegment JPC_Character_GetLinearVelocity$address() {
        return JPC_Character_GetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Character_GetLinearVelocity(const JPC_Character *in_character, float out_linear_velocity[3])
     * }
     */
    public static void JPC_Character_GetLinearVelocity(MemorySegment in_character, MemorySegment out_linear_velocity) {
        var mh$ = JPC_Character_GetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Character_GetLinearVelocity", in_character, out_linear_velocity);
            }
            mh$.invokeExact(in_character, out_linear_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Character_SetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Character_SetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Character_SetLinearVelocity(JPC_Character *in_character, const float in_linear_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_Character_SetLinearVelocity$descriptor() {
        return JPC_Character_SetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Character_SetLinearVelocity(JPC_Character *in_character, const float in_linear_velocity[3])
     * }
     */
    public static MethodHandle JPC_Character_SetLinearVelocity$handle() {
        return JPC_Character_SetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Character_SetLinearVelocity(JPC_Character *in_character, const float in_linear_velocity[3])
     * }
     */
    public static MemorySegment JPC_Character_SetLinearVelocity$address() {
        return JPC_Character_SetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Character_SetLinearVelocity(JPC_Character *in_character, const float in_linear_velocity[3])
     * }
     */
    public static void JPC_Character_SetLinearVelocity(MemorySegment in_character, MemorySegment in_linear_velocity) {
        var mh$ = JPC_Character_SetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Character_SetLinearVelocity", in_character, in_linear_velocity);
            }
            mh$.invokeExact(in_character, in_linear_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern JPC_CharacterVirtualSettings *JPC_CharacterVirtualSettings_Create()
     * }
     */
    public static class JPC_CharacterVirtualSettings_Create {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                jolt.C_POINTER        );
        private static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtualSettings_Create");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private JPC_CharacterVirtualSettings_Create(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern JPC_CharacterVirtualSettings *JPC_CharacterVirtualSettings_Create()
         * }
         */
        public static JPC_CharacterVirtualSettings_Create makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new JPC_CharacterVirtualSettings_Create(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(Object... x0) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("JPC_CharacterVirtualSettings_Create", x0);
                }
                return (MemorySegment)spreader.invokeExact(x0);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class JPC_CharacterVirtualSettings_Release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtualSettings_Release");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtualSettings_Release(JPC_CharacterVirtualSettings *in_settings)
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtualSettings_Release$descriptor() {
        return JPC_CharacterVirtualSettings_Release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtualSettings_Release(JPC_CharacterVirtualSettings *in_settings)
     * }
     */
    public static MethodHandle JPC_CharacterVirtualSettings_Release$handle() {
        return JPC_CharacterVirtualSettings_Release.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtualSettings_Release(JPC_CharacterVirtualSettings *in_settings)
     * }
     */
    public static MemorySegment JPC_CharacterVirtualSettings_Release$address() {
        return JPC_CharacterVirtualSettings_Release.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtualSettings_Release(JPC_CharacterVirtualSettings *in_settings)
     * }
     */
    public static void JPC_CharacterVirtualSettings_Release(MemorySegment in_settings) {
        var mh$ = JPC_CharacterVirtualSettings_Release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtualSettings_Release", in_settings);
            }
            mh$.invokeExact(in_settings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_Create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_Create");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_CharacterVirtual *JPC_CharacterVirtual_Create(const JPC_CharacterVirtualSettings *in_settings, const JPC_Real in_position[3], const float in_rotation[4], JPC_PhysicsSystem *in_physics_system)
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_Create$descriptor() {
        return JPC_CharacterVirtual_Create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_CharacterVirtual *JPC_CharacterVirtual_Create(const JPC_CharacterVirtualSettings *in_settings, const JPC_Real in_position[3], const float in_rotation[4], JPC_PhysicsSystem *in_physics_system)
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_Create$handle() {
        return JPC_CharacterVirtual_Create.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_CharacterVirtual *JPC_CharacterVirtual_Create(const JPC_CharacterVirtualSettings *in_settings, const JPC_Real in_position[3], const float in_rotation[4], JPC_PhysicsSystem *in_physics_system)
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_Create$address() {
        return JPC_CharacterVirtual_Create.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_CharacterVirtual *JPC_CharacterVirtual_Create(const JPC_CharacterVirtualSettings *in_settings, const JPC_Real in_position[3], const float in_rotation[4], JPC_PhysicsSystem *in_physics_system)
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_Create(MemorySegment in_settings, MemorySegment in_position, MemorySegment in_rotation, MemorySegment in_physics_system) {
        var mh$ = JPC_CharacterVirtual_Create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_Create", in_settings, in_position, in_rotation, in_physics_system);
            }
            return (MemorySegment)mh$.invokeExact(in_settings, in_position, in_rotation, in_physics_system);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_Destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_Destroy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_Destroy(JPC_CharacterVirtual *in_character)
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_Destroy$descriptor() {
        return JPC_CharacterVirtual_Destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_Destroy(JPC_CharacterVirtual *in_character)
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_Destroy$handle() {
        return JPC_CharacterVirtual_Destroy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_Destroy(JPC_CharacterVirtual *in_character)
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_Destroy$address() {
        return JPC_CharacterVirtual_Destroy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_Destroy(JPC_CharacterVirtual *in_character)
     * }
     */
    public static void JPC_CharacterVirtual_Destroy(MemorySegment in_character) {
        var mh$ = JPC_CharacterVirtual_Destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_Destroy", in_character);
            }
            mh$.invokeExact(in_character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_Update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_FLOAT,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_Update");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_Update(JPC_CharacterVirtual *in_character, float in_delta_time, const float in_gravity[3], const void *in_broad_phase_layer_filter, const void *in_object_layer_filter, const void *in_body_filter, const void *in_shape_filter, JPC_TempAllocator *in_temp_allocator)
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_Update$descriptor() {
        return JPC_CharacterVirtual_Update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_Update(JPC_CharacterVirtual *in_character, float in_delta_time, const float in_gravity[3], const void *in_broad_phase_layer_filter, const void *in_object_layer_filter, const void *in_body_filter, const void *in_shape_filter, JPC_TempAllocator *in_temp_allocator)
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_Update$handle() {
        return JPC_CharacterVirtual_Update.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_Update(JPC_CharacterVirtual *in_character, float in_delta_time, const float in_gravity[3], const void *in_broad_phase_layer_filter, const void *in_object_layer_filter, const void *in_body_filter, const void *in_shape_filter, JPC_TempAllocator *in_temp_allocator)
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_Update$address() {
        return JPC_CharacterVirtual_Update.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_Update(JPC_CharacterVirtual *in_character, float in_delta_time, const float in_gravity[3], const void *in_broad_phase_layer_filter, const void *in_object_layer_filter, const void *in_body_filter, const void *in_shape_filter, JPC_TempAllocator *in_temp_allocator)
     * }
     */
    public static void JPC_CharacterVirtual_Update(MemorySegment in_character, float in_delta_time, MemorySegment in_gravity, MemorySegment in_broad_phase_layer_filter, MemorySegment in_object_layer_filter, MemorySegment in_body_filter, MemorySegment in_shape_filter, MemorySegment in_temp_allocator) {
        var mh$ = JPC_CharacterVirtual_Update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_Update", in_character, in_delta_time, in_gravity, in_broad_phase_layer_filter, in_object_layer_filter, in_body_filter, in_shape_filter, in_temp_allocator);
            }
            mh$.invokeExact(in_character, in_delta_time, in_gravity, in_broad_phase_layer_filter, in_object_layer_filter, in_body_filter, in_shape_filter, in_temp_allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_SetListener {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_SetListener");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetListener(JPC_CharacterVirtual *in_character, void *in_listener)
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_SetListener$descriptor() {
        return JPC_CharacterVirtual_SetListener.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetListener(JPC_CharacterVirtual *in_character, void *in_listener)
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_SetListener$handle() {
        return JPC_CharacterVirtual_SetListener.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetListener(JPC_CharacterVirtual *in_character, void *in_listener)
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_SetListener$address() {
        return JPC_CharacterVirtual_SetListener.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetListener(JPC_CharacterVirtual *in_character, void *in_listener)
     * }
     */
    public static void JPC_CharacterVirtual_SetListener(MemorySegment in_character, MemorySegment in_listener) {
        var mh$ = JPC_CharacterVirtual_SetListener.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_SetListener", in_character, in_listener);
            }
            mh$.invokeExact(in_character, in_listener);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_UpdateGroundVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_UpdateGroundVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_UpdateGroundVelocity(JPC_CharacterVirtual *in_character)
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_UpdateGroundVelocity$descriptor() {
        return JPC_CharacterVirtual_UpdateGroundVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_UpdateGroundVelocity(JPC_CharacterVirtual *in_character)
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_UpdateGroundVelocity$handle() {
        return JPC_CharacterVirtual_UpdateGroundVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_UpdateGroundVelocity(JPC_CharacterVirtual *in_character)
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_UpdateGroundVelocity$address() {
        return JPC_CharacterVirtual_UpdateGroundVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_UpdateGroundVelocity(JPC_CharacterVirtual *in_character)
     * }
     */
    public static void JPC_CharacterVirtual_UpdateGroundVelocity(MemorySegment in_character) {
        var mh$ = JPC_CharacterVirtual_UpdateGroundVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_UpdateGroundVelocity", in_character);
            }
            mh$.invokeExact(in_character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_GetGroundVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_GetGroundVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetGroundVelocity(const JPC_CharacterVirtual *in_character, float out_ground_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_GetGroundVelocity$descriptor() {
        return JPC_CharacterVirtual_GetGroundVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetGroundVelocity(const JPC_CharacterVirtual *in_character, float out_ground_velocity[3])
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_GetGroundVelocity$handle() {
        return JPC_CharacterVirtual_GetGroundVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetGroundVelocity(const JPC_CharacterVirtual *in_character, float out_ground_velocity[3])
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_GetGroundVelocity$address() {
        return JPC_CharacterVirtual_GetGroundVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetGroundVelocity(const JPC_CharacterVirtual *in_character, float out_ground_velocity[3])
     * }
     */
    public static void JPC_CharacterVirtual_GetGroundVelocity(MemorySegment in_character, MemorySegment out_ground_velocity) {
        var mh$ = JPC_CharacterVirtual_GetGroundVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_GetGroundVelocity", in_character, out_ground_velocity);
            }
            mh$.invokeExact(in_character, out_ground_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_GetGroundState {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_GetGroundState");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern JPC_CharacterGroundState JPC_CharacterVirtual_GetGroundState(JPC_CharacterVirtual *in_character)
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_GetGroundState$descriptor() {
        return JPC_CharacterVirtual_GetGroundState.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern JPC_CharacterGroundState JPC_CharacterVirtual_GetGroundState(JPC_CharacterVirtual *in_character)
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_GetGroundState$handle() {
        return JPC_CharacterVirtual_GetGroundState.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern JPC_CharacterGroundState JPC_CharacterVirtual_GetGroundState(JPC_CharacterVirtual *in_character)
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_GetGroundState$address() {
        return JPC_CharacterVirtual_GetGroundState.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern JPC_CharacterGroundState JPC_CharacterVirtual_GetGroundState(JPC_CharacterVirtual *in_character)
     * }
     */
    public static int JPC_CharacterVirtual_GetGroundState(MemorySegment in_character) {
        var mh$ = JPC_CharacterVirtual_GetGroundState.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_GetGroundState", in_character);
            }
            return (int)mh$.invokeExact(in_character);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_GetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_GetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetPosition(const JPC_CharacterVirtual *in_character, JPC_Real out_position[3])
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_GetPosition$descriptor() {
        return JPC_CharacterVirtual_GetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetPosition(const JPC_CharacterVirtual *in_character, JPC_Real out_position[3])
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_GetPosition$handle() {
        return JPC_CharacterVirtual_GetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetPosition(const JPC_CharacterVirtual *in_character, JPC_Real out_position[3])
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_GetPosition$address() {
        return JPC_CharacterVirtual_GetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetPosition(const JPC_CharacterVirtual *in_character, JPC_Real out_position[3])
     * }
     */
    public static void JPC_CharacterVirtual_GetPosition(MemorySegment in_character, MemorySegment out_position) {
        var mh$ = JPC_CharacterVirtual_GetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_GetPosition", in_character, out_position);
            }
            mh$.invokeExact(in_character, out_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_SetPosition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_SetPosition");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetPosition(JPC_CharacterVirtual *in_character, const JPC_Real in_position[3])
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_SetPosition$descriptor() {
        return JPC_CharacterVirtual_SetPosition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetPosition(JPC_CharacterVirtual *in_character, const JPC_Real in_position[3])
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_SetPosition$handle() {
        return JPC_CharacterVirtual_SetPosition.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetPosition(JPC_CharacterVirtual *in_character, const JPC_Real in_position[3])
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_SetPosition$address() {
        return JPC_CharacterVirtual_SetPosition.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetPosition(JPC_CharacterVirtual *in_character, const JPC_Real in_position[3])
     * }
     */
    public static void JPC_CharacterVirtual_SetPosition(MemorySegment in_character, MemorySegment in_position) {
        var mh$ = JPC_CharacterVirtual_SetPosition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_SetPosition", in_character, in_position);
            }
            mh$.invokeExact(in_character, in_position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_GetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_GetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetRotation(const JPC_CharacterVirtual *in_character, float out_rotation[4])
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_GetRotation$descriptor() {
        return JPC_CharacterVirtual_GetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetRotation(const JPC_CharacterVirtual *in_character, float out_rotation[4])
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_GetRotation$handle() {
        return JPC_CharacterVirtual_GetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetRotation(const JPC_CharacterVirtual *in_character, float out_rotation[4])
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_GetRotation$address() {
        return JPC_CharacterVirtual_GetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetRotation(const JPC_CharacterVirtual *in_character, float out_rotation[4])
     * }
     */
    public static void JPC_CharacterVirtual_GetRotation(MemorySegment in_character, MemorySegment out_rotation) {
        var mh$ = JPC_CharacterVirtual_GetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_GetRotation", in_character, out_rotation);
            }
            mh$.invokeExact(in_character, out_rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_SetRotation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_SetRotation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetRotation(JPC_CharacterVirtual *in_character, const float in_rotation[4])
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_SetRotation$descriptor() {
        return JPC_CharacterVirtual_SetRotation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetRotation(JPC_CharacterVirtual *in_character, const float in_rotation[4])
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_SetRotation$handle() {
        return JPC_CharacterVirtual_SetRotation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetRotation(JPC_CharacterVirtual *in_character, const float in_rotation[4])
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_SetRotation$address() {
        return JPC_CharacterVirtual_SetRotation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetRotation(JPC_CharacterVirtual *in_character, const float in_rotation[4])
     * }
     */
    public static void JPC_CharacterVirtual_SetRotation(MemorySegment in_character, MemorySegment in_rotation) {
        var mh$ = JPC_CharacterVirtual_SetRotation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_SetRotation", in_character, in_rotation);
            }
            mh$.invokeExact(in_character, in_rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_GetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_GetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetLinearVelocity(const JPC_CharacterVirtual *in_character, float out_linear_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_GetLinearVelocity$descriptor() {
        return JPC_CharacterVirtual_GetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetLinearVelocity(const JPC_CharacterVirtual *in_character, float out_linear_velocity[3])
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_GetLinearVelocity$handle() {
        return JPC_CharacterVirtual_GetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetLinearVelocity(const JPC_CharacterVirtual *in_character, float out_linear_velocity[3])
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_GetLinearVelocity$address() {
        return JPC_CharacterVirtual_GetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_GetLinearVelocity(const JPC_CharacterVirtual *in_character, float out_linear_velocity[3])
     * }
     */
    public static void JPC_CharacterVirtual_GetLinearVelocity(MemorySegment in_character, MemorySegment out_linear_velocity) {
        var mh$ = JPC_CharacterVirtual_GetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_GetLinearVelocity", in_character, out_linear_velocity);
            }
            mh$.invokeExact(in_character, out_linear_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_CharacterVirtual_SetLinearVelocity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_CharacterVirtual_SetLinearVelocity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetLinearVelocity(JPC_CharacterVirtual *in_character, const float in_linear_velocity[3])
     * }
     */
    public static FunctionDescriptor JPC_CharacterVirtual_SetLinearVelocity$descriptor() {
        return JPC_CharacterVirtual_SetLinearVelocity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetLinearVelocity(JPC_CharacterVirtual *in_character, const float in_linear_velocity[3])
     * }
     */
    public static MethodHandle JPC_CharacterVirtual_SetLinearVelocity$handle() {
        return JPC_CharacterVirtual_SetLinearVelocity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetLinearVelocity(JPC_CharacterVirtual *in_character, const float in_linear_velocity[3])
     * }
     */
    public static MemorySegment JPC_CharacterVirtual_SetLinearVelocity$address() {
        return JPC_CharacterVirtual_SetLinearVelocity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_CharacterVirtual_SetLinearVelocity(JPC_CharacterVirtual *in_character, const float in_linear_velocity[3])
     * }
     */
    public static void JPC_CharacterVirtual_SetLinearVelocity(MemorySegment in_character, MemorySegment in_linear_velocity) {
        var mh$ = JPC_CharacterVirtual_SetLinearVelocity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_CharacterVirtual_SetLinearVelocity", in_character, in_linear_velocity);
            }
            mh$.invokeExact(in_character, in_linear_velocity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetShape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_INT
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetShape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const JPC_Shape *JPC_BodyInterface_GetShape(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetShape$descriptor() {
        return JPC_BodyInterface_GetShape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const JPC_Shape *JPC_BodyInterface_GetShape(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetShape$handle() {
        return JPC_BodyInterface_GetShape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const JPC_Shape *JPC_BodyInterface_GetShape(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetShape$address() {
        return JPC_BodyInterface_GetShape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const JPC_Shape *JPC_BodyInterface_GetShape(JPC_BodyInterface *in_iface, JPC_BodyID in_body_id)
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetShape(MemorySegment in_iface, int in_body_id) {
        var mh$ = JPC_BodyInterface_GetShape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetShape", in_iface, in_body_id);
            }
            return (MemorySegment)mh$.invokeExact(in_iface, in_body_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_PhysicsSystem_GetBodies {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_PhysicsSystem_GetBodies");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_PhysicsSystem_GetBodies(JPC_PhysicsSystem *in_physics_system, JPC_Body **out_bodies)
     * }
     */
    public static FunctionDescriptor JPC_PhysicsSystem_GetBodies$descriptor() {
        return JPC_PhysicsSystem_GetBodies.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_PhysicsSystem_GetBodies(JPC_PhysicsSystem *in_physics_system, JPC_Body **out_bodies)
     * }
     */
    public static MethodHandle JPC_PhysicsSystem_GetBodies$handle() {
        return JPC_PhysicsSystem_GetBodies.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_PhysicsSystem_GetBodies(JPC_PhysicsSystem *in_physics_system, JPC_Body **out_bodies)
     * }
     */
    public static MemorySegment JPC_PhysicsSystem_GetBodies$address() {
        return JPC_PhysicsSystem_GetBodies.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_PhysicsSystem_GetBodies(JPC_PhysicsSystem *in_physics_system, JPC_Body **out_bodies)
     * }
     */
    public static void JPC_PhysicsSystem_GetBodies(MemorySegment in_physics_system, MemorySegment out_bodies) {
        var mh$ = JPC_PhysicsSystem_GetBodies.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_PhysicsSystem_GetBodies", in_physics_system, out_bodies);
            }
            mh$.invokeExact(in_physics_system, out_bodies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_GetLocalBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_GetLocalBounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Shape_GetLocalBounds(const JPC_Shape *in_shape, float out_min[3], float out_max[3])
     * }
     */
    public static FunctionDescriptor JPC_Shape_GetLocalBounds$descriptor() {
        return JPC_Shape_GetLocalBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Shape_GetLocalBounds(const JPC_Shape *in_shape, float out_min[3], float out_max[3])
     * }
     */
    public static MethodHandle JPC_Shape_GetLocalBounds$handle() {
        return JPC_Shape_GetLocalBounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Shape_GetLocalBounds(const JPC_Shape *in_shape, float out_min[3], float out_max[3])
     * }
     */
    public static MemorySegment JPC_Shape_GetLocalBounds$address() {
        return JPC_Shape_GetLocalBounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Shape_GetLocalBounds(const JPC_Shape *in_shape, float out_min[3], float out_max[3])
     * }
     */
    public static void JPC_Shape_GetLocalBounds(MemorySegment in_shape, MemorySegment out_min, MemorySegment out_max) {
        var mh$ = JPC_Shape_GetLocalBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_GetLocalBounds", in_shape, out_min, out_max);
            }
            mh$.invokeExact(in_shape, out_min, out_max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Shape_GetWorldSpaceBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Shape_GetWorldSpaceBounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Shape_GetWorldSpaceBounds(const JPC_Shape *in_shape, float in_center_of_mass_transform[16], float in_scale[3], float out_min[3], float out_max[3])
     * }
     */
    public static FunctionDescriptor JPC_Shape_GetWorldSpaceBounds$descriptor() {
        return JPC_Shape_GetWorldSpaceBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Shape_GetWorldSpaceBounds(const JPC_Shape *in_shape, float in_center_of_mass_transform[16], float in_scale[3], float out_min[3], float out_max[3])
     * }
     */
    public static MethodHandle JPC_Shape_GetWorldSpaceBounds$handle() {
        return JPC_Shape_GetWorldSpaceBounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Shape_GetWorldSpaceBounds(const JPC_Shape *in_shape, float in_center_of_mass_transform[16], float in_scale[3], float out_min[3], float out_max[3])
     * }
     */
    public static MemorySegment JPC_Shape_GetWorldSpaceBounds$address() {
        return JPC_Shape_GetWorldSpaceBounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Shape_GetWorldSpaceBounds(const JPC_Shape *in_shape, float in_center_of_mass_transform[16], float in_scale[3], float out_min[3], float out_max[3])
     * }
     */
    public static void JPC_Shape_GetWorldSpaceBounds(MemorySegment in_shape, MemorySegment in_center_of_mass_transform, MemorySegment in_scale, MemorySegment out_min, MemorySegment out_max) {
        var mh$ = JPC_Shape_GetWorldSpaceBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Shape_GetWorldSpaceBounds", in_shape, in_center_of_mass_transform, in_scale, out_min, out_max);
            }
            mh$.invokeExact(in_shape, in_center_of_mass_transform, in_scale, out_min, out_max);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_BodyInterface_GetCenterOfMassTransform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_INT,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_BodyInterface_GetCenterOfMassTransform");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetCenterOfMassTransform(const JPC_BodyInterface *in_face, JPC_BodyID in_body_id, float out_transform[16])
     * }
     */
    public static FunctionDescriptor JPC_BodyInterface_GetCenterOfMassTransform$descriptor() {
        return JPC_BodyInterface_GetCenterOfMassTransform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetCenterOfMassTransform(const JPC_BodyInterface *in_face, JPC_BodyID in_body_id, float out_transform[16])
     * }
     */
    public static MethodHandle JPC_BodyInterface_GetCenterOfMassTransform$handle() {
        return JPC_BodyInterface_GetCenterOfMassTransform.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetCenterOfMassTransform(const JPC_BodyInterface *in_face, JPC_BodyID in_body_id, float out_transform[16])
     * }
     */
    public static MemorySegment JPC_BodyInterface_GetCenterOfMassTransform$address() {
        return JPC_BodyInterface_GetCenterOfMassTransform.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_BodyInterface_GetCenterOfMassTransform(const JPC_BodyInterface *in_face, JPC_BodyID in_body_id, float out_transform[16])
     * }
     */
    public static void JPC_BodyInterface_GetCenterOfMassTransform(MemorySegment in_face, int in_body_id, MemorySegment out_transform) {
        var mh$ = JPC_BodyInterface_GetCenterOfMassTransform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_BodyInterface_GetCenterOfMassTransform", in_face, in_body_id, out_transform);
            }
            mh$.invokeExact(in_face, in_body_id, out_transform);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class JPC_Vec4_Normalize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            jolt.C_POINTER,
            jolt.C_POINTER
        );

        public static final MemorySegment ADDR = jolt.findOrThrow("JPC_Vec4_Normalize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void JPC_Vec4_Normalize(const float in_rotation[4], float out_rotation[4])
     * }
     */
    public static FunctionDescriptor JPC_Vec4_Normalize$descriptor() {
        return JPC_Vec4_Normalize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void JPC_Vec4_Normalize(const float in_rotation[4], float out_rotation[4])
     * }
     */
    public static MethodHandle JPC_Vec4_Normalize$handle() {
        return JPC_Vec4_Normalize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void JPC_Vec4_Normalize(const float in_rotation[4], float out_rotation[4])
     * }
     */
    public static MemorySegment JPC_Vec4_Normalize$address() {
        return JPC_Vec4_Normalize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void JPC_Vec4_Normalize(const float in_rotation[4], float out_rotation[4])
     * }
     */
    public static void JPC_Vec4_Normalize(MemorySegment in_rotation, MemorySegment out_rotation) {
        var mh$ = JPC_Vec4_Normalize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("JPC_Vec4_Normalize", in_rotation, out_rotation);
            }
            mh$.invokeExact(in_rotation, out_rotation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int MAC_OS_X_VERSION_10_0 = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_0 1000
     * }
     */
    public static int MAC_OS_X_VERSION_10_0() {
        return MAC_OS_X_VERSION_10_0;
    }
    private static final int MAC_OS_X_VERSION_10_1 = (int)1010L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_1 1010
     * }
     */
    public static int MAC_OS_X_VERSION_10_1() {
        return MAC_OS_X_VERSION_10_1;
    }
    private static final int MAC_OS_X_VERSION_10_2 = (int)1020L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_2 1020
     * }
     */
    public static int MAC_OS_X_VERSION_10_2() {
        return MAC_OS_X_VERSION_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_3 = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_3 1030
     * }
     */
    public static int MAC_OS_X_VERSION_10_3() {
        return MAC_OS_X_VERSION_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_4 = (int)1040L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_4 1040
     * }
     */
    public static int MAC_OS_X_VERSION_10_4() {
        return MAC_OS_X_VERSION_10_4;
    }
    private static final int MAC_OS_X_VERSION_10_5 = (int)1050L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_5 1050
     * }
     */
    public static int MAC_OS_X_VERSION_10_5() {
        return MAC_OS_X_VERSION_10_5;
    }
    private static final int MAC_OS_X_VERSION_10_6 = (int)1060L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_6 1060
     * }
     */
    public static int MAC_OS_X_VERSION_10_6() {
        return MAC_OS_X_VERSION_10_6;
    }
    private static final int MAC_OS_X_VERSION_10_7 = (int)1070L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_7 1070
     * }
     */
    public static int MAC_OS_X_VERSION_10_7() {
        return MAC_OS_X_VERSION_10_7;
    }
    private static final int MAC_OS_X_VERSION_10_8 = (int)1080L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_8 1080
     * }
     */
    public static int MAC_OS_X_VERSION_10_8() {
        return MAC_OS_X_VERSION_10_8;
    }
    private static final int MAC_OS_X_VERSION_10_9 = (int)1090L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_9 1090
     * }
     */
    public static int MAC_OS_X_VERSION_10_9() {
        return MAC_OS_X_VERSION_10_9;
    }
    private static final int MAC_OS_X_VERSION_10_10 = (int)101000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10 101000
     * }
     */
    public static int MAC_OS_X_VERSION_10_10() {
        return MAC_OS_X_VERSION_10_10;
    }
    private static final int MAC_OS_X_VERSION_10_10_2 = (int)101002L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_2 101002
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_2() {
        return MAC_OS_X_VERSION_10_10_2;
    }
    private static final int MAC_OS_X_VERSION_10_10_3 = (int)101003L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_3 101003
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_3() {
        return MAC_OS_X_VERSION_10_10_3;
    }
    private static final int MAC_OS_X_VERSION_10_11 = (int)101100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11 101100
     * }
     */
    public static int MAC_OS_X_VERSION_10_11() {
        return MAC_OS_X_VERSION_10_11;
    }
    private static final int MAC_OS_X_VERSION_10_11_2 = (int)101102L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_2 101102
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_2() {
        return MAC_OS_X_VERSION_10_11_2;
    }
    private static final int MAC_OS_X_VERSION_10_11_3 = (int)101103L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_3 101103
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_3() {
        return MAC_OS_X_VERSION_10_11_3;
    }
    private static final int MAC_OS_X_VERSION_10_11_4 = (int)101104L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_4 101104
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_4() {
        return MAC_OS_X_VERSION_10_11_4;
    }
    private static final int MAC_OS_X_VERSION_10_12 = (int)101200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12 101200
     * }
     */
    public static int MAC_OS_X_VERSION_10_12() {
        return MAC_OS_X_VERSION_10_12;
    }
    private static final int MAC_OS_X_VERSION_10_12_1 = (int)101201L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_1 101201
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_1() {
        return MAC_OS_X_VERSION_10_12_1;
    }
    private static final int MAC_OS_X_VERSION_10_12_2 = (int)101202L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_2 101202
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_2() {
        return MAC_OS_X_VERSION_10_12_2;
    }
    private static final int MAC_OS_X_VERSION_10_12_4 = (int)101204L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_4 101204
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_4() {
        return MAC_OS_X_VERSION_10_12_4;
    }
    private static final int MAC_OS_X_VERSION_10_13 = (int)101300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13 101300
     * }
     */
    public static int MAC_OS_X_VERSION_10_13() {
        return MAC_OS_X_VERSION_10_13;
    }
    private static final int MAC_OS_X_VERSION_10_13_1 = (int)101301L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_1 101301
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_1() {
        return MAC_OS_X_VERSION_10_13_1;
    }
    private static final int MAC_OS_X_VERSION_10_13_2 = (int)101302L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_2 101302
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_2() {
        return MAC_OS_X_VERSION_10_13_2;
    }
    private static final int MAC_OS_X_VERSION_10_13_4 = (int)101304L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_4 101304
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_4() {
        return MAC_OS_X_VERSION_10_13_4;
    }
    private static final int MAC_OS_X_VERSION_10_14 = (int)101400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14 101400
     * }
     */
    public static int MAC_OS_X_VERSION_10_14() {
        return MAC_OS_X_VERSION_10_14;
    }
    private static final int MAC_OS_X_VERSION_10_14_1 = (int)101401L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_1 101401
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_1() {
        return MAC_OS_X_VERSION_10_14_1;
    }
    private static final int MAC_OS_X_VERSION_10_14_4 = (int)101404L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_4 101404
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_4() {
        return MAC_OS_X_VERSION_10_14_4;
    }
    private static final int MAC_OS_X_VERSION_10_14_5 = (int)101405L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_5 101405
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_5() {
        return MAC_OS_X_VERSION_10_14_5;
    }
    private static final int MAC_OS_X_VERSION_10_14_6 = (int)101406L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_6 101406
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_6() {
        return MAC_OS_X_VERSION_10_14_6;
    }
    private static final int MAC_OS_X_VERSION_10_15 = (int)101500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15 101500
     * }
     */
    public static int MAC_OS_X_VERSION_10_15() {
        return MAC_OS_X_VERSION_10_15;
    }
    private static final int MAC_OS_X_VERSION_10_15_1 = (int)101501L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_1 101501
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_1() {
        return MAC_OS_X_VERSION_10_15_1;
    }
    private static final int MAC_OS_X_VERSION_10_15_4 = (int)101504L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_4 101504
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_4() {
        return MAC_OS_X_VERSION_10_15_4;
    }
    private static final int MAC_OS_X_VERSION_10_16 = (int)101600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_16 101600
     * }
     */
    public static int MAC_OS_X_VERSION_10_16() {
        return MAC_OS_X_VERSION_10_16;
    }
    private static final int MAC_OS_VERSION_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_0 110000
     * }
     */
    public static int MAC_OS_VERSION_11_0() {
        return MAC_OS_VERSION_11_0;
    }
    private static final int MAC_OS_VERSION_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_1 110100
     * }
     */
    public static int MAC_OS_VERSION_11_1() {
        return MAC_OS_VERSION_11_1;
    }
    private static final int MAC_OS_VERSION_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_3 110300
     * }
     */
    public static int MAC_OS_VERSION_11_3() {
        return MAC_OS_VERSION_11_3;
    }
    private static final int MAC_OS_VERSION_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_4 110400
     * }
     */
    public static int MAC_OS_VERSION_11_4() {
        return MAC_OS_VERSION_11_4;
    }
    private static final int MAC_OS_VERSION_11_5 = (int)110500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_5 110500
     * }
     */
    public static int MAC_OS_VERSION_11_5() {
        return MAC_OS_VERSION_11_5;
    }
    private static final int MAC_OS_VERSION_11_6 = (int)110600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_6 110600
     * }
     */
    public static int MAC_OS_VERSION_11_6() {
        return MAC_OS_VERSION_11_6;
    }
    private static final int MAC_OS_VERSION_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_0 120000
     * }
     */
    public static int MAC_OS_VERSION_12_0() {
        return MAC_OS_VERSION_12_0;
    }
    private static final int MAC_OS_VERSION_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_1 120100
     * }
     */
    public static int MAC_OS_VERSION_12_1() {
        return MAC_OS_VERSION_12_1;
    }
    private static final int MAC_OS_VERSION_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_2 120200
     * }
     */
    public static int MAC_OS_VERSION_12_2() {
        return MAC_OS_VERSION_12_2;
    }
    private static final int MAC_OS_VERSION_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_3 120300
     * }
     */
    public static int MAC_OS_VERSION_12_3() {
        return MAC_OS_VERSION_12_3;
    }
    private static final int MAC_OS_VERSION_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_4 120400
     * }
     */
    public static int MAC_OS_VERSION_12_4() {
        return MAC_OS_VERSION_12_4;
    }
    private static final int MAC_OS_VERSION_12_5 = (int)120500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_5 120500
     * }
     */
    public static int MAC_OS_VERSION_12_5() {
        return MAC_OS_VERSION_12_5;
    }
    private static final int MAC_OS_VERSION_12_6 = (int)120600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_6 120600
     * }
     */
    public static int MAC_OS_VERSION_12_6() {
        return MAC_OS_VERSION_12_6;
    }
    private static final int MAC_OS_VERSION_12_7 = (int)120700L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_7 120700
     * }
     */
    public static int MAC_OS_VERSION_12_7() {
        return MAC_OS_VERSION_12_7;
    }
    private static final int MAC_OS_VERSION_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_0 130000
     * }
     */
    public static int MAC_OS_VERSION_13_0() {
        return MAC_OS_VERSION_13_0;
    }
    private static final int MAC_OS_VERSION_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_1 130100
     * }
     */
    public static int MAC_OS_VERSION_13_1() {
        return MAC_OS_VERSION_13_1;
    }
    private static final int MAC_OS_VERSION_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_2 130200
     * }
     */
    public static int MAC_OS_VERSION_13_2() {
        return MAC_OS_VERSION_13_2;
    }
    private static final int MAC_OS_VERSION_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_3 130300
     * }
     */
    public static int MAC_OS_VERSION_13_3() {
        return MAC_OS_VERSION_13_3;
    }
    private static final int MAC_OS_VERSION_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_4 130400
     * }
     */
    public static int MAC_OS_VERSION_13_4() {
        return MAC_OS_VERSION_13_4;
    }
    private static final int MAC_OS_VERSION_13_5 = (int)130500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_5 130500
     * }
     */
    public static int MAC_OS_VERSION_13_5() {
        return MAC_OS_VERSION_13_5;
    }
    private static final int MAC_OS_VERSION_13_6 = (int)130600L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_6 130600
     * }
     */
    public static int MAC_OS_VERSION_13_6() {
        return MAC_OS_VERSION_13_6;
    }
    private static final int MAC_OS_VERSION_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_0 140000
     * }
     */
    public static int MAC_OS_VERSION_14_0() {
        return MAC_OS_VERSION_14_0;
    }
    private static final int MAC_OS_VERSION_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_1 140100
     * }
     */
    public static int MAC_OS_VERSION_14_1() {
        return MAC_OS_VERSION_14_1;
    }
    private static final int MAC_OS_VERSION_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_2 140200
     * }
     */
    public static int MAC_OS_VERSION_14_2() {
        return MAC_OS_VERSION_14_2;
    }
    private static final int MAC_OS_VERSION_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_3 140300
     * }
     */
    public static int MAC_OS_VERSION_14_3() {
        return MAC_OS_VERSION_14_3;
    }
    private static final int MAC_OS_VERSION_14_4 = (int)140400L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_4 140400
     * }
     */
    public static int MAC_OS_VERSION_14_4() {
        return MAC_OS_VERSION_14_4;
    }
    private static final int MAC_OS_VERSION_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_5 140500
     * }
     */
    public static int MAC_OS_VERSION_14_5() {
        return MAC_OS_VERSION_14_5;
    }
    private static final int MAC_OS_VERSION_15_0 = (int)150000L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_15_0 150000
     * }
     */
    public static int MAC_OS_VERSION_15_0() {
        return MAC_OS_VERSION_15_0;
    }
    private static final int MAC_OS_VERSION_15_1 = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_15_1 150100
     * }
     */
    public static int MAC_OS_VERSION_15_1() {
        return MAC_OS_VERSION_15_1;
    }
    private static final int __MAC_OS_X_VERSION_MAX_ALLOWED = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_OS_X_VERSION_MAX_ALLOWED 150100
     * }
     */
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return __MAC_OS_X_VERSION_MAX_ALLOWED;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = jolt.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final int __DARWIN_WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MAX 2147483647
     * }
     */
    public static int __DARWIN_WCHAR_MAX() {
        return __DARWIN_WCHAR_MAX;
    }
    private static final int __DARWIN_WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MIN -2147483648
     * }
     */
    public static int __DARWIN_WCHAR_MIN() {
        return __DARWIN_WCHAR_MIN;
    }
    private static final int __DARWIN_WEOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WEOF -1
     * }
     */
    public static int __DARWIN_WEOF() {
        return __DARWIN_WEOF;
    }
    private static final int NSIG = (int)32L;
    /**
     * {@snippet lang=c :
     * #define NSIG 32
     * }
     */
    public static int NSIG() {
        return NSIG;
    }
    private static final int SIGIOT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define SIGIOT 6
     * }
     */
    public static int SIGIOT() {
        return SIGIOT;
    }
    private static final MemorySegment SIG_DFL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define SIG_DFL (void*) 0
     * }
     */
    public static MemorySegment SIG_DFL() {
        return SIG_DFL;
    }
    private static final MemorySegment SIG_IGN = MemorySegment.ofAddress(1L);
    /**
     * {@snippet lang=c :
     * #define SIG_IGN (void*) 1
     * }
     */
    public static MemorySegment SIG_IGN() {
        return SIG_IGN;
    }
    private static final MemorySegment SIG_HOLD = MemorySegment.ofAddress(5L);
    /**
     * {@snippet lang=c :
     * #define SIG_HOLD (void*) 5
     * }
     */
    public static MemorySegment SIG_HOLD() {
        return SIG_HOLD;
    }
    private static final MemorySegment SIG_ERR = MemorySegment.ofAddress(-1L);
    /**
     * {@snippet lang=c :
     * #define SIG_ERR (void*) -1
     * }
     */
    public static MemorySegment SIG_ERR() {
        return SIG_ERR;
    }
    private static final long USER_ADDR_NULL = 0L;
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return USER_ADDR_NULL;
    }
    private static final int SA_USERSPACE_MASK = (int)127L;
    /**
     * {@snippet lang=c :
     * #define SA_USERSPACE_MASK 127
     * }
     */
    public static int SA_USERSPACE_MASK() {
        return SA_USERSPACE_MASK;
    }
    private static final int SV_ONSTACK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SV_ONSTACK 1
     * }
     */
    public static int SV_ONSTACK() {
        return SV_ONSTACK;
    }
    private static final int SV_INTERRUPT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SV_INTERRUPT 2
     * }
     */
    public static int SV_INTERRUPT() {
        return SV_INTERRUPT;
    }
    private static final int SV_RESETHAND = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SV_RESETHAND 4
     * }
     */
    public static int SV_RESETHAND() {
        return SV_RESETHAND;
    }
    private static final int SV_NODEFER = (int)16L;
    /**
     * {@snippet lang=c :
     * #define SV_NODEFER 16
     * }
     */
    public static int SV_NODEFER() {
        return SV_NODEFER;
    }
    private static final int SV_NOCLDSTOP = (int)8L;
    /**
     * {@snippet lang=c :
     * #define SV_NOCLDSTOP 8
     * }
     */
    public static int SV_NOCLDSTOP() {
        return SV_NOCLDSTOP;
    }
    private static final int SV_SIGINFO = (int)64L;
    /**
     * {@snippet lang=c :
     * #define SV_SIGINFO 64
     * }
     */
    public static int SV_SIGINFO() {
        return SV_SIGINFO;
    }
    private static final MemorySegment BADSIG = MemorySegment.ofAddress(-1L);
    /**
     * {@snippet lang=c :
     * #define BADSIG (void*) -1
     * }
     */
    public static MemorySegment BADSIG() {
        return BADSIG;
    }
    private static final long INT64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return INT64_MAX;
    }
    private static final int INT8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return INT8_MIN;
    }
    private static final int INT16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return INT16_MIN;
    }
    private static final int INT32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return INT32_MIN;
    }
    private static final long INT64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return INT64_MIN;
    }
    private static final int UINT32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return UINT32_MAX;
    }
    private static final long UINT64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return UINT64_MAX;
    }
    private static final int INT_LEAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return INT_LEAST8_MIN;
    }
    private static final int INT_LEAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return INT_LEAST16_MIN;
    }
    private static final int INT_LEAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return INT_LEAST32_MIN;
    }
    private static final long INT_LEAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return INT_LEAST64_MIN;
    }
    private static final int INT_LEAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return INT_LEAST8_MAX;
    }
    private static final int INT_LEAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return INT_LEAST16_MAX;
    }
    private static final int INT_LEAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return INT_LEAST32_MAX;
    }
    private static final long INT_LEAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return INT_LEAST64_MAX;
    }
    private static final int UINT_LEAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return UINT_LEAST8_MAX;
    }
    private static final int UINT_LEAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return UINT_LEAST16_MAX;
    }
    private static final int UINT_LEAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return UINT_LEAST32_MAX;
    }
    private static final long UINT_LEAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return UINT_LEAST64_MAX;
    }
    private static final int INT_FAST8_MIN = (int)-128L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return INT_FAST8_MIN;
    }
    private static final int INT_FAST16_MIN = (int)-32768L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return INT_FAST16_MIN;
    }
    private static final int INT_FAST32_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return INT_FAST32_MIN;
    }
    private static final long INT_FAST64_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return INT_FAST64_MIN;
    }
    private static final int INT_FAST8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return INT_FAST8_MAX;
    }
    private static final int INT_FAST16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return INT_FAST16_MAX;
    }
    private static final int INT_FAST32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return INT_FAST32_MAX;
    }
    private static final long INT_FAST64_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return INT_FAST64_MAX;
    }
    private static final int UINT_FAST8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return UINT_FAST8_MAX;
    }
    private static final int UINT_FAST16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return UINT_FAST16_MAX;
    }
    private static final int UINT_FAST32_MAX = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return UINT_FAST32_MAX;
    }
    private static final long UINT_FAST64_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return UINT_FAST64_MAX;
    }
    private static final long INTPTR_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return INTPTR_MAX;
    }
    private static final long INTPTR_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return INTPTR_MIN;
    }
    private static final long UINTPTR_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return UINTPTR_MAX;
    }
    private static final long INTMAX_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return INTMAX_MAX;
    }
    private static final long UINTMAX_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return UINTMAX_MAX;
    }
    private static final long INTMAX_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return INTMAX_MIN;
    }
    private static final long PTRDIFF_MIN = -9223372036854775808L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return PTRDIFF_MIN;
    }
    private static final long PTRDIFF_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return PTRDIFF_MAX;
    }
    private static final long SIZE_MAX = -1L;
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return SIZE_MAX;
    }
    private static final long RSIZE_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return RSIZE_MAX;
    }
    private static final int WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return WCHAR_MAX;
    }
    private static final int WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return WCHAR_MIN;
    }
    private static final int WINT_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return WINT_MIN;
    }
    private static final int WINT_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return WINT_MAX;
    }
    private static final int SIG_ATOMIC_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return SIG_ATOMIC_MIN;
    }
    private static final int SIG_ATOMIC_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return SIG_ATOMIC_MAX;
    }
    private static final int PRIO_MIN = (int)-20L;
    /**
     * {@snippet lang=c :
     * #define PRIO_MIN -20
     * }
     */
    public static int PRIO_MIN() {
        return PRIO_MIN;
    }
    private static final int RUSAGE_CHILDREN = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define RUSAGE_CHILDREN -1
     * }
     */
    public static int RUSAGE_CHILDREN() {
        return RUSAGE_CHILDREN;
    }
    private static final int RUSAGE_INFO_CURRENT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define RUSAGE_INFO_CURRENT 6
     * }
     */
    public static int RUSAGE_INFO_CURRENT() {
        return RUSAGE_INFO_CURRENT;
    }
    private static final long RLIM_INFINITY = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RLIM_INFINITY 9223372036854775807
     * }
     */
    public static long RLIM_INFINITY() {
        return RLIM_INFINITY;
    }
    private static final long RLIM_SAVED_MAX = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RLIM_SAVED_MAX 9223372036854775807
     * }
     */
    public static long RLIM_SAVED_MAX() {
        return RLIM_SAVED_MAX;
    }
    private static final long RLIM_SAVED_CUR = 9223372036854775807L;
    /**
     * {@snippet lang=c :
     * #define RLIM_SAVED_CUR 9223372036854775807
     * }
     */
    public static long RLIM_SAVED_CUR() {
        return RLIM_SAVED_CUR;
    }
    private static final int RLIMIT_RSS = (int)5L;
    /**
     * {@snippet lang=c :
     * #define RLIMIT_RSS 5
     * }
     */
    public static int RLIMIT_RSS() {
        return RLIMIT_RSS;
    }
    private static final int IOPOL_APPLICATION = (int)5L;
    /**
     * {@snippet lang=c :
     * #define IOPOL_APPLICATION 5
     * }
     */
    public static int IOPOL_APPLICATION() {
        return IOPOL_APPLICATION;
    }
    private static final int IOPOL_NORMAL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define IOPOL_NORMAL 1
     * }
     */
    public static int IOPOL_NORMAL() {
        return IOPOL_NORMAL;
    }
    private static final int WAIT_ANY = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define WAIT_ANY -1
     * }
     */
    public static int WAIT_ANY() {
        return WAIT_ANY;
    }
    private static final int LITTLE_ENDIAN = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return LITTLE_ENDIAN;
    }
    private static final int BIG_ENDIAN = (int)4321L;
    /**
     * {@snippet lang=c :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return BIG_ENDIAN;
    }
    private static final int PDP_ENDIAN = (int)3412L;
    /**
     * {@snippet lang=c :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return PDP_ENDIAN;
    }
    private static final int __DARWIN_BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_BYTE_ORDER 1234
     * }
     */
    public static int __DARWIN_BYTE_ORDER() {
        return __DARWIN_BYTE_ORDER;
    }
    private static final int BYTE_ORDER = (int)1234L;
    /**
     * {@snippet lang=c :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return BYTE_ORDER;
    }
    private static final MemorySegment NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define NULL (void*) 0
     * }
     */
    public static MemorySegment NULL() {
        return NULL;
    }
    private static final int FLT_EVAL_METHOD = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FLT_EVAL_METHOD 0
     * }
     */
    public static int FLT_EVAL_METHOD() {
        return FLT_EVAL_METHOD;
    }
    private static final int FLT_RADIX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define FLT_RADIX 2
     * }
     */
    public static int FLT_RADIX() {
        return FLT_RADIX;
    }
    private static final int FLT_MANT_DIG = (int)24L;
    /**
     * {@snippet lang=c :
     * #define FLT_MANT_DIG 24
     * }
     */
    public static int FLT_MANT_DIG() {
        return FLT_MANT_DIG;
    }
    private static final int DBL_MANT_DIG = (int)53L;
    /**
     * {@snippet lang=c :
     * #define DBL_MANT_DIG 53
     * }
     */
    public static int DBL_MANT_DIG() {
        return DBL_MANT_DIG;
    }
    private static final int LDBL_MANT_DIG = (int)53L;
    /**
     * {@snippet lang=c :
     * #define LDBL_MANT_DIG 53
     * }
     */
    public static int LDBL_MANT_DIG() {
        return LDBL_MANT_DIG;
    }
    private static final int FLT_DIG = (int)6L;
    /**
     * {@snippet lang=c :
     * #define FLT_DIG 6
     * }
     */
    public static int FLT_DIG() {
        return FLT_DIG;
    }
    private static final int DBL_DIG = (int)15L;
    /**
     * {@snippet lang=c :
     * #define DBL_DIG 15
     * }
     */
    public static int DBL_DIG() {
        return DBL_DIG;
    }
    private static final int LDBL_DIG = (int)15L;
    /**
     * {@snippet lang=c :
     * #define LDBL_DIG 15
     * }
     */
    public static int LDBL_DIG() {
        return LDBL_DIG;
    }
    private static final int FLT_MIN_EXP = (int)-125L;
    /**
     * {@snippet lang=c :
     * #define FLT_MIN_EXP -125
     * }
     */
    public static int FLT_MIN_EXP() {
        return FLT_MIN_EXP;
    }
    private static final int DBL_MIN_EXP = (int)-1021L;
    /**
     * {@snippet lang=c :
     * #define DBL_MIN_EXP -1021
     * }
     */
    public static int DBL_MIN_EXP() {
        return DBL_MIN_EXP;
    }
    private static final int LDBL_MIN_EXP = (int)-1021L;
    /**
     * {@snippet lang=c :
     * #define LDBL_MIN_EXP -1021
     * }
     */
    public static int LDBL_MIN_EXP() {
        return LDBL_MIN_EXP;
    }
    private static final int FLT_MIN_10_EXP = (int)-37L;
    /**
     * {@snippet lang=c :
     * #define FLT_MIN_10_EXP -37
     * }
     */
    public static int FLT_MIN_10_EXP() {
        return FLT_MIN_10_EXP;
    }
    private static final int DBL_MIN_10_EXP = (int)-307L;
    /**
     * {@snippet lang=c :
     * #define DBL_MIN_10_EXP -307
     * }
     */
    public static int DBL_MIN_10_EXP() {
        return DBL_MIN_10_EXP;
    }
    private static final int LDBL_MIN_10_EXP = (int)-307L;
    /**
     * {@snippet lang=c :
     * #define LDBL_MIN_10_EXP -307
     * }
     */
    public static int LDBL_MIN_10_EXP() {
        return LDBL_MIN_10_EXP;
    }
    private static final int FLT_MAX_EXP = (int)128L;
    /**
     * {@snippet lang=c :
     * #define FLT_MAX_EXP 128
     * }
     */
    public static int FLT_MAX_EXP() {
        return FLT_MAX_EXP;
    }
    private static final int DBL_MAX_EXP = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define DBL_MAX_EXP 1024
     * }
     */
    public static int DBL_MAX_EXP() {
        return DBL_MAX_EXP;
    }
    private static final int LDBL_MAX_EXP = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define LDBL_MAX_EXP 1024
     * }
     */
    public static int LDBL_MAX_EXP() {
        return LDBL_MAX_EXP;
    }
    private static final int FLT_MAX_10_EXP = (int)38L;
    /**
     * {@snippet lang=c :
     * #define FLT_MAX_10_EXP 38
     * }
     */
    public static int FLT_MAX_10_EXP() {
        return FLT_MAX_10_EXP;
    }
    private static final int DBL_MAX_10_EXP = (int)308L;
    /**
     * {@snippet lang=c :
     * #define DBL_MAX_10_EXP 308
     * }
     */
    public static int DBL_MAX_10_EXP() {
        return DBL_MAX_10_EXP;
    }
    private static final int LDBL_MAX_10_EXP = (int)308L;
    /**
     * {@snippet lang=c :
     * #define LDBL_MAX_10_EXP 308
     * }
     */
    public static int LDBL_MAX_10_EXP() {
        return LDBL_MAX_10_EXP;
    }
    private static final float FLT_MAX = 3.4028234663852886E38f;
    /**
     * {@snippet lang=c :
     * #define FLT_MAX 3.4028234663852886E38
     * }
     */
    public static float FLT_MAX() {
        return FLT_MAX;
    }
    private static final double DBL_MAX = 1.7976931348623157E308d;
    /**
     * {@snippet lang=c :
     * #define DBL_MAX 1.7976931348623157E308
     * }
     */
    public static double DBL_MAX() {
        return DBL_MAX;
    }
    private static final float FLT_EPSILON = 1.1920928955078125E-7f;
    /**
     * {@snippet lang=c :
     * #define FLT_EPSILON 1.1920928955078125E-7
     * }
     */
    public static float FLT_EPSILON() {
        return FLT_EPSILON;
    }
    private static final double DBL_EPSILON = 2.220446049250313E-16d;
    /**
     * {@snippet lang=c :
     * #define DBL_EPSILON 2.220446049250313E-16
     * }
     */
    public static double DBL_EPSILON() {
        return DBL_EPSILON;
    }
    private static final float FLT_MIN = 1.1754943508222875E-38f;
    /**
     * {@snippet lang=c :
     * #define FLT_MIN 1.1754943508222875E-38
     * }
     */
    public static float FLT_MIN() {
        return FLT_MIN;
    }
    private static final double DBL_MIN = 2.2250738585072014E-308d;
    /**
     * {@snippet lang=c :
     * #define DBL_MIN 2.2250738585072014E-308
     * }
     */
    public static double DBL_MIN() {
        return DBL_MIN;
    }
    private static final int DECIMAL_DIG = (int)17L;
    /**
     * {@snippet lang=c :
     * #define DECIMAL_DIG 17
     * }
     */
    public static int DECIMAL_DIG() {
        return DECIMAL_DIG;
    }
    private static final float FLT_TRUE_MIN = 1.401298464324817E-45f;
    /**
     * {@snippet lang=c :
     * #define FLT_TRUE_MIN 1.401298464324817E-45
     * }
     */
    public static float FLT_TRUE_MIN() {
        return FLT_TRUE_MIN;
    }
    private static final double DBL_TRUE_MIN = 4.9E-324d;
    /**
     * {@snippet lang=c :
     * #define DBL_TRUE_MIN 4.9E-324
     * }
     */
    public static double DBL_TRUE_MIN() {
        return DBL_TRUE_MIN;
    }
    private static final int FLT_DECIMAL_DIG = (int)9L;
    /**
     * {@snippet lang=c :
     * #define FLT_DECIMAL_DIG 9
     * }
     */
    public static int FLT_DECIMAL_DIG() {
        return FLT_DECIMAL_DIG;
    }
    private static final int DBL_DECIMAL_DIG = (int)17L;
    /**
     * {@snippet lang=c :
     * #define DBL_DECIMAL_DIG 17
     * }
     */
    public static int DBL_DECIMAL_DIG() {
        return DBL_DECIMAL_DIG;
    }
    private static final int LDBL_DECIMAL_DIG = (int)17L;
    /**
     * {@snippet lang=c :
     * #define LDBL_DECIMAL_DIG 17
     * }
     */
    public static int LDBL_DECIMAL_DIG() {
        return LDBL_DECIMAL_DIG;
    }
    private static final float JPC_PI = 3.1415927410125732f;
    /**
     * {@snippet lang=c :
     * #define JPC_PI 3.1415927410125732
     * }
     */
    public static float JPC_PI() {
        return JPC_PI;
    }
    private static final int JPC_COLLISION_GROUP_INVALID_GROUP = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define JPC_COLLISION_GROUP_INVALID_GROUP 4294967295
     * }
     */
    public static int JPC_COLLISION_GROUP_INVALID_GROUP() {
        return JPC_COLLISION_GROUP_INVALID_GROUP;
    }
    private static final int JPC_COLLISION_GROUP_INVALID_SUB_GROUP = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define JPC_COLLISION_GROUP_INVALID_SUB_GROUP 4294967295
     * }
     */
    public static int JPC_COLLISION_GROUP_INVALID_SUB_GROUP() {
        return JPC_COLLISION_GROUP_INVALID_SUB_GROUP;
    }
    private static final int JPC_BODY_ID_INVALID = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define JPC_BODY_ID_INVALID 4294967295
     * }
     */
    public static int JPC_BODY_ID_INVALID() {
        return JPC_BODY_ID_INVALID;
    }
    private static final int JPC_BODY_ID_SEQUENCE_BITS = (int)4278190080L;
    /**
     * {@snippet lang=c :
     * #define JPC_BODY_ID_SEQUENCE_BITS 4278190080
     * }
     */
    public static int JPC_BODY_ID_SEQUENCE_BITS() {
        return JPC_BODY_ID_SEQUENCE_BITS;
    }
    private static final int JPC_SUB_SHAPE_ID_EMPTY = (int)4294967295L;
    /**
     * {@snippet lang=c :
     * #define JPC_SUB_SHAPE_ID_EMPTY 4294967295
     * }
     */
    public static int JPC_SUB_SHAPE_ID_EMPTY() {
        return JPC_SUB_SHAPE_ID_EMPTY;
    }
    private static final float JPC_FLT_EPSILON = 1.1920928955078125E-7f;
    /**
     * {@snippet lang=c :
     * #define JPC_FLT_EPSILON 1.1920928955078125E-7
     * }
     */
    public static float JPC_FLT_EPSILON() {
        return JPC_FLT_EPSILON;
    }
}

