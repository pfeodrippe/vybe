(ns vybe.basilisp.bake
  "Creates a torus pattern with randomly colored materials."
  (:import bpy
           math
           inspect)
  (:require
   [basilisp.repl :as repl]
   [clojure.string :as str]))

(def obj bpy.ops/object)
(def objs bpy.ops/objects)

#_(clear-mesh-objects)

(defmacro active-name
  []
  `(.-name bpy.context.view_layer.objects/active))

(defn select
  [obj]
  (.select_set obj true)
  (set! bpy.context.view_layer.objects/active obj))

(defn select-only
  [obj]
  (bpy.ops.object/select_all ** :action "DESELECT")
  (select obj))

(defn deselect
  [obj]
  (.select_set obj false))

(defn hide
  [obj]
  (.hide_set obj true)
  (set! (.-hide_render obj) true))

(defn unhide
  [obj]
  (.hide_set obj false)
  (set! (.-hide_render obj) false))

(defn obj-find
  [n]
  (.get bpy.context.scene/objects n))

(defn bake-active
  "Bake active object."
  []
  (let [bake-n (active-name)
        orig-n (str bake-n ".__original")
        _ (do
            ;; If original exists, delete the baked one, rename the original and
            ;; select it.
            (when-let [obj (obj-find orig-n)]
              (obj/delete)
              (unhide obj)
              (select-only obj)
              (set! (active-name) bake-n))

            ;; Name and clone.
            (set! (active-name) orig-n)
            (obj/duplicate)
            (set! (active-name) bake-n))

        ;; New material + image texture.
        bake-path (str (bpy.path/abspath "//")
                       (->> [(bpy.path/display_name_from_filepath bpy.data/filepath)
                             (.-name bpy.context/scene)
                             bake-n
                             (hash bpy.data/filepath)]
                            (str/join "_"))
                       ".png")
        bake-image (bpy.data.images/new "bake_image2" ** :width 4096 :height 4096)
        _ (do (set! (.-file-format bake-image) "PNG")
              (set! (.-filepath_raw bake-image) bake-path))
        bake-mat (bpy.data.materials/new ** :name "bake_mat")
        _ (do (set! (.-use-nodes bake-mat) true)
              (.clear bpy.context.object.data/materials)
              (.append bpy.context.object.data/materials bake-mat))
        node-tree (.-node-tree bake-mat)
        node (.. node-tree -nodes (new "ShaderNodeTexImage"))
        _ (do (set! (.-select node) true)
              (set! (.. node-tree -nodes -active) node)
              (set! (.. node -image) bake-image))

        ;; Connect nodes.
        base-color-in (->> (.. bake-mat -node-tree -nodes)
                           (filter #(= (.-name %) "Principled BSDF"))
                           first
                           .-inputs
                           first)
        tex-color-out (first (.-outputs node))
        _ (.. bake-mat -node-tree -links (new base-color-in tex-color-out))]

    ;; Unwrap + Smart UV.
    (select (obj-find bake-n))
    (bpy.ops.object/mode_set ** :mode "EDIT")
    (bpy.ops.mesh/select_all ** :action "SELECT")
    (bpy.ops.uv/unwrap **)
    (bpy.ops.uv/smart_project ** :island-margin 0.001)
    (bpy.ops.object/mode_set ** :mode "OBJECT")

    ;; Select both objects for the baking process.
    (select (obj-find orig-n))
    (select (obj-find bake-n))

    ;; For debugging.
    #_ (do
         (def bake-mat bake-mat)
         (def bake-image bake-image)
         (def node node))

    ;; Bake.
    (obj/bake **
              :type "COMBINED"
              :pass_filter (lisp->py
                            #{"EMIT" "DIRECT" "INDIRECT"
                              "COLOR" "DIFFUSE" "GLOSSY"
                              "TRANSMISSION"})
              :width 4096
              :height 4096
              :use_selected_to_active true
              :margin_type "ADJACENT_FACES"
              :cage_extrusion 0.02
              :use_clear true)

    ;; Save baked image.
    (.save bake-image)

    (deselect (obj-find orig-n))
    (hide (obj-find orig-n))

    (bpy.ops.wm/save_mainfile)))
#_ (bake-active)
#_ (bpy.ops.ed/undo)

(defn bake-selected
  []
  (->> bpy.context/selected_objects
       (mapv (fn [obj]
               (bpy.ops.object/select_all ** :action "DESELECT")
               (select obj)
               (bake-active)))))
#_ (bake-selected)
