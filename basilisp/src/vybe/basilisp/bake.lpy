(ns vybe.basilisp.bake
  "Creates a torus pattern with randomly colored materials."
  (:import bpy
           math
           inspect)
  (:require
   [basilisp.repl :as repl]
   [clojure.string :as str]))

(defn clear-mesh-objects
  []
  (.select-all     bpy.ops/object ** :action "DESELECT")
  (.select-by-type bpy.ops/object ** :type "MESH")
  (.delete         bpy.ops/object))

(def obj bpy.ops/object)
(def objs bpy.ops/objects)

#_(clear-mesh-objects)

(defmacro active-name
  []
  `(.-name bpy.context.view_layer.objects/active))

(defn select
  [obj]
  (.select_set obj true))

(defn deselect
  [obj]
  (.select_set obj false))

(defn hide
  [obj]
  (.hide_set obj true))

(defn unhide
  [obj]
  (.hide_set obj false))

(comment

  ;; Refs
  ;; - https://blenderartists.org/t/how-to-generate-textures-without-rendering-to-file/1560362/4
  ;; - https://github.com/leukbaars/EasyBake/blob/master/EasyBake.py

  ;; https://docs.blender.org/api/current/bpy.ops.object.html#bpy.ops.object.bake
  (let [#_ _ #_ (bpy.ops.ed/undo_push)
        bake-n (active-name)
        orig-n (str bake-n ".__original")
        _ (do
            ;; Name and clone.
            (set! (active-name) orig-n)
            (obj/duplicate)
            (set! (active-name) bake-n))

        ;; New material + image texture.
        bake-path (str (bpy.path/abspath "//")
                       (->> [(bpy.path/display_name_from_filepath bpy.data/filepath)
                             (.-name bpy.context/scene)
                             (hash bpy.data/filepath)]
                            (str/join "_"))
                       ".png")
        bake-image (bpy.data.images/new "bake_image" ** :width 4096 :height 4096)
        _ (do (set! (.-file-format bake-image) "PNG")
              (set! (.-filepath_raw bake-image) bake-path))
        bake-mat (bpy.data.materials/new ** :name "bake_mat")
        _ (do (set! (.-use-nodes bake-mat) true)
              (.clear bpy.context.object.data/materials)
              (.append bpy.context.object.data/materials bake-mat))
        node-tree (.-node-tree bake-mat)
        node (.. node-tree -nodes (new "ShaderNodeTexImage"))
        _ (do (set! (.-select node) true)
              (set! (.. node-tree -nodes -active) node)
              (set! (.. node -image) bake-image))

        ;; Connect nodes.
        base-color-in (->> (.. bake-mat -node-tree -nodes)
                           (filter #(= (.-name %) "Principled BSDF"))
                           first
                           .-inputs
                           first)
        tex-color-out (first (.-outputs node))
        _ (.. bake-mat -node-tree -links (new base-color-in tex-color-out))]

    ;; Unwrap + Smart UV.
    (select (.get bpy.context.scene/objects bake-n))
    (bpy.ops.object/mode_set ** :mode "EDIT")
    (bpy.ops.mesh/select_all ** :action "SELECT")
    (bpy.ops.uv/unwrap **)
    (bpy.ops.uv/smart_project ** :island-margin 0.001)
    (bpy.ops.object/mode_set ** :mode "OBJECT")

    ;; Select both objects for the baking process.
    (select (.get bpy.context.scene/objects orig-n))
    (select (.get bpy.context.scene/objects bake-n))

    ;; For debugging.
    #_ (do
         (def bake-mat bake-mat)
         (def bake-image bake-image)
         (def node node))

    ;; Bake.
    (obj/bake **
              :type "COMBINED"
              :pass_filter (lisp->py
                            #{"EMIT" "DIRECT" "INDIRECT"
                              "COLOR" "DIFFUSE" "GLOSSY"
                              "TRANSMISSION"})
              :width 4096
              :height 4096
              :use_selected_to_active true
              :margin_type "ADJACENT_FACES"
              :cage_extrusion 0.02
              :use_clear true)

    ;; Save baked image.
    (.save bake-image)

    (deselect (.get bpy.context.scene/objects orig-n))
    (hide (.get bpy.context.scene/objects orig-n))

    (bpy.ops.wm/save_mainfile))

  (bpy.ops.ed/undo)

  ())

(defn create-random-material []
  (let [mat  (.new bpy.data/materials ** :name "RandomMaterial")
        _    (set! (.-use-nodes mat) true)
        bsdf (aget (.. mat -node-tree -nodes) "Principled BSDF")]

    (set! (-> bsdf .-inputs (aget "Base Color") .-default-value)
          [(rand) (rand) (rand) 1])
    mat))

(defn create-torus [radius tube-radius location segments]
  (.primitive-torus-add bpy.ops/mesh **
                        :major-radius radius
                        :minor-radius tube-radius
                        :location location
                        :major-segments segments
                        :minor-segments segments)
  (let [material (create-random-material)]
    (-> bpy.context/object .-data .-materials (.append material))))

#_(create-torus 5, 5, [0 0 0] 48)

(defn create-pattern [{:keys [layers-num radius tube-radius]
                       :or {layers-num 2
                            radius 2
                            tube-radius 0.2}}]
  (let [angle-step (/ math/pi 4)]
    (dotimes [i layers-num]
      (let [layer-radius (* radius (inc i))
            objects-num (* 12 (inc i))]
        (dotimes [j objects-num]
          (let [angle (* j angle-step)
                x (* layer-radius (math/cos angle))
                y (* layer-radius (math/sin angle))
                z (* i 0.5)]
            (create-torus (/ radius 2) tube-radius [x y z] 48)))))))

#_(create-pattern {:layers-num 5})
