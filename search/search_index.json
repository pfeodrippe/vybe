{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Vybe","text":"<p>Code at https://github.com/pfeodrippe/vybe.</p>"},{"location":"#vybe","title":"Vybe","text":"<p>A Clojure framework for game dev (alpha).</p>"},{"location":"#vybe-packages","title":"Vybe Packages","text":"<p>We have a Github Actions pipeline that builds, tests and publishes to Clojars for each OS, each has a suffix for its version, check below:</p> <ul> <li>OSX universal<ul> <li><code>io.github.pfeodrippe/vybe {:mvn/version \"0.7.582-macos-universal\"}</code></li> </ul> </li> <li>Windows (x64)<ul> <li><code>io.github.pfeodrippe/vybe {:mvn/version \"0.7.582-win-x64\"}</code></li> </ul> </li> <li>Linux (x64)<ul> <li><code>io.github.pfeodrippe/vybe {:mvn/version \"0.7.582-linux-x64\"}</code></li> </ul> </li> <li>Linux (x64) Basic, for example, if you don't have access to AVX2 instructions<ul> <li><code>io.github.pfeodrippe/vybe {:mvn/version \"0.7.582-linux-x64--basic\"}</code></li> </ul> </li> </ul>"},{"location":"#getting-started","title":"Getting started","text":"<p>Check Getting Started.</p>"},{"location":"getting-started/","title":"Vybe Starter","text":"<p>Warning</p> <p>Use the template at  https://github.com/pfeodrippe/vybe-games as your start point, try to run the commands in that README. If you try to use the <code>vybe</code> github project directly, you would have to build everything from scratch, but the deps used in <code>vybe-games</code> use the clojars version, which contains all the dynamic libs you need. Have fun \\o/</p> <p>Note</p> <p>If you are using Linux and you see an error like <code>undefined symbol: GetFontDefault</code>, check https://github.com/pfeodrippe/vybe/issues/4.</p>"},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>This is the minimal amount of code to have physics (with Jolt) + ECS (with Flecs) + rendering (with Raylib) using Vybe. We will talk about each of the parts later, check the code in full below.</p> <pre><code>(ns vybe.example.minimal\n  \"Example with minimal setup, it will load a builtin GLTF (.glb) model with\n  which contains a cube.\"\n  (:require\n   [vybe.flecs :as vf]\n   [vybe.game :as vg]\n   [vybe.raylib.c :as vr.c]\n   [vybe.raylib :as vr]\n   [vybe.type :as vt]))\n\n(defn draw\n  [w delta-time]\n  ;; For debugging\n  #_(def w w)\n\n  ;; Progress the systems (using Flecs).\n  (vf/progress w delta-time)\n\n  ;; Update physics (using Jolt).\n  (vg/physics-update! w delta-time)\n\n  ;; Add some lights (from the blender model).\n  (vg/draw-lights w)\n\n  ;; Render stuff into the screen (using Raylib) using a built-in effect.\n  (vg/with-drawing\n    (vg/with-fx w {:drawing true\n                   :shaders (vg/fx-painting w)}\n      (vr.c/clear-background (vr/Color [255 20 100 255]))\n\n      ;; Here we do a query for the active camera (it's setup when loading the model).\n      (vf/with-query w [_ :vg/camera-active\n                        camera vt/Camera]\n        (vg/with-camera camera\n          (vg/draw-scene w)))\n\n      (vr.c/draw-fps 510 570))))\n\n(defn init\n  []\n  (let [w (vf/make-world)]\n    ;; If you want to enable debugging (debug messages + clerk + flecs explorer),\n    ;; uncomment line below.\n    #_(vg/debug-init! w)\n\n    (vg/start! w 600 600 #'draw\n               (fn [w]\n                 (-&gt; w\n                     ;; Load model (as a resource).\n                     ;; We are going to load a bultin model, but you can use any .glb\n                     ;; resource you have.\n                     (vg/model :my/model (vg/resource \"com/pfeodrippe/vybe/model/minimal.glb\")))))))\n\n#_ (init)\n\n(defn -main\n  \"This is used for testing, don't bother.\"\n  [&amp; _args]\n  ;; We start `init` in a future so it's out of the main thread,\n  ;; `vr/-main` will be in the main thread and it will loop the game draw\n  ;; function for us.\n  (future (init))\n\n  ;; Exit app after some time (for testing).\n  (future\n    (try\n      (Thread/sleep 5000)\n      (System/exit 0)\n      (catch Exception e\n        (println e))))\n\n  ;; Start main thread.\n  (vr/-main))\n</code></pre>"},{"location":"getting-started/#draw","title":"<code>draw</code>","text":"<p>The <code>draw</code> function receives a world (more on it later) and a delta time (time since the last iteration). You won't call this function directly, the Vybe runtime will be calling it for you.</p> <pre><code>  ;; Progress the systems (using Flecs).\n  (vf/progress w delta-time)\n\n  ;; Update physics (using Jolt).\n  (vg/physics-update! w delta-time)\n</code></pre> <p>We are calling <code>vf/progress</code>, which will advance the Flecs (https://www.flecs.dev/flecs/) ECS system (<code>w</code> is a Flecs world), Flecs is a well-written C engine and the core of the Vybe framework. <code>vg/physics-update!</code> handles the physics using Jolt (https://jrouwe.github.io/JoltPhysics/), a C++ physics engine (we use a C wrapper to interact with it).</p> <pre><code>  ;; Add some lights (from the blender model).\n  (vg/draw-lights w)\n\n  ;; Render stuff into the screen (using Raylib) using a built-in effect.\n  (vg/with-drawing\n    (vg/with-fx w {:drawing true\n                   :shaders (vg/fx-painting w)}\n      (vr.c/clear-background (vr/Color [255 20 100 255]))\n\n      ;; Here we do a query for the active camera (it's setup when loading the model).\n      (vf/with-query w [_ :vg/camera-active\n                        camera vt/Camera]\n        (vg/with-camera camera\n          (vg/draw-scene w)))\n\n      (vr.c/draw-fps 510 570))))\n</code></pre> <p>Backed by Raylib (https://www.raylib.com/, we are able to draw some simple lightning (using a custom shader, see the implementation), apply some effects to the screen (<code>vg/with-drawing-fx</code> will render the result to a render texture and draw it into the screen, <code>vg/with-drawing</code> is the version of it that doesn't apply any effect).</p> <p>The namespaces with a 3rd party lib + <code>.c</code> (e.g. <code>vybe.raylib.c</code>, <code>vybe.flecs.c</code>, <code>vybe.jolt.c</code>) are clj wrappers for the respective libs, e.g. <code>vr.c/clear-background</code> will call raylib's <code>ClearBackground</code> (cheatsheet for raylib at https://www.raylib.com/cheatsheet/cheatsheet.html). We use jextract (https://github.com/openjdk/jextract) for these native libs and then read the generated Java classes, it's a fantastic tool made by the same people who have worked in the Panama project.</p> <p>After clearing the background, we have that <code>vf/with-query</code> there, what is it for? We will go more in depth in one of the Flecs sections, but it's iterating over all of the ECS entities that have a <code>:vg/camera-active</code> tag (an identifier, here managed by Vybe) and that have a <code>vt/Camera</code> component (components are like structs types in C, from CLJ we have it reified and can inspect it type, construct an instance for it, generating a native MemorySegment). A query can have as many terms (a term is a binding) as you need, and we have 2 in the case here, we use the retrieved camera (which is the active one and can there only be one in any given time) and call game/raylib related functions to draw a scece using the camera data.</p> <p>Finally, we draw the FPS using raylib's <code>DrawFPS</code>.</p> <p>Yeah, I know, there is a lot to unpack here, but you will see that things integrate with each other very well and with CLJ.</p>"},{"location":"getting-started/#init","title":"<code>init</code>","text":"<p>This function will setup the world, the windows size, pass the <code>draw</code> var to Vybe's runtime and have a initial function that's called from the main thread.</p> <p>Main thead</p> <p>It's important that you initiate any raylib's functionality, specially drawing-related, inside this initial function as we may have (specially in OSX) some issues related to graphics being rendered outside the main thread.</p> <p>The initial function is loading a GLTF model (<code>.glb</code>  is the binary version of it), you can generate a <code>.glb</code> from Blender, for example, it should load things correctly, try it!</p>"},{"location":"requirements/","title":"Requirements","text":"<p>You must use at least Java 22 as we use the new Java foreign's API (aka project Panama).</p>"}]}